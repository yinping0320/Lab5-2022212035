{"version":3,"file":"mxgraphts.min.js","sources":["../../../../node_modules/mxgraph/javascript/dist/build.js","../esm/lib/mxgraphFactory.js","../esm/lib/Editor.js","../esm/lib/Handler.js","../esm/lib/IO.js","../esm/lib/Layout.js","../esm/lib/Model.js","../esm/lib/Shape.js","../esm/lib/Util.js","../esm/lib/View.js","../esm/lib/mxClient.js","../esm/lib/mxgraph-types.js"],"sourcesContent":["(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.2.2.\n\t */\n\tVERSION: '4.2.2',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: navigator.userAgent != null && !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: navigator.userAgent != null && !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0 &&\n\t\t(document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent != null &&\n  \t\t(navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0),\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: /Apple Computer, Inc/.test(navigator.vendor),\n\n\t/**\n\t * Variable: IS_ANDROID\n\t * \n\t * Returns true if the user agent contains Android.\n\t */\n  \tIS_ANDROID: navigator.appVersion.indexOf('Android') >= 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (/iP(hone|od|ad)/.test(navigator.platform)),\n\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: /Google Inc/.test(navigator.vendor),\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: typeof InstallTrigger !== 'undefined',\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.appVersion),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value, not setAttribute.\n\t\tif (document.namespaces != null)\n\t\t{\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent != null &&\n\t\t\t\tnavigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n\t\n\treturn this;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\treturn mxUtils.importNodeImplementation(doc, node, allChildren);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: importNodeImplementation\n\t * \n\t * Full DOM API implementation for importNode without using importNode API call.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNodeImplementation: function(doc, node, allChildren)\n\t{\n\t\tswitch (node.nodeType)\n\t\t{\n\t\t\tcase 1: /* element */\n\t\t\t{\n\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\n\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNodeImplementation(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: /* text */\n\t\t    case 4: /* cdata-section */\n\t\t    case 8: /* comment */\n\t\t    {\n\t\t    \treturn doc.createTextNode((node.nodeValue != null) ? node.nodeValue : node.value);\n\t\t    \tbreak;\n\t\t    }\n\t\t};\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (\"ActiveXObject\" in window)\n\t\t{\n\t\t\tdoc = mxUtils.createMsXmlDocument();\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: createMsXmlDocument\n\t * \n\t * Returns a new, empty Microsoft.XMLDOM document using ActiveXObject.\n\t */\n\tcreateMsXmlDocument: function()\n\t{\n\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\tdoc.async = false;\n\n\t\t// Workaround for parsing errors with SVG DTD\n\t\tdoc.validateOnParse = false;\n\t\tdoc.resolveExternals = false;\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar doc = mxUtils.createMsXmlDocument();\n\t\t\t\tdoc.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\t\t\n\t\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t\t{\n\t\t\txml = mxUtils.getPrettyXml(node, '', '', '');\n\t\t}\n\t\telse if (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t * newline - Option string that represents a linefeed. Default is '\\n'.\n\t */\n\tgetPrettyXml: function(node, tab, indent, newline, ns)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = (tab != null) ? tab : '  ';\n\t\t\tindent = (indent != null) ? indent : '';\n\t\t\tnewline = (newline != null) ? newline : '\\n';\n\t\t\t\n\t\t\tif (node.namespaceURI != null && node.namespaceURI != ns)\n\t\t\t{\n\t\t\t\tns = node.namespaceURI;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('xmlns') == null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('xmlns', node.namespaceURI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_DOCUMENT)\n\t\t\t{\n\t\t\t\tresult.push(mxUtils.getPrettyXml(node.documentElement, tab, indent, newline, ns));\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_DOCUMENT_FRAGMENT)\n\t\t\t{\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_COMMENT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<!--' + value + '-->' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value, false) + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_CDATA)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<![CDATA[' + value + ']]' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each child\n\t\t\t\t// node and appends it here with an indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>' + newline);\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+ node.nodeName + '>' + newline);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push(' />' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t * headers - Optional with headers, eg. {'Authorization': 'token xyz'}\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout, headers)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\tvar setRequestHeaders = req.setRequestHeaders;\n\t\t\n\t\tif (headers)\n\t\t{\n\t\t\treq.setRequestHeaders = function(request, params)\n\t\t\t{\n\t\t\t\tsetRequestHeaders.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tfor (var key in headers)\n\t\t\t\t{\n\t\t\t\t\trequest.setRequestHeader(key, headers[key]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif ((a[i] != null && b[i] == null) ||\n\t\t\t\t\t(a[i] == null && b[i] != null) ||\n\t\t\t\t\t(a[i] != null && b[i] != null &&\n\t\t\t\t\t(a[i].x != b[i].x || a[i].y != b[i].y)))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersectsHotspot\n\t * \n\t * Returns true if the state and the hotspot intersect.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState>\n\t * x - X-coordinate.\n\t * y - Y-coordinate.\n\t * hotspot - Optional size of the hostpot.\n\t * min - Optional min size of the hostpot.\n\t * max - Optional max size of the hostpot.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = -0.5;\n\t\tvar dy = -0.5;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t * fontStyle - Optional font style.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth, fontStyle)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Sets the font style\n\t\tif (fontStyle != null)\n\t\t{\n\t\t\tif ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tvar txtDecor = [];\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t\t{\n\t\t\t\ttxtDecor.push('underline');\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t\t{\n\t\t\t\ttxtDecor.push('line-through');\n\t\t\t}\n\t\t\t\n\t\t\tif (txtDecor.length > 0)\n\t\t\t{\n\t\t\t\tdiv.style.textDecoration = txtDecor.join(' ');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Variable: STYLE_DASH_PATTERN\n\t * \n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: FONT_STRIKETHROUGH\n\t * \n\t * Constant for strikthrough fonts. Default is 8.\n\t */\n\tFONT_STRIKETHROUGH: 8,\n\t\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up, pinch)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument, a boolean argument\n\t * for the mousewheel direction and a boolean to specify if the underlying\n\t * event was a pinch gesture on a touch device.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//To prevent window zoom on trackpad pinch\n\t\t\t\tif (evt.ctrlKey) \n\t\t\t\t{\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar delta = -evt.deltaY;\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, (evt.deltaY == 0) ?  -evt.deltaX > 0 : -evt.deltaY > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\ttarget = target != null ? target : window;\n\t\t\t\t\t\n\t\t\tif (mxClient.IS_SF && !mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar scale = 1;\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturestart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tscale = 1;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturechange', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tvar diff = scale - evt.scale;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(diff) > 0.2)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt, diff < 0, true);\n\t\t\t\t\t\tscale = evt.scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmxEvent.addListener(target, 'gestureend', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar evtCache = [];\n\t\t\t\tvar dx0 = 0;\n\t\t\t\tvar dy0 = 0;\n\t\t\t\t\n\t\t\t\t// Adds basic listeners for graph event dispatching\n\t\t\t\tmxEvent.addGestureListeners(target, mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evt.pointerId != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tevtCache.push(evt);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evtCache.length == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Find this event in the cache and update its record with this event\n\t\t\t\t\t\tfor (var i = 0; i < evtCache.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (evt.pointerId == evtCache[i].pointerId)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tevtCache[i] = evt;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t   \t// Calculate the distance between the two pointers\n\t\t\t\t\t\tvar dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n\t\t\t\t\t\tvar dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n\t\t\t\t\t\tvar tx = Math.abs(dx - dx0);\n\t\t\t\t\t\tvar ty = Math.abs(dy - dy0);\n\t\t\t\t\t\n\t\t\t\t\t\tif (tx > mxEvent.PINCH_THRESHOLD || ty > mxEvent.PINCH_THRESHOLD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n\t\t\t\t\t\t\tvar cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfunct(evtCache[0], (tx > ty) ? dx > dx0 : dy > dy0, true, cx, cy);\n\t\t\t\t\t\t\n\t\t\t\t\t\t   \t// Cache the distance for the next move event \n\t\t\t\t\t\t\tdx0 = dx;\n\t\t\t\t\t\t\tdy0 = dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tevtCache = [];\n\t\t\t\t\tdx0 = 0;\n\t\t\t\t\tdy0 = 0;\n\t\t\t\t}));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.addListener(target, 'wheel', wheelHandler);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset',\n\n\t/**\n\t * Variable: PINCH_THRESHOLD\n\t *\n\t * Threshold for pinch gestures to fire a mouse wheel event.\n\t * Default value is 10.\n\t */\n\tPINCH_THRESHOLD: 10\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2020, JGraph Ltd\n * Copyright (c) 2006-2020, draw.io AG\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn (this.request != null) ? this.request.status : null;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error. Unused in this implementation, intended for overriden function.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: resizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent == null ||\n\t\tnavigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: previewOffset\n *\n * Optional <mxPoint> that specifies the offset of the preview in pixels.\n */\nmxDragSource.prototype.previewOffset = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addActionCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n};\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n};\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url != null && url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n * noHover - Optional boolean to disable hover state.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active, noHover)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\tif (!noHover)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tif (!noHover)\n\t\t{\n\t\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.alt = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: visitStatesRecursive\n * \n * Visits the given state and all its descendants to the given canvas recursively.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.shape.beforePaint(canvas);\n\t\tstate.shape.paint(canvas);\n\t\tstate.shape.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.text.beforePaint(canvas);\n\t\tstate.text.paint(canvas);\n\t\tstate.text.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser and checks if base tag is used.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n\t\n\t// Activates workaround for gradient ID resolution if base tag is used.\n\tmxSvgCanvas2D.prototype.useAbsoluteIds = !mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t!mxClient.IS_EDGE && document.getElementsByTagName('base').length > 0;\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateText\n * \n * Returns the alternate text string for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.getAlternateText = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\treturn (str != null) ? this.foAltText : null;\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tvar text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\tvar s = this.state;\n\n\tif (text != null && s.fontSize > 0)\n\t{\n\t\tvar dy = (valign == mxConstants.ALIGN_TOP) ? 1 :\n\t\t\t(valign == mxConstants.ALIGN_BOTTOM) ? 0 : 0.3;\n\t\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t(align == mxConstants.ALIGN_LEFT) ? 'start' :\n\t\t\t'middle';\n\t\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(x + s.dx));\n\t\talt.setAttribute('y', Math.round(y + s.dy + dy * s.fontSize));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\talt.setAttribute('font-size', Math.round(s.fontSize) + 'px');\n\n\t\t// Text-anchor start is default in SVG\n\t\tif (anchor != 'start')\n\t\t{\n\t\t\talt.setAttribute('text-anchor', anchor);\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tif (txtDecor.length > 0)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', txtDecor.join(' '));\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, text);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (this.root.ownerDocument == document && this.useAbsoluteIds)\n\t\t\t{\n\t\t\t\t// Workaround for no fill with base tag in page (escape brackets)\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str)\n{\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = '<div><div>' + this.convertHtml(val) + '</div></div>';\n\t}\n\n\t// IE uses this code for export as it cannot render foreignObjects\n\tif (!mxClient.IS_IE && !mxClient.IS_IE11 && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tvar div2 = document.createElement('div');\n\t\t\tvar div3 = div2.cloneNode(false);\n\t\t\t\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val);\n\t\t\t}\n\t\t\t\n\t\t\tdiv3.appendChild(div2);\n\t\t\tdiv.appendChild(div3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tval = '<div><div>' + mxUtils.getXml(val) + '</div></div>';\n\t\t}\n\t\t\n\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' + val + '</div>';\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn  mxUtils.parseXml(val).documentElement;\n\t}\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null)\n\t{\n\t\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n\t}\n};\n\n/**\n * Function: addForeignObject\n * \n * Creates a foreignObject for the given string and adds it to the given root.\n */\nmxSvgCanvas2D.prototype.addForeignObject = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root)\n{\n\tvar group = this.createElement('g');\n\tvar fo = this.createElement('foreignObject');\n\t\n\t// Workarounds for print clipping and static position in Safari\n\tfo.setAttribute('style', 'overflow: visible; text-align: left;');\n\tfo.setAttribute('pointer-events', 'none');\n\t\n\t// Import needed for older versions of IE\n\tif (div.ownerDocument != document)\n\t{\n\t\tdiv = mxUtils.importNodeImplementation(fo.ownerDocument, div, true);\n\t}\n\n\tfo.appendChild(div);\n\tgroup.appendChild(fo);\n\n\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n\t\n\t// Alternate content if foreignObject not supported\n\tif (this.root.ownerDocument != document)\n\t{\n\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\n\t\tif (alt != null)\n\t\t{\n\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\tvar sw = this.createElement('switch');\n\t\t\tsw.appendChild(fo);\n\t\t\tsw.appendChild(alt);\n\t\t\tgroup.appendChild(sw);\n\t\t}\n\t}\n\t\n\troot.appendChild(group);\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.prototype.updateTextNodes = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g)\n{\n\tvar s = this.state.scale;\n\n\tmxSvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip,\n\t\t(this.state.fontBackgroundColor != null) ? this.state.fontBackgroundColor : null,\n\t\t(this.state.fontBorderColor != null) ? this.state.fontBorderColor : null,\n\t\t'display: flex; align-items: unsafe ' +\n\t\t((valign == mxConstants.ALIGN_TOP) ? 'flex-start' :\n\t\t((valign == mxConstants.ALIGN_BOTTOM) ? 'flex-end' : 'center'))  + '; ' +\n\t\t'justify-content: unsafe ' + ((align == mxConstants.ALIGN_LEFT) ? 'flex-start' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'flex-end' : 'center'))  + '; ',\n\t\tthis.getTextCss(), s, mxUtils.bind(this, function(dx, dy, flex, item, block)\n\t{\n\t\tx += this.state.dx;\n\t\ty += this.state.dy;\n\n\t\tvar fo = g.firstChild;\n\t\tvar div = fo.firstChild;\n\t\tvar box = div.firstChild;\n\t\tvar text = box.firstChild;\n\t\tvar r = ((this.rotateHtml) ? this.state.rotation : 0) + ((rotation != null) ? rotation : 0);\n\t\tvar t = ((this.foOffset != 0) ? 'translate(' + this.foOffset + ' ' + this.foOffset + ')' : '') +\n\t\t\t((s != 1) ? 'scale(' + s + ')' : '');\n\t\t\n\t\ttext.setAttribute('style', block);\n\t\tbox.setAttribute('style', item);\n\t\t\n\t\t// Workaround for clipping in Webkit with scrolling and zoom\n\t\tfo.setAttribute('width', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tfo.setAttribute('height', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tvar yp = Math.round(y + dy);\n\t\t\n\t\t// Allows for negative values which are causing problems with\n\t\t// transformed content where the top edge of the foreignObject\n\t\t// limits the text box being moved further up in the diagram.\n\t\t// KNOWN: Possible clipping problems with zoom and scrolling\n\t\t// but this is normally not used with scrollbars as the\n\t\t// coordinates are always positive with scrollbars.\n\t\t// Margin-top is ignored in Safari and no negative values allowed\n\t\t// for padding.\n\t\tif (yp < 0)\n\t\t{\n\t\t\tfo.setAttribute('y', yp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfo.removeAttribute('y');\n\t\t\tflex += 'padding-top: ' + yp + 'px; ';\n\t\t}\n\t\t\n\t\tdiv.setAttribute('style', flex + 'margin-left: ' + Math.round(x + dx) + 'px;');\n\t\tt += ((r != 0) ? ('rotate(' + r + ' ' + x + ' ' + y + ')') : '');\n\n\t\t// Output allows for reflow but Safari cannot use absolute position,\n\t\t// transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n\t\tif (t != '')\n\t\t{\t\n\t\t\tg.setAttribute('transform', t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('transform');\n\t\t}\n\t\t\n\t\tif (this.state.alpha != 1)\n\t\t{\n\t\t\tg.setAttribute('opacity', this.state.alpha);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('opacity');\n\t\t}\n\t}));\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.createCss = function(w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, s, callback)\n{\n\tvar item = 'box-sizing: border-box; font-size: 0; text-align: ' + ((align == mxConstants.ALIGN_LEFT) ? 'left' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'right' : 'center')) + '; ';\n\tvar pt = mxUtils.getAlignmentAsPoint(align, valign);\n\tvar ofl = 'overflow: hidden; ';\n\tvar fw = 'width: 1px; ';\n\tvar fh = 'height: 1px; ';\n\tvar dx = pt.x * w;\n\tvar dy = pt.y * h;\n\t\n\tif (clip)\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\tdy = 0;\n\t}\n\telse if (overflow == 'fill')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tfh = 'height: ' + Math.round(h) + 'px; ';\n\t\tblock += 'width: 100%; height: 100%; ';\n\t\titem += fw + fh;\n\t}\n\telse if (overflow == 'width')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tblock += 'width: 100%; ';\n\t\titem += fw;\n\t\tdy = 0;\n\t\t\n\t\tif (h > 0)\n\t\t{\n\t\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\t}\n\t}\n\telse\n\t{\n\t\tofl = '';\n\t\tdy = 0;\n\t}\n\t\n\tvar bgc = '';\n\t\n\tif (bg != null)\n\t{\n\t\tbgc += 'background-color: ' + bg + '; ';\n\t}\n\t\n\tif (border != null)\n\t{\n\t\tbgc += 'border: 1px solid ' + border + '; ';\n\t}\n\t\n\tif (ofl == '' || clip)\n\t{\n\t\tblock += bgc;\n\t}\n\telse\n\t{\n\t\titem += bgc;\n\t}\n\n\tif (wrap && w > 0)\n\t{\n\t\tblock += 'white-space: normal; word-wrap: ' + mxConstants.WORD_WRAP + '; ';\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\t\n\t\tif (ofl != '' && overflow != 'fill')\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tblock += 'white-space: nowrap; ';\n\t\t\n\t\tif (ofl == '')\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t}\n\t\n\tcallback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getTextCss = function()\n{\n\tvar s = this.state;\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\tvar css = 'display: inline-block; font-size: ' + s.fontSize + 'px; ' +\n\t\t'font-family: ' + s.fontFamily + '; color: ' + s.fontColor + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? this.pointerEventsValue : 'none') + '; ';\n\t\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\n\tvar deco = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar div = this.createDiv(str);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div != null)\n\t\t\t{\n\t\t\t\tif (dir != null)\n\t\t\t\t{\n\t\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addForeignObject(x, y, w, h, str, align, valign, wrap,\n\t\t\t\t\tformat, overflow, clip, rotation, dir, div, this.root);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x + this.state.dx, y + this.state.dy, w, h, str,\n\t\t\t\talign, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: plainText\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\t\t\t\n\t// Ignores pointer events\n\tif (!this.pointerEvents && this.originalRoot == null)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tif (txtDecor.length > 0)\n\t{\n\t\tnode.setAttribute('text-decoration', txtDecor.join(' '));\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bbox == null || bbox.width == 0 || bbox.height == 0)\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: guideX\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: guideY\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Variable: tolerance\n * \n * Default tolerance in px if grid is disabled. Default is 2.\n */\nmxGuide.prototype.tolerance = 2;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function(gridEnabled)\n{\n\treturn (gridEnabled && this.graph.gridEnabled) ? this.graph.gridSize / 2 : this.tolerance;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar tt = this.getGuideTolerance(gridEnabled) * scale;\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdelta.x = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(x - left) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x;\n\t\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x - bounds.width;\n\t\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = x;\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdelta.y = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(y - top) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y;\n\t\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y - bounds.height;\n\t\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = y;\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, true);\n\t\t\t\t\tsnapX.call(this, state.x, state, false);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, true);\n\t\t\t\t\tsnapY.call(this, state.y, state, false);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells to the raster if not aligned\n\t\tthis.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n\t\tdelta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y)\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + delta.y - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy),\n\t\t\t\t\tnew mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + delta.x - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY),\n\t\t\t\t\tnew mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: getDelta\n * \n * Rounds to pixels for virtual states (eg. page guides)\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\tvar s = this.graph.view.scale;\n\t\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: getGuideColor\n * \n * Returns the color for the given state.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.beforePaint(canvas);\n\t\tthis.paint(canvas);\n\t\tthis.afterPaint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: updateHtmlColors\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: updateHtmlBounds\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: beforePaint\n * \n * Invoked before paint is called.\n */\nmxShape.prototype.beforePaint = function(c) { }\n\n/**\n * Function: afterPaint\n * \n * Invokes after paint was called.\n */\nmxShape.prototype.afterPaint = function(c) { }\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\tvar stack = canvas.states.slice();\n\t\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n\t\n\t// Restores stack for unequal count of save/restore calls\n\tif (canvas.states.length != stack.length)\n\t{\n\t\tcanvas.states = stack;\n\t}\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintCurvedLine\n * \n * Paints a curved line.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxArrowConnector.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintMarker\n * \n * Paints the marker.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\t\n\tif (update)\n\t{\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt,\n\t\t\tthis.overflow, this.clipped, this.getTextRotation(), dir);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tif (mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.redrawHtmlShapeWithCss3();\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\t\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlFilter();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlTransform();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null)\n\t\t\t{\n\t\t\t\t// Specifies if events should be handled\n\t\t\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: getContentNode\n * \n * Returns the node that contains the rendered input.\n */\nmxText.prototype.getContentNode = function()\n{\n\tvar result = this.node;\n\t\n\tif (result != null)\n\t{\n\t\t// Rendered with no foreignObject\n\t\tif (result.ownerSVGElement == null)\n\t\t{\n\t\t\tresult = this.node.firstChild.firstChild;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Innermost DIV that contains the actual content\n\t\t\tresult = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\t// Uses second inner DIV for font metrics\n\t\t\t\tnode = node.firstChild.firstChild.firstChild.firstChild;\n\t\t\t\toh = node.offsetHeight * this.scale;\n\t\t\t\t\n\t\t\t\tif (this.overflow == 'width')\n\t\t\t\t{\n\t\t\t\t\tow = this.boundingBox.width;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tow = node.offsetWidth * this.scale;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: getHtmlValue\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getHtmlValue = function()\n{\n\tvar val = this.value;\n\t\n\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t{\n\t\tval = mxUtils.htmlEntities(val, false);\n\t}\n\t\n\t// Handles trailing newlines to make sure they are visible in rendering output\n\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\n\treturn val;\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getTextCss = function()\n{\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\tmxConstants.LINE_HEIGHT;\n\n\tvar css = 'display: inline-block; font-size: ' + this.size + 'px; ' +\n\t\t'font-family: ' + this.family + '; color: ' + this.color + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? 'all' : 'none') + '; ';\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\t\n\tvar deco = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.redrawHtmlShapeWithCss3();\t\n\t}\n\telse\n\t{\n\t\tvar style = this.node.style;\n\t\n\t\t// Resets CSS styles\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.overflow = '';\n\t\tstyle.width = '';\n\t\tstyle.height = '';\n\t\t\n\t\tthis.updateValue();\n\t\tthis.updateFont(this.node);\n\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\t\n\t\tthis.offsetWidth = null;\n\t\tthis.offsetHeight = null;\n\t\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t{\n\t\t\tthis.updateHtmlFilter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateHtmlTransform();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHtmlShapeWithCss3\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShapeWithCss3 = function()\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar flex = 'position: absolute; left: ' + Math.round(this.bounds.x) + 'px; ' +\n\t\t'top: ' + Math.round(this.bounds.y) + 'px; pointer-events: none; ';\n\tvar block = this.getTextCss();\n\t\n\tmxSvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped,\n\t\t(this.background != null) ? mxUtils.htmlEntities(this.background) : null,\n\t\t(this.border != null) ? mxUtils.htmlEntities(this.border) : null,\n\t\tflex, block, this.scale, mxUtils.bind(this, function(dx, dy, flex, item, block, ofl)\n\t{\n\t\tvar r = this.getTextRotation();\n\t\tvar tr = ((this.scale != 1) ? 'scale(' + this.scale + ') ' : '') +\n\t\t\t((r != 0) ? 'rotate(' + r + 'deg) ' : '') +\n\t\t\t((this.margin.x != 0 || this.margin.y != 0) ?\n\t\t\t\t'translate(' + (this.margin.x * 100) + '%,' +\n\t\t\t\t\t(this.margin.y * 100) + '%)' : '');\n\t\t\n\t\tif (tr != '')\n\t\t{\n\t\t\ttr = 'transform-origin: 0 0; transform: ' + tr + '; ';\n\t\t}\n\n\t\tif (ofl == '')\n\t\t{\n\t\t\tflex += item;\n\t\t\titem = 'display:inline-block; min-width: 100%; ' + tr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titem += tr;\n\t\t\t\n\t\t\tif (mxClient.IS_SF)\n\t\t\t{\n\t\t\t\titem += '-webkit-clip-path: content-box;';\n\t\t\t}\n\t\t}\n\n\t\tif (this.opacity < 100)\n\t\t{\n\t\t\tblock += 'opacity: ' + (this.opacity / 100) + '; ';\n\t\t}\n\t\t\n\t\tthis.node.setAttribute('style', flex);\n\t\t\n\t\tvar html = (mxUtils.isNode(this.value)) ? this.value.outerHTML : this.getHtmlValue();\n\t\t\n\t\tif (this.node.firstChild == null)\n\t\t{\n\t\t\tthis.node.innerHTML = '<div><div>' + html +'</div></div>';\n\t\t}\n\n\t\tthis.node.firstChild.firstChild.setAttribute('style', block);\n\t\tthis.node.firstChild.setAttribute('style', item);\n\t}));\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%) ' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ') ' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: updateInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tstyle.textDecoration = txtDecor.join(' ');\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth, vertical)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.vertical = (vertical != null) ? vertical : this.vertical;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: vertical\n * \n * Whether to paint a vertical line.\n */\nmxLine.prototype.vertical = false;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.begin();\n\n\tif (this.vertical)\n\t{\n\t\tvar mid = x + w / 2;\n\t\tc.moveTo(mid, y);\n\t\tc.lineTo(mid, y + h);\n\t}\n\telse\n\t{\n\t\tvar mid = y + h / 2;\n\t\tc.moveTo(x, mid);\n\t\tc.lineTo(x + w, mid);\n\t}\n\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t\tthis.indicator.redraw();\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getCylinderSize\n *\n * Returns the cylinder size.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getTitleSize\n * \n * Returns the title size.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounding box for the label.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getSwimlaneArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getSwimlaneArcSize = function(w, h, start)\n{\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\treturn Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\t\treturn start * f * 3; \n\t}\n};\n\n/**\n * Function: isHorizontal\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getSwimlaneArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: resizeCell\n * \n * Notified when a cell is being resized in a parent that has automatic\n * layout to update the other cells in the layout.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * bounds - <mxRectangle> that represents the new cell bounds.\n */\nmxGraphLayout.prototype.resizeCell = function(cell, bounds) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\treturn this.graph.getCurrentCellStyle(cell)[key]\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (this.horizontal) ?\n\t\t\t\t((geo1.x == geo2.x) ? 0 : ((geo1.x > geo2.x > 0) ? 1 : -1)) :\n\t\t\t\t((geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1));\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: setChildGeometry\n * \n * Sets the specific geometry to the given child cell.\n * \n * Parameters:\n * \n * child - The given child of <mxCell>.\n * geo - The specific geometry of <mxGeometry>.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: updateParentGeometry\n * \n * Updates the geometry of the given parent cell.\n * \n * Parameters:\n * \n * parent - The given parent of <mxCell>.\n * pgeo - The new <mxGeometry> for parent.\n * last - The last <mxGeometry>.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: processNodeOutgoing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: maxDistanceLimit\n * \n * Maximal distance limit. Default is 500. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Variable: checkOverlap\n * \n * Specifies if only overlapping edges should be considered\n * parallel. Default is false.\n */\nmxParallelEdgeLayout.prototype.checkOverlap = false;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent, cells)\n{\n\tvar lookup = this.findParallels(parent, cells);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent, cells)\n{\n\tvar lookup = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!this.isEdgeIgnored(cell))\n\t\t{\n\t\t\tvar id = this.getEdgeId(cell);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(cell);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\taddCell(cells[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\taddCell(model.getChildAt(parent, i));\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\tvar pts = '';\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\tif (this.checkOverlap)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(edge);\n\t\t\t\n\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tvar tmp = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < state.absolutePoints.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = state.absolutePoints[i];\n\t\t\t\t\t\n\t\t\t\t\tif (pt != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.push(pt.x, pt.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpts = tmp.join(',');\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn ((src > trg) ? trg + '-' + src : src + '-' + trg) + pts;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: master\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n */\nmxGraphModel.prototype.cloneCell = function(cell, includeChildren)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], includeChildren)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tincludeChildren = (includeChildren != null) ? includeChildren : true;\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the <sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 ||\n\t\t\t\tdoc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: useCssTransforms\n * \n * Returns true if CSS transforms should be used for scaling content.\n * This returns true if foreignObject is supported and we're not in Safari\n * as it has clipping bugs for transformed CSS content with foreignObjects.\n */\nmxPrintPreview.prototype.useCssTransforms = function()\n{\n\treturn !mxClient.NO_FO && !mxClient.IS_SF;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (this.useCssTransforms())\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup but ignores\n\t\t\t\t\t// edge labels where width and height is set to 0\n\t\t\t\t\tif (bbox != null && bbox.width > 0 && bbox.height > 0 &&\n\t\t\t\t\t\t!mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.STYLE_ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Variable: unscaledHeight\n * \n * Holds the unscaled height of the state.\n */\nmxCellState.prototype.unscaledHeight = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n\tthis.unscaledHeight = state.unscaledHeight;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\tclone.unscaledHeight = this.unscaledHeight;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tvar css = mxUtils.getCurrentStyle(root);\n\t\t\t\t\n\t\t\t\tif (css != null)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tabsoluteRoot = css.position == 'absolute';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = txtDecor.join(' ');\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Checks if the style of the given <mxCellState> contains 'inherit',\n * 'indicated' or 'swimlane' for colors that support those keywords.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR,\n\t\t\tmxConstants.STYLE_GRADIENTCOLOR, mxConstants.STYLE_FONTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar shape = (key == mxConstants.STYLE_FONTCOLOR) ?\n\t\tstate.text : state.shape;\n\t\n\tif (shape != null)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar value = shape[field];\n\t\tvar referenced = null;\n\t\t\n\t\tif (value == 'inherit')\n\t\t{\n\t\t\treferenced = graph.model.getParent(state.cell);\n\t\t}\n\t\telse if (value == 'swimlane')\n\t\t{\n\t\t\tshape[field] = (key == mxConstants.STYLE_STROKECOLOR ||\n\t\t\t\tkey == mxConstants.STYLE_FONTCOLOR) ?\n\t\t\t\t'#000000' : '#ffffff';\n\t\t\t\n\t\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t\t{\n\t\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treferenced = state.cell;\n\t\t\t}\n\t\t\t\n\t\t\treferenced = graph.getSwimlane(referenced);\n\t\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t\t}\n\t\telse if (value == 'indicated' && state.shape != null)\n\t\t{\n\t\t\tshape[field] = state.shape.indicatorColor;\n\t\t}\n\t\telse if (key != mxConstants.STYLE_FILLCOLOR &&\n\t\t\tvalue == mxConstants.STYLE_FILLCOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_FILLCOLOR];\n\t\t}\n\t\telse if (key != mxConstants.STYLE_STROKECOLOR &&\n\t\t\tvalue == mxConstants.STYLE_STROKECOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_STROKECOLOR];\n\t\t}\n\t\n\t\tif (referenced != null)\n\t\t{\n\t\t\tvar rstate = graph.getView().getState(referenced);\n\t\t\tshape[field] = null;\n\t\t\t\n\t\t\tif (rstate != null)\n\t\t\t{\n\t\t\t\tvar rshape = (key == mxConstants.STYLE_FONTCOLOR) ? rstate.text : rstate.shape;\n\t\t\t\t\n\t\t\t\tif (rshape != null && field != 'indicatorColor')\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rshape[field];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rstate.style[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\tthis.resolveColor(state, 'color', mxConstants.STYLE_FONTCOLOR);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\tstate.text.bounds == null || !state.text.bounds.equals(bounds))\n\t\t{\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\t\n\t// Updates indicator shape\n\tif (state.shape != null && state.shape.indicatorShape !=\n\t\tthis.getShape(state.view.graph.getIndicatorShape(state)))\n\t{\n\t\tif (state.shape.indicator != null)\n\t\t{\n\t\t\tstate.shape.indicator.destroy();\n\t\t\tstate.shape.indicator = null;\n\t\t}\n\t\t\n\t\tthis.createIndicatorShape(state);\n\t\t\n\t\tif (state.shape.indicatorShape != null)\n\t\t{\n\t\t\tstate.shape.indicator = new state.shape.indicatorShape();\n\t\t\tstate.shape.indicator.dialect = state.shape.dialect;\n\t\t\tstate.shape.indicator.init(state.node);\n\t\t\tforce = true;\n\t\t}\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function(state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\t \t\n\t \tif (source != null)\n\t \t{\n \t\t\tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\n\t\t \tif (sourceGeometry.relative)\n\t\t \t{\n\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (target != null)\n\t\t \t{\n\t\t \t\tisSourceLeft = ((pe != null) ? pe.x : target.x + target.width) < ((p0 != null) ? p0.x : source.x);\n\t\t \t}\n\t \t}\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\t \t\n\t \tif (target != null)\n\t \t{\n\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t \tif (targetGeometry.relative)\n\t\t \t{\n\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (source != null)\n\t\t \t{\n\t\t \t\tisTargetLeft = ((p0 != null) ? p0.x : source.x + source.width) < ((pe != null) ? pe.x : target.x);\n\t\t \t}\n\t \t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\t\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function(state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function(state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tSegmentConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\t\tvar tol = 1;\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n\t\t\tpt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale))\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (controlHints != null && controlHints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar hints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < controlHints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, controlHints[i], true);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\thints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (hints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: scalePointArray\n\t * \n\t * Scales an array of <mxPoint>\n\t * \n\t * Parameters:\n\t * \n\t * points - array of <mxPoint> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscalePointArray: function(points, scale)\n\t{\n\t\tvar result = [];\n\n\t\tif (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = new mxPoint(Math.round(points[i].x / scale * 10) / 10,\n\t\t\t\t\t\t\t\t\t\tMath.round(points[i].y / scale * 10) / 10);\n\t\t\t\t\tresult[i] = pt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: scaleCellState\n\t * \n\t * Scales an <mxCellState>\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscaleCellState: function(state, scale)\n\t{\n\t\tvar result = null;\n\n\t\tif (state != null)\n\t\t{\n\t\t\tresult = state.clone();\n\t\t\tresult.setRect(Math.round(state.x / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.y / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.width / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.height / scale * 10) / 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar sourceBuffer = mxEdgeStyle.getJettySize(state, true);\n\t\tvar targetBuffer = mxEdgeStyle.getJettySize(state, false);\n\t\t\n\t\t//console.log('sourceBuffer', sourceBuffer);\n\t\t//console.log('targetBuffer', targetBuffer);\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\ttargetBuffer = Math.max(sourceBuffer, targetBuffer);\n\t\t\tsourceBuffer = targetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = targetBuffer + sourceBuffer;\n\t\t// console.log('totalBuffer', totalBuffer);\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (controlHints != null &&\n\t\t\t\tcontrolHints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('source rotation', rotation);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('target rotation', rotation);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t//console.log('source' , sourceX, sourceY, sourceWidth, sourceHeight);\n\t\t//console.log('targetX' , targetX, targetY, targetWidth, targetHeight);\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [sourceBuffer, targetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\t// 0 | 1\n\t\t// -----\n\t\t// 3 | 2\n\t\t\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.log('quad', quad);\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\n\t\t//console.log('routePattern', routePattern);\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= sourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0] * state.view.scale * 10) / 10,\n\t\t\t\t\t\t\t\t\tMath.round(mxEdgeStyle.wayPoints1[i][1] * state.view.scale * 10) / 10));\n\t\t}\n\t\t\n\t\t//console.log(result);\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = (geo.offset != null) ? geo.offset : this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.unscaledWidth + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.unscaledHeight + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\tstate.unscaledHeight = geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt, ignoreScale)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\tvar scale = ignoreScale ? 1 : this.scale\n\t\t\n\t    return new mxPoint(scale * (pt.x + this.translate.x + orig.x),\n\t    \t\tscale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Fires event only for one pointer per gesture\n\t\tvar pointerId = null;\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\tpointerId = evt.pointerId;\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt) && (pointerId == null || evt.pointerId == pointerId))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t\t\n\t\t\tpointerId = null;\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: createHtml\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: createVml\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient-, font- and indicatorColors special keywords\n * can be used. The inherit keyword for one of these colors will inherit the\n * color for the same key from the parent cell. The swimlane keyword does the\n * same, but inherits from the nearest swimlane in the ancestor hierarchy.\n * Finally, the indicated keyword will use the color of the indicator as the\n * color for the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.tooltipHandler != null && this.tooltipHandler.div != null &&\n\t\t\tthis.tooltipHandler.div != evt.relatedTarget)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n * \n * Parameters:\n * \n * ignoreFn - Optional function that takes a change and returns true if the\n * change should be ignored.\n * \n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes, ignoreFn)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange &&\n\t\t\t(ignoreFn == null || !ignoreFn(change)))\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null &&\n\t\t\t\tchange.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null,\n\t\t\t\t\tmxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected || (state.cell != cell &&\n\t\t\t\t\t\tthis.model.isAncestor(state.cell, cell));\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSwimlaneSelectionEnabled())\n\t\t{\n\t\t\tcell = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t\t\n\t\t\tif (cell != null && (!this.isToggleEvent(evt) ||\n\t\t\t\t!mxEvent.isAltDown(evt)))\n\t\t\t{\n\t\t\t\tvar temp = cell;\n\t\t\t\tvar swimlanes = [];\n\t\t\t\t\n\t\t\t\twhile (temp != null)\n\t\t\t\t{\n\t\t\t\t\ttemp = this.model.getParent(temp);\n\t\t\t\t\tvar state = this.view.getState(temp);\n\t\t\t\t\t\n\t\t\t\t\tif (this.isSwimlane(temp) && state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tswimlanes.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Selects ancestors for selected swimlanes\n\t\t\t\tif (swimlanes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tswimlanes = swimlanes.reverse();\n\t\t\t\t\tswimlanes.splice(0, 0, cell);\n\t\t\t\t\tswimlanes.push(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < swimlanes.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellSelected(swimlanes[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcell = swimlanes[(this.isToggleEvent(evt)) ?\n\t\t\t\t\t\t\t\ti : i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse if (!this.isToggleEvent(evt))\n\t\t{\n\t\t\tthis.clearSelection();\n\t\t}\n\t}\n};\n\n/**\n * Function: isSiblingSelected\n * \n * Returns true if any sibling of the given cell is selected.\n */\nmxGraph.prototype.isSiblingSelected = function(cell)\n{\n\tvar model = this.model;\n\tvar parent = model.getParent(cell);\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (cell != child && this.isCellSelected(child))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n\t\tvar height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCurrentCellStyle\n * \n * Returns the style for the given cell from the cell state, if one exists,\n * or using <getCellStyle>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.getCurrentCellStyle = function(cell, ignoreState)\n{\n\tvar state = (ignoreState) ? null : this.view.getState(cell);\n\t\n\treturn (state != null) ? state.style : this.getCellStyle(cell);\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\tthis.setCellStyles(key, value, cells);\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\tvalue = !((current & flag) == flag);\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var style = this.getCurrentCellStyle(edge);\n *     var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *         mxConstants.ELBOW_HORIZONTAL);\n *     var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *         mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *     this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 1 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getCellsForUngroup();\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t\t\n\t\t\t\t\t// Fix relative child cells\n\t\t\t\t\tfor (var j = 0; j < children.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(children[j]);\n\t\t\t\t\t\tvar geo = this.getCellGeometry(children[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && geo != null && geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = state.origin.x;\n\t\t\t\t\t\t\tgeo.y = state.origin.y;\n\t\t\t\t\t\t\tgeo.relative = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(children[j], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForUngroup\n * \n * Returns the selection cells that can be ungrouped.\n */\nmxGraph.prototype.getCellsForUngroup = function()\n{\n\tvar cells = this.getSelectionCells();\n\n\t// Finds the cells with children\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.model.isVertex(cells[i]) &&\n\t\t\tthis.model.getChildCount(cells[i]) > 0)\n\t\t{\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t}\n\n\treturn tmp;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tvar size = (this.isSwimlane(cells[i])) ?\n\t\t\t\t\t\t\tthis.getActualStartSize(cells[i], true) : new mxRectangle();\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - size.x - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - size.y - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + size.x + leftBorder + rightBorder + size.width);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + size.y + topBorder + bottomBorder + size.height);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + size.x - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + size.y - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n * absolute - Optional boolean indicating of cells should be kept at\n * their absolute position. Default is false.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target, absolute)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, (absolute != null) ? absolute : false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n * x - Integer that specifies the x-coordinate of the drop location.\n * y - Integer that specifies the y-coordinate of the drop location.\n * parent - Optional parent to insert the cell. If null the parent of\n * the edge is used.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy, x, y, parent)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tparent = (parent != null) ? parent : this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar style = this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n * textWidth - Optional maximum text width for word wrapping.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell, textWidth)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTFAMILY], textWidth,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTSTYLE]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar prev = this.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\tvar prev = [];\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tprev.push(this.cellResized(cells[i], bounds[i], false, recurse));\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar prev = this.model.getGeometry(cell);\n\n\tif (prev != null && (prev.x != bounds.x || prev.y != bounds.y ||\n\t\tprev.width != bounds.width || prev.height != bounds.height))\n\t{\n\t\tvar geo = prev.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = (geo.width != 0) ? newGeo.width / geo.width : 1;\n\tvar dy = (geo.height != 0) ? newGeo.height / geo.height : 1;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\tvar origCells = cells;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t\t\n\t\t\t\t// Restores parent edge on cloned edge labels\n\t\t\t\tif (clone)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\tvar parent = this.model.getParent(origCells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && geo.relative &&\n\t\t\t\t\t\t\tthis.model.isEdge(parent) &&\n\t\t\t\t\t\t\tthis.model.contains(parent))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.model.add(parent, cells[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar style = this.getCurrentCellStyle(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar angle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (angle != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, angle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: snapDelta\n * \n * Snaps the given delta with the given scaled bounds.\n */\nmxGraph.prototype.snapDelta = function(delta, bounds, ignoreGrid, ignoreHorizontal, ignoreVertical)\n{\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\t\n\tif (!ignoreGrid && this.gridEnabled)\n\t{\n\t\tvar tol = this.gridSize * s * 0.5;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x- tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = this.snap(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\n\t\t\tvar ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = this.snap(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tol = 0.5 * s;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x - tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = Math.round(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\t\t\n\t\t\tvar ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = Math.round(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_WHITE_SPACE] == 'wrap';\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_OVERFLOW] == 'hidden';\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\tvar size = parseInt(mxUtils.getValue(style,\n\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\n\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t{\n\t\tresult.height = size;\n\t}\n\telse\n\t{\n\t\tresult.width = size;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSwimlaneDirection\n * \n * Returns the direction for the given swimlane style.\n */\nmxGraph.prototype.getSwimlaneDirection = function(style)\n{\n\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\tvar h = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true);\n\tvar n = (h) ? 0 : 3;\n\t\n\tif (dir == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tn--;\n\t}\n\telse if (dir == mxConstants.DIRECTION_WEST)\n\t{\n\t\tn += 2;\n\t}\n\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tn += 1;\n\t}\n\t\n\tvar mod = mxUtils.mod(n, 2);\n\t\n\tif (flipH && mod == 1)\n\t{\n\t\tn += 2;\n\t}\n\t\n\tif (flipV && mod == 0)\n\t{\n\t\tn += 2;\n\t}\n\t\n\treturn [mxConstants.DIRECTION_NORTH, mxConstants.DIRECTION_EAST,\n\t\tmxConstants.DIRECTION_SOUTH, mxConstants.DIRECTION_WEST]\n\t\t[mxUtils.mod(n, 4)];\n};\n\n/**\n * Function: getActualStartSize\n * \n * Returns the actual start size of the given swimlane taking into account\n * direction and horizontal and vertial flip styles. The start size is\n * returned as an <mxRectangle> where top, left, bottom, right start sizes\n * are returned as x, y, height and width, respectively.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getActualStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\t\n\tif (this.isSwimlane(swimlane, ignoreState))\n\t{\n\t\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\t\tvar size = parseInt(mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE,\n\t\t\tmxConstants.DEFAULT_STARTSIZE));\n\t\tvar dir = this.getSwimlaneDirection(style);\n\t\t\n\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tresult.y = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tresult.x = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: isTransparentState\n * \n * Returns true if the given state has no stroke- or fillcolor and no image.\n * \n * Parameters:\n * \n * state - <mxCellState> to check.\n */\nmxGraph.prototype.isTransparentState = function(state)\n{\n\tvar result = false;\n\t\n\tif (state != null)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\tresult = stroke == mxConstants.NONE && fill == mxConstants.NONE && this.getImage(state) == null;\n\t\t\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.isSwimlane = function(cell, ignoreState)\n{\n\tif (cell != null && this.model.getParent(cell) != this.model.getRoot() &&\n\t\t!this.model.isEdge(cell))\n\t{\n\t\treturn this.getCurrentCellStyle(cell, ignoreState)\n\t\t\t[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var style = this.getCurrentCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getRoot();\n\t\t}\n\t}\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\t\n\t\t\t\tif (result != null)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (this.isCellVisible(child) && this.isSwimlane(child))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\t\n\t\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * sources - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n};\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n * intersection - Optional <mxRectangle> to check vertices for intersection.\n * ignoreFn - Optional function to check if a cell state is ignored.\n * includeDescendants - Optional boolean flag to add descendants to the result.\n * Default is false.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result, intersection, ignoreFn, includeDescendants)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0 || intersection != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell) &&\n\t\t\t\t\t(ignoreFn == null || !ignoreFn(state)))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar hit = (intersection != null && model.isVertex(cell) && mxUtils.intersects(intersection, box)) ||\n\t\t\t\t\t\t(intersection == null && (model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right);\n\t\t\t\t\t\n\t\t\t\t\tif (hit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!hit || includeDescendants)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result, intersection, ignoreFn, includeDescendants);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent, selectGroups)\n{\n\tthis.selectCells(true, false, parent, selectGroups);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n * selectGroups - Optional boolean that specifies if groups should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent, selectGroups)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t(((selectGroups || this.model.getChildCount(cell) == 0) &&\n\t\t\tthis.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN &&\n\t\t\t!mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getSourceGraphBounds\n * \n * Returns the graph bound boxing of the source.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell, eventName)\n * {\n *   return layout;\n * };\n * (end)\n * \n * See <getLayout> for a description of the possible eventNames.\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'),\n\t\t\t\tevt.getProperty('previous'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: undoHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.undoHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Variable: resizeHandler\n * \n * Holds the function that handles the resize event.\n */\nmxLayoutManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t\tthis.graph.addListener(mxEvent.RESIZE_CELLS, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: hasLayout\n * \n * Returns true if the given cell has a layout. This implementation invokes\n * <getLayout> with <mxEvent.LAYOUT_CELLS> as the eventName. Override this\n * if creating layouts in <getLayout> is expensive and return true if\n * <getLayout> will return a layout for the given cell for\n * <mxEvent.BEGIN_UPDATE> or <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.hasLayout = function(cell)\n{\n\treturn this.getLayout(cell, mxEvent.LAYOUT_CELLS);\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout for the given cell and eventName. Possible\n * event names are <mxEvent.MOVE_CELLS> and <mxEvent.RESIZE_CELLS>\n * when cells are moved or resized and <mxEvent.BEGIN_UPDATE> or\n * <mxEvent.END_UPDATE> for the bottom up and top down phases after\n * changes to the graph model. <mxEvent.LAYOUT_CELLS> is used to\n * check if a layout exists for the given cell. This is called\n * from <hasLayout>.\n */\nmxLayoutManager.prototype.getLayout = function(cell, eventName)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from <undoHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tthis.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from <moveHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.MOVE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called from <resizeHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been resized.\n * bounds - <mxRectangle> taht represents the new bounds.\n */\nmxLayoutManager.prototype.cellsResized = function(cells, bounds, prev)\n{\n\tif (cells != null && bounds != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.RESIZE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.resizeCell(cells[i], bounds[i], prev[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForChanges\n * \n * Returns the cells for which a layout should be executed.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.concat(this.getCellsForChange(change));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.child,\n\t\t\tthis.addCellsWithLayout(change.previous));\n\t}\n\telse if (change instanceof mxTerminalChange ||\n\t\tchange instanceof mxGeometryChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\telse if (change instanceof mxVisibleChange ||\n\t\tchange instanceof mxStyleChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: addCellsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addCellsWithLayout = function(cell, result)\n{\n\treturn this.addDescendantsWithLayout(cell,\n\t\tthis.addAncestorsWithLayout(cell, result));\n};\n\n/**\n * Function: addAncestorsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addAncestorsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null)\n\t{\n\t\tvar layout = this.hasLayout(cell);\n\t\t\n\t\tif (layout != null)\n\t\t{\n\t\t\tresult.push(cell);\n\t\t}\n\t\t\n\t\tif (this.isBubbling())\n\t\t{\n\t\t\tvar model = this.getGraph().getModel();\n\t\t\tthis.addAncestorsWithLayout(\n\t\t\t\tmodel.getParent(cell), result);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: addDescendantsWithLayout\n * \n * Adds all descendants of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addDescendantsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null && this.hasLayout(cell))\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < model.getChildCount(cell); i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\tif (this.hasLayout(child))\n\t\t\t{\n\t\t\t\tresult.push(child);\n\t\t\t\tthis.addDescendantsWithLayout(child, result);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: executeLayoutForCells\n * \n * Executes all layouts for the given cells in two phases: In the first phase\n * layouts for child cells are executed before layouts for parent cells with\n * <mxEvent.BEGIN_UPDATE>, in the second phase layouts for parent cells are\n * executed before layouts for child cells with <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\tvar sorted = mxUtils.sortCells(cells, false);\n\tthis.layoutCells(sorted, true);\n\tthis.layoutCells(sorted.reverse(), false);\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells, bubble)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tthis.executeLayout(cells[i], bubble);\n\t\t\t\t\tlast = cells[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(cell, bubble)\n{\n\tvar layout = this.getLayout(cell, (bubble) ?\n\t\tmxEvent.BEGIN_UPDATE : mxEvent.END_UPDATE);\n\n\tif (layout != null)\n\t{\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (!this.suspended)\n\t\t{\n\t\t\tthis.updatePreview();\n\t\t\tthis.updateHint();\n\t\t}\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Merges multiple pending calls\n\t\tif (this.refreshThread)\n\t\t{\n\t\t\twindow.clearTimeout(this.refreshThread);\n\t\t}\n\n\t\t// Waits for the states and handlers to be updated\n\t\tthis.refreshThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.refreshThread = null;\n\t\t\t\n\t\t\tif (this.first != null && !this.suspended)\n\t\t\t{\n\t\t\t\t// Updates preview with no translate to compute bounding box\n\t\t\t\tvar dx = this.currentDx;\n\t\t\t\tvar dy = this.currentDy;\n\t\t\t\tthis.currentDx = 0;\n\t\t\t\tthis.currentDy = 0;\n\t\t\t\tthis.updatePreview();\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\t\t\t\tif (this.pBounds == null && !this.livePreviewUsed)\n\t\t\t\t{\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Restores translate and updates preview\n\t\t\t\t\tthis.currentDx = dx;\n\t\t\t\t\tthis.currentDy = dy;\n\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\tthis.updateHint();\n\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Forces update to ignore last visible state\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\t\t\t\tgetHandledSelectionCells(), false, true);\n\t\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}), 0);\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.addListener(mxEvent.REFRESH, this.refreshHandler);\n\t\n\tthis.keyHandler = mxUtils.bind(this, function(e)\n\t{\n\t\tif (this.graph.container != null && this.graph.container.style.visibility != 'hidden' &&\n\t\t\tthis.first != null && !this.suspended)\n\t\t{\n\t\t\tvar clone = this.graph.isCloneEvent(e) &&\n\t\t\t\tthis.graph.isCellsCloneable() &&\n\t\t\t\tthis.isCloneEnabled();\n\t\t\t\n\t\t\tif (clone != this.cloning)\n\t\t\t{\n\t\t\t\tthis.cloning = clone;\n\t\t\t\tthis.checkPreview();\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(document, 'keydown', this.keyHandler);\n\tmxEvent.addListener(document, 'keyup', this.keyHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: handlesVisible\n * \n * Whether the handles of the selection are currently visible.\n */\nmxGraphHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: isPropagateSelectionCell\n * \n * Returns true if the given cell and parent should propagate\n * selection state to the parent.\n */\nmxGraphHandler.prototype.isPropagateSelectionCell = function(cell, immediate, me)\n{\n\tvar parent = this.graph.model.getParent(cell);\n\n\tif (immediate)\n\t{\n\t\tvar geo = (this.graph.model.isEdge(cell)) ? null :\n\t\t\tthis.graph.getCellGeometry(cell);\n\t\t\n\t\treturn !this.graph.isSiblingSelected(cell) &&\n\t\t\t((geo != null && geo.relative) ||\n\t\t\t!this.graph.isSwimlane(parent));\n\t}\n\telse\n\t{\n\t\treturn (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t(!this.graph.isSiblingSelected(cell) &&\n\t\t\t!this.graph.isCellSelected(cell) &&\n\t\t\t(!this.graph.isSwimlane(parent)) ||\n\t\t\tthis.graph.isCellSelected(parent))) &&\n\t\t\t(this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t!this.graph.isCellSelected(parent));\n\t}\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event. This returns\n * the topmost cell that is not a swimlane or is selected.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\tvar state = me.getState();\n\t\n\tif ((!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent())) &&\n\t\tstate != null && !this.graph.isCellSelected(state.cell))\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar next = this.graph.view.getState(model.getParent(state.cell));\n\n\t\twhile (next != null && !this.graph.isCellSelected(next.cell) &&\n\t\t\t(model.isVertex(next.cell) || model.isEdge(next.cell)) &&\n\t\t\tthis.isPropagateSelectionCell(state.cell, true, me))\n\t\t{\n\t\t\tstate = next;\n\t\t\tnext = this.graph.view.getState(this.graph.getModel().getParent(state.cell));\n\t\t}\n\t}\n\t\n\treturn (state != null) ? state.cell : null;\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Returns true if the cell or one of its ancestors is selected.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\tif (!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent()))\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\tif (this.graph.selectionCellsHandler.isHandled(cell))\n\t\t\t{\n\t\t\t\treturn this.graph.cellEditor.getEditingCell() != cell;\n\t\t\t}\n\t\t\t\n\t\t\tcell = this.graph.model.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn this.graph.isToggleEvent(me.getEvent()) && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tvar cell = me.getCell();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.cell;\n\t\t}\n\t\t\n\t\tthis.selectCellForEvent(cell, me);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.selectCellForEvent = function(cell, me)\n{\n\tvar state = this.graph.view.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tif (me.isSource(state.control))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t\t!mxEvent.isAltDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\t\n\t\t\t\twhile (this.graph.view.getState(parent) != null &&\n\t\t\t\t\t(model.isVertex(parent) || model.isEdge(parent)) &&\n\t\t\t\t\tthis.isPropagateSelectionCell(cell, false, me))\n\t\t\t\t{\n\t\t\t\t\tcell = parent;\n\t\t\t\t\tparent = model.getParent(cell);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y, cells)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = (cells != null) ? cells : this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\t// Uses connected states as guides\n\t\tvar connected = new mxDictionary();\n\t\tvar opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n\t\t\n\t\tfor (var i = 0; i < opps.length; i++)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(opps[i]);\n\t\t\t\n\t\t\tif (state != null && !connected.get(state))\n\t\t\t{\n\t\t\t\tconnected.put(state, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t!connected.get(state) &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) &&\n\t\t!this.graph.isConstrainedEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\t\n\treturn new mxPoint(point.x - this.first.x - this.graph.panDx,\n\t\tpoint.y - this.first.y - this.graph.panDy);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. Allows for half steps in the raster so\n * numbers coming in should be rounded if no half steps are allowed (ie for non\n * aligned standard moving where pixel steps should be preferred).\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: isValidDropTarget\n * \n * Returns true if the given cell is a valid drop target.\n */\nmxGraphHandler.prototype.isValidDropTarget = function(target, me)\n{\n\treturn this.graph.model.getParent(this.cell) != target;\n};\n\n/**\n * Function: checkPreview\n * \n * Updates the preview if cloning state has changed.\n */\nmxGraphHandler.prototype.checkPreview = function()\n{\n\tif (this.livePreviewActive && this.cloning)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.livePreviewActive = false;\n\t}\n\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t{\n\t\tif (!this.cloning || !this.livePreviewActive)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t\tthis.livePreviewUsed = true;\n\t\t}\n\t}\n\telse if (!this.livePreviewUsed && this.shape == null)\n\t{\n\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null && !this.suspended)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(delta.x) > tol || Math.abs(delta.y) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (clone || this.isValidDropTarget(target, me)))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(delta.x) > Math.abs(delta.y))\n\t\t\t\t{\n\t\t\t\t\tdelta.y = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta.x = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.checkPreview();\n\t\t\t\n\t\t\tif (this.currentDx != delta.x || this.currentDy != delta.y)\n\t\t\t{\n\t\t\t\tthis.currentDx = delta.x;\n\t\t\t\tthis.currentDy = delta.y;\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\tgetHandledSelectionCells(), false);\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null && this.pBounds != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tif (!this.suspended)\n\t{\n\t\tvar states = [];\n\t\t\n\t\tif (this.allCells != null)\n\t\t{\n\t\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t\t{\n\t\t\t\tvar realState = this.graph.view.getState(state.cell);\n\t\t\t\t\n\t\t\t\t// Checks if cell was removed or replaced\n\t\t\t\tif (realState != state)\n\t\t\t\t{\n\t\t\t\t\tstate.destroy();\n\t\t\t\t\t\n\t\t\t\t\tif (realState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.put(state.cell, realState);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.remove(state.cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate = realState;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\t// Saves current state\n\t\t\t\t\tvar tempState = state.clone();\n\t\t\t\t\tstates.push([state, tempState]);\n\t\t\n\t\t\t\t\t// Makes transparent for events to detect drop targets\n\t\t\t\t\tif (state.shape != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate.shape.pointerEvents = false;\n\t\t\n\t\t\t\t\t\tif (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (state.text.originalPointerEvents == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.originalPointerEvents = state.text.pointerEvents;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tstate.text.pointerEvents = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t// Temporarily changes position\n\t\t\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.x += dx;\n\t\t\t\t\t\tstate.y += dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Draws the live preview\n\t\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\t\t\tstate.invalid = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Hides folding icon\n\t\t\t\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Clone live preview may use text bounds\n\t\t\t\t\t\telse if (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fixes preview box for edge labels\n\t\t\t\t\t\t\tif (state.text.boundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.boundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.boundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (state.text.unrotatedBoundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Resets the handler if everything was removed\n\t\tif (states.length == 0)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Redraws connected edges\n\t\t\tvar s = this.graph.view.scale;\n\t\t\t\n\t\t\tfor (var i = 0; i < states.length; i++)\n\t\t\t{\n\t\t\t\tvar state = states[i][0];\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isEdge(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\t\t\tvar points = [];\n\t\t\t\t\t\n\t\t\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar source = state.visibleSourceState;\n\t\t\t\t\tvar target = state.visibleTargetState;\n\t\t\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt0 = pts[0];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\t\t\tsource = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\t\t\tstate.view.updateEdgeLabelOffset(state);\n\t\t\t\t\tstate.invalid = false;\n\t\n\t\t\t\t\t// Draws the live preview but avoids update of state\n\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tthis.graph.view.validate();\n\t\t\tthis.redrawHandles(states);\n\t\t\tthis.resetPreviewStates(states);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: suspend\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.suspend = function()\n{\n\tif (!this.suspended)\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.updateLivePreview(0, 0);\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'hidden';\n\t\t} \n\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(false);\n\t\t}\n\t\t\n\t\tthis.suspended = true;\n\t}\n};\n\n/**\n * Function: resume\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.resume = function()\n{\n\tif (this.suspended)\n\t{\n\t\tthis.suspended = null;\n\t\t\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'visible';\n\t\t}\n\t\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces repaint even if not moved to update pointer events\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t\t\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.pointerEvents = state.text.originalPointerEvents;\n\t\t\t\t\tstate.text.originalPointerEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null &&\n\t\t\t\tstate.control.node.style.visibility == 'hidden')\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Fixes preview box for edge labels\n\t\t\tif (!this.cloning)\n\t\t\t{\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: setHandlesVisibleForCells\n * \n * Sets wether the handles attached to the given cells are visible.\n * \n * Parameters:\n * \n * cells - Array of <mxCells>.\n * visible - Boolean that specifies if the handles should be visible.\n * force - Forces an update of the handler regardless of the last used value.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible, force)\n{\n\tif (force || this.handlesVisible != visible)\n\t{\n\t\tthis.handlesVisible = visible;\n\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cells[i]);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\t\n\t\t\t\tif (visible)\n\t\t\t\t{\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy,\n\t\t\t\t\t\tme.getGraphX(), me.getGraphY());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(\n\t\t\tthis.graph.selectionCellsHandler.\n\t\t\tgetHandledSelectionCells(), true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.suspended = null;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.pBounds = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: shouldRemoveParent\n * \n * Returns true if the given parent should be removed after removal of child cells.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\treturn state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0 &&\n\t\tthis.graph.isTransparentState(state);\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tmxEvent.removeListener(document, 'keydown', this.keyHandler);\n\tmxEvent.removeListener(document, 'keyup', this.keyHandler);\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.zoomGraph(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.reset();\n\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: zoomGraph\n * \n * Zooms the graph to the given value and consumed the event if needed.\n */\nmxPanningHandler.prototype.zoomGraph = function(evt)\n{\n\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\n\tif (this.minScale != null)\n\t{\n\t\tvalue = Math.max(this.minScale, value);\n\t}\n\t\n\tif (this.maxScale != null)\n\t{\n\t\tvalue = Math.min(this.maxScale, value);\n\t}\n\n\tif (this.graph.view.scale != value)\n\t{\n\t\tthis.graph.zoomTo(value);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: isHandled\n * \n * Returns true if the given cell has a handler.\n */\nmxSelectionCellsHandler.prototype.isHandled = function(cell)\n{\n\treturn this.getHandler(cell) != null;\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: getHandledSelectionCells\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.getHandledSelectionCells = function()\n{\n\treturn this.graph.getSelectionCells();\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = mxUtils.sortCells(this.getHandledSelectionCells(), false);\n\n\t// Destroys or updates old handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n\t\n\t// Creates new handlers and updates parent highlight on existing handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = this.handlers.get(tmp[i]);\n\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thandler.updateParentHighlight();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: getIconPosition\n * \n * Returns the center position of the given icon.\n * \n * Parameters:\n * \n * icon - The connect icon of <mxImageShape> with the mouse.\n * state - <mxCellState> under the mouse.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif (this.error != null || (this.currentState != null &&\n\t\t\t\t!this.isCellEnabled(this.currentState.cell)))\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t}\n\t\t\t\n\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\t// but ignores cases where parent is used for non-connectable child cells\n\t\t\t\t\tif (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\t\tthis.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image, shape)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.shape = (shape != null) ? shape : null;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function(me) { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Should be called after <setPosition> in <processEvent>.\n * This repaints the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse if (this.shape == null)\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: handlesVisible\n * \n * If handles are currently visible.\n */\nmxVertexHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: movePreviewToFront\n * \n * Specifies if the live preview should be moved to the front.\n */\nmxVertexHandler.prototype.movePreviewToFront = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE,\n\t\t\t\t\tmxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(\n\t\tmxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\n\tvar checkShape = mxUtils.bind(this, function(shape)\n\t{\n\t\tvar st = (shape != null && shape.constructor != mxImageShape &&\n\t\t\tthis.allowHandleBoundsCheck) ? shape.strokewidth + shape.svgStrokeTolerance : null;\n\t\tvar real = (st != null) ? new mxRectangle(me.getGraphX() - Math.floor(st / 2),\n\t\t\tme.getGraphY() - Math.floor(st / 2), st, st) : hit;\n\n\t\treturn shape != null && (me.isSource(shape) || (real != null && mxUtils.intersects(shape.bounds, real) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t});\n\t\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.isGhostPreview())\n\t\t{\n\t\t\tthis.ghostPreview = this.createGhostPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Saves reference to parent state\n\t\t\tvar model = this.state.view.graph.model;\n\t\t\tvar parent = model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t\t{\n\t\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t\t}\n\t\t\t\n\t\t\t// Creates a preview that can be on top of any HTML label\n\t\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\t\n\t\t\t// Creates the border that represents the new bounds\n\t\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t\t{\n\t\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\t\n\t\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\t// With the rotation handle in a corner, need the angle and distance\n\t\t\t\tvar pos = this.getRotationHandlePosition();\n\t\t\t\t\n\t\t\t\tvar dx = pos.x - this.state.getCenterX();\n\t\t\t\tvar dy = pos.y - this.state.getCenterY();\n\t\t\t\t\n\t\t\t\tthis.startAngle = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : 0;\n\t\t\t\tthis.startDist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\n\t\t\t// Prepares the handles for live preview\n\t\t\tif (this.livePreviewActive)\n\t\t\t{\n\t\t\t\tthis.hideSizers();\n\t\t\t\t\n\t\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\t\tthis.edgeHandlers = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (handler != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: createGhostPreview\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.createGhostPreview = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\tshape.init(this.graph.view.getOverlayPane());\n\tshape.scale = this.state.view.scale;\n\tshape.bounds = this.bounds;\n\tshape.outline = true;\n\t\n\treturn shape;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tthis.handlesVisible = visible;\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t\t\n\t\t\t\t\tif (this.ghostPreview != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.ghostPreview.apply(this.state);\n\t\t\t\t\t\tthis.ghostPreview.strokewidth = this.getSelectionStrokeWidth() /\n\t\t\t\t\t\t\tthis.ghostPreview.scale / this.ghostPreview.scale;\n\t\t\t\t\t\tthis.ghostPreview.isDashed = this.isSelectionDashed();\n\t\t\t\t\t\tthis.ghostPreview.stroke = this.getSelectionColor();\n\t\t\t\t\t\tthis.ghostPreview.redraw();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.selectionBounds != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.selectionBorder.node.style.display = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.movePreviewToFront)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.moveToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotateVertex(me);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.resizeVertex(me);\n\t\t\t\t}\n\n\t\t\t\tthis.updateHint(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: isGhostPreview\n * \n * Returns true if a ghost preview should be used for custom handles.\n */\nmxVertexHandler.prototype.isGhostPreview = function()\n{\n\treturn this.state.view.graph.model.getChildCount(this.state.cell) > 0;\n};\n\n/**\n * Function: moveLabel\n * \n * Moves the label.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\t\n\tthis.currentAlpha -= this.startAngle;\n\t\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (dist - this.startDist < 2)\n\t\t{\n\t\t\traster = 15;\n\t\t}\n\t\telse if (dist - this.startDist < 25)\n\t\t{\n\t\t\traster = 5;\n\t\t}\n\t\telse\n\t\t{\n\t\t\traster = 1;\n\t\t}\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: resizeVertex\n * \n * Risizes the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar old = this.bounds;\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\t\t\n\tif (!old.equals(this.bounds))\n\t{\t\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.updateLivePreview(me);\n\t\t}\n\t\t\n\t\tif (this.preview != null)\n\t\t{\n\t\t\tthis.drawPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateParentHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Moves live preview to front\n\tif (this.movePreviewToFront)\n\t{\n\t\tthis.moveToFront();\n\t}\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: moveToFront\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.moveToFront = function()\n{\n\tif ((this.state.text != null && this.state.text.node != null &&\n\t\tthis.state.text.node.nextSibling != null) ||\n\t\t(this.state.shape != null && this.state.shape.node != null &&\n\t\tthis.state.shape.node.nextSibling != null && (this.state.text == null ||\n\t\tthis.state.shape.node.nextSibling != this.state.text.node)))\n\t{\n\t\tif (this.state.shape != null && this.state.shape.node != null)\n\t\t{\n\t\t\tthis.state.shape.node.parentNode.appendChild(this.state.shape.node);\n\t\t}\n\t\t\n\t\tif (this.state.text != null && this.state.text.node != null)\n\t\t{\n\t\t\tthis.state.text.node.parentNode.appendChild(this.state.text.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\n\t\tif (this.ghostPreview == null)\n\t\t{\n\t\t\t// Required to restore order in case of no change\n\t\t\tthis.state.view.invalidate(this.state.cell, false, false);\n\t\t\tthis.state.view.validate();\n\t\t}\n\t\t\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\t// Creates style before changing cell state\n\t\t\t\t\tvar style = this.state.view.graph.getCellStyle(this.state.cell);\n\t\t\t\t\t\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\n\t\t\t\t\t// Sets style and apply on shape to force repaint and\n\t\t\t\t\t// check if execute has removed custom handles\n\t\t\t\t\tif (this.customHandles != null &&\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.style = style;\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns the recursiveResize of the give state.\n * \n * Parameters:\n * \n * state - the given <mxCellState>. This implementation takes \n * the value of this state.\n * me - the mouse event.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar style = this.graph.getCurrentCellStyle(cell);\n\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.handlesVisible = true;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar alpha = -mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterX() - this.startX) / scale),\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)),\n\t\t\t\tcos, sin);\n\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = pt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += pt.x;\n\t\t\t\tgeo.offset.y += pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tgridEnabled = (gridEnabled != null) ? gridEnabled && this.graph.gridEnabled : this.graph.gridEnabled;\n\t\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbottom = Math.round(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttop = Math.round(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft = Math.round(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = Math.round(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSizerBounds\n * \n * Returns the bounds used to paint the resize handles.\n */\nmxVertexHandler.prototype.getSizerBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar s = this.getSizerBounds();\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.handlesVisible && this.isCustomHandleVisible(\n\t\t\t\t\tthis.customHandles[i])) ? '' : 'hidden';\n\t\t}\n\t}\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse if (this.handlesVisible)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx + this.state.absoluteOffset.x;\n\t\t\t\tpt.y = cy + this.state.absoluteOffset.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\tthis.moveSizerTo(this.sizers[8], pt.x, pt.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing() ||\n\t\t\t\t!this.handlesVisible) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxVertexHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxVertexHandler.prototype.isParentHighlightVisible = function()\n{\n\treturn !this.graph.isCellSelected(this.graph.model.getParent(this.state.cell));\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\tif (!this.isDestroyed())\n\t{\n\t\tvar visible = this.isParentHighlightVisible();\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && visible)\n\t\t\t{\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = mxRectangle.fromRectangle(pstate);\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t\t\t{\n\t\t\t\t\tpstate.parentHighlight = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled && visible)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && pstate != null &&\n\t\t\t\tpstate.parentHighlight == null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t\n\t\t\t\t// Shows highlight once per parent\n\t\t\t\tpstate.parentHighlight = this.parentHighlight;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.getSelectionBorderBounds();\n\tthis.selectionBorder.redraw();\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getSelectionBorderBounds\n * \n * Returns the bounds for the selection border.\n */\nmxVertexHandler.prototype.getSelectionBorderBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if this handler was destroyed or not initialized.\n */\nmxVertexHandler.prototype.isDestroyed = function()\n{\n\treturn this.selectionBorder == null;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null && state.shape != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.updateParentHighlight();\n\tthis.redraw();\n};\n\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isParentHighlightVisible = mxVertexHandler.prototype.isParentHighlightVisible;\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxEdgeHandler.prototype.updateParentHighlight = mxVertexHandler.prototype.updateParentHighlight;\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(mxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\tvar result = null;\n\t\n\tif (this.state != null)\n\t{\n\t\t// Connection highlight may consume events before they reach sizer handle\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\t\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tvar minDistSq = null;\n\t\n\t\tfunction checkShape(shape)\n\t\t{\n\t\t\tif (shape != null && shape.node != null && shape.node.style.display != 'none' &&\n\t\t\t\tshape.node.style.visibility != 'hidden' &&\n\t\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t\t{\n\t\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t\t{\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t\t{\n\t\t\t// Inverse loop order to match display order\n\t\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t\t{\n\t\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t\t{\n\t\t\tresult = mxEvent.LABEL_HANDLE;\n\t\t}\n\t\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.bends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t\t{\n\t\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\t\n\t\tif (this.error != null || (result != null &&\n\t\t\t!this.isCellEnabled(result.cell)))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && !this.isCellEnabled(state.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\tthis.marker.getValidState() != me.getState()) ?\n\t\t\t\t'transparent' : mxConstants.DEFAULT_VALID_COLOR;\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\n\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.node.style.display = 'none';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\t\t\t\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() &&\n\t\t\t\t\tthis.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\tthis.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && !this.isCellEnabled(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t\tthis.updateHint(me, this.currentPoint);\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tif (this.shape != null && this.shape.node != null)\n\t\t{\n\t\t\tthis.shape.node.style.display = '';\n\t\t}\n\t\t\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.shape.apply(this.state);\n\t\t\t\t\t\t\tthis.shape.redraw();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isToggleEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(this.state.cell, me.getEvent());\n\t\t}\n\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.state.absolutePoints.slice();\n\t\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tvar pts = g.points;\n\t\t\n\t\t\tif (this.bends != null && this.bends.length > 0)\n\t\t\t{\n\t\t\t\tif (pts != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.points == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points = [];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.drawPreview();\n\t\t\n\t\tif (!ignoreHandles)\n\t\t{\n\t\t\tthis.redrawHandles();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxEdgeHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\ttry\n\t{\n\t\tif (this.isLabel)\n\t\t{\n\t\t\tvar b = this.labelShape.bounds;\n\t\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\t\t\n\t\t\tif (!this.labelShape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tthis.labelShape.bounds = bounds;\n\t\t\t\tthis.labelShape.redraw();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.shape != null && !mxUtils.equalPoints(this.shape.points, this.abspoints))\n\t\t{\n\t\t\tthis.shape.apply(this.state);\n\t\t\tthis.shape.points = this.abspoints.slice();\n\t\t\tthis.shape.scale = this.state.view.scale;\n\t\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\t\tthis.shape.stroke = this.getSelectionColor();\n\t\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\t\tthis.shape.isShadow = false;\n\t\t\tthis.shape.redraw();\n\t\t}\n\t\t\n\t\tthis.updateParentHighlight();\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.getSelectionPoints(this.state);\n\t\tthis.points = [];\n\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.bends);\n\t\t\tthis.bends = this.createBends();\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.virtualBends);\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t\t\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tthis.destroyBends(this.customHandles);\n\t\t\tthis.customHandles = this.createCustomHandles();\n\t\t}\n\t\t\n\t\t// Puts label node on top of bends\n\t\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t\t{\n\t\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if <destroy> was called.\n */\nmxEdgeHandler.prototype.isDestroyed = function()\n{\n\treturn this.shape == null;\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar source = mxEvent.getSource(evt);\n\t\t\t\n\t\t\tif (source.nodeName != 'A')\n\t\t\t{\n\t\t\t\tthis.hideTooltip();\n\t\t\t}\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: getStrokeWidth\n * \n * Returns the stroke width.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement an application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitly\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitly via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitly via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeUi\n\t *\n\t * Decodes the ui elements from the given node.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));","/**\r\n * Based on mxgraph 4.2.0\r\n */\r\nimport mxgraphFactory from \"mxgraph\";\r\nvar mxAbsolutePath = \"/platform/runtime/common/web/@edp-pmf/mxgraph\";\r\nvar topWindow = window.top;\r\nvar gspframeworkService = topWindow.gspframeworkService;\r\nvar igixBasePath = gspframeworkService && gspframeworkService.common && gspframeworkService.common.getBasePath && gspframeworkService.common.getBasePath.get ? gspframeworkService.common.getBasePath.get() : \"\";\r\nwindow['mxiGIXBasePath'] = igixBasePath || \"\";\r\nwindow['mxBasePath'] = window['mxBasePath'] || (window['mxiGIXBasePath'] + mxAbsolutePath);\r\nwindow['mxLoadResources'] = window['mxLoadResources'] || undefined;\r\nwindow['mxForceIncludes'] = window['mxForceIncludes'] || undefined;\r\nwindow['mxResourceExtension'] = window['mxResourceExtension'] || undefined;\r\nwindow['mxLoadStylesheets'] = window['mxLoadStylesheets'] || undefined;\r\nwindow['imageBasePath'] = window['imageBasePath'] || undefined;\r\nvar lang = window['mxLanguage'] || gspframeworkService && gspframeworkService.rtf && gspframeworkService.rtf.language && gspframeworkService.rtf.language.getLanguageCode && gspframeworkService.rtf.language.getLanguageCode() || localStorage.getItem('languageCode') || 'zh-CHS';\r\nwindow['mxLanguage'] = lang && String(lang).replace(\"-\", \"\").toLocaleLowerCase();\r\nwindow['mxDefaultLanguage'] = window['mxDefaultLanguage'] || undefined;\r\nwindow['mxLanguages'] = window['mxLanguages'] || undefined;\r\nexport var mxgraphInstance = mxgraphFactory({});\r\n//# sourceMappingURL=mxgraphFactory.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * Editor\r\n */\r\nexport var mxDefaultKeyHandler = mxgraphInstance.mxDefaultKeyHandler;\r\nexport var mxDefaultPopupMenu = mxgraphInstance.mxDefaultPopupMenu;\r\nexport var mxDefaultToolbar = mxgraphInstance.mxDefaultToolbar;\r\nexport var mxEditor = mxgraphInstance.mxEditor;\r\n//# sourceMappingURL=Editor.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * Handler\r\n */\r\nexport var mxCellHighlight = mxgraphInstance.mxCellHighlight;\r\nexport var mxCellMarker = mxgraphInstance.mxCellMarker;\r\nexport var mxCellTracker = mxgraphInstance.mxCellTracker;\r\nexport var mxConnectionHandler = mxgraphInstance.mxConnectionHandler;\r\nexport var mxConstraintHandler = mxgraphInstance.mxConstraintHandler;\r\nexport var mxEdgeHandler = mxgraphInstance.mxEdgeHandler;\r\nexport var mxEdgeSegmentHandler = mxgraphInstance.mxEdgeSegmentHandler;\r\nexport var mxElbowEdgeHandler = mxgraphInstance.mxElbowEdgeHandler;\r\nexport var mxGraphHandler = mxgraphInstance.mxGraphHandler;\r\nexport var mxHandle = mxgraphInstance.mxHandle;\r\nexport var mxKeyHandler = mxgraphInstance.mxKeyHandler;\r\nexport var mxPanningHandler = mxgraphInstance.mxPanningHandler;\r\nexport var mxPopupMenuHandler = mxgraphInstance.mxPopupMenuHandler;\r\nexport var mxRubberband = mxgraphInstance.mxRubberband;\r\nexport var mxSelectionCellsHandler = mxgraphInstance.mxSelectionCellsHandler;\r\nexport var mxTooltipHandler = mxgraphInstance.mxTooltipHandler;\r\nexport var mxVertexHandler = mxgraphInstance.mxVertexHandler;\r\n//# sourceMappingURL=Handler.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * IO\r\n */\r\n// export const mxCellCodec = mxgraphInstance.mxCellCodec;\r\n// export const mxChildChangeCodec = mxgraphInstance.mxChildChangeCodec;\r\nexport var mxCodec = mxgraphInstance.mxCodec;\r\nexport var mxCodecRegistry = mxgraphInstance.mxCodecRegistry;\r\n// export const mxDefaultKeyHandlerCodec = mxgraphInstance.mxDefaultKeyHandlerCodec;\r\n// export const mxDefaultPopupMenuCodec = mxgraphInstance.mxDefaultPopupMenuCodec;\r\nexport var mxDefaultToolbarCodec = mxgraphInstance.mxDefaultToolbarCodec;\r\n// export const mxEditorCodec = mxgraphInstance.mxEditorCodec;\r\nexport var mxGenericChangeCodec = mxgraphInstance.mxGenericChangeCodec;\r\n// export const mxGraphCodec = mxgraphInstance.mxGraphCodec;\r\n// export const mxGraphViewCodec = mxgraphInstance.mxGraphViewCodec;\r\n// export const mxModelCodec = mxgraphInstance.mxModelCodec;\r\nexport var mxObjectCodec = mxgraphInstance.mxObjectCodec;\r\n// export const mxRootChangeCodec = mxgraphInstance.mxRootChangeCodec;\r\nexport var mxStylesheetCodec = mxgraphInstance.mxStylesheetCodec;\r\n// export const mxTerminalChangeCodec = mxgraphInstance.mxTerminalChangeCodec;\r\n//# sourceMappingURL=IO.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * Layout\r\n */\r\nexport var mxCircleLayout = mxgraphInstance.mxCircleLayout;\r\nexport var mxCompactTreeLayout = mxgraphInstance.mxCompactTreeLayout;\r\nexport var mxCompositeLayout = mxgraphInstance.mxCompositeLayout;\r\nexport var mxEdgeLabelLayout = mxgraphInstance.mxEdgeLabelLayout;\r\nexport var mxFastOrganicLayout = mxgraphInstance.mxFastOrganicLayout;\r\nexport var mxGraphLayout = mxgraphInstance.mxGraphLayout;\r\nexport var mxParallelEdgeLayout = mxgraphInstance.mxParallelEdgeLayout;\r\nexport var mxPartitionLayout = mxgraphInstance.mxPartitionLayout;\r\nexport var mxRadialTreeLayout = mxgraphInstance.mxRadialTreeLayout;\r\nexport var mxStackLayout = mxgraphInstance.mxStackLayout;\r\n/**\r\n* Layout Hierarchical\r\n*/\r\nexport var mxHierarchicalLayout = mxgraphInstance.mxHierarchicalLayout;\r\nexport var mxSwimlaneLayout = mxgraphInstance.mxSwimlaneLayout;\r\n/**\r\n* Layout Hierarchical Model\r\n*/\r\nexport var mxGraphAbstractHierarchyCell = mxgraphInstance.mxGraphAbstractHierarchyCell;\r\nexport var mxGraphHierarchyEdge = mxgraphInstance.mxGraphHierarchyEdge;\r\nexport var mxGraphHierarchyModel = mxgraphInstance.mxGraphHierarchyModel;\r\nexport var mxGraphHierarchyNode = mxgraphInstance.mxGraphHierarchyNode;\r\nexport var mxSwimlaneModel = mxgraphInstance.mxSwimlaneModel;\r\n/**\r\n* Layout Hierarchical Stage\r\n*/\r\nexport var mxCoordinateAssignment = mxgraphInstance.mxCoordinateAssignment;\r\nexport var mxHierarchicalLayoutStage = mxgraphInstance.mxHierarchicalLayoutStage;\r\nexport var mxMedianHybridCrossingReduction = mxgraphInstance.mxMedianHybridCrossingReduction;\r\nexport var mxMinimumCycleRemover = mxgraphInstance.mxMinimumCycleRemover;\r\nexport var mxSwimlaneOrdering = mxgraphInstance.mxSwimlaneOrdering;\r\n//# sourceMappingURL=Layout.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * Model\r\n */\r\nexport var mxCell = mxgraphInstance.mxCell;\r\nexport var mxCellPath = mxgraphInstance.mxCellPath;\r\nexport var mxGeometry = mxgraphInstance.mxGeometry;\r\nexport var mxGraphModel = mxgraphInstance.mxGraphModel;\r\n// /**\r\n//  * mxGraphModel Change\r\n//  */\r\n// export const mxRootChange = mxgraphInstance.mxRootChange;\r\n// export const mxChildChange = mxgraphInstance.mxChildChange;\r\n// export const mxTerminalChange = mxgraphInstance.mxTerminalChange;\r\n// export const mxValueChange = mxgraphInstance.mxValueChange;\r\n// export const mxStyleChange = mxgraphInstance.mxStyleChange;\r\n// export const mxGeometryChange = mxgraphInstance.mxGeometryChange;\r\n// export const mxCollapseChange = mxgraphInstance.mxCollapseChange;\r\n// export const mxVisibleChange = mxgraphInstance.mxVisibleChange;\r\n// export const mxCellAttributeChange = mxgraphInstance.mxCellAttributeChange;\r\n//# sourceMappingURL=Model.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * Shape\r\n */\r\nexport var mxActor = mxgraphInstance.mxActor;\r\nexport var mxArrow = mxgraphInstance.mxArrow;\r\nexport var mxArrowConnector = mxgraphInstance.mxArrowConnector;\r\nexport var mxCloud = mxgraphInstance.mxCloud;\r\nexport var mxConnector = mxgraphInstance.mxConnector;\r\nexport var mxCylinder = mxgraphInstance.mxCylinder;\r\nexport var mxDoubleEllipse = mxgraphInstance.mxDoubleEllipse;\r\nexport var mxEllipse = mxgraphInstance.mxEllipse;\r\nexport var mxHexagon = mxgraphInstance.mxHexagon;\r\nexport var mxImageShape = mxgraphInstance.mxImageShape;\r\nexport var mxLabel = mxgraphInstance.mxLabel;\r\nexport var mxLine = mxgraphInstance.mxLine;\r\nexport var mxMarker = mxgraphInstance.mxMarker;\r\nexport var mxPolyline = mxgraphInstance.mxPolyline;\r\nexport var mxRectangleShape = mxgraphInstance.mxRectangleShape;\r\nexport var mxRhombus = mxgraphInstance.mxRhombus;\r\nexport var mxShape = mxgraphInstance.mxShape;\r\nexport var mxStencil = mxgraphInstance.mxStencil;\r\nexport var mxStencilRegistry = mxgraphInstance.mxStencilRegistry;\r\nexport var mxSwimlane = mxgraphInstance.mxSwimlane;\r\nexport var mxText = mxgraphInstance.mxText;\r\nexport var mxTriangle = mxgraphInstance.mxTriangle;\r\n//# sourceMappingURL=Shape.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * Util\r\n */\r\nexport var mxAbstractCanvas2D = mxgraphInstance.mxAbstractCanvas2D;\r\nexport var mxAnimation = mxgraphInstance.mxAnimation;\r\nexport var mxAutoSaveManager = mxgraphInstance.mxAutoSaveManager;\r\nexport var mxClipboard = mxgraphInstance.mxClipboard;\r\nexport var mxConstants = mxgraphInstance.mxConstants;\r\nexport var mxDictionary = mxgraphInstance.mxDictionary;\r\nexport var mxDivResizer = mxgraphInstance.mxDivResizer;\r\nexport var mxDragSource = mxgraphInstance.mxDragSource;\r\nexport var mxEffects = mxgraphInstance.mxEffects;\r\nexport var mxEvent = mxgraphInstance.mxEvent;\r\nexport var mxEventObject = mxgraphInstance.mxEventObject;\r\nexport var mxEventSource = mxgraphInstance.mxEventSource;\r\nexport var mxForm = mxgraphInstance.mxForm;\r\nexport var mxGuide = mxgraphInstance.mxGuide;\r\nexport var mxImage = mxgraphInstance.mxImage;\r\nexport var mxImageBundle = mxgraphInstance.mxImageBundle;\r\nexport var mxImageExport = mxgraphInstance.mxImageExport;\r\nexport var mxLog = mxgraphInstance.mxLog;\r\nexport var mxMorphing = mxgraphInstance.mxMorphing;\r\nexport var mxMouseEvent = mxgraphInstance.mxMouseEvent;\r\nexport var mxObjectIdentity = mxgraphInstance.mxObjectIdentity;\r\nexport var mxPanningManager = mxgraphInstance.mxPanningManager;\r\nexport var mxPoint = mxgraphInstance.mxPoint;\r\nexport var mxPopupMenu = mxgraphInstance.mxPopupMenu;\r\nexport var mxRectangle = mxgraphInstance.mxRectangle;\r\nexport var mxResources = mxgraphInstance.mxResources;\r\nexport var mxSvgCanvas2D = mxgraphInstance.mxSvgCanvas2D;\r\nexport var mxToolbar = mxgraphInstance.mxToolbar;\r\nexport var mxUndoableEdit = mxgraphInstance.mxUndoableEdit;\r\nexport var mxUndoManager = mxgraphInstance.mxUndoManager;\r\nexport var mxUrlConverter = mxgraphInstance.mxUrlConverter;\r\nexport var mxUtils = mxgraphInstance.mxUtils;\r\nexport var mxVmlCanvas2D = mxgraphInstance.mxVmlCanvas2D;\r\nexport var mxWindow = mxgraphInstance.mxWindow;\r\nexport var mxXmlCanvas2D = mxgraphInstance.mxXmlCanvas2D;\r\nexport var mxXmlRequest = mxgraphInstance.mxXmlRequest;\r\n//# sourceMappingURL=Util.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * View\r\n */\r\nexport var mxCellEditor = mxgraphInstance.mxCellEditor;\r\nexport var mxCellOverlay = mxgraphInstance.mxCellOverlay;\r\nexport var mxCellRenderer = mxgraphInstance.mxCellRenderer;\r\nexport var mxCellState = mxgraphInstance.mxCellState;\r\nexport var mxCellStatePreview = mxgraphInstance.mxCellStatePreview;\r\nexport var mxConnectionConstraint = mxgraphInstance.mxConnectionConstraint;\r\nexport var mxEdgeStyle = mxgraphInstance.mxEdgeStyle;\r\nexport var mxGraph = mxgraphInstance.mxGraph;\r\nexport var mxGraphSelectionModel = mxgraphInstance.mxGraphSelectionModel;\r\nexport var mxGraphView = mxgraphInstance.mxGraphView;\r\nexport var mxLayoutManager = mxgraphInstance.mxLayoutManager;\r\nexport var mxMultiplicity = mxgraphInstance.mxMultiplicity;\r\nexport var mxOutline = mxgraphInstance.mxOutline;\r\nexport var mxPerimeter = mxgraphInstance.mxPerimeter;\r\nexport var mxPrintPreview = mxgraphInstance.mxPrintPreview;\r\nexport var mxStyleRegistry = mxgraphInstance.mxStyleRegistry;\r\nexport var mxStylesheet = mxgraphInstance.mxStylesheet;\r\nexport var mxSwimlaneManager = mxgraphInstance.mxSwimlaneManager;\r\nexport var mxTemporaryCellStates = mxgraphInstance.mxTemporaryCellStates;\r\n// export const renderingHint = mxgraphInstance.renderingHint;\r\n/**\r\n * mxGraphSelectionModel\r\n */\r\n// export const mxSelectionChange = mxgraphInstance.mxSelectionChange;\r\n/**\r\n * mxGraphView\r\n */\r\n// export const mxCurrentRootChange = mxgraphInstance.mxCurrentRootChange;\r\n//# sourceMappingURL=View.js.map","import { mxgraphInstance } from './mxgraphFactory';\r\n/**\r\n * mxClient\r\n */\r\nexport var mxClient = mxgraphInstance.mxClient;\r\n//# sourceMappingURL=mxClient.js.map","export var MxGraphNS;\r\n(function (MxGraphNS) {\r\n})(MxGraphNS || (MxGraphNS = {}));\r\n//# sourceMappingURL=mxgraph-types.js.map"],"names":["root","factory","this","opts","name","__mxOutput","mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","test","vendor","IS_ANDROID","appVersion","IS_IOS","platform","IS_GC","IS_CHROMEAPP","window","chrome","app","runtime","IS_FF","InstallTrigger","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","IS_MAC","IS_CHROMEOS","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","id","write","setAttribute","getElementsByTagName","appendChild","loadResources","fn","lan","pending","length","callback","i","mxResources","add","include","src","node","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","type","styleSheet","cssText","createStyleSheet","module","exports","undefined","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","title","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","value","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","toString","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","parseInt","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","done","maxStep","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","hasScrollbars","overflow","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","idx2","ltrim","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","importNodeImplementation","newNode","attributes","createTextNode","nodeValue","createXmlDocument","implementation","createDocument","createMsXmlDocument","ActiveXObject","async","validateOnParse","resolveExternals","parseXml","DOMParser","xml","parseFromString","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","removeWhitespace","before","previousSibling","NODETYPE_TEXT","next","getTextContent","htmlEntities","s","newline","String","isVml","tagUrn","getXml","linefeed","getPrettyXml","XMLSerializer","serializeToString","tab","indent","ns","namespaceURI","NODETYPE_DOCUMENT","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_COMMENT","NODETYPE_CDATA","attrs","val","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","replaceTrailingNewlines","pattern","postfix","innerText","textContent","setTextContent","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","p","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","headers","setRequestHeaders","request","setRequestHeader","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","x1","denom","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","stylename","getStylenames","pairs","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_TOP","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","fontStyle","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","FONT_BOLD","fontWeight","FONT_ITALIC","txtDecor","FONT_UNDERLINE","FONT_STRIKETHROUGH","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","availablePageWidth","PAGE_FORMAT_A4_PORTRAIT","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_DOCUMENTTYPE","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_CENTER","ALIGN_MIDDLE","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","touches","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","diff","evtCache","dx0","dy0","pointerId","clientX","clientY","PINCH_THRESHOLD","event","ctrlKey","deltaY","deltaX","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","which","buttons","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","metaKey","getMainEvent","changedTouches","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","delta","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","previewOffset","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","noHover","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","beforePaint","paint","afterPaint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","useAbsoluteIds","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","getAlternateText","fo","createAlternateContent","anchor","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","div2","div3","updateText","updateTextNodes","addForeignObject","group","g","createCss","getTextCss","flex","block","box","yp","bg","ofl","fw","fh","bgc","lh","css","deco","plainText","createClip","updateFont","textHeight","addTextBackground","bbox","getBBox","ie","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","margin","inner","wordWrap","rot","maxHeight","real_cos","real_sin","sizeDiv","oh","top_fix","left_fix","divParent","textpathok","v","tp","on","horizontal","vertical","guideX","guideY","rounded","tolerance","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","tt","overrideX","stateX","valueX","overrideY","stateY","valueY","ttX","ttY","middle","snapX","centerAlign","override","getOverlayPane","snapY","snapDelta","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","p0","slice","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","stack","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","realHtml","fmt","getAutoDirection","redrawHtmlShapeWithCss3","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","getContentNode","ow","updateInnerHtml","divs","unrotatedBoundingBox","getHtmlValue","updateValue","bd","enableWrap","maxWidth","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","getSwimlaneArcSize","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","resizeCell","getConstraint","getCurrentCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","getCellStyle","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","checkOverlap","findParallels","parallels","addCell","getEdgeId","trg","route","scx","scy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","dummyVertexWidth","dummyVertices","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","xout","yout","pow","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","pi2","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","useCssTransforms","previousContainer","getCanvas","backgroundPane","getBackgroundPane","realScale","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","unscaledWidth","unscaledHeight","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","rshape","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","sourceScaled","targetScaled","controlHints","scalePointArray","scaleCellState","lastPushed","hint","pushPoint","lastInx","hints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","sourceBuffer","targetBuffer","totalBuffer","tooShort","newRect","portConstraint","sourceCenX","sourceCenY","targetCenX","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","cellsResized","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","suspended","updatePreview","updateHint","escapeHandler","refreshHandler","refreshThread","currentDx","currentDy","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","getHandledSelectionCells","keyHandler","isCloneEvent","isCellsCloneable","isCloneEnabled","cloning","checkPreview","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","zoomGraph","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","handler","escape","hideProperties","mxDefaultPopupMenu","config","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","ignoreScale","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","relatedTarget","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","ignoreFn","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","reverse","selectCellForEvent","isSiblingSelected","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","ignoreState","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","getCellsForUngroup","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","getActualStartSize","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","origCells","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","ignoreGrid","ignoreHorizontal","ignoreVertical","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","zoomTo","cw","ch","sh","scrollRectToVisible","zoomToRect","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","swimlane","getSwimlaneDirection","isTransparentState","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","hitsSwimlaneContent","getPointForEvent","addOffset","hit","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectGroups","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","detail","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","allowHandleBoundsCheck","getTranslateForEvent","checkTerminal","checkNeighbors","sourceValue","targetValue","valid","checkType","attrValue","bubbling","isBubbling","setBubbling","hasLayout","getLayout","executeLayoutForCells","getCellsForChanges","getCellsForChange","addCellsWithLayout","addDescendantsWithLayout","addAncestorsWithLayout","sorted","layoutCells","bubble","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","handlesVisible","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","allowLivePreview","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","isPropagateSelectionCell","immediate","getInitialCellForEvent","isDelayedSelection","isHandled","selectDelayed","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cellCount","addStates","ignore","opps","isCellMoving","useGuidesForEvent","vector","removeHint","roundLength","livePreviewActive","resetLivePreview","setHighlightColor","remote","updateLivePreview","updatePreviewShape","realState","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","suspend","resume","setHandlesVisible","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","maxScale","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","updateParentHighlight","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","movePreviewToFront","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","real","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","isGhostPreview","ghostPreview","createGhostPreview","preview","getRotationHandlePosition","startAngle","atan","startDist","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveToFront","moveLabel","rotateVertex","resizeVertex","currentAlpha","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","getSizerBounds","isCustomHandleVisible","crs","da","isParentHighlightVisible","isDestroyed","parentHighlight","getSelectionBorderBounds","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","enc","into","dec","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec","mxgraph","mxAbsolutePath","topWindow","gspframeworkService","igixBasePath","common","getBasePath","lang","rtf","getLanguageCode","localStorage","getItem","toLocaleLowerCase","mxgraphInstance","mxgraphFactory","MxGraphNS"],"mappings":"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2D,KAAKmB,KAAO,WACZnB,KAAKoB,WAAWC,QAAU9F,SAASe,WAAa,mCACzCf,SAASgB,cAAgB,mCAC1BL,SAASiD,qBAAqB,QAAQ,GAAGC,YAAYY,OAK5D9D,SAASoF,mBAAmBD,QAAU9F,SAASe,WAAa,mCACxDf,SAASgB,cAAgB,mCAGvB6D,mBAEH7E,SAASsD,KAAK,aAActD,SAASgF,SAAW,wBAQlDL,iBAAqE,MAAlBqB,OAAOC,WAG7DjG,SAASuE,QAAQvE,SAASgF,SAAS,qBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,gCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,wBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,sBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,8BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,8BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,gCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,iCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,kCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,wBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,kCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,wBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,wBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,iCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,gCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,wBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,iCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,wBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,mCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,oCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,gCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,sCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,mCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,mCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,iEACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yDACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yDACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0DACnChF,SAASuE,QAAQvE,SAASgF,SAAS,oDACnChF,SAASuE,QAAQvE,SAASgF,SAAS,8DACnChF,SAASuE,QAAQvE,SAASgF,SAAS,oEACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0DACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2DACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uDACnChF,SAASuE,QAAQvE,SAASgF,SAAS,mDACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+CACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,8BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,4BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,8BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,8BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,iCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,kCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,sCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,iCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,mCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0CACnChF,SAASuE,QAAQvE,SAASgF,SAAS,sCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,sCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,kCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,gCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,uCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,+BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,mCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,gCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,kCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,oCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,kCACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,6BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,qBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,2BACnChF,SAASuE,QAAQvE,SAASgF,SAAS,yBACnChF,SAASuE,QAAQvE,SAASgF,SAAS,0BACnChF,SAASuE,QAAQvE,SAASgF,SAAS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"}