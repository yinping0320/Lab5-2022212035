/**
 * Util
 */
export declare const mxAbstractCanvas2D: typeof import("./mxgraph-types").MxGraphNS.mxAbstractCanvas2D;
export declare const mxAnimation: typeof import("./mxgraph-types").MxGraphNS.mxAnimation;
export declare const mxAutoSaveManager: typeof import("./mxgraph-types").MxGraphNS.mxAutoSaveManager;
export declare const mxClipboard: {
    STEPSIZE: number;
    insertCount: number;
    cells: any;
    setCells(cells: any): void;
    getCells(): any;
    isEmpty(): boolean;
    cut(graph: any, cells?: any): any;
    removeCells(graph: any, cells: any): void;
    copy(graph: any, cells?: any): any;
    paste(graph: any): any;
};
export declare const mxConstants: typeof import("./mxgraph-types").MxGraphNS.mxConstants;
export declare const mxDictionary: typeof import("./mxgraph-types").MxGraphNS.mxDictionary;
export declare const mxDivResizer: typeof import("./mxgraph-types").MxGraphNS.mxDivResizer;
export declare const mxDragSource: typeof import("./mxgraph-types").MxGraphNS.mxDragSource;
export declare const mxEffects: {
    animateChanges(graph: any, changes: any, done: any): void;
    cascadeOpacity(graph: any, cell: any, opacity: any): void;
    fadeOut(node: any, from: any, remove: any, step: any, delay: any, isEnabled: any): void;
};
export declare const mxEvent: {
    EVENT_SCALE: string;
    EVENT_HIDE: string;
    objects: any[];
    addListener: (element: any, eventName: any, funct: any) => void;
    removeListener: (element: any, eventName: any, funct: any) => void;
    removeAllListeners(element: any): void;
    addGestureListeners(node: any, startListener: any, moveListener?: any, endListener?: any): void;
    removeGestureListeners(node: any, startListener: any, moveListener?: any, endListener?: any): void;
    redirectMouseEvents(node: any, graph: any, state: any, down?: any, move?: any, up?: any, dblClick?: any): void;
    release(element: any): void;
    addMouseWheelListener(funct: (evt: any, up: boolean) => void, target?: HTMLElement): void;
    disableContextMenu: (element: any) => void;
    getSource(evt: any): any;
    isConsumed(evt: any): boolean;
    isTouchEvent(evt: any): boolean;
    isPenEvent(evt: any): boolean;
    isMultiTouchEvent(evt: any): boolean;
    isMouseEvent(evt: any): boolean;
    isLeftMouseButton(evt: any): boolean;
    isMiddleMouseButton(evt: any): boolean;
    isRightMouseButton(evt: any): boolean;
    isPopupTrigger(evt: any): boolean;
    isShiftDown(evt: any): boolean;
    isAltDown(evt: any): boolean;
    isControlDown(evt: any): boolean;
    isMetaDown(evt: any): boolean;
    getMainEvent(e: any): any;
    getClientX(e: PointerEvent): number;
    getClientY(e: PointerEvent): number;
    consume(evt: any, preventDefault?: boolean, stopPropagation?: boolean): void;
    LABEL_HANDLE: number;
    ROTATION_HANDLE: number;
    CUSTOM_HANDLE: number;
    VIRTUAL_HANDLE: number;
    MOUSE_DOWN: string;
    MOUSE_MOVE: string;
    MOUSE_UP: string;
    ACTIVATE: string;
    RESIZE_START: string;
    RESIZE: string;
    RESIZE_END: string;
    MOVE_START: string;
    MOVE: string;
    MOVE_END: string;
    PAN_START: string;
    PAN: string;
    PAN_END: string;
    MINIMIZE: string;
    NORMALIZE: string;
    MAXIMIZE: string;
    HIDE: string;
    SHOW: string;
    CLOSE: string;
    DESTROY: string;
    REFRESH: string;
    SIZE: string;
    SELECT: string;
    FIRED: string;
    FIRE_MOUSE_EVENT: string;
    GESTURE: string;
    TAP_AND_HOLD: string;
    GET: string;
    RECEIVE: string;
    CONNECT: string;
    DISCONNECT: string;
    SUSPEND: string;
    RESUME: string;
    MARK: string;
    ROOT: string;
    POST: string;
    OPEN: string;
    SAVE: string;
    BEFORE_ADD_VERTEX: string;
    ADD_VERTEX: string;
    AFTER_ADD_VERTEX: string;
    DONE: string;
    EXECUTE: string;
    EXECUTED: string;
    BEGIN_UPDATE: string;
    START_EDIT: string;
    END_UPDATE: string;
    END_EDIT: string;
    BEFORE_UNDO: string;
    UNDO: string;
    REDO: string;
    CHANGE: string;
    NOTIFY: string;
    LAYOUT_CELLS: string;
    CLICK: string;
    SCALE: string;
    TRANSLATE: string;
    SCALE_AND_TRANSLATE: string;
    UP: string;
    DOWN: string;
    ADD: string;
    REMOVE: string;
    CLEAR: string;
    ADD_CELLS: string;
    CELLS_ADDED: string;
    MOVE_CELLS: string;
    CELLS_MOVED: string;
    RESIZE_CELLS: string;
    CELLS_RESIZED: string;
    TOGGLE_CELLS: string;
    CELLS_TOGGLED: string;
    ORDER_CELLS: string;
    CELLS_ORDERED: string;
    REMOVE_CELLS: string;
    CELLS_REMOVED: string;
    GROUP_CELLS: string;
    UNGROUP_CELLS: string;
    REMOVE_CELLS_FROM_PARENT: string;
    FOLD_CELLS: string;
    CELLS_FOLDED: string;
    ALIGN_CELLS: string;
    LABEL_CHANGED: string;
    CONNECT_CELL: string;
    CELL_CONNECTED: string;
    SPLIT_EDGE: string;
    FLIP_EDGE: string;
    START_EDITING: string;
    EDITING_STARTED: string;
    EDITING_STOPPED: string;
    ADD_OVERLAY: string;
    REMOVE_OVERLAY: string;
    UPDATE_CELL_SIZE: string;
    ESCAPE: string;
    DOUBLE_CLICK: string;
    START: string;
    RESET: string;
};
export declare const mxEventObject: typeof import("./mxgraph-types").MxGraphNS.mxEventObject;
export declare const mxEventSource: typeof import("./mxgraph-types").MxGraphNS.mxEventSource;
export declare const mxForm: typeof import("./mxgraph-types").MxGraphNS.mxForm;
export declare const mxGuide: typeof import("./mxgraph-types").MxGraphNS.mxGuide;
export declare const mxImage: typeof import("./mxgraph-types").MxGraphNS.mxImage;
export declare const mxImageBundle: typeof import("./mxgraph-types").MxGraphNS.mxImageBundle;
export declare const mxImageExport: typeof import("./mxgraph-types").MxGraphNS.mxImageExport;
export declare const mxLog: {
    consoleName: string;
    TRACE: boolean;
    DEBUG: boolean;
    WARN: boolean;
    buffer: string;
    init(): void;
    info(): void;
    addButton(lab: any, funct: any): void;
    isVisible(): any;
    show(): void;
    setVisible(visible: any): void;
    enter(string: any): number;
    leave(string: any, t0: any): void;
    debug(string: any, t0: any): void;
    warn(string: any, t0: any): void;
    write(string: any, t0: any): void;
    writeln(string: any, t0: any): void;
};
export declare const mxMorphing: typeof import("./mxgraph-types").MxGraphNS.mxMorphing;
export declare const mxMouseEvent: typeof import("./mxgraph-types").MxGraphNS.mxMouseEvent;
export declare const mxObjectIdentity: {
    FIELD_NAME: string;
    counter: number;
    get(obj: any): any;
    clear(obj: any): void;
};
export declare const mxPanningManager: typeof import("./mxgraph-types").MxGraphNS.mxPanningManager;
export declare const mxPoint: typeof import("./mxgraph-types").MxGraphNS.mxPoint;
export declare const mxPopupMenu: typeof import("./mxgraph-types").MxGraphNS.mxPopupMenu;
export declare const mxRectangle: typeof import("./mxgraph-types").MxGraphNS.mxRectangle;
export declare const mxResources: {
    resources: any[];
    extension: string;
    resourcesEncoded: boolean;
    loadDefaultBundle: boolean;
    loadSpecialBundle: boolean;
    isLanguageSupported(lan: any): boolean;
    getDefaultBundle(basename: any, lan: any): string;
    getSpecialBundle(basename: string, lan: string): string;
    add(basename: string, lan?: string, callback?: () => void): void;
    parse(text: string): void;
    get(key: string, params?: string[], defaultValue?: string): string;
    replacePlaceholders(value: string, params: string[]): string;
    loadResources(callback?: () => void): void;
};
export declare const mxSvgCanvas2D: typeof import("./mxgraph-types").MxGraphNS.mxSvgCanvas2D;
export declare const mxToolbar: typeof import("./mxgraph-types").MxGraphNS.mxToolbar;
export declare const mxUndoableEdit: typeof import("./mxgraph-types").MxGraphNS.mxUndoableEdit;
export declare const mxUndoManager: typeof import("./mxgraph-types").MxGraphNS.mxUndoManager;
export declare const mxUrlConverter: typeof import("./mxgraph-types").MxGraphNS.mxUrlConverter;
export declare const mxUtils: {
    [key: string]: any;
    errorResource: string;
    closeResource: string;
    errorImage: string;
    removeCursors(element: HTMLElement): void;
    getCurrentStyle(elt: HTMLElement): CSSStyleDeclaration;
    parseCssNumber(value: string): number;
    setPrefixedStyle(style: any, name: string, value: any): void;
    htmlEntities(s: string, newline?: boolean): any;
    hasScrollbars(elt: HTMLElement): boolean;
    getOffset(container: HTMLElement, scrollOffset?: boolean): import("./mxgraph-types").MxGraphNS.mxPoint;
    makeDraggable(element: HTMLElement, graphF: import("./mxgraph-types").MxGraphNS.mxGraph, funct: Function, dragElement?: HTMLElement, dx?: number, dy?: number, autoscroll?: boolean, scalePreview?: boolean, highlightDropTargets?: boolean, getDropTarget?: (x: number, y: number) => import("./mxgraph-types").MxGraphNS.mxCell): import("./mxgraph-types").MxGraphNS.mxDragSource;
    setOpacity(node: HTMLElement, value: number): void;
    convertPoint(container: HTMLElement, x: number, y: number): import("./mxgraph-types").MxGraphNS.mxPoint;
    getValue(array: any[], key: any, defaultValue?: any): any;
    indexOf(array: any[], obj: any): number;
};
export declare const mxVmlCanvas2D: typeof import("./mxgraph-types").MxGraphNS.mxVmlCanvas2D;
export declare const mxWindow: typeof import("./mxgraph-types").MxGraphNS.mxWindow;
export declare const mxXmlCanvas2D: typeof import("./mxgraph-types").MxGraphNS.mxXmlCanvas2D;
export declare const mxXmlRequest: typeof import("./mxgraph-types").MxGraphNS.mxXmlRequest;
