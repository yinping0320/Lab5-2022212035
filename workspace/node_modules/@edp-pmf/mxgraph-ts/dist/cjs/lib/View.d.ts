/**
 * View
 */
export declare const mxCellEditor: typeof import("./mxgraph-types").MxGraphNS.mxCellEditor;
export declare const mxCellOverlay: typeof import("./mxgraph-types").MxGraphNS.mxCellOverlay;
export declare const mxCellRenderer: typeof import("./mxgraph-types").MxGraphNS.mxCellRenderer;
export declare const mxCellState: typeof import("./mxgraph-types").MxGraphNS.mxCellState;
export declare const mxCellStatePreview: typeof import("./mxgraph-types").MxGraphNS.mxCellStatePreview;
export declare const mxConnectionConstraint: typeof import("./mxgraph-types").MxGraphNS.mxConnectionConstraint;
export declare const mxEdgeStyle: {
    EntityRelation(state: any, source: any, target: any, points: any, result: any): void;
    Loop(state: any, source: any, target: any, points: any, result: any): void;
    ElbowConnector(state: any, source: any, target: any, points: any, result: any): void;
    SideToSide(state: any, source: any, target: any, points: any, result: any): void;
    TopToBottom(state: any, source: any, target: any, points: any, result: any): void;
    SegmentConnector(state: any, source: any, target: any, hints: any, result: any): void;
    orthBuffer: number;
    orthPointsFallback: boolean;
    dirVectors: number[][];
    wayPoints1: number[][];
    routePatterns: number[][][];
    inlineRoutePatterns: number[][][];
    vertexSeperations: any[];
    limits: number[][];
    LEFT_MASK: number;
    TOP_MASK: number;
    RIGHT_MASK: number;
    BOTTOM_MASK: number;
    LEFT: number;
    TOP: number;
    RIGHT: number;
    BOTTOM: number;
    SIDE_MASK: number;
    CENTER_MASK: number;
    SOURCE_MASK: number;
    TARGET_MASK: number;
    VERTEX_MASK: number;
    getJettySize(state: any, source: any, target: any, points: any, isSource: any): any;
    OrthConnector(state: any, source: any, target: any, points: any, result: any): void;
    getRoutePattern(dir: any, quad: any, dx: any, dy: any): any;
};
export declare const mxGraph: typeof import("./mxgraph-types").MxGraphNS.mxGraph;
export declare const mxGraphSelectionModel: typeof import("./mxgraph-types").MxGraphNS.mxGraphSelectionModel;
export declare const mxGraphView: typeof import("./mxgraph-types").MxGraphNS.mxGraphView;
export declare const mxLayoutManager: typeof import("./mxgraph-types").MxGraphNS.mxLayoutManager;
export declare const mxMultiplicity: typeof import("./mxgraph-types").MxGraphNS.mxMultiplicity;
export declare const mxOutline: typeof import("./mxgraph-types").MxGraphNS.mxOutline;
export declare const mxPerimeter: {
    RectanglePerimeter(bounds: any, vertex: any, next: any, orthogonal: any): import("./mxgraph-types").MxGraphNS.mxPoint;
    EllipsePerimeter(bounds: any, vertex: any, next: any, orthogonal: any): import("./mxgraph-types").MxGraphNS.mxPoint;
    RhombusPerimeter(bounds: any, vertex: any, next: any, orthogonal: any): any;
    TrianglePerimeter(bounds: any, vertex: any, next: any, orthogonal: any): any;
    HexagonPerimeter(bounds: any, vertex: any, next: any, orthogonal: any): import("./mxgraph-types").MxGraphNS.mxPoint;
};
export declare const mxPrintPreview: typeof import("./mxgraph-types").MxGraphNS.mxPrintPreview;
export declare const mxStyleRegistry: {
    values: any[];
    dynamicLoading?: any;
    putValue(name: any, obj: any): void;
    getValue(name: any): any;
    getName(value: any): string;
};
export declare const mxStylesheet: typeof import("./mxgraph-types").MxGraphNS.mxStylesheet;
export declare const mxSwimlaneManager: typeof import("./mxgraph-types").MxGraphNS.mxSwimlaneManager;
export declare const mxTemporaryCellStates: typeof import("./mxgraph-types").MxGraphNS.mxTemporaryCellStates;
/**
 * mxGraphSelectionModel
 */
/**
 * mxGraphView
 */
