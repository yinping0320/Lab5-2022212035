import { BpmnModel } from "./BpmnModel";
import { DataOutput } from "./DataOutput";
import { DataOutputAssociation } from "./DataOutputAssociation";
import { IDataOutputAssociationContainer } from "./IDataOutputAssociationContainer";
import { IDataOutputContainer } from "./IDataOutputContainer";
import { IVariableElement } from "./IVariableElement";
import { ValidationError } from "./ValidationError";
import { Event } from "./Event";
export declare abstract class CatchEvent extends Event implements IDataOutputAssociationContainer, IDataOutputContainer {
    constructor(model: BpmnModel);
    private dataOutputAssociationDic;
    private dataOutputDIc;
    protected ResetBeforeLoadFrom(): void;
    AddDataOutput(item: DataOutput): void;
    GetDataOutput(dataOutputId: string): DataOutput;
    GetDataOutputs(): Array<DataOutput>;
    RemoveDataOutput(dataOutputId: string): void;
    AddDataOutputAssociation(association: DataOutputAssociation): void;
    GetDataOutputAssociation(associationId: string): DataOutputAssociation;
    GetDataOutputAssociations(): Array<DataOutputAssociation>;
    RemoveDataOutputAssociation(associationId: string): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    Validate(errors: Array<ValidationError>): void;
    CheckVariableElement(variableElement: IVariableElement): void;
}
