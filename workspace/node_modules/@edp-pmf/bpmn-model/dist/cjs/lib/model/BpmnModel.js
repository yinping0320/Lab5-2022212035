"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BpmnModel = void 0;
var BPMNDiagram_1 = require("./bpmndi/BPMNDiagram");
var ExtensionMethod_1 = require("./ExtensionMethod");
var Process_1 = require("./Process");
var Signal_1 = require("./Signal");
var ValidateHelper_1 = require("./ValidateHelper");
var BpmnModel = /** @class */ (function () {
    function BpmnModel() {
        this.hasIdElementDic = {};
        this.signals = new Array();
    }
    BpmnModel.prototype.ResetBeforeLoadFrom = function () {
        this.hasIdElementDic = {};
        this.MetadataContentID = null;
        this.MetadataContentCode = null;
        this.MetadataContentName = null;
        this.TargetNamespace = null;
        this.DefaultProcess = null;
        this.DefaultDiagram = null;
    };
    BpmnModel.prototype.ConvertToJson = function () {
        var model = {};
        model.TargetNamespace = this.TargetNamespace;
        model.MetadataContentID = this.MetadataContentID;
        model.MetadataContentCode = this.MetadataContentCode;
        model.MetadataContentName = this.MetadataContentName;
        if (this.DefaultProcess != null) {
            model.DefaultProcess = this.DefaultProcess.ConvertToJsonObject();
        }
        if (this.DefaultDiagram != null) {
            model.DefaultDiagram = this.DefaultDiagram.ConvertToJsonObject();
        }
        if (this.signals != null && this.signals.length > 0) {
            var signalJsonArray = new Array();
            for (var _i = 0, _a = this.signals; _i < _a.length; _i++) {
                var item = _a[_i];
                signalJsonArray.push(item.convertToJsonObject());
            }
            if (signalJsonArray.length > 0) {
                ExtensionMethod_1.ExtensionMethod.SetAttributeValue(model, "signals", signalJsonArray);
            }
        }
        return JSON.stringify(model);
    };
    BpmnModel.prototype.LoadFromJson = function (json) {
        var model = JSON.parse(json);
        this.TargetNamespace = model.TargetNamespace;
        this.MetadataContentID = model.MetadataContentID;
        this.MetadataContentCode = model.MetadataContentCode;
        this.MetadataContentName = model.MetadataContentName;
        this.DefaultProcess = new Process_1.Process(this);
        if (model.DefaultProcess)
            this.DefaultProcess.LoadFromJsonObject(model.DefaultProcess);
        this.DefaultDiagram = new BPMNDiagram_1.BPMNDiagram(this);
        if (model.DefaultDiagram)
            this.DefaultDiagram.LoadFromJsonObject(model.DefaultDiagram);
        var signalsElement = ExtensionMethod_1.ExtensionMethod.GetAttributeValue(model, "signals");
        if (signalsElement instanceof Array) {
            var signalsJsonArray = signalsElement;
            for (var _i = 0, signalsJsonArray_1 = signalsJsonArray; _i < signalsJsonArray_1.length; _i++) {
                var item = signalsJsonArray_1[_i];
                var signal = new Signal_1.Signal(this);
                signal.LoadFromJsonObject(item);
                this.signals.push(signal);
            }
        }
    };
    BpmnModel.prototype.AddHasIdElement = function (element) {
        if (element == null)
            throw new Error("element is null");
        if (element.Id == null)
            throw new Error("元素 Id 不能为 null");
        if (ValidateHelper_1.ValidateHelper.IsMatchVariableNameRules(element.Id) == false)
            throw new Error("元素 Id 只能包含字母、数字和下划线，且不能以数字开头。");
        if (this.hasIdElementDic.hasOwnProperty(element.Id)) {
            throw new Error("\u5DF2\u7ECF\u5B58\u5728 Id \u4E3A " + element.Id + " \u7684\u6D41\u7A0B\u5143\u7D20\u3002");
        }
        this.hasIdElementDic[element.Id] = element;
    };
    BpmnModel.prototype.RemoveHasIdElement = function (elementId) {
        delete this.hasIdElementDic[elementId];
    };
    BpmnModel.prototype.GetHasIdElement = function (elementId) {
        if (elementId == null)
            return null;
        if (this.hasIdElementDic.hasOwnProperty(elementId)) {
            return this.hasIdElementDic[elementId];
        }
        return null;
    };
    BpmnModel.prototype.Validate = function () {
        var errors = new Array();
        if (this.DefaultProcess != null) {
            this.DefaultProcess.Validate(errors);
        }
        if (this.DefaultDiagram != null) {
            this.DefaultDiagram.Validate(errors);
        }
        return errors;
    };
    return BpmnModel;
}());
exports.BpmnModel = BpmnModel;
//# sourceMappingURL=BpmnModel.js.map