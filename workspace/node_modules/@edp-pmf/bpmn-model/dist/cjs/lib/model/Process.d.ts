import { BpmnModel } from "./BpmnModel";
import { CallableElement } from "./CallableElement";
import { DataObject } from "./DataObject";
import { ExtensionElement } from "./ExtensionElement";
import { FlowElement } from "./FlowElement";
import { IExecutionListenerContainer } from "./IExecutionListenerContainer";
import { IProcess } from "./IProcess";
import { IVariableElement } from "./IVariableElement";
import { ExecutionListener } from "./mex/ExecutionListener";
import { ResourceRole } from "./ResourceRole";
import { ValidationError } from "./ValidationError";
export declare class Process extends CallableElement implements IProcess, IExecutionListenerContainer {
    constructor(model: BpmnModel);
    readonly ClrTypeID: string;
    Key: string;
    private flowElementsDic;
    private resourceRoleDIc;
    private executionListeners;
    private extensionElements;
    protected ResetBeforeLoadFrom(): void;
    NewInstance(): Process;
    AddDataObject(dataObject: DataObject): void;
    GetDataObject(dataObjectId: string): DataObject;
    GetDataObjects(): DataObject[];
    RemoveDataObject(dataObjectId: string): void;
    AddFlowElement(element: FlowElement): void;
    GetFlowElement(elementId: string): FlowElement;
    GetFlowElements(): {
        [key: string]: FlowElement;
    };
    RemoveFlowElement(elementId: string): void;
    GetExecutionListeners(): ExecutionListener[];
    AddResourceRole(item: ResourceRole): void;
    GetResourceRole(resourceRoleId: string): ResourceRole;
    GetResourceRoles(): Array<ResourceRole>;
    RemoveResourceRole(resourceRoleId: string): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    private readonly MEXTAG;
    protected GetExtensionElements4ConvertTo(): Array<ExtensionElement>;
    protected SetExtensionElements4LoadFrom(extensionElements: Array<ExtensionElement>): void;
    GetExtensionElements(): Array<ExtensionElement>;
    Validate(errors: Array<ValidationError>): void;
    CheckVariableElement(variableElement: IVariableElement): void;
    private InnerAddFlowElement;
    private RemoveSequenceFlow;
    private InnerRemoveDataObject;
    private RemoveFlowNode;
}
