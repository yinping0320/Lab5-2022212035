import { BpmnModel } from "./BpmnModel";
import { DataInput } from "./DataInput";
import { DataInputAssociation } from "./DataInputAssociation";
import { DataOutput } from "./DataOutput";
import { DataOutputAssociation } from "./DataOutputAssociation";
import { FlowNode } from "./FlowNode";
import { IDataInputAssociationContainer } from "./IDataInputAssociationContainer";
import { IDataInputContainer } from "./IDataInputContainer";
import { IDataOutputAssociationContainer } from "./IDataOutputAssociationContainer";
import { IDataOutputContainer } from "./IDataOutputContainer";
import { IHasDefaultSequenceFlow } from "./IHasDefaultSequenceFlow";
import { IResourceRoleContainer } from "./IResourceRoleContainer";
import { IVariableElement } from "./IVariableElement";
import { MultiInstanceLoopCharacteristics } from "./MultiInstanceLoopCharacteristics";
import { ResourceRole } from "./ResourceRole";
import { ValidationError } from "./ValidationError";
export declare abstract class Activity extends FlowNode implements IDataInputContainer, IDataOutputContainer, IDataInputAssociationContainer, IDataOutputAssociationContainer, IHasDefaultSequenceFlow, IResourceRoleContainer {
    constructor(model: BpmnModel);
    Default: string;
    IsForCompensation: boolean;
    private dataInputAssociationDic;
    private dataInputDIc;
    private dataOutputAssociationDic;
    private dataOutputDIc;
    private resourceRoleDIc;
    LoopCharacteristics: MultiInstanceLoopCharacteristics;
    protected ResetBeforeLoadFrom(): void;
    AddDataInput(item: DataInput): void;
    GetDataInput(dataInputId: string): DataInput;
    GetDataInputs(): Array<DataInput>;
    RemoveDataInput(dataInputId: string): void;
    AddDataOutput(item: DataOutput): void;
    GetDataOutput(dataOutputId: string): DataOutput;
    GetDataOutputs(): Array<DataOutput>;
    RemoveDataOutput(dataOutputId: string): void;
    AddDataInputAssociation(association: DataInputAssociation): void;
    GetDataInputAssociation(associationId: string): DataInputAssociation;
    GetDataInputAssociations(): Array<DataInputAssociation>;
    RemoveDataInputAssociation(associationId: string): void;
    AddDataOutputAssociation(association: DataOutputAssociation): void;
    GetDataOutputAssociation(associationId: string): DataOutputAssociation;
    GetDataOutputAssociations(): Array<DataOutputAssociation>;
    RemoveDataOutputAssociation(associationId: string): void;
    AddResourceRole(item: ResourceRole): void;
    GetResourceRole(resourceRoleId: string): ResourceRole;
    GetResourceRoles(): Array<ResourceRole>;
    RemoveResourceRole(resourceRoleId: string): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    Validate(errors: Array<ValidationError>): void;
    CheckVariableElement(variableElement: IVariableElement): void;
}
