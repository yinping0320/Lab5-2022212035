import { BpmnModel } from "./BpmnModel";
import { DataInput } from "./DataInput";
import { DataOutput } from "./DataOutput";
import { IDataInputContainer } from "./IDataInputContainer";
import { IDataOutputContainer } from "./IDataOutputContainer";
import { IHasNameElement } from "./IHasNameElement";
import { IVariableElement } from "./IVariableElement";
import { RootElement } from "./RootElement";
export declare abstract class CallableElement extends RootElement implements IDataInputContainer, IDataOutputContainer, IHasNameElement {
    constructor(model: BpmnModel);
    Name: string;
    NameLanguage: {
        [lang: string]: any;
    };
    private dataInputDIc;
    private dataOutputDIc;
    protected ResetBeforeLoadFrom(): void;
    AddDataInput(item: DataInput): void;
    GetDataInput(dataInputId: string): DataInput;
    GetDataInputs(): Array<DataInput>;
    RemoveDataInput(dataInputId: string): void;
    AddDataOutput(item: any): void;
    GetDataOutput(dataOutputId: string): DataOutput;
    GetDataOutputs(): Array<DataOutput>;
    RemoveDataOutput(dataOutputId: string): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    CheckVariableElement(variableElement: IVariableElement): void;
}
