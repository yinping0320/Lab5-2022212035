"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataType = void 0;
var tslib_1 = require("tslib");
var BpmnModelHelper_1 = require("../BpmnModelHelper");
var ValidationError_1 = require("../ValidationError");
var ValidationLevel_1 = require("../ValidationLevel");
var BasicDataTypes_1 = require("./BasicDataTypes");
var DataTypes_1 = require("./DataTypes");
var MexExtensionElement_1 = require("./MexExtensionElement");
var SchemaType_1 = require("./SchemaType");
var DataType = /** @class */ (function (_super) {
    tslib_1.__extends(DataType, _super);
    function DataType(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = "bpmn.Mex.DataType";
        _this.BasicType = BasicDataTypes_1.BasicDataTypes.String;
        _this.Category = DataTypes_1.DataTypes.BasicType;
        return _this;
    }
    DataType.prototype.NewInstance = function () {
        return new DataType(this.Model);
    };
    DataType.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.BasicType = BasicDataTypes_1.BasicDataTypes.String;
        this.Category = DataTypes_1.DataTypes.BasicType;
        this.Description = null;
        this.InitialValue = null;
        this.SchemaType = null;
        this.CustomType = null;
    };
    DataType.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "Category", this.Category);
        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "Description", this.Description);
        switch (this.Category) {
            case DataTypes_1.DataTypes.BasicType:
                {
                    BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "BasicType", this.BasicType);
                    if (this.InitialValue != null) {
                        try {
                            switch (this.BasicType) {
                                case BasicDataTypes_1.BasicDataTypes.String:
                                    BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "InitialValue", this.InitialValue);
                                    break;
                                case BasicDataTypes_1.BasicDataTypes.Integer:
                                case BasicDataTypes_1.BasicDataTypes.Decimal:
                                    BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "InitialValue", this.InitialValue);
                                    break;
                                case BasicDataTypes_1.BasicDataTypes.DateTime:
                                    BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "InitialValue", this.DateFormat("yyyyMMddhhmmssS", this.InitialValue));
                                    break;
                                case BasicDataTypes_1.BasicDataTypes.Boolean:
                                    BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "InitialValue", this.InitialValue);
                                    break;
                                //case "ByteArray":
                                //    {
                                //        obj.InitialValue = <Array<any>>this.InitialValue;
                                //        break;
                                //    }
                                default:
                                    throw new Error("Invalid argument!");
                            }
                        }
                        catch (err) {
                            throw new Error("\u65E0\u6CD5\u5C06\u7ED9\u5B9A\u7684\u503C\u8F6C\u6210 " + this.BasicType.toString() + " \u57FA\u672C\u6570\u636E\u7C7B\u578B.");
                        }
                    }
                    break;
                }
            case DataTypes_1.DataTypes.SchemaType:
                {
                    if (this.SchemaType != null)
                        obj.SchemaType = this.SchemaType.ConvertToJsonObject();
                    if (this.InitialValue != null)
                        obj.InitialValue = this.InitialValue;
                    break;
                }
            case DataTypes_1.DataTypes.CustomType:
                {
                    if (this.CustomType != null)
                        obj.CustomType = this.CustomType.ConvertToJsonObject();
                    break;
                }
            default:
                throw new Error("Invalid argument!");
        }
        return obj;
    };
    DataType.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Category = obj.Category;
        this.Description = obj.Description;
        switch (this.Category) {
            case DataTypes_1.DataTypes.BasicType:
                {
                    this.BasicType = obj.BasicType;
                    if (obj.hasOwnProperty("InitialValue")) {
                        switch (this.BasicType) {
                            case BasicDataTypes_1.BasicDataTypes.String:
                                this.InitialValue = obj.InitialValue;
                                break;
                            case BasicDataTypes_1.BasicDataTypes.Integer:
                            case BasicDataTypes_1.BasicDataTypes.Decimal:
                                this.InitialValue = obj.InitialValue;
                                break;
                            case BasicDataTypes_1.BasicDataTypes.DateTime:
                                //this.InitialValue = new Date((<number>obj.InitialValue - 621355968000000000) / 10000);
                                this.InitialValue = this.DateParse(obj.InitialValue);
                                break;
                            case BasicDataTypes_1.BasicDataTypes.Boolean:
                                this.InitialValue = obj.InitialValue;
                                break;
                            //case "ByteArray":
                            //    {
                            //        this.InitialValue = <Array<any>>obj.InitialValue;
                            //        break;
                            //    }
                            default:
                                throw new Error("Invalid argument!");
                        }
                    }
                    break;
                }
            case DataTypes_1.DataTypes.SchemaType:
                {
                    if (obj.hasOwnProperty("SchemaType")) {
                        this.SchemaType = new SchemaType_1.SchemaType(this.Model);
                        this.SchemaType.LoadFromJsonObject(obj.SchemaType);
                    }
                    this.InitialValue = obj.InitialValue;
                    break;
                }
            case DataTypes_1.DataTypes.CustomType:
                {
                    if (obj.hasOwnProperty("CustomType")) {
                        this.CustomType = BpmnModelHelper_1.BpmnModelHelper.GetElementType(obj.CustomType.ClrTypeID);
                        this.CustomType.LoadFromJsonObject(obj.CustomType);
                    }
                    break;
                }
            default:
                throw new Error("Invalid argument!");
        }
    };
    DataType.prototype.Validate = function (errors) {
        _super.prototype.Validate.call(this, errors);
        if (this.Category == DataTypes_1.DataTypes.SchemaType) {
            if (this.SchemaType == null) {
                var error = new ValidationError_1.ValidationError();
                error.Element = this;
                error.ErrorLevel = ValidationLevel_1.ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定 Schema 数据类型";
                errors.push(error);
            }
            else {
                this.SchemaType.Validate(errors);
            }
        }
    };
    DataType.prototype.DateFormat = function (fmt, value) {
        var o = {
            "M+": value.getUTCMonth() + 1,
            "d+": value.getUTCDate(),
            "h+": value.getUTCHours(),
            "m+": value.getUTCMinutes(),
            "s+": value.getUTCSeconds(),
            "q+": Math.floor((value.getMonth() + 3) / 3),
            "S": value.getUTCMilliseconds()
        };
        if (/(y+)/.test(fmt))
            fmt = fmt.replace(RegExp.$1, (value.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp("(" + k + ")").test(fmt))
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
    };
    DataType.prototype.DateParse = function (dt) {
        var date = new Date();
        date.setUTCFullYear(parseInt(dt.slice(0, 4)), parseInt(dt.slice(4, 6)) - 1, parseInt(dt.slice(6, 8)));
        date.setUTCHours(parseInt(dt.slice(8, 10)), parseInt(dt.slice(10, 12)), parseInt(dt.slice(12, 14)), parseInt(dt.slice(14, 17)));
        return date;
    };
    return DataType;
}(MexExtensionElement_1.MexExtensionElement));
exports.DataType = DataType;
//# sourceMappingURL=DataType.js.map