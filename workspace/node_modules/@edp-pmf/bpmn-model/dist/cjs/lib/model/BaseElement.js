"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseElement = void 0;
var tslib_1 = require("tslib");
var BpmnElement_1 = require("./BpmnElement");
var BpmnModelHelper_1 = require("./BpmnModelHelper");
var BaseElement = /** @class */ (function (_super) {
    tslib_1.__extends(BaseElement, _super);
    function BaseElement(model) {
        var _this = _super.call(this, model) || this;
        _this.Id = BpmnModelHelper_1.BpmnModelHelper.GenerateElementId();
        return _this;
    }
    BaseElement.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.Id = null;
        this.Documentation = null;
    };
    BaseElement.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "Id", this.Id);
        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "Documentation", this.Documentation);
        if (this.GetExtensionElements4ConvertTo().length > 0) {
            var extensionElements = new Array();
            for (var _i = 0, _a = this.GetExtensionElements4ConvertTo(); _i < _a.length; _i++) {
                var item = _a[_i];
                extensionElements.push(item.ConvertToJsonObject());
            }
            BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "extensionElements", extensionElements);
        }
        return obj;
    };
    BaseElement.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Id = obj.Id;
        this.Documentation = obj.Documentation;
        if (obj.hasOwnProperty("extensionElements") && Array.isArray(obj.extensionElements)) {
            var list = new Array();
            for (var _i = 0, _a = obj.extensionElements; _i < _a.length; _i++) {
                var item = _a[_i];
                var extensionElement = BpmnModelHelper_1.BpmnModelHelper.GetElementType(item.ClrTypeID);
                if (extensionElement != null) {
                    extensionElement.LoadFromJsonObject(item);
                    list.push(extensionElement);
                }
            }
            this.SetExtensionElements4LoadFrom(list);
        }
    };
    BaseElement.prototype.GetExtensionElements4ConvertTo = function () {
        return new Array();
    };
    BaseElement.prototype.SetExtensionElements4LoadFrom = function (extensionElements) {
    };
    return BaseElement;
}(BpmnElement_1.BpmnElement));
exports.BaseElement = BaseElement;
//# sourceMappingURL=BaseElement.js.map