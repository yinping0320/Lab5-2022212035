"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubProcess = void 0;
var tslib_1 = require("tslib");
var Activity_1 = require("./Activity");
var BpmnModelHelper_1 = require("./BpmnModelHelper");
var DataObject_1 = require("./DataObject");
var FlowNode_1 = require("./FlowNode");
var SequenceFlow_1 = require("./SequenceFlow");
var ValidateHelper_1 = require("./ValidateHelper");
var SubProcess = /** @class */ (function (_super) {
    tslib_1.__extends(SubProcess, _super);
    function SubProcess(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = "bpmn.SubProcess";
        _this.extensionElements = new Array();
        _this.flowElementsDic = {};
        _this.SubProcessMEXTAG = "bpmn.SubProcess";
        return _this;
    }
    SubProcess.prototype.NewInstance = function () {
        return new SubProcess(this.Model);
    };
    SubProcess.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.extensionElements = [];
        this.flowElementsDic = {};
    };
    SubProcess.prototype.AddDataObject = function (dataObject) {
        this.CheckVariableElement(dataObject);
        this.InnerAddFlowElement(dataObject);
    };
    SubProcess.prototype.GetDataObject = function (dataObjectId) {
        if (dataObjectId == null)
            return null;
        if (this.flowElementsDic.hasOwnProperty(dataObjectId))
            return this.flowElementsDic[dataObjectId];
        return null;
    };
    SubProcess.prototype.GetDataObjects = function () {
        var list = new Array();
        for (var item in this.flowElementsDic) {
            var obj = this.flowElementsDic[item];
            if (obj != null)
                list.push(obj);
        }
        return list;
    };
    SubProcess.prototype.RemoveDataObject = function (dataObjectId) {
        this.RemoveFlowElement(dataObjectId);
    };
    SubProcess.prototype.AddFlowElement = function (element) {
        if (element instanceof DataObject_1.DataObject)
            throw new Error("请使用 AddDataObjcet 方法添加流程变量");
        ValidateHelper_1.ValidateHelper.CheckHasIdElement(element);
        this.InnerAddFlowElement(element);
    };
    SubProcess.prototype.GetFlowElement = function (elementId) {
        if (elementId == null)
            return null;
        if (this.flowElementsDic.hasOwnProperty(elementId))
            return this.flowElementsDic[elementId];
        return null;
    };
    SubProcess.prototype.GetFlowElements = function () {
        return this.flowElementsDic;
    };
    SubProcess.prototype.RemoveFlowElement = function (elementId) {
        var element = this.GetFlowElement(elementId);
        if (element == null)
            return;
        if (element instanceof SequenceFlow_1.SequenceFlow) {
            this.RemoveSequenceFlow(element);
        }
        if (element instanceof FlowNode_1.FlowNode) {
            this.RemoveFlowNode(element);
        }
        if (element instanceof DataObject_1.DataObject) {
            this.InnerRemoveDataObject(element);
        }
        delete this.flowElementsDic[elementId];
        this.Model.RemoveHasIdElement(elementId);
    };
    SubProcess.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        var flowElements = [];
        for (var elementId in this.flowElementsDic) {
            var element = this.flowElementsDic[elementId].ConvertToJsonObject();
            flowElements.push(element);
        }
        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "flowElements", flowElements);
        return obj;
    };
    SubProcess.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        if (obj.hasOwnProperty("flowElements") && Array.isArray(obj.FlowElements)) {
            for (var _i = 0, _a = obj.FlowElements; _i < _a.length; _i++) {
                var elementObj = _a[_i];
                var element = BpmnModelHelper_1.BpmnModelHelper.GetElementType(elementObj.ClrTypeID);
                if (element == null)
                    continue;
                element.Model = this.Model;
                element.LoadFromJsonObject(elementObj);
                this.InnerAddFlowElement(element);
            }
        }
    };
    SubProcess.prototype.GetExtensionElements4ConvertTo = function () {
        var list = _super.prototype.GetExtensionElements4ConvertTo.call(this);
        for (var _i = 0, _a = this.extensionElements; _i < _a.length; _i++) {
            var item = _a[_i];
            item.MexTag = this.SubProcessMEXTAG;
            list.push(item);
        }
        return list;
    };
    SubProcess.prototype.SetExtensionElements4LoadFrom = function (extensionElements) {
        _super.prototype.SetExtensionElements4LoadFrom.call(this, extensionElements);
        for (var _i = 0, extensionElements_1 = extensionElements; _i < extensionElements_1.length; _i++) {
            var extensionElement = extensionElements_1[_i];
            if (extensionElement.MexTag == this.SubProcessMEXTAG) {
                this.extensionElements.push(extensionElement);
            }
        }
    };
    SubProcess.prototype.GetExtensionElements = function () {
        return this.extensionElements;
    };
    SubProcess.prototype.Validate = function (errors) {
        _super.prototype.Validate.call(this, errors);
        for (var item in this.flowElementsDic) {
            this.flowElementsDic[item].Validate(errors);
        }
        ValidateHelper_1.ValidateHelper.ValidateProcess(this, errors);
    };
    SubProcess.prototype.CheckVariableElement = function (variableElement) {
        _super.prototype.CheckVariableElement.call(this, variableElement);
        ValidateHelper_1.ValidateHelper.CheckVariableElement(variableElement, null, null, this);
    };
    SubProcess.prototype.RemoveSequenceFlow = function (element) { };
    SubProcess.prototype.InnerRemoveDataObject = function (element) { };
    SubProcess.prototype.RemoveFlowNode = function (element) {
        var list = new Array();
        for (var item in this.GetFlowElements()) {
            var itemElement = this.GetFlowElements()[item];
            if (itemElement == null)
                continue;
            if (itemElement.SourceRef == element.Id || itemElement.TargetRef == element.Id)
                list.push(itemElement);
        }
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var item = list_1[_i];
            delete this.flowElementsDic[item.Id];
        }
    };
    SubProcess.prototype.InnerAddFlowElement = function (element) {
        this.flowElementsDic[element.Id] = element;
        this.Model.AddHasIdElement(element);
    };
    return SubProcess;
}(Activity_1.Activity));
exports.SubProcess = SubProcess;
//# sourceMappingURL=SubProcess.js.map