"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plane = void 0;
var tslib_1 = require("tslib");
var BpmnModelHelper_1 = require("../BpmnModelHelper");
var ValidateHelper_1 = require("../ValidateHelper");
var Node_1 = require("./Node");
var Plane = /** @class */ (function (_super) {
    tslib_1.__extends(Plane, _super);
    function Plane(model) {
        var _this = _super.call(this, model) || this;
        _this.diagramElementDic = {};
        return _this;
    }
    Plane.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.diagramElementDic = {};
    };
    Plane.prototype.AddDiagramElement = function (element) {
        this.CheckDiagramElement(element);
        this.diagramElementDic[element.Id] = element;
    };
    Plane.prototype.GetDiagramElement = function (elementId) {
        if (elementId == null)
            return null;
        if (this.diagramElementDic.hasOwnProperty(elementId))
            return this.diagramElementDic[elementId];
        return null;
    };
    Plane.prototype.GetDiagramElements = function () {
        var diagramElements = new Array();
        for (var item in this.diagramElementDic) {
            var diagramElement = this.diagramElementDic[item];
            diagramElements.push(diagramElement);
        }
        return diagramElements;
    };
    Plane.prototype.RemoveDiagramElement = function (elementId) {
        delete this.diagramElementDic[elementId];
    };
    Plane.prototype.CheckDiagramElement = function (element) {
        ValidateHelper_1.ValidateHelper.CheckHasIdElement(element);
    };
    Plane.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        var diagramElements = new Array();
        for (var item in this.diagramElementDic) {
            var element = this.diagramElementDic[item].ConvertToJsonObject();
            diagramElements.push(element);
        }
        if (diagramElements.length > 0) {
            BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "diagramElements", diagramElements);
        }
        return obj;
    };
    Plane.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        if (obj.hasOwnProperty("diagramElements") && Array.isArray(obj.diagramElements)) {
            for (var _i = 0, _a = obj.diagramElements; _i < _a.length; _i++) {
                var node = _a[_i];
                var diagramElement = BpmnModelHelper_1.BpmnModelHelper.GetElementType(node.ClrTypeID);
                if (diagramElement == null)
                    continue;
                diagramElement.Model = this.Model;
                diagramElement.LoadFromJsonObject(node);
                this.AddDiagramElement(diagramElement);
            }
        }
    };
    Plane.prototype.Validate = function (errors) {
        _super.prototype.Validate.call(this, errors);
        for (var _i = 0, _a = this.GetDiagramElements(); _i < _a.length; _i++) {
            var item = _a[_i];
            item.Validate(errors);
        }
    };
    return Plane;
}(Node_1.Node));
exports.Plane = Plane;
//# sourceMappingURL=Plane.js.map