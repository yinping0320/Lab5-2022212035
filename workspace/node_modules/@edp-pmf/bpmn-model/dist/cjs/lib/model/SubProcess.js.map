{"version":3,"file":"SubProcess.js","sourceRoot":"","sources":["../../../../src/lib/model/SubProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Activity } from \"./Activity\";\r\nimport { BpmnModel } from \"./BpmnModel\";\r\nimport { BpmnModelHelper } from \"./BpmnModelHelper\";\r\nimport { DataObject } from \"./DataObject\";\r\nimport { ExtensionElement } from \"./ExtensionElement\";\r\nimport { FlowElement } from \"./FlowElement\";\r\nimport { FlowNode } from \"./FlowNode\";\r\nimport { IProcess } from \"./IProcess\";\r\nimport { IVariableElement } from \"./IVariableElement\";\r\nimport { SequenceFlow } from \"./SequenceFlow\";\r\nimport { ValidateHelper } from \"./ValidateHelper\";\r\nimport { ValidationError } from \"./ValidationError\";\r\n\r\nexport class SubProcess extends Activity implements IProcess {\r\n    constructor(model: BpmnModel) {\r\n        super(model);\r\n    }\r\n\r\n    readonly ClrTypeID: string = \"bpmn.SubProcess\";\r\n\r\n    NewInstance(): SubProcess {\r\n        return new SubProcess(this.Model);\r\n    }\r\n\r\n    private extensionElements: Array<ExtensionElement> = new Array<ExtensionElement>();\r\n    private flowElementsDic: { [Key: string]: FlowElement } = {};\r\n\r\n    protected ResetBeforeLoadFrom(): void {\r\n        super.ResetBeforeLoadFrom();\r\n\r\n        this.extensionElements = [];\r\n        this.flowElementsDic = {};\r\n    }\r\n\r\n    AddDataObject(dataObject: DataObject): void {\r\n        this.CheckVariableElement(dataObject);\r\n        this.InnerAddFlowElement(dataObject);\r\n    }\r\n\r\n    GetDataObject(dataObjectId: string): DataObject {\r\n        if (dataObjectId == null)\r\n            return null;\r\n\r\n        if (this.flowElementsDic.hasOwnProperty(dataObjectId))\r\n            return this.flowElementsDic[dataObjectId] as DataObject;\r\n\r\n        return null;\r\n    }\r\n\r\n    GetDataObjects(): Array<DataObject> {\r\n        let list = new Array<DataObject>();\r\n        for (let item in this.flowElementsDic) {\r\n            let obj = this.flowElementsDic[item] as DataObject;\r\n            if (obj != null)\r\n                list.push(obj);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    RemoveDataObject(dataObjectId: string): void {\r\n        this.RemoveFlowElement(dataObjectId);\r\n    }\r\n\r\n    AddFlowElement(element: FlowElement): void {\r\n        if (element instanceof DataObject)\r\n            throw new Error(\"请使用 AddDataObjcet 方法添加流程变量\");\r\n\r\n        ValidateHelper.CheckHasIdElement(element);\r\n        this.InnerAddFlowElement(element);\r\n    }\r\n\r\n    GetFlowElement(elementId: string): FlowElement {\r\n        if (elementId == null)\r\n            return null;\r\n\r\n        if (this.flowElementsDic.hasOwnProperty(elementId))\r\n            return this.flowElementsDic[elementId];\r\n\r\n        return null;\r\n    }\r\n\r\n    GetFlowElements(): { [key: string]: FlowElement; } {\r\n        return this.flowElementsDic;\r\n    }\r\n\r\n    RemoveFlowElement(elementId: string): void {\r\n        let element = this.GetFlowElement(elementId);\r\n        if (element == null)\r\n            return;\r\n\r\n        if (element instanceof SequenceFlow) {\r\n            this.RemoveSequenceFlow(<SequenceFlow>element);\r\n        }\r\n\r\n        if (element instanceof FlowNode) {\r\n            this.RemoveFlowNode(<FlowNode>element);\r\n        }\r\n\r\n        if (element instanceof DataObject) {\r\n            this.InnerRemoveDataObject(<DataObject>element);\r\n        }\r\n\r\n        delete this.flowElementsDic[elementId];\r\n        this.Model.RemoveHasIdElement(elementId);\r\n    }\r\n\r\n    ConvertToJsonObject(): any {\r\n        let obj = super.ConvertToJsonObject();\r\n\r\n        let flowElements: Array<any> = [];\r\n        for (let elementId in this.flowElementsDic) {\r\n            let element: any = this.flowElementsDic[elementId].ConvertToJsonObject();\r\n            flowElements.push(element);\r\n        }\r\n\r\n        BpmnModelHelper.SetAttributeValue(obj, \"flowElements\", flowElements);\r\n\r\n        return obj;\r\n    }\r\n\r\n    LoadFromJsonObject(obj: any): void {\r\n        super.LoadFromJsonObject(obj);\r\n\r\n        if (obj.hasOwnProperty(\"flowElements\") && Array.isArray(obj.FlowElements)) {\r\n            for (let elementObj of obj.FlowElements) {\r\n                let element: FlowElement = BpmnModelHelper.GetElementType(elementObj.ClrTypeID) as FlowElement;\r\n\r\n                if (element == null)\r\n                    continue;\r\n\r\n                element.Model = this.Model;\r\n                element.LoadFromJsonObject(elementObj);\r\n                this.InnerAddFlowElement(element);\r\n            }\r\n        }\r\n    }\r\n\r\n    private readonly SubProcessMEXTAG: string = \"bpmn.SubProcess\";\r\n\r\n    protected GetExtensionElements4ConvertTo(): Array<ExtensionElement> {\r\n        let list: Array<ExtensionElement> = super.GetExtensionElements4ConvertTo();\r\n\r\n        for (let item of this.extensionElements) {\r\n            item.MexTag = this.SubProcessMEXTAG;\r\n            list.push(item);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    protected SetExtensionElements4LoadFrom(extensionElements: Array<ExtensionElement>): void {\r\n        super.SetExtensionElements4LoadFrom(extensionElements);\r\n\r\n        for (let extensionElement of extensionElements) {\r\n            if (extensionElement.MexTag == this.SubProcessMEXTAG) {\r\n                this.extensionElements.push(extensionElement);\r\n            }\r\n        }\r\n    }\r\n\r\n    GetExtensionElements(): Array<ExtensionElement> {\r\n        return this.extensionElements;\r\n    }\r\n\r\n    Validate(errors: Array<ValidationError>): void {\r\n        super.Validate(errors);\r\n\r\n        for (let item in this.flowElementsDic) {\r\n            this.flowElementsDic[item].Validate(errors);\r\n        }\r\n\r\n        ValidateHelper.ValidateProcess(this, errors);\r\n    }\r\n\r\n    CheckVariableElement(variableElement: IVariableElement): void {\r\n        super.CheckVariableElement(variableElement);\r\n\r\n        ValidateHelper.CheckVariableElement(variableElement, null, null, this);\r\n    }\r\n\r\n    private RemoveSequenceFlow(element: SequenceFlow): void { }\r\n\r\n    private InnerRemoveDataObject(element: DataObject): void { }\r\n\r\n    private RemoveFlowNode(element: FlowNode): void {\r\n        let list: Array<SequenceFlow> = new Array<SequenceFlow>();\r\n        for (let item in this.GetFlowElements()) {\r\n            let itemElement: SequenceFlow = this.GetFlowElements()[item] as SequenceFlow;\r\n            if (itemElement == null)\r\n                continue;\r\n\r\n            if (itemElement.SourceRef == element.Id || itemElement.TargetRef == element.Id)\r\n                list.push(itemElement);\r\n        }\r\n\r\n        for (let item of list) {\r\n            delete this.flowElementsDic[item.Id];\r\n        }\r\n    }\r\n\r\n    private InnerAddFlowElement(element: FlowElement): void {\r\n        this.flowElementsDic[element.Id] = element;\r\n        this.Model.AddHasIdElement(element);\r\n    }\r\n}"]}