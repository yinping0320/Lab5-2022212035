import { Activity } from "./Activity";
import { BpmnModel } from "./BpmnModel";
import { DataObject } from "./DataObject";
import { ExtensionElement } from "./ExtensionElement";
import { FlowElement } from "./FlowElement";
import { IProcess } from "./IProcess";
import { IVariableElement } from "./IVariableElement";
import { ValidationError } from "./ValidationError";
export declare class SubProcess extends Activity implements IProcess {
    constructor(model: BpmnModel);
    readonly ClrTypeID: string;
    NewInstance(): SubProcess;
    private extensionElements;
    private flowElementsDic;
    protected ResetBeforeLoadFrom(): void;
    AddDataObject(dataObject: DataObject): void;
    GetDataObject(dataObjectId: string): DataObject;
    GetDataObjects(): Array<DataObject>;
    RemoveDataObject(dataObjectId: string): void;
    AddFlowElement(element: FlowElement): void;
    GetFlowElement(elementId: string): FlowElement;
    GetFlowElements(): {
        [key: string]: FlowElement;
    };
    RemoveFlowElement(elementId: string): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    private readonly SubProcessMEXTAG;
    protected GetExtensionElements4ConvertTo(): Array<ExtensionElement>;
    protected SetExtensionElements4LoadFrom(extensionElements: Array<ExtensionElement>): void;
    GetExtensionElements(): Array<ExtensionElement>;
    Validate(errors: Array<ValidationError>): void;
    CheckVariableElement(variableElement: IVariableElement): void;
    private RemoveSequenceFlow;
    private InnerRemoveDataObject;
    private RemoveFlowNode;
    private InnerAddFlowElement;
}
