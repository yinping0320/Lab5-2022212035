{"version":3,"file":"DataType.js","sourceRoot":"","sources":["../../../../../src/lib/model/mex/DataType.ts"],"names":[],"mappings":"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","sourcesContent":["import { BpmnModel } from \"../BpmnModel\";\r\nimport { BpmnModelHelper } from \"../BpmnModelHelper\";\r\nimport { ValidationError } from \"../ValidationError\";\r\nimport { ValidationLevel } from \"../ValidationLevel\";\r\nimport { BasicDataTypes } from \"./BasicDataTypes\";\r\nimport { CustomType } from \"./CustomType\";\r\nimport { DataTypes } from \"./DataTypes\";\r\nimport { MexExtensionElement } from \"./MexExtensionElement\";\r\nimport { SchemaType } from \"./SchemaType\";\r\n\r\nexport class DataType extends MexExtensionElement {\r\n    constructor(model: BpmnModel) {\r\n        super(model);\r\n\r\n        this.BasicType = BasicDataTypes.String;\r\n        this.Category = DataTypes.BasicType;\r\n    }\r\n\r\n    readonly ClrTypeID: string = \"bpmn.Mex.DataType\";\r\n    NewInstance(): DataType {\r\n        return new DataType(this.Model);\r\n    }\r\n\r\n    BasicType: BasicDataTypes;\r\n    Category: string;\r\n    Description: string;\r\n    InitialValue: any;\r\n    SchemaType: SchemaType;\r\n    CustomType: CustomType;\r\n\r\n    protected ResetBeforeLoadFrom(): void {\r\n        super.ResetBeforeLoadFrom();\r\n\r\n        this.BasicType = BasicDataTypes.String;\r\n        this.Category = DataTypes.BasicType;\r\n        this.Description = null;\r\n        this.InitialValue = null;\r\n        this.SchemaType = null;\r\n        this.CustomType = null;\r\n    }\r\n\r\n    ConvertToJsonObject(): any {\r\n        let obj: any = super.ConvertToJsonObject();\r\n\r\n        BpmnModelHelper.SetAttributeValue(obj, \"Category\", this.Category);\r\n        BpmnModelHelper.SetAttributeValue(obj, \"Description\", this.Description);\r\n\r\n        switch (this.Category) {\r\n            case DataTypes.BasicType:\r\n                {\r\n                    BpmnModelHelper.SetAttributeValue(obj, \"BasicType\", this.BasicType);\r\n\r\n                    if (this.InitialValue != null) {\r\n                        try {\r\n                            switch (this.BasicType) {\r\n                                case BasicDataTypes.String:\r\n                                    BpmnModelHelper.SetAttributeValue(obj, \"InitialValue\", <string>this.InitialValue);\r\n                                    break;\r\n\r\n                                case BasicDataTypes.Integer:\r\n                                case BasicDataTypes.Decimal:\r\n                                    BpmnModelHelper.SetAttributeValue(obj, \"InitialValue\", <number>this.InitialValue);\r\n                                    break;\r\n\r\n                                case BasicDataTypes.DateTime:\r\n                                    BpmnModelHelper.SetAttributeValue(obj, \"InitialValue\", this.DateFormat(\"yyyyMMddhhmmssS\", <Date>this.InitialValue));\r\n                                    break;\r\n\r\n                                case BasicDataTypes.Boolean:\r\n                                    BpmnModelHelper.SetAttributeValue(obj, \"InitialValue\", <boolean>this.InitialValue);\r\n                                    break;\r\n\r\n                                //case \"ByteArray\":\r\n                                //    {\r\n                                //        obj.InitialValue = <Array<any>>this.InitialValue;\r\n                                //        break;\r\n                                //    }\r\n\r\n                                default:\r\n                                    throw new Error(\"Invalid argument!\");\r\n                            }\r\n                        }\r\n                        catch (err) {\r\n                            throw new Error(`无法将给定的值转成 ${this.BasicType.toString()} 基本数据类型.`);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            case DataTypes.SchemaType:\r\n                {\r\n                    if (this.SchemaType != null)\r\n                        obj.SchemaType = this.SchemaType.ConvertToJsonObject();\r\n\r\n                    if (this.InitialValue != null)\r\n                        obj.InitialValue = <string>this.InitialValue;\r\n\r\n                    break;\r\n                }\r\n            case DataTypes.CustomType:\r\n                {\r\n                    if (this.CustomType != null)\r\n                        obj.CustomType = this.CustomType.ConvertToJsonObject();\r\n\r\n                    break;\r\n                }\r\n\r\n            default:\r\n                throw new Error(\"Invalid argument!\");\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    LoadFromJsonObject(obj: any): void {\r\n        super.LoadFromJsonObject(obj);\r\n\r\n        this.Category = obj.Category;\r\n        this.Description = obj.Description;\r\n\r\n        switch (this.Category) {\r\n            case DataTypes.BasicType:\r\n                {\r\n                    this.BasicType = obj.BasicType;\r\n\r\n                    if (obj.hasOwnProperty(\"InitialValue\")) {\r\n                        switch (this.BasicType) {\r\n                            case BasicDataTypes.String:\r\n                                this.InitialValue = <string>obj.InitialValue;\r\n                                break;\r\n\r\n                            case BasicDataTypes.Integer:\r\n                            case BasicDataTypes.Decimal:\r\n                                this.InitialValue = <number>obj.InitialValue;\r\n                                break;\r\n\r\n                            case BasicDataTypes.DateTime:\r\n                                //this.InitialValue = new Date((<number>obj.InitialValue - 621355968000000000) / 10000);\r\n                                this.InitialValue = this.DateParse(<string>obj.InitialValue);\r\n                                break;\r\n\r\n                            case BasicDataTypes.Boolean:\r\n                                this.InitialValue = <boolean>obj.InitialValue;\r\n                                break;\r\n\r\n                            //case \"ByteArray\":\r\n                            //    {\r\n                            //        this.InitialValue = <Array<any>>obj.InitialValue;\r\n                            //        break;\r\n                            //    }\r\n\r\n                            default:\r\n                                throw new Error(\"Invalid argument!\");\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            case DataTypes.SchemaType:\r\n                {\r\n                    if (obj.hasOwnProperty(\"SchemaType\")) {\r\n                        this.SchemaType = new SchemaType(this.Model);\r\n                        this.SchemaType.LoadFromJsonObject(obj.SchemaType);\r\n                    }\r\n\r\n                    this.InitialValue = <string>obj.InitialValue;\r\n\r\n                    break;\r\n                }\r\n            case DataTypes.CustomType:\r\n                {\r\n                    if (obj.hasOwnProperty(\"CustomType\")) {\r\n                        this.CustomType = BpmnModelHelper.GetElementType(obj.CustomType.ClrTypeID) as CustomType;\r\n                        this.CustomType.LoadFromJsonObject(obj.CustomType);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n            default:\r\n                throw new Error(\"Invalid argument!\");\r\n        }\r\n    }\r\n\r\n    Validate(errors: Array<ValidationError>): void {\r\n        super.Validate(errors);\r\n\r\n        if (this.Category == DataTypes.SchemaType) {\r\n            if (this.SchemaType == null) {\r\n                let error: ValidationError = new ValidationError();\r\n                error.Element = this;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = \"没有设定 Schema 数据类型\";\r\n\r\n                errors.push(error);\r\n            }\r\n            else {\r\n                this.SchemaType.Validate(errors);\r\n            }\r\n        }\r\n    }\r\n\r\n    private DateFormat(fmt: string, value: Date) {\r\n        var o = {\r\n            \"M+\": value.getUTCMonth() + 1,\r\n            \"d+\": value.getUTCDate(),\r\n            \"h+\": value.getUTCHours(),\r\n            \"m+\": value.getUTCMinutes(),\r\n            \"s+\": value.getUTCSeconds(),\r\n            \"q+\": Math.floor((value.getMonth() + 3) / 3),\r\n            \"S\": value.getUTCMilliseconds()\r\n        };\r\n        if (/(y+)/.test(fmt))\r\n            fmt = fmt.replace(RegExp.$1, (value.getFullYear() + \"\").substr(4 - RegExp.$1.length));\r\n        for (var k in o)\r\n            if (new RegExp(\"(\" + k + \")\").test(fmt))\r\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\r\n\r\n        return fmt;\r\n    }\r\n\r\n    private DateParse(dt: string) {\r\n        let date: Date = new Date();\r\n        date.setUTCFullYear(parseInt(dt.slice(0, 4)), parseInt(dt.slice(4, 6)) - 1, parseInt(dt.slice(6, 8)));\r\n        date.setUTCHours(parseInt(dt.slice(8, 10)), parseInt(dt.slice(10, 12)), parseInt(dt.slice(12, 14)), parseInt(dt.slice(14, 17)));\r\n\r\n        return date;\r\n    }\r\n}"]}