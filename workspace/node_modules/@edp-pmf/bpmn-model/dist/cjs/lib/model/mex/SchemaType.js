"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaType = void 0;
var tslib_1 = require("tslib");
var BpmnModelHelper_1 = require("../BpmnModelHelper");
var ValidationError_1 = require("../ValidationError");
var ValidationLevel_1 = require("../ValidationLevel");
var BeSchema_1 = require("./BeSchema");
var MexElement_1 = require("./MexElement");
var SchemaTypes_1 = require("./SchemaTypes");
var XmlSchema_1 = require("./XmlSchema");
var SchemaType = /** @class */ (function (_super) {
    tslib_1.__extends(SchemaType, _super);
    function SchemaType(model) {
        var _this = _super.call(this, model) || this;
        _this.Category = SchemaTypes_1.SchemaTypes.BeSchema;
        return _this;
    }
    SchemaType.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.Category = SchemaTypes_1.SchemaTypes.BeSchema;
        this.BeSchema = null;
        this.XmlSchema = null;
    };
    SchemaType.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "Category", this.Category);
        switch (this.Category) {
            case SchemaTypes_1.SchemaTypes.BeSchema:
                {
                    if (this.BeSchema) {
                        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "BeSchema", this.BeSchema.ConvertToJsonObject());
                    }
                    break;
                }
            case SchemaTypes_1.SchemaTypes.XmlSchema:
                {
                    if (this.XmlSchema) {
                        BpmnModelHelper_1.BpmnModelHelper.SetAttributeValue(obj, "XmlSchema", this.XmlSchema.ConvertToJsonObject());
                    }
                    break;
                }
            default:
                throw new Error("Invalid argument!");
        }
        return obj;
    };
    SchemaType.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Category = obj.Category;
        switch (this.Category) {
            case SchemaTypes_1.SchemaTypes.BeSchema:
                {
                    if (obj.BeSchema) {
                        this.BeSchema = new BeSchema_1.BeSchema(this.Model);
                        this.BeSchema.LoadFromJsonObject(obj.BeSchema);
                    }
                    break;
                }
            case SchemaTypes_1.SchemaTypes.XmlSchema:
                {
                    if (obj.XmlSchema) {
                        this.XmlSchema = new XmlSchema_1.XmlSchema(this.Model);
                        this.XmlSchema.LoadFromJsonObject(obj.XmlSchema);
                    }
                    break;
                }
            default:
                throw new Error("Invalid argument!");
        }
    };
    SchemaType.prototype.Validate = function (errors) {
        _super.prototype.Validate.call(this, errors);
        if (this.Category == SchemaTypes_1.SchemaTypes.BeSchema) {
            if (this.BeSchema == null) {
                var error = new ValidationError_1.ValidationError();
                error.Element = this;
                error.ErrorLevel = ValidationLevel_1.ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定 BeSchema";
                errors.push(error);
            }
            else {
                this.BeSchema.Validate(errors);
            }
        }
        if (this.Category == SchemaTypes_1.SchemaTypes.XmlSchema) {
            if (this.XmlSchema == null) {
                var error = new ValidationError_1.ValidationError();
                error.Element = this;
                error.ErrorLevel = ValidationLevel_1.ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定 XmlSchema";
                errors.push(error);
            }
            else {
                this.XmlSchema.Validate(errors);
            }
        }
    };
    return SchemaType;
}(MexElement_1.MexElement));
exports.SchemaType = SchemaType;
//# sourceMappingURL=SchemaType.js.map