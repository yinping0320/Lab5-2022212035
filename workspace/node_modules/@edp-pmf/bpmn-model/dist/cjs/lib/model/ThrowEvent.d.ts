import { BpmnModel } from "./BpmnModel";
import { DataInput } from "./DataInput";
import { DataInputAssociation } from "./DataInputAssociation";
import { IDataInputAssociationContainer } from "./IDataInputAssociationContainer";
import { IDataInputContainer } from "./IDataInputContainer";
import { IVariableElement } from "./IVariableElement";
import { ValidationError } from "./ValidationError";
import { Event } from "./Event";
export declare abstract class ThrowEvent extends Event implements IDataInputAssociationContainer, IDataInputContainer {
    constructor(model: BpmnModel);
    private dataInputAssociationDic;
    private dataInputDIc;
    protected ResetBeforeLoadFrom(): void;
    AddDataInput(item: DataInput): void;
    GetDataInput(dataInputId: string): DataInput;
    GetDataInputs(): Array<DataInput>;
    RemoveDataInput(dataInputId: string): void;
    AddDataInputAssociation(association: DataInputAssociation): void;
    GetDataInputAssociation(associationId: string): DataInputAssociation;
    GetDataInputAssociations(): Array<DataInputAssociation>;
    RemoveDataInputAssociation(associationId: string): void;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    Validate(errors: Array<ValidationError>): void;
    CheckVariableElement(variableElement: IVariableElement): void;
}
