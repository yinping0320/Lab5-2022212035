"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Association_1 = require("./Association");
var bpmndi_1 = require("./bpmndi");
var BpmnModel_1 = require("./BpmnModel");
var BpmnModelHelper_1 = require("./BpmnModelHelper");
var CallActivity_1 = require("./CallActivity");
var CompensateEventDefinition_1 = require("./CompensateEventDefinition");
var DataObject_1 = require("./DataObject");
var EndEvent_1 = require("./EndEvent");
var ExclusiveGateway_1 = require("./ExclusiveGateway");
var InclusiveGateway_1 = require("./InclusiveGateway");
var IntermediateCatchEvent_1 = require("./IntermediateCatchEvent");
var MergeActivity_1 = require("./MergeActivity");
var mex_1 = require("./mex");
var ParallelGateway_1 = require("./ParallelGateway");
var Process_1 = require("./Process");
var SequenceFlow_1 = require("./SequenceFlow");
var Signal_1 = require("./Signal");
var SignalEventDefinition_1 = require("./SignalEventDefinition");
var SplitActivity_1 = require("./SplitActivity");
var StartEvent_1 = require("./StartEvent");
var SubProcess_1 = require("./SubProcess");
var registerElementTypeModel = new BpmnModel_1.BpmnModel();
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new Process_1.Process(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new SequenceFlow_1.SequenceFlow(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new DataObject_1.DataObject(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new SubProcess_1.SubProcess(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new CallActivity_1.CallActivity(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new EndEvent_1.EndEvent(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new StartEvent_1.StartEvent(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new ExclusiveGateway_1.ExclusiveGateway(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new InclusiveGateway_1.InclusiveGateway(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new ParallelGateway_1.ParallelGateway(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new mex_1.DataType(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new mex_1.CustomType(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new bpmndi_1.BPMNPlane(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new bpmndi_1.BPMNShape(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new bpmndi_1.BPMNLabel(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new bpmndi_1.BPMNEdge(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new CompensateEventDefinition_1.CompensateEventDefinition(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new Association_1.Association(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new IntermediateCatchEvent_1.IntermediateCatchEvent(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new SignalEventDefinition_1.SignalEventDefinition(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new Signal_1.Signal(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new SplitActivity_1.SplitActivity(registerElementTypeModel));
BpmnModelHelper_1.BpmnModelHelper.RegisterElementType(new MergeActivity_1.MergeActivity(registerElementTypeModel));
//# sourceMappingURL=RegisterElementType.js.map