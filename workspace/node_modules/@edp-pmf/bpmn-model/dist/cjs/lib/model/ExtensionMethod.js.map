{"version":3,"file":"ExtensionMethod.js","sourceRoot":"","sources":["../../../../src/lib/model/ExtensionMethod.ts"],"names":[],"mappings":";;;AAAA,6DAA4D;AAQ5D;IAAA;IA6DA,CAAC;IA5DG,qBAAqB;IAEP,iCAAiB,GAA/B,UAAgC,GAAQ,EAAE,aAAqB;QAC3D,OAAO,yCAAmB,CAAC,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IACrE,CAAC;IAEa,yCAAyB,GAAvC,UAAwC,GAAQ,EAAE,aAAqB;QACnE,OAAO,yCAAmB,CAAC,0BAA0B,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC9E,CAAC;IAEa,yCAAyB,GAAvC,UAAwC,GAAQ,EAAE,aAAqB;QACnE,OAAO,yCAAmB,CAAC,yBAAyB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC7E,CAAC;IAEa,wCAAwB,GAAtC,UAAuC,GAAQ,EAAE,aAAqB;QAClE,OAAO,yCAAmB,CAAC,yBAAyB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC7E,CAAC;IAEa,uCAAuB,GAArC,UAAsC,GAAQ,EAAE,aAAqB;QACjE,OAAO,yCAAmB,CAAC,yBAAyB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC7E,CAAC;IAEa,wCAAwB,GAAtC,UAAuC,GAAQ,EAAE,aAAqB;QAClE,OAAO,yCAAmB,CAAC,yBAAyB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC7E,CAAC;IAEa,iCAAiB,GAA/B,UAAgC,GAAQ,EAAE,aAAqB,EAAE,KAAU;QACvE,yCAAmB,CAAC,iBAAiB,CAAC,GAAG,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACrE,CAAC;IACD,aAAa;IAEC,oCAAoB,GAAlC,UAAmC,SAA8B,EAAE,IAAY;QAC3E,KAAiB,UAAyB,EAAzB,KAAA,SAAS,CAAC,aAAa,EAAE,EAAzB,cAAyB,EAAzB,IAAyB,EAAE;YAAvC,IAAI,IAAI,SAAA;YACT,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;gBACnB,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEa,qCAAqB,GAAnC,UAAoC,SAA+B,EAAE,IAAY;QAC7E,KAAiB,UAA0B,EAA1B,KAAA,SAAS,CAAC,cAAc,EAAE,EAA1B,cAA0B,EAA1B,IAA0B,EAAE;YAAxC,IAAI,IAAI,SAAA;YACT,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;gBACnB,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEa,qCAAqB,GAAnC,UAAoC,SAA+B,EAAE,IAAY;QAC7E,KAAiB,UAA0B,EAA1B,KAAA,SAAS,CAAC,cAAc,EAAE,EAA1B,cAA0B,EAA1B,IAA0B,EAAE;YAAxC,IAAI,IAAI,SAAA;YACT,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;gBACnB,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,sBAAC;AAAD,CAAC,AA7DD,IA6DC;AA7DY,0CAAe","sourcesContent":["import { BpmnModelJsonHelper } from \"./BpmnModelJsonHelper\";\r\nimport { DataInput } from \"./DataInput\";\r\nimport { DataObject } from \"./DataObject\";\r\nimport { DataOutput } from \"./DataOutput\";\r\nimport { IDataInputContainer } from \"./IDataInputContainer\";\r\nimport { IDataObjectContainer } from \"./IDataObjectContainer\";\r\nimport { IDataOutputContainer } from \"./IDataOutputContainer\";\r\n\r\nexport class ExtensionMethod {\r\n    ///#region JsonObject\r\n\r\n    public static GetAttributeValue(obj: any, attributeName: string): any {\r\n        return BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);\r\n    }\r\n\r\n    public static GetAttributeValue4Boolean(obj: any, attributeName: string): boolean {\r\n        return BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, attributeName);\r\n    }\r\n\r\n    public static GetAttributeValue4Decimal(obj: any, attributeName: string): number {\r\n        return BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, attributeName);\r\n    }\r\n\r\n    public static GetAttributeValue4Double(obj: any, attributeName: string): number {\r\n        return BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, attributeName);\r\n    }\r\n\r\n    public static GetAttributeValue4Int64(obj: any, attributeName: string): number {\r\n        return BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, attributeName);\r\n    }\r\n\r\n    public static GetAttributeValue4String(obj: any, attributeName: string): string {\r\n        return BpmnModelJsonHelper.GetAttributeValueAsString(obj, attributeName);\r\n    }\r\n\r\n    public static SetAttributeValue(obj: any, attributeName: string, value: any): void {\r\n        BpmnModelJsonHelper.SetAttributeValue(obj, attributeName, value);\r\n    }\r\n    ///#endregion\r\n\r\n    public static GetDataInputWithName(container: IDataInputContainer, name: string): DataInput {\r\n        for (let item of container.GetDataInputs()) {\r\n            if (item.Name == name) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static GetDataOutputWithName(container: IDataOutputContainer, name: string): DataOutput {\r\n        for (let item of container.GetDataOutputs()) {\r\n            if (item.Name == name) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static GetDataObjectWithName(container: IDataObjectContainer, name: string): DataObject {\r\n        for (let item of container.GetDataObjects()) {\r\n            if (item.Name == name) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}"]}