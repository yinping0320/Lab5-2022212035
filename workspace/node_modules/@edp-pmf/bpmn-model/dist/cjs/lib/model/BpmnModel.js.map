{"version":3,"file":"BpmnModel.js","sourceRoot":"","sources":["../../../../src/lib/model/BpmnModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { BPMNDiagram } from \"./bpmndi/BPMNDiagram\";\r\nimport { ExtensionMethod } from \"./ExtensionMethod\";\r\nimport { IHasIdElement } from \"./IHasIdElement\";\r\nimport { Process } from \"./Process\";\r\nimport { Signal } from \"./Signal\";\r\nimport { ValidateHelper } from \"./ValidateHelper\";\r\nimport { ValidationError } from \"./ValidationError\";\r\n\r\nexport class BpmnModel {\r\n    constructor() {\r\n    }\r\n\r\n    MetadataContentID: string;\r\n    MetadataContentCode: string;\r\n    MetadataContentName: string;\r\n    TargetNamespace: string;\r\n    DefaultProcess: Process;\r\n    DefaultDiagram: BPMNDiagram;\r\n    private hasIdElementDic: { [Key: string]: IHasIdElement } = {};\r\n    signals: Array<Signal> = new Array();\r\n\r\n    protected ResetBeforeLoadFrom(): void {\r\n        this.hasIdElementDic = {};\r\n        this.MetadataContentID = null;\r\n        this.MetadataContentCode = null;\r\n        this.MetadataContentName = null;\r\n        this.TargetNamespace = null;\r\n        this.DefaultProcess = null;\r\n        this.DefaultDiagram = null;\r\n    }\r\n\r\n    ConvertToJson(): string {\r\n        let model: any = {};\r\n\r\n        model.TargetNamespace = this.TargetNamespace;\r\n        model.MetadataContentID = this.MetadataContentID;\r\n        model.MetadataContentCode = this.MetadataContentCode;\r\n        model.MetadataContentName = this.MetadataContentName;\r\n\r\n        if (this.DefaultProcess != null) {\r\n            model.DefaultProcess = this.DefaultProcess.ConvertToJsonObject();\r\n        }\r\n\r\n        if (this.DefaultDiagram != null) {\r\n            model.DefaultDiagram = this.DefaultDiagram.ConvertToJsonObject();\r\n        }\r\n\r\n        if (this.signals != null && this.signals.length > 0) {\r\n            let signalJsonArray: Array<any> = new Array();\r\n            for (let item of this.signals) {\r\n                signalJsonArray.push(item.convertToJsonObject());\r\n            }\r\n            if (signalJsonArray.length > 0) {\r\n                ExtensionMethod.SetAttributeValue(model, \"signals\", signalJsonArray);\r\n            }\r\n        }\r\n\r\n        return JSON.stringify(model);\r\n    }\r\n\r\n    LoadFromJson(json: string): void {\r\n        let model: any = JSON.parse(json);\r\n\r\n        this.TargetNamespace = model.TargetNamespace;\r\n        this.MetadataContentID = model.MetadataContentID;\r\n        this.MetadataContentCode = model.MetadataContentCode;\r\n        this.MetadataContentName = model.MetadataContentName;\r\n\r\n        this.DefaultProcess = new Process(this);\r\n        if (model.DefaultProcess)\r\n            this.DefaultProcess.LoadFromJsonObject(model.DefaultProcess);\r\n\r\n        this.DefaultDiagram = new BPMNDiagram(this);\r\n        if (model.DefaultDiagram)\r\n            this.DefaultDiagram.LoadFromJsonObject(model.DefaultDiagram);\r\n\r\n        let signalsElement: any = ExtensionMethod.GetAttributeValue(model, \"signals\");\r\n        if (signalsElement instanceof Array) {\r\n            let signalsJsonArray: Array<any> = signalsElement;\r\n            for (let item of signalsJsonArray) {\r\n                let signal = new Signal(this);\r\n                signal.LoadFromJsonObject(item);\r\n                this.signals.push(signal);\r\n            }\r\n        }\r\n    }\r\n\r\n    AddHasIdElement(element: IHasIdElement): void {\r\n        if (element == null)\r\n            throw new Error(\"element is null\");\r\n\r\n        if (element.Id == null)\r\n            throw new Error(\"元素 Id 不能为 null\");\r\n\r\n        if (ValidateHelper.IsMatchVariableNameRules(element.Id) == false)\r\n            throw new Error(\"元素 Id 只能包含字母、数字和下划线，且不能以数字开头。\");\r\n\r\n        if (this.hasIdElementDic.hasOwnProperty(element.Id)) {\r\n            throw new Error(`已经存在 Id 为 ${element.Id} 的流程元素。`);\r\n        }\r\n\r\n        this.hasIdElementDic[element.Id] = element;\r\n    }\r\n\r\n    RemoveHasIdElement(elementId: string): void {\r\n        delete this.hasIdElementDic[elementId];\r\n    }\r\n\r\n    GetHasIdElement(elementId: string): IHasIdElement {\r\n        if (elementId == null)\r\n            return null;\r\n\r\n        if (this.hasIdElementDic.hasOwnProperty(elementId)) {\r\n            return this.hasIdElementDic[elementId];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    Validate(): Array<ValidationError> {\r\n        let errors: Array<ValidationError> = new Array<ValidationError>();\r\n\r\n        if (this.DefaultProcess != null) {\r\n            this.DefaultProcess.Validate(errors);\r\n        }\r\n\r\n        if (this.DefaultDiagram != null) {\r\n            this.DefaultDiagram.Validate(errors);\r\n        }\r\n\r\n\r\n        return errors;\r\n    }\r\n}"]}