{"version":3,"file":"CallActivity.js","sourceRoot":"","sources":["../../../../src/lib/model/CallActivity.ts"],"names":[],"mappings":";;;;AAAA,uCAAsC;AAEtC,qDAAoD;AAEpD,+EAA8E;AAE9E;IAAkC,wCAAQ;IAStC,sBAAY,KAAgB;QAA5B,YACI,kBAAM,KAAK,CAAC,SAGf;QAEQ,eAAS,GAAW,mBAAmB,CAAC;QA8BhC,wBAAkB,GAAW,mBAAmB,CAAC;QAjC9D,KAAI,CAAC,0BAA0B,GAAG,IAAI,uDAA0B,CAAC,KAAK,CAAC,CAAC;;IAC5E,CAAC;IAZD,4BAAK,GAAL;QACI,IAAM,KAAK,GAAG,iBAAM,KAAK,WAAkB,CAAC;QAC5C,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,KAAK,CAAC,0BAA0B,GAAG,IAAI,CAAC,0BAA0B,CAAC;QAEnE,OAAO,KAAK,CAAC;IACjB,CAAC;IAUD,kCAAW,GAAX;QACI,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAKS,0CAAmB,GAA7B;QACI,iBAAM,mBAAmB,WAAE,CAAC;QAE5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED,0CAAmB,GAAnB;QACI,IAAI,GAAG,GAAQ,iBAAM,mBAAmB,WAAE,CAAC;QAE3C,iCAAe,CAAC,iBAAiB,CAAC,GAAG,EAAE,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAE5E,OAAO,GAAG,CAAC;IACf,CAAC;IAED,yCAAkB,GAAlB,UAAmB,GAAQ;QACvB,iBAAM,kBAAkB,YAAC,GAAG,CAAC,CAAC;QAE9B,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,aAAa,CAAC;IAC3C,CAAC;IAIS,qDAA8B,GAAxC;QACI,IAAI,IAAI,GAA4B,iBAAM,8BAA8B,WAAE,CAAC;QAE3E,IAAI,IAAI,CAAC,0BAA0B,IAAI,IAAI;YACvC,IAAI,CAAC,0BAA0B,CAAC,wBAAwB,EAAE,CAAC,MAAM,GAAG,CAAC;YACrE,IAAI,CAAC,0BAA0B,CAAC,yBAAyB,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;YACxE,IAAI,CAAC,0BAA0B,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC;YACjE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;SAC9C;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,oDAA6B,GAAvC,UAAwC,iBAA0C;QAC9E,iBAAM,6BAA6B,YAAC,iBAAiB,CAAC,CAAC;QAEvD,KAA6B,UAAiB,EAAjB,uCAAiB,EAAjB,+BAAiB,EAAjB,IAAiB,EAAE;YAA3C,IAAI,gBAAgB,0BAAA;YACrB,IAAI,gBAAgB,YAAY,uDAA0B,IAAI,gBAAgB,CAAC,MAAM,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC9G,IAAI,CAAC,0BAA0B,GAAG,gBAA8C,CAAC;aACpF;SACJ;IACL,CAAC;IACL,mBAAC;AAAD,CAAC,AArED,CAAkC,mBAAQ,GAqEzC;AArEY,oCAAY","sourcesContent":["import { Activity } from \"./Activity\";\r\nimport { BpmnModel } from \"./BpmnModel\";\r\nimport { BpmnModelHelper } from \"./BpmnModelHelper\";\r\nimport { ExtensionElement } from \"./ExtensionElement\";\r\nimport { SubProcessDataAssociations } from \"./mex/SubProcessDataAssociations\";\r\n\r\nexport class CallActivity extends Activity {\r\n    clone(): CallActivity {\r\n        const clone = super.clone() as CallActivity;\r\n        clone.CalledElement = this.CalledElement;\r\n        clone.SubProcessDataAssociations = this.SubProcessDataAssociations;\r\n\r\n        return clone;\r\n    }\r\n\r\n    constructor(model: BpmnModel) {\r\n        super(model);\r\n\r\n        this.SubProcessDataAssociations = new SubProcessDataAssociations(model);\r\n    }\r\n\r\n    readonly ClrTypeID: string = \"bpmn.CallActivity\";\r\n\r\n    NewInstance(): CallActivity {\r\n        return new CallActivity(this.Model);\r\n    }\r\n\r\n    CalledElement: string;\r\n    public SubProcessDataAssociations: SubProcessDataAssociations;\r\n\r\n    protected ResetBeforeLoadFrom(): void {\r\n        super.ResetBeforeLoadFrom();\r\n\r\n        this.CalledElement = null;\r\n        this.SubProcessDataAssociations = null;\r\n    }\r\n\r\n    ConvertToJsonObject(): any {\r\n        let obj: any = super.ConvertToJsonObject();\r\n\r\n        BpmnModelHelper.SetAttributeValue(obj, \"CalledElement\", this.CalledElement);\r\n\r\n        return obj;\r\n    }\r\n\r\n    LoadFromJsonObject(obj: any): void {\r\n        super.LoadFromJsonObject(obj);\r\n\r\n        this.CalledElement = obj.CalledElement;\r\n    }\r\n\r\n    private readonly CALLACTIVITYMEXTAG: string = \"bpmn.CallActivity\";\r\n\r\n    protected GetExtensionElements4ConvertTo(): Array<ExtensionElement> {\r\n        let list: Array<ExtensionElement> = super.GetExtensionElements4ConvertTo();\r\n\r\n        if (this.SubProcessDataAssociations != null &&\r\n            this.SubProcessDataAssociations.GetDataInputAssociations().length > 0 &&\r\n            this.SubProcessDataAssociations.GetDataOutputAssociations().length > 0) {\r\n            this.SubProcessDataAssociations.MexTag = this.CALLACTIVITYMEXTAG;\r\n            list.push(this.SubProcessDataAssociations);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    protected SetExtensionElements4LoadFrom(extensionElements: Array<ExtensionElement>): void {\r\n        super.SetExtensionElements4LoadFrom(extensionElements);\r\n\r\n        for (let extensionElement of extensionElements) {\r\n            if (extensionElement instanceof SubProcessDataAssociations && extensionElement.MexTag == this.CALLACTIVITYMEXTAG) {\r\n                this.SubProcessDataAssociations = extensionElement as SubProcessDataAssociations;\r\n            }\r\n        }\r\n    }\r\n}"]}