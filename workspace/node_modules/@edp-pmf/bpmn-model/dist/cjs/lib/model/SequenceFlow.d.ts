import { BpmnModel } from "./BpmnModel";
import { Expression } from "./Expression";
import { ExtensionElement } from "./ExtensionElement";
import { FlowElement } from "./FlowElement";
import { IExecutionListenerContainer } from "./IExecutionListenerContainer";
import { ExecutionListener } from "./mex/ExecutionListener";
import { ValidationError } from "./ValidationError";
export declare class SequenceFlow extends FlowElement implements IExecutionListenerContainer {
    constructor(model: BpmnModel);
    readonly ClrTypeID: string;
    ConditionExpression: Expression;
    SkipExpression: string;
    SourceRef: string;
    TargetRef: string;
    private executionListeners;
    protected ResetBeforeLoadFrom(): void;
    NewInstance(): SequenceFlow;
    GetExecutionListeners(): Array<ExecutionListener>;
    ConvertToJsonObject(): any;
    LoadFromJsonObject(obj: any): void;
    private readonly MEXTAG;
    protected GetExtensionElements4ConvertTo(): Array<ExtensionElement>;
    protected SetExtensionElements4LoadFrom(extensionElements: Array<ExtensionElement>): void;
    Validate(errors: Array<ValidationError>): void;
}
