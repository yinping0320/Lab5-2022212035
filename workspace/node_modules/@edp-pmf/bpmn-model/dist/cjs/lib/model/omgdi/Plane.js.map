{"version":3,"file":"Plane.js","sourceRoot":"","sources":["../../../../../src/lib/model/omgdi/Plane.ts"],"names":[],"mappings":"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","sourcesContent":["import { BpmnModel } from \"../BpmnModel\";\r\nimport { BpmnModelHelper } from \"../BpmnModelHelper\";\r\nimport { ValidateHelper } from \"../ValidateHelper\";\r\nimport { ValidationError } from \"../ValidationError\";\r\nimport { DiagramElement } from \"./DiagramElement\";\r\nimport { Node } from \"./Node\";\r\n\r\nexport abstract class Plane extends Node {\r\n    constructor(model: BpmnModel) {\r\n        super(model);\r\n    }\r\n\r\n    diagramElementDic: { [Key: string]: DiagramElement } = {};\r\n\r\n    protected ResetBeforeLoadFrom(): void {\r\n        super.ResetBeforeLoadFrom();\r\n\r\n        this.diagramElementDic = {};\r\n    }\r\n\r\n    AddDiagramElement(element: DiagramElement): void {\r\n        this.CheckDiagramElement(element);\r\n        this.diagramElementDic[element.Id] = element;\r\n    }\r\n\r\n    GetDiagramElement(elementId: string): any {\r\n        if (elementId == null)\r\n            return null;\r\n\r\n        if (this.diagramElementDic.hasOwnProperty(elementId))\r\n            return this.diagramElementDic[elementId];\r\n\r\n        return null;\r\n    }\r\n\r\n    GetDiagramElements(): Array<DiagramElement> {\r\n        let diagramElements: Array<DiagramElement> = new Array<DiagramElement>();\r\n\r\n        for (let item in this.diagramElementDic) {\r\n            let diagramElement = this.diagramElementDic[item];\r\n\r\n            diagramElements.push(diagramElement);\r\n        }\r\n\r\n        return diagramElements;\r\n    }\r\n\r\n    RemoveDiagramElement(elementId: string): void {\r\n        delete this.diagramElementDic[elementId];\r\n    }\r\n\r\n    CheckDiagramElement(element: DiagramElement): void {\r\n        ValidateHelper.CheckHasIdElement(element);\r\n    }\r\n\r\n    ConvertToJsonObject(): any {\r\n        let obj = super.ConvertToJsonObject();\r\n\r\n        let diagramElements: Array<any> = new Array<any>();\r\n        for (let item in this.diagramElementDic) {\r\n            let element = this.diagramElementDic[item].ConvertToJsonObject();\r\n            diagramElements.push(element);\r\n        }\r\n\r\n        if (diagramElements.length > 0) {\r\n            BpmnModelHelper.SetAttributeValue(obj, \"diagramElements\", diagramElements);\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    LoadFromJsonObject(obj: any): void {\r\n        super.LoadFromJsonObject(obj);\r\n\r\n        if (obj.hasOwnProperty(\"diagramElements\") && Array.isArray(obj.diagramElements)) {\r\n            for (let node of obj.diagramElements) {\r\n                let diagramElement = BpmnModelHelper.GetElementType(node.ClrTypeID) as DiagramElement;\r\n\r\n                if (diagramElement == null)\r\n                    continue;\r\n\r\n                diagramElement.Model = this.Model;\r\n                diagramElement.LoadFromJsonObject(node);\r\n                this.AddDiagramElement(diagramElement);\r\n            }\r\n        }\r\n    }\r\n\r\n    Validate(errors: Array<ValidationError>): void {\r\n        super.Validate(errors);\r\n\r\n        for (let item of this.GetDiagramElements()) {\r\n            item.Validate(errors);\r\n        }\r\n    }\r\n}"]}