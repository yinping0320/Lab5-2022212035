{"version":3,"file":"ValidateHelper.js","sourceRoot":"","sources":["../../../../src/lib/model/ValidateHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataInput } from \"./DataInput\";\r\nimport { DataInputAssociation } from \"./DataInputAssociation\";\r\nimport { DataOutput } from \"./DataOutput\";\r\nimport { EndEvent } from \"./EndEvent\";\r\nimport { FlowNode } from \"./FlowNode\";\r\nimport { IDataInputAssociationContainer } from \"./IDataInputAssociationContainer\";\r\nimport { IDataInputContainer } from \"./IDataInputContainer\";\r\nimport { IDataObjectContainer } from \"./IDataObjectContainer\";\r\nimport { IDataOutputAssociationContainer } from \"./IDataOutputAssociationContainer\";\r\nimport { IDataOutputContainer } from \"./IDataOutputContainer\";\r\nimport { IHasIdElement } from \"./IHasIdElement\";\r\nimport { IProcess } from \"./IProcess\";\r\nimport { IVariableElement } from \"./IVariableElement\";\r\nimport { SequenceFlow } from \"./SequenceFlow\";\r\nimport { StartEvent } from \"./StartEvent\";\r\nimport { ValidationError } from \"./ValidationError\";\r\nimport { ValidationLevel } from \"./ValidationLevel\";\r\n\r\nexport class ValidateHelper {\r\n    static CheckHasIdElement(element: IHasIdElement): void {\r\n        if (element == null)\r\n            throw new Error(\"流程元素不能为 null.\");\r\n\r\n        if (element.Id == null)\r\n            throw new Error(\"流程元素 id 不能为 null.\");\r\n\r\n        if (ValidateHelper.IsMatchVariableNameRules(element.Id) == false)\r\n            throw new Error(\"流程元素 id 只能包含字母、数字和下划线，且不能以数字开头。\");\r\n\r\n        if (element.Model.GetHasIdElement(element.Id) != null)\r\n            throw new Error(`已经存在 id 为 ${element.Id} 的流程元素。`);\r\n    }\r\n\r\n    static IsMatchVariableNameRules(str: string): boolean {\r\n        var Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;\r\n        if (Regx.test(str)) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static ValidateProcess(process: IProcess, errors: Array<ValidationError>): void {\r\n        this.ValidateStartEvents(process, errors);\r\n        this.ValidateEndEvents(process, errors);\r\n        this.ValidateSequenceFlow(process, errors);\r\n        this.ValidateFlowNode(process, errors);\r\n\r\n        for (let item in process.GetFlowElements()) {\r\n            //let associationContainer: IDataInputAssociationContainer = process.GetFlowElements()[item] as IDataInputAssociationContainer;\r\n            //if (associationContainer == null)\r\n            //    continue;\r\n\r\n            //this.ValidateIDataInputAssociationContainer(process, errors, associationContainer);\r\n        }\r\n\r\n        for (let item in process.GetFlowElements()) {\r\n            //let associationContainer: IDataOutputAssociationContainer = process.GetFlowElements()[item] as IDataOutputAssociationContainer;\r\n            //if (associationContainer == null)\r\n            //    continue;\r\n\r\n            //this.ValidateIDataOutputAssociationContainer(process, errors, associationContainer);\r\n        }\r\n    }\r\n\r\n    static CheckVariableElement(\r\n        variableElement: IVariableElement,\r\n        dataInputContainer: IDataInputContainer,\r\n        dataOutputContainer: IDataOutputContainer,\r\n        dataObjectContainer: IDataObjectContainer): void {\r\n        this.CheckHasIdElement(variableElement);\r\n\r\n        if (variableElement.Name == null)\r\n            throw new Error(\"变量名、参数名不能为 null.\");\r\n\r\n        if (ValidateHelper.IsMatchVariableNameRules(variableElement.Name) == false)\r\n            throw new Error(\"变量名、参数名只能包含字母、数字和下划线，且不能以数字开头。\");\r\n\r\n        if (dataInputContainer != null) {\r\n            for (let item of dataInputContainer.GetDataInputs()) {\r\n                if (variableElement.Name == item.Name)\r\n                    throw new Error(`已存在名为 ${variableElement.Name} 的输入参数`);\r\n            }\r\n        }\r\n\r\n        if (dataOutputContainer != null) {\r\n            for (let item of dataOutputContainer.GetDataOutputs()) {\r\n                if (variableElement.Name == item.Name)\r\n                    throw new Error(`已存在名为 ${variableElement.Name} 的输出参数`);\r\n            }\r\n        }\r\n\r\n        if (dataObjectContainer != null) {\r\n            for (let item of dataObjectContainer.GetDataObjects()) {\r\n                if (variableElement.Name == item.Name)\r\n                    throw new Error(`已存在名为 ${variableElement.Name} 的流程变量`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ValidateEndEvents(process: IProcess, errors: Array<ValidationError>): void {\r\n        let endEvents: Array<EndEvent> = new Array<EndEvent>();\r\n        for (let item in process.GetFlowElements()) {\r\n            let endEvent: EndEvent = process.GetFlowElements()[item] as EndEvent;\r\n            if (endEvent instanceof EndEvent)\r\n                endEvents.push(endEvent);\r\n        }\r\n\r\n        if (endEvents.length == 0) {\r\n            let error = new ValidationError();\r\n            //error.Element = process as BpmnModelElement;\r\n            error.ErrorLevel = ValidationLevel.$_Error;\r\n            error.ErrorCode = \"\";\r\n            error.ErrorMessage = \"未设置结束活动\";\r\n\r\n            errors.push(error);\r\n        }\r\n    }\r\n\r\n    private static ValidateFlowNode(process: IProcess, errors: Array<ValidationError>): void {\r\n        for (let item in process.GetFlowElements()) {\r\n            let flowNode: FlowNode = process.GetFlowElements()[item] as FlowNode;\r\n            if ((flowNode instanceof FlowNode) == false)\r\n                continue;\r\n\r\n            let incomings: Array<SequenceFlow> = new Array<SequenceFlow>();\r\n            let outgoings: Array<SequenceFlow> = new Array<SequenceFlow>();\r\n\r\n            for (let item2 in process.GetFlowElements()) {\r\n                let sequenceFlow: SequenceFlow = process.GetFlowElements()[item2] as SequenceFlow;\r\n                if (sequenceFlow instanceof SequenceFlow == false)\r\n                    continue;\r\n\r\n                if (sequenceFlow.SourceRef == flowNode.Id)\r\n                    outgoings.push(sequenceFlow);\r\n\r\n                if (sequenceFlow.TargetRef == flowNode.Id)\r\n                    incomings.push(sequenceFlow);\r\n            }\r\n\r\n            if (incomings.length == 0 && (flowNode instanceof StartEvent) == false) {\r\n                let error = new ValidationError();\r\n                error.Element = flowNode;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = \"没有入口连线\";\r\n\r\n                errors.push(error);\r\n            }\r\n\r\n            if (incomings.length > 0 && (flowNode instanceof StartEvent) == true) {\r\n                let error = new ValidationError();\r\n                error.Element = flowNode;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = \"开始活动不能有入口连线\";\r\n\r\n                errors.push(error);\r\n            }\r\n\r\n            if (outgoings.length == 0 && (flowNode instanceof EndEvent) == false) {\r\n                let error = new ValidationError()\r\n                error.Element = flowNode;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = \"没有出口连线\";\r\n\r\n                errors.push(error);\r\n            }\r\n\r\n            if (outgoings.length > 0 && (flowNode instanceof EndEvent) == true) {\r\n                if (outgoings.length > 0 && (flowNode instanceof EndEvent) == true) {\r\n                    let error = new ValidationError();\r\n                    error.Element = flowNode;\r\n                    error.ErrorLevel = ValidationLevel.$_Error;\r\n                    error.ErrorCode = \"\";\r\n                    error.ErrorMessage = \"结束活动不能有出口连线\";\r\n\r\n                    errors.push(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ValidateIDataInputAssociationContainer(process: IProcess, errors: Array<ValidationError>, associationContainer: IDataInputAssociationContainer): void {\r\n        for (let association of associationContainer.GetDataInputAssociations()) {\r\n            let targetRefDataInputContainer: IDataInputContainer = associationContainer as IDataInputContainer;\r\n\r\n            const IDataInputContainerInterface: any = {\r\n                AddDataOutput: (dataInput: DataInput) => { },\r\n                GetDataOutput: (dataInputId: string) => new DataInput(null),\r\n                GetDataOutputs: () => new Array<DataInput>(),\r\n                RemoveDataOutput: (dataInputId: string) => { },\r\n            };\r\n\r\n            if (targetRefDataInputContainer instanceof IDataInputContainerInterface) {\r\n                let error = new ValidationError();\r\n                error.Element = association;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = `id 为 ${associationContainer.Id} 的元素没有实现接口 IDataInputContainer。`;\r\n\r\n                errors.push();\r\n            }\r\n\r\n            if (targetRefDataInputContainer.GetDataInput(association.TargetRef) == null) {\r\n                let error = new ValidationError();\r\n                error.Element = association;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = `没有找到 id 为 ${association.TargetRef} 的参数。`;\r\n\r\n                errors.push(error);\r\n            }\r\n        }\r\n\r\n        for (let dataInput of associationContainer.GetDataInputs()) {\r\n            if (dataInput.IsRequired == false)\r\n                continue;\r\n\r\n            let findAssociation: DataInputAssociation = null;\r\n            for (let association of associationContainer.GetDataInputAssociations()) {\r\n                if (association.TargetRef == dataInput.Id) {\r\n                    findAssociation = association;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (findAssociation == null) {\r\n                let error = new ValidationError();\r\n                //error.Element = associationContainer as BpmnModelElement;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = `没有找到 id 为 ${dataInput.Id} ，名称为 ${dataInput.Name} 的输入参数的赋值表达式。`;\r\n\r\n                errors.push(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ValidateIDataOutputAssociationContainer(process: IProcess, errors: Array<ValidationError>, associationContainer: IDataOutputAssociationContainer): void {\r\n        for (let association of associationContainer.GetDataOutputAssociations()) {\r\n            let SourceRefDataOutputContainer: IDataOutputContainer = associationContainer as IDataOutputContainer;\r\n\r\n            const IDataOutputContainerInterface: any = {\r\n                AddDataOutput: (dataOutput: DataOutput) => { },\r\n                GetDataOutput: (dataOutputId: string) => new DataOutput(null),\r\n                GetDataOutputs: () => new Array<DataOutput>(),\r\n                RemoveDataOutput: (dataOutputId: string) => { },\r\n            };\r\n\r\n            if (SourceRefDataOutputContainer instanceof IDataOutputContainerInterface) {\r\n                let error = new ValidationError();\r\n                error.Element = association;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = `id 为 ${associationContainer.Id} 的元素没有实现接口 IDataOutputContainer。`;\r\n\r\n                errors.push();\r\n            }\r\n\r\n            if (process.GetDataObject(association.TargetRef) == null &&\r\n                process.GetDataInput(association.TargetRef) == null &&\r\n                process.GetDataOutput(association.TargetRef) == null) {\r\n                let error = new ValidationError()\r\n                error.Element = association;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = `没有找到 id 为 ${association.TargetRef} 的参数或流程变量。`;\r\n\r\n                errors.push();\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ValidateSequenceFlow(process: IProcess, errors: Array<ValidationError>): void {\r\n        for (let item in process.GetFlowElements()) {\r\n            let sequenceFlow: SequenceFlow = process.GetFlowElements()[item] as SequenceFlow;\r\n            if (sequenceFlow instanceof SequenceFlow == false)\r\n                continue;\r\n\r\n            if (sequenceFlow.SourceRef == null) {\r\n                let error = new ValidationError();\r\n                error.Element = sequenceFlow;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = \"没有设定连线的来源\";\r\n\r\n                errors.push(error);\r\n            }\r\n            else {\r\n                if (process.GetFlowElement(sequenceFlow.SourceRef) == null) {\r\n                    let error = new ValidationError()\r\n                    error.Element = sequenceFlow;\r\n                    error.ErrorLevel = ValidationLevel.$_Error;\r\n                    error.ErrorCode = \"\";\r\n                    error.ErrorMessage = `连线的来源设置有误，没有找到 id 为 ${sequenceFlow.SourceRef} 的活动`;\r\n\r\n                    errors.push(error);\r\n                }\r\n            }\r\n\r\n            if (sequenceFlow.TargetRef == null) {\r\n                let error = new ValidationError();\r\n                error.Element = sequenceFlow;\r\n                error.ErrorLevel = ValidationLevel.$_Error;\r\n                error.ErrorCode = \"\";\r\n                error.ErrorMessage = \"没有设定连线的目标\";\r\n\r\n                errors.push(error);\r\n\r\n            }\r\n            else {\r\n                if (process.GetFlowElement(sequenceFlow.TargetRef) == null) {\r\n                    let error = new ValidationError();\r\n                    error.Element = sequenceFlow;\r\n                    error.ErrorLevel = ValidationLevel.$_Error;\r\n                    error.ErrorCode = \"\";\r\n                    error.ErrorMessage = `连线的目标设置有误，没有找到 id 为 ${sequenceFlow.TargetRef} 的活动`;\r\n\r\n                    errors.push(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static ValidateStartEvents(process: IProcess, errors: Array<ValidationError>): void {\r\n        let startEvents: Array<StartEvent> = new Array<StartEvent>();\r\n        for (let item in process.GetFlowElements()) {\r\n            let startEvent = process.GetFlowElements()[item];\r\n            if (startEvent instanceof StartEvent)\r\n                startEvents.push(startEvent);\r\n        }\r\n\r\n        if (startEvents.length == 0) {\r\n            let error = new ValidationError();\r\n            //error.Element = process as BpmnModelElement;\r\n            error.ErrorLevel = ValidationLevel.$_Error;\r\n            error.ErrorCode = \"\";\r\n            error.ErrorMessage = \"未设置开始活动\";\r\n\r\n            errors.push(error);\r\n        }\r\n        else if (startEvents.length > 1) {\r\n            let error = new ValidationError()\r\n            //error.Element = process as BpmnModelElement;\r\n            error.ErrorLevel = ValidationLevel.$_Error;\r\n            error.ErrorCode = \"\";\r\n            error.ErrorMessage = \"只能设置1个开始活动\";\r\n\r\n            errors.push(error);\r\n        }\r\n    }\r\n}"]}