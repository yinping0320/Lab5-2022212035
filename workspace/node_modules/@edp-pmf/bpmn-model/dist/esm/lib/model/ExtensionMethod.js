import { BpmnModelJsonHelper } from "./BpmnModelJsonHelper";
var ExtensionMethod = /** @class */ (function () {
    function ExtensionMethod() {
    }
    ///#region JsonObject
    ExtensionMethod.GetAttributeValue = function (obj, attributeName) {
        return BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
    };
    ExtensionMethod.GetAttributeValue4Boolean = function (obj, attributeName) {
        return BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, attributeName);
    };
    ExtensionMethod.GetAttributeValue4Decimal = function (obj, attributeName) {
        return BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, attributeName);
    };
    ExtensionMethod.GetAttributeValue4Double = function (obj, attributeName) {
        return BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, attributeName);
    };
    ExtensionMethod.GetAttributeValue4Int64 = function (obj, attributeName) {
        return BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, attributeName);
    };
    ExtensionMethod.GetAttributeValue4String = function (obj, attributeName) {
        return BpmnModelJsonHelper.GetAttributeValueAsString(obj, attributeName);
    };
    ExtensionMethod.SetAttributeValue = function (obj, attributeName, value) {
        BpmnModelJsonHelper.SetAttributeValue(obj, attributeName, value);
    };
    ///#endregion
    ExtensionMethod.GetDataInputWithName = function (container, name) {
        for (var _i = 0, _a = container.GetDataInputs(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.Name == name) {
                return item;
            }
        }
        return null;
    };
    ExtensionMethod.GetDataOutputWithName = function (container, name) {
        for (var _i = 0, _a = container.GetDataOutputs(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.Name == name) {
                return item;
            }
        }
        return null;
    };
    ExtensionMethod.GetDataObjectWithName = function (container, name) {
        for (var _i = 0, _a = container.GetDataObjects(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.Name == name) {
                return item;
            }
        }
        return null;
    };
    return ExtensionMethod;
}());
export { ExtensionMethod };
//# sourceMappingURL=ExtensionMethod.js.map