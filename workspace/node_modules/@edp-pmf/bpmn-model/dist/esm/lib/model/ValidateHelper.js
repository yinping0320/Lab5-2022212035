import { DataInput } from "./DataInput";
import { DataOutput } from "./DataOutput";
import { EndEvent } from "./EndEvent";
import { FlowNode } from "./FlowNode";
import { SequenceFlow } from "./SequenceFlow";
import { StartEvent } from "./StartEvent";
import { ValidationError } from "./ValidationError";
import { ValidationLevel } from "./ValidationLevel";
var ValidateHelper = /** @class */ (function () {
    function ValidateHelper() {
    }
    ValidateHelper.CheckHasIdElement = function (element) {
        if (element == null)
            throw new Error("流程元素不能为 null.");
        if (element.Id == null)
            throw new Error("流程元素 id 不能为 null.");
        if (ValidateHelper.IsMatchVariableNameRules(element.Id) == false)
            throw new Error("流程元素 id 只能包含字母、数字和下划线，且不能以数字开头。");
        if (element.Model.GetHasIdElement(element.Id) != null)
            throw new Error("\u5DF2\u7ECF\u5B58\u5728 id \u4E3A " + element.Id + " \u7684\u6D41\u7A0B\u5143\u7D20\u3002");
    };
    ValidateHelper.IsMatchVariableNameRules = function (str) {
        var Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;
        if (Regx.test(str)) {
            return true;
        }
        else {
            return false;
        }
    };
    ValidateHelper.ValidateProcess = function (process, errors) {
        this.ValidateStartEvents(process, errors);
        this.ValidateEndEvents(process, errors);
        this.ValidateSequenceFlow(process, errors);
        this.ValidateFlowNode(process, errors);
        for (var item in process.GetFlowElements()) {
            //let associationContainer: IDataInputAssociationContainer = process.GetFlowElements()[item] as IDataInputAssociationContainer;
            //if (associationContainer == null)
            //    continue;
            //this.ValidateIDataInputAssociationContainer(process, errors, associationContainer);
        }
        for (var item in process.GetFlowElements()) {
            //let associationContainer: IDataOutputAssociationContainer = process.GetFlowElements()[item] as IDataOutputAssociationContainer;
            //if (associationContainer == null)
            //    continue;
            //this.ValidateIDataOutputAssociationContainer(process, errors, associationContainer);
        }
    };
    ValidateHelper.CheckVariableElement = function (variableElement, dataInputContainer, dataOutputContainer, dataObjectContainer) {
        this.CheckHasIdElement(variableElement);
        if (variableElement.Name == null)
            throw new Error("变量名、参数名不能为 null.");
        if (ValidateHelper.IsMatchVariableNameRules(variableElement.Name) == false)
            throw new Error("变量名、参数名只能包含字母、数字和下划线，且不能以数字开头。");
        if (dataInputContainer != null) {
            for (var _i = 0, _a = dataInputContainer.GetDataInputs(); _i < _a.length; _i++) {
                var item = _a[_i];
                if (variableElement.Name == item.Name)
                    throw new Error("\u5DF2\u5B58\u5728\u540D\u4E3A " + variableElement.Name + " \u7684\u8F93\u5165\u53C2\u6570");
            }
        }
        if (dataOutputContainer != null) {
            for (var _b = 0, _c = dataOutputContainer.GetDataOutputs(); _b < _c.length; _b++) {
                var item = _c[_b];
                if (variableElement.Name == item.Name)
                    throw new Error("\u5DF2\u5B58\u5728\u540D\u4E3A " + variableElement.Name + " \u7684\u8F93\u51FA\u53C2\u6570");
            }
        }
        if (dataObjectContainer != null) {
            for (var _d = 0, _e = dataObjectContainer.GetDataObjects(); _d < _e.length; _d++) {
                var item = _e[_d];
                if (variableElement.Name == item.Name)
                    throw new Error("\u5DF2\u5B58\u5728\u540D\u4E3A " + variableElement.Name + " \u7684\u6D41\u7A0B\u53D8\u91CF");
            }
        }
    };
    ValidateHelper.ValidateEndEvents = function (process, errors) {
        var endEvents = new Array();
        for (var item in process.GetFlowElements()) {
            var endEvent = process.GetFlowElements()[item];
            if (endEvent instanceof EndEvent)
                endEvents.push(endEvent);
        }
        if (endEvents.length == 0) {
            var error = new ValidationError();
            //error.Element = process as BpmnModelElement;
            error.ErrorLevel = ValidationLevel.$_Error;
            error.ErrorCode = "";
            error.ErrorMessage = "未设置结束活动";
            errors.push(error);
        }
    };
    ValidateHelper.ValidateFlowNode = function (process, errors) {
        for (var item in process.GetFlowElements()) {
            var flowNode = process.GetFlowElements()[item];
            if ((flowNode instanceof FlowNode) == false)
                continue;
            var incomings = new Array();
            var outgoings = new Array();
            for (var item2 in process.GetFlowElements()) {
                var sequenceFlow = process.GetFlowElements()[item2];
                if (sequenceFlow instanceof SequenceFlow == false)
                    continue;
                if (sequenceFlow.SourceRef == flowNode.Id)
                    outgoings.push(sequenceFlow);
                if (sequenceFlow.TargetRef == flowNode.Id)
                    incomings.push(sequenceFlow);
            }
            if (incomings.length == 0 && (flowNode instanceof StartEvent) == false) {
                var error = new ValidationError();
                error.Element = flowNode;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有入口连线";
                errors.push(error);
            }
            if (incomings.length > 0 && (flowNode instanceof StartEvent) == true) {
                var error = new ValidationError();
                error.Element = flowNode;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "开始活动不能有入口连线";
                errors.push(error);
            }
            if (outgoings.length == 0 && (flowNode instanceof EndEvent) == false) {
                var error = new ValidationError();
                error.Element = flowNode;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有出口连线";
                errors.push(error);
            }
            if (outgoings.length > 0 && (flowNode instanceof EndEvent) == true) {
                if (outgoings.length > 0 && (flowNode instanceof EndEvent) == true) {
                    var error = new ValidationError();
                    error.Element = flowNode;
                    error.ErrorLevel = ValidationLevel.$_Error;
                    error.ErrorCode = "";
                    error.ErrorMessage = "结束活动不能有出口连线";
                    errors.push(error);
                }
            }
        }
    };
    ValidateHelper.ValidateIDataInputAssociationContainer = function (process, errors, associationContainer) {
        for (var _i = 0, _a = associationContainer.GetDataInputAssociations(); _i < _a.length; _i++) {
            var association = _a[_i];
            var targetRefDataInputContainer = associationContainer;
            var IDataInputContainerInterface = {
                AddDataOutput: function (dataInput) { },
                GetDataOutput: function (dataInputId) { return new DataInput(null); },
                GetDataOutputs: function () { return new Array(); },
                RemoveDataOutput: function (dataInputId) { },
            };
            if (targetRefDataInputContainer instanceof IDataInputContainerInterface) {
                var error = new ValidationError();
                error.Element = association;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "id \u4E3A " + associationContainer.Id + " \u7684\u5143\u7D20\u6CA1\u6709\u5B9E\u73B0\u63A5\u53E3 IDataInputContainer\u3002";
                errors.push();
            }
            if (targetRefDataInputContainer.GetDataInput(association.TargetRef) == null) {
                var error = new ValidationError();
                error.Element = association;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "\u6CA1\u6709\u627E\u5230 id \u4E3A " + association.TargetRef + " \u7684\u53C2\u6570\u3002";
                errors.push(error);
            }
        }
        for (var _b = 0, _c = associationContainer.GetDataInputs(); _b < _c.length; _b++) {
            var dataInput = _c[_b];
            if (dataInput.IsRequired == false)
                continue;
            var findAssociation = null;
            for (var _d = 0, _e = associationContainer.GetDataInputAssociations(); _d < _e.length; _d++) {
                var association = _e[_d];
                if (association.TargetRef == dataInput.Id) {
                    findAssociation = association;
                    break;
                }
            }
            if (findAssociation == null) {
                var error = new ValidationError();
                //error.Element = associationContainer as BpmnModelElement;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "\u6CA1\u6709\u627E\u5230 id \u4E3A " + dataInput.Id + " \uFF0C\u540D\u79F0\u4E3A " + dataInput.Name + " \u7684\u8F93\u5165\u53C2\u6570\u7684\u8D4B\u503C\u8868\u8FBE\u5F0F\u3002";
                errors.push(error);
            }
        }
    };
    ValidateHelper.ValidateIDataOutputAssociationContainer = function (process, errors, associationContainer) {
        for (var _i = 0, _a = associationContainer.GetDataOutputAssociations(); _i < _a.length; _i++) {
            var association = _a[_i];
            var SourceRefDataOutputContainer = associationContainer;
            var IDataOutputContainerInterface = {
                AddDataOutput: function (dataOutput) { },
                GetDataOutput: function (dataOutputId) { return new DataOutput(null); },
                GetDataOutputs: function () { return new Array(); },
                RemoveDataOutput: function (dataOutputId) { },
            };
            if (SourceRefDataOutputContainer instanceof IDataOutputContainerInterface) {
                var error = new ValidationError();
                error.Element = association;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "id \u4E3A " + associationContainer.Id + " \u7684\u5143\u7D20\u6CA1\u6709\u5B9E\u73B0\u63A5\u53E3 IDataOutputContainer\u3002";
                errors.push();
            }
            if (process.GetDataObject(association.TargetRef) == null &&
                process.GetDataInput(association.TargetRef) == null &&
                process.GetDataOutput(association.TargetRef) == null) {
                var error = new ValidationError();
                error.Element = association;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "\u6CA1\u6709\u627E\u5230 id \u4E3A " + association.TargetRef + " \u7684\u53C2\u6570\u6216\u6D41\u7A0B\u53D8\u91CF\u3002";
                errors.push();
            }
        }
    };
    ValidateHelper.ValidateSequenceFlow = function (process, errors) {
        for (var item in process.GetFlowElements()) {
            var sequenceFlow = process.GetFlowElements()[item];
            if (sequenceFlow instanceof SequenceFlow == false)
                continue;
            if (sequenceFlow.SourceRef == null) {
                var error = new ValidationError();
                error.Element = sequenceFlow;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定连线的来源";
                errors.push(error);
            }
            else {
                if (process.GetFlowElement(sequenceFlow.SourceRef) == null) {
                    var error = new ValidationError();
                    error.Element = sequenceFlow;
                    error.ErrorLevel = ValidationLevel.$_Error;
                    error.ErrorCode = "";
                    error.ErrorMessage = "\u8FDE\u7EBF\u7684\u6765\u6E90\u8BBE\u7F6E\u6709\u8BEF\uFF0C\u6CA1\u6709\u627E\u5230 id \u4E3A " + sequenceFlow.SourceRef + " \u7684\u6D3B\u52A8";
                    errors.push(error);
                }
            }
            if (sequenceFlow.TargetRef == null) {
                var error = new ValidationError();
                error.Element = sequenceFlow;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定连线的目标";
                errors.push(error);
            }
            else {
                if (process.GetFlowElement(sequenceFlow.TargetRef) == null) {
                    var error = new ValidationError();
                    error.Element = sequenceFlow;
                    error.ErrorLevel = ValidationLevel.$_Error;
                    error.ErrorCode = "";
                    error.ErrorMessage = "\u8FDE\u7EBF\u7684\u76EE\u6807\u8BBE\u7F6E\u6709\u8BEF\uFF0C\u6CA1\u6709\u627E\u5230 id \u4E3A " + sequenceFlow.TargetRef + " \u7684\u6D3B\u52A8";
                    errors.push(error);
                }
            }
        }
    };
    ValidateHelper.ValidateStartEvents = function (process, errors) {
        var startEvents = new Array();
        for (var item in process.GetFlowElements()) {
            var startEvent = process.GetFlowElements()[item];
            if (startEvent instanceof StartEvent)
                startEvents.push(startEvent);
        }
        if (startEvents.length == 0) {
            var error = new ValidationError();
            //error.Element = process as BpmnModelElement;
            error.ErrorLevel = ValidationLevel.$_Error;
            error.ErrorCode = "";
            error.ErrorMessage = "未设置开始活动";
            errors.push(error);
        }
        else if (startEvents.length > 1) {
            var error = new ValidationError();
            //error.Element = process as BpmnModelElement;
            error.ErrorLevel = ValidationLevel.$_Error;
            error.ErrorCode = "";
            error.ErrorMessage = "只能设置1个开始活动";
            errors.push(error);
        }
    };
    return ValidateHelper;
}());
export { ValidateHelper };
//# sourceMappingURL=ValidateHelper.js.map