var BpmnModelJsonHelper = /** @class */ (function () {
    function BpmnModelJsonHelper() {
    }
    BpmnModelJsonHelper.GetAttributeValue = function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName)) {
            return obj[attributeName];
        }
        else {
            return null;
        }
    };
    BpmnModelJsonHelper.SetAttributeValue = function (obj, attributeName, value) {
        if (obj == null || value == null)
            return;
        var jsonArray = [];
        if (value instanceof Array) {
            //判断是否为IJsonSerializable实现类的数组，是则全部调用ConvertToJsonObject序列化，否则直接赋值
            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                var item = value_1[_i];
                if (item["ConvertToJsonObject"] != null && item["LoadFromJsonObject"] != null) {
                    jsonArray.push(item.ConvertToJsonObject());
                }
                else {
                    break;
                }
            }
            if (jsonArray.length == value.length) {
                obj[attributeName] = jsonArray;
            }
            else {
                obj[attributeName] = value;
            }
        }
        else if (value["ConvertToJsonObject"] != null && value["LoadFromJsonObject"] != null) {
            //判断是否为IJsonSerializable实现类的对象，是则调用ConvertToJsonObject序列化
            obj[attributeName] = value.ConvertToJsonObject();
        }
        else if (value instanceof Date) {
            //判断是否为日期类型，是日期类型则转为字符串UTC的yyyyMMDDhhmmssSSS格式字符串
            var str = BpmnModelJsonHelper.DateTimeToString(value);
            BpmnModelJsonHelper.SetAttributeValue(obj, attributeName, str);
        }
        else {
            obj[attributeName] = value;
        }
    };
    BpmnModelJsonHelper.GetAttributeValueAsString = function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "string") {
            return obj[attributeName];
        }
        return null;
    };
    BpmnModelJsonHelper.GetAttributeValueAsBoolean = function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "boolean") {
            return obj[attributeName];
        }
        return null;
    };
    BpmnModelJsonHelper.GetAttributeValueAsNumber = function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "number") {
            return obj[attributeName];
        }
        return null;
    };
    BpmnModelJsonHelper.GetAttributeValueAsList = function (obj, attributeName, classOfT) {
        var jsonArray = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
        if (jsonArray == null) {
            return null;
        }
        var list = [];
        for (var _i = 0, jsonArray_1 = jsonArray; _i < jsonArray_1.length; _i++) {
            var item = jsonArray_1[_i];
            var instance = null;
            try {
                instance = new classOfT();
            }
            catch (e) {
                throw e;
            }
            instance.LoadFromJsonObject(item);
            list.push(instance);
        }
        return list;
    };
    BpmnModelJsonHelper.GetAttributeValueAsDateTime = function (obj, attributeName) {
        return BpmnModelJsonHelper.DateTimeFromString(BpmnModelJsonHelper.GetAttributeValueAsString(obj, attributeName));
    };
    BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable = function (obj, attributeName, classOfT) {
        var jsonObject = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
        if (jsonObject == null) {
            return null;
        }
        var instance = null;
        try {
            instance = new classOfT();
        }
        catch (e) {
            throw e;
        }
        instance.LoadFromJsonObject(jsonObject);
        return instance;
    };
    BpmnModelJsonHelper.DateTimeToString = function (dt) {
        if (dt == null)
            return null;
        var time = dt.getTime();
        if (time < BpmnModelJsonHelper.MIN_OFFSETDATETIME.getTime() || time > BpmnModelJsonHelper.MAX_OFFSETDATETIME.getTime()) {
            throw "\u7ED9\u5B9A\u7684\u65E5\u671F\u65F6\u95F4\u503C " + dt.toISOString() + " \u8D85\u51FA\u652F\u6301\u8303\u56F4(0001-01-01T12:00:00.000Z - 9999-12-31T23:59:59.000Z):";
        }
        return BpmnModelJsonHelper.dateFormat(dt, "yyyyMMddHHmmssSSS");
    };
    /**
     *
     * @param str 格式为：yyyyMMddHHmmssSSS
     */
    BpmnModelJsonHelper.DateTimeFromString = function (str) {
        if (str == null)
            return null;
        // const s = `${str.substring(0, 4)}/${str.substring(4, 6)}/${str.substring(6, 8)} ${str.substring(8, 10)}:${str.substring(10, 12)}:${str.substring(12, 14)}.${str.substring(14)}`;
        var date = new Date();
        date.setUTCFullYear(parseInt(str.substring(0, 4)));
        date.setUTCMonth(parseInt(str.substring(4, 6)) - 1);
        date.setUTCDate(parseInt(str.substring(6, 8)));
        date.setUTCHours(parseInt(str.substring(8, 10)));
        date.setUTCMinutes(parseInt(str.substring(10, 12)));
        date.setUTCSeconds(parseInt(str.substring(12, 14)));
        date.setUTCMilliseconds(parseInt(str.substring(14)));
        return date;
    };
    BpmnModelJsonHelper.ToJson = function (value) {
        if (value === undefined || value === null) {
            return null;
        }
        var list = [];
        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
            var item = value_2[_i];
            list.push(item.ConvertToJsonObject());
        }
        return JSON.stringify(list);
    };
    BpmnModelJsonHelper.FromJson = function (json, classOfT) {
        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {
            return null;
        }
        var list = new Array();
        var jsonArr = JSON.parse(json);
        if (jsonArr == null || Array.isArray(jsonArr) === false) {
            return list;
        }
        jsonArr.forEach(function (elt) {
            var newInstance = new classOfT();
            newInstance.LoadFromJsonObject(elt);
            list.push(newInstance);
        });
        return list;
    };
    BpmnModelJsonHelper.StringListToJsonArray = function (value) {
        if (value == null)
            return null;
        var jsonArray = new Array();
        for (var _i = 0, value_3 = value; _i < value_3.length; _i++) {
            var item = value_3[_i];
            jsonArray.push(item);
        }
        return jsonArray;
    };
    BpmnModelJsonHelper.StringListFromJsonArray = function (jsonArray) {
        if (jsonArray == null) {
            return null;
        }
        var list = new Array();
        for (var _i = 0, jsonArray_2 = jsonArray; _i < jsonArray_2.length; _i++) {
            var item = jsonArray_2[_i];
            if (typeof item == "object") {
                list.push(JSON.stringify(item));
            }
            else {
                list.push(String(item));
            }
        }
        return list;
    };
    BpmnModelJsonHelper.StringListToJson = function (value) {
        var jsonArray = BpmnModelJsonHelper.StringListToJsonArray(value);
        if (jsonArray == null)
            return null;
        return JSON.stringify(jsonArray);
    };
    BpmnModelJsonHelper.StringListFromJson = function (json) {
        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {
            return null;
        }
        var jsonArray = JSON.parse(json);
        if (jsonArray == null) {
            return null;
        }
        return BpmnModelJsonHelper.StringListFromJsonArray(jsonArray);
    };
    BpmnModelJsonHelper.IsNullOrWhiteSpace = function (string) {
        if (string == null) {
            return true;
        }
        else {
            return string.replace(/(^s*)|(s*$)/g, "").length == 0;
        }
    };
    BpmnModelJsonHelper.GetDateFromISO = function (value) {
        var a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
        if (a) {
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
        }
        else {
            return null;
        }
    };
    BpmnModelJsonHelper.dateFormat = function (date, fmt) {
        var ret;
        var opt = {
            "y+": date.getUTCFullYear().toString(),
            "M+": (date.getUTCMonth() + 1).toString(),
            "d+": date.getUTCDate().toString(),
            "H+": date.getUTCHours().toString(),
            "m+": date.getUTCMinutes().toString(),
            "s+": date.getUTCSeconds().toString(),
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (var k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (BpmnModelJsonHelper.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    };
    BpmnModelJsonHelper.myPadStart = function (src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    };
    BpmnModelJsonHelper.MIN_OFFSETDATETIME = BpmnModelJsonHelper.GetDateFromISO("0001-01-01T12:00:00.000Z");
    BpmnModelJsonHelper.MAX_OFFSETDATETIME = BpmnModelJsonHelper.GetDateFromISO("9999-12-31T23:59:59.000Z");
    return BpmnModelJsonHelper;
}());
export { BpmnModelJsonHelper };
//# sourceMappingURL=BpmnModelJsonHelper.js.map