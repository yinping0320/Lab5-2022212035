import { Association } from "./Association";
import { BPMNPlane, BPMNShape, BPMNLabel, BPMNEdge } from "./bpmndi";
import { BpmnModel } from "./BpmnModel";
import { BpmnModelHelper } from "./BpmnModelHelper";
import { CallActivity } from "./CallActivity";
import { CompensateEventDefinition } from "./CompensateEventDefinition";
import { DataObject } from "./DataObject";
import { EndEvent } from "./EndEvent";
import { ExclusiveGateway } from "./ExclusiveGateway";
import { InclusiveGateway } from "./InclusiveGateway";
import { IntermediateCatchEvent } from "./IntermediateCatchEvent";
import { MergeActivity } from "./MergeActivity";
import { DataType, CustomType } from "./mex";
import { ParallelGateway } from "./ParallelGateway";
import { Process } from "./Process";
import { SequenceFlow } from "./SequenceFlow";
import { Signal } from "./Signal";
import { SignalEventDefinition } from "./SignalEventDefinition";
import { SplitActivity } from "./SplitActivity";
import { StartEvent } from "./StartEvent";
import { SubProcess } from "./SubProcess";
var registerElementTypeModel = new BpmnModel();
BpmnModelHelper.RegisterElementType(new Process(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new SequenceFlow(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new DataObject(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new SubProcess(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new CallActivity(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new EndEvent(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new StartEvent(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new ExclusiveGateway(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new InclusiveGateway(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new ParallelGateway(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new DataType(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new CustomType(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new BPMNPlane(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new BPMNShape(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new BPMNLabel(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new BPMNEdge(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new CompensateEventDefinition(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new Association(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new IntermediateCatchEvent(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new SignalEventDefinition(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new Signal(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new SplitActivity(registerElementTypeModel));
BpmnModelHelper.RegisterElementType(new MergeActivity(registerElementTypeModel));
//# sourceMappingURL=RegisterElementType.js.map