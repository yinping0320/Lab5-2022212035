import { __extends } from "tslib";
import { BpmnModelHelper } from "./BpmnModelHelper";
import { Task } from "./Task";
var UserTask = /** @class */ (function (_super) {
    __extends(UserTask, _super);
    function UserTask(model) {
        var _this = _super.call(this, model) || this;
        _this.renderingDIc = {};
        return _this;
    }
    UserTask.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.renderingDIc = {};
    };
    UserTask.prototype.AddRendering = function (item) {
        this.renderingDIc[item.Id] = item;
        this.Model.AddHasIdElement(item);
    };
    UserTask.prototype.GetRendering = function (renderingId) {
        if (renderingId == null)
            return null;
        if (this.renderingDIc.hasOwnProperty(renderingId))
            return this.renderingDIc[renderingId];
        return null;
    };
    UserTask.prototype.GetRenderings = function () {
        var renderings = new Array();
        for (var item in this.renderingDIc) {
            renderings.push(this.renderingDIc[item]);
        }
        return renderings;
    };
    UserTask.prototype.RemoveRendering = function (renderingId) {
        delete this.renderingDIc[renderingId];
    };
    UserTask.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        var renderings = new Array();
        for (var item in this.renderingDIc) {
            renderings.push(this.renderingDIc[item].ConvertToJsonObject());
        }
        if (renderings.length > 0) {
            BpmnModelHelper.SetAttributeValue(obj, "renderings", renderings);
        }
        return obj;
    };
    UserTask.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        if (obj.hasOwnProperty("renderings") && Array.isArray(obj.renderings)) {
            for (var _i = 0, _a = obj.renderings; _i < _a.length; _i++) {
                var item = _a[_i];
                var rendering = BpmnModelHelper.GetElementType(item.ClrTypeID);
                if (rendering == null)
                    continue;
                rendering.LoadFromJsonObject(item);
                this.AddRendering(rendering);
            }
        }
    };
    return UserTask;
}(Task));
export { UserTask };
//# sourceMappingURL=UserTask.js.map