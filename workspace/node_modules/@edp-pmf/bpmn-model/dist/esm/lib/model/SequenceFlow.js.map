{"version":3,"file":"SequenceFlow.js","sourceRoot":"","sources":["../../../../src/lib/model/SequenceFlow.ts"],"names":[],"mappings":"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","sourcesContent":["import { BpmnModel } from \"./BpmnModel\";\r\nimport { BpmnModelElement } from \"./BpmnModelElement\";\r\nimport { BpmnModelHelper } from \"./BpmnModelHelper\";\r\nimport { Expression } from \"./Expression\";\r\nimport { ExtensionElement } from \"./ExtensionElement\";\r\nimport { FlowElement } from \"./FlowElement\";\r\nimport { IExecutionListenerContainer } from \"./IExecutionListenerContainer\";\r\nimport { ExecutionListener } from \"./mex/ExecutionListener\";\r\nimport { ValidationError } from \"./ValidationError\";\r\n\r\nexport class SequenceFlow extends FlowElement implements IExecutionListenerContainer {\r\n    constructor(model: BpmnModel) {\r\n        super(model);\r\n    }\r\n\r\n    readonly ClrTypeID: string = \"bpmn.SequenceFlow\";\r\n\r\n    ConditionExpression: Expression;\r\n    SkipExpression: string;\r\n    SourceRef: string;\r\n    TargetRef: string;\r\n    private executionListeners: Array<ExecutionListener> = new Array<ExecutionListener>();\r\n\r\n    protected ResetBeforeLoadFrom(): void {\r\n        super.ResetBeforeLoadFrom();\r\n\r\n        this.ConditionExpression = null;\r\n        this.SkipExpression = null;\r\n        this.SourceRef = null;\r\n        this.TargetRef = null;\r\n        this.executionListeners = new Array<ExecutionListener>();\r\n    }\r\n\r\n    NewInstance(): SequenceFlow {\r\n        return new SequenceFlow(this.Model);\r\n    }\r\n\r\n    GetExecutionListeners(): Array<ExecutionListener> {\r\n        return this.executionListeners;\r\n    }\r\n\r\n    ConvertToJsonObject(): any {\r\n        let obj: any = super.ConvertToJsonObject();\r\n\r\n        BpmnModelHelper.SetAttributeValue(obj, \"SkipExpression\", this.SkipExpression);\r\n        BpmnModelHelper.SetAttributeValue(obj, \"SourceRef\", this.SourceRef);\r\n        BpmnModelHelper.SetAttributeValue(obj, \"TargetRef\", this.TargetRef);\r\n\r\n        if (this.ConditionExpression != null) {\r\n            BpmnModelHelper.SetAttributeValue(obj, \"ConditionExpression\", this.ConditionExpression.ConvertToJsonObject());\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    LoadFromJsonObject(obj: any): void {\r\n        super.LoadFromJsonObject(obj);\r\n\r\n        this.SkipExpression = obj.SkipExpression;\r\n        this.SourceRef = obj.SourceRef;\r\n        this.TargetRef = obj.TargetRef;\r\n\r\n        if (obj.hasOwnProperty(\"ConditionExpression\")) {\r\n            this.ConditionExpression = new Expression(this.Model);\r\n            this.ConditionExpression.LoadFromJsonObject(obj.ConditionExpression);\r\n        }\r\n    }\r\n\r\n    private readonly MEXTAG: string = \"bpmn.SequenceFlow\";\r\n\r\n    protected GetExtensionElements4ConvertTo(): Array<ExtensionElement> {\r\n        let list: Array<ExtensionElement> = super.GetExtensionElements4ConvertTo();\r\n\r\n        for (let item of this.executionListeners) {\r\n            item.MexTag = this.MEXTAG;\r\n            list.push(item);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    protected SetExtensionElements4LoadFrom(extensionElements: Array<ExtensionElement>): void {\r\n        super.SetExtensionElements4LoadFrom(extensionElements);\r\n\r\n        for (let extensionElement of extensionElements) {\r\n            if (extensionElement instanceof ExecutionListener && extensionElement.MexTag == this.MEXTAG) {\r\n                this.executionListeners.push(extensionElement as ExecutionListener);\r\n            }\r\n        }\r\n    }\r\n\r\n    Validate(errors: Array<ValidationError>): void {\r\n        super.Validate(errors);\r\n\r\n        for (let item of this.executionListeners) {\r\n            item.Validate(errors);\r\n        }\r\n    }\r\n}"]}