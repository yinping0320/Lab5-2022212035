import { __extends } from "tslib";
import { CatchEvent } from "./CatchEvent";
import { ExtensionMethod } from "./ExtensionMethod";
var Signal = /** @class */ (function (_super) {
    __extends(Signal, _super);
    function Signal(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = "bpmn.Signal";
        return _this;
    }
    Signal.prototype.convertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        ExtensionMethod.SetAttributeValue(obj, "ClrTypeID", this.ClrTypeID);
        ExtensionMethod.SetAttributeValue(obj, "Name", this.Name);
        ExtensionMethod.SetAttributeValue(obj, "Scope", this.Scope);
        return obj;
    };
    Signal.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Name = ExtensionMethod.GetAttributeValue4String(obj, "Name");
        this.Scope = ExtensionMethod.GetAttributeValue4String(obj, "Scope");
    };
    Signal.prototype.clone = function () {
        var clone = _super.prototype.clone.call(this);
        clone.Name = this.Name;
        clone.Scope = this.Scope;
        return clone;
    };
    Signal.prototype.NewInstance = function () {
        return new Signal(this.Model);
    };
    return Signal;
}(CatchEvent));
export { Signal };
//# sourceMappingURL=Signal.js.map