import { __extends } from "tslib";
import { BpmnModelHelper } from "../BpmnModelHelper";
import { DataInputAssociation } from "../DataInputAssociation";
import { DataOutputAssociation } from "../DataOutputAssociation";
import { ValidateHelper } from "../ValidateHelper";
import { MexExtensionElement } from "./MexExtensionElement";
var SubProcessDataAssociations = /** @class */ (function (_super) {
    __extends(SubProcessDataAssociations, _super);
    function SubProcessDataAssociations(model) {
        var _this = _super.call(this, model) || this;
        _this.ClrTypeID = "bpmn.Mex.SubProcessDataAssociations";
        _this.dataInputAssociationDic = {};
        _this.dataOutputAssociationDic = {};
        return _this;
    }
    SubProcessDataAssociations.prototype.NewInstance = function () {
        return new SubProcessDataAssociations(this.Model);
    };
    SubProcessDataAssociations.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.dataInputAssociationDic = {};
        this.dataOutputAssociationDic = {};
    };
    SubProcessDataAssociations.prototype.AddDataInputAssociation = function (association) {
        ValidateHelper.CheckHasIdElement(association);
        this.dataInputAssociationDic[association.Id] = association;
        this.Model.AddHasIdElement(association);
    };
    SubProcessDataAssociations.prototype.GetDataInputAssociation = function (associationId) {
        if (associationId == null)
            return null;
        if (this.dataInputAssociationDic.hasOwnProperty(associationId))
            return this.dataInputAssociationDic[associationId];
        return null;
    };
    SubProcessDataAssociations.prototype.GetDataInputAssociations = function () {
        var dataInputAssociations = new Array();
        for (var item in this.dataInputAssociationDic) {
            dataInputAssociations.push(this.dataInputAssociationDic[item]);
        }
        return dataInputAssociations;
    };
    SubProcessDataAssociations.prototype.RemoveSubProcessDataInputAssociation = function (associationId) {
        delete this.dataInputAssociationDic[associationId];
    };
    SubProcessDataAssociations.prototype.AddDataOutputAssociation = function (association) {
        ValidateHelper.CheckHasIdElement(association);
        this.dataOutputAssociationDic[association.Id] = association;
        this.Model.AddHasIdElement(association);
    };
    SubProcessDataAssociations.prototype.GetDataOutputAssociation = function (associationId) {
        if (associationId == null)
            return null;
        if (this.dataOutputAssociationDic.hasOwnProperty(associationId))
            return this.dataOutputAssociationDic[associationId];
        return null;
    };
    SubProcessDataAssociations.prototype.GetDataOutputAssociations = function () {
        var dataOutputAssociations = new Array();
        for (var item in this.dataOutputAssociationDic) {
            dataOutputAssociations.push(this.dataOutputAssociationDic[item]);
        }
        return dataOutputAssociations;
    };
    SubProcessDataAssociations.prototype.RemoveDataOutputAssociation = function (associationId) {
        delete this.dataOutputAssociationDic[associationId];
    };
    SubProcessDataAssociations.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        var dataInputAssociations = new Array();
        for (var item in this.dataInputAssociationDic) {
            dataInputAssociations.push(this.dataInputAssociationDic[item].ConvertToJsonObject());
        }
        if (dataInputAssociations.length > 0) {
            BpmnModelHelper.SetAttributeValue(obj, "dataInputAssociations", dataInputAssociations);
        }
        var dataOutputAssociations = new Array();
        for (var item in this.dataOutputAssociationDic) {
            dataOutputAssociations.push(this.dataOutputAssociationDic[item].ConvertToJsonObject());
        }
        if (dataOutputAssociations.length > 0) {
            BpmnModelHelper.SetAttributeValue(obj, "dataOutputAssociations", dataOutputAssociations);
        }
        return obj;
    };
    SubProcessDataAssociations.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        if (obj.hasOwnProperty("dataInputAssociations") && Array.isArray(obj.dataInputAssociations)) {
            for (var _i = 0, _a = obj.dataInputAssociations; _i < _a.length; _i++) {
                var item = _a[_i];
                var dataInputAssociation = new DataInputAssociation(this.Model);
                dataInputAssociation.LoadFromJsonObject(item);
                this.AddDataInputAssociation(dataInputAssociation);
            }
        }
        if (obj.hasOwnProperty("dataOutputAssociations") && Array.isArray(obj.dataOutputAssociations)) {
            for (var _b = 0, _c = obj.dataOutputAssociations; _b < _c.length; _b++) {
                var item = _c[_b];
                var dataOutputAssociation = new DataOutputAssociation(this.Model);
                dataOutputAssociation.LoadFromJsonObject(item);
                this.AddDataOutputAssociation(dataOutputAssociation);
            }
        }
    };
    return SubProcessDataAssociations;
}(MexExtensionElement));
export { SubProcessDataAssociations };
//# sourceMappingURL=SubProcessDataAssociations.js.map