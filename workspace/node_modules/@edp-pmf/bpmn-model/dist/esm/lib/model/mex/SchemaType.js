import { __extends } from "tslib";
import { BpmnModelHelper } from "../BpmnModelHelper";
import { ValidationError } from "../ValidationError";
import { ValidationLevel } from "../ValidationLevel";
import { BeSchema } from "./BeSchema";
import { MexElement } from "./MexElement";
import { SchemaTypes } from "./SchemaTypes";
import { XmlSchema } from "./XmlSchema";
var SchemaType = /** @class */ (function (_super) {
    __extends(SchemaType, _super);
    function SchemaType(model) {
        var _this = _super.call(this, model) || this;
        _this.Category = SchemaTypes.BeSchema;
        return _this;
    }
    SchemaType.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.Category = SchemaTypes.BeSchema;
        this.BeSchema = null;
        this.XmlSchema = null;
    };
    SchemaType.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "Category", this.Category);
        switch (this.Category) {
            case SchemaTypes.BeSchema:
                {
                    if (this.BeSchema) {
                        BpmnModelHelper.SetAttributeValue(obj, "BeSchema", this.BeSchema.ConvertToJsonObject());
                    }
                    break;
                }
            case SchemaTypes.XmlSchema:
                {
                    if (this.XmlSchema) {
                        BpmnModelHelper.SetAttributeValue(obj, "XmlSchema", this.XmlSchema.ConvertToJsonObject());
                    }
                    break;
                }
            default:
                throw new Error("Invalid argument!");
        }
        return obj;
    };
    SchemaType.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.Category = obj.Category;
        switch (this.Category) {
            case SchemaTypes.BeSchema:
                {
                    if (obj.BeSchema) {
                        this.BeSchema = new BeSchema(this.Model);
                        this.BeSchema.LoadFromJsonObject(obj.BeSchema);
                    }
                    break;
                }
            case SchemaTypes.XmlSchema:
                {
                    if (obj.XmlSchema) {
                        this.XmlSchema = new XmlSchema(this.Model);
                        this.XmlSchema.LoadFromJsonObject(obj.XmlSchema);
                    }
                    break;
                }
            default:
                throw new Error("Invalid argument!");
        }
    };
    SchemaType.prototype.Validate = function (errors) {
        _super.prototype.Validate.call(this, errors);
        if (this.Category == SchemaTypes.BeSchema) {
            if (this.BeSchema == null) {
                var error = new ValidationError();
                error.Element = this;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定 BeSchema";
                errors.push(error);
            }
            else {
                this.BeSchema.Validate(errors);
            }
        }
        if (this.Category == SchemaTypes.XmlSchema) {
            if (this.XmlSchema == null) {
                var error = new ValidationError();
                error.Element = this;
                error.ErrorLevel = ValidationLevel.$_Error;
                error.ErrorCode = "";
                error.ErrorMessage = "没有设定 XmlSchema";
                errors.push(error);
            }
            else {
                this.XmlSchema.Validate(errors);
            }
        }
    };
    return SchemaType;
}(MexElement));
export { SchemaType };
//# sourceMappingURL=SchemaType.js.map