{"version":3,"file":"BpmnModelJsonHelper.js","sourceRoot":"","sources":["../../../../src/lib/model/BpmnModelJsonHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJsonSerializable } from \"./IJsonSerializable\";\r\n\r\nexport class BpmnModelJsonHelper {\r\n    public static readonly MIN_OFFSETDATETIME: Date = BpmnModelJsonHelper.GetDateFromISO(\"0001-01-01T12:00:00.000Z\");\r\n    public static readonly MAX_OFFSETDATETIME: Date = BpmnModelJsonHelper.GetDateFromISO(\"9999-12-31T23:59:59.000Z\");\r\n\r\n    public static GetAttributeValue(obj: {}, attributeName: string): any {\r\n        if (obj == null) {\r\n            return null;\r\n        }\r\n        if (obj.hasOwnProperty(attributeName)) {\r\n            return obj[attributeName];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static SetAttributeValue<T extends IJsonSerializable>(obj: {}, attributeName: string, value: string | boolean | number | Date | Array<T> | T | object): void {\r\n        if (obj == null || value == null)\r\n            return;\r\n\r\n        let jsonArray: Object[] = [];\r\n        if (value instanceof Array) {\r\n            //判断是否为IJsonSerializable实现类的数组，是则全部调用ConvertToJsonObject序列化，否则直接赋值\r\n            for (let item of value) {\r\n                if (item[\"ConvertToJsonObject\"] != null && item[\"LoadFromJsonObject\"] != null) {\r\n                    jsonArray.push(item.ConvertToJsonObject());\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (jsonArray.length == value.length) {\r\n                obj[attributeName] = jsonArray;\r\n            } else {\r\n                obj[attributeName] = value;\r\n            }\r\n        } else if (value[\"ConvertToJsonObject\"] != null && value[\"LoadFromJsonObject\"] != null) {\r\n            //判断是否为IJsonSerializable实现类的对象，是则调用ConvertToJsonObject序列化\r\n            obj[attributeName] = (value as T).ConvertToJsonObject();\r\n        } else if (value instanceof Date) {\r\n            //判断是否为日期类型，是日期类型则转为字符串UTC的yyyyMMDDhhmmssSSS格式字符串\r\n            const str = BpmnModelJsonHelper.DateTimeToString(value);\r\n            BpmnModelJsonHelper.SetAttributeValue(obj, attributeName, str);\r\n        } else {\r\n            obj[attributeName] = value;\r\n        }\r\n    }\r\n\r\n    public static GetAttributeValueAsString(obj: {}, attributeName: string): string {\r\n        if (obj == null) {\r\n            return null;\r\n        }\r\n\r\n        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == \"string\") {\r\n            return obj[attributeName];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static GetAttributeValueAsBoolean(obj: {}, attributeName: string): boolean {\r\n        if (obj == null) {\r\n            return null;\r\n        }\r\n\r\n        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == \"boolean\") {\r\n            return obj[attributeName];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static GetAttributeValueAsNumber(obj: {}, attributeName: string): number {\r\n        if (obj == null) {\r\n            return null;\r\n        }\r\n\r\n        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == \"number\") {\r\n            return obj[attributeName];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static GetAttributeValueAsList<ReturnT extends IJsonSerializable, ClassOfT extends ReturnT>(obj: Object, attributeName: string, classOfT: new () => ClassOfT): Array<ReturnT> {\r\n        let jsonArray: Array<any> = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);\r\n\r\n        if (jsonArray == null) {\r\n            return null;\r\n        }\r\n\r\n        let list: Array<ReturnT> = [];\r\n        for (let item of jsonArray) {\r\n            let instance: ReturnT = null;\r\n            try {\r\n                instance = new classOfT() as ClassOfT;\r\n            }\r\n            catch (e) {\r\n                throw e;\r\n            }\r\n\r\n            instance.LoadFromJsonObject(item);\r\n            list.push(instance);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    public static GetAttributeValueAsDateTime(obj: Object, attributeName: string): Date {\r\n        return BpmnModelJsonHelper.DateTimeFromString(BpmnModelJsonHelper.GetAttributeValueAsString(obj, attributeName));\r\n    }\r\n\r\n    public static GetAttributeValueAsJsonSerializable<ReturnT extends IJsonSerializable, ClassOfT extends ReturnT>(obj: Object, attributeName: string, classOfT: new () => ClassOfT): ReturnT {\r\n        let jsonObject: Object = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);\r\n\r\n        if (jsonObject == null) {\r\n            return null;\r\n        }\r\n\r\n        let instance: ReturnT = null;\r\n        try {\r\n            instance = new classOfT() as ReturnT;\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n\r\n        instance.LoadFromJsonObject(jsonObject);\r\n\r\n        return instance;\r\n    }\r\n\r\n    public static DateTimeToString(dt: Date): string {\r\n        if (dt == null)\r\n            return null;\r\n\r\n        const time = dt.getTime();\r\n        if (time < BpmnModelJsonHelper.MIN_OFFSETDATETIME.getTime() || time > BpmnModelJsonHelper.MAX_OFFSETDATETIME.getTime()) {\r\n            throw `给定的日期时间值 ${dt.toISOString()} 超出支持范围(0001-01-01T12:00:00.000Z - 9999-12-31T23:59:59.000Z):`;\r\n        }\r\n\r\n        return BpmnModelJsonHelper.dateFormat(dt, \"yyyyMMddHHmmssSSS\")\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param str 格式为：yyyyMMddHHmmssSSS\r\n     */\r\n    public static DateTimeFromString(str: string): Date {\r\n        if (str == null)\r\n            return null;\r\n\r\n        // const s = `${str.substring(0, 4)}/${str.substring(4, 6)}/${str.substring(6, 8)} ${str.substring(8, 10)}:${str.substring(10, 12)}:${str.substring(12, 14)}.${str.substring(14)}`;\r\n        const date = new Date();\r\n        date.setUTCFullYear(parseInt(str.substring(0, 4)));\r\n        date.setUTCMonth(parseInt(str.substring(4, 6)) - 1);\r\n        date.setUTCDate(parseInt(str.substring(6, 8)));\r\n        date.setUTCHours(parseInt(str.substring(8, 10)));\r\n        date.setUTCMinutes(parseInt(str.substring(10, 12)));\r\n        date.setUTCSeconds(parseInt(str.substring(12, 14)));\r\n        date.setUTCMilliseconds(parseInt(str.substring(14)));\r\n        return date;\r\n    }\r\n\r\n    public static ToJson<T extends IJsonSerializable>(value: Array<T>): string {\r\n        if (value === undefined || value === null) {\r\n            return null;\r\n        }\r\n        let list: Object[] = [];\r\n        for (let item of value) {\r\n            list.push(item.ConvertToJsonObject());\r\n        }\r\n\r\n        return JSON.stringify(list);\r\n    }\r\n\r\n    public static FromJson<ReturnT extends IJsonSerializable, ClassOfT extends ReturnT>(json: string, classOfT: new () => ClassOfT): Array<ReturnT> {\r\n        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {\r\n            return null;\r\n        }\r\n\r\n        let list = new Array<ReturnT>();\r\n        let jsonArr: Array<{}> = JSON.parse(json);\r\n\r\n        if (jsonArr == null || Array.isArray(jsonArr) === false) {\r\n            return list;\r\n        }\r\n\r\n        jsonArr.forEach(elt => {\r\n            let newInstance = new classOfT() as ClassOfT;\r\n            newInstance.LoadFromJsonObject(elt);\r\n            list.push(newInstance);\r\n        });\r\n\r\n        return list;\r\n    }\r\n\r\n    public static StringListToJsonArray(value: Array<string>): Array<string> {\r\n        if (value == null)\r\n            return null;\r\n\r\n        let jsonArray: Array<string> = new Array();\r\n        for (let item of value) {\r\n            jsonArray.push(item);\r\n        }\r\n\r\n        return jsonArray;\r\n    }\r\n\r\n    public static StringListFromJsonArray(jsonArray: Array<Object>): Array<string> {\r\n        if (jsonArray == null) {\r\n            return null;\r\n        }\r\n\r\n        let list: Array<string> = new Array();\r\n        for (let item of jsonArray) {\r\n            if (typeof item == \"object\") {\r\n                list.push(JSON.stringify(item));\r\n            } else {\r\n                list.push(String(item));\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    public static StringListToJson(value: Array<string>): string {\r\n        let jsonArray = BpmnModelJsonHelper.StringListToJsonArray(value);\r\n        if (jsonArray == null)\r\n            return null;\r\n\r\n        return JSON.stringify(jsonArray);\r\n    }\r\n\r\n    public static StringListFromJson(json: string): Array<string> {\r\n        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {\r\n            return null;\r\n        }\r\n\r\n        let jsonArray = JSON.parse(json) as Array<Object>;\r\n        if (jsonArray == null) {\r\n            return null;\r\n        }\r\n\r\n        return BpmnModelJsonHelper.StringListFromJsonArray(jsonArray);\r\n    }\r\n\r\n    public static IsNullOrWhiteSpace(string: string): boolean {\r\n        if (string == null) {\r\n            return true;\r\n        } else {\r\n            return string.replace(/(^s*)|(s*$)/g, \"\").length == 0;\r\n        }\r\n    }\r\n\r\n    private static GetDateFromISO(value: string) {\r\n        let a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\r\n        if (a) {\r\n            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static dateFormat(date: Date, fmt: string): string {\r\n        let ret;\r\n        const opt = {\r\n            \"y+\": date.getUTCFullYear().toString(),        // 年\r\n            \"M+\": (date.getUTCMonth() + 1).toString(),     // 月\r\n            \"d+\": date.getUTCDate().toString(),            // 日\r\n            \"H+\": date.getUTCHours().toString(),           // 时\r\n            \"m+\": date.getUTCMinutes().toString(),         // 分\r\n            \"s+\": date.getUTCSeconds().toString(),         // 秒\r\n            \"S+\": date.getUTCMilliseconds().toString(),    // 秒\r\n            // 有其他格式化字符需求可以继续添加，必须转化成字符串\r\n        };\r\n        for (let k in opt) {\r\n            ret = new RegExp(\"(\" + k + \")\").exec(fmt);\r\n            if (ret) {\r\n                if (!String.prototype.padStart) {\r\n                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (BpmnModelJsonHelper.myPadStart(opt[k], ret[1].length, \"0\")));\r\n                } else {\r\n                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, \"0\")));\r\n                }\r\n            }\r\n        }\r\n        return fmt;\r\n    }\r\n\r\n    private static myPadStart(src: string, targetLength: number, padString: string) {\r\n        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;\r\n        padString = String(typeof padString !== 'undefined' ? padString : ' ');\r\n        if (src.length > targetLength) {\r\n            return String(src);\r\n        } else {\r\n            targetLength = targetLength - src.length;\r\n            if (targetLength > padString.length) {\r\n                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\r\n            }\r\n            return padString.slice(0, targetLength) + String(src);\r\n        }\r\n    }\r\n}"]}