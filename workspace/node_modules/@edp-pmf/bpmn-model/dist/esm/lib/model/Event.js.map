{"version":3,"file":"Event.js","sourceRoot":"","sources":["../../../../src/lib/model/Event.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC;IAAoC,yBAAQ;IACxC,eAAY,KAAgB;QAA5B,YACI,kBAAM,KAAK,CAAC,SACf;QAED,sBAAgB,GAA2B,IAAI,KAAK,EAAE,CAAC;;IAFvD,CAAC;IAIM,mCAAmB,GAA1B;QACI,IAAI,GAAG,GAAQ,iBAAM,mBAAmB,WAAE,CAAC;QAC3C,IAAI,yBAAyB,GAAe,IAAI,KAAK,EAAE,CAAC;QACxD,KAAiB,UAAqB,EAArB,KAAA,IAAI,CAAC,gBAAgB,EAArB,cAAqB,EAArB,IAAqB,EAAE;YAAnC,IAAI,IAAI,SAAA;YACT,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;SAC9D;QACD,IAAI,yBAAyB,CAAC,MAAM,GAAG,CAAC,EAAE;YACtC,eAAe,CAAC,iBAAiB,CAAC,GAAG,EAAE,kBAAkB,EAAE,yBAAyB,CAAC,CAAC;SACzF;QACD,OAAO,GAAG,CAAC;IAEf,CAAC;IAEM,kCAAkB,GAAzB,UAA0B,GAAQ;QAC9B,iBAAM,kBAAkB,YAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,uBAAuB,GAAG,eAAe,CAAC,iBAAiB,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;QAEzF,IAAI,uBAAuB,YAAY,KAAK,EAAE;YAC1C,IAAI,yBAAyB,GAAe,uBAAuB,CAAC;YACpE,IAAI,OAAO,GAAoB,IAAI,CAAC;YACpC,KAAiB,UAAyB,EAAzB,uDAAyB,EAAzB,uCAAyB,EAAzB,IAAyB,EAAE;gBAAvC,IAAI,IAAI,kCAAA;gBACT,IAAI,IAAI,GAAG,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC,wBAAwB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAoB,CAAC;gBAC1H,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,SAAS;iBACZ;gBACD,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC7B,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBAE3B,IAAI,eAAe,GAAG,CAAC,OAAO,YAAY,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC5E,IAAI,eAAe,IAAI,IAAI,EAAE;oBACzB,SAAS;iBACZ;gBACD,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC/C;SACJ;IAEL,CAAC;IAEL,YAAC;AAAD,CAAC,AA9CD,CAAoC,QAAQ,GA8C3C","sourcesContent":["import { BpmnModel } from \"./BpmnModel\";\r\nimport { BpmnModelHelper } from \"./BpmnModelHelper\";\r\nimport { EventDefinition } from \"./EventDefinition\";\r\nimport { ExtensionMethod } from \"./ExtensionMethod\";\r\nimport { FlowNode } from \"./FlowNode\";\r\n\r\nexport abstract class Event extends FlowNode {\r\n    constructor(model: BpmnModel) {\r\n        super(model);\r\n    }\r\n\r\n    EventDefinitions: Array<EventDefinition> = new Array();\r\n\r\n    public ConvertToJsonObject(): any {\r\n        let obj: any = super.ConvertToJsonObject();\r\n        let eventDefinitionsJsonArray: Array<any> = new Array();\r\n        for (let item of this.EventDefinitions) {\r\n            eventDefinitionsJsonArray.push(item.ConvertToJsonObject());\r\n        }\r\n        if (eventDefinitionsJsonArray.length > 0) {\r\n            ExtensionMethod.SetAttributeValue(obj, \"eventDefinitions\", eventDefinitionsJsonArray);\r\n        }\r\n        return obj;\r\n\r\n    }\r\n\r\n    public LoadFromJsonObject(obj: any): void {\r\n        super.LoadFromJsonObject(obj);\r\n        let eventDefinitionsElement = ExtensionMethod.GetAttributeValue(obj, \"eventDefinitions\");\r\n\r\n        if (eventDefinitionsElement instanceof Array) {\r\n            let eventDefinitionsJsonArray: Array<any> = eventDefinitionsElement;\r\n            let tempVar: EventDefinition = null;\r\n            for (let item of eventDefinitionsJsonArray) {\r\n                let type = BpmnModelHelper.GetElementType(ExtensionMethod.GetAttributeValue4String(item, \"ClrTypeID\")) as EventDefinition;\r\n                if (type == null) {\r\n                    continue;\r\n                }\r\n                tempVar = type.NewInstance();\r\n                tempVar.Model = this.Model;\r\n\r\n                let eventDefinition = (tempVar instanceof EventDefinition) ? tempVar : null;\r\n                if (eventDefinition == null) {\r\n                    continue;\r\n                }\r\n                eventDefinition.LoadFromJsonObject(item);\r\n                this.EventDefinitions.push(eventDefinition);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}"]}