import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { BpmnModelHelper } from "./BpmnModelHelper";
import { FormalExpression } from "./FormalExpression";
import { ValidationError } from "./ValidationError";
import { ValidationLevel } from "./ValidationLevel";
var DataAssociation = /** @class */ (function (_super) {
    __extends(DataAssociation, _super);
    function DataAssociation(model) {
        return _super.call(this, model) || this;
    }
    DataAssociation.prototype.ResetBeforeLoadFrom = function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.TargetRef = null;
        this.Transformation = null;
    };
    DataAssociation.prototype.ConvertToJsonObject = function () {
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelHelper.SetAttributeValue(obj, "TargetRef", this.TargetRef);
        if (this.Transformation == null) {
            throw new Error("Transformation is null.");
        }
        else {
            BpmnModelHelper.SetAttributeValue(obj, "Transformation", this.Transformation.ConvertToJsonObject());
        }
        return obj;
    };
    DataAssociation.prototype.LoadFromJsonObject = function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.TargetRef = obj.TargetRef;
        if (obj.hasOwnProperty("Transformation")) {
            this.Transformation = new FormalExpression(this.Model);
            this.Transformation.LoadFromJsonObject(obj.Transformation);
        }
    };
    DataAssociation.prototype.Validate = function (errors) {
        _super.prototype.Validate.call(this, errors);
        if (this.Transformation != null) {
            this.Transformation.Validate(errors);
        }
        else {
            var error = new ValidationError();
            error.Element = this;
            error.ErrorLevel = ValidationLevel.$_Error;
            error.ErrorCode = "";
            error.ErrorMessage = "没有设定赋值表达式";
            errors.push(error);
        }
        if (this.TargetRef == null) {
            var error = new ValidationError();
            error.Element = this;
            error.ErrorLevel = ValidationLevel.$_Error;
            error.ErrorCode = "";
            error.ErrorMessage = "没有设定关联的目标";
            errors.push(error);
        }
    };
    return DataAssociation;
}(BaseElement));
export { DataAssociation };
//# sourceMappingURL=DataAssociation.js.map