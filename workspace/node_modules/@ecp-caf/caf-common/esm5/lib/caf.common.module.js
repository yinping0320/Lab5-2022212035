/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CacheService } from './cache/services/cache.service';
import { CacheStorageAbstract } from './cache/services/storage/cache.storage.abstract.service';
import { CacheMemoryStorage } from './cache/services/storage/memory/cache.memory.service';
import { HttpService } from './services/httpservice/http.service';
import { SessionService } from './services/sessionservice/session.service';
import { LanguageService } from './services/languageservice/language.service';
import { WindowVariableService } from './services/window-service/window-variable.service';
import { TabEntityService } from './services/tabservice/tab-entity.service';
import { CookieService } from 'ngx-cookie-service';
var FrmCommonModule = /** @class */ (function () {
    function FrmCommonModule() {
    }
    /**
     * @return {?}
     */
    FrmCommonModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: FrmCommonModule,
            providers: [
                CacheService,
                { provide: CacheStorageAbstract, useClass: CacheMemoryStorage },
                HttpService,
                SessionService,
                LanguageService,
                WindowVariableService,
                TabEntityService,
                CookieService
            ]
        };
    };
    FrmCommonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [],
                    exports: [],
                    providers: [],
                    entryComponents: []
                },] }
    ];
    return FrmCommonModule;
}());
export { FrmCommonModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FmLmNvbW1vbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jYWYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2NhZi5jb21tb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQy9GLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUduRDtJQUFBO0lBMkJBLENBQUM7Ozs7SUFoQlUsdUJBQU87OztJQUFkO1FBRUksT0FBTztZQUNILFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFNBQVMsRUFBRTtnQkFDUCxZQUFZO2dCQUNaLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTtnQkFDL0QsV0FBVztnQkFDWCxjQUFjO2dCQUNkLGVBQWU7Z0JBQ2YscUJBQXFCO2dCQUNyQixnQkFBZ0I7Z0JBQ2hCLGFBQWE7YUFDaEI7U0FDSixDQUFDO0lBQ04sQ0FBQzs7Z0JBMUJKLFFBQVEsU0FBQztvQkFDTixPQUFPLEVBQUU7d0JBQ0wsWUFBWTtxQkFDZjtvQkFDRCxZQUFZLEVBQUUsRUFDYjtvQkFDRCxPQUFPLEVBQUUsRUFBRTtvQkFDWCxTQUFTLEVBQUUsRUFBRTtvQkFDYixlQUFlLEVBQUUsRUFBRTtpQkFDdEI7O0lBa0JELHNCQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0FqQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IENhY2hlU2VydmljZSB9IGZyb20gJy4vY2FjaGUvc2VydmljZXMvY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IENhY2hlU3RvcmFnZUFic3RyYWN0IH0gZnJvbSAnLi9jYWNoZS9zZXJ2aWNlcy9zdG9yYWdlL2NhY2hlLnN0b3JhZ2UuYWJzdHJhY3Quc2VydmljZSc7XHJcbmltcG9ydCB7IENhY2hlTWVtb3J5U3RvcmFnZSB9IGZyb20gJy4vY2FjaGUvc2VydmljZXMvc3RvcmFnZS9tZW1vcnkvY2FjaGUubWVtb3J5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvaHR0cHNlcnZpY2UvaHR0cC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3Nlc3Npb25zZXJ2aWNlL3Nlc3Npb24uc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbGFuZ3VhZ2VzZXJ2aWNlL2xhbmd1YWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBXaW5kb3dWYXJpYWJsZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3dpbmRvdy1zZXJ2aWNlL3dpbmRvdy12YXJpYWJsZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVGFiRW50aXR5U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvdGFic2VydmljZS90YWItZW50aXR5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSAnbmd4LWNvb2tpZS1zZXJ2aWNlJztcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZVxyXG4gICAgXSxcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtdLFxyXG4gICAgcHJvdmlkZXJzOiBbXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW11cclxufSlcclxuZXhwb3J0IGNsYXNzIEZybUNvbW1vbk1vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IEZybUNvbW1vbk1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICBDYWNoZVNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IENhY2hlU3RvcmFnZUFic3RyYWN0LCB1c2VDbGFzczogQ2FjaGVNZW1vcnlTdG9yYWdlIH0sXHJcbiAgICAgICAgICAgICAgICBIdHRwU2VydmljZSxcclxuICAgICAgICAgICAgICAgIFNlc3Npb25TZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgV2luZG93VmFyaWFibGVTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgVGFiRW50aXR5U2VydmljZSxcclxuICAgICAgICAgICAgICAgIENvb2tpZVNlcnZpY2VcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19