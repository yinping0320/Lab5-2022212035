/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { CacheStorageAbstract } from '../cache.storage.abstract.service';
import { WindowVariableService } from '../../../../services/window-service/window-variable.service';
/**
 * Service for storing data in local storage
 */
var CacheMemoryStorage = /** @class */ (function (_super) {
    tslib_1.__extends(CacheMemoryStorage, _super);
    function CacheMemoryStorage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._data = {};
        _this.windowSvc = new WindowVariableService();
        return _this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    CacheMemoryStorage.prototype.getItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var cache = this.getGlobleCache(key);
        if (cache) {
            this._data[key] = cache;
        }
        return this._data[key] ? this._data[key] : null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    CacheMemoryStorage.prototype.setItem = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.setGlobleCache(key, value);
        this._data[key] = value;
        return true;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CacheMemoryStorage.prototype.removeItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        delete this._data[key];
    };
    /**
     * @return {?}
     */
    CacheMemoryStorage.prototype.clear = /**
     * @return {?}
     */
    function () {
        this._data = [];
    };
    /**
     * @return {?}
     */
    CacheMemoryStorage.prototype.type = /**
     * @return {?}
     */
    function () {
        return 2 /* MEMORY */;
    };
    /**
     * @return {?}
     */
    CacheMemoryStorage.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        return true;
    };
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    CacheMemoryStorage.prototype.setGlobleCache = /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        var topWindow = this.windowSvc.getTopWindow();
        try {
            if (topWindow.name) {
                /** @type {?} */
                var exist = false;
                /** @type {?} */
                var ary = topWindow.name.split('&|&');
                // tslint:disable-next-line: prefer-for-of
                for (var i = 0; i < ary.length; i++) {
                    if (ary[i]) {
                        /** @type {?} */
                        var obj = JSON.parse(ary[i]);
                        if (obj[key]) {
                            topWindow.name = topWindow.name.replace(ary[i], this.serializeData(key, value));
                            exist = true;
                            break;
                        }
                    }
                }
                if (!exist) {
                    topWindow.name += '&|&' + this.serializeData(key, value);
                }
            }
            else {
                topWindow.name = this.serializeData(key, value);
            }
        }
        catch (_a) {
            topWindow.name = '';
        }
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CacheMemoryStorage.prototype.getGlobleCache = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var topWindow = this.windowSvc.getTopWindow();
        try {
            /** @type {?} */
            var result = void 0;
            if (topWindow.name) {
                if (topWindow.name.indexOf('&|&') >= 0) {
                    /** @type {?} */
                    var ary = topWindow.name.split('&|&');
                    for (var i = 0; i < ary.length; i++) {
                        if (ary[i]) {
                            /** @type {?} */
                            var obj = JSON.parse(ary[i]);
                            if (obj[key]) {
                                result = obj[key].value;
                                if (i === 0) {
                                    topWindow.name = topWindow.name.replace(ary[i] + '&|&', '');
                                }
                                else {
                                    topWindow.name = topWindow.name.replace('&|&' + ary[i], '');
                                }
                                break;
                            }
                        }
                    }
                }
                else {
                    /** @type {?} */
                    var obj = JSON.parse(topWindow.name);
                    if (obj[key]) {
                        result = obj[key].value;
                        topWindow.name = '';
                    }
                }
            }
            return result;
        }
        catch (_a) {
            topWindow.name = '';
            return null;
        }
    };
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    CacheMemoryStorage.prototype.serializeData = /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        var obj = {};
        obj[key] = {
            value: value
        };
        return JSON.stringify(obj);
    };
    CacheMemoryStorage.decorators = [
        { type: Injectable }
    ];
    return CacheMemoryStorage;
}(CacheStorageAbstract));
export { CacheMemoryStorage };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CacheMemoryStorage.prototype._data;
    /**
     * @type {?}
     * @private
     */
    CacheMemoryStorage.prototype.windowSvc;
}
//# sourceMappingURL=data:application/json;base64,