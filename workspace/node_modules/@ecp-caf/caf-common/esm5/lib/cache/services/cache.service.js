/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { CacheStorageAbstract } from './storage/cache.storage.abstract.service';
import { CacheSessionStorage } from './storage/sessionstorage/cache.sessionstorage.service';
import { CacheLocalStorage } from './storage/localstorage/cache.localstorage.service';
import { CacheMemoryStorage } from './storage/memory/cache.memory.service';
/** @type {?} */
var CACHE_PREFIX = 'CacheService';
/** @type {?} */
var DEFAULT_STORAGE = 2 /* MEMORY */;
/** @type {?} */
var DEFAULT_ENABLED_STORAGE = 1 /* SESSION_STORAGE */;
var CacheService = /** @class */ (function () {
    function CacheService(_storage) {
        this._storage = _storage;
        /**
         * Default cache options
         * CacheOptionsInterface
         *
         */
        this._defaultOptions = {
            expires: Number.MAX_VALUE,
            maxAge: Number.MAX_VALUE
        };
        /**
         * Cache prefix
         */
        this._prefix = CACHE_PREFIX;
        this._validateStorage();
    }
    /**
     * Set data to cache
     */
    /**
     * Set data to cache
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    CacheService.prototype.set = /**
     * Set data to cache
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (key, value, options) {
        /** @type {?} */
        var storageKey = this._toStorageKey(key);
        options = options ? options : this._defaultOptions;
        if (this._storage.setItem(storageKey, this._toStorageValue(value, options))) {
            if (!this._isSystemKey(key) && options.tag) {
                this._saveTag(options.tag, storageKey);
            }
            return true;
        }
        return false;
    };
    /**
     * Get data from cache
     */
    /**
     * Get data from cache
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype.get = /**
     * Get data from cache
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var storageValue = this._storage.getItem(this._toStorageKey(key));
        /** @type {?} */
        var value = null;
        if (storageValue) {
            if (this._validateStorageValue(storageValue)) {
                value = storageValue.value;
            }
            else {
                this.remove(key);
            }
        }
        return value;
    };
    /**
     * Check if value exists
     */
    /**
     * Check if value exists
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype.exists = /**
     * Check if value exists
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return !!this.get(key);
    };
    /**
     * Remove item from cache
     */
    /**
     * Remove item from cache
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype.remove = /**
     * Remove item from cache
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this._storage.removeItem(this._toStorageKey(key));
        this._removeFromTag(this._toStorageKey(key));
    };
    /**
     * Remove all from cache
     */
    /**
     * Remove all from cache
     * @return {?}
     */
    CacheService.prototype.removeAll = /**
     * Remove all from cache
     * @return {?}
     */
    function () {
        this._storage.clear();
    };
    /**
     * Get all tag data
     */
    /**
     * Get all tag data
     * @param {?} tag
     * @return {?}
     */
    CacheService.prototype.getTagData = /**
     * Get all tag data
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        /** @type {?} */
        var tags = this.get(this._tagsStorageKey()) || {};
        /** @type {?} */
        var result = {};
        if (tags[tag]) {
            tags[tag].forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var data = _this.get(_this._fromStorageKey(key));
                if (data) {
                    result[_this._fromStorageKey(key)] = data;
                }
            }));
        }
        return result;
    };
    /**
     * Create a new instance of cache with needed storage
     */
    /**
     * Create a new instance of cache with needed storage
     * @param {?} type
     * @return {?}
     */
    CacheService.prototype.useStorage = /**
     * Create a new instance of cache with needed storage
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var service = new CacheService(this._initStorage(type));
        service.setGlobalPrefix(this._getCachePrefix());
        return service;
    };
    /**
     * Remove all by tag
     */
    /**
     * Remove all by tag
     * @param {?} tag
     * @return {?}
     */
    CacheService.prototype.removeTag = /**
     * Remove all by tag
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        /** @type {?} */
        var tags = this.get(this._tagsStorageKey()) || {};
        if (tags[tag]) {
            tags[tag].forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this._storage.removeItem(key);
            }));
            delete tags[tag];
            this.set(this._tagsStorageKey(), tags);
        }
    };
    /**
     * Set global cache key prefix
     */
    /**
     * Set global cache key prefix
     * @param {?} prefix
     * @return {?}
     */
    CacheService.prototype.setGlobalPrefix = /**
     * Set global cache key prefix
     * @param {?} prefix
     * @return {?}
     */
    function (prefix) {
        this._prefix = prefix;
    };
    /**
     * Validate cache storage
     *
     */
    /**
     * Validate cache storage
     *
     * @private
     * @return {?}
     */
    CacheService.prototype._validateStorage = /**
     * Validate cache storage
     *
     * @private
     * @return {?}
     */
    function () {
        if (!this._storage) {
            this._storage = this._initStorage(DEFAULT_STORAGE);
        }
        if (!this._storage.isEnabled()) {
            this._storage = this._initStorage(DEFAULT_ENABLED_STORAGE);
        }
    };
    /**
     * Remove key from tags keys list
     */
    /**
     * Remove key from tags keys list
     * @private
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype._removeFromTag = /**
     * Remove key from tags keys list
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var tags = this.get(this._tagsStorageKey()) || {};
        /** @type {?} */
        var index;
        // tslint:disable-next-line:forin
        for (var tag in tags) {
            index = tags[tag].indexOf(key);
            if (index !== -1) {
                tags[tag].splice(index, 1);
                this.set(this._tagsStorageKey(), tags);
                break;
            }
        }
    };
    /**
     * Init storage by type
     */
    /**
     * Init storage by type
     * @private
     * @param {?} type
     * @return {?}
     */
    CacheService.prototype._initStorage = /**
     * Init storage by type
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var storage;
        switch (type) {
            case 1 /* SESSION_STORAGE */:
                storage = new CacheSessionStorage();
                break;
            case 0 /* LOCAL_STORAGE */:
                storage = new CacheLocalStorage();
                break;
            default: storage = new CacheMemoryStorage();
        }
        return storage;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype._toStorageKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._getCachePrefix() + key;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype._fromStorageKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key.replace(this._getCachePrefix(), '');
    };
    /**
     * Prepare value to set to storage
     *
     */
    /**
     * Prepare value to set to storage
     *
     * @private
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    CacheService.prototype._toStorageValue = /**
     * Prepare value to set to storage
     *
     * @private
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return {
            value: value,
            options: this._toStorageOptions(options)
        };
    };
    /**
     * Prepare options to set to storage
     *
     */
    /**
     * Prepare options to set to storage
     *
     * @private
     * @param {?} options
     * @return {?}
     */
    CacheService.prototype._toStorageOptions = /**
     * Prepare options to set to storage
     *
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var storageOptions = {};
        storageOptions.expires = options.expires ? options.expires :
            (options.maxAge ? Date.now() + (options.maxAge * 1000) : this._defaultOptions.expires);
        storageOptions.maxAge = options.maxAge ? options.maxAge : this._defaultOptions.maxAge;
        return storageOptions;
    };
    /**
     * Validate storage value
     *
     */
    /**
     * Validate storage value
     *
     * @private
     * @param {?} value
     * @return {?}
     */
    CacheService.prototype._validateStorageValue = /**
     * Validate storage value
     *
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return !!value.options.expires && value.options.expires > Date.now();
    };
    /**
     * check if its system cache key
     *
     */
    /**
     * check if its system cache key
     *
     * @private
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype._isSystemKey = /**
     * check if its system cache key
     *
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return [this._tagsStorageKey()].indexOf(key) !== -1;
    };
    /**
     * Save tag to list of tags
     *
     *
     */
    /**
     * Save tag to list of tags
     *
     *
     * @private
     * @param {?} tag
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype._saveTag = /**
     * Save tag to list of tags
     *
     *
     * @private
     * @param {?} tag
     * @param {?} key
     * @return {?}
     */
    function (tag, key) {
        /** @type {?} */
        var tags = this.get(this._tagsStorageKey()) || {};
        if (!tags[tag]) {
            tags[tag] = [key];
        }
        else {
            tags[tag].push(key);
        }
        this.set(this._tagsStorageKey(), tags);
    };
    /**
     * Get global cache prefix
     *
     *
     */
    /**
     * Get global cache prefix
     *
     *
     * @private
     * @return {?}
     */
    CacheService.prototype._getCachePrefix = /**
     * Get global cache prefix
     *
     *
     * @private
     * @return {?}
     */
    function () {
        return this._prefix;
    };
    /**
     * @private
     * @return {?}
     */
    CacheService.prototype._tagsStorageKey = /**
     * @private
     * @return {?}
     */
    function () {
        return 'CacheService_tags';
    };
    CacheService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CacheService.ctorParameters = function () { return [
        { type: CacheStorageAbstract, decorators: [{ type: Optional }] }
    ]; };
    return CacheService;
}());
export { CacheService };
if (false) {
    /**
     * Default cache options
     * CacheOptionsInterface
     *
     * @type {?}
     * @private
     */
    CacheService.prototype._defaultOptions;
    /**
     * Cache prefix
     * @type {?}
     * @private
     */
    CacheService.prototype._prefix;
    /**
     * @type {?}
     * @private
     */
    CacheService.prototype._storage;
}
//# sourceMappingURL=data:application/json;base64,