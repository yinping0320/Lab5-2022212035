/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonUtil = /** @class */ (function () {
    function CommonUtil() {
    }
    /**
     * @param {?} paraName
     * @return {?}
     */
    CommonUtil.getQueryString = /**
     * @param {?} paraName
     * @return {?}
     */
    function (paraName) {
        /** @type {?} */
        var reg = new RegExp('(^|&)' + paraName + '=([^&]*)(&|$)', 'i');
        /** @type {?} */
        var r = window.location.search.substr(1).match(reg);
        /** @type {?} */
        var paraValue = '';
        if (r) {
            paraValue = r[2];
        }
        return paraValue;
    };
    /**
     * @param {?} paraName
     * @return {?}
     */
    CommonUtil.getQueryStringFromHash = /**
     * @param {?} paraName
     * @return {?}
     */
    function (paraName) {
        /** @type {?} */
        var url = window.location.hash;
        /** @type {?} */
        var arrObj = url && url.split('?');
        if (arrObj && arrObj.length > 1) {
            /** @type {?} */
            var arrPara = arrObj[1].split('&');
            if (!arrPara) {
                return '';
            }
            /** @type {?} */
            var arr = void 0;
            // tslint:disable-next-line: prefer-for-of
            for (var i = 0; i < arrPara.length; i++) {
                arr = arrPara[i].split('=');
                if (arr != null && arr[0] === paraName) {
                    return arr[1];
                }
            }
            return '';
        }
        else {
            return '';
        }
    };
    /**
     * @return {?}
     */
    CommonUtil.getCookieMapFromDoc = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cookieArr = document.cookie && document.cookie.split(';');
        /** @type {?} */
        var cookieMap = new Map();
        if (cookieArr) {
            cookieArr.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var params = item.split('=');
                cookieMap.set(params[0], params[1]);
            }));
        }
        return cookieMap;
    };
    /**
     * 获取当前window 中funcId appId等公共变量
     * 返回结果格式：funcId=xx&appType=xxx&
     */
    /**
     * 获取当前window 中funcId appId等公共变量
     * 返回结果格式：funcId=xx&appType=xxx&
     * @return {?}
     */
    CommonUtil.getCommonVariables = /**
     * 获取当前window 中funcId appId等公共变量
     * 返回结果格式：funcId=xx&appType=xxx&
     * @return {?}
     */
    function () {
        return CommonUtil.getQueryStringFromHash('cvft');
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    CommonUtil.matchCommonVariableKey = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var itemArr = item.split('=');
        if (!itemArr || itemArr.length !== 2 || !itemArr[0]) {
            return false;
        }
        switch (itemArr[0].toLowerCase()) {
            case 'funcid': return true;
            case 'appid': return true;
            case 'appentrance': return true;
            case 'apptype': return true;
        }
        return false;
    };
    return CommonUtil;
}());
export { CommonUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLnV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NhZi1jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXRpbGl0aWVzL2NvbW1vbi51dGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBO0lBQUE7SUFtRUEsQ0FBQzs7Ozs7SUFqRWlCLHlCQUFjOzs7O0lBQTVCLFVBQTZCLFFBQWdCOztZQUNuQyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsR0FBRyxlQUFlLEVBQUUsR0FBRyxDQUFDOztZQUMzRCxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQ2pELFNBQVMsR0FBRyxFQUFFO1FBQ2xCLElBQUksQ0FBQyxFQUFFO1lBQ0gsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRWEsaUNBQXNCOzs7O0lBQXBDLFVBQXFDLFFBQWdCOztZQUMzQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJOztZQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3BDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDdkIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1YsT0FBTyxFQUFFLENBQUM7YUFDYjs7Z0JBQ0csR0FBRyxTQUFPO1lBQ2QsMENBQTBDO1lBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNyQyxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNqQjthQUNKO1lBQ0QsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0gsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7Ozs7SUFFYSw4QkFBbUI7OztJQUFqQzs7WUFDVSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQ3pELFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBa0I7UUFDM0MsSUFBSSxTQUFTLEVBQUU7WUFDWCxTQUFTLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsSUFBSTs7b0JBQ1osTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2dCQUM5QixTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ1csNkJBQWtCOzs7OztJQUFoQztRQUNJLE9BQU8sVUFBVSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7OztJQUVjLGlDQUFzQjs7Ozs7SUFBckMsVUFBc0MsSUFBWTs7WUFDeEMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDakQsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxRQUFRLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUM5QixLQUFLLFFBQVEsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1lBQzNCLEtBQUssT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7WUFDMUIsS0FBSyxhQUFhLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztZQUNoQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNMLGlCQUFDO0FBQUQsQ0FBQyxBQW5FRCxJQW1FQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5leHBvcnQgY2xhc3MgQ29tbW9uVXRpbCB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRRdWVyeVN0cmluZyhwYXJhTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cCgnKF58JiknICsgcGFyYU5hbWUgKyAnPShbXiZdKikoJnwkKScsICdpJyk7XHJcbiAgICAgICAgY29uc3QgciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHJlZyk7XHJcbiAgICAgICAgbGV0IHBhcmFWYWx1ZSA9ICcnO1xyXG4gICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgIHBhcmFWYWx1ZSA9IHJbMl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJhVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRRdWVyeVN0cmluZ0Zyb21IYXNoKHBhcmFOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICAgICAgICBjb25zdCBhcnJPYmogPSB1cmwgJiYgdXJsLnNwbGl0KCc/Jyk7XHJcbiAgICAgICAgaWYgKGFyck9iaiAmJiBhcnJPYmoubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBhcnJQYXJhID0gYXJyT2JqWzFdLnNwbGl0KCcmJyk7XHJcbiAgICAgICAgICAgIGlmICghYXJyUGFyYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBhcnI6IGFueVtdO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHByZWZlci1mb3Itb2ZcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJQYXJhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcnIgPSBhcnJQYXJhW2ldLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyICE9IG51bGwgJiYgYXJyWzBdID09PSBwYXJhTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRDb29raWVNYXBGcm9tRG9jKCk6IE1hcDxzdHJpbmcsIHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZUFyciA9IGRvY3VtZW50LmNvb2tpZSAmJiBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcclxuICAgICAgICBjb25zdCBjb29raWVNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG4gICAgICAgIGlmIChjb29raWVBcnIpIHtcclxuICAgICAgICAgICAgY29va2llQXJyLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBpdGVtLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgICAgICBjb29raWVNYXAuc2V0KHBhcmFtc1swXSwgcGFyYW1zWzFdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb29raWVNYXA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blvZPliY13aW5kb3cg5LitZnVuY0lkIGFwcElk562J5YWs5YWx5Y+Y6YePXHJcbiAgICAgKiDov5Tlm57nu5PmnpzmoLzlvI/vvJpmdW5jSWQ9eHgmYXBwVHlwZT14eHgmXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Q29tbW9uVmFyaWFibGVzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIENvbW1vblV0aWwuZ2V0UXVlcnlTdHJpbmdGcm9tSGFzaCgnY3ZmdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIG1hdGNoQ29tbW9uVmFyaWFibGVLZXkoaXRlbTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgaXRlbUFyciA9IGl0ZW0uc3BsaXQoJz0nKTtcclxuICAgICAgICBpZiAoIWl0ZW1BcnIgfHwgaXRlbUFyci5sZW5ndGggIT09IDIgfHwgIWl0ZW1BcnJbMF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGl0ZW1BcnJbMF0udG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlICdmdW5jaWQnOiByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSAnYXBwaWQnOiByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSAnYXBwZW50cmFuY2UnOiByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSAnYXBwdHlwZSc6IHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIl19