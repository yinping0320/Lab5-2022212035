/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WindowVariableService } from '../window-service/window-variable.service';
import * as i0 from "@angular/core";
/**
 * @record
 */
function TabEntity() { }
if (false) {
    /** @type {?} */
    TabEntity.prototype.tabId;
    /** @type {?|undefined} */
    TabEntity.prototype.code;
    /** @type {?|undefined} */
    TabEntity.prototype.name;
    /** @type {?} */
    TabEntity.prototype.appType;
    /** @type {?} */
    TabEntity.prototype.funcId;
    /** @type {?} */
    TabEntity.prototype.appId;
    /** @type {?} */
    TabEntity.prototype.appEntrance;
}
var TabEntityService = /** @class */ (function () {
    function TabEntityService() {
        this.nameSpace = 'gsp-rtf-tabarr-service';
        this.tabarrayKey = 'tab-arry';
        this.windowService = new WindowVariableService();
        this.topWin = this.windowService.getTopWindow();
        this.topWin[this.nameSpace] = this.topWin[this.nameSpace] || {};
    }
    /**
     * @param {?} tabs
     * @return {?}
     */
    TabEntityService.prototype.setTabs = /**
     * @param {?} tabs
     * @return {?}
     */
    function (tabs) {
        if (!tabs || tabs.length === 0) {
            return;
        }
        /** @type {?} */
        var copy = this.deepClone(tabs);
        this.topWin[this.nameSpace][this.tabarrayKey] = copy;
    };
    /**
     * @return {?}
     */
    TabEntityService.prototype.getTabs = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tabs = this.topWin[this.nameSpace][this.tabarrayKey] || [];
        if (!tabs || tabs.length === 0) {
            return tabs;
        }
        return this.deepClone(tabs);
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    TabEntityService.prototype.setActiveTab = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        /** @type {?} */
        var tabs = this.getTabs();
        /** @type {?} */
        var activeOld = tabs.find((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.active; }));
        if (!tab) {
            if (!!activeOld) {
                activeOld.active = false;
            }
            return;
        }
        if (tabs.length > 0) {
            /** @type {?} */
            var activeNew = tabs.find((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.id === tab.id; }));
            if (!activeNew) {
                activeNew = tab;
                if (!!activeOld) {
                    activeOld.active = false;
                }
                activeNew.active = true;
                tabs.push(activeNew);
            }
            else {
                if (!!activeOld) {
                    if (activeOld === activeNew) {
                        return;
                    }
                    else {
                        activeOld.active = false;
                        activeNew.active = true;
                    }
                }
                else {
                    activeNew.active = true;
                }
            }
            this.setTabs(tabs);
        }
    };
    /**
     * @return {?}
     */
    TabEntityService.prototype.getActiveTab = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tabs = this.getTabs();
        /** @type {?} */
        var activeTab = tabs && tabs.find((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.active; }));
        /** @type {?} */
        var res = activeTab && {
            tabId: activeTab.id,
            appType: activeTab.appType,
            funcId: activeTab.funcId,
            appId: activeTab.appId,
            appEntrance: activeTab.appEntrance,
            name: activeTab.FuncName
        };
        return res;
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    TabEntityService.prototype.deepClone = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        var result;
        if (typeof target === 'object') {
            if (Array.isArray(target)) {
                result = [];
                for (var i in target) {
                    result.push(this.deepClone(target[i]));
                }
            }
            else if (target === null) {
                result = null;
            }
            else if (target.constructor === RegExp) {
                result = target;
            }
            else {
                result = {};
                for (var i in target) {
                    result[i] = this.deepClone(target[i]);
                }
            }
        }
        else {
            result = target;
        }
        return result;
    };
    TabEntityService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TabEntityService.ctorParameters = function () { return []; };
    /** @nocollapse */ TabEntityService.ngInjectableDef = i0.defineInjectable({ factory: function TabEntityService_Factory() { return new TabEntityService(); }, token: TabEntityService, providedIn: "root" });
    return TabEntityService;
}());
export { TabEntityService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.nameSpace;
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.tabarrayKey;
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.windowService;
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.topWin;
}
//# sourceMappingURL=data:application/json;base64,