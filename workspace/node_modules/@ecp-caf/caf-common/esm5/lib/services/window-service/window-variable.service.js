/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var WindowVariableService = /** @class */ (function () {
    function WindowVariableService() {
    }
    /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空的自定义变量
     */
    /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空的自定义变量
     * @param {?} key
     * @return {?}
     */
    WindowVariableService.prototype.getVariableFromWindow = /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空的自定义变量
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var topWin = this.getTopWindow();
        /** @type {?} */
        var frmWin = window;
        while (!frmWin[key] && frmWin !== topWin) {
            frmWin = frmWin.parent;
        }
        return frmWin[key];
    };
    /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空且含有元素的自定义数组变量
     */
    /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空且含有元素的自定义数组变量
     * @param {?} key
     * @return {?}
     */
    WindowVariableService.prototype.getArrayFromWindow = /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空且含有元素的自定义数组变量
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var topWin = this.getTopWindow();
        /** @type {?} */
        var frmWin = window;
        while ((!frmWin[key] || frmWin[key].length === 0) && frmWin !== topWin) {
            frmWin = frmWin.parent;
        }
        return (/** @type {?} */ (frmWin[key])) || [];
    };
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     */
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @return {?}
     */
    WindowVariableService.prototype.getTopWindow = /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @return {?}
     */
    function () {
        /** @type {?} */
        var curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    };
    WindowVariableService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WindowVariableService.ctorParameters = function () { return []; };
    return WindowVariableService;
}());
export { WindowVariableService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXZhcmlhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jYWYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3dpbmRvdy1zZXJ2aWNlL3dpbmRvdy12YXJpYWJsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDO0lBR0k7SUFBZ0IsQ0FBQztJQUVqQjs7O09BR0c7Ozs7Ozs7SUFDSSxxREFBcUI7Ozs7OztJQUE1QixVQUE2QixHQUFXOztZQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRTs7WUFDOUIsTUFBTSxHQUFXLE1BQU07UUFDM0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3RDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7OztJQUNJLGtEQUFrQjs7Ozs7O0lBQXpCLFVBQTBCLEdBQVc7O1lBQzNCLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFOztZQUM5QixNQUFNLEdBQVcsTUFBTTtRQUMzQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3BFLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxtQkFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVMsSUFBSSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0ksNENBQVk7Ozs7O0lBQW5COztZQUNRLE1BQU0sR0FBVyxNQUFNLENBQUMsSUFBSTtRQUNoQyxJQUFJO1lBQ0EsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Z0JBQzdELElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsV0FBVyxFQUFFO29CQUMxRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztpQkFDMUI7cUJBQU07b0JBQ0gsTUFBTTtpQkFDVDthQUNKO1NBQ0o7UUFBQyxPQUFPLENBQUMsRUFBRSxHQUFHO1FBQ2YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Z0JBL0NKLFVBQVU7Ozs7SUFnRFgsNEJBQUM7Q0FBQSxBQWhERCxJQWdEQztTQS9DWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXaW5kb3dWYXJpYWJsZVNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku47lvZPliY13aW5kb3fpgY3ljobliLDmoYbmnrbpobbnuqd3aW5kb3dcclxuICAgICAqIOW5tuiOt+WPluS4gOS4qumdnuepuueahOiHquWumuS5ieWPmOmHj1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VmFyaWFibGVGcm9tV2luZG93KGtleTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBjb25zdCB0b3BXaW4gPSB0aGlzLmdldFRvcFdpbmRvdygpO1xyXG4gICAgICAgIGxldCBmcm1XaW46IFdpbmRvdyA9IHdpbmRvdztcclxuICAgICAgICB3aGlsZSAoIWZybVdpbltrZXldICYmIGZybVdpbiAhPT0gdG9wV2luKSB7XHJcbiAgICAgICAgICAgIGZybVdpbiA9IGZybVdpbi5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmcm1XaW5ba2V5XTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS7juW9k+WJjXdpbmRvd+mBjeWOhuWIsOahhuaetumhtue6p3dpbmRvd1xyXG4gICAgICog5bm26I635Y+W5LiA5Liq6Z2e56m65LiU5ZCr5pyJ5YWD57Sg55qE6Ieq5a6a5LmJ5pWw57uE5Y+Y6YePXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRBcnJheUZyb21XaW5kb3coa2V5OiBzdHJpbmcpOiBhbnlbXSB7XHJcbiAgICAgICAgY29uc3QgdG9wV2luID0gdGhpcy5nZXRUb3BXaW5kb3coKTtcclxuICAgICAgICBsZXQgZnJtV2luOiBXaW5kb3cgPSB3aW5kb3c7XHJcbiAgICAgICAgd2hpbGUgKCghZnJtV2luW2tleV0gfHwgZnJtV2luW2tleV0ubGVuZ3RoID09PSAwKSAmJiBmcm1XaW4gIT09IHRvcFdpbikge1xyXG4gICAgICAgICAgICBmcm1XaW4gPSBmcm1XaW4ucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnJtV2luW2tleV0gYXMgYW55W10gfHwgW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmoYbmnrbnmoTpobbnuqd3aW5kb3dcclxuICAgICAqIOi/m+ihjOi3qOWfn+WwgeijhVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VG9wV2luZG93KCk6IFdpbmRvdyB7XHJcbiAgICAgICAgbGV0IGN1cldpbjogV2luZG93ID0gd2luZG93LnNlbGY7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cldpbi5sb2NhdGlvbi5vcmlnaW4gPT09IGN1cldpbi5wYXJlbnQubG9jYXRpb24ub3JpZ2luKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyV2luICE9PSBjdXJXaW4ucGFyZW50ICYmICEoY3VyV2luIGFzIGFueSkuaXNSVEZUb3BXaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJXaW4gPSBjdXJXaW4ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgIHJldHVybiBjdXJXaW47XHJcbiAgICB9XHJcbn1cclxuIl19