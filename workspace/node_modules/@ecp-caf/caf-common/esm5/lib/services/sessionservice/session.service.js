/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WindowVariableService } from '../window-service/window-variable.service';
import { CommonUtil } from '../../utilities/common.utilities';
var SessionService = /** @class */ (function () {
    function SessionService() {
        this.SessionKey = 'session';
        this.SessionKeyForIde = 'sessionId';
        this.FuncSessionKey = 'FuncSession';
        window[this.FuncSessionKey] = window[this.FuncSessionKey] || new Map();
        this.windowService = new WindowVariableService();
    }
    /**
     * 获取用户sessionid
     */
    /**
     * 获取用户sessionid
     * @return {?}
     */
    SessionService.prototype.getUserSessionId = /**
     * 获取用户sessionid
     * @return {?}
     */
    function () {
        return localStorage.getItem(this.SessionKey) || '';
    };
    /**
     * 获取当前session 之前依赖router的方式改掉
     * 从url hash中获取query
     * N 栈为funcSession
     * J 栈为formToken
     */
    /**
     * 获取当前session 之前依赖router的方式改掉
     * 从url hash中获取query
     * N 栈为funcSession
     * J 栈为formToken
     * @param {?=} tabId
     * @return {?}
     */
    SessionService.prototype.getCurrentSeesionId = /**
     * 获取当前session 之前依赖router的方式改掉
     * 从url hash中获取query
     * N 栈为funcSession
     * J 栈为formToken
     * @param {?=} tabId
     * @return {?}
     */
    function (tabId) {
        if (!!tabId) {
            /** @type {?} */
            var tab = this.getTabArray().find((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.id === tabId; }));
            return tab && (tab.formToken || tab.sessionId);
        }
        /** @type {?} */
        var ssid = CommonUtil.getQueryStringFromHash('cvft');
        if (!ssid) {
            /** @type {?} */
            var pageId_1 = CommonUtil.getQueryStringFromHash('tabId');
            /** @type {?} */
            var tab = this.getTabArray().find((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t.id === pageId_1; }));
            if (tab) {
                ssid = (tab.formToken || tab.sessionId);
            }
        }
        return ssid || this.getUserSessionId();
    };
    /***
     * 获取功能的session(功能重复打开，会存在多个)
     * (1912 框架移除funcSession，接口作废)
     */
    /**
     *
     * 获取功能的session(功能重复打开，会存在多个)
     * (1912 框架移除funcSession，接口作废)
     * @param {?} funcId
     * @return {?}
     */
    SessionService.prototype.getFuncSessionId = /**
     *
     * 获取功能的session(功能重复打开，会存在多个)
     * (1912 框架移除funcSession，接口作废)
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        /** @type {?} */
        var ssMap = new Map();
        /** @type {?} */
        var tabs = this.getTabArray().filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.funcId === funcId; }));
        if (!tabs || tabs.length === 0) {
            return ssMap;
        }
        // tslint:disable-next-line: prefer-for-of
        for (var i = 0; i < tabs.length; i++) {
            ssMap.set(tabs[i].tabId, tabs[i].sessionId);
        }
        return ssMap;
    };
    /**
     * 获取应用session（应用重复打开会存在多个）
     * (1912 框架移除funcSession，接口作废)
     */
    /**
     * 获取应用session（应用重复打开会存在多个）
     * (1912 框架移除funcSession，接口作废)
     * @param {?} appId
     * @param {?} appEntrance
     * @return {?}
     */
    SessionService.prototype.getAppSessionId = /**
     * 获取应用session（应用重复打开会存在多个）
     * (1912 框架移除funcSession，接口作废)
     * @param {?} appId
     * @param {?} appEntrance
     * @return {?}
     */
    function (appId, appEntrance) {
        /** @type {?} */
        var ssMap = new Map();
        /** @type {?} */
        var tabs = this.getTabArray().filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.appId === appId && t.appEntrance === appEntrance; }));
        if (!tabs || tabs.length === 0) {
            return ssMap;
        }
        // tslint:disable-next-line: prefer-for-of
        for (var i = 0; i < tabs.length; i++) {
            ssMap.set(tabs[i].tabId, tabs[i].sessionId);
        }
        return ssMap;
    };
    /**
     * 设置用户sessionid
     * 只是用于N版
     */
    /**
     * 设置用户sessionid
     * 只是用于N版
     * @param {?} ssid
     * @return {?}
     */
    SessionService.prototype.setUserSessionId = /**
     * 设置用户sessionid
     * 只是用于N版
     * @param {?} ssid
     * @return {?}
     */
    function (ssid) {
        // todo框架修改之后，要和IDE同步
        localStorage.setItem(this.SessionKey, ssid);
        localStorage.setItem(this.SessionKeyForIde, ssid);
    };
    /**
     * 缓存当前功能的sessionid
     * (1912 框架移除funcSession，接口作废)
     */
    /**
     * 缓存当前功能的sessionid
     * (1912 框架移除funcSession，接口作废)
     * @param {?} key
     * @param {?} ssid
     * @return {?}
     */
    SessionService.prototype.setFuncSessionId = /**
     * 缓存当前功能的sessionid
     * (1912 框架移除funcSession，接口作废)
     * @param {?} key
     * @param {?} ssid
     * @return {?}
     */
    function (key, ssid) {
        this.getFuncSessionCache().set(key, ssid);
    };
    /**
     * 缓存当前应用的sessionId
     * (1912 框架移除funcSession，接口作废)
     */
    /**
     * 缓存当前应用的sessionId
     * (1912 框架移除funcSession，接口作废)
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} ssid
     * @return {?}
     */
    SessionService.prototype.setAppSessionId = /**
     * 缓存当前应用的sessionId
     * (1912 框架移除funcSession，接口作废)
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} ssid
     * @return {?}
     */
    function (appId, appEntrance, ssid) {
        this.setFuncSessionId(appId + "#" + appEntrance, ssid);
    };
    /**
     * @private
     * @return {?}
     */
    SessionService.prototype.getFuncSessionCache = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionValue = this.windowService.getVariableFromWindow(this.FuncSessionKey);
        return (/** @type {?} */ (sessionValue));
    };
    /**
     * @private
     * @return {?}
     */
    SessionService.prototype.getTabArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var iframeTabarray = 'iframeTabarray';
        /** @type {?} */
        var iframArr = this.windowService.getArrayFromWindow(iframeTabarray);
        return iframArr;
    };
    SessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SessionService.ctorParameters = function () { return []; };
    return SessionService;
}());
export { SessionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.SessionKey;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.SessionKeyForIde;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.FuncSessionKey;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.windowService;
}
//# sourceMappingURL=data:application/json;base64,