/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { SessionService } from '../sessionservice/session.service';
import { CommonUtil } from '../../utilities/common.utilities';
var HttpService = /** @class */ (function () {
    function HttpService(http, sessionService) {
        this.http = http;
        this.sessionService = sessionService;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    HttpService.prototype.get = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.request('Get', url, this.setHeader({}));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    HttpService.prototype.post = /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    function (url, body) {
        return this.request('Post', url, this.setHeader({ body: body }));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    HttpService.prototype.put = /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    function (url, body) {
        return this.request('Put', url, this.setHeader({ body: body }));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    HttpService.prototype.delete = /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    function (url, body) {
        return this.request('Delete', url, this.setHeader({ body: body }));
    };
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    HttpService.prototype.patch = /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    function (url, body) {
        return this.request('Patch', url, this.setHeader({ body: body }));
    };
    /** 默认用当前sessionid */
    /**
     * 默认用当前sessionid
     * @param {?} options
     * @param {?=} bizContextId
     * @return {?}
     */
    HttpService.prototype.setHeader = /**
     * 默认用当前sessionid
     * @param {?} options
     * @param {?=} bizContextId
     * @return {?}
     */
    function (options, bizContextId) {
        options.headers = {
            'Content-Type': 'application/json'
        };
        /** @type {?} */
        var commonVariables = CommonUtil.getCommonVariables();
        if (commonVariables) {
            /** @type {?} */
            var commonVariableKey = 'X-CAF-Runtime-CommonVariable';
            options.headers[commonVariableKey] = commonVariables;
        }
        if (bizContextId) {
            /** @type {?} */
            var bizContextKey = 'X-CAF-Runtime-Context';
            options.headers[bizContextKey] = bizContextId;
        }
        return options;
    };
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    HttpService.prototype.request = /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    function (method, url, options) {
        if (options.body) {
            if (typeof options.body !== 'string') {
                options.body = JSON.stringify(options.body);
            }
        }
        return this.http.request(method, url, options)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data;
        })));
    };
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    HttpService.prototype.request$ = /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    function (method, url, options) {
        return this.http.request(method, url, options);
    };
    HttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SessionService }
    ]; };
    return HttpService;
}());
export { HttpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.sessionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY2FmLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9odHRwc2VydmljZS9odHRwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRTlEO0lBR0kscUJBQ1ksSUFBZ0IsRUFDaEIsY0FBOEI7UUFEOUIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDdEMsQ0FBQzs7Ozs7SUFFTCx5QkFBRzs7OztJQUFILFVBQUksR0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7Ozs7SUFFRCwwQkFBSTs7Ozs7SUFBSixVQUFLLEdBQVcsRUFBRSxJQUFTO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7SUFDRCx5QkFBRzs7Ozs7SUFBSCxVQUFJLEdBQVcsRUFBRSxJQUFTO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7SUFDRCw0QkFBTTs7Ozs7SUFBTixVQUFPLEdBQVcsRUFBRSxJQUFTO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7SUFDRCwyQkFBSzs7Ozs7SUFBTCxVQUFNLEdBQVcsRUFBRSxJQUFTO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQscUJBQXFCOzs7Ozs7O0lBQ3JCLCtCQUFTOzs7Ozs7SUFBVCxVQUFVLE9BQVksRUFBRSxZQUFxQjtRQUV6QyxPQUFPLENBQUMsT0FBTyxHQUFHO1lBQ2QsY0FBYyxFQUFFLGtCQUFrQjtTQUNyQyxDQUFDOztZQUNJLGVBQWUsR0FBRyxVQUFVLENBQUMsa0JBQWtCLEVBQUU7UUFDdkQsSUFBSSxlQUFlLEVBQUU7O2dCQUNYLGlCQUFpQixHQUFHLDhCQUE4QjtZQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsZUFBZSxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxZQUFZLEVBQUU7O2dCQUNSLGFBQWEsR0FBRyx1QkFBdUI7WUFDN0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxZQUFZLENBQUM7U0FDakQ7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDOzs7Ozs7O0lBRUQsNkJBQU87Ozs7OztJQUFQLFVBQVEsTUFBYyxFQUFFLEdBQVcsRUFBRSxPQUFZO1FBQzdDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDbEMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQzthQUN6QyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLFVBQUMsSUFBSTtZQUNYLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDWixDQUFDOzs7Ozs7O0lBRUQsOEJBQVE7Ozs7OztJQUFSLFVBQVMsTUFBYyxFQUFFLEdBQVcsRUFBRSxPQUFZO1FBQzlDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDOztnQkF6REosVUFBVTs7OztnQkFORixVQUFVO2dCQUVWLGNBQWM7O0lBOER2QixrQkFBQztDQUFBLEFBMURELElBMERDO1NBekRZLFdBQVc7Ozs7OztJQUdoQiwyQkFBd0I7Ozs7O0lBQ3hCLHFDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBTZXNzaW9uU2VydmljZSB9IGZyb20gJy4uL3Nlc3Npb25zZXJ2aWNlL3Nlc3Npb24uc2VydmljZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlsIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2NvbW1vbi51dGlsaXRpZXMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSHR0cFNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgICAgICBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZVxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBnZXQodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdHZXQnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHt9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdCh1cmw6IHN0cmluZywgYm9keTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUG9zdCcsIHVybCwgdGhpcy5zZXRIZWFkZXIoeyBib2R5IH0pKTtcclxuICAgIH1cclxuICAgIHB1dCh1cmw6IHN0cmluZywgYm9keTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUHV0JywgdXJsLCB0aGlzLnNldEhlYWRlcih7IGJvZHkgfSkpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlKHVybDogc3RyaW5nLCBib2R5OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdEZWxldGUnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHsgYm9keSB9KSk7XHJcbiAgICB9XHJcbiAgICBwYXRjaCh1cmw6IHN0cmluZywgYm9keTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUGF0Y2gnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHsgYm9keSB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOm7mOiupOeUqOW9k+WJjXNlc3Npb25pZCAqL1xyXG4gICAgc2V0SGVhZGVyKG9wdGlvbnM6IGFueSwgYml6Q29udGV4dElkPzogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgY29tbW9uVmFyaWFibGVzID0gQ29tbW9uVXRpbC5nZXRDb21tb25WYXJpYWJsZXMoKTtcclxuICAgICAgICBpZiAoY29tbW9uVmFyaWFibGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1vblZhcmlhYmxlS2V5ID0gJ1gtQ0FGLVJ1bnRpbWUtQ29tbW9uVmFyaWFibGUnO1xyXG4gICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbY29tbW9uVmFyaWFibGVLZXldID0gY29tbW9uVmFyaWFibGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYml6Q29udGV4dElkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpekNvbnRleHRLZXkgPSAnWC1DQUYtUnVudGltZS1Db250ZXh0JztcclxuICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzW2JpekNvbnRleHRLZXldID0gYml6Q29udGV4dElkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICByZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgb3B0aW9uczogYW55KSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuYm9keSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYm9keSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYm9keSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zKVxyXG4gICAgICAgICAgICAucGlwZShtYXAoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVxdWVzdCQobWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCBvcHRpb25zOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucmVxdWVzdChtZXRob2QsIHVybCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuIl19