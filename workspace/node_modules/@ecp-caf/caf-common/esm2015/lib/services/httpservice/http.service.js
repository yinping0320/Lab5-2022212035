/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { SessionService } from '../sessionservice/session.service';
import { CommonUtil } from '../../utilities/common.utilities';
export class HttpService {
    /**
     * @param {?} http
     * @param {?} sessionService
     */
    constructor(http, sessionService) {
        this.http = http;
        this.sessionService = sessionService;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    get(url) {
        return this.request('Get', url, this.setHeader({}));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    post(url, body) {
        return this.request('Post', url, this.setHeader({ body }));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    put(url, body) {
        return this.request('Put', url, this.setHeader({ body }));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    delete(url, body) {
        return this.request('Delete', url, this.setHeader({ body }));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    patch(url, body) {
        return this.request('Patch', url, this.setHeader({ body }));
    }
    /**
     * 默认用当前sessionid
     * @param {?} options
     * @param {?=} bizContextId
     * @return {?}
     */
    setHeader(options, bizContextId) {
        options.headers = {
            'Content-Type': 'application/json'
        };
        /** @type {?} */
        const commonVariables = CommonUtil.getCommonVariables();
        if (commonVariables) {
            /** @type {?} */
            const commonVariableKey = 'X-CAF-Runtime-CommonVariable';
            options.headers[commonVariableKey] = commonVariables;
        }
        if (bizContextId) {
            /** @type {?} */
            const bizContextKey = 'X-CAF-Runtime-Context';
            options.headers[bizContextKey] = bizContextId;
        }
        return options;
    }
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    request(method, url, options) {
        if (options.body) {
            if (typeof options.body !== 'string') {
                options.body = JSON.stringify(options.body);
            }
        }
        return this.http.request(method, url, options)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data;
        })));
    }
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    request$(method, url, options) {
        return this.http.request(method, url, options);
    }
}
HttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpService.ctorParameters = () => [
    { type: HttpClient },
    { type: SessionService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.sessionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY2FmLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9odHRwc2VydmljZS9odHRwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRzlELE1BQU0sT0FBTyxXQUFXOzs7OztJQUVwQixZQUNZLElBQWdCLEVBQ2hCLGNBQThCO1FBRDlCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0lBQ3RDLENBQUM7Ozs7O0lBRUwsR0FBRyxDQUFDLEdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7O0lBQ0QsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7Ozs7O0lBQ0QsTUFBTSxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQzs7Ozs7O0lBQ0QsS0FBSyxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Ozs7OztJQUdELFNBQVMsQ0FBQyxPQUFZLEVBQUUsWUFBcUI7UUFFekMsT0FBTyxDQUFDLE9BQU8sR0FBRztZQUNkLGNBQWMsRUFBRSxrQkFBa0I7U0FDckMsQ0FBQzs7Y0FDSSxlQUFlLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixFQUFFO1FBQ3ZELElBQUksZUFBZSxFQUFFOztrQkFDWCxpQkFBaUIsR0FBRyw4QkFBOEI7WUFDeEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQztTQUN4RDtRQUNELElBQUksWUFBWSxFQUFFOztrQkFDUixhQUFhLEdBQUcsdUJBQXVCO1lBQzdDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsWUFBWSxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQzs7Ozs7OztJQUVELE9BQU8sQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLE9BQVk7UUFDN0MsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUNsQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9DO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDO2FBQ3pDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDWixDQUFDOzs7Ozs7O0lBRUQsUUFBUSxDQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsT0FBWTtRQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBekRKLFVBQVU7Ozs7WUFORixVQUFVO1lBRVYsY0FBYzs7Ozs7OztJQVFmLDJCQUF3Qjs7Ozs7SUFDeEIscUNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2Vzc2lvbnNlcnZpY2Uvc2Vzc2lvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IENvbW1vblV0aWwgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvY29tbW9uLnV0aWxpdGllcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBIdHRwU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgICAgIHByaXZhdGUgc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIGdldCh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0dldCcsIHVybCwgdGhpcy5zZXRIZWFkZXIoe30pKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0KHVybDogc3RyaW5nLCBib2R5OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQb3N0JywgdXJsLCB0aGlzLnNldEhlYWRlcih7IGJvZHkgfSkpO1xyXG4gICAgfVxyXG4gICAgcHV0KHVybDogc3RyaW5nLCBib2R5OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQdXQnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHsgYm9keSB9KSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUodXJsOiBzdHJpbmcsIGJvZHk6IGFueSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RlbGV0ZScsIHVybCwgdGhpcy5zZXRIZWFkZXIoeyBib2R5IH0pKTtcclxuICAgIH1cclxuICAgIHBhdGNoKHVybDogc3RyaW5nLCBib2R5OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQYXRjaCcsIHVybCwgdGhpcy5zZXRIZWFkZXIoeyBib2R5IH0pKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6buY6K6k55So5b2T5YmNc2Vzc2lvbmlkICovXHJcbiAgICBzZXRIZWFkZXIob3B0aW9uczogYW55LCBiaXpDb250ZXh0SWQ/OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzID0ge1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjb21tb25WYXJpYWJsZXMgPSBDb21tb25VdGlsLmdldENvbW1vblZhcmlhYmxlcygpO1xyXG4gICAgICAgIGlmIChjb21tb25WYXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uVmFyaWFibGVLZXkgPSAnWC1DQUYtUnVudGltZS1Db21tb25WYXJpYWJsZSc7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVyc1tjb21tb25WYXJpYWJsZUtleV0gPSBjb21tb25WYXJpYWJsZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiaXpDb250ZXh0SWQpIHtcclxuICAgICAgICAgICAgY29uc3QgYml6Q29udGV4dEtleSA9ICdYLUNBRi1SdW50aW1lLUNvbnRleHQnO1xyXG4gICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbYml6Q29udGV4dEtleV0gPSBiaXpDb250ZXh0SWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcXVlc3QobWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCBvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5ib2R5KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ib2R5ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5ib2R5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3QobWV0aG9kLCB1cmwsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgIC5waXBlKG1hcCgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICByZXF1ZXN0JChtZXRob2Q6IHN0cmluZywgdXJsOiBzdHJpbmcsIG9wdGlvbnM6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zKTtcclxuICAgIH1cclxufVxyXG4iXX0=