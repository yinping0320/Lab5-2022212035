/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WindowVariableService } from '../window-service/window-variable.service';
import { CommonUtil } from '../../utilities/common.utilities';
export class SessionService {
    constructor() {
        this.SessionKey = 'session';
        this.SessionKeyForIde = 'sessionId';
        this.FuncSessionKey = 'FuncSession';
        window[this.FuncSessionKey] = window[this.FuncSessionKey] || new Map();
        this.windowService = new WindowVariableService();
    }
    /**
     * 获取用户sessionid
     * @return {?}
     */
    getUserSessionId() {
        return localStorage.getItem(this.SessionKey) || '';
    }
    /**
     * 获取当前session 之前依赖router的方式改掉
     * 从url hash中获取query
     * N 栈为funcSession
     * J 栈为formToken
     * @param {?=} tabId
     * @return {?}
     */
    getCurrentSeesionId(tabId) {
        if (!!tabId) {
            /** @type {?} */
            const tab = this.getTabArray().find((/**
             * @param {?} t
             * @return {?}
             */
            t => t.id === tabId));
            return tab && (tab.formToken || tab.sessionId);
        }
        /** @type {?} */
        let ssid = CommonUtil.getQueryStringFromHash('cvft');
        if (!ssid) {
            /** @type {?} */
            const pageId = CommonUtil.getQueryStringFromHash('tabId');
            /** @type {?} */
            const tab = this.getTabArray().find((/**
             * @param {?} t
             * @return {?}
             */
            t => t.id === pageId));
            if (tab) {
                ssid = (tab.formToken || tab.sessionId);
            }
        }
        return ssid || this.getUserSessionId();
    }
    /**
     *
     * 获取功能的session(功能重复打开，会存在多个)
     * (1912 框架移除funcSession，接口作废)
     * @param {?} funcId
     * @return {?}
     */
    getFuncSessionId(funcId) {
        /** @type {?} */
        const ssMap = new Map();
        /** @type {?} */
        const tabs = this.getTabArray().filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.funcId === funcId));
        if (!tabs || tabs.length === 0) {
            return ssMap;
        }
        // tslint:disable-next-line: prefer-for-of
        for (let i = 0; i < tabs.length; i++) {
            ssMap.set(tabs[i].tabId, tabs[i].sessionId);
        }
        return ssMap;
    }
    /**
     * 获取应用session（应用重复打开会存在多个）
     * (1912 框架移除funcSession，接口作废)
     * @param {?} appId
     * @param {?} appEntrance
     * @return {?}
     */
    getAppSessionId(appId, appEntrance) {
        /** @type {?} */
        const ssMap = new Map();
        /** @type {?} */
        const tabs = this.getTabArray().filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.appId === appId && t.appEntrance === appEntrance));
        if (!tabs || tabs.length === 0) {
            return ssMap;
        }
        // tslint:disable-next-line: prefer-for-of
        for (let i = 0; i < tabs.length; i++) {
            ssMap.set(tabs[i].tabId, tabs[i].sessionId);
        }
        return ssMap;
    }
    /**
     * 设置用户sessionid
     * 只是用于N版
     * @param {?} ssid
     * @return {?}
     */
    setUserSessionId(ssid) {
        // todo框架修改之后，要和IDE同步
        localStorage.setItem(this.SessionKey, ssid);
        localStorage.setItem(this.SessionKeyForIde, ssid);
    }
    /**
     * 缓存当前功能的sessionid
     * (1912 框架移除funcSession，接口作废)
     * @param {?} key
     * @param {?} ssid
     * @return {?}
     */
    setFuncSessionId(key, ssid) {
        this.getFuncSessionCache().set(key, ssid);
    }
    /**
     * 缓存当前应用的sessionId
     * (1912 框架移除funcSession，接口作废)
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} ssid
     * @return {?}
     */
    setAppSessionId(appId, appEntrance, ssid) {
        this.setFuncSessionId(`${appId}#${appEntrance}`, ssid);
    }
    /**
     * @private
     * @return {?}
     */
    getFuncSessionCache() {
        /** @type {?} */
        const sessionValue = this.windowService.getVariableFromWindow(this.FuncSessionKey);
        return (/** @type {?} */ (sessionValue));
    }
    /**
     * @private
     * @return {?}
     */
    getTabArray() {
        /** @type {?} */
        const iframeTabarray = 'iframeTabarray';
        /** @type {?} */
        const iframArr = this.windowService.getArrayFromWindow(iframeTabarray);
        return iframArr;
    }
}
SessionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SessionService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.SessionKey;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.SessionKeyForIde;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.FuncSessionKey;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.windowService;
}
//# sourceMappingURL=data:application/json;base64,