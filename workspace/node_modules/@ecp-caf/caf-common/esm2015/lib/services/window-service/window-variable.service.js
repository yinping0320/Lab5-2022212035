/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class WindowVariableService {
    constructor() { }
    /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空的自定义变量
     * @param {?} key
     * @return {?}
     */
    getVariableFromWindow(key) {
        /** @type {?} */
        const topWin = this.getTopWindow();
        /** @type {?} */
        let frmWin = window;
        while (!frmWin[key] && frmWin !== topWin) {
            frmWin = frmWin.parent;
        }
        return frmWin[key];
    }
    /**
     * 从当前window遍历到框架顶级window
     * 并获取一个非空且含有元素的自定义数组变量
     * @param {?} key
     * @return {?}
     */
    getArrayFromWindow(key) {
        /** @type {?} */
        const topWin = this.getTopWindow();
        /** @type {?} */
        let frmWin = window;
        while ((!frmWin[key] || frmWin[key].length === 0) && frmWin !== topWin) {
            frmWin = frmWin.parent;
        }
        return (/** @type {?} */ (frmWin[key])) || [];
    }
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @return {?}
     */
    getTopWindow() {
        /** @type {?} */
        let curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    }
}
WindowVariableService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WindowVariableService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LXZhcmlhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jYWYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3dpbmRvdy1zZXJ2aWNlL3dpbmRvdy12YXJpYWJsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sT0FBTyxxQkFBcUI7SUFFOUIsZ0JBQWdCLENBQUM7Ozs7Ozs7SUFNVixxQkFBcUIsQ0FBQyxHQUFXOztjQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRTs7WUFDOUIsTUFBTSxHQUFXLE1BQU07UUFDM0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3RDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7Ozs7OztJQU1NLGtCQUFrQixDQUFDLEdBQVc7O2NBQzNCLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFOztZQUM5QixNQUFNLEdBQVcsTUFBTTtRQUMzQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3BFLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxtQkFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVMsSUFBSSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Ozs7O0lBTU0sWUFBWTs7WUFDWCxNQUFNLEdBQVcsTUFBTSxDQUFDLElBQUk7UUFDaEMsSUFBSTtZQUNBLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUM3RCxJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRTtvQkFDMUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7aUJBQzFCO3FCQUFNO29CQUNILE1BQU07aUJBQ1Q7YUFDSjtTQUNKO1FBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRztRQUNmLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7OztZQS9DSixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2luZG93VmFyaWFibGVTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LuO5b2T5YmNd2luZG936YGN5Y6G5Yiw5qGG5p626aG257qnd2luZG93XHJcbiAgICAgKiDlubbojrflj5bkuIDkuKrpnZ7nqbrnmoToh6rlrprkuYnlj5jph49cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFZhcmlhYmxlRnJvbVdpbmRvdyhrZXk6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgdG9wV2luID0gdGhpcy5nZXRUb3BXaW5kb3coKTtcclxuICAgICAgICBsZXQgZnJtV2luOiBXaW5kb3cgPSB3aW5kb3c7XHJcbiAgICAgICAgd2hpbGUgKCFmcm1XaW5ba2V5XSAmJiBmcm1XaW4gIT09IHRvcFdpbikge1xyXG4gICAgICAgICAgICBmcm1XaW4gPSBmcm1XaW4ucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnJtV2luW2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku47lvZPliY13aW5kb3fpgY3ljobliLDmoYbmnrbpobbnuqd3aW5kb3dcclxuICAgICAqIOW5tuiOt+WPluS4gOS4qumdnuepuuS4lOWQq+acieWFg+e0oOeahOiHquWumuS5ieaVsOe7hOWPmOmHj1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0QXJyYXlGcm9tV2luZG93KGtleTogc3RyaW5nKTogYW55W10ge1xyXG4gICAgICAgIGNvbnN0IHRvcFdpbiA9IHRoaXMuZ2V0VG9wV2luZG93KCk7XHJcbiAgICAgICAgbGV0IGZybVdpbjogV2luZG93ID0gd2luZG93O1xyXG4gICAgICAgIHdoaWxlICgoIWZybVdpbltrZXldIHx8IGZybVdpbltrZXldLmxlbmd0aCA9PT0gMCkgJiYgZnJtV2luICE9PSB0b3BXaW4pIHtcclxuICAgICAgICAgICAgZnJtV2luID0gZnJtV2luLnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZybVdpbltrZXldIGFzIGFueVtdIHx8IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5qGG5p6255qE6aG257qnd2luZG93XHJcbiAgICAgKiDov5vooYzot6jln5/lsIHoo4VcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFRvcFdpbmRvdygpOiBXaW5kb3cge1xyXG4gICAgICAgIGxldCBjdXJXaW46IFdpbmRvdyA9IHdpbmRvdy5zZWxmO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJXaW4ubG9jYXRpb24ub3JpZ2luID09PSBjdXJXaW4ucGFyZW50LmxvY2F0aW9uLm9yaWdpbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cldpbiAhPT0gY3VyV2luLnBhcmVudCAmJiAhKGN1cldpbiBhcyBhbnkpLmlzUlRGVG9wV2luKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyV2luID0gY3VyV2luLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuICAgICAgICByZXR1cm4gY3VyV2luO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==