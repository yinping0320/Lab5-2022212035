/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WindowVariableService } from '../window-service/window-variable.service';
import * as i0 from "@angular/core";
/**
 * @record
 */
function TabEntity() { }
if (false) {
    /** @type {?} */
    TabEntity.prototype.tabId;
    /** @type {?|undefined} */
    TabEntity.prototype.code;
    /** @type {?|undefined} */
    TabEntity.prototype.name;
    /** @type {?} */
    TabEntity.prototype.appType;
    /** @type {?} */
    TabEntity.prototype.funcId;
    /** @type {?} */
    TabEntity.prototype.appId;
    /** @type {?} */
    TabEntity.prototype.appEntrance;
}
export class TabEntityService {
    constructor() {
        this.nameSpace = 'gsp-rtf-tabarr-service';
        this.tabarrayKey = 'tab-arry';
        this.windowService = new WindowVariableService();
        this.topWin = this.windowService.getTopWindow();
        this.topWin[this.nameSpace] = this.topWin[this.nameSpace] || {};
    }
    /**
     * @param {?} tabs
     * @return {?}
     */
    setTabs(tabs) {
        if (!tabs || tabs.length === 0) {
            return;
        }
        /** @type {?} */
        const copy = this.deepClone(tabs);
        this.topWin[this.nameSpace][this.tabarrayKey] = copy;
    }
    /**
     * @return {?}
     */
    getTabs() {
        /** @type {?} */
        const tabs = this.topWin[this.nameSpace][this.tabarrayKey] || [];
        if (!tabs || tabs.length === 0) {
            return tabs;
        }
        return this.deepClone(tabs);
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    setActiveTab(tab) {
        /** @type {?} */
        const tabs = this.getTabs();
        /** @type {?} */
        const activeOld = tabs.find((/**
         * @param {?} t
         * @return {?}
         */
        t => t.active));
        if (!tab) {
            if (!!activeOld) {
                activeOld.active = false;
            }
            return;
        }
        if (tabs.length > 0) {
            /** @type {?} */
            let activeNew = tabs.find((/**
             * @param {?} t
             * @return {?}
             */
            t => t.id === tab.id));
            if (!activeNew) {
                activeNew = tab;
                if (!!activeOld) {
                    activeOld.active = false;
                }
                activeNew.active = true;
                tabs.push(activeNew);
            }
            else {
                if (!!activeOld) {
                    if (activeOld === activeNew) {
                        return;
                    }
                    else {
                        activeOld.active = false;
                        activeNew.active = true;
                    }
                }
                else {
                    activeNew.active = true;
                }
            }
            this.setTabs(tabs);
        }
    }
    /**
     * @return {?}
     */
    getActiveTab() {
        /** @type {?} */
        const tabs = this.getTabs();
        /** @type {?} */
        const activeTab = tabs && tabs.find((/**
         * @param {?} t
         * @return {?}
         */
        t => t.active));
        /** @type {?} */
        const res = activeTab && {
            tabId: activeTab.id,
            appType: activeTab.appType,
            funcId: activeTab.funcId,
            appId: activeTab.appId,
            appEntrance: activeTab.appEntrance,
            name: activeTab.FuncName
        };
        return res;
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    deepClone(target) {
        /** @type {?} */
        let result;
        if (typeof target === 'object') {
            if (Array.isArray(target)) {
                result = [];
                for (let i in target) {
                    result.push(this.deepClone(target[i]));
                }
            }
            else if (target === null) {
                result = null;
            }
            else if (target.constructor === RegExp) {
                result = target;
            }
            else {
                result = {};
                for (let i in target) {
                    result[i] = this.deepClone(target[i]);
                }
            }
        }
        else {
            result = target;
        }
        return result;
    }
}
TabEntityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TabEntityService.ctorParameters = () => [];
/** @nocollapse */ TabEntityService.ngInjectableDef = i0.defineInjectable({ factory: function TabEntityService_Factory() { return new TabEntityService(); }, token: TabEntityService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.nameSpace;
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.tabarrayKey;
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.windowService;
    /**
     * @type {?}
     * @private
     */
    TabEntityService.prototype.topWin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWVudGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY2FmLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90YWJzZXJ2aWNlL3RhYi1lbnRpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7Ozs7QUFFbEYsd0JBUUM7OztJQVBHLDBCQUFjOztJQUNkLHlCQUFjOztJQUNkLHlCQUFjOztJQUNkLDRCQUFnQjs7SUFDaEIsMkJBQWU7O0lBQ2YsMEJBQWM7O0lBQ2QsZ0NBQW9COztBQU14QixNQUFNLE9BQU8sZ0JBQWdCO0lBUXpCO1FBTlEsY0FBUyxHQUFHLHdCQUF3QixDQUFDO1FBQ3JDLGdCQUFXLEdBQUcsVUFBVSxDQUFDO1FBTTdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEUsQ0FBQzs7Ozs7SUFFTSxPQUFPLENBQUMsSUFBVztRQUN0QixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVCLE9BQU87U0FDVjs7Y0FDSyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN6RCxDQUFDOzs7O0lBRU0sT0FBTzs7Y0FDSixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7UUFDaEUsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRU0sWUFBWSxDQUFDLEdBQVE7O2NBQ2xCLElBQUksR0FBVSxJQUFJLENBQUMsT0FBTyxFQUFFOztjQUM1QixTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUM7UUFDMUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRTtnQkFDYixTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUM1QjtZQUNELE9BQU87U0FDVjtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2dCQUNiLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxFQUFDO1lBQy9DLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ1osU0FBUyxHQUFHLEdBQUcsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFO29CQUNiLFNBQVMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2lCQUM1QjtnQkFDRCxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN4QjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUU7b0JBQ2IsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO3dCQUN6QixPQUFPO3FCQUNWO3lCQUFNO3dCQUNILFNBQVMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO3dCQUN6QixTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztxQkFDM0I7aUJBQ0o7cUJBQU07b0JBQ0gsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7aUJBQzNCO2FBQ0o7WUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQzs7OztJQUVNLFlBQVk7O2NBQ1QsSUFBSSxHQUFVLElBQUksQ0FBQyxPQUFPLEVBQUU7O2NBQzVCLFNBQVMsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUM7O2NBQzVDLEdBQUcsR0FBYyxTQUFTLElBQUk7WUFDaEMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQ25CLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTztZQUMxQixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07WUFDeEIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxLQUFLO1lBQ3RCLFdBQVcsRUFBRSxTQUFTLENBQUMsV0FBVztZQUNsQyxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVE7U0FDM0I7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVPLFNBQVMsQ0FBQyxNQUFXOztZQUNyQixNQUFNO1FBQ1YsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN2QixNQUFNLEdBQUcsRUFBRSxDQUFDO2dCQUNaLEtBQUssSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFO29CQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtpQkFDekM7YUFDSjtpQkFBTSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7Z0JBQ3hCLE1BQU0sR0FBRyxJQUFJLENBQUM7YUFDakI7aUJBQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxLQUFLLE1BQU0sRUFBRTtnQkFDdEMsTUFBTSxHQUFHLE1BQU0sQ0FBQzthQUNuQjtpQkFBTTtnQkFDSCxNQUFNLEdBQUcsRUFBRSxDQUFDO2dCQUNaLEtBQUssSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFO29CQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekM7YUFDSjtTQUNKO2FBQU07WUFDSCxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7O1lBeEdKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7OztJQUdHLHFDQUE2Qzs7Ozs7SUFDN0MsdUNBQWlDOzs7OztJQUNqQyx5Q0FBNkM7Ozs7O0lBQzdDLGtDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2luZG93VmFyaWFibGVTZXJ2aWNlIH0gZnJvbSAnLi4vd2luZG93LXNlcnZpY2Uvd2luZG93LXZhcmlhYmxlLnNlcnZpY2UnO1xyXG5cclxuaW50ZXJmYWNlIFRhYkVudGl0eSB7XHJcbiAgICB0YWJJZDogc3RyaW5nO1xyXG4gICAgY29kZT86IHN0cmluZztcclxuICAgIG5hbWU/OiBzdHJpbmc7XHJcbiAgICBhcHBUeXBlOiBzdHJpbmc7XHJcbiAgICBmdW5jSWQ6IHN0cmluZztcclxuICAgIGFwcElkOiBzdHJpbmc7XHJcbiAgICBhcHBFbnRyYW5jZTogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYkVudGl0eVNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgbmFtZVNwYWNlID0gJ2dzcC1ydGYtdGFiYXJyLXNlcnZpY2UnO1xyXG4gICAgcHJpdmF0ZSB0YWJhcnJheUtleSA9ICd0YWItYXJyeSc7XHJcbiAgICBwcml2YXRlIHdpbmRvd1NlcnZpY2U6IFdpbmRvd1ZhcmlhYmxlU2VydmljZTtcclxuICAgIHByaXZhdGUgdG9wV2luOiBXaW5kb3c7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMud2luZG93U2VydmljZSA9IG5ldyBXaW5kb3dWYXJpYWJsZVNlcnZpY2UoKTtcclxuICAgICAgICB0aGlzLnRvcFdpbiA9IHRoaXMud2luZG93U2VydmljZS5nZXRUb3BXaW5kb3coKTtcclxuICAgICAgICB0aGlzLnRvcFdpblt0aGlzLm5hbWVTcGFjZV0gPSB0aGlzLnRvcFdpblt0aGlzLm5hbWVTcGFjZV0gfHwge307XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFRhYnModGFiczogYW55W10pIHtcclxuICAgICAgICBpZiAoIXRhYnMgfHwgdGFicy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb3B5ID0gdGhpcy5kZWVwQ2xvbmUodGFicyk7XHJcbiAgICAgICAgdGhpcy50b3BXaW5bdGhpcy5uYW1lU3BhY2VdW3RoaXMudGFiYXJyYXlLZXldID0gY29weTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGFicygpOiBhbnlbXSB7XHJcbiAgICAgICAgY29uc3QgdGFicyA9IHRoaXMudG9wV2luW3RoaXMubmFtZVNwYWNlXVt0aGlzLnRhYmFycmF5S2V5XSB8fCBbXTtcclxuICAgICAgICBpZiAoIXRhYnMgfHwgdGFicy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhYnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZXBDbG9uZSh0YWJzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0QWN0aXZlVGFiKHRhYjogYW55KSB7XHJcbiAgICAgICAgY29uc3QgdGFiczogYW55W10gPSB0aGlzLmdldFRhYnMoKTtcclxuICAgICAgICBjb25zdCBhY3RpdmVPbGQgPSB0YWJzLmZpbmQodCA9PiB0LmFjdGl2ZSk7XHJcbiAgICAgICAgaWYgKCF0YWIpIHtcclxuICAgICAgICAgICAgaWYgKCEhYWN0aXZlT2xkKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVPbGQuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhYnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgYWN0aXZlTmV3ID0gdGFicy5maW5kKHQgPT4gdC5pZCA9PT0gdGFiLmlkKTtcclxuICAgICAgICAgICAgaWYgKCFhY3RpdmVOZXcpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZU5ldyA9IHRhYjtcclxuICAgICAgICAgICAgICAgIGlmICghIWFjdGl2ZU9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZU9sZC5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFjdGl2ZU5ldy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGFicy5wdXNoKGFjdGl2ZU5ldyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISFhY3RpdmVPbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlT2xkID09PSBhY3RpdmVOZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZU9sZC5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlTmV3LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVOZXcuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldFRhYnModGFicyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRBY3RpdmVUYWIoKTogYW55IHtcclxuICAgICAgICBjb25zdCB0YWJzOiBhbnlbXSA9IHRoaXMuZ2V0VGFicygpO1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZVRhYiA9IHRhYnMgJiYgdGFicy5maW5kKHQgPT4gdC5hY3RpdmUpO1xyXG4gICAgICAgIGNvbnN0IHJlczogVGFiRW50aXR5ID0gYWN0aXZlVGFiICYmIHtcclxuICAgICAgICAgICAgdGFiSWQ6IGFjdGl2ZVRhYi5pZCxcclxuICAgICAgICAgICAgYXBwVHlwZTogYWN0aXZlVGFiLmFwcFR5cGUsXHJcbiAgICAgICAgICAgIGZ1bmNJZDogYWN0aXZlVGFiLmZ1bmNJZCxcclxuICAgICAgICAgICAgYXBwSWQ6IGFjdGl2ZVRhYi5hcHBJZCxcclxuICAgICAgICAgICAgYXBwRW50cmFuY2U6IGFjdGl2ZVRhYi5hcHBFbnRyYW5jZSxcclxuICAgICAgICAgICAgbmFtZTogYWN0aXZlVGFiLkZ1bmNOYW1lXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGVlcENsb25lKHRhcmdldDogYW55KTogYW55IHtcclxuICAgICAgICBsZXQgcmVzdWx0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5kZWVwQ2xvbmUodGFyZ2V0W2ldKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRhcmdldDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLmRlZXBDbG9uZSh0YXJnZXRbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==