/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class CommonUtil {
    /**
     * @param {?} paraName
     * @return {?}
     */
    static getQueryString(paraName) {
        /** @type {?} */
        const reg = new RegExp('(^|&)' + paraName + '=([^&]*)(&|$)', 'i');
        /** @type {?} */
        const r = window.location.search.substr(1).match(reg);
        /** @type {?} */
        let paraValue = '';
        if (r) {
            paraValue = r[2];
        }
        return paraValue;
    }
    /**
     * @param {?} paraName
     * @return {?}
     */
    static getQueryStringFromHash(paraName) {
        /** @type {?} */
        const url = window.location.hash;
        /** @type {?} */
        const arrObj = url && url.split('?');
        if (arrObj && arrObj.length > 1) {
            /** @type {?} */
            const arrPara = arrObj[1].split('&');
            if (!arrPara) {
                return '';
            }
            /** @type {?} */
            let arr;
            // tslint:disable-next-line: prefer-for-of
            for (let i = 0; i < arrPara.length; i++) {
                arr = arrPara[i].split('=');
                if (arr != null && arr[0] === paraName) {
                    return arr[1];
                }
            }
            return '';
        }
        else {
            return '';
        }
    }
    /**
     * @return {?}
     */
    static getCookieMapFromDoc() {
        /** @type {?} */
        const cookieArr = document.cookie && document.cookie.split(';');
        /** @type {?} */
        const cookieMap = new Map();
        if (cookieArr) {
            cookieArr.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const params = item.split('=');
                cookieMap.set(params[0], params[1]);
            }));
        }
        return cookieMap;
    }
    /**
     * 获取当前window 中funcId appId等公共变量
     * 返回结果格式：funcId=xx&appType=xxx&
     * @return {?}
     */
    static getCommonVariables() {
        return CommonUtil.getQueryStringFromHash('cvft');
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    static matchCommonVariableKey(item) {
        /** @type {?} */
        const itemArr = item.split('=');
        if (!itemArr || itemArr.length !== 2 || !itemArr[0]) {
            return false;
        }
        switch (itemArr[0].toLowerCase()) {
            case 'funcid': return true;
            case 'appid': return true;
            case 'appentrance': return true;
            case 'apptype': return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLnV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NhZi1jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXRpbGl0aWVzL2NvbW1vbi51dGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE1BQU0sT0FBTyxVQUFVOzs7OztJQUVaLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBZ0I7O2NBQ25DLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxHQUFHLGVBQWUsRUFBRSxHQUFHLENBQUM7O2NBQzNELENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7WUFDakQsU0FBUyxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDLEVBQUU7WUFDSCxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsUUFBZ0I7O2NBQzNDLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUk7O2NBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDcEMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2tCQUN2QixPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDcEMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDVixPQUFPLEVBQUUsQ0FBQzthQUNiOztnQkFDRyxHQUFVO1lBQ2QsMENBQTBDO1lBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNyQyxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNqQjthQUNKO1lBQ0QsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0gsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7Ozs7SUFFTSxNQUFNLENBQUMsbUJBQW1COztjQUN2QixTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O2NBQ3pELFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBa0I7UUFDM0MsSUFBSSxTQUFTLEVBQUU7WUFDWCxTQUFTLENBQUMsT0FBTzs7OztZQUFDLElBQUksQ0FBQyxFQUFFOztzQkFDZixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBQzlCLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOzs7Ozs7SUFNTSxNQUFNLENBQUMsa0JBQWtCO1FBQzVCLE9BQU8sVUFBVSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7OztJQUVPLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFZOztjQUN4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDL0IsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqRCxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELFFBQVEsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQzlCLEtBQUssUUFBUSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7WUFDM0IsS0FBSyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztZQUMxQixLQUFLLGFBQWEsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1lBQ2hDLEtBQUssU0FBUyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7U0FDL0I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNsYXNzIENvbW1vblV0aWwge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UXVlcnlTdHJpbmcocGFyYU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoJyhefCYpJyArIHBhcmFOYW1lICsgJz0oW14mXSopKCZ8JCknLCAnaScpO1xyXG4gICAgICAgIGNvbnN0IHIgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKS5tYXRjaChyZWcpO1xyXG4gICAgICAgIGxldCBwYXJhVmFsdWUgPSAnJztcclxuICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICBwYXJhVmFsdWUgPSByWzJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyYVZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UXVlcnlTdHJpbmdGcm9tSGFzaChwYXJhTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgY29uc3QgYXJyT2JqID0gdXJsICYmIHVybC5zcGxpdCgnPycpO1xyXG4gICAgICAgIGlmIChhcnJPYmogJiYgYXJyT2JqLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJyUGFyYSA9IGFyck9ialsxXS5zcGxpdCgnJicpO1xyXG4gICAgICAgICAgICBpZiAoIWFyclBhcmEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgYXJyOiBhbnlbXTtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBwcmVmZXItZm9yLW9mXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyUGFyYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYXJyID0gYXJyUGFyYVtpXS5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyciAhPSBudWxsICYmIGFyclswXSA9PT0gcGFyYU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyWzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Q29va2llTWFwRnJvbURvYygpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCBjb29raWVBcnIgPSBkb2N1bWVudC5jb29raWUgJiYgZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgY29uc3QgY29va2llTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuICAgICAgICBpZiAoY29va2llQXJyKSB7XHJcbiAgICAgICAgICAgIGNvb2tpZUFyci5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gaXRlbS5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICAgICAgY29va2llTWFwLnNldChwYXJhbXNbMF0sIHBhcmFtc1sxXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29va2llTWFwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5b2T5YmNd2luZG93IOS4rWZ1bmNJZCBhcHBJZOetieWFrOWFseWPmOmHj1xyXG4gICAgICog6L+U5Zue57uT5p6c5qC85byP77yaZnVuY0lkPXh4JmFwcFR5cGU9eHh4JlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldENvbW1vblZhcmlhYmxlcygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBDb21tb25VdGlsLmdldFF1ZXJ5U3RyaW5nRnJvbUhhc2goJ2N2ZnQnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBtYXRjaENvbW1vblZhcmlhYmxlS2V5KGl0ZW06IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1BcnIgPSBpdGVtLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgaWYgKCFpdGVtQXJyIHx8IGl0ZW1BcnIubGVuZ3RoICE9PSAyIHx8ICFpdGVtQXJyWzBdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChpdGVtQXJyWzBdLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnZnVuY2lkJzogcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FwcGlkJzogcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FwcGVudHJhbmNlJzogcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FwcHR5cGUnOiByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==