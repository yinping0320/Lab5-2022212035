/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CacheService } from './cache/services/cache.service';
import { CacheStorageAbstract } from './cache/services/storage/cache.storage.abstract.service';
import { CacheMemoryStorage } from './cache/services/storage/memory/cache.memory.service';
import { HttpService } from './services/httpservice/http.service';
import { SessionService } from './services/sessionservice/session.service';
import { LanguageService } from './services/languageservice/language.service';
import { WindowVariableService } from './services/window-service/window-variable.service';
import { TabEntityService } from './services/tabservice/tab-entity.service';
import { CookieService } from 'ngx-cookie-service';
export class FrmCommonModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FrmCommonModule,
            providers: [
                CacheService,
                { provide: CacheStorageAbstract, useClass: CacheMemoryStorage },
                HttpService,
                SessionService,
                LanguageService,
                WindowVariableService,
                TabEntityService,
                CookieService
            ]
        };
    }
}
FrmCommonModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [],
                exports: [],
                providers: [],
                entryComponents: []
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FmLmNvbW1vbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jYWYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2NhZi5jb21tb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQy9GLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQWFuRCxNQUFNLE9BQU8sZUFBZTs7OztJQUN4QixNQUFNLENBQUMsT0FBTztRQUVWLE9BQU87WUFDSCxRQUFRLEVBQUUsZUFBZTtZQUN6QixTQUFTLEVBQUU7Z0JBQ1AsWUFBWTtnQkFDWixFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQy9ELFdBQVc7Z0JBQ1gsY0FBYztnQkFDZCxlQUFlO2dCQUNmLHFCQUFxQjtnQkFDckIsZ0JBQWdCO2dCQUNoQixhQUFhO2FBQ2hCO1NBQ0osQ0FBQztJQUNOLENBQUM7OztZQTFCSixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLFlBQVk7aUJBQ2Y7Z0JBQ0QsWUFBWSxFQUFFLEVBQ2I7Z0JBQ0QsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsU0FBUyxFQUFFLEVBQUU7Z0JBQ2IsZUFBZSxFQUFFLEVBQUU7YUFDdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2NhY2hlL3NlcnZpY2VzL2NhY2hlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDYWNoZVN0b3JhZ2VBYnN0cmFjdCB9IGZyb20gJy4vY2FjaGUvc2VydmljZXMvc3RvcmFnZS9jYWNoZS5zdG9yYWdlLmFic3RyYWN0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDYWNoZU1lbW9yeVN0b3JhZ2UgfSBmcm9tICcuL2NhY2hlL3NlcnZpY2VzL3N0b3JhZ2UvbWVtb3J5L2NhY2hlLm1lbW9yeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2h0dHBzZXJ2aWNlL2h0dHAuc2VydmljZSc7XHJcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zZXNzaW9uc2VydmljZS9zZXNzaW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2xhbmd1YWdlc2VydmljZS9sYW5ndWFnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgV2luZG93VmFyaWFibGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy93aW5kb3ctc2VydmljZS93aW5kb3ctdmFyaWFibGUuc2VydmljZSc7XHJcbmltcG9ydCB7IFRhYkVudGl0eVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3RhYnNlcnZpY2UvdGFiLWVudGl0eS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gJ25neC1jb29raWUtc2VydmljZSc7XHJcblxyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXSxcclxuICAgIHByb3ZpZGVyczogW10sXHJcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGcm1Db21tb25Nb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBGcm1Db21tb25Nb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgQ2FjaGVTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBDYWNoZVN0b3JhZ2VBYnN0cmFjdCwgdXNlQ2xhc3M6IENhY2hlTWVtb3J5U3RvcmFnZSB9LFxyXG4gICAgICAgICAgICAgICAgSHR0cFNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBTZXNzaW9uU2VydmljZSxcclxuICAgICAgICAgICAgICAgIExhbmd1YWdlU2VydmljZSxcclxuICAgICAgICAgICAgICAgIFdpbmRvd1ZhcmlhYmxlU2VydmljZSxcclxuICAgICAgICAgICAgICAgIFRhYkVudGl0eVNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBDb29raWVTZXJ2aWNlXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==