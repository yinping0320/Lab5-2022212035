/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CacheStorageAbstract } from '../cache.storage.abstract.service';
import { WindowVariableService } from '../../../../services/window-service/window-variable.service';
/**
 * Service for storing data in local storage
 */
export class CacheMemoryStorage extends CacheStorageAbstract {
    constructor() {
        super(...arguments);
        this._data = {};
        this.windowSvc = new WindowVariableService();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        /** @type {?} */
        const cache = this.getGlobleCache(key);
        if (cache) {
            this._data[key] = cache;
        }
        return this._data[key] ? this._data[key] : null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this.setGlobleCache(key, value);
        this._data[key] = value;
        return true;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        delete this._data[key];
    }
    /**
     * @return {?}
     */
    clear() {
        this._data = [];
    }
    /**
     * @return {?}
     */
    type() {
        return 2 /* MEMORY */;
    }
    /**
     * @return {?}
     */
    isEnabled() {
        return true;
    }
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setGlobleCache(key, value) {
        /** @type {?} */
        const topWindow = this.windowSvc.getTopWindow();
        try {
            if (topWindow.name) {
                /** @type {?} */
                let exist = false;
                /** @type {?} */
                const ary = topWindow.name.split('&|&');
                // tslint:disable-next-line: prefer-for-of
                for (let i = 0; i < ary.length; i++) {
                    if (ary[i]) {
                        /** @type {?} */
                        const obj = JSON.parse(ary[i]);
                        if (obj[key]) {
                            topWindow.name = topWindow.name.replace(ary[i], this.serializeData(key, value));
                            exist = true;
                            break;
                        }
                    }
                }
                if (!exist) {
                    topWindow.name += '&|&' + this.serializeData(key, value);
                }
            }
            else {
                topWindow.name = this.serializeData(key, value);
            }
        }
        catch (_a) {
            topWindow.name = '';
        }
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getGlobleCache(key) {
        /** @type {?} */
        const topWindow = this.windowSvc.getTopWindow();
        try {
            /** @type {?} */
            let result;
            if (topWindow.name) {
                if (topWindow.name.indexOf('&|&') >= 0) {
                    /** @type {?} */
                    const ary = topWindow.name.split('&|&');
                    for (let i = 0; i < ary.length; i++) {
                        if (ary[i]) {
                            /** @type {?} */
                            const obj = JSON.parse(ary[i]);
                            if (obj[key]) {
                                result = obj[key].value;
                                if (i === 0) {
                                    topWindow.name = topWindow.name.replace(ary[i] + '&|&', '');
                                }
                                else {
                                    topWindow.name = topWindow.name.replace('&|&' + ary[i], '');
                                }
                                break;
                            }
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const obj = JSON.parse(topWindow.name);
                    if (obj[key]) {
                        result = obj[key].value;
                        topWindow.name = '';
                    }
                }
            }
            return result;
        }
        catch (_a) {
            topWindow.name = '';
            return null;
        }
    }
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    serializeData(key, value) {
        /** @type {?} */
        const obj = {};
        obj[key] = {
            value
        };
        return JSON.stringify(obj);
    }
}
CacheMemoryStorage.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CacheMemoryStorage.prototype._data;
    /**
     * @type {?}
     * @private
     */
    CacheMemoryStorage.prototype.windowSvc;
}
//# sourceMappingURL=data:application/json;base64,