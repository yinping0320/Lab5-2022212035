{"version":3,"sources":["ng://@ecp-caf/caf-common/lib/common.module.ts","ng://@ecp-caf/caf-common/lib/cache/services/storage/cache.storage.abstract.service.ts","node_modules/tslib/tslib.es6.js","ng://@ecp-caf/caf-common/lib/cache/services/storage/sessionstorage/cache.sessionstorage.service.ts","ng://@ecp-caf/caf-common/lib/cache/services/storage/localstorage/cache.localstorage.service.ts","ng://@ecp-caf/caf-common/lib/services/window-service/window-variable.service.ts","ng://@ecp-caf/caf-common/lib/cache/services/storage/memory/cache.memory.service.ts","ng://@ecp-caf/caf-common/lib/cache/services/cache.service.ts","ng://@ecp-caf/caf-common/lib/utilities/common.utilities.ts","ng://@ecp-caf/caf-common/lib/services/sessionservice/session.service.ts","ng://@ecp-caf/caf-common/lib/services/httpservice/http.service.ts","ng://@ecp-caf/caf-common/lib/services/languageservice/language.service.ts","ng://@ecp-caf/caf-common/lib/services/tabservice/tab-entity.service.ts","ng://@ecp-caf/caf-common/lib/caf.common.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [\r\n  ],\r\n  exports: [],\r\n  providers: [ ],\r\n  entryComponents: []\r\n})\r\nexport class CommonSharedModule {}\r\n","import { CacheStoragesEnum } from '../../enums/cache.storages.enum';\r\nimport { StorageValueInterface } from '../../interfaces/storage.value.interface';\r\n\r\n/**\r\n * Abstract cache storage\r\n */\r\nexport abstract class CacheStorageAbstract {\r\n\r\n    /**\r\n     * Get item from storage\r\n     * @param key\r\n     */\r\n    public abstract getItem(key: string): StorageValueInterface;\r\n\r\n    /**\r\n     * Set item to storage\r\n     * @param key\r\n     * @param value\r\n     */\r\n    public abstract setItem(key: string, value: StorageValueInterface): boolean;\r\n\r\n    /**\r\n     * Remove item from storage\r\n     * @param key\r\n     */\r\n    public abstract removeItem(key: string): void;\r\n\r\n    /**\r\n     * Clear item in storage\r\n     */\r\n    public abstract clear(): void;\r\n\r\n    /**\r\n     * Get current storage type\r\n     */\r\n    public abstract type(): CacheStoragesEnum;\r\n\r\n    /**\r\n     * Check if storage is enabled\r\n     */\r\n    public abstract isEnabled(): boolean;\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CacheStorageAbstract } from '../cache.storage.abstract.service';\r\nimport { CacheStoragesEnum } from '../../../enums/cache.storages.enum';\r\nimport { StorageValueInterface } from '../../../interfaces/storage.value.interface';\r\n\r\n/**\r\n * Service for storing data in session storage\r\n */\r\n@Injectable()\r\nexport class CacheSessionStorage extends CacheStorageAbstract {\r\n\r\n    public getItem(key: string) {\r\n        const value = sessionStorage.getItem(key);\r\n        return value ? JSON.parse(value) : null;\r\n    }\r\n\r\n    public setItem(key: string, value: StorageValueInterface) {\r\n        try {\r\n            sessionStorage.setItem(key, JSON.stringify(value));\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public removeItem(key: string) {\r\n        sessionStorage.removeItem(key);\r\n    }\r\n\r\n    public clear() {\r\n        sessionStorage.clear();\r\n    }\r\n\r\n    public type() {\r\n        return CacheStoragesEnum.SESSION_STORAGE;\r\n    }\r\n\r\n    public isEnabled() {\r\n        try {\r\n            sessionStorage.setItem('test', 'test');\r\n            sessionStorage.removeItem('test');\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CacheStorageAbstract } from '../cache.storage.abstract.service';\r\nimport { CacheStoragesEnum } from '../../../enums/cache.storages.enum';\r\nimport { StorageValueInterface } from '../../../interfaces/storage.value.interface';\r\n\r\n/**\r\n * Service for storing data in local storage\r\n */\r\n@Injectable()\r\nexport class CacheLocalStorage extends CacheStorageAbstract {\r\n\r\n    public getItem(key: string) {\r\n        const value = localStorage.getItem(key);\r\n        return value ? JSON.parse(value) : null;\r\n    }\r\n\r\n    public setItem(key: string, value: StorageValueInterface) {\r\n        try {\r\n            localStorage.setItem(key, JSON.stringify(value));\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public removeItem(key: string) {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    public clear() {\r\n        localStorage.clear();\r\n    }\r\n\r\n    public type() {\r\n        return CacheStoragesEnum.LOCAL_STORAGE;\r\n    }\r\n\r\n    public isEnabled() {\r\n        try {\r\n            localStorage.setItem('test', 'test');\r\n            localStorage.removeItem('test');\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class WindowVariableService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * 从当前window遍历到框架顶级window\r\n     * 并获取一个非空的自定义变量\r\n     */\r\n    public getVariableFromWindow(key: string): any {\r\n        const topWin = this.getTopWindow();\r\n        let frmWin: Window = window;\r\n        while (!frmWin[key] && frmWin !== topWin) {\r\n            frmWin = frmWin.parent;\r\n        }\r\n        return frmWin[key];\r\n    }\r\n\r\n    /**\r\n     * 从当前window遍历到框架顶级window\r\n     * 并获取一个非空且含有元素的自定义数组变量\r\n     */\r\n    public getArrayFromWindow(key: string): any[] {\r\n        const topWin = this.getTopWindow();\r\n        let frmWin: Window = window;\r\n        while ((!frmWin[key] || frmWin[key].length === 0) && frmWin !== topWin) {\r\n            frmWin = frmWin.parent;\r\n        }\r\n        return frmWin[key] as any[] || [];\r\n    }\r\n\r\n    /**\r\n     * 获取框架的顶级window\r\n     * 进行跨域封装\r\n     */\r\n    public getTopWindow(): Window {\r\n        let curWin: Window = window.self;\r\n        try {\r\n            while (curWin.location.origin === curWin.parent.location.origin) {\r\n                if (curWin !== curWin.parent && !(curWin as any).isRTFTopWin) {\r\n                    curWin = curWin.parent;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        } catch (e) { }\r\n        return curWin;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CacheStorageAbstract } from '../cache.storage.abstract.service';\r\nimport { CacheStoragesEnum } from '../../../enums/cache.storages.enum';\r\nimport { StorageValueInterface } from '../../../interfaces/storage.value.interface';\r\nimport { WindowVariableService } from '../../../../services/window-service/window-variable.service';\r\n\r\n/**\r\n * Service for storing data in local storage\r\n */\r\n@Injectable()\r\nexport class CacheMemoryStorage extends CacheStorageAbstract {\r\n\r\n  private _data: { [key: string]: any } = {};\r\n  private windowSvc = new WindowVariableService();\r\n\r\n  public getItem(key: string) {\r\n    const cache = this.getGlobleCache(key);\r\n    if (cache) {\r\n      this._data[key] = cache;\r\n    }\r\n    return this._data[key] ? this._data[key] : null;\r\n  }\r\n\r\n  public setItem(key: string, value: StorageValueInterface) {\r\n    this.setGlobleCache(key, value);\r\n    this._data[key] = value;\r\n    return true;\r\n  }\r\n\r\n  public removeItem(key: string) {\r\n    delete this._data[key];\r\n  }\r\n\r\n  public clear() {\r\n    this._data = [];\r\n  }\r\n\r\n  public type() {\r\n    return CacheStoragesEnum.MEMORY;\r\n  }\r\n\r\n  public isEnabled() {\r\n    return true;\r\n  }\r\n\r\n  private setGlobleCache(key: any, value: any) {\r\n    const topWindow = this.windowSvc.getTopWindow();\r\n    try {\r\n      if (topWindow.name) {\r\n        let exist = false;\r\n        const ary = topWindow.name.split('&|&');\r\n        // tslint:disable-next-line: prefer-for-of\r\n        for (let i = 0; i < ary.length; i++) {\r\n          if (ary[i]) {\r\n            const obj = JSON.parse(ary[i]);\r\n            if (obj[key]) {\r\n              topWindow.name = topWindow.name.replace(ary[i], this.serializeData(key, value));\r\n              exist = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (!exist) {\r\n          topWindow.name += '&|&' + this.serializeData(key, value);\r\n        }\r\n        } else {\r\n        topWindow.name = this.serializeData(key, value);\r\n      }\r\n    } catch {\r\n      topWindow.name = '';\r\n    }\r\n  }\r\n\r\n  private getGlobleCache(key: any) {\r\n    const topWindow = this.windowSvc.getTopWindow();\r\n    try {\r\n      let result: any;\r\n      if (topWindow.name) {\r\n        if (topWindow.name.indexOf('&|&') >= 0) {\r\n          const ary = topWindow.name.split('&|&');\r\n          for (let i = 0; i < ary.length; i++) {\r\n            if (ary[i]) {\r\n              const obj = JSON.parse(ary[i]);\r\n              if (obj[key]) {\r\n                result = obj[key].value;\r\n                if (i === 0) {\r\n                  topWindow.name = topWindow.name.replace(ary[i] + '&|&', '');\r\n                } else {\r\n                  topWindow.name = topWindow.name.replace('&|&' + ary[i], '');\r\n                }\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          const obj = JSON.parse(topWindow.name);\r\n          if (obj[key]) {\r\n            result = obj[key].value;\r\n            topWindow.name = '';\r\n          }\r\n        }\r\n      }\r\n\r\n      return result;\r\n    } catch {\r\n      topWindow.name = '';\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private serializeData(key: string, value: any) {\r\n    const obj = {};\r\n    obj[key] = {\r\n      value\r\n    };\r\n\r\n    return JSON.stringify(obj);\r\n  }\r\n\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { CacheOptionsInterface } from '../interfaces/cache.options.interface';\r\nimport { CacheStoragesEnum } from '../enums/cache.storages.enum';\r\nimport { CacheStorageAbstract } from './storage/cache.storage.abstract.service';\r\nimport { CacheSessionStorage } from './storage/sessionstorage/cache.sessionstorage.service';\r\nimport { CacheLocalStorage } from './storage/localstorage/cache.localstorage.service';\r\nimport { CacheMemoryStorage } from './storage/memory/cache.memory.service';\r\nimport { StorageValueInterface } from '../interfaces/storage.value.interface';\r\n\r\nconst CACHE_PREFIX = 'CacheService';\r\n\r\nconst DEFAULT_STORAGE = CacheStoragesEnum.MEMORY;\r\nconst DEFAULT_ENABLED_STORAGE = CacheStoragesEnum.SESSION_STORAGE;\r\n\r\n@Injectable()\r\nexport class CacheService {\r\n\r\n    /**\r\n     * Default cache options\r\n     * CacheOptionsInterface\r\n     * \r\n     */\r\n    private _defaultOptions: CacheOptionsInterface = {\r\n        expires: Number.MAX_VALUE,\r\n        maxAge : Number.MAX_VALUE\r\n    };\r\n\r\n    /**\r\n     * Cache prefix\r\n     */\r\n    private _prefix: string = CACHE_PREFIX;\r\n\r\n    public constructor(@Optional() private _storage: CacheStorageAbstract) {\r\n        this._validateStorage();\r\n    }\r\n\r\n    /**\r\n     * Set data to cache\r\n     */\r\n    public set(key: string, value: any, options?: CacheOptionsInterface) {\r\n        const storageKey = this._toStorageKey(key);\r\n        options = options ? options : this._defaultOptions;\r\n        if (this._storage.setItem(storageKey, this._toStorageValue(value, options))) {\r\n            if (!this._isSystemKey(key) && options.tag) {\r\n                this._saveTag(options.tag, storageKey);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get data from cache\r\n     */\r\n    public get(key: string): any {\r\n        const storageValue = this._storage.getItem(this._toStorageKey(key));\r\n        let value: any = null;\r\n        if (storageValue) {\r\n            if (this._validateStorageValue(storageValue)) {\r\n                value = storageValue.value;\r\n            } else {\r\n                this.remove(key);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Check if value exists\r\n     */\r\n    public exists(key: string): boolean {\r\n        return !!this.get(key);\r\n    }\r\n\r\n    /**\r\n     * Remove item from cache\r\n     */\r\n    public remove(key: string) {\r\n        this._storage.removeItem(this._toStorageKey(key));\r\n        this._removeFromTag(this._toStorageKey(key));\r\n    }\r\n\r\n    /**\r\n     * Remove all from cache\r\n     */\r\n    public removeAll() {\r\n        this._storage.clear();\r\n    }\r\n\r\n    /**\r\n     * Get all tag data\r\n     */\r\n    public getTagData(tag: string) {\r\n        const tags = this.get(this._tagsStorageKey()) || {};\r\n        const result: {[key: string]: any} = {};\r\n        if (tags[tag]) {\r\n            tags[tag].forEach((key: string) => {\r\n                const data = this.get(this._fromStorageKey(key));\r\n                if (data) {\r\n                    result[this._fromStorageKey(key)] = data;\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of cache with needed storage\r\n     */\r\n    public useStorage(type: CacheStoragesEnum) {\r\n        const service = new CacheService(this._initStorage(type));\r\n        service.setGlobalPrefix(this._getCachePrefix());\r\n        return service;\r\n    }\r\n\r\n    /**\r\n     * Remove all by tag\r\n     */\r\n    public removeTag(tag: string) {\r\n        const tags = this.get(this._tagsStorageKey()) || {};\r\n        if (tags[tag]) {\r\n            tags[tag].forEach((key: string) => {\r\n                this._storage.removeItem(key);\r\n            });\r\n            delete tags[tag];\r\n            this.set(this._tagsStorageKey(), tags);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set global cache key prefix\r\n     */\r\n    public setGlobalPrefix(prefix: string) {\r\n        this._prefix = prefix;\r\n    }\r\n\r\n    /**\r\n     * Validate cache storage\r\n     * \r\n     */\r\n    private _validateStorage() {\r\n        if (!this._storage) {\r\n            this._storage = this._initStorage(DEFAULT_STORAGE);\r\n        }\r\n        if (!this._storage.isEnabled()) {\r\n            this._storage = this._initStorage(DEFAULT_ENABLED_STORAGE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove key from tags keys list\r\n     */\r\n    private _removeFromTag(key: string) {\r\n        // tslint:disable-next-line:prefer-const\r\n        let tags = this.get(this._tagsStorageKey()) || {};\r\n        let index: number;\r\n        // tslint:disable-next-line:forin\r\n        for (const tag in tags) {\r\n            index = tags[tag].indexOf(key);\r\n            if (index !== -1) {\r\n                tags[tag].splice(index, 1);\r\n                this.set(this._tagsStorageKey(), tags);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Init storage by type\r\n     */\r\n    private _initStorage(type: CacheStoragesEnum) {\r\n        let storage: CacheStorageAbstract;\r\n        switch (type) {\r\n            case CacheStoragesEnum.SESSION_STORAGE:\r\n                storage = new CacheSessionStorage();\r\n                break;\r\n            case CacheStoragesEnum.LOCAL_STORAGE:\r\n                storage = new CacheLocalStorage();\r\n                break;\r\n            default: storage = new CacheMemoryStorage();\r\n        }\r\n        return storage;\r\n    }\r\n\r\n    private _toStorageKey(key: string) {\r\n        return this._getCachePrefix() + key;\r\n    }\r\n\r\n    private _fromStorageKey(key: string) {\r\n        return key.replace(this._getCachePrefix(), '');\r\n    }\r\n\r\n    /**\r\n     * Prepare value to set to storage\r\n     *\r\n     */\r\n    private _toStorageValue(value: any, options: CacheOptionsInterface): StorageValueInterface {\r\n        return {\r\n            value: value,\r\n            options: this._toStorageOptions(options)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepare options to set to storage\r\n     * \r\n     */\r\n    private _toStorageOptions(options: CacheOptionsInterface): CacheOptionsInterface {\r\n        const storageOptions: CacheOptionsInterface = {};\r\n        storageOptions.expires = options.expires ? options.expires :\r\n            (options.maxAge ? Date.now() + (options.maxAge * 1000) : this._defaultOptions.expires);\r\n        storageOptions.maxAge = options.maxAge ? options.maxAge : this._defaultOptions.maxAge;\r\n        return storageOptions;\r\n    }\r\n\r\n    /**\r\n     * Validate storage value\r\n     *\r\n     */\r\n    private _validateStorageValue(value: StorageValueInterface) {\r\n        return !!value.options.expires && value.options.expires > Date.now();\r\n    }\r\n\r\n    /**\r\n     * check if its system cache key\r\n     * \r\n     */\r\n    private _isSystemKey(key: string) {\r\n        return [this._tagsStorageKey()].indexOf(key) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Save tag to list of tags\r\n     * \r\n     * \r\n     */\r\n    private _saveTag(tag: string, key: string) {\r\n        const tags = this.get(this._tagsStorageKey()) || {};\r\n        if (!tags[tag]) {\r\n            tags[tag] = [key];\r\n        } else {\r\n            tags[tag].push(key);\r\n        }\r\n        this.set(this._tagsStorageKey(), tags);\r\n    }\r\n\r\n    /**\r\n     * Get global cache prefix\r\n     * \r\n     * \r\n     */\r\n    private _getCachePrefix() {\r\n        return this._prefix;\r\n    }\r\n\r\n    private _tagsStorageKey() {\r\n        return 'CacheService_tags';\r\n    }\r\n\r\n}\r\n","\r\nexport class CommonUtil {\r\n\r\n    public static getQueryString(paraName: string) {\r\n        const reg = new RegExp('(^|&)' + paraName + '=([^&]*)(&|$)', 'i');\r\n        const r = window.location.search.substr(1).match(reg);\r\n        let paraValue = '';\r\n        if (r) {\r\n            paraValue = r[2];\r\n        }\r\n        return paraValue;\r\n    }\r\n\r\n    public static getQueryStringFromHash(paraName: string) {\r\n        const url = window.location.hash;\r\n        const arrObj = url && url.split('?');\r\n        if (arrObj && arrObj.length > 1) {\r\n            const arrPara = arrObj[1].split('&');\r\n            if (!arrPara) {\r\n                return '';\r\n            }\r\n            let arr: any[];\r\n            // tslint:disable-next-line: prefer-for-of\r\n            for (let i = 0; i < arrPara.length; i++) {\r\n                arr = arrPara[i].split('=');\r\n                if (arr != null && arr[0] === paraName) {\r\n                    return arr[1];\r\n                }\r\n            }\r\n            return '';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    public static getCookieMapFromDoc(): Map<string, string> {\r\n        const cookieArr = document.cookie && document.cookie.split(';');\r\n        const cookieMap = new Map<string, string>();\r\n        if (cookieArr) {\r\n            cookieArr.forEach(item => {\r\n                const params = item.split('=');\r\n                cookieMap.set(params[0], params[1]);\r\n            });\r\n        }\r\n        return cookieMap;\r\n    }\r\n\r\n    /**\r\n     * 获取当前window 中funcId appId等公共变量\r\n     * 返回结果格式：funcId=xx&appType=xxx&\r\n     */\r\n    public static getCommonVariables(): string {\r\n        return CommonUtil.getQueryStringFromHash('cvft');\r\n    }\r\n\r\n    private static matchCommonVariableKey(item: string): boolean {\r\n        const itemArr = item.split('=');\r\n        if (!itemArr || itemArr.length !== 2 || !itemArr[0]) {\r\n            return false;\r\n        }\r\n        switch (itemArr[0].toLowerCase()) {\r\n            case 'funcid': return true;\r\n            case 'appid': return true;\r\n            case 'appentrance': return true;\r\n            case 'apptype': return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { WindowVariableService } from '../window-service/window-variable.service';\r\nimport { CommonUtil } from '../../utilities/common.utilities';\r\n\r\n\r\n@Injectable()\r\nexport class SessionService {\r\n    private SessionKey = 'session';\r\n    private SessionKeyForIde = 'sessionId';\r\n    private FuncSessionKey = 'FuncSession';\r\n    private windowService: WindowVariableService;\r\n\r\n    constructor() {\r\n        window[this.FuncSessionKey] = window[this.FuncSessionKey] || new Map<string, string>();\r\n        this.windowService = new WindowVariableService();\r\n    }\r\n\r\n    /**\r\n     * 获取用户sessionid\r\n     */\r\n    getUserSessionId(): string {\r\n        return localStorage.getItem(this.SessionKey) || '';\r\n    }\r\n\r\n    /**\r\n     * 获取当前session 之前依赖router的方式改掉\r\n     * 从url hash中获取query\r\n     * N 栈为funcSession\r\n     * J 栈为formToken\r\n     */\r\n    getCurrentSeesionId(tabId?: string): string {\r\n        if (!!tabId) {\r\n            const tab = this.getTabArray().find(t => t.id === tabId);\r\n            return tab && (tab.formToken || tab.sessionId);\r\n        }\r\n        let ssid = CommonUtil.getQueryStringFromHash('cvft');\r\n        if (!ssid) {\r\n            const pageId = CommonUtil.getQueryStringFromHash('tabId');\r\n            const tab = this.getTabArray().find(t => t.id === pageId);\r\n            if (tab) {\r\n                ssid = (tab.formToken || tab.sessionId);\r\n            }\r\n        }\r\n        return ssid || this.getUserSessionId();\r\n    }\r\n\r\n    /***\r\n     * 获取功能的session(功能重复打开，会存在多个)\r\n     * (1912 框架移除funcSession，接口作废)\r\n     */\r\n    getFuncSessionId(funcId: string) {\r\n        const ssMap = new Map<string, string>();\r\n        const tabs = this.getTabArray().filter(t => t.funcId === funcId);\r\n        if (!tabs || tabs.length === 0) {\r\n            return ssMap;\r\n        }\r\n        // tslint:disable-next-line: prefer-for-of\r\n        for (let i = 0; i < tabs.length; i++) {\r\n            ssMap.set(tabs[i].tabId, tabs[i].sessionId);\r\n        }\r\n\r\n        return ssMap;\r\n    }\r\n\r\n    /**\r\n     * 获取应用session（应用重复打开会存在多个）\r\n     * (1912 框架移除funcSession，接口作废)\r\n     */\r\n    getAppSessionId(appId: string, appEntrance: string) {\r\n        const ssMap = new Map<string, string>();\r\n        const tabs = this.getTabArray().filter(t => t.appId === appId && t.appEntrance === appEntrance);\r\n        if (!tabs || tabs.length === 0) {\r\n            return ssMap;\r\n        }\r\n        // tslint:disable-next-line: prefer-for-of\r\n        for (let i = 0; i < tabs.length; i++) {\r\n            ssMap.set(tabs[i].tabId, tabs[i].sessionId);\r\n        }\r\n        return ssMap;\r\n    }\r\n\r\n    /**\r\n     * 设置用户sessionid\r\n     * 只是用于N版\r\n     */\r\n    setUserSessionId(ssid: string) {\r\n        // todo框架修改之后，要和IDE同步\r\n        localStorage.setItem(this.SessionKey, ssid);\r\n        localStorage.setItem(this.SessionKeyForIde, ssid);\r\n    }\r\n\r\n    /**\r\n     * 缓存当前功能的sessionid\r\n     * (1912 框架移除funcSession，接口作废)\r\n     */\r\n    setFuncSessionId(key: string, ssid: string) {\r\n        this.getFuncSessionCache().set(key, ssid);\r\n    }\r\n\r\n    /**\r\n     * 缓存当前应用的sessionId\r\n     * (1912 框架移除funcSession，接口作废)\r\n     */\r\n    setAppSessionId(appId: string, appEntrance: string, ssid: string) {\r\n        this.setFuncSessionId(`${appId}#${appEntrance}`, ssid);\r\n    }\r\n\r\n    private getFuncSessionCache(): Map<string, string> {\r\n        const sessionValue = this.windowService.getVariableFromWindow(this.FuncSessionKey);\r\n        return sessionValue as Map<string, string>;\r\n    }\r\n\r\n    private getTabArray(): any[] {\r\n        const iframeTabarray = 'iframeTabarray';\r\n        const iframArr = this.windowService.getArrayFromWindow(iframeTabarray);\r\n        return iframArr;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { SessionService } from '../sessionservice/session.service';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { CommonUtil } from '../../utilities/common.utilities';\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private sessionService: SessionService\r\n    ) { }\r\n\r\n    get(url: string) {\r\n        return this.request('Get', url, this.setHeader({}));\r\n    }\r\n\r\n    post(url: string, body: any) {\r\n        return this.request('Post', url, this.setHeader({ body }));\r\n    }\r\n    put(url: string, body: any) {\r\n        return this.request('Put', url, this.setHeader({ body }));\r\n    }\r\n    delete(url: string, body: any) {\r\n        return this.request('Delete', url, this.setHeader({ body }));\r\n    }\r\n    patch(url: string, body: any) {\r\n        return this.request('Patch', url, this.setHeader({ body }));\r\n    }\r\n\r\n    /** 默认用当前sessionid */\r\n    setHeader(options: any, bizContextId?: string) {\r\n\r\n        options.headers = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n        const commonVariables = CommonUtil.getCommonVariables();\r\n        if (commonVariables) {\r\n            const commonVariableKey = 'X-CAF-Runtime-CommonVariable';\r\n            options.headers[commonVariableKey] = commonVariables;\r\n        }\r\n        if (bizContextId) {\r\n            const bizContextKey = 'X-CAF-Runtime-Context';\r\n            options.headers[bizContextKey] = bizContextId;\r\n        }\r\n        return options;\r\n    }\r\n\r\n    request(method: string, url: string, options: any) {\r\n        if (options.body) {\r\n            if (typeof options.body !== 'string') {\r\n                options.body = JSON.stringify(options.body);\r\n            }\r\n        }\r\n        return this.http.request(method, url, options)\r\n            .pipe(map((data) => {\r\n                return data;\r\n            }));\r\n    }\r\n\r\n    request$(method: string, url: string, options: any): Observable<any> {\r\n        return this.http.request(method, url, options);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { CommonUtil } from '../../utilities/common.utilities';\r\n\r\n@Injectable()\r\nexport class LanguageService {\r\n    private languageKey = 'languageCode';\r\n    private curLangugaeKey = 'caf_web_language';\r\n\r\n    constructor(private cookieService: CookieService) { }\r\n\r\n    public setLanguageCode(languageCode: string) {\r\n        localStorage.setItem(this.languageKey, languageCode);\r\n    }\r\n\r\n    public getLanguageCode(): string {\r\n        let curLancode = this.cookieService && this.cookieService.get(this.curLangugaeKey);\r\n        if (!curLancode) {\r\n            curLancode = CommonUtil.getCookieMapFromDoc().get(this.curLangugaeKey) ||\r\n                localStorage.getItem(this.languageKey) ||\r\n                'zh-CHS';\r\n        }\r\n        return curLancode;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { WindowVariableService } from '../window-service/window-variable.service';\r\n\r\ninterface TabEntity {\r\n    tabId: string;\r\n    code?: string;\r\n    name?: string;\r\n    appType: string;\r\n    funcId: string;\r\n    appId: string;\r\n    appEntrance: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TabEntityService {\r\n\r\n    private nameSpace = 'gsp-rtf-tabarr-service';\r\n    private tabarrayKey = 'tab-arry';\r\n    private windowService: WindowVariableService;\r\n    private topWin: Window;\r\n\r\n\r\n    constructor() {\r\n        this.windowService = new WindowVariableService();\r\n        this.topWin = this.windowService.getTopWindow();\r\n        this.topWin[this.nameSpace] = this.topWin[this.nameSpace] || {};\r\n    }\r\n\r\n    public setTabs(tabs: any[]) {\r\n        if (!tabs || tabs.length === 0) {\r\n            return;\r\n        }\r\n        const copy = this.deepClone(tabs);\r\n        this.topWin[this.nameSpace][this.tabarrayKey] = copy;\r\n    }\r\n\r\n    public getTabs(): any[] {\r\n        const tabs = this.topWin[this.nameSpace][this.tabarrayKey] || [];\r\n        if (!tabs || tabs.length === 0) {\r\n            return tabs;\r\n        }\r\n        return this.deepClone(tabs);\r\n    }\r\n\r\n    public setActiveTab(tab: any) {\r\n        const tabs: any[] = this.getTabs();\r\n        const activeOld = tabs.find(t => t.active);\r\n        if (!tab) {\r\n            if (!!activeOld) {\r\n                activeOld.active = false;\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (tabs.length > 0) {\r\n            let activeNew = tabs.find(t => t.id === tab.id);\r\n            if (!activeNew) {\r\n                activeNew = tab;\r\n                if (!!activeOld) {\r\n                    activeOld.active = false;\r\n                }\r\n                activeNew.active = true;\r\n                tabs.push(activeNew);\r\n            } else {\r\n                if (!!activeOld) {\r\n                    if (activeOld === activeNew) {\r\n                        return;\r\n                    } else {\r\n                        activeOld.active = false;\r\n                        activeNew.active = true;\r\n                    }\r\n                } else {\r\n                    activeNew.active = true;\r\n                }\r\n            }\r\n            this.setTabs(tabs);\r\n        }\r\n    }\r\n\r\n    public getActiveTab(): any {\r\n        const tabs: any[] = this.getTabs();\r\n        const activeTab = tabs && tabs.find(t => t.active);\r\n        const res: TabEntity = activeTab && {\r\n            tabId: activeTab.id,\r\n            appType: activeTab.appType,\r\n            funcId: activeTab.funcId,\r\n            appId: activeTab.appId,\r\n            appEntrance: activeTab.appEntrance,\r\n            name: activeTab.FuncName\r\n        };\r\n        return res;\r\n    }\r\n\r\n    private deepClone(target: any): any {\r\n        let result;\r\n        if (typeof target === 'object') {\r\n            if (Array.isArray(target)) {\r\n                result = [];\r\n                for (let i in target) {\r\n                    result.push(this.deepClone(target[i]))\r\n                }\r\n            } else if (target === null) {\r\n                result = null;\r\n            } else if (target.constructor === RegExp) {\r\n                result = target;\r\n            } else {\r\n                result = {};\r\n                for (let i in target) {\r\n                    result[i] = this.deepClone(target[i]);\r\n                }\r\n            }\r\n        } else {\r\n            result = target;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CacheService } from './cache/services/cache.service';\r\nimport { CacheStorageAbstract } from './cache/services/storage/cache.storage.abstract.service';\r\nimport { CacheMemoryStorage } from './cache/services/storage/memory/cache.memory.service';\r\nimport { HttpService } from './services/httpservice/http.service';\r\nimport { SessionService } from './services/sessionservice/session.service';\r\nimport { LanguageService } from './services/languageservice/language.service';\r\nimport { WindowVariableService } from './services/window-service/window-variable.service';\r\nimport { TabEntityService } from './services/tabservice/tab-entity.service';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n    ],\r\n    exports: [],\r\n    providers: [],\r\n    entryComponents: []\r\n})\r\nexport class FrmCommonModule {\r\n    static forRoot(): ModuleWithProviders {\r\n\r\n        return {\r\n            ngModule: FrmCommonModule,\r\n            providers: [\r\n                CacheService,\r\n                { provide: CacheStorageAbstract, useClass: CacheMemoryStorage },\r\n                HttpService,\r\n                SessionService,\r\n                LanguageService,\r\n                WindowVariableService,\r\n                TabEntityService,\r\n                CookieService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"],"names":["CommonSharedModule","NgModule","args","imports","CommonModule","RouterModule","declarations","exports","providers","entryComponents","CacheStorageAbstract","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","_super","CacheSessionStorage","tslib_1.__extends","getItem","key","value","sessionStorage","JSON","parse","setItem","stringify","e","removeItem","clear","type","isEnabled","Injectable","CacheLocalStorage","localStorage","WindowVariableService","getVariableFromWindow","topWin","getTopWindow","frmWin","window","parent","getArrayFromWindow","length","curWin","self","location","origin","isRTFTopWin","CacheMemoryStorage","cache","getGlobleCache","_data","setGlobleCache","topWindow","windowSvc","name","exist","ary","split","i","replace","serializeData","_a","result","indexOf","obj","_this","apply","arguments","CacheService","set","options","storageKey","_toStorageKey","_defaultOptions","_storage","_toStorageValue","_isSystemKey","tag","_saveTag","get","storageValue","_validateStorageValue","remove","exists","_removeFromTag","removeAll","getTagData","tags","_tagsStorageKey","forEach","data","_fromStorageKey","useStorage","service","_initStorage","setGlobalPrefix","_getCachePrefix","removeTag","prefix","_prefix","_validateStorage","index","splice","storage","_toStorageOptions","storageOptions","expires","maxAge","Date","now","push","decorators","Optional","Number","MAX_VALUE","CommonUtil","getQueryString","paraName","reg","RegExp","r","search","substr","match","paraValue","getQueryStringFromHash","url","hash","arrObj","arrPara","arr","getCookieMapFromDoc","cookieArr","document","cookie","cookieMap","Map","item","params","getCommonVariables","matchCommonVariableKey","itemArr","toLowerCase","SessionService","getUserSessionId","SessionKey","getCurrentSeesionId","tabId","tab","getTabArray","find","t","id","formToken","sessionId","ssid","pageId_1","getFuncSessionId","funcId","ssMap","tabs","filter","getAppSessionId","appId","appEntrance","setUserSessionId","SessionKeyForIde","setFuncSessionId","getFuncSessionCache","setAppSessionId","windowService","FuncSessionKey","HttpService","request","setHeader","post","body","put","delete","patch","bizContextId","headers","Content-Type","commonVariables","method","http","pipe","map","request$","HttpClient","sessionService","LanguageService","setLanguageCode","languageCode","languageKey","getLanguageCode","curLancode","cookieService","curLangugaeKey","CookieService","TabEntityService","setTabs","copy","deepClone","nameSpace","tabarrayKey","getTabs","setActiveTab","activeOld","active","activeNew","getActiveTab","activeTab","appType","FuncName","target","isArray","providedIn","FrmCommonModule","forRoot","ngModule","provide","useClass"],"mappings":"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"}