import { CommonModule } from '@angular/common';
import { Injectable, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonStructure {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Aggregate extends CommonStructure {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonStructureConst {
    /**
     * @private
     */
    constructor() { }
}
CommonStructureConst.DEFAULT_ENTITY_OBJECT = "DefaultEntityObject";
CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT = "DefaultDataTransferObject";
CommonStructureConst.DEFAULT_VALUE_OBJECT = "DefaultValueObject";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityObject extends Aggregate {
    constructor() {
        super();
        this.kind = CommonStructureConst.DEFAULT_ENTITY_OBJECT;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTransferObject extends Aggregate {
    constructor() {
        super();
        this.kind = CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValueObject extends CommonStructure {
    constructor() {
        super();
        this.kind = CommonStructureConst.DEFAULT_VALUE_OBJECT;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityRelation {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ElementConstant {
    /**
     * @private
     */
    constructor() { }
}
ElementConstant.DEFAULT_MULTILLINGUAL_PROPERTY = "DefaultMultillingualProperty";
ElementConstant.DEFAULT_OPERATION = "DefaultOperation";
ElementConstant.DEFAULT_PARAMETER = "DefaultParameter";
ElementConstant.DEFAULT_PROPERTY = "DefaultProperty";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Extension {
    /**
     * @return {?}
     */
    getKeys() {
        /** @type {?} */
        let result = new Array();
        for (let key in this.extension) {
            result.push(key);
        }
        return result;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        this.extension[key];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Operation extends Extension {
    constructor() {
        super();
        this.kind = ElementConstant.DEFAULT_OPERATION;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Parameter extends Extension {
    constructor() {
        super();
        this.kind = ElementConstant.DEFAULT_PARAMETER;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Property extends Extension {
    constructor() {
        super();
        this.kind = ElementConstant.DEFAULT_PROPERTY;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class DataType extends Extension {
    /**
     * @return {?}
     */
    getKind() {
        return this.kind;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTypeConst {
    /**
     * @private
     */
    constructor() { }
}
DataTypeConst.DEFAULT_PRIMITIVE = "DefaultPrimitiveType";
DataTypeConst.DEFAULT_COLLECTION = "DefaultCollectionType";
DataTypeConst.DEFAULT_MAP = "DefaultMapType";
DataTypeConst.DEFAULT_OBJECT = "Object";
DataTypeConst.DEFAULT_STRUCTURED = "DefaultStructuredType";
DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT = "DefaultDtoType";
DataTypeConst.DEFAULT_ENTITY = "DefaultEntityType";
DataTypeConst.DEFAULT_VALUE_OBJECT = "DefaultValueObjectType";
DataTypeConst.DEFAULT_ENUMERATION = "DefaultEnumType";
DataTypeConst.STRUCTURED_REF = "RefStructuredType";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 集合类型
 */
class CollectionType extends DataType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_COLLECTION;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Map类型
 */
class MapType extends DataType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_MAP;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 原生类型
 */
class PrimitiveType extends DataType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_PRIMITIVE;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 结构体类型
 */
class StructuredType extends DataType {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityType extends StructuredType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_ENTITY;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTransferObjectType extends StructuredType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValueObjectType extends StructuredType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_VALUE_OBJECT;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumerationType extends StructuredType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_ENUMERATION;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumerationItem {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ObjectType extends DataType {
    constructor() {
        super();
        this.kind = DataTypeConst.DEFAULT_OBJECT;
    }
    /**
     * @return {?}
     */
    getKind() {
        return this.kind;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConstraintConst {
    /**
     * @private
     */
    constructor() { }
}
ConstraintConst.STRING = "StringConstraint";
ConstraintConst.DECIMAL = "DecimalConstraint";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DecimalConstraint {
    /**
     * @return {?}
     */
    getKind() {
        return ConstraintConst.DECIMAL;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StringConstraint {
    /**
     * @return {?}
     */
    getKind() {
        return ConstraintConst.STRING;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const PrimitiveTypeKind = {
    // String = 0,
    // Bool = 1,
    // Int16 = 2,
    // Int32 = 3,
    // Int64 = 4,
    // Float = 5,
    // Double = 6,
    // Decimal = 7,
    // DateTime = 8,
    // TimeStamp = 9,
    // Byte=10 ,
    String: 0,
    Bool: 1,
    Int16: 2,
    Int32: 3,
    Int64: 4,
    Float: 5,
    Double: 6,
    Decimal: 7,
    DateTime: 8,
    TimeStamp: 9,
    Byte: 10,
};
PrimitiveTypeKind[PrimitiveTypeKind.String] = 'String';
PrimitiveTypeKind[PrimitiveTypeKind.Bool] = 'Bool';
PrimitiveTypeKind[PrimitiveTypeKind.Int16] = 'Int16';
PrimitiveTypeKind[PrimitiveTypeKind.Int32] = 'Int32';
PrimitiveTypeKind[PrimitiveTypeKind.Int64] = 'Int64';
PrimitiveTypeKind[PrimitiveTypeKind.Float] = 'Float';
PrimitiveTypeKind[PrimitiveTypeKind.Double] = 'Double';
PrimitiveTypeKind[PrimitiveTypeKind.Decimal] = 'Decimal';
PrimitiveTypeKind[PrimitiveTypeKind.DateTime] = 'DateTime';
PrimitiveTypeKind[PrimitiveTypeKind.TimeStamp] = 'TimeStamp';
PrimitiveTypeKind[PrimitiveTypeKind.Byte] = 'Byte';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Map类型
 */
class StructuredReferType extends DataType {
    constructor() {
        super();
        this.kind = DataTypeConst.STRUCTURED_REF;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTypeConvertUtil {
    /**
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    static convertToObject(datatype, ctxt) {
        /** @type {?} */
        let result = new Object();
        if (datatype instanceof StructuredType) {
            result['kind'] = "RefStructuredType";
            result["isRefer"] = true;
            result["refId"] = datatype.id;
        }
        else {
            /** @type {?} */
            var kind = datatype.getKind();
            result["kind"] = kind;
            /** @type {?} */
            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
            result = serializer.serialize(datatype, ctxt);
        }
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    static initFromObject(obj, ctxt) {
        /** @type {?} */
        let result;
        if (obj['isRefer'] != null) {
            result = new StructuredReferType();
            ((/** @type {?} */ (result))).refId = obj['refId'];
        }
        else {
            /** @type {?} */
            var kind = obj["kind"];
            /** @type {?} */
            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
            result = serializer.deserialize(obj, ctxt);
        }
        return result;
        // switch (obj["kind"]) {
        //     case DataTypeConst.DEFAULT_PRIMITIVE:
        //         let primitiveKindConvertor = new PrimitiveTypeConvertor();
        //         return primitiveKindConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_COLLECTION:
        //         let collectionConvertor = new CollectionTypeConvertor();
        //         return collectionConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_MAP:
        //         let mapConvertor = new MapTypeConvertor();
        //         return mapConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_STRUCTURED:
        //         let structureConvertor = new StructuredTypeConvertor();
        //         return structureConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_ENTITY:
        //         let entityConvertor = new StructuredTypeConvertor();
        //         return entityConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_VALUE_OBJECT:
        //         let voConvertor = new StructuredTypeConvertor();
        //         return voConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
        //         let dtoConvertor = new StructuredTypeConvertor();
        //         return dtoConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_ENUMERATION:
        //         let enumerationConvertor = new StructuredTypeConvertor();
        //         return enumerationConvertor.initFromObject(obj);
        //     case DataTypeConst.STRUCTURED_REF:
        //         let structureRefConvertor = new StructuredTypeReferConvertor();
        //         return structureRefConvertor.initFromObject(obj);
        //     default:
        //         throw new Error(`数据类型不支持的${obj["kind"]}类型！`);
        // }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtensionConvertor {
    /**
     * @param {?} extensionObj
     * @param {?} jObj
     * @return {?}
     */
    addToJObj(extensionObj, jObj) {
        jObj['extension'] = extensionObj.extension;
    }
    /**
     * @param {?} extensionObj
     * @param {?} jObj
     * @return {?}
     */
    addToObj(extensionObj, jObj) {
        if (jObj['extension']) {
            extensionObj.extension = jObj['extension'];
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CollectionTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        let collectiontype = (/** @type {?} */ (datatype));
        obj['kind'] = collectiontype.kind;
        obj['elementType'] = null;
        if (collectiontype.elementType) {
            /** @type {?} */
            let kind = collectiontype.elementType.getKind();
            if (!kind) {
                throw new Error('集合类型序列化时TypeKind为空！');
            }
            obj['elementType'] = DataTypeConvertUtil.convertToObject(collectiontype.elementType, ctxt);
        }
        if (collectiontype.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(collectiontype, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        var collectionType = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        collectionType.kind = obj['kind'];
        if (obj['elementType']) {
            /** @type {?} */
            let kind = obj['elementType']['kind'];
            if (!kind) {
                throw new Error('解析CollectionType时数据类型的TypeKind为空！');
            }
            collectionType.elementType = DataTypeConvertUtil.initFromObject(obj['elementType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(collectionType, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MapTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        let maptype = (/** @type {?} */ (datatype));
        obj['kind'] = maptype.kind;
        obj['keyType'] = null;
        if (maptype.keyType) {
            /** @type {?} */
            let kind = maptype.keyType.getKind();
            if (!kind) {
                throw new Error('Map类型序列化时KeyType的TypeKind为空！');
            }
            obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);
        }
        obj['valueType'] = null;
        if (maptype.valueType) {
            /** @type {?} */
            let kind = maptype.valueType.getKind();
            if (!kind) {
                throw new Error('Map类型序列化时ValueType的TypeKind为空！');
            }
            obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);
        }
        if (maptype.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(maptype, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let maptype = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        maptype.kind = obj['kind'];
        if (obj['keyType']) {
            /** @type {?} */
            let kind = obj['keyType']['kind'];
            if (!kind) {
                throw new Error('解析MapType的KeyType属性时数据类型的TypeKind为空！');
            }
            maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);
        }
        if (obj['valueType']) {
            /** @type {?} */
            let kind = obj['valueType']['kind'];
            if (!kind) {
                throw new Error('解析MapType的ValueType属性时数据类型的TypeKind为空！');
            }
            maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(maptype, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PrimitiveTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        let primitivetype = (/** @type {?} */ (datatype));
        obj['kind'] = primitivetype.kind;
        //这是number
        /** @type {?} */
        let primitiveTypeKindNum = primitivetype.primitiveTypeKind;
        obj['primitiveTypeKind'] = primitiveTypeKindNum;
        if (primitivetype.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(primitivetype, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let primitivetype = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        primitivetype.kind = obj['kind'];
        primitivetype.primitiveTypeKind = (/** @type {?} */ (obj['primitiveTypeKind']));
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(primitivetype, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ObjectTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        let objectType = (/** @type {?} */ (datatype));
        obj['kind'] = objectType.kind;
        if (objectType.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(objectType, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let objectType = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        objectType.kind = obj['kind'];
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(objectType, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyConvertor {
    /**
     * @param {?} obj
     * @param {?} property
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, property, ctxt) {
        if (!property) {
            return;
        }
        obj['kind'] = property.kind;
        obj['id'] = property.id;
        obj['code'] = property.code;
        obj['name'] = property.name;
        obj['description'] = property.description;
        obj['defaultValue'] = property.defaultValue;
        obj['required'] = (/** @type {?} */ (property.required));
        if (property.propertyType) {
            /** @type {?} */
            let kind = property.propertyType.getKind();
            if (!kind) {
                throw new Error('属性序列化时属性类型获取TypeKind为空格！');
            }
            obj['propertyType'] = DataTypeConvertUtil.convertToObject(property.propertyType, ctxt);
        }
        obj['constraint'] = null;
        if (property.constraint) {
            /** @type {?} */
            let kind = property.constraint.getKind();
            if (!kind) {
                throw new Error('属性序列化时属性约束获取ConstraintKind为空格！');
            }
            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(property.constraint, ctxt);
        }
        if (property.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(property, obj);
        }
    }
    /**
     * @param {?} property
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(property, obj, ctxt) {
        if (!obj) {
            return;
        }
        property.kind = obj['kind'];
        property.id = obj['id'];
        property.code = obj['code'];
        property.name = obj['name'];
        property.defaultValue = obj['defaultValue'];
        property.required = (/** @type {?} */ (obj['required']));
        property.description = obj['description'];
        if (obj['propertyType']) {
            /** @type {?} */
            let kind = obj['propertyType']['kind'];
            if (!kind) {
                throw new Error('解析属性时数据类型的TypeKind为空！');
            }
            property.propertyType = DataTypeConvertUtil.initFromObject(obj['propertyType'], ctxt);
        }
        if (obj['constraint']) {
            /** @type {?} */
            let kind = obj['constraint']['kind'];
            if (!kind) {
                throw new Error('解析属性时约束类型的ConstraintKind为空！');
            }
            property.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(property, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StructuredTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structure = (/** @type {?} */ (datatype));
        if (!structure) {
            return;
        }
        obj['kind'] = structure.kind;
        obj['id'] = structure.id;
        obj['code'] = structure.code;
        obj['name'] = structure.name;
        obj['description'] = structure.description;
        obj['properties'] = new Array();
        if (structure.properties) {
            structure.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                var kind = property.kind;
                /** @type {?} */
                var serializer = ctxt.getPropertySerializerFactory().get(kind);
                /** @type {?} */
                var propertyObj = serializer.serialize(property, ctxt);
                obj['properties'].push(propertyObj);
            }));
        }
        if (structure.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(structure, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let structure = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        structure.kind = obj['kind'];
        structure.id = obj['id'];
        structure.name = obj['name'];
        structure.code = obj['code'];
        structure.description = obj['description'];
        if (obj['properties']) {
            structure.properties = new Array();
            obj['properties'].forEach((/**
             * @param {?} propertyObj
             * @return {?}
             */
            propertyObj => {
                /** @type {?} */
                var propKind = propertyObj["kind"];
                /** @type {?} */
                var serializer = ctxt.getPropertySerializerFactory().get(propKind);
                /** @type {?} */
                var property = serializer.deserialize(propertyObj, ctxt);
                structure.properties.push(property);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(structure, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTransferObjectTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.convertToObject(obj, datatype, ctxt);
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        /** @type {?} */
        let result = structuredConvertor.convertToObject(obj, datatype, ctxt);
        result['primaryKeys'] = new Array();
        /** @type {?} */
        let entityType = (/** @type {?} */ (datatype));
        if (entityType.primaryKeys) {
            entityType.primaryKeys.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                result['primaryKeys'].push(element);
            }));
        }
        if (entityType.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(entityType, obj);
        }
        return result;
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let entityType = (/** @type {?} */ (dataType));
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
        if (obj['primaryKey']) {
            entityType.primaryKeys = new Array();
            obj['primaryKey'].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                entityType.primaryKeys.push(element);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(entityType, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValueObjectTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.convertToObject(obj, datatype, ctxt);
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumerationItemConvertor {
    /**
     * @param {?} obj
     * @param {?} item
     * @return {?}
     */
    convertToObject(obj, item) {
        obj['code'] = item.code;
        obj['value'] = item.value;
        obj['description'] = item.description;
    }
    /**
     * @param {?} item
     * @param {?} obj
     * @return {?}
     */
    initFromObject(item, obj) {
        /** @type {?} */
        let enumItem = (/** @type {?} */ (item));
        if (!obj) {
            return;
        }
        enumItem.code = obj['code'];
        enumItem.value = obj['value'];
        enumItem.description = obj['description'];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumerationTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.convertToObject(obj, datatype, ctxt);
        /** @type {?} */
        let enumerationType = (/** @type {?} */ (datatype));
        //enum items
        obj['enumerationItems'] = new Array();
        if (enumerationType.enumerationItems) {
            /** @type {?} */
            let convertor = new EnumerationItemConvertor();
            enumerationType.enumerationItems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let itemObj = new Object();
                convertor.convertToObject(itemObj, item);
                obj['enumerationItems'].push(itemObj);
            }));
        }
        if (enumerationType.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(enumerationType, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
        //enum items
        /** @type {?} */
        let enumerationType = (/** @type {?} */ (dataType));
        if (obj['enumerationItems']) {
            enumerationType.enumerationItems = new Array();
            /** @type {?} */
            let convertor = new EnumerationItemConvertor();
            obj['enumerationItems'].forEach((/**
             * @param {?} itemObj
             * @return {?}
             */
            itemObj => {
                /** @type {?} */
                let item = new EnumerationItem();
                convertor.initFromObject(item, itemObj);
                enumerationType.enumerationItems.push(item);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(enumerationType, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParameterConvertor {
    /**
     * @param {?} obj
     * @param {?} parameter
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, parameter, ctxt) {
        if (!parameter) {
            return;
        }
        obj['kind'] = parameter.kind;
        obj['code'] = parameter.code;
        obj['name'] = parameter.name;
        obj['description'] = parameter.description;
        obj['required'] = parameter.required;
        obj['defaultValue'] = parameter.defaultValue;
        obj['parameterType'] = null;
        if (parameter.parameterType) {
            /** @type {?} */
            let kind = parameter.parameterType.getKind();
            if (!kind) {
                throw new Error('参数序列化时数据类型的TypeKind为空！');
            }
            obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType, ctxt);
        }
        obj['constraint'] = null;
        if (parameter.constraint) {
            /** @type {?} */
            let kind = parameter.constraint.getKind();
            if (!kind) {
                throw new Error('参数序列化时参数约束的ConstraintKind为空！');
            }
            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint, ctxt);
        }
        if (parameter.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(parameter, obj);
        }
    }
    /**
     * @param {?} parameter
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(parameter, obj, ctxt) {
        if (!obj) {
            return;
        }
        parameter.kind = obj['kind'];
        parameter.code = obj['code'];
        parameter.name = obj['name'];
        parameter.defaultValue = obj['defaultValue'];
        parameter.description = obj['description'];
        parameter.required = (/** @type {?} */ (obj['required']));
        if (obj['parameterType']) {
            /** @type {?} */
            let kind = obj['parameterType']['kind'];
            if (!kind) {
                throw new Error('解析参数数据类型时TypeKind为空！');
            }
            parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);
        }
        if (obj['constraint']) {
            /** @type {?} */
            let kind = obj['constraint']['kind'];
            if (!kind) {
                throw new Error('解析参数约束类型时ConstraintKind为空！');
            }
            parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(parameter, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OperationConvertor {
    /**
     * @param {?} obj
     * @param {?} operation
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, operation, ctxt) {
        if (!operation) {
            return;
        }
        obj['kind'] = operation.kind;
        obj['code'] = operation.code;
        obj['name'] = operation.name;
        obj['uri'] = operation.uri;
        obj['description'] = operation.description;
        obj['returnType'] = null;
        if (operation.returnType) {
            /** @type {?} */
            let kind = operation.returnType.getKind();
            if (!kind) {
                throw new Error('操作序列化时返回值类型的TypeKind为空!');
            }
            obj['returnType'] = DataTypeConvertUtil.convertToObject(operation.returnType, ctxt);
        }
        obj['parameters'] = new Array();
        if (operation.parameters) {
            operation.parameters.forEach((/**
             * @param {?} parameter
             * @return {?}
             */
            parameter => {
                /** @type {?} */
                var kind = parameter.kind;
                /** @type {?} */
                var serializer = ctxt.getParameterSerializerFactory().get(kind);
                /** @type {?} */
                var parameterObj = serializer.deserialize(parameter, ctxt);
                obj["parameters"].push(parameterObj);
            }));
        }
        if (operation.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(operation, obj);
        }
    }
    /**
     * @param {?} operation
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(operation, obj, ctxt) {
        if (!obj) {
            return;
        }
        operation.kind = obj['kind'];
        operation.code = obj['code'];
        operation.name = obj['name'];
        operation.uri = obj['uri'];
        operation.description = obj['description'];
        if (obj['parameters']) {
            operation.parameters = new Array();
            obj['parameters'].forEach((/**
             * @param {?} parameterObj
             * @return {?}
             */
            parameterObj => {
                /** @type {?} */
                var kind = parameterObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getParameterSerializerFactory().get(kind);
                /** @type {?} */
                var parameter = serializer.deserialize(parameterObj, ctxt);
                operation.parameters.push(parameter);
            }));
        }
        if (obj['returnType']) {
            /** @type {?} */
            let kind = obj['returnType']['kind'];
            if (!kind) {
                throw new Error('解析操作的返回值时TypeKind为空！');
            }
            operation.returnType = DataTypeConvertUtil.initFromObject(obj['returnType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(operation, obj);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReferReplaceUtil {
    /**
     * @param {?} allStructureTypes
     * @param {?} operations
     * @return {?}
     */
    static replaceOperationRefer(allStructureTypes, operations) {
        if (operations != null) {
            operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            op => {
                /** @type {?} */
                let retType = op.returnType;
                if (retType != null && retType instanceof StructuredReferType) {
                    /** @type {?} */
                    let structureTypeId = ((/** @type {?} */ (retType))).refId;
                    /** @type {?} */
                    let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);
                    op.returnType = queryStructureType;
                }
                if (op.parameters != null) {
                    op.parameters.forEach((/**
                     * @param {?} parameter
                     * @return {?}
                     */
                    parameter => {
                        /** @type {?} */
                        let parameterType = parameter.parameterType;
                        if (parameterType instanceof StructuredReferType) {
                            /** @type {?} */
                            let structureTypeId = ((/** @type {?} */ (parameterType))).refId;
                            /** @type {?} */
                            let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);
                            parameter.parameterType = queryStructureType;
                        }
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} structure
     * @return {?}
     */
    static replacePropertyRefer(structure) {
        /** @type {?} */
        let allStructures = this.getAllStructuredTypes(structure);
        if (structure.structuredTypes != null) {
            structure.structuredTypes.forEach((/**
             * @param {?} structureType
             * @return {?}
             */
            structureType => {
                if (structureType.properties != null) {
                    structureType.properties.forEach((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    prop => {
                        if (prop.propertyType instanceof StructuredReferType) {
                            /** @type {?} */
                            let structureTypeId = ((/** @type {?} */ (prop.propertyType))).refId;
                            /** @type {?} */
                            let queryStructureType = this.getRefStructureType(allStructures, structureTypeId);
                            prop.propertyType = queryStructureType;
                        }
                    }));
                }
            }));
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            refStructure => {
                this.replacePropertyRefer(refStructure);
            }));
        }
    }
    /**
     * @param {?} allStructures
     * @param {?} structureId
     * @return {?}
     */
    static getRefStructureType(allStructures, structureId) {
        /** @type {?} */
        let queryStructureType = allStructures.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id == structureId));
        return queryStructureType;
    }
    /**
     * @param {?} structure
     * @return {?}
     */
    static getAllStructuredTypes(structure) {
        /** @type {?} */
        let array = new Array();
        if (structure.structuredTypes != null) {
            array = array.concat(structure.structuredTypes);
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            refStructure => {
                if (refStructure.structuredTypes != null) {
                    array = array.concat(refStructure.structuredTypes);
                }
            }));
        }
        return array;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonStructureConvertor {
    /**
     * @param {?} obj
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, structure, ctxt) {
        if (!structure) {
            return;
        }
        obj['id'] = structure.id;
        obj['uri'] = structure.uri;
        obj['code'] = structure.code;
        obj['name'] = structure.name;
        obj['kind'] = structure.kind;
        obj['description'] = structure.description;
        obj['structuredTypes'] = new Array();
        if (structure.structuredTypes) {
            structure.structuredTypes.forEach((/**
             * @param {?} structuredType
             * @return {?}
             */
            structuredType => {
                /** @type {?} */
                var kind = structuredType.kind;
                /** @type {?} */
                var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                /** @type {?} */
                var structuredTypeObj = serializer.serialize(structuredType, ctxt);
                obj['structuredTypes'].push(structuredTypeObj);
            }));
        }
        obj['refStructures'] = new Array();
        if (structure.refStructures) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            refStructure => {
                /** @type {?} */
                var kind = refStructure.kind;
                /** @type {?} */
                var serializer = ctxt.getStructureSerializerFactory().get(kind);
                /** @type {?} */
                var refStructureObj = serializer.serialize(refStructure, ctxt);
                obj['refStructures'].push(refStructureObj);
            }));
        }
    }
    /**
     * @param {?} structure
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(structure, obj, ctxt) {
        if (!obj) {
            return;
        }
        structure.kind = obj['kind'];
        structure.id = obj['id'];
        structure.uri = obj['uri'];
        structure.code = obj['code'];
        structure.name = obj['name'];
        structure.description = obj['description'];
        if (obj['structuredTypes']) {
            structure.structuredTypes = new Array();
            obj['structuredTypes'].forEach((/**
             * @param {?} structureObj
             * @return {?}
             */
            structureObj => {
                /** @type {?} */
                var kind = structureObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                /** @type {?} */
                var structuredType = (/** @type {?} */ (serializer.deserialize(structureObj, ctxt)));
                structure.structuredTypes.push(structuredType);
                // structure.structuredTypes.push(DataTypeConvertUtil.initFromObject(structureObj) as StructuredType);
            }));
        }
        if (obj['refStructures']) {
            structure.refStructures = new Array();
            obj['refStructures'].forEach((/**
             * @param {?} refTree
             * @return {?}
             */
            refTree => {
                /** @type {?} */
                var kind = refTree['kind'];
                /** @type {?} */
                var refSerializer = ctxt.getStructureSerializerFactory().get(kind);
                /** @type {?} */
                var refStructure = refSerializer.deserialize(refTree, ctxt);
                structure.refStructures.push(refStructure);
                // structure.refStructures.push(CommonStructureConvertUtil.initFromObject(refTree));
            }));
        }
        //替换structuredTypes和refStructures中的propRefer
        ReferReplaceUtil.replacePropertyRefer(structure);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AggregateConvertor {
    /**
     * @param {?} obj
     * @param {?} aggregate
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, aggregate, ctxt) {
        /** @type {?} */
        let structureConvertor = new CommonStructureConvertor();
        structureConvertor.convertToObject(obj, aggregate, ctxt);
        //root
        if (aggregate.root) {
            obj['rootId'] = aggregate.root.id;
        }
    }
    /**
     * @param {?} aggregate
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(aggregate, obj, ctxt) {
        /** @type {?} */
        let structureConvertor = new CommonStructureConvertor();
        structureConvertor.initFromObject(aggregate, obj, ctxt);
        //root
        /** @type {?} */
        let rootId = obj['rootId'];
        if (rootId && aggregate.structuredTypes && aggregate.structuredTypes.length > 0) {
            aggregate.root = aggregate.structuredTypes.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id == rootId));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityObjectConvertor {
    /**
     * @param {?} obj
     * @param {?} entity
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, entity, ctxt) {
        /** @type {?} */
        let aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.convertToObject(obj, entity, ctxt);
        obj['entityRelations'] = entity.entityRelations;
        obj['operations'] = new Array();
        if (entity.operations) {
            entity.operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            op => {
                /** @type {?} */
                var kind = op['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var opObj = serializer.serialize(op, ctxt);
                obj['operations'].push(opObj);
            }));
        }
    }
    /**
     * @param {?} entity
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(entity, obj, ctxt) {
        /** @type {?} */
        let aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.initFromObject(entity, obj, ctxt);
        if (obj['entityRelations']) {
            entity.entityRelations = obj['entityRelations'];
        }
        if (obj['operations']) {
            entity.operations = new Array();
            obj['operations'].forEach((/**
             * @param {?} operationObj
             * @return {?}
             */
            operationObj => {
                /** @type {?} */
                var kind = operationObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var operation = serializer.deserialize(operationObj, ctxt);
                entity.operations.push(operation);
            }));
        }
        /** @type {?} */
        let allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(entity);
        ReferReplaceUtil.replaceOperationRefer(allStructureTypes, entity.operations);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTransferObjectConvertor {
    /**
     * @param {?} obj
     * @param {?} dto
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, dto, ctxt) {
        /** @type {?} */
        let aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.convertToObject(obj, dto, ctxt);
    }
    /**
     * @param {?} dto
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dto, obj, ctxt) {
        /** @type {?} */
        let aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.initFromObject(dto, obj, ctxt);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValueObjectConvertor {
    /**
     * @param {?} obj
     * @param {?} vo
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, vo, ctxt) {
        /** @type {?} */
        let structureConvertor = new CommonStructureConvertor();
        structureConvertor.convertToObject(obj, vo, ctxt);
        //first?
        /** @type {?} */
        var type = vo.dataType;
        obj['structureId'] = type.id;
    }
    /**
     * @param {?} vo
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(vo, obj, ctxt) {
        /** @type {?} */
        let structureConvertor = new CommonStructureConvertor();
        structureConvertor.initFromObject(vo, obj, ctxt);
        //没有root
        /** @type {?} */
        let allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(vo);
        ReferReplaceUtil.replaceOperationRefer(allStructureTypes, vo.operations);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RelationConvertor {
    /**
     * @param {?} relation
     * @return {?}
     */
    convertorToObject(relation) {
        /** @type {?} */
        let obj = new Object();
        if (!relation) {
            return obj;
        }
        obj['ParentPropCode'] = relation.ParentPropCode;
        obj['ChildPropCode'] = relation.ChildPropCode;
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    initFromObject(obj) {
        /** @type {?} */
        let relation = new EntityRelation();
        if (!obj) {
            return relation;
        }
        relation.ParentPropCode = obj['ParentPropCode'];
        relation.ChildPropCode = obj['ChildPropCode'];
        return relation;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RelationDictConvertor {
    /**
     * @param {?} relationDict
     * @return {?}
     */
    convertorToObject(relationDict) {
        return relationDict;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    initFromObject(obj) {
        /** @type {?} */
        let relationDict = new Object();
        if (!obj) {
            return (/** @type {?} */ (relationDict));
        }
        /** @type {?} */
        let pCodeList = Object.keys(obj);
        pCodeList.forEach((/**
         * @param {?} pCode
         * @return {?}
         */
        pCode => {
            /** @type {?} */
            let cDict = obj[pCode];
            if (cDict) {
                relationDict[pCode] = new Object();
                /** @type {?} */
                let cCodeList = Object.keys(cDict);
                cCodeList.forEach((/**
                 * @param {?} cCode
                 * @return {?}
                 */
                cCode => {
                    /** @type {?} */
                    let cValue = cDict[cCode];
                    if (cValue) {
                        relationDict[pCode][cCode] = new Array();
                        cValue.forEach((/**
                         * @param {?} relationObj
                         * @return {?}
                         */
                        relationObj => {
                            /** @type {?} */
                            let relationConvertor = new RelationConvertor();
                            /** @type {?} */
                            let relation = relationConvertor.initFromObject(relationObj);
                            relationDict[pCode][cCode].push(relation);
                        }));
                    }
                }));
            }
        }));
        return (/** @type {?} */ (relationDict));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConstraintConvertor {
    /**
     * @param {?} obj
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, constraint, ctxt) {
        if (!constraint) {
            return;
        }
        switch (constraint.getKind()) {
            case ConstraintConst.DECIMAL:
                /** @type {?} */
                let decimalconstraint = (/** @type {?} */ (constraint));
                obj['scale'] = (/** @type {?} */ (decimalconstraint.scale));
                obj['pricision'] = (/** @type {?} */ (decimalconstraint.pricision));
            case ConstraintConst.STRING:
                /** @type {?} */
                let stringconstraint = (/** @type {?} */ (constraint));
                obj['maxLength'] = (/** @type {?} */ (stringconstraint.maxLength));
            default:
                throw new Error(`约束不支持的${constraint.getKind()}类型！`);
        }
    }
    /**
     * @param {?} constraint
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(constraint, obj, ctxt) {
        if (!obj) {
            return null;
        }
        switch (obj['kind']) {
            case ConstraintConst.DECIMAL:
            case ConstraintConst.STRING:
            default:
                throw new Error(`约束不支持的${obj['kind']}类型！`);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultPrimitiveTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new PrimitiveTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new PrimitiveType();
        /** @type {?} */
        let baseConvertor = new PrimitiveTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultCollectionTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new CollectionTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new CollectionType();
        /** @type {?} */
        let baseConvertor = new CollectionTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultMapTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new MapTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new MapType();
        /** @type {?} */
        let baseConvertor = new MapTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultStructuredTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new StructuredTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new StructuredType();
        /** @type {?} */
        let baseConvertor = new StructuredTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultEntityTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new EntityTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new EntityType();
        /** @type {?} */
        let baseConvertor = new EntityTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultEnumerationTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new EnumerationTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new EnumerationType();
        /** @type {?} */
        let baseConvertor = new EnumerationTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultDataTransferObjectTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new DataTransferObjectTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new DataTransferObjectType();
        /** @type {?} */
        let baseConvertor = new DataTransferObjectTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultValueObjectTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new ValueObjectTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new ValueObjectType();
        /** @type {?} */
        let baseConvertor = new ValueObjectTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultObjectTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new ObjectTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new ObjectType();
        /** @type {?} */
        let baseConvertor = new ObjectTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultDataTypeSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultPrimitiveTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_COLLECTION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultCollectionTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_MAP:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultMapTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_STRUCTURED:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultStructuredTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultDataTransferObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_ENTITY:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEntityTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_VALUE_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultValueObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_ENUMERATION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEnumerationTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未找到类型为${kind}的序列化器！`);
        }
        return this.serializerDict[kind];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * DefaultDataType
 * @type {?}
 */
const DEFAULT_PRIMITIVE_TYPE = "DefaultPrimitiveType";
/** @type {?} */
const DEFAULT_COLLECTION_TYPE = "DefaultCollectionType";
/** @type {?} */
const DEFAULT_MAP_TYPE = "DefaultMapType";
/** @type {?} */
const DEFAULT_STRUCTURED_TYPE = "DefaultStructuredType";
/** @type {?} */
const DEFAULT_DATA_TRANSFER_OBJECT_TYPE = "DefaultDtoType";
/** @type {?} */
const DEFAULT_ENTITY_TYPE = "DefaultEntityType";
/** @type {?} */
const DEFAULT_VALUE_OBJECT_TYPE = "DefaultValueObjectType";
/** @type {?} */
const DEFAULT_ENUMERATION_TYPE = "DefaultEnumType";
/** @type {?} */
const DEFAULT_OBJECT_TYPE = "Object";
/**
 * DefaultElement
 * @type {?}
 */
const DEFAULT_PROPERTY = "DefaultProperty";
/** @type {?} */
const DEFAULT_PARAMETER = "DefaultParameter";
/** @type {?} */
const DEFAULT_OPERATION = "DefaultOperation";
/** @type {?} */
const DEFAULT_MUTILLINGUAL_PROPERTY = "DefaultMultillingualProperty";
/**
 * DefaultStructure
 * @type {?}
 */
const DEFAULT_ENTITY_OBJECT = "DefaultEntityObject";
/** @type {?} */
const DEFAULT_DATA_TRANSFER_OBJECT = "DefaultDataTransferObject";
/** @type {?} */
const DEFAULT_VALUE_OBJECT = "DefaultValueObject";
/**
 * DefaultConstraint
 * @type {?}
 */
const DEFAULT_CONSTRAINT = "DefaultConstraint";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultOperationSerializer {
    /**
     * @param {?} op
     * @param {?} ctxt
     * @return {?}
     */
    serialize(op, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new OperationConvertor();
        baseConvertor.convertToObject(result, op, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new Operation();
        /** @type {?} */
        let baseConvertor = new OperationConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultOperationSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DEFAULT_OPERATION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultOperationSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未匹配到类型为${kind}的序列化器!`);
        }
        return this.serializerDict[kind];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultParameterSerializer {
    /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    serialize(param, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new ParameterConvertor();
        baseConvertor.convertToObject(result, param, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new Parameter();
        /** @type {?} */
        let baseConvertor = new ParameterConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultParameterSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DEFAULT_PARAMETER:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultParameterSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未匹配到类型为${kind}的序列化器!`);
        }
        return this.serializerDict[kind];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultProeprtySerializer {
    /**
     * @param {?} prop
     * @param {?} ctxt
     * @return {?}
     */
    serialize(prop, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new PropertyConvertor();
        baseConvertor.convertToObject(result, prop, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new Property();
        /** @type {?} */
        let baseConvertor = new PropertyConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultPropertySerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DEFAULT_PROPERTY:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultProeprtySerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未匹配到类型为${kind}的序列化器!`);
        }
        return this.serializerDict[kind];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultEntityObjectSerializer {
    /**
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    serialize(structure, ctxt) {
        /** @type {?} */
        let result = new Object();
        //使用基本的序列化器
        /** @type {?} */
        let baseConvertor = new EntityObjectConvertor();
        /** @type {?} */
        let entity = (/** @type {?} */ (structure));
        baseConvertor.convertToObject(result, entity, ctxt);
        //Cando:增加自己对Object的扩展
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new EntityObject();
        /** @type {?} */
        let baseConvertor = new EntityObjectConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultValueObjectSerializer {
    /**
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    serialize(structure, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new ValueObjectConvertor();
        /** @type {?} */
        let valueObject = (/** @type {?} */ (structure));
        baseConvertor.convertToObject(result, valueObject, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new ValueObject();
        /** @type {?} */
        let baseConvertor = new ValueObjectConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultDataTransferObjectSerializer {
    /**
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    serialize(structure, ctxt) {
        /** @type {?} */
        let result = new DataTransferObject();
        /** @type {?} */
        let baseConvertor = new DataTransferObjectConvertor();
        /** @type {?} */
        let dto = (/** @type {?} */ (structure));
        baseConvertor.convertToObject(result, dto, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new DataTransferObject();
        /** @type {?} */
        let baseConvertor = new DataTransferObjectConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultStructureSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DEFAULT_ENTITY_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEntityObjectSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DEFAULT_VALUE_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultValueObjectSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DEFAULT_DATA_TRANSFER_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultDataTransferObjectSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未匹配到类型为${kind}的序列化器!`);
        }
        return this.serializerDict[kind];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultConstraintSerializer {
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    serialize(constraint, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new ConstraintConvertor();
        baseConvertor.convertToObject(result, constraint, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        throw new Error("Method not implemented.");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultConstraintSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DEFAULT_CONSTRAINT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultConstraintSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未匹配到类型为${kind}的序列化器!`);
        }
        return this.serializerDict[kind];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultSerializeContext {
    /**
     * @return {?}
     */
    getDataTypeSerializerFactory() {
        if (!this.dataTypeFactory) {
            this.dataTypeFactory = new DefaultDataTypeSerializerFactory();
        }
        return this.dataTypeFactory;
    }
    /**
     * @return {?}
     */
    getOperationSerializerFactory() {
        if (!this.operationFactory) {
            this.operationFactory = new DefaultOperationSerializerFactory();
        }
        return this.operationFactory;
    }
    /**
     * @return {?}
     */
    getParameterSerializerFactory() {
        if (!this.parameterFactory) {
            this.parameterFactory = new DefaultParameterSerializerFactory();
        }
        return this.parameterFactory;
    }
    /**
     * @return {?}
     */
    getPropertySerializerFactory() {
        if (!this.propertyFactory) {
            this.propertyFactory = new DefaultPropertySerializerFactory();
        }
        return this.propertyFactory;
    }
    /**
     * @return {?}
     */
    getStructureSerializerFactory() {
        if (!this.structureFactory) {
            this.structureFactory = new DefaultStructureSerializerFactory();
        }
        return this.structureFactory;
    }
    /**
     * @return {?}
     */
    getConstraintSerializerFactory() {
        if (!this.constraintFactory) {
            this.constraintFactory = new DefaultConstraintSerializerFactory();
        }
        return this.constraintFactory;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonStructureDTService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.commom_structure_url = '/api/dev/main/v1.0/common-structure';
    }
    /**
     * N版获取CommonStructure
     * @param {?} id 元数据Id
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    get(id, headers) {
        /** @type {?} */
        let url = this.commom_structure_url + '?id=' + id;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} obj
         * @return {?}
         */
        obj => {
            //使用默认serializeContext进行反序列化
            /** @type {?} */
            let serializeCtxt = new DefaultSerializeContext();
            /** @type {?} */
            let kind = obj['kind'];
            /** @type {?} */
            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
            return (/** @type {?} */ (serializer.deserialize(obj, serializeCtxt)));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            alert("获取通用数据结构失败！");
            return null;
        })));
    }
    ;
}
CommonStructureDTService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommonStructureDTService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonStructureRTService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.commom_structure_url = '/api/runtime/sys/v1.0/common-structure';
    }
    /**
     * 获取CommonStructure
     * @param {?} id 元数据Id
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    get(id, headers) {
        /** @type {?} */
        let url = this.commom_structure_url + '?id=' + id;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} obj
         * @return {?}
         */
        obj => {
            //使用默认serializeContext进行反序列化
            /** @type {?} */
            let serializeCtxt = new DefaultSerializeContext();
            /** @type {?} */
            let kind = obj['kind'];
            /** @type {?} */
            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
            return (/** @type {?} */ (serializer.deserialize(obj, serializeCtxt)));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            alert("获取通用数据结构失败！");
            return null;
        })));
    }
    ;
}
CommonStructureRTService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommonStructureRTService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { CodeRuleSelectModule } from './test/code-rule-select.module';
class CommonStructureModule {
}
CommonStructureModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    // CodeRuleSelectModule,
                    HttpClientModule
                ],
                declarations: [],
                providers: [CommonStructureDTService, CommonStructureRTService],
                exports: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CommonStructure, Aggregate, EntityObject, DataTransferObject, ValueObject, EntityRelation, Operation, Parameter, Property, DataType, CollectionType, MapType, PrimitiveType, StructuredType, EntityType, DataTransferObjectType, ValueObjectType, EnumerationType, EnumerationItem, ObjectType, DecimalConstraint, StringConstraint, CommonStructureConst, ConstraintConst, DataTypeConst, ElementConstant, PrimitiveTypeKind, CollectionTypeConvertor, MapTypeConvertor, PrimitiveTypeConvertor, ObjectTypeConvertor, StructuredTypeConvertor, DataTransferObjectTypeConvertor, EntityTypeConvertor, ValueObjectTypeConvertor, EnumerationTypeConvertor, EnumerationItemConvertor, OperationConvertor, ParameterConvertor, PropertyConvertor, CommonStructureConvertor, AggregateConvertor, EntityObjectConvertor, DataTransferObjectConvertor, ValueObjectConvertor, RelationConvertor, RelationDictConvertor, ConstraintConvertor, DataTypeConvertUtil, ReferReplaceUtil, DefaultSerializeContext, DefaultDataTypeSerializerFactory, DefaultOperationSerializerFactory, DefaultParameterSerializerFactory, DefaultPropertySerializerFactory, DefaultStructureSerializerFactory, DefaultCollectionTypeSerializer, DefaultDataTransferObjectSerializer, DefaultDataTransferObjectTypeSerializer, DefaultEntityObjectSerializer, DefaultEntityTypeSerializer, DefaultEnumerationTypeSerializer, DefaultMapTypeSerializer, DefaultOperationSerializer, DefaultParameterSerializer, DefaultPrimitiveTypeSerializer, DefaultProeprtySerializer, DefaultStructuredTypeSerializer, DefaultValueObjectSerializer, DefaultValueObjectTypeSerializer, DefaultConstraintSerializer, CommonStructureModule, CommonStructureDTService, CommonStructureRTService, DEFAULT_PRIMITIVE_TYPE, DEFAULT_COLLECTION_TYPE, DEFAULT_MAP_TYPE, DEFAULT_STRUCTURED_TYPE, DEFAULT_DATA_TRANSFER_OBJECT_TYPE, DEFAULT_ENTITY_TYPE, DEFAULT_VALUE_OBJECT_TYPE, DEFAULT_ENUMERATION_TYPE, DEFAULT_OBJECT_TYPE, DEFAULT_PROPERTY, DEFAULT_PARAMETER, DEFAULT_OPERATION, DEFAULT_MUTILLINGUAL_PROPERTY, DEFAULT_ENTITY_OBJECT, DEFAULT_DATA_TRANSFER_OBJECT, DEFAULT_VALUE_OBJECT, DEFAULT_CONSTRAINT, Extension as ɵa };

//# sourceMappingURL=ecp-caf-common-structure.js.map