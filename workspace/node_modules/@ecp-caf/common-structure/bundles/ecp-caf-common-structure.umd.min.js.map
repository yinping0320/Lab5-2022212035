{"version":3,"sources":["ng://@ecp-caf/common-structure/lib/define/structure/common-structure.ts","node_modules/tslib/tslib.es6.js","ng://@ecp-caf/common-structure/lib/define/structure/aggregate.ts","ng://@ecp-caf/common-structure/lib/define/constant/common-structure-const.ts","ng://@ecp-caf/common-structure/lib/define/structure/entity-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/data-transfer-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/value-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/entity-relation.ts","ng://@ecp-caf/common-structure/lib/define/constant/element-const.ts","ng://@ecp-caf/common-structure/lib/extension.ts","ng://@ecp-caf/common-structure/lib/define/operation/operation.ts","ng://@ecp-caf/common-structure/lib/define/parameter/parameter.ts","ng://@ecp-caf/common-structure/lib/define/property/property.ts","ng://@ecp-caf/common-structure/lib/define/data-type/data-type.ts","ng://@ecp-caf/common-structure/lib/define/constant/data-type-const.ts","ng://@ecp-caf/common-structure/lib/define/data-type/collection-type/collection-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/map-type/map-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/primitive-type/primitive-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/structured-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/entity-type/entity-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/value-object-type/value-object-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/enumeration-type/enumeration-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/enumeration-type/enumeration-item.ts","ng://@ecp-caf/common-structure/lib/define/data-type/object-type/object-type.ts","ng://@ecp-caf/common-structure/lib/define/constant/constraint-const.ts","ng://@ecp-caf/common-structure/lib/define/constraint/decimal-constraint.ts","ng://@ecp-caf/common-structure/lib/define/constraint/string-constraint.ts","ng://@ecp-caf/common-structure/lib/define/data-type/primitive-type/primitive-type-kind.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type-refer-type/structured-refer-type.ts","ng://@ecp-caf/common-structure/lib/convertor/utils/data-type-convert-util.ts","ng://@ecp-caf/common-structure/lib/convertor/extension/extension-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/collection-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/map-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/primitive-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/property/property-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/structured-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/data-transfer-object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/entity-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/value-object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/enumeration-item-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/enumeration-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/parameter/parameter-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/operation/operation-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/utils/refer-replace-util.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/common-structure-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/aggregate-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/entity-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/data-transfer-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/value-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/relation-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/relation-dict-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/constraint/constraint-convertor.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-primitive-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-collection-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-map-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-structured-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-entity-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-enumeration-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-dto-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-vo-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-object-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-data-type-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/default-constant.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-operation-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-operation-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-parameter-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-parameter-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-property-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-property-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-entity-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-value-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-data-transfer-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-structure-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-constraint-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-constraint-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/default-serialize-context.ts","ng://@ecp-caf/common-structure/lib/service/design-time/common-structure-dt-service.ts","ng://@ecp-caf/common-structure/lib/service/run-time/common-structure-rt-service.ts","ng://@ecp-caf/common-structure/lib/common-structure.module.ts"],"names":["CommonStructure","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","tslib_1.__extends","Aggregate","CommonStructureConst","DEFAULT_ENTITY_OBJECT","DEFAULT_DATA_TRANSFER_OBJECT","DEFAULT_VALUE_OBJECT","EntityObject","_this","_super","call","kind","DataTransferObject","ValueObject","EntityRelation","ElementConstant","DEFAULT_MULTILLINGUAL_PROPERTY","DEFAULT_OPERATION","DEFAULT_PARAMETER","DEFAULT_PROPERTY","Extension","getKeys","result","key","extension","push","getValue","Operation","Parameter","Property","DataType","getKind","DataTypeConst","DEFAULT_PRIMITIVE","DEFAULT_COLLECTION","DEFAULT_MAP","DEFAULT_OBJECT","DEFAULT_STRUCTURED","DEFAULT_ENTITY","DEFAULT_ENUMERATION","STRUCTURED_REF","CollectionType","MapType","PrimitiveType","StructuredType","EntityType","DataTransferObjectType","ValueObjectType","EnumerationType","EnumerationItem","ObjectType","ConstraintConst","STRING","DECIMAL","DecimalConstraint","StringConstraint","String","Bool","Int16","Int32","Int64","Float","Double","Decimal","DateTime","TimeStamp","Byte","StructuredReferType","DataTypeConvertUtil","convertToObject","datatype","ctxt","id","getDataTypeSerializerFactory","get","serialize","initFromObject","obj","refId","deserialize","ExtensionConvertor","addToJObj","extensionObj","jObj","addToObj","CollectionTypeConvertor","collectiontype","elementType","Error","dataType","collectionType","MapTypeConvertor","maptype","keyType","valueType","PrimitiveTypeConvertor","primitivetype","primitiveTypeKindNum","primitiveTypeKind","ObjectTypeConvertor","objectType","PropertyConvertor","property","code","name","description","defaultValue","propertyType","constraint","getConstraintSerializerFactory","required","StructuredTypeConvertor","structure","properties","forEach","propertyObj","getPropertySerializerFactory","propKind","DataTransferObjectTypeConvertor","EntityTypeConvertor","entityType","primaryKeys","element","ValueObjectTypeConvertor","EnumerationItemConvertor","item","value","enumItem","EnumerationTypeConvertor","enumerationType","enumerationItems","convertor_1","itemObj","convertor_2","ParameterConvertor","parameter","parameterType","OperationConvertor","operation","uri","returnType","parameters","parameterObj","getParameterSerializerFactory","ReferReplaceUtil","replaceOperationRefer","allStructureTypes","operations","op","retType","structureTypeId","queryStructureType","getRefStructureType","replacePropertyRefer","allStructures","getAllStructuredTypes","structuredTypes","structureType","prop","refStructures","refStructure","structureId","find","x","array","concat","CommonStructureConvertor","structuredType","structuredTypeObj","refStructureObj","getStructureSerializerFactory","structureObj","refTree","AggregateConvertor","aggregate","root","rootId","length","EntityObjectConvertor","entity","entityRelations","opObj","getOperationSerializerFactory","operationObj","DataTransferObjectConvertor","dto","ValueObjectConvertor","vo","type","RelationConvertor","convertorToObject","relation","ParentPropCode","ChildPropCode","RelationDictConvertor","relationDict","keys","pCode","cDict","cCode","cValue","relationObj","ConstraintConvertor","decimalconstraint","stringconstraint","DefaultPrimitiveTypeSerializer","DefaultCollectionTypeSerializer","DefaultMapTypeSerializer","DefaultStructuredTypeSerializer","DefaultEntityTypeSerializer","DefaultEnumerationTypeSerializer","DefaultDataTransferObjectTypeSerializer","DefaultValueObjectTypeSerializer","DefaultObjectTypeSerializer","DefaultDataTypeSerializerFactory","serializerDict","serializer","DEFAULT_CONSTRAINT","DefaultOperationSerializer","DefaultOperationSerializerFactory","DefaultParameterSerializer","param","DefaultParameterSerializerFactory","DefaultProeprtySerializer","DefaultPropertySerializerFactory","DefaultEntityObjectSerializer","DefaultValueObjectSerializer","valueObject","DefaultDataTransferObjectSerializer","DefaultStructureSerializerFactory","DefaultConstraintSerializer","DefaultConstraintSerializerFactory","DefaultSerializeContext","dataTypeFactory","operationFactory","parameterFactory","propertyFactory","structureFactory","constraintFactory","CommonStructureDTService","headers","url","commom_structure_url","http","pipe","map","serializeCtxt","error","alert","Injectable","HttpClient","CommonStructureRTService","CommonStructureModule","NgModule","args","imports","CommonModule","HttpClientModule","declarations","providers","exports"],"mappings":"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","sourcesContent":["import { StructuredType } from '../data-type/structured-type/structured-type';\r\n\r\nexport class CommonStructure{\r\n    id:string;\r\n    code:string;\r\n    name:string;\r\n    uri:string;\r\n    description:string;\r\n    kind:string;\r\n    structuredTypes:Array<StructuredType>;\r\n    refStructures:Array<CommonStructure>;\r\n    \r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { CommonStructure } from './common-structure';\r\nimport { StructuredType } from '../data-type/structured-type/structured-type';\r\n\r\nexport class Aggregate extends CommonStructure{\r\n\r\n    root:StructuredType\r\n\r\n}\r\n","export class CommonStructureConst{\r\n    private constructor(){}\r\n    \r\n    static readonly DEFAULT_ENTITY_OBJECT = \"DefaultEntityObject\";\r\n    static readonly DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDataTransferObject\";\r\n    static readonly DEFAULT_VALUE_OBJECT = \"DefaultValueObject\";\r\n\r\n    \r\n \r\n}","import { EntityRelation } from './entity-relation';\r\nimport { Operation } from '../operation/operation';\r\nimport { Aggregate } from './aggregate';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class EntityObject extends Aggregate{\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_ENTITY_OBJECT;\r\n    }\r\n    entityRelations:{string:{string:Array<EntityRelation>}};\r\n    operations:Array<Operation>;\r\n\r\n}","import { Aggregate } from './aggregate';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class DataTransferObject extends Aggregate{\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT;\r\n    }\r\n\r\n}","import { CommonStructure } from './common-structure';\r\nimport { ValueObjectType } from '../data-type/structured-type/value-object-type/value-object-type';\r\nimport { Operation } from '../operation/operation';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class ValueObject extends CommonStructure {\r\n    dataType: ValueObjectType;\r\n    operations: Array<Operation>;\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_VALUE_OBJECT;\r\n    }\r\n\r\n}","export class EntityRelation {\r\n\r\n    ParentPropCode: string;\r\n\r\n    ChildPropCode: string;\r\n}","export class ElementConstant{\r\n    private constructor(){}\r\n\r\n    static readonly DEFAULT_MULTILLINGUAL_PROPERTY = \"DefaultMultillingualProperty\";\r\n    static readonly DEFAULT_OPERATION = \"DefaultOperation\";\r\n    static readonly DEFAULT_PARAMETER = \"DefaultParameter\";\r\n    static readonly DEFAULT_PROPERTY = \"DefaultProperty\";\r\n}","import { IExtension } from './i-extension';\r\n\r\nexport class Extension implements IExtension {\r\n\r\n    extension: { [key: string]: string };\r\n\r\n    getKeys(): any[] {\r\n        let result = new Array<string>();\r\n        for (let key in this.extension) {\r\n            result.push(key);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getValue(key: any) {\r\n        this.extension[key];\r\n    }\r\n}","import { Parameter } from '../parameter/parameter';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Operation extends Extension {\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    uri: string;\r\n    parameters: Array<Parameter>;\r\n    returnType:IDataType;\r\n    kind:string;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_OPERATION;\r\n    }\r\n}","import { IConstraint } from '../constraint/i-constraint';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Parameter extends Extension {\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n    defaultValue: any;\r\n    parameterType:IDataType;\r\n    constraint: IConstraint;\r\n    kind:string;\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_PARAMETER;\r\n    }\r\n}","import { IConstraint } from '../constraint/i-constraint';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Property extends Extension{\r\n    id:string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n    defaultValue: any;\r\n    propertyType: IDataType;\r\n    kind:string;\r\n    constraint: IConstraint;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_PROPERTY;\r\n    }\r\n}","import { IDataType } from './i-data-type';\r\nimport { Extension } from '../../extension';\r\n\r\nexport abstract class DataType extends Extension  implements IDataType{\r\n    \r\n    kind:string;\r\n\r\n    getKind():string{\r\n        return this.kind;\r\n    }\r\n}","export class DataTypeConst{\r\n    private constructor(){}\r\n\r\n    static readonly DEFAULT_PRIMITIVE = \"DefaultPrimitiveType\";\r\n    static readonly DEFAULT_COLLECTION = \"DefaultCollectionType\";\r\n    static readonly DEFAULT_MAP = \"DefaultMapType\";\r\n    static readonly DEFAULT_OBJECT=\"Object\";\r\n    static readonly DEFAULT_STRUCTURED=\"DefaultStructuredType\"\r\n\r\n    static readonly DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDtoType\";\r\n    static readonly DEFAULT_ENTITY = \"DefaultEntityType\";\r\n    static readonly DEFAULT_VALUE_OBJECT = \"DefaultValueObjectType\";\r\n    static readonly DEFAULT_ENUMERATION = \"DefaultEnumType\";\r\n    \r\n    static readonly STRUCTURED_REF = \"RefStructuredType\";\r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * éåç±»å\r\n */\r\nexport class CollectionType extends DataType implements IDataType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_COLLECTION;\r\n    }\r\n\r\n    /**\r\n     * åç´ ç±»åï¼å¦List<T>ä¸­Tçç±»å\r\n     */\r\n    elementType:IDataType;\r\n    \r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * Mapç±»å\r\n */\r\nexport class MapType extends DataType implements IDataType\r\n{\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_MAP;\r\n    }\r\n\r\n    /**\r\n     * é®çç±»å\r\n     */\r\n    keyType:IDataType;\r\n\r\n    /**\r\n     * å¼çç±»å\r\n     */\r\n    valueType:IDataType;\r\n}","import { PrimitiveTypeKind } from './primitive-type-kind';\r\nimport { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * åçç±»å\r\n */\r\nexport class PrimitiveType extends DataType implements IDataType {\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_PRIMITIVE;\r\n    }\r\n\r\n    /**\r\n     * è·ååçç±»åï¼å¦Int,Bool,Float,Doubleç­åºæ¬ç±»å\r\n     */\r\n    primitiveTypeKind: PrimitiveTypeKind;\r\n}","import { Property } from '../../property/property';\r\nimport { DataType } from '../data-type';\r\nimport { IDataType } from '../i-data-type';\r\nimport { CommonStructure } from '../../structure/common-structure';\r\n\r\n/**\r\n * ç»æä½ç±»å\r\n */\r\nexport class StructuredType extends DataType implements IDataType {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    properties: Array<Property>;\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class EntityType extends StructuredType{\r\n    primaryKeys:Array<string>;\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_ENTITY;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class DataTransferObjectType extends StructuredType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class ValueObjectType extends StructuredType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_VALUE_OBJECT;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\nimport { EnumerationItem } from './enumeration-item';\r\n\r\nexport class EnumerationType extends StructuredType{\r\n\r\n    enumerationItems:Array<EnumerationItem>;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_ENUMERATION;\r\n    }\r\n}","export class EnumerationItem{\r\n    code:string;\r\n    value:string;\r\n    description:string;\r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\nexport class ObjectType extends DataType implements IDataType{\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_OBJECT;\r\n    }\r\n\r\n    getKind(): string {\r\n       return this.kind;\r\n    }    \r\n\r\n}","export class ConstraintConst{\r\n\r\n    private constructor(){}\r\n    static readonly STRING: string = \"StringConstraint\";\r\n    static readonly DECIMAL: string = \"DecimalConstraint\";\r\n \r\n}","import { IConstraint } from './i-constraint';\r\nimport { ConstraintConst } from '../constant/constraint-const';\r\n\r\nexport class DecimalConstraint implements IConstraint{\r\n\r\n    getKind(): string {\r\n        return ConstraintConst.DECIMAL;\r\n    }\r\n    \r\n    scale:number;\r\n    pricision:number;\r\n}","import { IConstraint } from './i-constraint';\r\nimport { ConstraintConst } from '../constant/constraint-const';\r\n\r\nexport class StringConstraint implements IConstraint{\r\n\r\n    getKind(): string {\r\n        return ConstraintConst.STRING;\r\n    }\r\n    \r\n    maxLength:number;\r\n}","export enum PrimitiveTypeKind {\r\n    // String = 0,\r\n    // Bool = 1,\r\n    // Int16 = 2,\r\n    // Int32 = 3,\r\n    // Int64 = 4,\r\n    // Float = 5,\r\n    // Double = 6,\r\n    // Decimal = 7,\r\n    // DateTime = 8,\r\n    // TimeStamp = 9,\r\n    // Byte=10 ,\r\n    String,\r\n    Bool,\r\n    Int16,\r\n    Int32,\r\n    Int64,\r\n    Float,\r\n    Double,\r\n    Decimal,\r\n    DateTime,\r\n    TimeStamp,\r\n    Byte\r\n}","\r\nimport { DataType } from '../data-type';\r\nimport { IDataType } from '../i-data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * Mapç±»å\r\n */\r\nexport class StructuredReferType extends DataType implements IDataType{\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.STRUCTURED_REF;\r\n    }\r\n   \r\n    /**\r\n     * structuredId\r\n     */\r\n    refId:string;\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\n\r\nexport class DataTypeConvertUtil {\r\n\r\n    static convertToObject(datatype: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        if (datatype instanceof StructuredType) {\r\n            result['kind'] = \"RefStructuredType\";\r\n            result[\"isRefer\"] = true;\r\n            result[\"refId\"] = datatype.id;\r\n        }\r\n        else {\r\n            var kind = datatype.getKind();\r\n            result[\"kind\"] = kind;\r\n            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);\r\n            result = serializer.serialize(datatype, ctxt);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static initFromObject(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result: IDataType;\r\n        if (obj['isRefer'] != null) {\r\n            result = new StructuredReferType();\r\n            (result as StructuredReferType).refId = obj['refId'];\r\n        }\r\n        else {\r\n            var kind = obj[\"kind\"];\r\n            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);\r\n            result = serializer.deserialize(obj, ctxt);\r\n        }\r\n        return result;\r\n        // switch (obj[\"kind\"]) {\r\n        //     case DataTypeConst.DEFAULT_PRIMITIVE:\r\n        //         let primitiveKindConvertor = new PrimitiveTypeConvertor();\r\n        //         return primitiveKindConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_COLLECTION:\r\n        //         let collectionConvertor = new CollectionTypeConvertor();\r\n        //         return collectionConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_MAP:\r\n        //         let mapConvertor = new MapTypeConvertor();\r\n        //         return mapConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_STRUCTURED:\r\n        //         let structureConvertor = new StructuredTypeConvertor();\r\n        //         return structureConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_ENTITY:\r\n        //         let entityConvertor = new StructuredTypeConvertor();\r\n        //         return entityConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_VALUE_OBJECT:\r\n        //         let voConvertor = new StructuredTypeConvertor();\r\n        //         return voConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:\r\n        //         let dtoConvertor = new StructuredTypeConvertor();\r\n        //         return dtoConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_ENUMERATION:\r\n        //         let enumerationConvertor = new StructuredTypeConvertor();\r\n        //         return enumerationConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.STRUCTURED_REF:\r\n        //         let structureRefConvertor = new StructuredTypeReferConvertor();\r\n        //         return structureRefConvertor.initFromObject(obj);\r\n        //     default:\r\n        //         throw new Error(`æ°æ®ç±»åä¸æ¯æç${obj[\"kind\"]}ç±»åï¼`);\r\n        // }\r\n    }\r\n}","import { Extension } from '../../extension';\r\n\r\nexport class ExtensionConvertor{\r\n\r\n    addToJObj(extensionObj:Extension,jObj:Object){\r\n        jObj['extension'] = extensionObj.extension;\r\n\r\n    }\r\n\r\n    addToObj(extensionObj:Extension,jObj:Object){\r\n        if (jObj['extension']) {\r\n            extensionObj.extension = jObj['extension'];\r\n        }\r\n    }\r\n}","import { CollectionType } from '../../define/data-type/collection-type/collection-type';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class CollectionTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let collectiontype = datatype as CollectionType;\r\n        obj['kind'] = collectiontype.kind;\r\n        obj['elementType'] = null;\r\n        if (collectiontype.elementType) {\r\n            let kind = collectiontype.elementType.getKind();\r\n            if (!kind) {\r\n                throw new Error('éåç±»ååºååæ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['elementType'] = DataTypeConvertUtil.convertToObject(collectiontype.elementType, ctxt);\r\n        }\r\n\r\n        if (collectiontype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(collectiontype, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        var collectionType = dataType as CollectionType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        collectionType.kind = obj['kind'];\r\n        if (obj['elementType']) {\r\n            let kind = obj['elementType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æCollectionTypeæ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            collectionType.elementType = DataTypeConvertUtil.initFromObject(obj['elementType'], ctxt);\r\n        }\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(collectionType, obj);\r\n        }\r\n    }\r\n}","import { MapType } from '../../define/data-type/map-type/map-type';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class MapTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n\r\n        let maptype = datatype as MapType;\r\n        obj['kind'] = maptype.kind;\r\n        obj['keyType'] = null;\r\n        if (maptype.keyType) {\r\n            let kind = maptype.keyType.getKind();\r\n            if (!kind) {\r\n                throw new Error('Mapç±»ååºååæ¶KeyTypeçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);\r\n        }\r\n\r\n        obj['valueType'] = null;\r\n        if (maptype.valueType) {\r\n            let kind = maptype.valueType.getKind();\r\n            if (!kind) {\r\n                throw new Error('Mapç±»ååºååæ¶ValueTypeçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);\r\n        }\r\n\r\n        if (maptype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(maptype, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let maptype = dataType as MapType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        maptype.kind = obj['kind'];\r\n\r\n        if (obj['keyType']) {\r\n            let kind = obj['keyType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æMapTypeçKeyTypeå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);\r\n        }\r\n\r\n        if (obj['valueType']) {\r\n            let kind = obj['valueType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æMapTypeçValueTypeå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(maptype, obj);\r\n        }\r\n    }\r\n}","import { PrimitiveType } from '../../define/data-type/primitive-type/primitive-type';\r\nimport { PrimitiveTypeKind } from '../../define/data-type/primitive-type/primitive-type-kind';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class PrimitiveTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let primitivetype = datatype as PrimitiveType;\r\n        obj['kind'] = primitivetype.kind;\r\n        //è¿æ¯number\r\n        let primitiveTypeKindNum = primitivetype.primitiveTypeKind;\r\n        obj['primitiveTypeKind'] = primitiveTypeKindNum;\r\n\r\n        if (primitivetype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(primitivetype, obj);\r\n        }\r\n        \r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let primitivetype = dataType as PrimitiveType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        primitivetype.kind = obj['kind'];\r\n        primitivetype.primitiveTypeKind = obj['primitiveTypeKind'] as number;\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(primitivetype, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ObjectType } from '../../define/data-type/object-type/object-type';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class ObjectTypeConvertor {\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let objectType = datatype as ObjectType;\r\n        obj['kind'] = objectType.kind;\r\n\r\n        if (objectType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(objectType, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let objectType = dataType as ObjectType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        objectType.kind = obj['kind'];\r\n\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(objectType, obj);\r\n        }\r\n    }\r\n}","import { Property } from '../../define/property/property';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class PropertyConvertor {\r\n\r\n    convertToObject(obj: Object, property: Property, ctxt: ISerializeContext): void {\r\n        if (!property) {\r\n            return;\r\n        }\r\n        obj['kind'] = property.kind;\r\n        obj['id'] = property.id;\r\n        obj['code'] = property.code;\r\n        obj['name'] = property.name;\r\n        obj['description'] = property.description;\r\n        obj['defaultValue'] = property.defaultValue;\r\n        obj['required'] = <boolean>property.required;\r\n\r\n        if (property.propertyType) {\r\n            let kind = property.propertyType.getKind();\r\n            if (!kind) {\r\n                throw new Error('å±æ§åºååæ¶å±æ§ç±»åè·åTypeKindä¸ºç©ºæ ¼ï¼');\r\n            }\r\n            obj['propertyType'] = DataTypeConvertUtil.convertToObject(property.propertyType, ctxt);\r\n        }\r\n        obj['constraint'] = null;\r\n\r\n        if (property.constraint) {\r\n            let kind = property.constraint.getKind();\r\n            if (!kind) {\r\n                throw new Error('å±æ§åºååæ¶å±æ§çº¦æè·åConstraintKindä¸ºç©ºæ ¼ï¼');\r\n            }\r\n            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(property.constraint,ctxt);\r\n        }\r\n\r\n        if (property.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(property, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(property: Property, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        property.kind = obj['kind'];\r\n        property.id = obj['id'];\r\n        property.code = obj['code'];\r\n        property.name = obj['name'];\r\n        property.defaultValue = obj['defaultValue'];\r\n        property.required = obj['required'] as boolean;\r\n        property.description = obj['description'];\r\n\r\n        if (obj['propertyType']) {\r\n            let kind = obj['propertyType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            property.propertyType = DataTypeConvertUtil.initFromObject(obj['propertyType'], ctxt);\r\n        }\r\n        if (obj['constraint']) {\r\n            let kind = obj['constraint']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æå±æ§æ¶çº¦æç±»åçConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            property.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'],ctxt);\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(property, obj);\r\n        }\r\n    }\r\n}","import { Property } from '../../define/property/property';\r\nimport { PropertyConvertor } from '../property/property-convertor';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { CommonStructureConvertor } from '../structure/common-structure-convertor';\r\nimport { CommonStructure } from '../../define/structure/common-structure';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class StructuredTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structure = datatype as StructuredType;\r\n        if (!structure) {\r\n            return;\r\n        }\r\n        obj['kind'] = structure.kind;\r\n        obj['id'] = structure.id;\r\n        obj['code'] = structure.code;\r\n        obj['name'] = structure.name;\r\n        obj['description'] = structure.description;\r\n        obj['properties'] = new Array<Object>();\r\n        if (structure.properties) {\r\n            let propertyConvertor = new PropertyConvertor();\r\n            structure.properties.forEach(property => {\r\n                var kind = property.kind;\r\n                var serializer = ctxt.getPropertySerializerFactory().get(kind);\r\n                var propertyObj = serializer.serialize(property, ctxt);\r\n                obj['properties'].push(propertyObj);\r\n            });\r\n        }\r\n\r\n        if (structure.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(structure, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structure = dataType as StructuredType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        structure.kind = obj['kind'];\r\n        structure.id = obj['id'];\r\n        structure.name = obj['name'];\r\n        structure.code = obj['code'];\r\n        structure.description = obj['description'];\r\n\r\n        if (obj['properties']) {\r\n            structure.properties = new Array<Property>();\r\n            let propertyConvertor = new PropertyConvertor();\r\n            obj['properties'].forEach(propertyObj => {\r\n                var propKind = propertyObj[\"kind\"];\r\n                var serializer = ctxt.getPropertySerializerFactory().get(propKind);\r\n                var property = serializer.deserialize(propertyObj, ctxt);\r\n                structure.properties.push(property);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(structure, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { DataTransferObjectType } from '../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { CommonStructureConvertor } from '../structure/common-structure-convertor';\r\n\r\nexport class DataTransferObjectTypeConvertor{\r\n    convertToObject(obj:Object,datatype:IDataType,ctxt:ISerializeContext):void{\r\n        let structuredConvertor: StructuredTypeConvertor=new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj,datatype,ctxt);\r\n    }\r\n\r\n    initFromObject(dataType:IDataType,obj:Object,ctxt:ISerializeContext):void{\r\n        let structuredConvertor: StructuredTypeConvertor=new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType,obj,ctxt) ;\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { EntityType } from '../../define/data-type/structured-type/entity-type/entity-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class EntityTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        let result = structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n        result['primaryKeys'] = new Array<string>();\r\n        let entityType = datatype as EntityType;\r\n        if (entityType.primaryKeys) {\r\n            entityType.primaryKeys.forEach(element => {\r\n                result['primaryKeys'].push(element);\r\n            });\r\n        }\r\n\r\n        if (entityType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(entityType, obj);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let entityType = dataType as EntityType;\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n        if (obj['primaryKey']) {\r\n            entityType.primaryKeys = new Array<string>();\r\n            obj['primaryKey'].forEach(element => {\r\n                entityType.primaryKeys.push(element);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(entityType, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { ValueObjectType } from '../../define/data-type/structured-type/value-object-type/value-object-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\n\r\nexport class ValueObjectTypeConvertor {\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n    }\r\n}","import { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';\r\n\r\nexport class EnumerationItemConvertor{\r\n    convertToObject(obj:Object,item: EnumerationItem): void {\r\n        obj['code'] = item.code;\r\n        obj['value'] = item.value;\r\n        obj['description'] = item.description;\r\n    }\r\n\r\n    initFromObject(item:EnumerationItem,obj: Object): void {\r\n        let enumItem = item as EnumerationItem;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        enumItem.code = obj['code'];\r\n        enumItem.value = obj['value'];\r\n        enumItem.description = obj['description'];\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { EntityType } from '../../define/data-type/structured-type/entity-type/entity-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { EnumerationType } from '../../define/data-type/structured-type/enumeration-type/enumeration-type';\r\nimport { EnumerationItemConvertor } from './enumeration-item-convertor';\r\nimport { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class EnumerationTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n        let enumerationType = datatype as EnumerationType;\r\n        //enum items\r\n        obj['enumerationItems'] = new Array<Object>();\r\n        if (enumerationType.enumerationItems) {\r\n            let convertor: EnumerationItemConvertor = new EnumerationItemConvertor();\r\n            enumerationType.enumerationItems.forEach(item => {\r\n                let itemObj = new Object();\r\n                convertor.convertToObject(itemObj, item);\r\n                obj['enumerationItems'].push(itemObj);\r\n            });\r\n        }\r\n\r\n\r\n        if (enumerationType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(enumerationType, obj);\r\n        }\r\n\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n        //enum items\r\n        let enumerationType = dataType as EnumerationType;\r\n        if (obj['enumerationItems']) {\r\n            enumerationType.enumerationItems = new Array<EnumerationItem>();\r\n            let convertor: EnumerationItemConvertor = new EnumerationItemConvertor();\r\n            obj['enumerationItems'].forEach(itemObj => {\r\n                let item: EnumerationItem = new EnumerationItem();\r\n                convertor.initFromObject(item, itemObj);\r\n                enumerationType.enumerationItems.push(item);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(enumerationType, obj);\r\n        }\r\n    }\r\n}","import { Parameter } from '../../define/parameter/parameter';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class ParameterConvertor {\r\n\r\n    convertToObject(obj:Object,parameter: Parameter,ctxt:ISerializeContext): void {\r\n        if (!parameter) {\r\n            return;\r\n        }\r\n        obj['kind'] = parameter.kind;\r\n\r\n        obj['code'] = parameter.code;\r\n        obj['name'] = parameter.name;\r\n        obj['description'] = parameter.description;\r\n        obj['required'] = parameter.required;\r\n        obj['defaultValue'] = parameter.defaultValue;\r\n\r\n        obj['parameterType'] = null;\r\n        if (parameter.parameterType) {\r\n            let kind = parameter.parameterType.getKind();\r\n            if (!kind) {\r\n                throw new Error('åæ°åºååæ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType,ctxt);\r\n        }\r\n\r\n        obj['constraint'] = null;\r\n        if (parameter.constraint) {\r\n            let kind = parameter.constraint.getKind();\r\n            if (!kind) {\r\n                throw new Error('åæ°åºååæ¶åæ°çº¦æçConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint,ctxt);\r\n        }\r\n        \r\n        if(parameter.extension){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(parameter,obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(parameter: Parameter, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        parameter.kind = obj['kind'];\r\n        parameter.code = obj['code'];\r\n        parameter.name = obj['name'];\r\n        parameter.defaultValue = obj['defaultValue'];\r\n        parameter.description = obj['description'];\r\n        parameter.required = obj['required'] as boolean;\r\n\r\n        if (obj['parameterType']) {\r\n            let kind = obj['parameterType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æåæ°æ°æ®ç±»åæ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);\r\n        }\r\n        if (obj['constraint']) {\r\n            let kind = obj['constraint']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æåæ°çº¦æç±»åæ¶ConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'],ctxt);\r\n        }\r\n        if(obj[\"extension\"]){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToObj(parameter,obj);\r\n        }\r\n    }\r\n}","import { Operation } from '../../define/operation/operation';\r\nimport { Parameter } from '../../define/parameter/parameter';\r\nimport { ParameterConvertor } from '../parameter/parameter-convertor';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class OperationConvertor{\r\n\r\n    convertToObject(obj:Object,operation:Operation,ctxt:ISerializeContext):void{\r\n        if(!operation){\r\n            return ;\r\n        }\r\n        obj['kind']=operation.kind;\r\n\r\n        obj['code']=operation.code;\r\n        obj['name']=operation.name;\r\n        obj['uri']=operation.uri;\r\n        obj['description']=operation.description;\r\n\r\n        obj['returnType']=null;\r\n        if(operation.returnType){\r\n            let kind=operation.returnType.getKind();\r\n            if(!kind){\r\n                throw new Error('æä½åºååæ¶è¿åå¼ç±»åçTypeKindä¸ºç©º!');\r\n            }\r\n            obj['returnType']=DataTypeConvertUtil.convertToObject(operation.returnType,ctxt);\r\n        }\r\n        \r\n        obj['parameters']=new Array<Object>();\r\n        if(operation.parameters){\r\n            let parameterConvertor=new ParameterConvertor();\r\n            operation.parameters.forEach(parameter => {\r\n                var kind=parameter.kind;\r\n                var serializer=ctxt.getParameterSerializerFactory().get(kind);\r\n                var parameterObj=serializer.deserialize(parameter,ctxt);\r\n                obj[\"parameters\"].push(parameterObj);\r\n            });\r\n        }\r\n\r\n        if(operation.extension){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(operation,obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(operation:Operation,obj:Object,ctxt:ISerializeContext):void{\r\n        if(!obj){\r\n            return ;\r\n        }\r\n        operation.kind=obj['kind'];\r\n        operation.code=obj['code'];\r\n        operation.name=obj['name'];\r\n        operation.uri=obj['uri'];\r\n        operation.description=obj['description'];\r\n\r\n        if(obj['parameters']){\r\n            operation.parameters=new Array<Parameter>();\r\n            let parameterConvertor=new ParameterConvertor();\r\n            obj['parameters'].forEach(parameterObj => {\r\n                var kind=parameterObj['kind'];\r\n                var serializer=ctxt.getParameterSerializerFactory().get(kind);\r\n                var parameter=serializer.deserialize(parameterObj,ctxt);\r\n                operation.parameters.push(parameter);\r\n            });\r\n        }\r\n        if(obj['returnType']){\r\n            let kind=obj['returnType']['kind'];\r\n            if(!kind){\r\n                throw new Error('è§£ææä½çè¿åå¼æ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            operation.returnType=DataTypeConvertUtil.initFromObject(obj['returnType'],ctxt);\r\n        }\r\n        \r\n        if(obj[\"extension\"]){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToObj(operation,obj);\r\n        }\r\n    }\r\n}","import { CommonStructure } from '../../define/structure/common-structure';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { Operation } from '../../define/operation/operation';\r\nimport { DataType } from '../../define/data-type/data-type';\r\n\r\nexport class ReferReplaceUtil {\r\n    static replaceOperationRefer(allStructureTypes: StructuredType[], operations: Operation[]) {\r\n        if (operations != null) {\r\n            operations.forEach(op => {\r\n                let retType = op.returnType;\r\n                if (retType != null && retType instanceof StructuredReferType) {\r\n                    let structureTypeId: string = (retType as StructuredReferType).refId;\r\n                    let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);\r\n                    op.returnType = queryStructureType;\r\n                }\r\n                if (op.parameters != null) {\r\n                    op.parameters.forEach(parameter => {\r\n                        let parameterType = parameter.parameterType;\r\n                        if (parameterType instanceof StructuredReferType) {\r\n                            let structureTypeId: string = (parameterType as StructuredReferType).refId;\r\n                            let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);\r\n                            parameter.parameterType = queryStructureType;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    static replacePropertyRefer(structure: CommonStructure) {\r\n        let allStructures = this.getAllStructuredTypes(structure);\r\n        if (structure.structuredTypes != null) {\r\n            structure.structuredTypes.forEach(structureType => {\r\n                if (structureType.properties != null) {\r\n                    structureType.properties.forEach(prop => {\r\n                        if (prop.propertyType instanceof StructuredReferType) {\r\n                            let structureTypeId = (prop.propertyType as StructuredReferType).refId;\r\n                            let queryStructureType = this.getRefStructureType(allStructures, structureTypeId);\r\n                            prop.propertyType = queryStructureType;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                this.replacePropertyRefer(refStructure);\r\n            })\r\n        }\r\n    }\r\n\r\n    static getRefStructureType(allStructures: StructuredType[], structureId: string): StructuredType {\r\n        let queryStructureType = allStructures.find(x => x.id == structureId);\r\n        return queryStructureType;\r\n    }\r\n\r\n    static getAllStructuredTypes(structure: CommonStructure) {\r\n        let array: Array<StructuredType> = new Array<StructuredType>();\r\n        if (structure.structuredTypes != null) {\r\n            array=array.concat(structure.structuredTypes);\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                if (refStructure.structuredTypes != null) {\r\n                    array=array.concat(refStructure.structuredTypes);\r\n                }\r\n            })\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n\r\n}","import { StructuredTypeConvertor } from '../data-type/structured-type-convertor';\r\nimport { CommonStructure } from '../../define/structure/common-structure';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class CommonStructureConvertor {\r\n\r\n    convertToObject(obj:Object,structure: CommonStructure,ctxt:ICommonStructureSerializeContext): void {\r\n        if (!structure) {\r\n            return;\r\n        }   \r\n        obj['id'] = structure.id;\r\n        obj['uri']=structure.uri;\r\n        obj['code'] = structure.code;\r\n        obj['name'] = structure.name;\r\n        obj['kind'] = structure.kind;\r\n        obj['description'] = structure.description;\r\n        let structureConvertor = new StructuredTypeConvertor();\r\n\r\n        obj['structuredTypes'] = new Array<Object>();\r\n        if (structure.structuredTypes) {\r\n            structure.structuredTypes.forEach(structuredType => {\r\n                var kind=structuredType.kind;\r\n                var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n                var structuredTypeObj=serializer.serialize(structuredType,ctxt);\r\n                obj['structuredTypes'].push(structuredTypeObj);\r\n            });\r\n        }\r\n\r\n        obj['refStructures'] = new Array<Object>();\r\n        if (structure.refStructures) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                var kind=refStructure.kind;\r\n                var serializer=ctxt.getStructureSerializerFactory().get(kind);\r\n                var refStructureObj=serializer.serialize(refStructure,ctxt);\r\n                obj['refStructures'].push(refStructureObj);\r\n            });\r\n        }\r\n    }\r\n\r\n    initFromObject(structure:CommonStructure,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        structure.kind = obj['kind'];\r\n        structure.id = obj['id'];\r\n        structure.uri=obj['uri'];\r\n        structure.code = obj['code'];\r\n        structure.name = obj['name'];\r\n        structure.description = obj['description'];\r\n\r\n        if (obj['structuredTypes']) {\r\n            structure.structuredTypes = new Array<StructuredType>();\r\n            obj['structuredTypes'].forEach(structureObj => {\r\n                var kind=structureObj['kind'];\r\n                var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n                var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;\r\n                structure.structuredTypes.push(structuredType);\r\n                // structure.structuredTypes.push(DataTypeConvertUtil.initFromObject(structureObj) as StructuredType);\r\n            });\r\n        }\r\n\r\n        if (obj['refStructures']) {\r\n            structure.refStructures = new Array<CommonStructure>();\r\n            obj['refStructures'].forEach(refTree => {\r\n                var kind=refTree['kind'];\r\n                var refSerializer=ctxt.getStructureSerializerFactory().get(kind);\r\n                var refStructure=refSerializer.deserialize(refTree,ctxt);\r\n                structure.refStructures.push(refStructure);\r\n                // structure.refStructures.push(CommonStructureConvertUtil.initFromObject(refTree));\r\n            })\r\n        }\r\n        //æ¿æ¢structuredTypesårefStructuresä¸­çpropRefer\r\n        ReferReplaceUtil.replacePropertyRefer(structure);\r\n    }\r\n\r\n}","import { Aggregate } from '../../define/structure/aggregate';\r\nimport { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class AggregateConvertor{\r\n\r\n     convertToObject(obj:Object,aggregate: Aggregate,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.convertToObject(obj,aggregate,ctxt);\r\n        //root\r\n        if(aggregate.root){\r\n            obj['rootId']=aggregate.root.id;\r\n        }\r\n    }\r\n\r\n     initFromObject(aggregate:Aggregate,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.initFromObject(aggregate,obj,ctxt);\r\n        //root\r\n        let rootId=obj['rootId'];\r\n        if(rootId&&aggregate.structuredTypes&&aggregate.structuredTypes.length>0){\r\n            aggregate.root=aggregate.structuredTypes.find(x=>x.id==rootId);\r\n        }\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { Operation } from '../../define/operation/operation';\r\nimport { OperationConvertor } from '../operation/operation-convertor';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { AggregateConvertor } from './aggregate-convertor';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class EntityObjectConvertor  {\r\n\r\n     convertToObject(obj:Object,entity: EntityObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.convertToObject(obj,entity,ctxt);\r\n        obj['entityRelations'] = entity.entityRelations;\r\n        obj['operations'] = new Array<Object>();\r\n        if (entity.operations) {\r\n            entity.operations.forEach(op => {\r\n                var kind=op['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var opObj=serializer.serialize(op,ctxt);\r\n                obj['operations'].push(opObj);\r\n            });\r\n        }\r\n    }\r\n\r\n     initFromObject(entity:EntityObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.initFromObject(entity,obj,ctxt);\r\n        if (obj['entityRelations']) {\r\n            entity.entityRelations = obj['entityRelations'];\r\n        }\r\n        if (obj['operations']) {\r\n            entity.operations = new Array<Operation>();\r\n            obj['operations'].forEach(operationObj => {\r\n                var kind=operationObj['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var operation=serializer.deserialize(operationObj,ctxt);\r\n                entity.operations.push(operation);\r\n            });\r\n        }\r\n        let allStructureTypes:Array<StructuredType>=ReferReplaceUtil.getAllStructuredTypes(entity);\r\n        ReferReplaceUtil.replaceOperationRefer(allStructureTypes,entity.operations);\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { DataTransferObject } from '../../define/structure/data-transfer-object';\r\nimport { AggregateConvertor } from './aggregate-convertor';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class DataTransferObjectConvertor {\r\n     convertToObject(obj:Object,dto: DataTransferObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.convertToObject(obj,dto,ctxt);\r\n    }\r\n\r\n     initFromObject(dto:DataTransferObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.initFromObject(dto,obj,ctxt);\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { ValueObject } from '../../define/structure/value-object';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class ValueObjectConvertor {\r\n     convertToObject(obj:Object,vo: ValueObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.convertToObject(obj,vo,ctxt);\r\n        //first?\r\n        var type=vo.dataType;\r\n        obj['structureId']=type.id;\r\n    }\r\n\r\n     initFromObject(vo:ValueObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.initFromObject(vo,obj,ctxt);\r\n        //æ²¡æroot\r\n        let allStructureTypes:Array<StructuredType>=ReferReplaceUtil.getAllStructuredTypes(vo);\r\n        ReferReplaceUtil.replaceOperationRefer(allStructureTypes,vo.operations);\r\n    }\r\n}","import { EntityRelation } from '../../define/structure/entity-relation';\r\n\r\nexport class RelationConvertor{\r\n    \r\n    convertorToObject(relation:EntityRelation):Object{\r\n        let obj=new Object();\r\n        if(!relation){\r\n            return obj;\r\n        }\r\n        obj['ParentPropCode']=relation.ParentPropCode;\r\n        obj['ChildPropCode']=relation.ChildPropCode;\r\n        return obj;\r\n    }\r\n\r\n    initFromObject(obj:Object):EntityRelation{\r\n        let relation=new EntityRelation();\r\n        if(!obj){\r\n            return relation;\r\n        }\r\n        relation.ParentPropCode=obj['ParentPropCode'];\r\n        relation.ChildPropCode=obj['ChildPropCode'];\r\n        return relation;\r\n    }\r\n}","import { RelationConvertor } from './relation-convertor';\r\nimport { EntityRelation } from '../../define/structure/entity-relation';\r\n\r\nexport class RelationDictConvertor {\r\n\r\n    convertorToObject(relationDict: { string: { string: Array<EntityRelation> } }): Object {\r\n        return relationDict;\r\n    }\r\n\r\n    initFromObject(obj: Object): { string: { string: Array<EntityRelation> } } {\r\n        let relationDict = new Object();\r\n        if (!obj) {\r\n            return relationDict as { string: { string: Array<EntityRelation> } };\r\n        }\r\n        let pCodeList = Object.keys(obj);\r\n        pCodeList.forEach(pCode => {\r\n            let cDict = obj[pCode];\r\n            if (cDict) {\r\n                relationDict[pCode] = new Object();\r\n                let cCodeList = Object.keys(cDict);\r\n                cCodeList.forEach(cCode => {\r\n                    let cValue = cDict[cCode];\r\n                    if (cValue) {\r\n                        relationDict[pCode][cCode] = new Array<EntityRelation>();\r\n                        cValue.forEach(relationObj => {\r\n                            let relationConvertor = new RelationConvertor();\r\n                            let relation = relationConvertor.initFromObject(relationObj);\r\n                            relationDict[pCode][cCode].push(relation);\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return relationDict as { string: { string: Array<EntityRelation> } };\r\n    }\r\n}","import { IConstraint } from '../../define/constraint/i-constraint';\r\nimport { ConstraintConst } from '../../define/constant/constraint-const';\r\nimport { DecimalConstraint } from '../../define/constraint/decimal-constraint';\r\nimport { StringConstraint } from '../../define/constraint/string-constraint';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\n\r\n\r\nexport class ConstraintConvertor {\r\n\r\n    convertToObject(obj: Object, constraint: IConstraint, ctxt: ISerializeContext): void {\r\n        if (!constraint) {\r\n            return;\r\n        }\r\n        switch (constraint.getKind()) {\r\n            case ConstraintConst.DECIMAL:\r\n                let decimalconstraint = constraint as DecimalConstraint;\r\n                obj['scale'] = <number>decimalconstraint.scale;\r\n                obj['pricision'] = <number>decimalconstraint.pricision;\r\n            case ConstraintConst.STRING:\r\n                let stringconstraint = constraint as StringConstraint;\r\n                obj['maxLength'] = <number>stringconstraint.maxLength;\r\n            default:\r\n                throw new Error(`çº¦æä¸æ¯æç${constraint.getKind()}ç±»åï¼`);\r\n        }\r\n    }\r\n\r\n    initFromObject(constraint: IConstraint, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        switch (obj['kind']) {\r\n            case ConstraintConst.DECIMAL:\r\n            case ConstraintConst.STRING:\r\n            default:\r\n                throw new Error(`çº¦æä¸æ¯æç${obj['kind']}ç±»åï¼`);\r\n        }\r\n    }\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';\r\nimport { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';\r\n\r\nexport class DefaultPrimitiveTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new PrimitiveTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new PrimitiveType();\r\n        let baseConvertor = new PrimitiveTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { CollectionTypeConvertor } from '../../../convertor/data-type/collection-type-convertor';\r\nimport { CollectionType } from '../../../define/data-type/collection-type/collection-type';\r\n\r\nexport class DefaultCollectionTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new CollectionTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new CollectionType();\r\n        let baseConvertor = new CollectionTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { MapTypeConvertor } from '../../../convertor/data-type/map-type-convertor';\r\nimport { MapType } from '../../../define/data-type/map-type/map-type';\r\n\r\nexport class DefaultMapTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new MapTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new MapType();                \r\n        let baseConvertor = new MapTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { StructuredTypeConvertor } from '../../../convertor/data-type/structured-type-convertor';\r\nimport { StructuredType } from '../../../define/data-type/structured-type/structured-type';\r\n\r\nexport class DefaultStructuredTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new StructuredTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new StructuredType();\r\n        let baseConvertor = new StructuredTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { EntityTypeConvertor } from '../../../convertor/data-type/entity-type-convertor';\r\nimport { EntityType } from '../../../define/data-type/structured-type/entity-type/entity-type';\r\n\r\nexport class DefaultEntityTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new EntityTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new EntityType();\r\n        let baseConvertor = new EntityTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';\r\nimport { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';\r\nimport { EnumerationTypeConvertor } from '../../../convertor/data-type/enumeration-type-convertor';\r\nimport { EnumerationType } from '../../../define/data-type/structured-type/enumeration-type/enumeration-type';\r\n\r\nexport class DefaultEnumerationTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new EnumerationTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new EnumerationType();\r\n        let baseConvertor = new EnumerationTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { DataTransferObjectTypeConvertor } from '../../../convertor/data-type/data-transfer-object-type-convertor';\r\nimport { DataTransferObjectType } from '../../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';\r\n\r\nexport class DefaultDataTransferObjectTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new DataTransferObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result=new DataTransferObjectType();\r\n        let baseConvertor=new DataTransferObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ValueObjectTypeConvertor } from '../../../convertor/data-type/value-object-type-convertor';\r\nimport { ValueObjectType } from '../../../define/data-type/structured-type/value-object-type/value-object-type';\r\n\r\nexport class DefaultValueObjectTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new ValueObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new ValueObjectType();\r\n        let baseConvertor = new ValueObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ObjectTypeConvertor } from '../../../convertor/data-type/object-type-convertor';\r\nimport { ObjectType } from '../../../define/data-type/object-type/object-type';\r\n\r\nexport class DefaultObjectTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new ObjectType();\r\n        let baseConvertor = new ObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializerFactory } from '../../extension/factory/i-data-type-serializer-factory';\r\nimport { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { DefaultPrimitiveTypeSerializer } from '../serializer/default-primitive-type-serializer';\r\nimport { DefaultCollectionTypeSerializer } from '../serializer/default-collection-type-serializer';\r\nimport { DefaultMapTypeSerializer } from '../serializer/default-map-type-serializer';\r\nimport { DefaultStructuredTypeSerializer } from '../serializer/default-structured-type-serializer';\r\nimport { DefaultEntityTypeSerializer } from '../serializer/default-entity-type-serializer';\r\nimport { DefaultEnumerationTypeSerializer } from '../serializer/default-enumeration-type-serializer';\r\nimport { DefaultDataTransferObjectTypeSerializer } from '../serializer/default-dto-type-serializer';\r\nimport { DataTypeConst } from '../../../define/constant/data-type-const';\r\nimport { DefaultValueObjectTypeSerializer } from '../serializer/default-vo-type-serializer';\r\nimport { DefaultObjectTypeSerializer } from '../serializer/default-object-type-serializer';\r\n\r\nexport class DefaultDataTypeSerializerFactory implements IDataTypeSerializerFactory {\r\n\r\n    private serializerDict: { [key: string]: IDataTypeSerializer } = {};\r\n\r\n    get(kind: string): IDataTypeSerializer {\r\n        switch (kind) {\r\n            case DataTypeConst.DEFAULT_PRIMITIVE:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultPrimitiveTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_COLLECTION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultCollectionTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_MAP:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultMapTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_STRUCTURED:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultStructuredTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultDataTransferObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_ENTITY:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEntityTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_VALUE_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultValueObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_ENUMERATION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEnumerationTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªæ¾å°ç±»åä¸º${kind}çåºååå¨ï¼`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","/** DefaultDataType */\r\nexport const DEFAULT_PRIMITIVE_TYPE = \"DefaultPrimitiveType\";\r\nexport const DEFAULT_COLLECTION_TYPE = \"DefaultCollectionType\";\r\nexport const DEFAULT_MAP_TYPE = \"DefaultMapType\";\r\nexport const DEFAULT_STRUCTURED_TYPE = \"DefaultStructuredType\";\r\nexport const DEFAULT_DATA_TRANSFER_OBJECT_TYPE = \"DefaultDtoType\";\r\nexport const DEFAULT_ENTITY_TYPE = \"DefaultEntityType\";\r\nexport const DEFAULT_VALUE_OBJECT_TYPE = \"DefaultValueObjectType\";\r\nexport const DEFAULT_ENUMERATION_TYPE = \"DefaultEnumType\";\r\nexport const DEFAULT_OBJECT_TYPE = \"Object\";\r\n\r\n\r\n/** DefaultElement */\r\nexport const DEFAULT_PROPERTY = \"DefaultProperty\";\r\nexport const DEFAULT_PARAMETER = \"DefaultParameter\";\r\nexport const DEFAULT_OPERATION = \"DefaultOperation\";\r\nexport const DEFAULT_MUTILLINGUAL_PROPERTY = \"DefaultMultillingualProperty\";\r\n\r\n\r\n/** DefaultStructure */\r\nexport const DEFAULT_ENTITY_OBJECT = \"DefaultEntityObject\";\r\nexport const DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDataTransferObject\";\r\nexport const DEFAULT_VALUE_OBJECT = \"DefaultValueObject\";\r\n\r\n/** DefaultConstraint */\r\nexport const DEFAULT_CONSTRAINT = \"DefaultConstraint\"\r\n","import { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { Operation } from '../../../define/operation/operation';\r\nimport { OperationConvertor } from '../../../convertor/operation/operation-convertor';\r\n\r\nexport class DefaultOperationSerializer implements IOperationSerializer {\r\n    serialize(op: Operation, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new OperationConvertor();\r\n        baseConvertor.convertToObject(result, op, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Operation {\r\n        let result = new Operation();\r\n        let baseConvertor = new OperationConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IOperationSerializerFactory } from '../../extension/factory/i-operation-serializer-factory';\r\nimport { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { DEFAULT_OPERATION } from '../default-constant';\r\nimport { DefaultOperationSerializer } from '../serializer/default-operation-serializer';\r\n\r\nexport class DefaultOperationSerializerFactory implements IOperationSerializerFactory {\r\n    private serializerDict: { [key: string]: IOperationSerializer } = {};\r\n\r\n    get(kind: string): IOperationSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_OPERATION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultOperationSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { IParameterSerializer } from '../../extension/serializer/i-parameter-serializer';\r\nimport { Parameter } from '../../../define/parameter/parameter';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ParameterConvertor } from '../../../convertor/parameter/parameter-convertor';\r\n\r\nexport class DefaultParameterSerializer implements IParameterSerializer{\r\n    serialize(param: Parameter, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new ParameterConvertor();\r\n        baseConvertor.convertToObject(result,param,ctxt);\r\n        return result;\r\n    }    \r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Parameter {\r\n        let result=new Parameter();\r\n        let baseConvertor=new ParameterConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n}","import { IParameterSerializerFactory } from '../../extension/factory/i-parameter-serializer-factory';\r\nimport { IParameterSerializer } from '../../extension/serializer/i-parameter-serializer';\r\nimport { DEFAULT_PARAMETER } from '../default-constant';\r\nimport { DefaultParameterSerializer } from '../serializer/default-parameter-serializer';\r\n\r\nexport class DefaultParameterSerializerFactory implements IParameterSerializerFactory{\r\n    private serializerDict: { [key: string]: IParameterSerializer } = {};\r\n\r\n    get(kind: string): IParameterSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_PARAMETER:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultParameterSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { IPropertySerializer } from '../../extension/serializer/i-property-serializer';\r\nimport { Property } from '../../../define/property/property';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PropertyConvertor } from '../../../convertor/property/property-convertor';\r\n\r\nexport class DefaultProeprtySerializer implements IPropertySerializer {\r\n    serialize(prop: Property, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new PropertyConvertor();\r\n        baseConvertor.convertToObject(result, prop, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Property {\r\n        let result = new Property();\r\n        let baseConvertor = new PropertyConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IPropertySerializerFactory } from '../../extension/factory/i-property-serializer-factory';\r\nimport { IPropertySerializer } from '../../extension/serializer/i-property-serializer';\r\nimport { DEFAULT_PROPERTY } from '../default-constant';\r\nimport { DefaultProeprtySerializer } from '../serializer/default-property-serializer';\r\n\r\nexport class DefaultPropertySerializerFactory implements IPropertySerializerFactory {\r\n    private serializerDict: { [key: string]: IPropertySerializer } = {};\r\n\r\n    get(kind: string): IPropertySerializer {\r\n        switch (kind) {\r\n            case DEFAULT_PROPERTY:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultProeprtySerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { EntityObjectConvertor } from '../../../convertor/structure/entity-object-convertor';\r\nimport { EntityObject } from '../../../define/structure/entity-object';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultEntityObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new Object();\r\n        //ä½¿ç¨åºæ¬çåºååå¨\r\n        let baseConvertor = new EntityObjectConvertor();\r\n        let entity = structure as EntityObject;\r\n        baseConvertor.convertToObject(result, entity, ctxt);\r\n        //Cando:å¢å èªå·±å¯¹Objectçæ©å±\r\n        return result;\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new EntityObject();\r\n        let baseConvertor = new EntityObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ValueObjectConvertor } from '../../../convertor/structure/value-object-convertor';\r\nimport { ValueObject } from '../../../define/structure/value-object';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultValueObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ValueObjectConvertor();\r\n        let valueObject = structure as ValueObject;\r\n        baseConvertor.convertToObject(result, valueObject, ctxt);\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new ValueObject();\r\n        let baseConvertor = new ValueObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { DataTransferObject } from '../../../define/structure/data-transfer-object';\r\nimport { DataTransferObjectConvertor } from '../../../convertor/structure/data-transfer-object-convertor';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultDataTransferObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new DataTransferObject();\r\n        let baseConvertor = new DataTransferObjectConvertor();\r\n        let dto = structure as DataTransferObject;\r\n        baseConvertor.convertToObject(result, dto, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new DataTransferObject();\r\n        let baseConvertor = new DataTransferObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializerFactory } from '../../extension/factory/i-common-structure-serializer-factory';\r\nimport { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { DEFAULT_ENTITY_OBJECT, DEFAULT_VALUE_OBJECT, DEFAULT_DATA_TRANSFER_OBJECT } from '../default-constant';\r\nimport { DefaultEntityObjectSerializer } from '../serializer/default-entity-object-serializer';\r\nimport { DefaultValueObjectSerializer } from '../serializer/default-value-object-serializer';\r\nimport { DefaultDataTransferObjectSerializer } from '../serializer/default-data-transfer-object-serializer';\r\n\r\nexport class DefaultStructureSerializerFactory implements ICommonStructureSerializerFactory {\r\n    private serializerDict: { [key: string]: ICommonStructureSerializer } = {};\r\n\r\n    get(kind: string): ICommonStructureSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_ENTITY_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEntityObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DEFAULT_VALUE_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultValueObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DEFAULT_DATA_TRANSFER_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultDataTransferObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n}","import { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { IConstraintSerializer } from '../../extension/serializer/i-constraint-serializer';\r\nimport { IConstraint } from '../../../define/constraint/i-constraint';\r\nimport { ConstraintConvertor } from '../../../convertor/constraint/constraint-convertor';\r\n\r\nexport class DefaultConstraintSerializer implements IConstraintSerializer{\r\n    serialize(constraint: IConstraint, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ConstraintConvertor();\r\n        baseConvertor.convertToObject(result, constraint, ctxt);\r\n        return result;\r\n    }   \r\n    \r\n     deserialize(obj: Object, ctxt: ISerializeContext): IConstraint {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { IConstraintSerializerFactory } from '../../extension/factory/i-constraint-serializer-factory';\r\nimport { IConstraint } from '../../../define/constraint/i-constraint';\r\nimport { IConstraintSerializer } from '../../extension/serializer/i-constraint-serializer';\r\nimport { DEFAULT_CONSTRAINT } from '../default-constant';\r\nimport { DefaultConstraintSerializer } from '../serializer/default-constraint-serializer';\r\n\r\nexport class DefaultConstraintSerializerFactory implements IConstraintSerializerFactory {\r\n\r\n    private serializerDict: { [key: string]: IConstraintSerializer } = {};\r\n\r\n    get(kind: string): IConstraintSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_CONSTRAINT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultConstraintSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n    \r\n}","import { ISerializeContext } from '../extension/i-serialize-context';\r\nimport { IDataTypeSerializerFactory } from '../extension/factory/i-data-type-serializer-factory';\r\nimport { IParameterSerializerFactory } from '../extension/factory/i-parameter-serializer-factory';\r\nimport { IPropertySerializerFactory } from '../extension/factory/i-property-serializer-factory';\r\nimport { ICommonStructureSerializerFactory } from '../extension/factory/i-common-structure-serializer-factory';\r\nimport { IOperationSerializerFactory } from '../extension/factory/i-operation-serializer-factory';\r\nimport { DefaultDataTypeSerializerFactory } from './factory/default-data-type-serializer-factory';\r\nimport { DefaultOperationSerializerFactory } from './factory/default-operation-serializer-factory';\r\nimport { DefaultParameterSerializerFactory } from './factory/default-parameter-serializer-factory';\r\nimport { DefaultPropertySerializerFactory } from './factory/default-property-serializer-factory';\r\nimport { DefaultStructureSerializerFactory } from './factory/default-structure-serializer-factory';\r\nimport { ICommonStructureSerializeContext } from '../extension/i-common-structure-serialize-context';\r\nimport { IConstraintSerializerFactory } from '../extension/factory/i-constraint-serializer-factory';\r\nimport { DefaultConstraintSerializerFactory } from './factory/default-constraint-serializer-factory';\r\n\r\nexport class DefaultSerializeContext implements ICommonStructureSerializeContext {\r\n    private dataTypeFactory: IDataTypeSerializerFactory;\r\n    private operationFactory: IOperationSerializerFactory;\r\n    private parameterFactory: IParameterSerializerFactory;\r\n    private propertyFactory: IPropertySerializerFactory;\r\n    private structureFactory: ICommonStructureSerializerFactory;\r\n    private constraintFactory: IConstraintSerializerFactory;\r\n\r\n    getDataTypeSerializerFactory(): IDataTypeSerializerFactory {\r\n        if (!this.dataTypeFactory) {\r\n            this.dataTypeFactory = new DefaultDataTypeSerializerFactory();\r\n        }\r\n        return this.dataTypeFactory;\r\n    }\r\n\r\n    getOperationSerializerFactory(): IOperationSerializerFactory {\r\n        if (!this.operationFactory) {\r\n            this.operationFactory = new DefaultOperationSerializerFactory();\r\n        }\r\n        return this.operationFactory;\r\n    }\r\n\r\n    getParameterSerializerFactory(): IParameterSerializerFactory {\r\n        if (!this.parameterFactory) {\r\n            this.parameterFactory = new DefaultParameterSerializerFactory();\r\n        }\r\n        return this.parameterFactory;\r\n    }\r\n\r\n    getPropertySerializerFactory(): IPropertySerializerFactory {\r\n        if (!this.propertyFactory) {\r\n            this.propertyFactory = new DefaultPropertySerializerFactory();\r\n        }\r\n        return this.propertyFactory;\r\n    }\r\n\r\n    getStructureSerializerFactory(): ICommonStructureSerializerFactory {\r\n        if (!this.structureFactory) {\r\n            this.structureFactory = new DefaultStructureSerializerFactory();\r\n        }\r\n        return this.structureFactory;\r\n    }\r\n\r\n    getConstraintSerializerFactory(): IConstraintSerializerFactory {\r\n        if (!this.constraintFactory) {\r\n            this.constraintFactory = new DefaultConstraintSerializerFactory();\r\n        }\r\n        return this.constraintFactory;\r\n    }\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';\r\n\r\n\r\n@Injectable()\r\nexport class CommonStructureDTService {\r\n\r\n    private commom_structure_url = '/api/dev/main/v1.0/common-structure';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * Nçè·åCommonStructure\r\n     * @param type åæ°æ®ç±»å\r\n     * @param id åæ°æ®Id\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    get(id: string, headers: HttpHeaders): Observable<EntityObject> {\r\n        let idParam = encodeURIComponent(id);\r\n        let url =  this.commom_structure_url + '?id=' + id ;\r\n        return this.http.get<EntityObject>(url, { headers: headers }).pipe(map(\r\n            obj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = obj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            return serializer.deserialize(obj, serializeCtxt) as EntityObject;\r\n        },\r\n        error=>{\r\n            alert(\"è·åéç¨æ°æ®ç»æå¤±è´¥ï¼\");\r\n            return null;\r\n        })\r\n        );\r\n    };\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';\r\n\r\n\r\n@Injectable()\r\nexport class CommonStructureRTService {\r\n\r\n    private commom_structure_url = '/api/runtime/sys/v1.0/common-structure';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * è·åCommonStructure\r\n     * @param type åæ°æ®ç±»å\r\n     * @param id åæ°æ®Id\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    get(id: string, headers: HttpHeaders): Observable<EntityObject> {\r\n        let idParam = encodeURIComponent(id);\r\n        let url =  this.commom_structure_url + '?id=' + id ;\r\n        return this.http.get<EntityObject>(url, { headers: headers }).pipe(map(\r\n            obj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = obj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            return serializer.deserialize(obj, serializeCtxt) as EntityObject;\r\n        },\r\n        error=>{\r\n            alert(\"è·åéç¨æ°æ®ç»æå¤±è´¥ï¼\");\r\n            return null;\r\n        })\r\n        );\r\n    };\r\n\r\n    \r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonStructureDTService } from './service/design-time/common-structure-dt-service';\r\nimport { CommonStructureRTService } from './service/run-time/common-structure-rt-service';\r\n// import { CodeRuleSelectModule } from './test/code-rule-select.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    // CodeRuleSelectModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers:[CommonStructureDTService,CommonStructureRTService],\r\n  exports:[]\r\n})\r\nexport class CommonStructureModule { }\r\n"]}