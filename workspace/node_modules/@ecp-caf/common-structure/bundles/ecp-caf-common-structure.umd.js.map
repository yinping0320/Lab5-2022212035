{"version":3,"file":"ecp-caf-common-structure.umd.js.map","sources":["ng://@ecp-caf/common-structure/lib/define/structure/common-structure.ts","node_modules/tslib/tslib.es6.js","ng://@ecp-caf/common-structure/lib/define/structure/aggregate.ts","ng://@ecp-caf/common-structure/lib/define/constant/common-structure-const.ts","ng://@ecp-caf/common-structure/lib/define/structure/entity-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/data-transfer-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/value-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/entity-relation.ts","ng://@ecp-caf/common-structure/lib/define/constant/element-const.ts","ng://@ecp-caf/common-structure/lib/extension.ts","ng://@ecp-caf/common-structure/lib/define/operation/operation.ts","ng://@ecp-caf/common-structure/lib/define/parameter/parameter.ts","ng://@ecp-caf/common-structure/lib/define/property/property.ts","ng://@ecp-caf/common-structure/lib/define/data-type/data-type.ts","ng://@ecp-caf/common-structure/lib/define/constant/data-type-const.ts","ng://@ecp-caf/common-structure/lib/define/data-type/collection-type/collection-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/map-type/map-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/primitive-type/primitive-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/structured-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/entity-type/entity-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/value-object-type/value-object-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/enumeration-type/enumeration-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/enumeration-type/enumeration-item.ts","ng://@ecp-caf/common-structure/lib/define/data-type/object-type/object-type.ts","ng://@ecp-caf/common-structure/lib/define/constant/constraint-const.ts","ng://@ecp-caf/common-structure/lib/define/constraint/decimal-constraint.ts","ng://@ecp-caf/common-structure/lib/define/constraint/string-constraint.ts","ng://@ecp-caf/common-structure/lib/define/data-type/primitive-type/primitive-type-kind.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type-refer-type/structured-refer-type.ts","ng://@ecp-caf/common-structure/lib/convertor/utils/data-type-convert-util.ts","ng://@ecp-caf/common-structure/lib/convertor/extension/extension-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/collection-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/map-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/primitive-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/property/property-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/structured-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/data-transfer-object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/entity-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/value-object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/enumeration-item-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/enumeration-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/parameter/parameter-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/operation/operation-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/utils/refer-replace-util.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/common-structure-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/aggregate-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/entity-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/data-transfer-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/value-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/relation-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/relation-dict-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/constraint/constraint-convertor.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-primitive-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-collection-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-map-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-structured-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-entity-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-enumeration-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-dto-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-vo-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-object-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-data-type-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/default-constant.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-operation-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-operation-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-parameter-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-parameter-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-property-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-property-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-entity-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-value-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-data-transfer-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-structure-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-constraint-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-constraint-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/default-serialize-context.ts","ng://@ecp-caf/common-structure/lib/service/design-time/common-structure-dt-service.ts","ng://@ecp-caf/common-structure/lib/service/run-time/common-structure-rt-service.ts","ng://@ecp-caf/common-structure/lib/common-structure.module.ts"],"sourcesContent":["import { StructuredType } from '../data-type/structured-type/structured-type';\r\n\r\nexport class CommonStructure{\r\n    id:string;\r\n    code:string;\r\n    name:string;\r\n    uri:string;\r\n    description:string;\r\n    kind:string;\r\n    structuredTypes:Array<StructuredType>;\r\n    refStructures:Array<CommonStructure>;\r\n    \r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { CommonStructure } from './common-structure';\r\nimport { StructuredType } from '../data-type/structured-type/structured-type';\r\n\r\nexport class Aggregate extends CommonStructure{\r\n\r\n    root:StructuredType\r\n\r\n}\r\n","export class CommonStructureConst{\r\n    private constructor(){}\r\n    \r\n    static readonly DEFAULT_ENTITY_OBJECT = \"DefaultEntityObject\";\r\n    static readonly DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDataTransferObject\";\r\n    static readonly DEFAULT_VALUE_OBJECT = \"DefaultValueObject\";\r\n\r\n    \r\n \r\n}","import { EntityRelation } from './entity-relation';\r\nimport { Operation } from '../operation/operation';\r\nimport { Aggregate } from './aggregate';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class EntityObject extends Aggregate{\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_ENTITY_OBJECT;\r\n    }\r\n    entityRelations:{string:{string:Array<EntityRelation>}};\r\n    operations:Array<Operation>;\r\n\r\n}","import { Aggregate } from './aggregate';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class DataTransferObject extends Aggregate{\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT;\r\n    }\r\n\r\n}","import { CommonStructure } from './common-structure';\r\nimport { ValueObjectType } from '../data-type/structured-type/value-object-type/value-object-type';\r\nimport { Operation } from '../operation/operation';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class ValueObject extends CommonStructure {\r\n    dataType: ValueObjectType;\r\n    operations: Array<Operation>;\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_VALUE_OBJECT;\r\n    }\r\n\r\n}","export class EntityRelation {\r\n\r\n    ParentPropCode: string;\r\n\r\n    ChildPropCode: string;\r\n}","export class ElementConstant{\r\n    private constructor(){}\r\n\r\n    static readonly DEFAULT_MULTILLINGUAL_PROPERTY = \"DefaultMultillingualProperty\";\r\n    static readonly DEFAULT_OPERATION = \"DefaultOperation\";\r\n    static readonly DEFAULT_PARAMETER = \"DefaultParameter\";\r\n    static readonly DEFAULT_PROPERTY = \"DefaultProperty\";\r\n}","import { IExtension } from './i-extension';\r\n\r\nexport class Extension implements IExtension {\r\n\r\n    extension: { [key: string]: string };\r\n\r\n    getKeys(): any[] {\r\n        let result = new Array<string>();\r\n        for (let key in this.extension) {\r\n            result.push(key);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getValue(key: any) {\r\n        this.extension[key];\r\n    }\r\n}","import { Parameter } from '../parameter/parameter';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Operation extends Extension {\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    uri: string;\r\n    parameters: Array<Parameter>;\r\n    returnType:IDataType;\r\n    kind:string;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_OPERATION;\r\n    }\r\n}","import { IConstraint } from '../constraint/i-constraint';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Parameter extends Extension {\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n    defaultValue: any;\r\n    parameterType:IDataType;\r\n    constraint: IConstraint;\r\n    kind:string;\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_PARAMETER;\r\n    }\r\n}","import { IConstraint } from '../constraint/i-constraint';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Property extends Extension{\r\n    id:string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n    defaultValue: any;\r\n    propertyType: IDataType;\r\n    kind:string;\r\n    constraint: IConstraint;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_PROPERTY;\r\n    }\r\n}","import { IDataType } from './i-data-type';\r\nimport { Extension } from '../../extension';\r\n\r\nexport abstract class DataType extends Extension  implements IDataType{\r\n    \r\n    kind:string;\r\n\r\n    getKind():string{\r\n        return this.kind;\r\n    }\r\n}","export class DataTypeConst{\r\n    private constructor(){}\r\n\r\n    static readonly DEFAULT_PRIMITIVE = \"DefaultPrimitiveType\";\r\n    static readonly DEFAULT_COLLECTION = \"DefaultCollectionType\";\r\n    static readonly DEFAULT_MAP = \"DefaultMapType\";\r\n    static readonly DEFAULT_OBJECT=\"Object\";\r\n    static readonly DEFAULT_STRUCTURED=\"DefaultStructuredType\"\r\n\r\n    static readonly DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDtoType\";\r\n    static readonly DEFAULT_ENTITY = \"DefaultEntityType\";\r\n    static readonly DEFAULT_VALUE_OBJECT = \"DefaultValueObjectType\";\r\n    static readonly DEFAULT_ENUMERATION = \"DefaultEnumType\";\r\n    \r\n    static readonly STRUCTURED_REF = \"RefStructuredType\";\r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * éåç±»å\r\n */\r\nexport class CollectionType extends DataType implements IDataType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_COLLECTION;\r\n    }\r\n\r\n    /**\r\n     * åç´ ç±»åï¼å¦List<T>ä¸­Tçç±»å\r\n     */\r\n    elementType:IDataType;\r\n    \r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * Mapç±»å\r\n */\r\nexport class MapType extends DataType implements IDataType\r\n{\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_MAP;\r\n    }\r\n\r\n    /**\r\n     * é®çç±»å\r\n     */\r\n    keyType:IDataType;\r\n\r\n    /**\r\n     * å¼çç±»å\r\n     */\r\n    valueType:IDataType;\r\n}","import { PrimitiveTypeKind } from './primitive-type-kind';\r\nimport { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * åçç±»å\r\n */\r\nexport class PrimitiveType extends DataType implements IDataType {\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_PRIMITIVE;\r\n    }\r\n\r\n    /**\r\n     * è·ååçç±»åï¼å¦Int,Bool,Float,Doubleç­åºæ¬ç±»å\r\n     */\r\n    primitiveTypeKind: PrimitiveTypeKind;\r\n}","import { Property } from '../../property/property';\r\nimport { DataType } from '../data-type';\r\nimport { IDataType } from '../i-data-type';\r\nimport { CommonStructure } from '../../structure/common-structure';\r\n\r\n/**\r\n * ç»æä½ç±»å\r\n */\r\nexport class StructuredType extends DataType implements IDataType {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    properties: Array<Property>;\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class EntityType extends StructuredType{\r\n    primaryKeys:Array<string>;\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_ENTITY;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class DataTransferObjectType extends StructuredType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class ValueObjectType extends StructuredType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_VALUE_OBJECT;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\nimport { EnumerationItem } from './enumeration-item';\r\n\r\nexport class EnumerationType extends StructuredType{\r\n\r\n    enumerationItems:Array<EnumerationItem>;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_ENUMERATION;\r\n    }\r\n}","export class EnumerationItem{\r\n    code:string;\r\n    value:string;\r\n    description:string;\r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\nexport class ObjectType extends DataType implements IDataType{\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_OBJECT;\r\n    }\r\n\r\n    getKind(): string {\r\n       return this.kind;\r\n    }    \r\n\r\n}","export class ConstraintConst{\r\n\r\n    private constructor(){}\r\n    static readonly STRING: string = \"StringConstraint\";\r\n    static readonly DECIMAL: string = \"DecimalConstraint\";\r\n \r\n}","import { IConstraint } from './i-constraint';\r\nimport { ConstraintConst } from '../constant/constraint-const';\r\n\r\nexport class DecimalConstraint implements IConstraint{\r\n\r\n    getKind(): string {\r\n        return ConstraintConst.DECIMAL;\r\n    }\r\n    \r\n    scale:number;\r\n    pricision:number;\r\n}","import { IConstraint } from './i-constraint';\r\nimport { ConstraintConst } from '../constant/constraint-const';\r\n\r\nexport class StringConstraint implements IConstraint{\r\n\r\n    getKind(): string {\r\n        return ConstraintConst.STRING;\r\n    }\r\n    \r\n    maxLength:number;\r\n}","export enum PrimitiveTypeKind {\r\n    // String = 0,\r\n    // Bool = 1,\r\n    // Int16 = 2,\r\n    // Int32 = 3,\r\n    // Int64 = 4,\r\n    // Float = 5,\r\n    // Double = 6,\r\n    // Decimal = 7,\r\n    // DateTime = 8,\r\n    // TimeStamp = 9,\r\n    // Byte=10 ,\r\n    String,\r\n    Bool,\r\n    Int16,\r\n    Int32,\r\n    Int64,\r\n    Float,\r\n    Double,\r\n    Decimal,\r\n    DateTime,\r\n    TimeStamp,\r\n    Byte\r\n}","\r\nimport { DataType } from '../data-type';\r\nimport { IDataType } from '../i-data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * Mapç±»å\r\n */\r\nexport class StructuredReferType extends DataType implements IDataType{\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.STRUCTURED_REF;\r\n    }\r\n   \r\n    /**\r\n     * structuredId\r\n     */\r\n    refId:string;\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\n\r\nexport class DataTypeConvertUtil {\r\n\r\n    static convertToObject(datatype: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        if (datatype instanceof StructuredType) {\r\n            result['kind'] = \"RefStructuredType\";\r\n            result[\"isRefer\"] = true;\r\n            result[\"refId\"] = datatype.id;\r\n        }\r\n        else {\r\n            var kind = datatype.getKind();\r\n            result[\"kind\"] = kind;\r\n            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);\r\n            result = serializer.serialize(datatype, ctxt);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static initFromObject(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result: IDataType;\r\n        if (obj['isRefer'] != null) {\r\n            result = new StructuredReferType();\r\n            (result as StructuredReferType).refId = obj['refId'];\r\n        }\r\n        else {\r\n            var kind = obj[\"kind\"];\r\n            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);\r\n            result = serializer.deserialize(obj, ctxt);\r\n        }\r\n        return result;\r\n        // switch (obj[\"kind\"]) {\r\n        //     case DataTypeConst.DEFAULT_PRIMITIVE:\r\n        //         let primitiveKindConvertor = new PrimitiveTypeConvertor();\r\n        //         return primitiveKindConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_COLLECTION:\r\n        //         let collectionConvertor = new CollectionTypeConvertor();\r\n        //         return collectionConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_MAP:\r\n        //         let mapConvertor = new MapTypeConvertor();\r\n        //         return mapConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_STRUCTURED:\r\n        //         let structureConvertor = new StructuredTypeConvertor();\r\n        //         return structureConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_ENTITY:\r\n        //         let entityConvertor = new StructuredTypeConvertor();\r\n        //         return entityConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_VALUE_OBJECT:\r\n        //         let voConvertor = new StructuredTypeConvertor();\r\n        //         return voConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:\r\n        //         let dtoConvertor = new StructuredTypeConvertor();\r\n        //         return dtoConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_ENUMERATION:\r\n        //         let enumerationConvertor = new StructuredTypeConvertor();\r\n        //         return enumerationConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.STRUCTURED_REF:\r\n        //         let structureRefConvertor = new StructuredTypeReferConvertor();\r\n        //         return structureRefConvertor.initFromObject(obj);\r\n        //     default:\r\n        //         throw new Error(`æ°æ®ç±»åä¸æ¯æç${obj[\"kind\"]}ç±»åï¼`);\r\n        // }\r\n    }\r\n}","import { Extension } from '../../extension';\r\n\r\nexport class ExtensionConvertor{\r\n\r\n    addToJObj(extensionObj:Extension,jObj:Object){\r\n        jObj['extension'] = extensionObj.extension;\r\n\r\n    }\r\n\r\n    addToObj(extensionObj:Extension,jObj:Object){\r\n        if (jObj['extension']) {\r\n            extensionObj.extension = jObj['extension'];\r\n        }\r\n    }\r\n}","import { CollectionType } from '../../define/data-type/collection-type/collection-type';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class CollectionTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let collectiontype = datatype as CollectionType;\r\n        obj['kind'] = collectiontype.kind;\r\n        obj['elementType'] = null;\r\n        if (collectiontype.elementType) {\r\n            let kind = collectiontype.elementType.getKind();\r\n            if (!kind) {\r\n                throw new Error('éåç±»ååºååæ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['elementType'] = DataTypeConvertUtil.convertToObject(collectiontype.elementType, ctxt);\r\n        }\r\n\r\n        if (collectiontype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(collectiontype, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        var collectionType = dataType as CollectionType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        collectionType.kind = obj['kind'];\r\n        if (obj['elementType']) {\r\n            let kind = obj['elementType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æCollectionTypeæ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            collectionType.elementType = DataTypeConvertUtil.initFromObject(obj['elementType'], ctxt);\r\n        }\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(collectionType, obj);\r\n        }\r\n    }\r\n}","import { MapType } from '../../define/data-type/map-type/map-type';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class MapTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n\r\n        let maptype = datatype as MapType;\r\n        obj['kind'] = maptype.kind;\r\n        obj['keyType'] = null;\r\n        if (maptype.keyType) {\r\n            let kind = maptype.keyType.getKind();\r\n            if (!kind) {\r\n                throw new Error('Mapç±»ååºååæ¶KeyTypeçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);\r\n        }\r\n\r\n        obj['valueType'] = null;\r\n        if (maptype.valueType) {\r\n            let kind = maptype.valueType.getKind();\r\n            if (!kind) {\r\n                throw new Error('Mapç±»ååºååæ¶ValueTypeçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);\r\n        }\r\n\r\n        if (maptype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(maptype, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let maptype = dataType as MapType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        maptype.kind = obj['kind'];\r\n\r\n        if (obj['keyType']) {\r\n            let kind = obj['keyType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æMapTypeçKeyTypeå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);\r\n        }\r\n\r\n        if (obj['valueType']) {\r\n            let kind = obj['valueType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æMapTypeçValueTypeå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(maptype, obj);\r\n        }\r\n    }\r\n}","import { PrimitiveType } from '../../define/data-type/primitive-type/primitive-type';\r\nimport { PrimitiveTypeKind } from '../../define/data-type/primitive-type/primitive-type-kind';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class PrimitiveTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let primitivetype = datatype as PrimitiveType;\r\n        obj['kind'] = primitivetype.kind;\r\n        //è¿æ¯number\r\n        let primitiveTypeKindNum = primitivetype.primitiveTypeKind;\r\n        obj['primitiveTypeKind'] = primitiveTypeKindNum;\r\n\r\n        if (primitivetype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(primitivetype, obj);\r\n        }\r\n        \r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let primitivetype = dataType as PrimitiveType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        primitivetype.kind = obj['kind'];\r\n        primitivetype.primitiveTypeKind = obj['primitiveTypeKind'] as number;\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(primitivetype, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ObjectType } from '../../define/data-type/object-type/object-type';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class ObjectTypeConvertor {\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let objectType = datatype as ObjectType;\r\n        obj['kind'] = objectType.kind;\r\n\r\n        if (objectType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(objectType, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let objectType = dataType as ObjectType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        objectType.kind = obj['kind'];\r\n\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(objectType, obj);\r\n        }\r\n    }\r\n}","import { Property } from '../../define/property/property';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class PropertyConvertor {\r\n\r\n    convertToObject(obj: Object, property: Property, ctxt: ISerializeContext): void {\r\n        if (!property) {\r\n            return;\r\n        }\r\n        obj['kind'] = property.kind;\r\n        obj['id'] = property.id;\r\n        obj['code'] = property.code;\r\n        obj['name'] = property.name;\r\n        obj['description'] = property.description;\r\n        obj['defaultValue'] = property.defaultValue;\r\n        obj['required'] = <boolean>property.required;\r\n\r\n        if (property.propertyType) {\r\n            let kind = property.propertyType.getKind();\r\n            if (!kind) {\r\n                throw new Error('å±æ§åºååæ¶å±æ§ç±»åè·åTypeKindä¸ºç©ºæ ¼ï¼');\r\n            }\r\n            obj['propertyType'] = DataTypeConvertUtil.convertToObject(property.propertyType, ctxt);\r\n        }\r\n        obj['constraint'] = null;\r\n\r\n        if (property.constraint) {\r\n            let kind = property.constraint.getKind();\r\n            if (!kind) {\r\n                throw new Error('å±æ§åºååæ¶å±æ§çº¦æè·åConstraintKindä¸ºç©ºæ ¼ï¼');\r\n            }\r\n            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(property.constraint,ctxt);\r\n        }\r\n\r\n        if (property.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(property, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(property: Property, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        property.kind = obj['kind'];\r\n        property.id = obj['id'];\r\n        property.code = obj['code'];\r\n        property.name = obj['name'];\r\n        property.defaultValue = obj['defaultValue'];\r\n        property.required = obj['required'] as boolean;\r\n        property.description = obj['description'];\r\n\r\n        if (obj['propertyType']) {\r\n            let kind = obj['propertyType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            property.propertyType = DataTypeConvertUtil.initFromObject(obj['propertyType'], ctxt);\r\n        }\r\n        if (obj['constraint']) {\r\n            let kind = obj['constraint']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æå±æ§æ¶çº¦æç±»åçConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            property.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'],ctxt);\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(property, obj);\r\n        }\r\n    }\r\n}","import { Property } from '../../define/property/property';\r\nimport { PropertyConvertor } from '../property/property-convertor';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { CommonStructureConvertor } from '../structure/common-structure-convertor';\r\nimport { CommonStructure } from '../../define/structure/common-structure';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class StructuredTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structure = datatype as StructuredType;\r\n        if (!structure) {\r\n            return;\r\n        }\r\n        obj['kind'] = structure.kind;\r\n        obj['id'] = structure.id;\r\n        obj['code'] = structure.code;\r\n        obj['name'] = structure.name;\r\n        obj['description'] = structure.description;\r\n        obj['properties'] = new Array<Object>();\r\n        if (structure.properties) {\r\n            let propertyConvertor = new PropertyConvertor();\r\n            structure.properties.forEach(property => {\r\n                var kind = property.kind;\r\n                var serializer = ctxt.getPropertySerializerFactory().get(kind);\r\n                var propertyObj = serializer.serialize(property, ctxt);\r\n                obj['properties'].push(propertyObj);\r\n            });\r\n        }\r\n\r\n        if (structure.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(structure, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structure = dataType as StructuredType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        structure.kind = obj['kind'];\r\n        structure.id = obj['id'];\r\n        structure.name = obj['name'];\r\n        structure.code = obj['code'];\r\n        structure.description = obj['description'];\r\n\r\n        if (obj['properties']) {\r\n            structure.properties = new Array<Property>();\r\n            let propertyConvertor = new PropertyConvertor();\r\n            obj['properties'].forEach(propertyObj => {\r\n                var propKind = propertyObj[\"kind\"];\r\n                var serializer = ctxt.getPropertySerializerFactory().get(propKind);\r\n                var property = serializer.deserialize(propertyObj, ctxt);\r\n                structure.properties.push(property);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(structure, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { DataTransferObjectType } from '../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { CommonStructureConvertor } from '../structure/common-structure-convertor';\r\n\r\nexport class DataTransferObjectTypeConvertor{\r\n    convertToObject(obj:Object,datatype:IDataType,ctxt:ISerializeContext):void{\r\n        let structuredConvertor: StructuredTypeConvertor=new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj,datatype,ctxt);\r\n    }\r\n\r\n    initFromObject(dataType:IDataType,obj:Object,ctxt:ISerializeContext):void{\r\n        let structuredConvertor: StructuredTypeConvertor=new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType,obj,ctxt) ;\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { EntityType } from '../../define/data-type/structured-type/entity-type/entity-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class EntityTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        let result = structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n        result['primaryKeys'] = new Array<string>();\r\n        let entityType = datatype as EntityType;\r\n        if (entityType.primaryKeys) {\r\n            entityType.primaryKeys.forEach(element => {\r\n                result['primaryKeys'].push(element);\r\n            });\r\n        }\r\n\r\n        if (entityType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(entityType, obj);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let entityType = dataType as EntityType;\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n        if (obj['primaryKey']) {\r\n            entityType.primaryKeys = new Array<string>();\r\n            obj['primaryKey'].forEach(element => {\r\n                entityType.primaryKeys.push(element);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(entityType, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { ValueObjectType } from '../../define/data-type/structured-type/value-object-type/value-object-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\n\r\nexport class ValueObjectTypeConvertor {\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n    }\r\n}","import { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';\r\n\r\nexport class EnumerationItemConvertor{\r\n    convertToObject(obj:Object,item: EnumerationItem): void {\r\n        obj['code'] = item.code;\r\n        obj['value'] = item.value;\r\n        obj['description'] = item.description;\r\n    }\r\n\r\n    initFromObject(item:EnumerationItem,obj: Object): void {\r\n        let enumItem = item as EnumerationItem;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        enumItem.code = obj['code'];\r\n        enumItem.value = obj['value'];\r\n        enumItem.description = obj['description'];\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { EntityType } from '../../define/data-type/structured-type/entity-type/entity-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { EnumerationType } from '../../define/data-type/structured-type/enumeration-type/enumeration-type';\r\nimport { EnumerationItemConvertor } from './enumeration-item-convertor';\r\nimport { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class EnumerationTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n        let enumerationType = datatype as EnumerationType;\r\n        //enum items\r\n        obj['enumerationItems'] = new Array<Object>();\r\n        if (enumerationType.enumerationItems) {\r\n            let convertor: EnumerationItemConvertor = new EnumerationItemConvertor();\r\n            enumerationType.enumerationItems.forEach(item => {\r\n                let itemObj = new Object();\r\n                convertor.convertToObject(itemObj, item);\r\n                obj['enumerationItems'].push(itemObj);\r\n            });\r\n        }\r\n\r\n\r\n        if (enumerationType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(enumerationType, obj);\r\n        }\r\n\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n        //enum items\r\n        let enumerationType = dataType as EnumerationType;\r\n        if (obj['enumerationItems']) {\r\n            enumerationType.enumerationItems = new Array<EnumerationItem>();\r\n            let convertor: EnumerationItemConvertor = new EnumerationItemConvertor();\r\n            obj['enumerationItems'].forEach(itemObj => {\r\n                let item: EnumerationItem = new EnumerationItem();\r\n                convertor.initFromObject(item, itemObj);\r\n                enumerationType.enumerationItems.push(item);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(enumerationType, obj);\r\n        }\r\n    }\r\n}","import { Parameter } from '../../define/parameter/parameter';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class ParameterConvertor {\r\n\r\n    convertToObject(obj:Object,parameter: Parameter,ctxt:ISerializeContext): void {\r\n        if (!parameter) {\r\n            return;\r\n        }\r\n        obj['kind'] = parameter.kind;\r\n\r\n        obj['code'] = parameter.code;\r\n        obj['name'] = parameter.name;\r\n        obj['description'] = parameter.description;\r\n        obj['required'] = parameter.required;\r\n        obj['defaultValue'] = parameter.defaultValue;\r\n\r\n        obj['parameterType'] = null;\r\n        if (parameter.parameterType) {\r\n            let kind = parameter.parameterType.getKind();\r\n            if (!kind) {\r\n                throw new Error('åæ°åºååæ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType,ctxt);\r\n        }\r\n\r\n        obj['constraint'] = null;\r\n        if (parameter.constraint) {\r\n            let kind = parameter.constraint.getKind();\r\n            if (!kind) {\r\n                throw new Error('åæ°åºååæ¶åæ°çº¦æçConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint,ctxt);\r\n        }\r\n        \r\n        if(parameter.extension){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(parameter,obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(parameter: Parameter, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        parameter.kind = obj['kind'];\r\n        parameter.code = obj['code'];\r\n        parameter.name = obj['name'];\r\n        parameter.defaultValue = obj['defaultValue'];\r\n        parameter.description = obj['description'];\r\n        parameter.required = obj['required'] as boolean;\r\n\r\n        if (obj['parameterType']) {\r\n            let kind = obj['parameterType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æåæ°æ°æ®ç±»åæ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);\r\n        }\r\n        if (obj['constraint']) {\r\n            let kind = obj['constraint']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æåæ°çº¦æç±»åæ¶ConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'],ctxt);\r\n        }\r\n        if(obj[\"extension\"]){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToObj(parameter,obj);\r\n        }\r\n    }\r\n}","import { Operation } from '../../define/operation/operation';\r\nimport { Parameter } from '../../define/parameter/parameter';\r\nimport { ParameterConvertor } from '../parameter/parameter-convertor';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class OperationConvertor{\r\n\r\n    convertToObject(obj:Object,operation:Operation,ctxt:ISerializeContext):void{\r\n        if(!operation){\r\n            return ;\r\n        }\r\n        obj['kind']=operation.kind;\r\n\r\n        obj['code']=operation.code;\r\n        obj['name']=operation.name;\r\n        obj['uri']=operation.uri;\r\n        obj['description']=operation.description;\r\n\r\n        obj['returnType']=null;\r\n        if(operation.returnType){\r\n            let kind=operation.returnType.getKind();\r\n            if(!kind){\r\n                throw new Error('æä½åºååæ¶è¿åå¼ç±»åçTypeKindä¸ºç©º!');\r\n            }\r\n            obj['returnType']=DataTypeConvertUtil.convertToObject(operation.returnType,ctxt);\r\n        }\r\n        \r\n        obj['parameters']=new Array<Object>();\r\n        if(operation.parameters){\r\n            let parameterConvertor=new ParameterConvertor();\r\n            operation.parameters.forEach(parameter => {\r\n                var kind=parameter.kind;\r\n                var serializer=ctxt.getParameterSerializerFactory().get(kind);\r\n                var parameterObj=serializer.deserialize(parameter,ctxt);\r\n                obj[\"parameters\"].push(parameterObj);\r\n            });\r\n        }\r\n\r\n        if(operation.extension){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(operation,obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(operation:Operation,obj:Object,ctxt:ISerializeContext):void{\r\n        if(!obj){\r\n            return ;\r\n        }\r\n        operation.kind=obj['kind'];\r\n        operation.code=obj['code'];\r\n        operation.name=obj['name'];\r\n        operation.uri=obj['uri'];\r\n        operation.description=obj['description'];\r\n\r\n        if(obj['parameters']){\r\n            operation.parameters=new Array<Parameter>();\r\n            let parameterConvertor=new ParameterConvertor();\r\n            obj['parameters'].forEach(parameterObj => {\r\n                var kind=parameterObj['kind'];\r\n                var serializer=ctxt.getParameterSerializerFactory().get(kind);\r\n                var parameter=serializer.deserialize(parameterObj,ctxt);\r\n                operation.parameters.push(parameter);\r\n            });\r\n        }\r\n        if(obj['returnType']){\r\n            let kind=obj['returnType']['kind'];\r\n            if(!kind){\r\n                throw new Error('è§£ææä½çè¿åå¼æ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            operation.returnType=DataTypeConvertUtil.initFromObject(obj['returnType'],ctxt);\r\n        }\r\n        \r\n        if(obj[\"extension\"]){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToObj(operation,obj);\r\n        }\r\n    }\r\n}","import { CommonStructure } from '../../define/structure/common-structure';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { Operation } from '../../define/operation/operation';\r\nimport { DataType } from '../../define/data-type/data-type';\r\n\r\nexport class ReferReplaceUtil {\r\n    static replaceOperationRefer(allStructureTypes: StructuredType[], operations: Operation[]) {\r\n        if (operations != null) {\r\n            operations.forEach(op => {\r\n                let retType = op.returnType;\r\n                if (retType != null && retType instanceof StructuredReferType) {\r\n                    let structureTypeId: string = (retType as StructuredReferType).refId;\r\n                    let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);\r\n                    op.returnType = queryStructureType;\r\n                }\r\n                if (op.parameters != null) {\r\n                    op.parameters.forEach(parameter => {\r\n                        let parameterType = parameter.parameterType;\r\n                        if (parameterType instanceof StructuredReferType) {\r\n                            let structureTypeId: string = (parameterType as StructuredReferType).refId;\r\n                            let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);\r\n                            parameter.parameterType = queryStructureType;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    static replacePropertyRefer(structure: CommonStructure) {\r\n        let allStructures = this.getAllStructuredTypes(structure);\r\n        if (structure.structuredTypes != null) {\r\n            structure.structuredTypes.forEach(structureType => {\r\n                if (structureType.properties != null) {\r\n                    structureType.properties.forEach(prop => {\r\n                        if (prop.propertyType instanceof StructuredReferType) {\r\n                            let structureTypeId = (prop.propertyType as StructuredReferType).refId;\r\n                            let queryStructureType = this.getRefStructureType(allStructures, structureTypeId);\r\n                            prop.propertyType = queryStructureType;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                this.replacePropertyRefer(refStructure);\r\n            })\r\n        }\r\n    }\r\n\r\n    static getRefStructureType(allStructures: StructuredType[], structureId: string): StructuredType {\r\n        let queryStructureType = allStructures.find(x => x.id == structureId);\r\n        return queryStructureType;\r\n    }\r\n\r\n    static getAllStructuredTypes(structure: CommonStructure) {\r\n        let array: Array<StructuredType> = new Array<StructuredType>();\r\n        if (structure.structuredTypes != null) {\r\n            array=array.concat(structure.structuredTypes);\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                if (refStructure.structuredTypes != null) {\r\n                    array=array.concat(refStructure.structuredTypes);\r\n                }\r\n            })\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n\r\n}","import { StructuredTypeConvertor } from '../data-type/structured-type-convertor';\r\nimport { CommonStructure } from '../../define/structure/common-structure';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class CommonStructureConvertor {\r\n\r\n    convertToObject(obj:Object,structure: CommonStructure,ctxt:ICommonStructureSerializeContext): void {\r\n        if (!structure) {\r\n            return;\r\n        }   \r\n        obj['id'] = structure.id;\r\n        obj['uri']=structure.uri;\r\n        obj['code'] = structure.code;\r\n        obj['name'] = structure.name;\r\n        obj['kind'] = structure.kind;\r\n        obj['description'] = structure.description;\r\n        let structureConvertor = new StructuredTypeConvertor();\r\n\r\n        obj['structuredTypes'] = new Array<Object>();\r\n        if (structure.structuredTypes) {\r\n            structure.structuredTypes.forEach(structuredType => {\r\n                var kind=structuredType.kind;\r\n                var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n                var structuredTypeObj=serializer.serialize(structuredType,ctxt);\r\n                obj['structuredTypes'].push(structuredTypeObj);\r\n            });\r\n        }\r\n\r\n        obj['refStructures'] = new Array<Object>();\r\n        if (structure.refStructures) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                var kind=refStructure.kind;\r\n                var serializer=ctxt.getStructureSerializerFactory().get(kind);\r\n                var refStructureObj=serializer.serialize(refStructure,ctxt);\r\n                obj['refStructures'].push(refStructureObj);\r\n            });\r\n        }\r\n    }\r\n\r\n    initFromObject(structure:CommonStructure,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        structure.kind = obj['kind'];\r\n        structure.id = obj['id'];\r\n        structure.uri=obj['uri'];\r\n        structure.code = obj['code'];\r\n        structure.name = obj['name'];\r\n        structure.description = obj['description'];\r\n\r\n        if (obj['structuredTypes']) {\r\n            structure.structuredTypes = new Array<StructuredType>();\r\n            obj['structuredTypes'].forEach(structureObj => {\r\n                var kind=structureObj['kind'];\r\n                var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n                var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;\r\n                structure.structuredTypes.push(structuredType);\r\n                // structure.structuredTypes.push(DataTypeConvertUtil.initFromObject(structureObj) as StructuredType);\r\n            });\r\n        }\r\n\r\n        if (obj['refStructures']) {\r\n            structure.refStructures = new Array<CommonStructure>();\r\n            obj['refStructures'].forEach(refTree => {\r\n                var kind=refTree['kind'];\r\n                var refSerializer=ctxt.getStructureSerializerFactory().get(kind);\r\n                var refStructure=refSerializer.deserialize(refTree,ctxt);\r\n                structure.refStructures.push(refStructure);\r\n                // structure.refStructures.push(CommonStructureConvertUtil.initFromObject(refTree));\r\n            })\r\n        }\r\n        //æ¿æ¢structuredTypesårefStructuresä¸­çpropRefer\r\n        ReferReplaceUtil.replacePropertyRefer(structure);\r\n    }\r\n\r\n}","import { Aggregate } from '../../define/structure/aggregate';\r\nimport { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class AggregateConvertor{\r\n\r\n     convertToObject(obj:Object,aggregate: Aggregate,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.convertToObject(obj,aggregate,ctxt);\r\n        //root\r\n        if(aggregate.root){\r\n            obj['rootId']=aggregate.root.id;\r\n        }\r\n    }\r\n\r\n     initFromObject(aggregate:Aggregate,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.initFromObject(aggregate,obj,ctxt);\r\n        //root\r\n        let rootId=obj['rootId'];\r\n        if(rootId&&aggregate.structuredTypes&&aggregate.structuredTypes.length>0){\r\n            aggregate.root=aggregate.structuredTypes.find(x=>x.id==rootId);\r\n        }\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { Operation } from '../../define/operation/operation';\r\nimport { OperationConvertor } from '../operation/operation-convertor';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { AggregateConvertor } from './aggregate-convertor';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class EntityObjectConvertor  {\r\n\r\n     convertToObject(obj:Object,entity: EntityObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.convertToObject(obj,entity,ctxt);\r\n        obj['entityRelations'] = entity.entityRelations;\r\n        obj['operations'] = new Array<Object>();\r\n        if (entity.operations) {\r\n            entity.operations.forEach(op => {\r\n                var kind=op['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var opObj=serializer.serialize(op,ctxt);\r\n                obj['operations'].push(opObj);\r\n            });\r\n        }\r\n    }\r\n\r\n     initFromObject(entity:EntityObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.initFromObject(entity,obj,ctxt);\r\n        if (obj['entityRelations']) {\r\n            entity.entityRelations = obj['entityRelations'];\r\n        }\r\n        if (obj['operations']) {\r\n            entity.operations = new Array<Operation>();\r\n            obj['operations'].forEach(operationObj => {\r\n                var kind=operationObj['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var operation=serializer.deserialize(operationObj,ctxt);\r\n                entity.operations.push(operation);\r\n            });\r\n        }\r\n        let allStructureTypes:Array<StructuredType>=ReferReplaceUtil.getAllStructuredTypes(entity);\r\n        ReferReplaceUtil.replaceOperationRefer(allStructureTypes,entity.operations);\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { DataTransferObject } from '../../define/structure/data-transfer-object';\r\nimport { AggregateConvertor } from './aggregate-convertor';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class DataTransferObjectConvertor {\r\n     convertToObject(obj:Object,dto: DataTransferObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.convertToObject(obj,dto,ctxt);\r\n    }\r\n\r\n     initFromObject(dto:DataTransferObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.initFromObject(dto,obj,ctxt);\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { ValueObject } from '../../define/structure/value-object';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class ValueObjectConvertor {\r\n     convertToObject(obj:Object,vo: ValueObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.convertToObject(obj,vo,ctxt);\r\n        //first?\r\n        var type=vo.dataType;\r\n        obj['structureId']=type.id;\r\n    }\r\n\r\n     initFromObject(vo:ValueObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.initFromObject(vo,obj,ctxt);\r\n        //æ²¡æroot\r\n        let allStructureTypes:Array<StructuredType>=ReferReplaceUtil.getAllStructuredTypes(vo);\r\n        ReferReplaceUtil.replaceOperationRefer(allStructureTypes,vo.operations);\r\n    }\r\n}","import { EntityRelation } from '../../define/structure/entity-relation';\r\n\r\nexport class RelationConvertor{\r\n    \r\n    convertorToObject(relation:EntityRelation):Object{\r\n        let obj=new Object();\r\n        if(!relation){\r\n            return obj;\r\n        }\r\n        obj['ParentPropCode']=relation.ParentPropCode;\r\n        obj['ChildPropCode']=relation.ChildPropCode;\r\n        return obj;\r\n    }\r\n\r\n    initFromObject(obj:Object):EntityRelation{\r\n        let relation=new EntityRelation();\r\n        if(!obj){\r\n            return relation;\r\n        }\r\n        relation.ParentPropCode=obj['ParentPropCode'];\r\n        relation.ChildPropCode=obj['ChildPropCode'];\r\n        return relation;\r\n    }\r\n}","import { RelationConvertor } from './relation-convertor';\r\nimport { EntityRelation } from '../../define/structure/entity-relation';\r\n\r\nexport class RelationDictConvertor {\r\n\r\n    convertorToObject(relationDict: { string: { string: Array<EntityRelation> } }): Object {\r\n        return relationDict;\r\n    }\r\n\r\n    initFromObject(obj: Object): { string: { string: Array<EntityRelation> } } {\r\n        let relationDict = new Object();\r\n        if (!obj) {\r\n            return relationDict as { string: { string: Array<EntityRelation> } };\r\n        }\r\n        let pCodeList = Object.keys(obj);\r\n        pCodeList.forEach(pCode => {\r\n            let cDict = obj[pCode];\r\n            if (cDict) {\r\n                relationDict[pCode] = new Object();\r\n                let cCodeList = Object.keys(cDict);\r\n                cCodeList.forEach(cCode => {\r\n                    let cValue = cDict[cCode];\r\n                    if (cValue) {\r\n                        relationDict[pCode][cCode] = new Array<EntityRelation>();\r\n                        cValue.forEach(relationObj => {\r\n                            let relationConvertor = new RelationConvertor();\r\n                            let relation = relationConvertor.initFromObject(relationObj);\r\n                            relationDict[pCode][cCode].push(relation);\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return relationDict as { string: { string: Array<EntityRelation> } };\r\n    }\r\n}","import { IConstraint } from '../../define/constraint/i-constraint';\r\nimport { ConstraintConst } from '../../define/constant/constraint-const';\r\nimport { DecimalConstraint } from '../../define/constraint/decimal-constraint';\r\nimport { StringConstraint } from '../../define/constraint/string-constraint';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\n\r\n\r\nexport class ConstraintConvertor {\r\n\r\n    convertToObject(obj: Object, constraint: IConstraint, ctxt: ISerializeContext): void {\r\n        if (!constraint) {\r\n            return;\r\n        }\r\n        switch (constraint.getKind()) {\r\n            case ConstraintConst.DECIMAL:\r\n                let decimalconstraint = constraint as DecimalConstraint;\r\n                obj['scale'] = <number>decimalconstraint.scale;\r\n                obj['pricision'] = <number>decimalconstraint.pricision;\r\n            case ConstraintConst.STRING:\r\n                let stringconstraint = constraint as StringConstraint;\r\n                obj['maxLength'] = <number>stringconstraint.maxLength;\r\n            default:\r\n                throw new Error(`çº¦æä¸æ¯æç${constraint.getKind()}ç±»åï¼`);\r\n        }\r\n    }\r\n\r\n    initFromObject(constraint: IConstraint, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        switch (obj['kind']) {\r\n            case ConstraintConst.DECIMAL:\r\n            case ConstraintConst.STRING:\r\n            default:\r\n                throw new Error(`çº¦æä¸æ¯æç${obj['kind']}ç±»åï¼`);\r\n        }\r\n    }\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';\r\nimport { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';\r\n\r\nexport class DefaultPrimitiveTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new PrimitiveTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new PrimitiveType();\r\n        let baseConvertor = new PrimitiveTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { CollectionTypeConvertor } from '../../../convertor/data-type/collection-type-convertor';\r\nimport { CollectionType } from '../../../define/data-type/collection-type/collection-type';\r\n\r\nexport class DefaultCollectionTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new CollectionTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new CollectionType();\r\n        let baseConvertor = new CollectionTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { MapTypeConvertor } from '../../../convertor/data-type/map-type-convertor';\r\nimport { MapType } from '../../../define/data-type/map-type/map-type';\r\n\r\nexport class DefaultMapTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new MapTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new MapType();                \r\n        let baseConvertor = new MapTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { StructuredTypeConvertor } from '../../../convertor/data-type/structured-type-convertor';\r\nimport { StructuredType } from '../../../define/data-type/structured-type/structured-type';\r\n\r\nexport class DefaultStructuredTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new StructuredTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new StructuredType();\r\n        let baseConvertor = new StructuredTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { EntityTypeConvertor } from '../../../convertor/data-type/entity-type-convertor';\r\nimport { EntityType } from '../../../define/data-type/structured-type/entity-type/entity-type';\r\n\r\nexport class DefaultEntityTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new EntityTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new EntityType();\r\n        let baseConvertor = new EntityTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';\r\nimport { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';\r\nimport { EnumerationTypeConvertor } from '../../../convertor/data-type/enumeration-type-convertor';\r\nimport { EnumerationType } from '../../../define/data-type/structured-type/enumeration-type/enumeration-type';\r\n\r\nexport class DefaultEnumerationTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new EnumerationTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new EnumerationType();\r\n        let baseConvertor = new EnumerationTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { DataTransferObjectTypeConvertor } from '../../../convertor/data-type/data-transfer-object-type-convertor';\r\nimport { DataTransferObjectType } from '../../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';\r\n\r\nexport class DefaultDataTransferObjectTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new DataTransferObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result=new DataTransferObjectType();\r\n        let baseConvertor=new DataTransferObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ValueObjectTypeConvertor } from '../../../convertor/data-type/value-object-type-convertor';\r\nimport { ValueObjectType } from '../../../define/data-type/structured-type/value-object-type/value-object-type';\r\n\r\nexport class DefaultValueObjectTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new ValueObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new ValueObjectType();\r\n        let baseConvertor = new ValueObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ObjectTypeConvertor } from '../../../convertor/data-type/object-type-convertor';\r\nimport { ObjectType } from '../../../define/data-type/object-type/object-type';\r\n\r\nexport class DefaultObjectTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new ObjectType();\r\n        let baseConvertor = new ObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializerFactory } from '../../extension/factory/i-data-type-serializer-factory';\r\nimport { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { DefaultPrimitiveTypeSerializer } from '../serializer/default-primitive-type-serializer';\r\nimport { DefaultCollectionTypeSerializer } from '../serializer/default-collection-type-serializer';\r\nimport { DefaultMapTypeSerializer } from '../serializer/default-map-type-serializer';\r\nimport { DefaultStructuredTypeSerializer } from '../serializer/default-structured-type-serializer';\r\nimport { DefaultEntityTypeSerializer } from '../serializer/default-entity-type-serializer';\r\nimport { DefaultEnumerationTypeSerializer } from '../serializer/default-enumeration-type-serializer';\r\nimport { DefaultDataTransferObjectTypeSerializer } from '../serializer/default-dto-type-serializer';\r\nimport { DataTypeConst } from '../../../define/constant/data-type-const';\r\nimport { DefaultValueObjectTypeSerializer } from '../serializer/default-vo-type-serializer';\r\nimport { DefaultObjectTypeSerializer } from '../serializer/default-object-type-serializer';\r\n\r\nexport class DefaultDataTypeSerializerFactory implements IDataTypeSerializerFactory {\r\n\r\n    private serializerDict: { [key: string]: IDataTypeSerializer } = {};\r\n\r\n    get(kind: string): IDataTypeSerializer {\r\n        switch (kind) {\r\n            case DataTypeConst.DEFAULT_PRIMITIVE:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultPrimitiveTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_COLLECTION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultCollectionTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_MAP:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultMapTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_STRUCTURED:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultStructuredTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultDataTransferObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_ENTITY:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEntityTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_VALUE_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultValueObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_ENUMERATION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEnumerationTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªæ¾å°ç±»åä¸º${kind}çåºååå¨ï¼`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","/** DefaultDataType */\r\nexport const DEFAULT_PRIMITIVE_TYPE = \"DefaultPrimitiveType\";\r\nexport const DEFAULT_COLLECTION_TYPE = \"DefaultCollectionType\";\r\nexport const DEFAULT_MAP_TYPE = \"DefaultMapType\";\r\nexport const DEFAULT_STRUCTURED_TYPE = \"DefaultStructuredType\";\r\nexport const DEFAULT_DATA_TRANSFER_OBJECT_TYPE = \"DefaultDtoType\";\r\nexport const DEFAULT_ENTITY_TYPE = \"DefaultEntityType\";\r\nexport const DEFAULT_VALUE_OBJECT_TYPE = \"DefaultValueObjectType\";\r\nexport const DEFAULT_ENUMERATION_TYPE = \"DefaultEnumType\";\r\nexport const DEFAULT_OBJECT_TYPE = \"Object\";\r\n\r\n\r\n/** DefaultElement */\r\nexport const DEFAULT_PROPERTY = \"DefaultProperty\";\r\nexport const DEFAULT_PARAMETER = \"DefaultParameter\";\r\nexport const DEFAULT_OPERATION = \"DefaultOperation\";\r\nexport const DEFAULT_MUTILLINGUAL_PROPERTY = \"DefaultMultillingualProperty\";\r\n\r\n\r\n/** DefaultStructure */\r\nexport const DEFAULT_ENTITY_OBJECT = \"DefaultEntityObject\";\r\nexport const DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDataTransferObject\";\r\nexport const DEFAULT_VALUE_OBJECT = \"DefaultValueObject\";\r\n\r\n/** DefaultConstraint */\r\nexport const DEFAULT_CONSTRAINT = \"DefaultConstraint\"\r\n","import { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { Operation } from '../../../define/operation/operation';\r\nimport { OperationConvertor } from '../../../convertor/operation/operation-convertor';\r\n\r\nexport class DefaultOperationSerializer implements IOperationSerializer {\r\n    serialize(op: Operation, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new OperationConvertor();\r\n        baseConvertor.convertToObject(result, op, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Operation {\r\n        let result = new Operation();\r\n        let baseConvertor = new OperationConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IOperationSerializerFactory } from '../../extension/factory/i-operation-serializer-factory';\r\nimport { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { DEFAULT_OPERATION } from '../default-constant';\r\nimport { DefaultOperationSerializer } from '../serializer/default-operation-serializer';\r\n\r\nexport class DefaultOperationSerializerFactory implements IOperationSerializerFactory {\r\n    private serializerDict: { [key: string]: IOperationSerializer } = {};\r\n\r\n    get(kind: string): IOperationSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_OPERATION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultOperationSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { IParameterSerializer } from '../../extension/serializer/i-parameter-serializer';\r\nimport { Parameter } from '../../../define/parameter/parameter';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ParameterConvertor } from '../../../convertor/parameter/parameter-convertor';\r\n\r\nexport class DefaultParameterSerializer implements IParameterSerializer{\r\n    serialize(param: Parameter, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new ParameterConvertor();\r\n        baseConvertor.convertToObject(result,param,ctxt);\r\n        return result;\r\n    }    \r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Parameter {\r\n        let result=new Parameter();\r\n        let baseConvertor=new ParameterConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n}","import { IParameterSerializerFactory } from '../../extension/factory/i-parameter-serializer-factory';\r\nimport { IParameterSerializer } from '../../extension/serializer/i-parameter-serializer';\r\nimport { DEFAULT_PARAMETER } from '../default-constant';\r\nimport { DefaultParameterSerializer } from '../serializer/default-parameter-serializer';\r\n\r\nexport class DefaultParameterSerializerFactory implements IParameterSerializerFactory{\r\n    private serializerDict: { [key: string]: IParameterSerializer } = {};\r\n\r\n    get(kind: string): IParameterSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_PARAMETER:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultParameterSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { IPropertySerializer } from '../../extension/serializer/i-property-serializer';\r\nimport { Property } from '../../../define/property/property';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PropertyConvertor } from '../../../convertor/property/property-convertor';\r\n\r\nexport class DefaultProeprtySerializer implements IPropertySerializer {\r\n    serialize(prop: Property, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new PropertyConvertor();\r\n        baseConvertor.convertToObject(result, prop, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Property {\r\n        let result = new Property();\r\n        let baseConvertor = new PropertyConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IPropertySerializerFactory } from '../../extension/factory/i-property-serializer-factory';\r\nimport { IPropertySerializer } from '../../extension/serializer/i-property-serializer';\r\nimport { DEFAULT_PROPERTY } from '../default-constant';\r\nimport { DefaultProeprtySerializer } from '../serializer/default-property-serializer';\r\n\r\nexport class DefaultPropertySerializerFactory implements IPropertySerializerFactory {\r\n    private serializerDict: { [key: string]: IPropertySerializer } = {};\r\n\r\n    get(kind: string): IPropertySerializer {\r\n        switch (kind) {\r\n            case DEFAULT_PROPERTY:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultProeprtySerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { EntityObjectConvertor } from '../../../convertor/structure/entity-object-convertor';\r\nimport { EntityObject } from '../../../define/structure/entity-object';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultEntityObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new Object();\r\n        //ä½¿ç¨åºæ¬çåºååå¨\r\n        let baseConvertor = new EntityObjectConvertor();\r\n        let entity = structure as EntityObject;\r\n        baseConvertor.convertToObject(result, entity, ctxt);\r\n        //Cando:å¢å èªå·±å¯¹Objectçæ©å±\r\n        return result;\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new EntityObject();\r\n        let baseConvertor = new EntityObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ValueObjectConvertor } from '../../../convertor/structure/value-object-convertor';\r\nimport { ValueObject } from '../../../define/structure/value-object';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultValueObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ValueObjectConvertor();\r\n        let valueObject = structure as ValueObject;\r\n        baseConvertor.convertToObject(result, valueObject, ctxt);\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new ValueObject();\r\n        let baseConvertor = new ValueObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { DataTransferObject } from '../../../define/structure/data-transfer-object';\r\nimport { DataTransferObjectConvertor } from '../../../convertor/structure/data-transfer-object-convertor';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultDataTransferObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new DataTransferObject();\r\n        let baseConvertor = new DataTransferObjectConvertor();\r\n        let dto = structure as DataTransferObject;\r\n        baseConvertor.convertToObject(result, dto, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new DataTransferObject();\r\n        let baseConvertor = new DataTransferObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializerFactory } from '../../extension/factory/i-common-structure-serializer-factory';\r\nimport { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { DEFAULT_ENTITY_OBJECT, DEFAULT_VALUE_OBJECT, DEFAULT_DATA_TRANSFER_OBJECT } from '../default-constant';\r\nimport { DefaultEntityObjectSerializer } from '../serializer/default-entity-object-serializer';\r\nimport { DefaultValueObjectSerializer } from '../serializer/default-value-object-serializer';\r\nimport { DefaultDataTransferObjectSerializer } from '../serializer/default-data-transfer-object-serializer';\r\n\r\nexport class DefaultStructureSerializerFactory implements ICommonStructureSerializerFactory {\r\n    private serializerDict: { [key: string]: ICommonStructureSerializer } = {};\r\n\r\n    get(kind: string): ICommonStructureSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_ENTITY_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEntityObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DEFAULT_VALUE_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultValueObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DEFAULT_DATA_TRANSFER_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultDataTransferObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n}","import { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { IConstraintSerializer } from '../../extension/serializer/i-constraint-serializer';\r\nimport { IConstraint } from '../../../define/constraint/i-constraint';\r\nimport { ConstraintConvertor } from '../../../convertor/constraint/constraint-convertor';\r\n\r\nexport class DefaultConstraintSerializer implements IConstraintSerializer{\r\n    serialize(constraint: IConstraint, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ConstraintConvertor();\r\n        baseConvertor.convertToObject(result, constraint, ctxt);\r\n        return result;\r\n    }   \r\n    \r\n     deserialize(obj: Object, ctxt: ISerializeContext): IConstraint {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { IConstraintSerializerFactory } from '../../extension/factory/i-constraint-serializer-factory';\r\nimport { IConstraint } from '../../../define/constraint/i-constraint';\r\nimport { IConstraintSerializer } from '../../extension/serializer/i-constraint-serializer';\r\nimport { DEFAULT_CONSTRAINT } from '../default-constant';\r\nimport { DefaultConstraintSerializer } from '../serializer/default-constraint-serializer';\r\n\r\nexport class DefaultConstraintSerializerFactory implements IConstraintSerializerFactory {\r\n\r\n    private serializerDict: { [key: string]: IConstraintSerializer } = {};\r\n\r\n    get(kind: string): IConstraintSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_CONSTRAINT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultConstraintSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n    \r\n}","import { ISerializeContext } from '../extension/i-serialize-context';\r\nimport { IDataTypeSerializerFactory } from '../extension/factory/i-data-type-serializer-factory';\r\nimport { IParameterSerializerFactory } from '../extension/factory/i-parameter-serializer-factory';\r\nimport { IPropertySerializerFactory } from '../extension/factory/i-property-serializer-factory';\r\nimport { ICommonStructureSerializerFactory } from '../extension/factory/i-common-structure-serializer-factory';\r\nimport { IOperationSerializerFactory } from '../extension/factory/i-operation-serializer-factory';\r\nimport { DefaultDataTypeSerializerFactory } from './factory/default-data-type-serializer-factory';\r\nimport { DefaultOperationSerializerFactory } from './factory/default-operation-serializer-factory';\r\nimport { DefaultParameterSerializerFactory } from './factory/default-parameter-serializer-factory';\r\nimport { DefaultPropertySerializerFactory } from './factory/default-property-serializer-factory';\r\nimport { DefaultStructureSerializerFactory } from './factory/default-structure-serializer-factory';\r\nimport { ICommonStructureSerializeContext } from '../extension/i-common-structure-serialize-context';\r\nimport { IConstraintSerializerFactory } from '../extension/factory/i-constraint-serializer-factory';\r\nimport { DefaultConstraintSerializerFactory } from './factory/default-constraint-serializer-factory';\r\n\r\nexport class DefaultSerializeContext implements ICommonStructureSerializeContext {\r\n    private dataTypeFactory: IDataTypeSerializerFactory;\r\n    private operationFactory: IOperationSerializerFactory;\r\n    private parameterFactory: IParameterSerializerFactory;\r\n    private propertyFactory: IPropertySerializerFactory;\r\n    private structureFactory: ICommonStructureSerializerFactory;\r\n    private constraintFactory: IConstraintSerializerFactory;\r\n\r\n    getDataTypeSerializerFactory(): IDataTypeSerializerFactory {\r\n        if (!this.dataTypeFactory) {\r\n            this.dataTypeFactory = new DefaultDataTypeSerializerFactory();\r\n        }\r\n        return this.dataTypeFactory;\r\n    }\r\n\r\n    getOperationSerializerFactory(): IOperationSerializerFactory {\r\n        if (!this.operationFactory) {\r\n            this.operationFactory = new DefaultOperationSerializerFactory();\r\n        }\r\n        return this.operationFactory;\r\n    }\r\n\r\n    getParameterSerializerFactory(): IParameterSerializerFactory {\r\n        if (!this.parameterFactory) {\r\n            this.parameterFactory = new DefaultParameterSerializerFactory();\r\n        }\r\n        return this.parameterFactory;\r\n    }\r\n\r\n    getPropertySerializerFactory(): IPropertySerializerFactory {\r\n        if (!this.propertyFactory) {\r\n            this.propertyFactory = new DefaultPropertySerializerFactory();\r\n        }\r\n        return this.propertyFactory;\r\n    }\r\n\r\n    getStructureSerializerFactory(): ICommonStructureSerializerFactory {\r\n        if (!this.structureFactory) {\r\n            this.structureFactory = new DefaultStructureSerializerFactory();\r\n        }\r\n        return this.structureFactory;\r\n    }\r\n\r\n    getConstraintSerializerFactory(): IConstraintSerializerFactory {\r\n        if (!this.constraintFactory) {\r\n            this.constraintFactory = new DefaultConstraintSerializerFactory();\r\n        }\r\n        return this.constraintFactory;\r\n    }\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';\r\n\r\n\r\n@Injectable()\r\nexport class CommonStructureDTService {\r\n\r\n    private commom_structure_url = '/api/dev/main/v1.0/common-structure';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * Nçè·åCommonStructure\r\n     * @param type åæ°æ®ç±»å\r\n     * @param id åæ°æ®Id\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    get(id: string, headers: HttpHeaders): Observable<EntityObject> {\r\n        let idParam = encodeURIComponent(id);\r\n        let url =  this.commom_structure_url + '?id=' + id ;\r\n        return this.http.get<EntityObject>(url, { headers: headers }).pipe(map(\r\n            obj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = obj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            return serializer.deserialize(obj, serializeCtxt) as EntityObject;\r\n        },\r\n        error=>{\r\n            alert(\"è·åéç¨æ°æ®ç»æå¤±è´¥ï¼\");\r\n            return null;\r\n        })\r\n        );\r\n    };\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';\r\n\r\n\r\n@Injectable()\r\nexport class CommonStructureRTService {\r\n\r\n    private commom_structure_url = '/api/runtime/sys/v1.0/common-structure';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * è·åCommonStructure\r\n     * @param type åæ°æ®ç±»å\r\n     * @param id åæ°æ®Id\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    get(id: string, headers: HttpHeaders): Observable<EntityObject> {\r\n        let idParam = encodeURIComponent(id);\r\n        let url =  this.commom_structure_url + '?id=' + id ;\r\n        return this.http.get<EntityObject>(url, { headers: headers }).pipe(map(\r\n            obj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = obj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            return serializer.deserialize(obj, serializeCtxt) as EntityObject;\r\n        },\r\n        error=>{\r\n            alert(\"è·åéç¨æ°æ®ç»æå¤±è´¥ï¼\");\r\n            return null;\r\n        })\r\n        );\r\n    };\r\n\r\n    \r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonStructureDTService } from './service/design-time/common-structure-dt-service';\r\nimport { CommonStructureRTService } from './service/run-time/common-structure-rt-service';\r\n// import { CodeRuleSelectModule } from './test/code-rule-select.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    // CodeRuleSelectModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers:[CommonStructureDTService,CommonStructureRTService],\r\n  exports:[]\r\n})\r\nexport class CommonStructureModule { }\r\n"],"names":["tslib_1.__extends","http","map","Injectable","HttpClient","NgModule","CommonModule","HttpClientModule"],"mappings":"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"}
