(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/common/http'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ecp-caf/common-structure', ['exports', '@angular/common', '@angular/core', '@angular/common/http', 'rxjs/operators'], factory) :
    (factory((global['ecp-caf'] = global['ecp-caf'] || {}, global['ecp-caf']['common-structure'] = {}),global.ng.common,global.ng.core,global.ng.common.http,global.rxjs.operators));
}(this, (function (exports,common,core,http,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonStructure = /** @class */ (function () {
        function CommonStructure() {
        }
        return CommonStructure;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Aggregate = /** @class */ (function (_super) {
        __extends(Aggregate, _super);
        function Aggregate() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Aggregate;
    }(CommonStructure));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonStructureConst = /** @class */ (function () {
        function CommonStructureConst() {
        }
        CommonStructureConst.DEFAULT_ENTITY_OBJECT = "DefaultEntityObject";
        CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT = "DefaultDataTransferObject";
        CommonStructureConst.DEFAULT_VALUE_OBJECT = "DefaultValueObject";
        return CommonStructureConst;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityObject = /** @class */ (function (_super) {
        __extends(EntityObject, _super);
        function EntityObject() {
            var _this = _super.call(this) || this;
            _this.kind = CommonStructureConst.DEFAULT_ENTITY_OBJECT;
            return _this;
        }
        return EntityObject;
    }(Aggregate));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTransferObject = /** @class */ (function (_super) {
        __extends(DataTransferObject, _super);
        function DataTransferObject() {
            var _this = _super.call(this) || this;
            _this.kind = CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT;
            return _this;
        }
        return DataTransferObject;
    }(Aggregate));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValueObject = /** @class */ (function (_super) {
        __extends(ValueObject, _super);
        function ValueObject() {
            var _this = _super.call(this) || this;
            _this.kind = CommonStructureConst.DEFAULT_VALUE_OBJECT;
            return _this;
        }
        return ValueObject;
    }(CommonStructure));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityRelation = /** @class */ (function () {
        function EntityRelation() {
        }
        return EntityRelation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ElementConstant = /** @class */ (function () {
        function ElementConstant() {
        }
        ElementConstant.DEFAULT_MULTILLINGUAL_PROPERTY = "DefaultMultillingualProperty";
        ElementConstant.DEFAULT_OPERATION = "DefaultOperation";
        ElementConstant.DEFAULT_PARAMETER = "DefaultParameter";
        ElementConstant.DEFAULT_PROPERTY = "DefaultProperty";
        return ElementConstant;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Extension = /** @class */ (function () {
        function Extension() {
        }
        /**
         * @return {?}
         */
        Extension.prototype.getKeys = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var result = new Array();
                for (var key in this.extension) {
                    result.push(key);
                }
                return result;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Extension.prototype.getValue = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.extension[key];
            };
        return Extension;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Operation = /** @class */ (function (_super) {
        __extends(Operation, _super);
        function Operation() {
            var _this = _super.call(this) || this;
            _this.kind = ElementConstant.DEFAULT_OPERATION;
            return _this;
        }
        return Operation;
    }(Extension));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Parameter = /** @class */ (function (_super) {
        __extends(Parameter, _super);
        function Parameter() {
            var _this = _super.call(this) || this;
            _this.kind = ElementConstant.DEFAULT_PARAMETER;
            return _this;
        }
        return Parameter;
    }(Extension));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Property = /** @class */ (function (_super) {
        __extends(Property, _super);
        function Property() {
            var _this = _super.call(this) || this;
            _this.kind = ElementConstant.DEFAULT_PROPERTY;
            return _this;
        }
        return Property;
    }(Extension));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ DataType = /** @class */ (function (_super) {
        __extends(DataType, _super);
        function DataType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        DataType.prototype.getKind = /**
         * @return {?}
         */
            function () {
                return this.kind;
            };
        return DataType;
    }(Extension));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTypeConst = /** @class */ (function () {
        function DataTypeConst() {
        }
        DataTypeConst.DEFAULT_PRIMITIVE = "DefaultPrimitiveType";
        DataTypeConst.DEFAULT_COLLECTION = "DefaultCollectionType";
        DataTypeConst.DEFAULT_MAP = "DefaultMapType";
        DataTypeConst.DEFAULT_OBJECT = "Object";
        DataTypeConst.DEFAULT_STRUCTURED = "DefaultStructuredType";
        DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT = "DefaultDtoType";
        DataTypeConst.DEFAULT_ENTITY = "DefaultEntityType";
        DataTypeConst.DEFAULT_VALUE_OBJECT = "DefaultValueObjectType";
        DataTypeConst.DEFAULT_ENUMERATION = "DefaultEnumType";
        DataTypeConst.STRUCTURED_REF = "RefStructuredType";
        return DataTypeConst;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 集合类型
     */
    var /**
     * 集合类型
     */ CollectionType = /** @class */ (function (_super) {
        __extends(CollectionType, _super);
        function CollectionType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_COLLECTION;
            return _this;
        }
        return CollectionType;
    }(DataType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Map类型
     */
    var /**
     * Map类型
     */ MapType = /** @class */ (function (_super) {
        __extends(MapType, _super);
        function MapType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_MAP;
            return _this;
        }
        return MapType;
    }(DataType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 原生类型
     */
    var /**
     * 原生类型
     */ PrimitiveType = /** @class */ (function (_super) {
        __extends(PrimitiveType, _super);
        function PrimitiveType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_PRIMITIVE;
            return _this;
        }
        return PrimitiveType;
    }(DataType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 结构体类型
     */
    var /**
     * 结构体类型
     */ StructuredType = /** @class */ (function (_super) {
        __extends(StructuredType, _super);
        function StructuredType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StructuredType;
    }(DataType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityType = /** @class */ (function (_super) {
        __extends(EntityType, _super);
        function EntityType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_ENTITY;
            return _this;
        }
        return EntityType;
    }(StructuredType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTransferObjectType = /** @class */ (function (_super) {
        __extends(DataTransferObjectType, _super);
        function DataTransferObjectType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT;
            return _this;
        }
        return DataTransferObjectType;
    }(StructuredType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValueObjectType = /** @class */ (function (_super) {
        __extends(ValueObjectType, _super);
        function ValueObjectType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_VALUE_OBJECT;
            return _this;
        }
        return ValueObjectType;
    }(StructuredType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumerationType = /** @class */ (function (_super) {
        __extends(EnumerationType, _super);
        function EnumerationType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_ENUMERATION;
            return _this;
        }
        return EnumerationType;
    }(StructuredType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumerationItem = /** @class */ (function () {
        function EnumerationItem() {
        }
        return EnumerationItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ObjectType = /** @class */ (function (_super) {
        __extends(ObjectType, _super);
        function ObjectType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.DEFAULT_OBJECT;
            return _this;
        }
        /**
         * @return {?}
         */
        ObjectType.prototype.getKind = /**
         * @return {?}
         */
            function () {
                return this.kind;
            };
        return ObjectType;
    }(DataType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConstraintConst = /** @class */ (function () {
        function ConstraintConst() {
        }
        ConstraintConst.STRING = "StringConstraint";
        ConstraintConst.DECIMAL = "DecimalConstraint";
        return ConstraintConst;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DecimalConstraint = /** @class */ (function () {
        function DecimalConstraint() {
        }
        /**
         * @return {?}
         */
        DecimalConstraint.prototype.getKind = /**
         * @return {?}
         */
            function () {
                return ConstraintConst.DECIMAL;
            };
        return DecimalConstraint;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StringConstraint = /** @class */ (function () {
        function StringConstraint() {
        }
        /**
         * @return {?}
         */
        StringConstraint.prototype.getKind = /**
         * @return {?}
         */
            function () {
                return ConstraintConst.STRING;
            };
        return StringConstraint;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var PrimitiveTypeKind = {
        // String = 0,
        // Bool = 1,
        // Int16 = 2,
        // Int32 = 3,
        // Int64 = 4,
        // Float = 5,
        // Double = 6,
        // Decimal = 7,
        // DateTime = 8,
        // TimeStamp = 9,
        // Byte=10 ,
        String: 0,
        Bool: 1,
        Int16: 2,
        Int32: 3,
        Int64: 4,
        Float: 5,
        Double: 6,
        Decimal: 7,
        DateTime: 8,
        TimeStamp: 9,
        Byte: 10,
    };
    PrimitiveTypeKind[PrimitiveTypeKind.String] = 'String';
    PrimitiveTypeKind[PrimitiveTypeKind.Bool] = 'Bool';
    PrimitiveTypeKind[PrimitiveTypeKind.Int16] = 'Int16';
    PrimitiveTypeKind[PrimitiveTypeKind.Int32] = 'Int32';
    PrimitiveTypeKind[PrimitiveTypeKind.Int64] = 'Int64';
    PrimitiveTypeKind[PrimitiveTypeKind.Float] = 'Float';
    PrimitiveTypeKind[PrimitiveTypeKind.Double] = 'Double';
    PrimitiveTypeKind[PrimitiveTypeKind.Decimal] = 'Decimal';
    PrimitiveTypeKind[PrimitiveTypeKind.DateTime] = 'DateTime';
    PrimitiveTypeKind[PrimitiveTypeKind.TimeStamp] = 'TimeStamp';
    PrimitiveTypeKind[PrimitiveTypeKind.Byte] = 'Byte';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Map类型
     */
    var /**
     * Map类型
     */ StructuredReferType = /** @class */ (function (_super) {
        __extends(StructuredReferType, _super);
        function StructuredReferType() {
            var _this = _super.call(this) || this;
            _this.kind = DataTypeConst.STRUCTURED_REF;
            return _this;
        }
        return StructuredReferType;
    }(DataType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTypeConvertUtil = /** @class */ (function () {
        function DataTypeConvertUtil() {
        }
        /**
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        DataTypeConvertUtil.convertToObject = /**
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (datatype, ctxt) {
                /** @type {?} */
                var result = new Object();
                if (datatype instanceof StructuredType) {
                    result['kind'] = "RefStructuredType";
                    result["isRefer"] = true;
                    result["refId"] = datatype.id;
                }
                else {
                    /** @type {?} */
                    var kind = datatype.getKind();
                    result["kind"] = kind;
                    /** @type {?} */
                    var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                    result = serializer.serialize(datatype, ctxt);
                }
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DataTypeConvertUtil.initFromObject = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result;
                if (obj['isRefer'] != null) {
                    result = new StructuredReferType();
                    (( /** @type {?} */(result))).refId = obj['refId'];
                }
                else {
                    /** @type {?} */
                    var kind = obj["kind"];
                    /** @type {?} */
                    var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                    result = serializer.deserialize(obj, ctxt);
                }
                return result;
                // switch (obj["kind"]) {
                //     case DataTypeConst.DEFAULT_PRIMITIVE:
                //         let primitiveKindConvertor = new PrimitiveTypeConvertor();
                //         return primitiveKindConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_COLLECTION:
                //         let collectionConvertor = new CollectionTypeConvertor();
                //         return collectionConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_MAP:
                //         let mapConvertor = new MapTypeConvertor();
                //         return mapConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_STRUCTURED:
                //         let structureConvertor = new StructuredTypeConvertor();
                //         return structureConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_ENTITY:
                //         let entityConvertor = new StructuredTypeConvertor();
                //         return entityConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_VALUE_OBJECT:
                //         let voConvertor = new StructuredTypeConvertor();
                //         return voConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
                //         let dtoConvertor = new StructuredTypeConvertor();
                //         return dtoConvertor.initFromObject(obj);
                //     case DataTypeConst.DEFAULT_ENUMERATION:
                //         let enumerationConvertor = new StructuredTypeConvertor();
                //         return enumerationConvertor.initFromObject(obj);
                //     case DataTypeConst.STRUCTURED_REF:
                //         let structureRefConvertor = new StructuredTypeReferConvertor();
                //         return structureRefConvertor.initFromObject(obj);
                //     default:
                //         throw new Error(`数据类型不支持的${obj["kind"]}类型！`);
                // }
            };
        return DataTypeConvertUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtensionConvertor = /** @class */ (function () {
        function ExtensionConvertor() {
        }
        /**
         * @param {?} extensionObj
         * @param {?} jObj
         * @return {?}
         */
        ExtensionConvertor.prototype.addToJObj = /**
         * @param {?} extensionObj
         * @param {?} jObj
         * @return {?}
         */
            function (extensionObj, jObj) {
                jObj['extension'] = extensionObj.extension;
            };
        /**
         * @param {?} extensionObj
         * @param {?} jObj
         * @return {?}
         */
        ExtensionConvertor.prototype.addToObj = /**
         * @param {?} extensionObj
         * @param {?} jObj
         * @return {?}
         */
            function (extensionObj, jObj) {
                if (jObj['extension']) {
                    extensionObj.extension = jObj['extension'];
                }
            };
        return ExtensionConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CollectionTypeConvertor = /** @class */ (function () {
        function CollectionTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        CollectionTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                if (!datatype) {
                    return;
                }
                /** @type {?} */
                var collectiontype = ( /** @type {?} */(datatype));
                obj['kind'] = collectiontype.kind;
                obj['elementType'] = null;
                if (collectiontype.elementType) {
                    /** @type {?} */
                    var kind = collectiontype.elementType.getKind();
                    if (!kind) {
                        throw new Error('集合类型序列化时TypeKind为空！');
                    }
                    obj['elementType'] = DataTypeConvertUtil.convertToObject(collectiontype.elementType, ctxt);
                }
                if (collectiontype.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(collectiontype, obj);
                }
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        CollectionTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var collectionType = ( /** @type {?} */(dataType));
                if (!obj) {
                    return;
                }
                collectionType.kind = obj['kind'];
                if (obj['elementType']) {
                    /** @type {?} */
                    var kind = obj['elementType']['kind'];
                    if (!kind) {
                        throw new Error('解析CollectionType时数据类型的TypeKind为空！');
                    }
                    collectionType.elementType = DataTypeConvertUtil.initFromObject(obj['elementType'], ctxt);
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(collectionType, obj);
                }
            };
        return CollectionTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MapTypeConvertor = /** @class */ (function () {
        function MapTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        MapTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                if (!datatype) {
                    return;
                }
                /** @type {?} */
                var maptype = ( /** @type {?} */(datatype));
                obj['kind'] = maptype.kind;
                obj['keyType'] = null;
                if (maptype.keyType) {
                    /** @type {?} */
                    var kind = maptype.keyType.getKind();
                    if (!kind) {
                        throw new Error('Map类型序列化时KeyType的TypeKind为空！');
                    }
                    obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);
                }
                obj['valueType'] = null;
                if (maptype.valueType) {
                    /** @type {?} */
                    var kind = maptype.valueType.getKind();
                    if (!kind) {
                        throw new Error('Map类型序列化时ValueType的TypeKind为空！');
                    }
                    obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);
                }
                if (maptype.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(maptype, obj);
                }
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        MapTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var maptype = ( /** @type {?} */(dataType));
                if (!obj) {
                    return;
                }
                maptype.kind = obj['kind'];
                if (obj['keyType']) {
                    /** @type {?} */
                    var kind = obj['keyType']['kind'];
                    if (!kind) {
                        throw new Error('解析MapType的KeyType属性时数据类型的TypeKind为空！');
                    }
                    maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);
                }
                if (obj['valueType']) {
                    /** @type {?} */
                    var kind = obj['valueType']['kind'];
                    if (!kind) {
                        throw new Error('解析MapType的ValueType属性时数据类型的TypeKind为空！');
                    }
                    maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(maptype, obj);
                }
            };
        return MapTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PrimitiveTypeConvertor = /** @class */ (function () {
        function PrimitiveTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        PrimitiveTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                if (!datatype) {
                    return;
                }
                /** @type {?} */
                var primitivetype = ( /** @type {?} */(datatype));
                obj['kind'] = primitivetype.kind;
                //这是number
                /** @type {?} */
                var primitiveTypeKindNum = primitivetype.primitiveTypeKind;
                obj['primitiveTypeKind'] = primitiveTypeKindNum;
                if (primitivetype.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(primitivetype, obj);
                }
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        PrimitiveTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var primitivetype = ( /** @type {?} */(dataType));
                if (!obj) {
                    return;
                }
                primitivetype.kind = obj['kind'];
                primitivetype.primitiveTypeKind = ( /** @type {?} */(obj['primitiveTypeKind']));
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(primitivetype, obj);
                }
            };
        return PrimitiveTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ObjectTypeConvertor = /** @class */ (function () {
        function ObjectTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        ObjectTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                if (!datatype) {
                    return;
                }
                /** @type {?} */
                var objectType = ( /** @type {?} */(datatype));
                obj['kind'] = objectType.kind;
                if (objectType.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(objectType, obj);
                }
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        ObjectTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var objectType = ( /** @type {?} */(dataType));
                if (!obj) {
                    return;
                }
                objectType.kind = obj['kind'];
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(objectType, obj);
                }
            };
        return ObjectTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PropertyConvertor = /** @class */ (function () {
        function PropertyConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} property
         * @param {?} ctxt
         * @return {?}
         */
        PropertyConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} property
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, property, ctxt) {
                if (!property) {
                    return;
                }
                obj['kind'] = property.kind;
                obj['id'] = property.id;
                obj['code'] = property.code;
                obj['name'] = property.name;
                obj['description'] = property.description;
                obj['defaultValue'] = property.defaultValue;
                obj['required'] = ( /** @type {?} */(property.required));
                if (property.propertyType) {
                    /** @type {?} */
                    var kind = property.propertyType.getKind();
                    if (!kind) {
                        throw new Error('属性序列化时属性类型获取TypeKind为空格！');
                    }
                    obj['propertyType'] = DataTypeConvertUtil.convertToObject(property.propertyType, ctxt);
                }
                obj['constraint'] = null;
                if (property.constraint) {
                    /** @type {?} */
                    var kind = property.constraint.getKind();
                    if (!kind) {
                        throw new Error('属性序列化时属性约束获取ConstraintKind为空格！');
                    }
                    obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(property.constraint, ctxt);
                }
                if (property.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(property, obj);
                }
            };
        /**
         * @param {?} property
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        PropertyConvertor.prototype.initFromObject = /**
         * @param {?} property
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (property, obj, ctxt) {
                if (!obj) {
                    return;
                }
                property.kind = obj['kind'];
                property.id = obj['id'];
                property.code = obj['code'];
                property.name = obj['name'];
                property.defaultValue = obj['defaultValue'];
                property.required = ( /** @type {?} */(obj['required']));
                property.description = obj['description'];
                if (obj['propertyType']) {
                    /** @type {?} */
                    var kind = obj['propertyType']['kind'];
                    if (!kind) {
                        throw new Error('解析属性时数据类型的TypeKind为空！');
                    }
                    property.propertyType = DataTypeConvertUtil.initFromObject(obj['propertyType'], ctxt);
                }
                if (obj['constraint']) {
                    /** @type {?} */
                    var kind = obj['constraint']['kind'];
                    if (!kind) {
                        throw new Error('解析属性时约束类型的ConstraintKind为空！');
                    }
                    property.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(property, obj);
                }
            };
        return PropertyConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StructuredTypeConvertor = /** @class */ (function () {
        function StructuredTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        StructuredTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                /** @type {?} */
                var structure = ( /** @type {?} */(datatype));
                if (!structure) {
                    return;
                }
                obj['kind'] = structure.kind;
                obj['id'] = structure.id;
                obj['code'] = structure.code;
                obj['name'] = structure.name;
                obj['description'] = structure.description;
                obj['properties'] = new Array();
                if (structure.properties) {
                    /** @type {?} */
                    var propertyConvertor = new PropertyConvertor();
                    structure.properties.forEach(( /**
                     * @param {?} property
                     * @return {?}
                     */function (property) {
                        /** @type {?} */
                        var kind = property.kind;
                        /** @type {?} */
                        var serializer = ctxt.getPropertySerializerFactory().get(kind);
                        /** @type {?} */
                        var propertyObj = serializer.serialize(property, ctxt);
                        obj['properties'].push(propertyObj);
                    }));
                }
                if (structure.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(structure, obj);
                }
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        StructuredTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var structure = ( /** @type {?} */(dataType));
                if (!obj) {
                    return;
                }
                structure.kind = obj['kind'];
                structure.id = obj['id'];
                structure.name = obj['name'];
                structure.code = obj['code'];
                structure.description = obj['description'];
                if (obj['properties']) {
                    structure.properties = new Array();
                    /** @type {?} */
                    var propertyConvertor = new PropertyConvertor();
                    obj['properties'].forEach(( /**
                     * @param {?} propertyObj
                     * @return {?}
                     */function (propertyObj) {
                        /** @type {?} */
                        var propKind = propertyObj["kind"];
                        /** @type {?} */
                        var serializer = ctxt.getPropertySerializerFactory().get(propKind);
                        /** @type {?} */
                        var property = serializer.deserialize(propertyObj, ctxt);
                        structure.properties.push(property);
                    }));
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(structure, obj);
                }
            };
        return StructuredTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTransferObjectTypeConvertor = /** @class */ (function () {
        function DataTransferObjectTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        DataTransferObjectTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.convertToObject(obj, datatype, ctxt);
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DataTransferObjectTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.initFromObject(dataType, obj, ctxt);
            };
        return DataTransferObjectTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityTypeConvertor = /** @class */ (function () {
        function EntityTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        EntityTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                /** @type {?} */
                var result = structuredConvertor.convertToObject(obj, datatype, ctxt);
                result['primaryKeys'] = new Array();
                /** @type {?} */
                var entityType = ( /** @type {?} */(datatype));
                if (entityType.primaryKeys) {
                    entityType.primaryKeys.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        result['primaryKeys'].push(element);
                    }));
                }
                if (entityType.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(entityType, obj);
                }
                return result;
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        EntityTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var entityType = ( /** @type {?} */(dataType));
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.initFromObject(dataType, obj, ctxt);
                if (obj['primaryKey']) {
                    entityType.primaryKeys = new Array();
                    obj['primaryKey'].forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        entityType.primaryKeys.push(element);
                    }));
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(entityType, obj);
                }
            };
        return EntityTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValueObjectTypeConvertor = /** @class */ (function () {
        function ValueObjectTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        ValueObjectTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.convertToObject(obj, datatype, ctxt);
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        ValueObjectTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.initFromObject(dataType, obj, ctxt);
            };
        return ValueObjectTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumerationItemConvertor = /** @class */ (function () {
        function EnumerationItemConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} item
         * @return {?}
         */
        EnumerationItemConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} item
         * @return {?}
         */
            function (obj, item) {
                obj['code'] = item.code;
                obj['value'] = item.value;
                obj['description'] = item.description;
            };
        /**
         * @param {?} item
         * @param {?} obj
         * @return {?}
         */
        EnumerationItemConvertor.prototype.initFromObject = /**
         * @param {?} item
         * @param {?} obj
         * @return {?}
         */
            function (item, obj) {
                /** @type {?} */
                var enumItem = ( /** @type {?} */(item));
                if (!obj) {
                    return;
                }
                enumItem.code = obj['code'];
                enumItem.value = obj['value'];
                enumItem.description = obj['description'];
            };
        return EnumerationItemConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumerationTypeConvertor = /** @class */ (function () {
        function EnumerationTypeConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
        EnumerationTypeConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} datatype
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, datatype, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.convertToObject(obj, datatype, ctxt);
                /** @type {?} */
                var enumerationType = ( /** @type {?} */(datatype));
                //enum items
                obj['enumerationItems'] = new Array();
                if (enumerationType.enumerationItems) {
                    /** @type {?} */
                    var convertor_1 = new EnumerationItemConvertor();
                    enumerationType.enumerationItems.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        /** @type {?} */
                        var itemObj = new Object();
                        convertor_1.convertToObject(itemObj, item);
                        obj['enumerationItems'].push(itemObj);
                    }));
                }
                if (enumerationType.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(enumerationType, obj);
                }
            };
        /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        EnumerationTypeConvertor.prototype.initFromObject = /**
         * @param {?} dataType
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dataType, obj, ctxt) {
                /** @type {?} */
                var structuredConvertor = new StructuredTypeConvertor();
                structuredConvertor.initFromObject(dataType, obj, ctxt);
                //enum items
                /** @type {?} */
                var enumerationType = ( /** @type {?} */(dataType));
                if (obj['enumerationItems']) {
                    enumerationType.enumerationItems = new Array();
                    /** @type {?} */
                    var convertor_2 = new EnumerationItemConvertor();
                    obj['enumerationItems'].forEach(( /**
                     * @param {?} itemObj
                     * @return {?}
                     */function (itemObj) {
                        /** @type {?} */
                        var item = new EnumerationItem();
                        convertor_2.initFromObject(item, itemObj);
                        enumerationType.enumerationItems.push(item);
                    }));
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(enumerationType, obj);
                }
            };
        return EnumerationTypeConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ParameterConvertor = /** @class */ (function () {
        function ParameterConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} parameter
         * @param {?} ctxt
         * @return {?}
         */
        ParameterConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} parameter
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, parameter, ctxt) {
                if (!parameter) {
                    return;
                }
                obj['kind'] = parameter.kind;
                obj['code'] = parameter.code;
                obj['name'] = parameter.name;
                obj['description'] = parameter.description;
                obj['required'] = parameter.required;
                obj['defaultValue'] = parameter.defaultValue;
                obj['parameterType'] = null;
                if (parameter.parameterType) {
                    /** @type {?} */
                    var kind = parameter.parameterType.getKind();
                    if (!kind) {
                        throw new Error('参数序列化时数据类型的TypeKind为空！');
                    }
                    obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType, ctxt);
                }
                obj['constraint'] = null;
                if (parameter.constraint) {
                    /** @type {?} */
                    var kind = parameter.constraint.getKind();
                    if (!kind) {
                        throw new Error('参数序列化时参数约束的ConstraintKind为空！');
                    }
                    obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint, ctxt);
                }
                if (parameter.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(parameter, obj);
                }
            };
        /**
         * @param {?} parameter
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        ParameterConvertor.prototype.initFromObject = /**
         * @param {?} parameter
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (parameter, obj, ctxt) {
                if (!obj) {
                    return;
                }
                parameter.kind = obj['kind'];
                parameter.code = obj['code'];
                parameter.name = obj['name'];
                parameter.defaultValue = obj['defaultValue'];
                parameter.description = obj['description'];
                parameter.required = ( /** @type {?} */(obj['required']));
                if (obj['parameterType']) {
                    /** @type {?} */
                    var kind = obj['parameterType']['kind'];
                    if (!kind) {
                        throw new Error('解析参数数据类型时TypeKind为空！');
                    }
                    parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);
                }
                if (obj['constraint']) {
                    /** @type {?} */
                    var kind = obj['constraint']['kind'];
                    if (!kind) {
                        throw new Error('解析参数约束类型时ConstraintKind为空！');
                    }
                    parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(parameter, obj);
                }
            };
        return ParameterConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OperationConvertor = /** @class */ (function () {
        function OperationConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} operation
         * @param {?} ctxt
         * @return {?}
         */
        OperationConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} operation
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, operation, ctxt) {
                if (!operation) {
                    return;
                }
                obj['kind'] = operation.kind;
                obj['code'] = operation.code;
                obj['name'] = operation.name;
                obj['uri'] = operation.uri;
                obj['description'] = operation.description;
                obj['returnType'] = null;
                if (operation.returnType) {
                    /** @type {?} */
                    var kind = operation.returnType.getKind();
                    if (!kind) {
                        throw new Error('操作序列化时返回值类型的TypeKind为空!');
                    }
                    obj['returnType'] = DataTypeConvertUtil.convertToObject(operation.returnType, ctxt);
                }
                obj['parameters'] = new Array();
                if (operation.parameters) {
                    /** @type {?} */
                    var parameterConvertor = new ParameterConvertor();
                    operation.parameters.forEach(( /**
                     * @param {?} parameter
                     * @return {?}
                     */function (parameter) {
                        /** @type {?} */
                        var kind = parameter.kind;
                        /** @type {?} */
                        var serializer = ctxt.getParameterSerializerFactory().get(kind);
                        /** @type {?} */
                        var parameterObj = serializer.deserialize(parameter, ctxt);
                        obj["parameters"].push(parameterObj);
                    }));
                }
                if (operation.extension) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToJObj(operation, obj);
                }
            };
        /**
         * @param {?} operation
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        OperationConvertor.prototype.initFromObject = /**
         * @param {?} operation
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (operation, obj, ctxt) {
                if (!obj) {
                    return;
                }
                operation.kind = obj['kind'];
                operation.code = obj['code'];
                operation.name = obj['name'];
                operation.uri = obj['uri'];
                operation.description = obj['description'];
                if (obj['parameters']) {
                    operation.parameters = new Array();
                    /** @type {?} */
                    var parameterConvertor = new ParameterConvertor();
                    obj['parameters'].forEach(( /**
                     * @param {?} parameterObj
                     * @return {?}
                     */function (parameterObj) {
                        /** @type {?} */
                        var kind = parameterObj['kind'];
                        /** @type {?} */
                        var serializer = ctxt.getParameterSerializerFactory().get(kind);
                        /** @type {?} */
                        var parameter = serializer.deserialize(parameterObj, ctxt);
                        operation.parameters.push(parameter);
                    }));
                }
                if (obj['returnType']) {
                    /** @type {?} */
                    var kind = obj['returnType']['kind'];
                    if (!kind) {
                        throw new Error('解析操作的返回值时TypeKind为空！');
                    }
                    operation.returnType = DataTypeConvertUtil.initFromObject(obj['returnType'], ctxt);
                }
                if (obj["extension"]) {
                    /** @type {?} */
                    var extensionConvertor = new ExtensionConvertor();
                    extensionConvertor.addToObj(operation, obj);
                }
            };
        return OperationConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ReferReplaceUtil = /** @class */ (function () {
        function ReferReplaceUtil() {
        }
        /**
         * @param {?} allStructureTypes
         * @param {?} operations
         * @return {?}
         */
        ReferReplaceUtil.replaceOperationRefer = /**
         * @param {?} allStructureTypes
         * @param {?} operations
         * @return {?}
         */
            function (allStructureTypes, operations) {
                var _this = this;
                if (operations != null) {
                    operations.forEach(( /**
                     * @param {?} op
                     * @return {?}
                     */function (op) {
                        /** @type {?} */
                        var retType = op.returnType;
                        if (retType != null && retType instanceof StructuredReferType) {
                            /** @type {?} */
                            var structureTypeId = (( /** @type {?} */(retType))).refId;
                            /** @type {?} */
                            var queryStructureType = _this.getRefStructureType(allStructureTypes, structureTypeId);
                            op.returnType = queryStructureType;
                        }
                        if (op.parameters != null) {
                            op.parameters.forEach(( /**
                             * @param {?} parameter
                             * @return {?}
                             */function (parameter) {
                                /** @type {?} */
                                var parameterType = parameter.parameterType;
                                if (parameterType instanceof StructuredReferType) {
                                    /** @type {?} */
                                    var structureTypeId = (( /** @type {?} */(parameterType))).refId;
                                    /** @type {?} */
                                    var queryStructureType = _this.getRefStructureType(allStructureTypes, structureTypeId);
                                    parameter.parameterType = queryStructureType;
                                }
                            }));
                        }
                    }));
                }
            };
        /**
         * @param {?} structure
         * @return {?}
         */
        ReferReplaceUtil.replacePropertyRefer = /**
         * @param {?} structure
         * @return {?}
         */
            function (structure) {
                var _this = this;
                /** @type {?} */
                var allStructures = this.getAllStructuredTypes(structure);
                if (structure.structuredTypes != null) {
                    structure.structuredTypes.forEach(( /**
                     * @param {?} structureType
                     * @return {?}
                     */function (structureType) {
                        if (structureType.properties != null) {
                            structureType.properties.forEach(( /**
                             * @param {?} prop
                             * @return {?}
                             */function (prop) {
                                if (prop.propertyType instanceof StructuredReferType) {
                                    /** @type {?} */
                                    var structureTypeId = (( /** @type {?} */(prop.propertyType))).refId;
                                    /** @type {?} */
                                    var queryStructureType = _this.getRefStructureType(allStructures, structureTypeId);
                                    prop.propertyType = queryStructureType;
                                }
                            }));
                        }
                    }));
                }
                if (structure.refStructures != null) {
                    structure.refStructures.forEach(( /**
                     * @param {?} refStructure
                     * @return {?}
                     */function (refStructure) {
                        _this.replacePropertyRefer(refStructure);
                    }));
                }
            };
        /**
         * @param {?} allStructures
         * @param {?} structureId
         * @return {?}
         */
        ReferReplaceUtil.getRefStructureType = /**
         * @param {?} allStructures
         * @param {?} structureId
         * @return {?}
         */
            function (allStructures, structureId) {
                /** @type {?} */
                var queryStructureType = allStructures.find(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.id == structureId; }));
                return queryStructureType;
            };
        /**
         * @param {?} structure
         * @return {?}
         */
        ReferReplaceUtil.getAllStructuredTypes = /**
         * @param {?} structure
         * @return {?}
         */
            function (structure) {
                /** @type {?} */
                var array = new Array();
                if (structure.structuredTypes != null) {
                    array = array.concat(structure.structuredTypes);
                }
                if (structure.refStructures != null) {
                    structure.refStructures.forEach(( /**
                     * @param {?} refStructure
                     * @return {?}
                     */function (refStructure) {
                        if (refStructure.structuredTypes != null) {
                            array = array.concat(refStructure.structuredTypes);
                        }
                    }));
                }
                return array;
            };
        return ReferReplaceUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonStructureConvertor = /** @class */ (function () {
        function CommonStructureConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
        CommonStructureConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, structure, ctxt) {
                if (!structure) {
                    return;
                }
                obj['id'] = structure.id;
                obj['uri'] = structure.uri;
                obj['code'] = structure.code;
                obj['name'] = structure.name;
                obj['kind'] = structure.kind;
                obj['description'] = structure.description;
                /** @type {?} */
                var structureConvertor = new StructuredTypeConvertor();
                obj['structuredTypes'] = new Array();
                if (structure.structuredTypes) {
                    structure.structuredTypes.forEach(( /**
                     * @param {?} structuredType
                     * @return {?}
                     */function (structuredType) {
                        /** @type {?} */
                        var kind = structuredType.kind;
                        /** @type {?} */
                        var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                        /** @type {?} */
                        var structuredTypeObj = serializer.serialize(structuredType, ctxt);
                        obj['structuredTypes'].push(structuredTypeObj);
                    }));
                }
                obj['refStructures'] = new Array();
                if (structure.refStructures) {
                    structure.refStructures.forEach(( /**
                     * @param {?} refStructure
                     * @return {?}
                     */function (refStructure) {
                        /** @type {?} */
                        var kind = refStructure.kind;
                        /** @type {?} */
                        var serializer = ctxt.getStructureSerializerFactory().get(kind);
                        /** @type {?} */
                        var refStructureObj = serializer.serialize(refStructure, ctxt);
                        obj['refStructures'].push(refStructureObj);
                    }));
                }
            };
        /**
         * @param {?} structure
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        CommonStructureConvertor.prototype.initFromObject = /**
         * @param {?} structure
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (structure, obj, ctxt) {
                if (!obj) {
                    return;
                }
                structure.kind = obj['kind'];
                structure.id = obj['id'];
                structure.uri = obj['uri'];
                structure.code = obj['code'];
                structure.name = obj['name'];
                structure.description = obj['description'];
                if (obj['structuredTypes']) {
                    structure.structuredTypes = new Array();
                    obj['structuredTypes'].forEach(( /**
                     * @param {?} structureObj
                     * @return {?}
                     */function (structureObj) {
                        /** @type {?} */
                        var kind = structureObj['kind'];
                        /** @type {?} */
                        var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                        /** @type {?} */
                        var structuredType = ( /** @type {?} */(serializer.deserialize(structureObj, ctxt)));
                        structure.structuredTypes.push(structuredType);
                        // structure.structuredTypes.push(DataTypeConvertUtil.initFromObject(structureObj) as StructuredType);
                    }));
                }
                if (obj['refStructures']) {
                    structure.refStructures = new Array();
                    obj['refStructures'].forEach(( /**
                     * @param {?} refTree
                     * @return {?}
                     */function (refTree) {
                        /** @type {?} */
                        var kind = refTree['kind'];
                        /** @type {?} */
                        var refSerializer = ctxt.getStructureSerializerFactory().get(kind);
                        /** @type {?} */
                        var refStructure = refSerializer.deserialize(refTree, ctxt);
                        structure.refStructures.push(refStructure);
                        // structure.refStructures.push(CommonStructureConvertUtil.initFromObject(refTree));
                    }));
                }
                //替换structuredTypes和refStructures中的propRefer
                ReferReplaceUtil.replacePropertyRefer(structure);
            };
        return CommonStructureConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AggregateConvertor = /** @class */ (function () {
        function AggregateConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} aggregate
         * @param {?} ctxt
         * @return {?}
         */
        AggregateConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} aggregate
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, aggregate, ctxt) {
                /** @type {?} */
                var structureConvertor = new CommonStructureConvertor();
                structureConvertor.convertToObject(obj, aggregate, ctxt);
                //root
                if (aggregate.root) {
                    obj['rootId'] = aggregate.root.id;
                }
            };
        /**
         * @param {?} aggregate
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        AggregateConvertor.prototype.initFromObject = /**
         * @param {?} aggregate
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (aggregate, obj, ctxt) {
                /** @type {?} */
                var structureConvertor = new CommonStructureConvertor();
                structureConvertor.initFromObject(aggregate, obj, ctxt);
                //root
                /** @type {?} */
                var rootId = obj['rootId'];
                if (rootId && aggregate.structuredTypes && aggregate.structuredTypes.length > 0) {
                    aggregate.root = aggregate.structuredTypes.find(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.id == rootId; }));
                }
            };
        return AggregateConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EntityObjectConvertor = /** @class */ (function () {
        function EntityObjectConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} entity
         * @param {?} ctxt
         * @return {?}
         */
        EntityObjectConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} entity
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, entity, ctxt) {
                /** @type {?} */
                var aggregateConvertor = new AggregateConvertor();
                aggregateConvertor.convertToObject(obj, entity, ctxt);
                obj['entityRelations'] = entity.entityRelations;
                obj['operations'] = new Array();
                if (entity.operations) {
                    entity.operations.forEach(( /**
                     * @param {?} op
                     * @return {?}
                     */function (op) {
                        /** @type {?} */
                        var kind = op['kind'];
                        /** @type {?} */
                        var serializer = ctxt.getOperationSerializerFactory().get(kind);
                        /** @type {?} */
                        var opObj = serializer.serialize(op, ctxt);
                        obj['operations'].push(opObj);
                    }));
                }
            };
        /**
         * @param {?} entity
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        EntityObjectConvertor.prototype.initFromObject = /**
         * @param {?} entity
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (entity, obj, ctxt) {
                /** @type {?} */
                var aggregateConvertor = new AggregateConvertor();
                aggregateConvertor.initFromObject(entity, obj, ctxt);
                if (obj['entityRelations']) {
                    entity.entityRelations = obj['entityRelations'];
                }
                if (obj['operations']) {
                    entity.operations = new Array();
                    obj['operations'].forEach(( /**
                     * @param {?} operationObj
                     * @return {?}
                     */function (operationObj) {
                        /** @type {?} */
                        var kind = operationObj['kind'];
                        /** @type {?} */
                        var serializer = ctxt.getOperationSerializerFactory().get(kind);
                        /** @type {?} */
                        var operation = serializer.deserialize(operationObj, ctxt);
                        entity.operations.push(operation);
                    }));
                }
                /** @type {?} */
                var allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(entity);
                ReferReplaceUtil.replaceOperationRefer(allStructureTypes, entity.operations);
            };
        return EntityObjectConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTransferObjectConvertor = /** @class */ (function () {
        function DataTransferObjectConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} dto
         * @param {?} ctxt
         * @return {?}
         */
        DataTransferObjectConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} dto
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, dto, ctxt) {
                /** @type {?} */
                var aggregateConvertor = new AggregateConvertor();
                aggregateConvertor.convertToObject(obj, dto, ctxt);
            };
        /**
         * @param {?} dto
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DataTransferObjectConvertor.prototype.initFromObject = /**
         * @param {?} dto
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (dto, obj, ctxt) {
                /** @type {?} */
                var aggregateConvertor = new AggregateConvertor();
                aggregateConvertor.initFromObject(dto, obj, ctxt);
            };
        return DataTransferObjectConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValueObjectConvertor = /** @class */ (function () {
        function ValueObjectConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} vo
         * @param {?} ctxt
         * @return {?}
         */
        ValueObjectConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} vo
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, vo, ctxt) {
                /** @type {?} */
                var structureConvertor = new CommonStructureConvertor();
                structureConvertor.convertToObject(obj, vo, ctxt);
                //first?
                /** @type {?} */
                var type = vo.dataType;
                obj['structureId'] = type.id;
            };
        /**
         * @param {?} vo
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        ValueObjectConvertor.prototype.initFromObject = /**
         * @param {?} vo
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (vo, obj, ctxt) {
                /** @type {?} */
                var structureConvertor = new CommonStructureConvertor();
                structureConvertor.initFromObject(vo, obj, ctxt);
                //没有root
                /** @type {?} */
                var allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(vo);
                ReferReplaceUtil.replaceOperationRefer(allStructureTypes, vo.operations);
            };
        return ValueObjectConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RelationConvertor = /** @class */ (function () {
        function RelationConvertor() {
        }
        /**
         * @param {?} relation
         * @return {?}
         */
        RelationConvertor.prototype.convertorToObject = /**
         * @param {?} relation
         * @return {?}
         */
            function (relation) {
                /** @type {?} */
                var obj = new Object();
                if (!relation) {
                    return obj;
                }
                obj['ParentPropCode'] = relation.ParentPropCode;
                obj['ChildPropCode'] = relation.ChildPropCode;
                return obj;
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        RelationConvertor.prototype.initFromObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var relation = new EntityRelation();
                if (!obj) {
                    return relation;
                }
                relation.ParentPropCode = obj['ParentPropCode'];
                relation.ChildPropCode = obj['ChildPropCode'];
                return relation;
            };
        return RelationConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RelationDictConvertor = /** @class */ (function () {
        function RelationDictConvertor() {
        }
        /**
         * @param {?} relationDict
         * @return {?}
         */
        RelationDictConvertor.prototype.convertorToObject = /**
         * @param {?} relationDict
         * @return {?}
         */
            function (relationDict) {
                return relationDict;
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        RelationDictConvertor.prototype.initFromObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var relationDict = new Object();
                if (!obj) {
                    return ( /** @type {?} */(relationDict));
                }
                /** @type {?} */
                var pCodeList = Object.keys(obj);
                pCodeList.forEach(( /**
                 * @param {?} pCode
                 * @return {?}
                 */function (pCode) {
                    /** @type {?} */
                    var cDict = obj[pCode];
                    if (cDict) {
                        relationDict[pCode] = new Object();
                        /** @type {?} */
                        var cCodeList = Object.keys(cDict);
                        cCodeList.forEach(( /**
                         * @param {?} cCode
                         * @return {?}
                         */function (cCode) {
                            /** @type {?} */
                            var cValue = cDict[cCode];
                            if (cValue) {
                                relationDict[pCode][cCode] = new Array();
                                cValue.forEach(( /**
                                 * @param {?} relationObj
                                 * @return {?}
                                 */function (relationObj) {
                                    /** @type {?} */
                                    var relationConvertor = new RelationConvertor();
                                    /** @type {?} */
                                    var relation = relationConvertor.initFromObject(relationObj);
                                    relationDict[pCode][cCode].push(relation);
                                }));
                            }
                        }));
                    }
                }));
                return ( /** @type {?} */(relationDict));
            };
        return RelationDictConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConstraintConvertor = /** @class */ (function () {
        function ConstraintConvertor() {
        }
        /**
         * @param {?} obj
         * @param {?} constraint
         * @param {?} ctxt
         * @return {?}
         */
        ConstraintConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @param {?} constraint
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, constraint, ctxt) {
                if (!constraint) {
                    return;
                }
                switch (constraint.getKind()) {
                    case ConstraintConst.DECIMAL:
                        /** @type {?} */
                        var decimalconstraint = ( /** @type {?} */(constraint));
                        obj['scale'] = ( /** @type {?} */(decimalconstraint.scale));
                        obj['pricision'] = ( /** @type {?} */(decimalconstraint.pricision));
                    case ConstraintConst.STRING:
                        /** @type {?} */
                        var stringconstraint = ( /** @type {?} */(constraint));
                        obj['maxLength'] = ( /** @type {?} */(stringconstraint.maxLength));
                    default:
                        throw new Error("\u7EA6\u675F\u4E0D\u652F\u6301\u7684" + constraint.getKind() + "\u7C7B\u578B\uFF01");
                }
            };
        /**
         * @param {?} constraint
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        ConstraintConvertor.prototype.initFromObject = /**
         * @param {?} constraint
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (constraint, obj, ctxt) {
                if (!obj) {
                    return null;
                }
                switch (obj['kind']) {
                    case ConstraintConst.DECIMAL:
                    case ConstraintConst.STRING:
                    default:
                        throw new Error("\u7EA6\u675F\u4E0D\u652F\u6301\u7684" + obj['kind'] + "\u7C7B\u578B\uFF01");
                }
            };
        return ConstraintConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultPrimitiveTypeSerializer = /** @class */ (function () {
        function DefaultPrimitiveTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultPrimitiveTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new PrimitiveTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultPrimitiveTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new PrimitiveType();
                /** @type {?} */
                var baseConvertor = new PrimitiveTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultPrimitiveTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultCollectionTypeSerializer = /** @class */ (function () {
        function DefaultCollectionTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultCollectionTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new CollectionTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultCollectionTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new CollectionType();
                /** @type {?} */
                var baseConvertor = new CollectionTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultCollectionTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultMapTypeSerializer = /** @class */ (function () {
        function DefaultMapTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultMapTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new MapTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultMapTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new MapType();
                /** @type {?} */
                var baseConvertor = new MapTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultMapTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultStructuredTypeSerializer = /** @class */ (function () {
        function DefaultStructuredTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultStructuredTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new StructuredTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultStructuredTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new StructuredType();
                /** @type {?} */
                var baseConvertor = new StructuredTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultStructuredTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultEntityTypeSerializer = /** @class */ (function () {
        function DefaultEntityTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultEntityTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new EntityTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultEntityTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new EntityType();
                /** @type {?} */
                var baseConvertor = new EntityTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultEntityTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultEnumerationTypeSerializer = /** @class */ (function () {
        function DefaultEnumerationTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultEnumerationTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new EnumerationTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultEnumerationTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new EnumerationType();
                /** @type {?} */
                var baseConvertor = new EnumerationTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultEnumerationTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultDataTransferObjectTypeSerializer = /** @class */ (function () {
        function DefaultDataTransferObjectTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultDataTransferObjectTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new DataTransferObjectTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultDataTransferObjectTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new DataTransferObjectType();
                /** @type {?} */
                var baseConvertor = new DataTransferObjectTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultDataTransferObjectTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultValueObjectTypeSerializer = /** @class */ (function () {
        function DefaultValueObjectTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultValueObjectTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new ValueObjectTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultValueObjectTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new ValueObjectType();
                /** @type {?} */
                var baseConvertor = new ValueObjectTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultValueObjectTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultObjectTypeSerializer = /** @class */ (function () {
        function DefaultObjectTypeSerializer() {
        }
        /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
        DefaultObjectTypeSerializer.prototype.serialize = /**
         * @param {?} type
         * @param {?} ctxt
         * @return {?}
         */
            function (type, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new ObjectTypeConvertor();
                baseConvertor.convertToObject(result, type, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultObjectTypeSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new ObjectType();
                /** @type {?} */
                var baseConvertor = new ObjectTypeConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultObjectTypeSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultDataTypeSerializerFactory = /** @class */ (function () {
        function DefaultDataTypeSerializerFactory() {
            this.serializerDict = {};
        }
        /**
         * @param {?} kind
         * @return {?}
         */
        DefaultDataTypeSerializerFactory.prototype.get = /**
         * @param {?} kind
         * @return {?}
         */
            function (kind) {
                switch (kind) {
                    case DataTypeConst.DEFAULT_PRIMITIVE:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultPrimitiveTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_COLLECTION:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultCollectionTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_MAP:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultMapTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_STRUCTURED:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultStructuredTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultDataTransferObjectTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_ENTITY:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultEntityTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_VALUE_OBJECT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultValueObjectTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_ENUMERATION:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultEnumerationTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DataTypeConst.DEFAULT_OBJECT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultObjectTypeSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    default:
                        throw new Error("\u672A\u627E\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668\uFF01");
                }
                return this.serializerDict[kind];
            };
        return DefaultDataTypeSerializerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * DefaultDataType
     * @type {?}
     */
    var DEFAULT_PRIMITIVE_TYPE = "DefaultPrimitiveType";
    /** @type {?} */
    var DEFAULT_COLLECTION_TYPE = "DefaultCollectionType";
    /** @type {?} */
    var DEFAULT_MAP_TYPE = "DefaultMapType";
    /** @type {?} */
    var DEFAULT_STRUCTURED_TYPE = "DefaultStructuredType";
    /** @type {?} */
    var DEFAULT_DATA_TRANSFER_OBJECT_TYPE = "DefaultDtoType";
    /** @type {?} */
    var DEFAULT_ENTITY_TYPE = "DefaultEntityType";
    /** @type {?} */
    var DEFAULT_VALUE_OBJECT_TYPE = "DefaultValueObjectType";
    /** @type {?} */
    var DEFAULT_ENUMERATION_TYPE = "DefaultEnumType";
    /** @type {?} */
    var DEFAULT_OBJECT_TYPE = "Object";
    /**
     * DefaultElement
     * @type {?}
     */
    var DEFAULT_PROPERTY = "DefaultProperty";
    /** @type {?} */
    var DEFAULT_PARAMETER = "DefaultParameter";
    /** @type {?} */
    var DEFAULT_OPERATION = "DefaultOperation";
    /** @type {?} */
    var DEFAULT_MUTILLINGUAL_PROPERTY = "DefaultMultillingualProperty";
    /**
     * DefaultStructure
     * @type {?}
     */
    var DEFAULT_ENTITY_OBJECT = "DefaultEntityObject";
    /** @type {?} */
    var DEFAULT_DATA_TRANSFER_OBJECT = "DefaultDataTransferObject";
    /** @type {?} */
    var DEFAULT_VALUE_OBJECT = "DefaultValueObject";
    /**
     * DefaultConstraint
     * @type {?}
     */
    var DEFAULT_CONSTRAINT = "DefaultConstraint";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultOperationSerializer = /** @class */ (function () {
        function DefaultOperationSerializer() {
        }
        /**
         * @param {?} op
         * @param {?} ctxt
         * @return {?}
         */
        DefaultOperationSerializer.prototype.serialize = /**
         * @param {?} op
         * @param {?} ctxt
         * @return {?}
         */
            function (op, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new OperationConvertor();
                baseConvertor.convertToObject(result, op, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultOperationSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new Operation();
                /** @type {?} */
                var baseConvertor = new OperationConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultOperationSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultOperationSerializerFactory = /** @class */ (function () {
        function DefaultOperationSerializerFactory() {
            this.serializerDict = {};
        }
        /**
         * @param {?} kind
         * @return {?}
         */
        DefaultOperationSerializerFactory.prototype.get = /**
         * @param {?} kind
         * @return {?}
         */
            function (kind) {
                switch (kind) {
                    case DEFAULT_OPERATION:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultOperationSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    default:
                        throw new Error("\u672A\u5339\u914D\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668!");
                }
                return this.serializerDict[kind];
            };
        return DefaultOperationSerializerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultParameterSerializer = /** @class */ (function () {
        function DefaultParameterSerializer() {
        }
        /**
         * @param {?} param
         * @param {?} ctxt
         * @return {?}
         */
        DefaultParameterSerializer.prototype.serialize = /**
         * @param {?} param
         * @param {?} ctxt
         * @return {?}
         */
            function (param, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new ParameterConvertor();
                baseConvertor.convertToObject(result, param, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultParameterSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new Parameter();
                /** @type {?} */
                var baseConvertor = new ParameterConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultParameterSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultParameterSerializerFactory = /** @class */ (function () {
        function DefaultParameterSerializerFactory() {
            this.serializerDict = {};
        }
        /**
         * @param {?} kind
         * @return {?}
         */
        DefaultParameterSerializerFactory.prototype.get = /**
         * @param {?} kind
         * @return {?}
         */
            function (kind) {
                switch (kind) {
                    case DEFAULT_PARAMETER:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultParameterSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    default:
                        throw new Error("\u672A\u5339\u914D\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668!");
                }
                return this.serializerDict[kind];
            };
        return DefaultParameterSerializerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultProeprtySerializer = /** @class */ (function () {
        function DefaultProeprtySerializer() {
        }
        /**
         * @param {?} prop
         * @param {?} ctxt
         * @return {?}
         */
        DefaultProeprtySerializer.prototype.serialize = /**
         * @param {?} prop
         * @param {?} ctxt
         * @return {?}
         */
            function (prop, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new PropertyConvertor();
                baseConvertor.convertToObject(result, prop, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultProeprtySerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new Property();
                /** @type {?} */
                var baseConvertor = new PropertyConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultProeprtySerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultPropertySerializerFactory = /** @class */ (function () {
        function DefaultPropertySerializerFactory() {
            this.serializerDict = {};
        }
        /**
         * @param {?} kind
         * @return {?}
         */
        DefaultPropertySerializerFactory.prototype.get = /**
         * @param {?} kind
         * @return {?}
         */
            function (kind) {
                switch (kind) {
                    case DEFAULT_PROPERTY:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultProeprtySerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    default:
                        throw new Error("\u672A\u5339\u914D\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668!");
                }
                return this.serializerDict[kind];
            };
        return DefaultPropertySerializerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultEntityObjectSerializer = /** @class */ (function () {
        function DefaultEntityObjectSerializer() {
        }
        /**
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
        DefaultEntityObjectSerializer.prototype.serialize = /**
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
            function (structure, ctxt) {
                /** @type {?} */
                var result = new Object();
                //使用基本的序列化器
                /** @type {?} */
                var baseConvertor = new EntityObjectConvertor();
                /** @type {?} */
                var entity = ( /** @type {?} */(structure));
                baseConvertor.convertToObject(result, entity, ctxt);
                //Cando:增加自己对Object的扩展
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultEntityObjectSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new EntityObject();
                /** @type {?} */
                var baseConvertor = new EntityObjectConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultEntityObjectSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultValueObjectSerializer = /** @class */ (function () {
        function DefaultValueObjectSerializer() {
        }
        /**
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
        DefaultValueObjectSerializer.prototype.serialize = /**
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
            function (structure, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new ValueObjectConvertor();
                /** @type {?} */
                var valueObject = ( /** @type {?} */(structure));
                baseConvertor.convertToObject(result, valueObject, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultValueObjectSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new ValueObject();
                /** @type {?} */
                var baseConvertor = new ValueObjectConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultValueObjectSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultDataTransferObjectSerializer = /** @class */ (function () {
        function DefaultDataTransferObjectSerializer() {
        }
        /**
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
        DefaultDataTransferObjectSerializer.prototype.serialize = /**
         * @param {?} structure
         * @param {?} ctxt
         * @return {?}
         */
            function (structure, ctxt) {
                /** @type {?} */
                var result = new DataTransferObject();
                /** @type {?} */
                var baseConvertor = new DataTransferObjectConvertor();
                /** @type {?} */
                var dto = ( /** @type {?} */(structure));
                baseConvertor.convertToObject(result, dto, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultDataTransferObjectSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                /** @type {?} */
                var result = new DataTransferObject();
                /** @type {?} */
                var baseConvertor = new DataTransferObjectConvertor();
                baseConvertor.initFromObject(result, obj, ctxt);
                return result;
            };
        return DefaultDataTransferObjectSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultStructureSerializerFactory = /** @class */ (function () {
        function DefaultStructureSerializerFactory() {
            this.serializerDict = {};
        }
        /**
         * @param {?} kind
         * @return {?}
         */
        DefaultStructureSerializerFactory.prototype.get = /**
         * @param {?} kind
         * @return {?}
         */
            function (kind) {
                switch (kind) {
                    case DEFAULT_ENTITY_OBJECT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultEntityObjectSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DEFAULT_VALUE_OBJECT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultValueObjectSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    case DEFAULT_DATA_TRANSFER_OBJECT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultDataTransferObjectSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    default:
                        throw new Error("\u672A\u5339\u914D\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668!");
                }
                return this.serializerDict[kind];
            };
        return DefaultStructureSerializerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultConstraintSerializer = /** @class */ (function () {
        function DefaultConstraintSerializer() {
        }
        /**
         * @param {?} constraint
         * @param {?} ctxt
         * @return {?}
         */
        DefaultConstraintSerializer.prototype.serialize = /**
         * @param {?} constraint
         * @param {?} ctxt
         * @return {?}
         */
            function (constraint, ctxt) {
                /** @type {?} */
                var result = new Object();
                /** @type {?} */
                var baseConvertor = new ConstraintConvertor();
                baseConvertor.convertToObject(result, constraint, ctxt);
                return result;
            };
        /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
        DefaultConstraintSerializer.prototype.deserialize = /**
         * @param {?} obj
         * @param {?} ctxt
         * @return {?}
         */
            function (obj, ctxt) {
                throw new Error("Method not implemented.");
            };
        return DefaultConstraintSerializer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultConstraintSerializerFactory = /** @class */ (function () {
        function DefaultConstraintSerializerFactory() {
            this.serializerDict = {};
        }
        /**
         * @param {?} kind
         * @return {?}
         */
        DefaultConstraintSerializerFactory.prototype.get = /**
         * @param {?} kind
         * @return {?}
         */
            function (kind) {
                switch (kind) {
                    case DEFAULT_CONSTRAINT:
                        if (!this.serializerDict[kind]) {
                            /** @type {?} */
                            var serializer = new DefaultConstraintSerializer();
                            this.serializerDict[kind] = serializer;
                        }
                        break;
                    default:
                        throw new Error("\u672A\u5339\u914D\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668!");
                }
                return this.serializerDict[kind];
            };
        return DefaultConstraintSerializerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultSerializeContext = /** @class */ (function () {
        function DefaultSerializeContext() {
        }
        /**
         * @return {?}
         */
        DefaultSerializeContext.prototype.getDataTypeSerializerFactory = /**
         * @return {?}
         */
            function () {
                if (!this.dataTypeFactory) {
                    this.dataTypeFactory = new DefaultDataTypeSerializerFactory();
                }
                return this.dataTypeFactory;
            };
        /**
         * @return {?}
         */
        DefaultSerializeContext.prototype.getOperationSerializerFactory = /**
         * @return {?}
         */
            function () {
                if (!this.operationFactory) {
                    this.operationFactory = new DefaultOperationSerializerFactory();
                }
                return this.operationFactory;
            };
        /**
         * @return {?}
         */
        DefaultSerializeContext.prototype.getParameterSerializerFactory = /**
         * @return {?}
         */
            function () {
                if (!this.parameterFactory) {
                    this.parameterFactory = new DefaultParameterSerializerFactory();
                }
                return this.parameterFactory;
            };
        /**
         * @return {?}
         */
        DefaultSerializeContext.prototype.getPropertySerializerFactory = /**
         * @return {?}
         */
            function () {
                if (!this.propertyFactory) {
                    this.propertyFactory = new DefaultPropertySerializerFactory();
                }
                return this.propertyFactory;
            };
        /**
         * @return {?}
         */
        DefaultSerializeContext.prototype.getStructureSerializerFactory = /**
         * @return {?}
         */
            function () {
                if (!this.structureFactory) {
                    this.structureFactory = new DefaultStructureSerializerFactory();
                }
                return this.structureFactory;
            };
        /**
         * @return {?}
         */
        DefaultSerializeContext.prototype.getConstraintSerializerFactory = /**
         * @return {?}
         */
            function () {
                if (!this.constraintFactory) {
                    this.constraintFactory = new DefaultConstraintSerializerFactory();
                }
                return this.constraintFactory;
            };
        return DefaultSerializeContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonStructureDTService = /** @class */ (function () {
        function CommonStructureDTService(http$$1) {
            this.http = http$$1;
            this.commom_structure_url = '/api/dev/main/v1.0/common-structure';
        }
        /**
         * N版获取CommonStructure
         * @param type 元数据类型
         * @param id 元数据Id
         * @param headers 请求header，应包含sessionId等必需参数
         */
        /**
         * N版获取CommonStructure
         * @param {?} id 元数据Id
         * @param {?} headers 请求header，应包含sessionId等必需参数
         * @return {?}
         */
        CommonStructureDTService.prototype.get = /**
         * N版获取CommonStructure
         * @param {?} id 元数据Id
         * @param {?} headers 请求header，应包含sessionId等必需参数
         * @return {?}
         */
            function (id, headers) {
                /** @type {?} */
                var url = this.commom_structure_url + '?id=' + id;
                return this.http.get(url, { headers: headers }).pipe(operators.map(( /**
                 * @param {?} obj
                 * @return {?}
                 */function (obj) {
                    //使用默认serializeContext进行反序列化
                    /** @type {?} */
                    var serializeCtxt = new DefaultSerializeContext();
                    /** @type {?} */
                    var kind = obj['kind'];
                    /** @type {?} */
                    var serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
                    return ( /** @type {?} */(serializer.deserialize(obj, serializeCtxt)));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    alert("获取通用数据结构失败！");
                    return null;
                })));
            };
        CommonStructureDTService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommonStructureDTService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return CommonStructureDTService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonStructureRTService = /** @class */ (function () {
        function CommonStructureRTService(http$$1) {
            this.http = http$$1;
            this.commom_structure_url = '/api/runtime/sys/v1.0/common-structure';
        }
        /**
         * 获取CommonStructure
         * @param type 元数据类型
         * @param id 元数据Id
         * @param headers 请求header，应包含sessionId等必需参数
         */
        /**
         * 获取CommonStructure
         * @param {?} id 元数据Id
         * @param {?} headers 请求header，应包含sessionId等必需参数
         * @return {?}
         */
        CommonStructureRTService.prototype.get = /**
         * 获取CommonStructure
         * @param {?} id 元数据Id
         * @param {?} headers 请求header，应包含sessionId等必需参数
         * @return {?}
         */
            function (id, headers) {
                /** @type {?} */
                var url = this.commom_structure_url + '?id=' + id;
                return this.http.get(url, { headers: headers }).pipe(operators.map(( /**
                 * @param {?} obj
                 * @return {?}
                 */function (obj) {
                    //使用默认serializeContext进行反序列化
                    /** @type {?} */
                    var serializeCtxt = new DefaultSerializeContext();
                    /** @type {?} */
                    var kind = obj['kind'];
                    /** @type {?} */
                    var serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
                    return ( /** @type {?} */(serializer.deserialize(obj, serializeCtxt)));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    alert("获取通用数据结构失败！");
                    return null;
                })));
            };
        CommonStructureRTService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CommonStructureRTService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return CommonStructureRTService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { CodeRuleSelectModule } from './test/code-rule-select.module';
    var CommonStructureModule = /** @class */ (function () {
        function CommonStructureModule() {
        }
        CommonStructureModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            // CodeRuleSelectModule,
                            http.HttpClientModule
                        ],
                        declarations: [],
                        providers: [CommonStructureDTService, CommonStructureRTService],
                        exports: []
                    },] }
        ];
        return CommonStructureModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.CommonStructure = CommonStructure;
    exports.Aggregate = Aggregate;
    exports.EntityObject = EntityObject;
    exports.DataTransferObject = DataTransferObject;
    exports.ValueObject = ValueObject;
    exports.EntityRelation = EntityRelation;
    exports.Operation = Operation;
    exports.Parameter = Parameter;
    exports.Property = Property;
    exports.DataType = DataType;
    exports.CollectionType = CollectionType;
    exports.MapType = MapType;
    exports.PrimitiveType = PrimitiveType;
    exports.StructuredType = StructuredType;
    exports.EntityType = EntityType;
    exports.DataTransferObjectType = DataTransferObjectType;
    exports.ValueObjectType = ValueObjectType;
    exports.EnumerationType = EnumerationType;
    exports.EnumerationItem = EnumerationItem;
    exports.ObjectType = ObjectType;
    exports.DecimalConstraint = DecimalConstraint;
    exports.StringConstraint = StringConstraint;
    exports.CommonStructureConst = CommonStructureConst;
    exports.ConstraintConst = ConstraintConst;
    exports.DataTypeConst = DataTypeConst;
    exports.ElementConstant = ElementConstant;
    exports.PrimitiveTypeKind = PrimitiveTypeKind;
    exports.CollectionTypeConvertor = CollectionTypeConvertor;
    exports.MapTypeConvertor = MapTypeConvertor;
    exports.PrimitiveTypeConvertor = PrimitiveTypeConvertor;
    exports.ObjectTypeConvertor = ObjectTypeConvertor;
    exports.StructuredTypeConvertor = StructuredTypeConvertor;
    exports.DataTransferObjectTypeConvertor = DataTransferObjectTypeConvertor;
    exports.EntityTypeConvertor = EntityTypeConvertor;
    exports.ValueObjectTypeConvertor = ValueObjectTypeConvertor;
    exports.EnumerationTypeConvertor = EnumerationTypeConvertor;
    exports.EnumerationItemConvertor = EnumerationItemConvertor;
    exports.OperationConvertor = OperationConvertor;
    exports.ParameterConvertor = ParameterConvertor;
    exports.PropertyConvertor = PropertyConvertor;
    exports.CommonStructureConvertor = CommonStructureConvertor;
    exports.AggregateConvertor = AggregateConvertor;
    exports.EntityObjectConvertor = EntityObjectConvertor;
    exports.DataTransferObjectConvertor = DataTransferObjectConvertor;
    exports.ValueObjectConvertor = ValueObjectConvertor;
    exports.RelationConvertor = RelationConvertor;
    exports.RelationDictConvertor = RelationDictConvertor;
    exports.ConstraintConvertor = ConstraintConvertor;
    exports.DataTypeConvertUtil = DataTypeConvertUtil;
    exports.ReferReplaceUtil = ReferReplaceUtil;
    exports.DefaultSerializeContext = DefaultSerializeContext;
    exports.DefaultDataTypeSerializerFactory = DefaultDataTypeSerializerFactory;
    exports.DefaultOperationSerializerFactory = DefaultOperationSerializerFactory;
    exports.DefaultParameterSerializerFactory = DefaultParameterSerializerFactory;
    exports.DefaultPropertySerializerFactory = DefaultPropertySerializerFactory;
    exports.DefaultStructureSerializerFactory = DefaultStructureSerializerFactory;
    exports.DefaultCollectionTypeSerializer = DefaultCollectionTypeSerializer;
    exports.DefaultDataTransferObjectSerializer = DefaultDataTransferObjectSerializer;
    exports.DefaultDataTransferObjectTypeSerializer = DefaultDataTransferObjectTypeSerializer;
    exports.DefaultEntityObjectSerializer = DefaultEntityObjectSerializer;
    exports.DefaultEntityTypeSerializer = DefaultEntityTypeSerializer;
    exports.DefaultEnumerationTypeSerializer = DefaultEnumerationTypeSerializer;
    exports.DefaultMapTypeSerializer = DefaultMapTypeSerializer;
    exports.DefaultOperationSerializer = DefaultOperationSerializer;
    exports.DefaultParameterSerializer = DefaultParameterSerializer;
    exports.DefaultPrimitiveTypeSerializer = DefaultPrimitiveTypeSerializer;
    exports.DefaultProeprtySerializer = DefaultProeprtySerializer;
    exports.DefaultStructuredTypeSerializer = DefaultStructuredTypeSerializer;
    exports.DefaultValueObjectSerializer = DefaultValueObjectSerializer;
    exports.DefaultValueObjectTypeSerializer = DefaultValueObjectTypeSerializer;
    exports.DefaultConstraintSerializer = DefaultConstraintSerializer;
    exports.CommonStructureModule = CommonStructureModule;
    exports.CommonStructureDTService = CommonStructureDTService;
    exports.CommonStructureRTService = CommonStructureRTService;
    exports.DEFAULT_PRIMITIVE_TYPE = DEFAULT_PRIMITIVE_TYPE;
    exports.DEFAULT_COLLECTION_TYPE = DEFAULT_COLLECTION_TYPE;
    exports.DEFAULT_MAP_TYPE = DEFAULT_MAP_TYPE;
    exports.DEFAULT_STRUCTURED_TYPE = DEFAULT_STRUCTURED_TYPE;
    exports.DEFAULT_DATA_TRANSFER_OBJECT_TYPE = DEFAULT_DATA_TRANSFER_OBJECT_TYPE;
    exports.DEFAULT_ENTITY_TYPE = DEFAULT_ENTITY_TYPE;
    exports.DEFAULT_VALUE_OBJECT_TYPE = DEFAULT_VALUE_OBJECT_TYPE;
    exports.DEFAULT_ENUMERATION_TYPE = DEFAULT_ENUMERATION_TYPE;
    exports.DEFAULT_OBJECT_TYPE = DEFAULT_OBJECT_TYPE;
    exports.DEFAULT_PROPERTY = DEFAULT_PROPERTY;
    exports.DEFAULT_PARAMETER = DEFAULT_PARAMETER;
    exports.DEFAULT_OPERATION = DEFAULT_OPERATION;
    exports.DEFAULT_MUTILLINGUAL_PROPERTY = DEFAULT_MUTILLINGUAL_PROPERTY;
    exports.DEFAULT_ENTITY_OBJECT = DEFAULT_ENTITY_OBJECT;
    exports.DEFAULT_DATA_TRANSFER_OBJECT = DEFAULT_DATA_TRANSFER_OBJECT;
    exports.DEFAULT_VALUE_OBJECT = DEFAULT_VALUE_OBJECT;
    exports.DEFAULT_CONSTRAINT = DEFAULT_CONSTRAINT;
    exports.ɵa = Extension;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ecp-caf-common-structure.umd.js.map