/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';
export class CommonStructureRTService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.commom_structure_url = '/api/runtime/sys/v1.0/common-structure';
    }
    /**
     * 获取CommonStructure
     * @param {?} id 元数据Id
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    get(id, headers) {
        /** @type {?} */
        let idParam = encodeURIComponent(id);
        /** @type {?} */
        let url = this.commom_structure_url + '?id=' + id;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} obj
         * @return {?}
         */
        obj => {
            //使用默认serializeContext进行反序列化
            /** @type {?} */
            let serializeCtxt = new DefaultSerializeContext();
            /** @type {?} */
            let kind = obj['kind'];
            /** @type {?} */
            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
            return (/** @type {?} */ (serializer.deserialize(obj, serializeCtxt)));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            alert("获取通用数据结构失败！");
            return null;
        })));
    }
    ;
}
CommonStructureRTService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommonStructureRTService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonStructureRTService.prototype.commom_structure_url;
    /**
     * @type {?}
     * @private
     */
    CommonStructureRTService.prototype.http;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cnVjdHVyZS1ydC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3J1bi10aW1lL2NvbW1vbi1zdHJ1Y3R1cmUtcnQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFFL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBSXBHLE1BQU0sT0FBTyx3QkFBd0I7Ozs7SUFJakMsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUY1Qix5QkFBb0IsR0FBRyx3Q0FBd0MsQ0FBQztJQUVoQyxDQUFDOzs7Ozs7O0lBUXpDLEdBQUcsQ0FBQyxFQUFVLEVBQUUsT0FBb0I7O1lBQzVCLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7O1lBQ2hDLEdBQUcsR0FBSSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxHQUFHLEVBQUU7UUFDbEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBZSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztRQUNsRSxHQUFHLENBQUMsRUFBRTs7O2dCQUVGLGFBQWEsR0FBRyxJQUFJLHVCQUF1QixFQUFFOztnQkFDN0MsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7O2dCQUNsQixVQUFVLEdBQUcsYUFBYSxDQUFDLDZCQUE2QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUN4RSxPQUFPLG1CQUFBLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFnQixDQUFDO1FBQ3RFLENBQUM7Ozs7UUFDRCxLQUFLLENBQUEsRUFBRTtZQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNyQixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQUMsQ0FDRCxDQUFDO0lBQ04sQ0FBQztJQUFBLENBQUM7OztZQTdCTCxVQUFVOzs7O1lBUEYsVUFBVTs7Ozs7OztJQVVmLHdEQUF3RTs7Ozs7SUFFNUQsd0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRW50aXR5T2JqZWN0IH0gZnJvbSAnLi4vLi4vZGVmaW5lL3N0cnVjdHVyZS9lbnRpdHktb2JqZWN0JztcclxuaW1wb3J0IHsgRGVmYXVsdFNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9kZWZhdWx0L2RlZmF1bHQtc2VyaWFsaXplLWNvbnRleHQnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvbW1vblN0cnVjdHVyZVJUU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBjb21tb21fc3RydWN0dXJlX3VybCA9ICcvYXBpL3J1bnRpbWUvc3lzL3YxLjAvY29tbW9uLXN0cnVjdHVyZSc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlkNvbW1vblN0cnVjdHVyZVxyXG4gICAgICogQHBhcmFtIHR5cGUg5YWD5pWw5o2u57G75Z6LXHJcbiAgICAgKiBAcGFyYW0gaWQg5YWD5pWw5o2uSWRcclxuICAgICAqIEBwYXJhbSBoZWFkZXJzIOivt+axgmhlYWRlcu+8jOW6lOWMheWQq3Nlc3Npb25JZOetieW/hemcgOWPguaVsFxyXG4gICAgICovXHJcbiAgICBnZXQoaWQ6IHN0cmluZywgaGVhZGVyczogSHR0cEhlYWRlcnMpOiBPYnNlcnZhYmxlPEVudGl0eU9iamVjdD4ge1xyXG4gICAgICAgIGxldCBpZFBhcmFtID0gZW5jb2RlVVJJQ29tcG9uZW50KGlkKTtcclxuICAgICAgICBsZXQgdXJsID0gIHRoaXMuY29tbW9tX3N0cnVjdHVyZV91cmwgKyAnP2lkPScgKyBpZCA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RW50aXR5T2JqZWN0Pih1cmwsIHsgaGVhZGVyczogaGVhZGVycyB9KS5waXBlKG1hcChcclxuICAgICAgICAgICAgb2JqID0+IHtcclxuICAgICAgICAgICAgLy/kvb/nlKjpu5jorqRzZXJpYWxpemVDb250ZXh06L+b6KGM5Y+N5bqP5YiX5YyWXHJcbiAgICAgICAgICAgIGxldCBzZXJpYWxpemVDdHh0ID0gbmV3IERlZmF1bHRTZXJpYWxpemVDb250ZXh0KCk7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gb2JqWydraW5kJ107XHJcbiAgICAgICAgICAgIGxldCBzZXJpYWxpemVyID0gc2VyaWFsaXplQ3R4dC5nZXRTdHJ1Y3R1cmVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUob2JqLCBzZXJpYWxpemVDdHh0KSBhcyBFbnRpdHlPYmplY3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcnJvcj0+e1xyXG4gICAgICAgICAgICBhbGVydChcIuiOt+WPlumAmueUqOaVsOaNrue7k+aehOWksei0pe+8gVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICBcclxufSJdfQ==