/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { RelationConvertor } from './relation-convertor';
export class RelationDictConvertor {
    /**
     * @param {?} relationDict
     * @return {?}
     */
    convertorToObject(relationDict) {
        return relationDict;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    initFromObject(obj) {
        /** @type {?} */
        let relationDict = new Object();
        if (!obj) {
            return (/** @type {?} */ (relationDict));
        }
        /** @type {?} */
        let pCodeList = Object.keys(obj);
        pCodeList.forEach((/**
         * @param {?} pCode
         * @return {?}
         */
        pCode => {
            /** @type {?} */
            let cDict = obj[pCode];
            if (cDict) {
                relationDict[pCode] = new Object();
                /** @type {?} */
                let cCodeList = Object.keys(cDict);
                cCodeList.forEach((/**
                 * @param {?} cCode
                 * @return {?}
                 */
                cCode => {
                    /** @type {?} */
                    let cValue = cDict[cCode];
                    if (cValue) {
                        relationDict[pCode][cCode] = new Array();
                        cValue.forEach((/**
                         * @param {?} relationObj
                         * @return {?}
                         */
                        relationObj => {
                            /** @type {?} */
                            let relationConvertor = new RelationConvertor();
                            /** @type {?} */
                            let relation = relationConvertor.initFromObject(relationObj);
                            relationDict[pCode][cCode].push(relation);
                        }));
                    }
                }));
            }
        }));
        return (/** @type {?} */ (relationDict));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb24tZGljdC1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9zdHJ1Y3R1cmUvcmVsYXRpb24tZGljdC1jb252ZXJ0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR3pELE1BQU0sT0FBTyxxQkFBcUI7Ozs7O0lBRTlCLGlCQUFpQixDQUFDLFlBQTJEO1FBQ3pFLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsY0FBYyxDQUFDLEdBQVc7O1lBQ2xCLFlBQVksR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUMvQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTyxtQkFBQSxZQUFZLEVBQWlELENBQUM7U0FDeEU7O1lBQ0csU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2hDLFNBQVMsQ0FBQyxPQUFPOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7O2dCQUNsQixLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUN0QixJQUFJLEtBQUssRUFBRTtnQkFDUCxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7b0JBQy9CLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDbEMsU0FBUyxDQUFDLE9BQU87Ozs7Z0JBQUMsS0FBSyxDQUFDLEVBQUU7O3dCQUNsQixNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztvQkFDekIsSUFBSSxNQUFNLEVBQUU7d0JBQ1IsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFrQixDQUFDO3dCQUN6RCxNQUFNLENBQUMsT0FBTzs7Ozt3QkFBQyxXQUFXLENBQUMsRUFBRTs7Z0NBQ3JCLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUU7O2dDQUMzQyxRQUFRLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQzs0QkFDNUQsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDOUMsQ0FBQyxFQUFDLENBQUE7cUJBQ0w7Z0JBQ0wsQ0FBQyxFQUFDLENBQUE7YUFDTDtRQUNMLENBQUMsRUFBQyxDQUFBO1FBQ0YsT0FBTyxtQkFBQSxZQUFZLEVBQWlELENBQUM7SUFDekUsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVsYXRpb25Db252ZXJ0b3IgfSBmcm9tICcuL3JlbGF0aW9uLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IEVudGl0eVJlbGF0aW9uIH0gZnJvbSAnLi4vLi4vZGVmaW5lL3N0cnVjdHVyZS9lbnRpdHktcmVsYXRpb24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlbGF0aW9uRGljdENvbnZlcnRvciB7XHJcblxyXG4gICAgY29udmVydG9yVG9PYmplY3QocmVsYXRpb25EaWN0OiB7IHN0cmluZzogeyBzdHJpbmc6IEFycmF5PEVudGl0eVJlbGF0aW9uPiB9IH0pOiBPYmplY3Qge1xyXG4gICAgICAgIHJldHVybiByZWxhdGlvbkRpY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3Qob2JqOiBPYmplY3QpOiB7IHN0cmluZzogeyBzdHJpbmc6IEFycmF5PEVudGl0eVJlbGF0aW9uPiB9IH0ge1xyXG4gICAgICAgIGxldCByZWxhdGlvbkRpY3QgPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbGF0aW9uRGljdCBhcyB7IHN0cmluZzogeyBzdHJpbmc6IEFycmF5PEVudGl0eVJlbGF0aW9uPiB9IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwQ29kZUxpc3QgPSBPYmplY3Qua2V5cyhvYmopO1xyXG4gICAgICAgIHBDb2RlTGlzdC5mb3JFYWNoKHBDb2RlID0+IHtcclxuICAgICAgICAgICAgbGV0IGNEaWN0ID0gb2JqW3BDb2RlXTtcclxuICAgICAgICAgICAgaWYgKGNEaWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZWxhdGlvbkRpY3RbcENvZGVdID0gbmV3IE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNDb2RlTGlzdCA9IE9iamVjdC5rZXlzKGNEaWN0KTtcclxuICAgICAgICAgICAgICAgIGNDb2RlTGlzdC5mb3JFYWNoKGNDb2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY1ZhbHVlID0gY0RpY3RbY0NvZGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpb25EaWN0W3BDb2RlXVtjQ29kZV0gPSBuZXcgQXJyYXk8RW50aXR5UmVsYXRpb24+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNWYWx1ZS5mb3JFYWNoKHJlbGF0aW9uT2JqID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWxhdGlvbkNvbnZlcnRvciA9IG5ldyBSZWxhdGlvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0aW9uID0gcmVsYXRpb25Db252ZXJ0b3IuaW5pdEZyb21PYmplY3QocmVsYXRpb25PYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpb25EaWN0W3BDb2RlXVtjQ29kZV0ucHVzaChyZWxhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHJlbGF0aW9uRGljdCBhcyB7IHN0cmluZzogeyBzdHJpbmc6IEFycmF5PEVudGl0eVJlbGF0aW9uPiB9IH07XHJcbiAgICB9XHJcbn0iXX0=