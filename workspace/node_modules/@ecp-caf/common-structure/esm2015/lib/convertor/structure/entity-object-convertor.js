/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ReferReplaceUtil } from '../utils/refer-replace-util';
import { AggregateConvertor } from './aggregate-convertor';
export class EntityObjectConvertor {
    /**
     * @param {?} obj
     * @param {?} entity
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, entity, ctxt) {
        /** @type {?} */
        let aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.convertToObject(obj, entity, ctxt);
        obj['entityRelations'] = entity.entityRelations;
        obj['operations'] = new Array();
        if (entity.operations) {
            entity.operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            op => {
                /** @type {?} */
                var kind = op['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var opObj = serializer.serialize(op, ctxt);
                obj['operations'].push(opObj);
            }));
        }
    }
    /**
     * @param {?} entity
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(entity, obj, ctxt) {
        /** @type {?} */
        let aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.initFromObject(entity, obj, ctxt);
        if (obj['entityRelations']) {
            entity.entityRelations = obj['entityRelations'];
        }
        if (obj['operations']) {
            entity.operations = new Array();
            obj['operations'].forEach((/**
             * @param {?} operationObj
             * @return {?}
             */
            operationObj => {
                /** @type {?} */
                var kind = operationObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var operation = serializer.deserialize(operationObj, ctxt);
                entity.operations.push(operation);
            }));
        }
        /** @type {?} */
        let allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(entity);
        ReferReplaceUtil.replaceOperationRefer(allStructureTypes, entity.operations);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LW9iamVjdC1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9zdHJ1Y3R1cmUvZW50aXR5LW9iamVjdC1jb252ZXJ0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRS9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSzNELE1BQU0sT0FBTyxxQkFBcUI7Ozs7Ozs7SUFFN0IsZUFBZSxDQUFDLEdBQVUsRUFBQyxNQUFvQixFQUFDLElBQXFDOztZQUM5RSxrQkFBa0IsR0FBQyxJQUFJLGtCQUFrQixFQUFFO1FBQy9DLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7UUFDaEQsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDeEMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTzs7OztZQUFDLEVBQUUsQ0FBQyxFQUFFOztvQkFDdkIsSUFBSSxHQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7O29CQUNmLFVBQVUsR0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDOztvQkFDekQsS0FBSyxHQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQztnQkFDdkMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Ozs7OztJQUVBLGNBQWMsQ0FBQyxNQUFtQixFQUFDLEdBQVcsRUFBQyxJQUFxQzs7WUFDN0Usa0JBQWtCLEdBQUMsSUFBSSxrQkFBa0IsRUFBRTtRQUMvQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuQixNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksS0FBSyxFQUFhLENBQUM7WUFDM0MsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxZQUFZLENBQUMsRUFBRTs7b0JBQ2pDLElBQUksR0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDOztvQkFDekIsVUFBVSxHQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7O29CQUN6RCxTQUFTLEdBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDO2dCQUN2RCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QyxDQUFDLEVBQUMsQ0FBQztTQUNOOztZQUNHLGlCQUFpQixHQUF1QixnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDMUYsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLEVBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vblN0cnVjdHVyZUNvbnZlcnRvciB9IGZyb20gJy4vY29tbW9uLXN0cnVjdHVyZS1jb252ZXJ0b3InO1xyXG5pbXBvcnQgeyBPcGVyYXRpb24gfSBmcm9tICcuLi8uLi9kZWZpbmUvb3BlcmF0aW9uL29wZXJhdGlvbic7XHJcbmltcG9ydCB7IE9wZXJhdGlvbkNvbnZlcnRvciB9IGZyb20gJy4uL29wZXJhdGlvbi9vcGVyYXRpb24tY29udmVydG9yJztcclxuaW1wb3J0IHsgUmVmZXJSZXBsYWNlVXRpbCB9IGZyb20gJy4uL3V0aWxzL3JlZmVyLXJlcGxhY2UtdXRpbCc7XHJcbmltcG9ydCB7IEVudGl0eU9iamVjdCB9IGZyb20gJy4uLy4uL2RlZmluZS9zdHJ1Y3R1cmUvZW50aXR5LW9iamVjdCc7XHJcbmltcG9ydCB7IEFnZ3JlZ2F0ZUNvbnZlcnRvciB9IGZyb20gJy4vYWdncmVnYXRlLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IFN0cnVjdHVyZWRUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvc3RydWN0dXJlZC10eXBlJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktY29tbW9uLXN0cnVjdHVyZS1zZXJpYWxpemUtY29udGV4dCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5T2JqZWN0Q29udmVydG9yICB7XHJcblxyXG4gICAgIGNvbnZlcnRUb09iamVjdChvYmo6T2JqZWN0LGVudGl0eTogRW50aXR5T2JqZWN0LGN0eHQ6SUNvbW1vblN0cnVjdHVyZVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgYWdncmVnYXRlQ29udmVydG9yPW5ldyBBZ2dyZWdhdGVDb252ZXJ0b3IoKTsgIFxyXG4gICAgICAgIGFnZ3JlZ2F0ZUNvbnZlcnRvci5jb252ZXJ0VG9PYmplY3Qob2JqLGVudGl0eSxjdHh0KTtcclxuICAgICAgICBvYmpbJ2VudGl0eVJlbGF0aW9ucyddID0gZW50aXR5LmVudGl0eVJlbGF0aW9ucztcclxuICAgICAgICBvYmpbJ29wZXJhdGlvbnMnXSA9IG5ldyBBcnJheTxPYmplY3Q+KCk7XHJcbiAgICAgICAgaWYgKGVudGl0eS5vcGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgIGVudGl0eS5vcGVyYXRpb25zLmZvckVhY2gob3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtpbmQ9b3BbJ2tpbmQnXTtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyPWN0eHQuZ2V0T3BlcmF0aW9uU2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BPYmo9c2VyaWFsaXplci5zZXJpYWxpemUob3AsY3R4dCk7XHJcbiAgICAgICAgICAgICAgICBvYmpbJ29wZXJhdGlvbnMnXS5wdXNoKG9wT2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICBpbml0RnJvbU9iamVjdChlbnRpdHk6RW50aXR5T2JqZWN0LG9iajogT2JqZWN0LGN0eHQ6SUNvbW1vblN0cnVjdHVyZVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgYWdncmVnYXRlQ29udmVydG9yPW5ldyBBZ2dyZWdhdGVDb252ZXJ0b3IoKTsgIFxyXG4gICAgICAgIGFnZ3JlZ2F0ZUNvbnZlcnRvci5pbml0RnJvbU9iamVjdChlbnRpdHksb2JqLGN0eHQpO1xyXG4gICAgICAgIGlmIChvYmpbJ2VudGl0eVJlbGF0aW9ucyddKSB7XHJcbiAgICAgICAgICAgIGVudGl0eS5lbnRpdHlSZWxhdGlvbnMgPSBvYmpbJ2VudGl0eVJlbGF0aW9ucyddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JqWydvcGVyYXRpb25zJ10pIHtcclxuICAgICAgICAgICAgZW50aXR5Lm9wZXJhdGlvbnMgPSBuZXcgQXJyYXk8T3BlcmF0aW9uPigpO1xyXG4gICAgICAgICAgICBvYmpbJ29wZXJhdGlvbnMnXS5mb3JFYWNoKG9wZXJhdGlvbk9iaiA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2luZD1vcGVyYXRpb25PYmpbJ2tpbmQnXTtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyPWN0eHQuZ2V0T3BlcmF0aW9uU2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BlcmF0aW9uPXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUob3BlcmF0aW9uT2JqLGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgZW50aXR5Lm9wZXJhdGlvbnMucHVzaChvcGVyYXRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFsbFN0cnVjdHVyZVR5cGVzOkFycmF5PFN0cnVjdHVyZWRUeXBlPj1SZWZlclJlcGxhY2VVdGlsLmdldEFsbFN0cnVjdHVyZWRUeXBlcyhlbnRpdHkpO1xyXG4gICAgICAgIFJlZmVyUmVwbGFjZVV0aWwucmVwbGFjZU9wZXJhdGlvblJlZmVyKGFsbFN0cnVjdHVyZVR5cGVzLGVudGl0eS5vcGVyYXRpb25zKTtcclxuICAgIH1cclxufSJdfQ==