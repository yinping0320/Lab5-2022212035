/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PropertyConvertor } from '../property/property-convertor';
import { ExtensionConvertor } from '../extension/extension-convertor';
export class StructuredTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structure = (/** @type {?} */ (datatype));
        if (!structure) {
            return;
        }
        obj['kind'] = structure.kind;
        obj['id'] = structure.id;
        obj['code'] = structure.code;
        obj['name'] = structure.name;
        obj['description'] = structure.description;
        obj['properties'] = new Array();
        if (structure.properties) {
            /** @type {?} */
            let propertyConvertor = new PropertyConvertor();
            structure.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                var kind = property.kind;
                /** @type {?} */
                var serializer = ctxt.getPropertySerializerFactory().get(kind);
                /** @type {?} */
                var propertyObj = serializer.serialize(property, ctxt);
                obj['properties'].push(propertyObj);
            }));
        }
        if (structure.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(structure, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let structure = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        structure.kind = obj['kind'];
        structure.id = obj['id'];
        structure.name = obj['name'];
        structure.code = obj['code'];
        structure.description = obj['description'];
        if (obj['properties']) {
            structure.properties = new Array();
            /** @type {?} */
            let propertyConvertor = new PropertyConvertor();
            obj['properties'].forEach((/**
             * @param {?} propertyObj
             * @return {?}
             */
            propertyObj => {
                /** @type {?} */
                var propKind = propertyObj["kind"];
                /** @type {?} */
                var serializer = ctxt.getPropertySerializerFactory().get(propKind);
                /** @type {?} */
                var property = serializer.deserialize(propertyObj, ctxt);
                structure.properties.push(property);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(structure, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlZC10eXBlLWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUtY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQU9uRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RSxNQUFNLE9BQU8sdUJBQXVCOzs7Ozs7O0lBRWhDLGVBQWUsQ0FBQyxHQUFXLEVBQUUsUUFBbUIsRUFBRSxJQUF1Qjs7WUFDakUsU0FBUyxHQUFHLG1CQUFBLFFBQVEsRUFBa0I7UUFDMUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE9BQU87U0FDVjtRQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQ3hDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRTs7Z0JBQ2xCLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUU7WUFDL0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUMsUUFBUSxDQUFDLEVBQUU7O29CQUNoQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUk7O29CQUNwQixVQUFVLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzs7b0JBQzFELFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7Z0JBQ3RELEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRTs7Z0JBQ2pCLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNoRDtJQUNMLENBQUM7Ozs7Ozs7SUFFRCxjQUFjLENBQUMsUUFBbUIsRUFBRSxHQUFXLEVBQUUsSUFBdUI7O1lBQ2hFLFNBQVMsR0FBRyxtQkFBQSxRQUFRLEVBQWtCO1FBQzFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzQyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuQixTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksS0FBSyxFQUFZLENBQUM7O2dCQUN6QyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFO1lBQy9DLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsV0FBVyxDQUFDLEVBQUU7O29CQUNoQyxRQUFRLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQzs7b0JBQzlCLFVBQVUsR0FBRyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDOztvQkFDOUQsUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztnQkFDeEQsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFOztnQkFDZCxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL2RlZmluZS9wcm9wZXJ0eS9wcm9wZXJ0eSc7XHJcbmltcG9ydCB7IFByb3BlcnR5Q29udmVydG9yIH0gZnJvbSAnLi4vcHJvcGVydHkvcHJvcGVydHktY29udmVydG9yJztcclxuaW1wb3J0IHsgU3RydWN0dXJlZFR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3N0cnVjdHVyZWQtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUnO1xyXG5pbXBvcnQgeyBJRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL2ktZGF0YS10eXBlJztcclxuaW1wb3J0IHsgQ29tbW9uU3RydWN0dXJlQ29udmVydG9yIH0gZnJvbSAnLi4vc3RydWN0dXJlL2NvbW1vbi1zdHJ1Y3R1cmUtY29udmVydG9yJztcclxuaW1wb3J0IHsgQ29tbW9uU3RydWN0dXJlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL3N0cnVjdHVyZS9jb21tb24tc3RydWN0dXJlJztcclxuaW1wb3J0IHsgRGF0YVR5cGVDb252ZXJ0VXRpbCB9IGZyb20gJy4uL3V0aWxzL2RhdGEtdHlwZS1jb252ZXJ0LXV0aWwnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udmVydG9yIH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2V4dGVuc2lvbi1jb252ZXJ0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZWRUeXBlQ29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOiBPYmplY3QsIGRhdGF0eXBlOiBJRGF0YVR5cGUsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZSA9IGRhdGF0eXBlIGFzIFN0cnVjdHVyZWRUeXBlO1xyXG4gICAgICAgIGlmICghc3RydWN0dXJlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqWydraW5kJ10gPSBzdHJ1Y3R1cmUua2luZDtcclxuICAgICAgICBvYmpbJ2lkJ10gPSBzdHJ1Y3R1cmUuaWQ7XHJcbiAgICAgICAgb2JqWydjb2RlJ10gPSBzdHJ1Y3R1cmUuY29kZTtcclxuICAgICAgICBvYmpbJ25hbWUnXSA9IHN0cnVjdHVyZS5uYW1lO1xyXG4gICAgICAgIG9ialsnZGVzY3JpcHRpb24nXSA9IHN0cnVjdHVyZS5kZXNjcmlwdGlvbjtcclxuICAgICAgICBvYmpbJ3Byb3BlcnRpZXMnXSA9IG5ldyBBcnJheTxPYmplY3Q+KCk7XHJcbiAgICAgICAgaWYgKHN0cnVjdHVyZS5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUNvbnZlcnRvciA9IG5ldyBQcm9wZXJ0eUNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBzdHJ1Y3R1cmUucHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBraW5kID0gcHJvcGVydHkua2luZDtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gY3R4dC5nZXRQcm9wZXJ0eVNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5T2JqID0gc2VyaWFsaXplci5zZXJpYWxpemUocHJvcGVydHksIGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgb2JqWydwcm9wZXJ0aWVzJ10ucHVzaChwcm9wZXJ0eU9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0cnVjdHVyZS5leHRlbnNpb24pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvSk9iaihzdHJ1Y3R1cmUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGRhdGFUeXBlOiBJRGF0YVR5cGUsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzdHJ1Y3R1cmUgPSBkYXRhVHlwZSBhcyBTdHJ1Y3R1cmVkVHlwZTtcclxuICAgICAgICBpZiAoIW9iaikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0cnVjdHVyZS5raW5kID0gb2JqWydraW5kJ107XHJcbiAgICAgICAgc3RydWN0dXJlLmlkID0gb2JqWydpZCddO1xyXG4gICAgICAgIHN0cnVjdHVyZS5uYW1lID0gb2JqWyduYW1lJ107XHJcbiAgICAgICAgc3RydWN0dXJlLmNvZGUgPSBvYmpbJ2NvZGUnXTtcclxuICAgICAgICBzdHJ1Y3R1cmUuZGVzY3JpcHRpb24gPSBvYmpbJ2Rlc2NyaXB0aW9uJ107XHJcblxyXG4gICAgICAgIGlmIChvYmpbJ3Byb3BlcnRpZXMnXSkge1xyXG4gICAgICAgICAgICBzdHJ1Y3R1cmUucHJvcGVydGllcyA9IG5ldyBBcnJheTxQcm9wZXJ0eT4oKTtcclxuICAgICAgICAgICAgbGV0IHByb3BlcnR5Q29udmVydG9yID0gbmV3IFByb3BlcnR5Q29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIG9ialsncHJvcGVydGllcyddLmZvckVhY2gocHJvcGVydHlPYmogPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3BLaW5kID0gcHJvcGVydHlPYmpbXCJraW5kXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXIgPSBjdHh0LmdldFByb3BlcnR5U2VyaWFsaXplckZhY3RvcnkoKS5nZXQocHJvcEtpbmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShwcm9wZXJ0eU9iaiwgY3R4dCk7XHJcbiAgICAgICAgICAgICAgICBzdHJ1Y3R1cmUucHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob2JqW1wiZXh0ZW5zaW9uXCJdKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihzdHJ1Y3R1cmUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19