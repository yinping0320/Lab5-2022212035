/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
export class MapTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        let maptype = (/** @type {?} */ (datatype));
        obj['kind'] = maptype.kind;
        obj['keyType'] = null;
        if (maptype.keyType) {
            /** @type {?} */
            let kind = maptype.keyType.getKind();
            if (!kind) {
                throw new Error('Map类型序列化时KeyType的TypeKind为空！');
            }
            obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);
        }
        obj['valueType'] = null;
        if (maptype.valueType) {
            /** @type {?} */
            let kind = maptype.valueType.getKind();
            if (!kind) {
                throw new Error('Map类型序列化时ValueType的TypeKind为空！');
            }
            obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);
        }
        if (maptype.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(maptype, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let maptype = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        maptype.kind = obj['kind'];
        if (obj['keyType']) {
            /** @type {?} */
            let kind = obj['keyType']['kind'];
            if (!kind) {
                throw new Error('解析MapType的KeyType属性时数据类型的TypeKind为空！');
            }
            maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);
        }
        if (obj['valueType']) {
            /** @type {?} */
            let kind = obj['valueType']['kind'];
            if (!kind) {
                throw new Error('解析MapType的ValueType属性时数据类型的TypeKind为空！');
            }
            maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(maptype, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL21hcC10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEUsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7OztJQUV6QixlQUFlLENBQUMsR0FBVyxFQUFFLFFBQW1CLEVBQUUsSUFBdUI7UUFDckUsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE9BQU87U0FDVjs7WUFFRyxPQUFPLEdBQUcsbUJBQUEsUUFBUSxFQUFXO1FBQ2pDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFOztnQkFDYixJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7YUFDbkQ7WUFDRCxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDL0U7UUFFRCxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTs7Z0JBQ2YsSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO2FBQ3JEO1lBQ0QsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ25GO1FBRUQsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFOztnQkFDZixrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDOUM7SUFDTCxDQUFDOzs7Ozs7O0lBRUQsY0FBYyxDQUFDLFFBQW1CLEVBQUUsR0FBVyxFQUFFLElBQXVCOztZQUNoRSxPQUFPLEdBQUcsbUJBQUEsUUFBUSxFQUFXO1FBQ2pDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUzQixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTs7Z0JBQ1osSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDakMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7YUFDM0Q7WUFDRCxPQUFPLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUU7UUFFRCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTs7Z0JBQ2QsSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDbkMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7YUFDN0Q7WUFDRCxPQUFPLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbEY7UUFFRCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTs7Z0JBQ2Qsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQzdDO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFwVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvbWFwLXR5cGUvbWFwLXR5cGUnO1xyXG5pbXBvcnQgeyBEYXRhVHlwZUNvbnZlcnRVdGlsIH0gZnJvbSAnLi4vdXRpbHMvZGF0YS10eXBlLWNvbnZlcnQtdXRpbCc7XHJcbmltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udmVydG9yIH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2V4dGVuc2lvbi1jb252ZXJ0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1hcFR5cGVDb252ZXJ0b3Ige1xyXG5cclxuICAgIGNvbnZlcnRUb09iamVjdChvYmo6IE9iamVjdCwgZGF0YXR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWRhdGF0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtYXB0eXBlID0gZGF0YXR5cGUgYXMgTWFwVHlwZTtcclxuICAgICAgICBvYmpbJ2tpbmQnXSA9IG1hcHR5cGUua2luZDtcclxuICAgICAgICBvYmpbJ2tleVR5cGUnXSA9IG51bGw7XHJcbiAgICAgICAgaWYgKG1hcHR5cGUua2V5VHlwZSkge1xyXG4gICAgICAgICAgICBsZXQga2luZCA9IG1hcHR5cGUua2V5VHlwZS5nZXRLaW5kKCk7XHJcbiAgICAgICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXDnsbvlnovluo/liJfljJbml7ZLZXlUeXBl55qEVHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmpbJ2tleVR5cGUnXSA9IERhdGFUeXBlQ29udmVydFV0aWwuY29udmVydFRvT2JqZWN0KG1hcHR5cGUua2V5VHlwZSwgY3R4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvYmpbJ3ZhbHVlVHlwZSddID0gbnVsbDtcclxuICAgICAgICBpZiAobWFwdHlwZS52YWx1ZVR5cGUpIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBtYXB0eXBlLnZhbHVlVHlwZS5nZXRLaW5kKCk7XHJcbiAgICAgICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXDnsbvlnovluo/liJfljJbml7ZWYWx1ZVR5cGXnmoRUeXBlS2luZOS4uuepuu+8gScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialsndmFsdWVUeXBlJ10gPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmNvbnZlcnRUb09iamVjdChtYXB0eXBlLnZhbHVlVHlwZSwgY3R4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobWFwdHlwZS5leHRlbnNpb24pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvSk9iaihtYXB0eXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0RnJvbU9iamVjdChkYXRhVHlwZTogSURhdGFUeXBlLCBvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgbWFwdHlwZSA9IGRhdGFUeXBlIGFzIE1hcFR5cGU7XHJcbiAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYXB0eXBlLmtpbmQgPSBvYmpbJ2tpbmQnXTtcclxuXHJcbiAgICAgICAgaWYgKG9ialsna2V5VHlwZSddKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gb2JqWydrZXlUeXBlJ11bJ2tpbmQnXTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ino+aekE1hcFR5cGXnmoRLZXlUeXBl5bGe5oCn5pe25pWw5o2u57G75Z6L55qEVHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXB0eXBlLmtleVR5cGUgPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmluaXRGcm9tT2JqZWN0KG9ialsna2V5VHlwZSddLCBjdHh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmpbJ3ZhbHVlVHlwZSddKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gb2JqWyd2YWx1ZVR5cGUnXVsna2luZCddO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6QTWFwVHlwZeeahFZhbHVlVHlwZeWxnuaAp+aXtuaVsOaNruexu+Wei+eahFR5cGVLaW5k5Li656m677yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWFwdHlwZS52YWx1ZVR5cGUgPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmluaXRGcm9tT2JqZWN0KG9ialsndmFsdWVUeXBlJ10sIGN0eHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9ialtcImV4dGVuc2lvblwiXSkge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9PYmoobWFwdHlwZSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=