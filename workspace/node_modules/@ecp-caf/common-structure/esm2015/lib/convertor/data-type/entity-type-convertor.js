/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredTypeConvertor } from './structured-type-convertor';
import { ExtensionConvertor } from '../extension/extension-convertor';
export class EntityTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        /** @type {?} */
        let result = structuredConvertor.convertToObject(obj, datatype, ctxt);
        result['primaryKeys'] = new Array();
        /** @type {?} */
        let entityType = (/** @type {?} */ (datatype));
        if (entityType.primaryKeys) {
            entityType.primaryKeys.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                result['primaryKeys'].push(element);
            }));
        }
        if (entityType.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(entityType, obj);
        }
        return result;
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let entityType = (/** @type {?} */ (dataType));
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
        if (obj['primaryKey']) {
            entityType.primaryKeys = new Array();
            obj['primaryKey'].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                entityType.primaryKeys.push(element);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(entityType, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL2VudGl0eS10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEUsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7OztJQUU1QixlQUFlLENBQUMsR0FBVyxFQUFFLFFBQW1CLEVBQUUsSUFBdUI7O1lBQ2pFLG1CQUFtQixHQUE0QixJQUFJLHVCQUF1QixFQUFFOztZQUM1RSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDO1FBQ3JFLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDOztZQUN4QyxVQUFVLEdBQUcsbUJBQUEsUUFBUSxFQUFjO1FBQ3ZDLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUN4QixVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDckMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4QyxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFOztnQkFDbEIsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxRQUFtQixFQUFFLEdBQVcsRUFBRSxJQUF1Qjs7WUFDaEUsVUFBVSxHQUFHLG1CQUFBLFFBQVEsRUFBYzs7WUFDbkMsbUJBQW1CLEdBQTRCLElBQUksdUJBQXVCLEVBQUU7UUFDaEYsbUJBQW1CLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbkIsVUFBVSxDQUFDLFdBQVcsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1lBQzdDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2hDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFFRCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTs7Z0JBQ2Qsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yIH0gZnJvbSAnLi9zdHJ1Y3R1cmVkLXR5cGUtY29udmVydG9yJztcclxuaW1wb3J0IHsgRW50aXR5VHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL2VudGl0eS10eXBlL2VudGl0eS10eXBlJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkNvbnZlcnRvciB9IGZyb20gJy4uL2V4dGVuc2lvbi9leHRlbnNpb24tY29udmVydG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlUeXBlQ29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOiBPYmplY3QsIGRhdGF0eXBlOiBJRGF0YVR5cGUsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZWRDb252ZXJ0b3I6IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN0cnVjdHVyZWRDb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KG9iaiwgZGF0YXR5cGUsIGN0eHQpO1xyXG4gICAgICAgIHJlc3VsdFsncHJpbWFyeUtleXMnXSA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGUgPSBkYXRhdHlwZSBhcyBFbnRpdHlUeXBlO1xyXG4gICAgICAgIGlmIChlbnRpdHlUeXBlLnByaW1hcnlLZXlzKSB7XHJcbiAgICAgICAgICAgIGVudGl0eVR5cGUucHJpbWFyeUtleXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFsncHJpbWFyeUtleXMnXS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbnRpdHlUeXBlLmV4dGVuc2lvbikge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9KT2JqKGVudGl0eVR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3QoZGF0YVR5cGU6IElEYXRhVHlwZSwgb2JqOiBPYmplY3QsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGUgPSBkYXRhVHlwZSBhcyBFbnRpdHlUeXBlO1xyXG4gICAgICAgIGxldCBzdHJ1Y3R1cmVkQ29udmVydG9yOiBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIHN0cnVjdHVyZWRDb252ZXJ0b3IuaW5pdEZyb21PYmplY3QoZGF0YVR5cGUsIG9iaiwgY3R4dCk7XHJcbiAgICAgICAgaWYgKG9ialsncHJpbWFyeUtleSddKSB7XHJcbiAgICAgICAgICAgIGVudGl0eVR5cGUucHJpbWFyeUtleXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xyXG4gICAgICAgICAgICBvYmpbJ3ByaW1hcnlLZXknXS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW50aXR5VHlwZS5wcmltYXJ5S2V5cy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmpbXCJleHRlbnNpb25cIl0pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvT2JqKGVudGl0eVR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19