/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredTypeConvertor } from './structured-type-convertor';
import { EnumerationItemConvertor } from './enumeration-item-convertor';
import { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';
import { ExtensionConvertor } from '../extension/extension-convertor';
export class EnumerationTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.convertToObject(obj, datatype, ctxt);
        /** @type {?} */
        let enumerationType = (/** @type {?} */ (datatype));
        //enum items
        obj['enumerationItems'] = new Array();
        if (enumerationType.enumerationItems) {
            /** @type {?} */
            let convertor = new EnumerationItemConvertor();
            enumerationType.enumerationItems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let itemObj = new Object();
                convertor.convertToObject(itemObj, item);
                obj['enumerationItems'].push(itemObj);
            }));
        }
        if (enumerationType.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(enumerationType, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
        //enum items
        /** @type {?} */
        let enumerationType = (/** @type {?} */ (dataType));
        if (obj['enumerationItems']) {
            enumerationType.enumerationItems = new Array();
            /** @type {?} */
            let convertor = new EnumerationItemConvertor();
            obj['enumerationItems'].forEach((/**
             * @param {?} itemObj
             * @return {?}
             */
            itemObj => {
                /** @type {?} */
                let item = new EnumerationItem();
                convertor.initFromObject(item, itemObj);
                enumerationType.enumerationItems.push(item);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(enumerationType, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bWVyYXRpb24tdHlwZS1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9kYXRhLXR5cGUvZW51bWVyYXRpb24tdHlwZS1jb252ZXJ0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSXRFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUMzRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RSxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7O0lBRWpDLGVBQWUsQ0FBQyxHQUFXLEVBQUUsUUFBbUIsRUFBRSxJQUF1Qjs7WUFDakUsbUJBQW1CLEdBQTRCLElBQUksdUJBQXVCLEVBQUU7UUFDaEYsbUJBQW1CLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7O1lBQ3JELGVBQWUsR0FBRyxtQkFBQSxRQUFRLEVBQW1CO1FBQ2pELFlBQVk7UUFDWixHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQzlDLElBQUksZUFBZSxDQUFDLGdCQUFnQixFQUFFOztnQkFDOUIsU0FBUyxHQUE2QixJQUFJLHdCQUF3QixFQUFFO1lBQ3hFLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUU7O29CQUN4QyxPQUFPLEdBQUcsSUFBSSxNQUFNLEVBQUU7Z0JBQzFCLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN6QyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUdELElBQUksZUFBZSxDQUFDLFNBQVMsRUFBRTs7Z0JBQ3ZCLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN0RDtJQUVMLENBQUM7Ozs7Ozs7SUFFRCxjQUFjLENBQUMsUUFBbUIsRUFBRSxHQUFXLEVBQUUsSUFBdUI7O1lBQ2hFLG1CQUFtQixHQUE0QixJQUFJLHVCQUF1QixFQUFFO1FBQ2hGLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDOzs7WUFFcEQsZUFBZSxHQUFHLG1CQUFBLFFBQVEsRUFBbUI7UUFDakQsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUN6QixlQUFlLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxLQUFLLEVBQW1CLENBQUM7O2dCQUM1RCxTQUFTLEdBQTZCLElBQUksd0JBQXdCLEVBQUU7WUFDeEUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFOztvQkFDbEMsSUFBSSxHQUFvQixJQUFJLGVBQWUsRUFBRTtnQkFDakQsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFOztnQkFDZCxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL2ktZGF0YS10eXBlJztcclxuaW1wb3J0IHsgU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IgfSBmcm9tICcuL3N0cnVjdHVyZWQtdHlwZS1jb252ZXJ0b3InO1xyXG5pbXBvcnQgeyBFbnRpdHlUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvZW50aXR5LXR5cGUvZW50aXR5LXR5cGUnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgRW51bWVyYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvZW51bWVyYXRpb24tdHlwZS9lbnVtZXJhdGlvbi10eXBlJztcclxuaW1wb3J0IHsgRW51bWVyYXRpb25JdGVtQ29udmVydG9yIH0gZnJvbSAnLi9lbnVtZXJhdGlvbi1pdGVtLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IEVudW1lcmF0aW9uSXRlbSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL2VudW1lcmF0aW9uLXR5cGUvZW51bWVyYXRpb24taXRlbSc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkNvbnZlcnRvciB9IGZyb20gJy4uL2V4dGVuc2lvbi9leHRlbnNpb24tY29udmVydG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFbnVtZXJhdGlvblR5cGVDb252ZXJ0b3Ige1xyXG5cclxuICAgIGNvbnZlcnRUb09iamVjdChvYmo6IE9iamVjdCwgZGF0YXR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgc3RydWN0dXJlZENvbnZlcnRvcjogU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IgPSBuZXcgU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICBzdHJ1Y3R1cmVkQ29udmVydG9yLmNvbnZlcnRUb09iamVjdChvYmosIGRhdGF0eXBlLCBjdHh0KTtcclxuICAgICAgICBsZXQgZW51bWVyYXRpb25UeXBlID0gZGF0YXR5cGUgYXMgRW51bWVyYXRpb25UeXBlO1xyXG4gICAgICAgIC8vZW51bSBpdGVtc1xyXG4gICAgICAgIG9ialsnZW51bWVyYXRpb25JdGVtcyddID0gbmV3IEFycmF5PE9iamVjdD4oKTtcclxuICAgICAgICBpZiAoZW51bWVyYXRpb25UeXBlLmVudW1lcmF0aW9uSXRlbXMpIHtcclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRvcjogRW51bWVyYXRpb25JdGVtQ29udmVydG9yID0gbmV3IEVudW1lcmF0aW9uSXRlbUNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBlbnVtZXJhdGlvblR5cGUuZW51bWVyYXRpb25JdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1PYmogPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KGl0ZW1PYmosIGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgb2JqWydlbnVtZXJhdGlvbkl0ZW1zJ10ucHVzaChpdGVtT2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGVudW1lcmF0aW9uVHlwZS5leHRlbnNpb24pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvSk9iaihlbnVtZXJhdGlvblR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBpbml0RnJvbU9iamVjdChkYXRhVHlwZTogSURhdGFUeXBlLCBvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgc3RydWN0dXJlZENvbnZlcnRvcjogU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IgPSBuZXcgU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICBzdHJ1Y3R1cmVkQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KGRhdGFUeXBlLCBvYmosIGN0eHQpO1xyXG4gICAgICAgIC8vZW51bSBpdGVtc1xyXG4gICAgICAgIGxldCBlbnVtZXJhdGlvblR5cGUgPSBkYXRhVHlwZSBhcyBFbnVtZXJhdGlvblR5cGU7XHJcbiAgICAgICAgaWYgKG9ialsnZW51bWVyYXRpb25JdGVtcyddKSB7XHJcbiAgICAgICAgICAgIGVudW1lcmF0aW9uVHlwZS5lbnVtZXJhdGlvbkl0ZW1zID0gbmV3IEFycmF5PEVudW1lcmF0aW9uSXRlbT4oKTtcclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRvcjogRW51bWVyYXRpb25JdGVtQ29udmVydG9yID0gbmV3IEVudW1lcmF0aW9uSXRlbUNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBvYmpbJ2VudW1lcmF0aW9uSXRlbXMnXS5mb3JFYWNoKGl0ZW1PYmogPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IEVudW1lcmF0aW9uSXRlbSA9IG5ldyBFbnVtZXJhdGlvbkl0ZW0oKTtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRvci5pbml0RnJvbU9iamVjdChpdGVtLCBpdGVtT2JqKTtcclxuICAgICAgICAgICAgICAgIGVudW1lcmF0aW9uVHlwZS5lbnVtZXJhdGlvbkl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9ialtcImV4dGVuc2lvblwiXSkge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9PYmooZW51bWVyYXRpb25UeXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==