/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExtensionConvertor } from '../extension/extension-convertor';
export class PrimitiveTypeConvertor {
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        let primitivetype = (/** @type {?} */ (datatype));
        obj['kind'] = primitivetype.kind;
        //这是number
        /** @type {?} */
        let primitiveTypeKindNum = primitivetype.primitiveTypeKind;
        obj['primitiveTypeKind'] = primitiveTypeKindNum;
        if (primitivetype.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(primitivetype, obj);
        }
    }
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(dataType, obj, ctxt) {
        /** @type {?} */
        let primitivetype = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        primitivetype.kind = obj['kind'];
        primitivetype.primitiveTypeKind = (/** @type {?} */ (obj['primitiveTypeKind']));
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(primitivetype, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL3ByaW1pdGl2ZS10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEUsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7OztJQUUvQixlQUFlLENBQUMsR0FBVyxFQUFFLFFBQW1CLEVBQUUsSUFBdUI7UUFDckUsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE9BQU87U0FDVjs7WUFDRyxhQUFhLEdBQUcsbUJBQUEsUUFBUSxFQUFpQjtRQUM3QyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQzs7O1lBRTdCLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxpQkFBaUI7UUFDMUQsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsb0JBQW9CLENBQUM7UUFFaEQsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFOztnQkFDckIsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3BEO0lBRUwsQ0FBQzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxRQUFtQixFQUFFLEdBQVcsRUFBRSxJQUF1Qjs7WUFDaEUsYUFBYSxHQUFHLG1CQUFBLFFBQVEsRUFBaUI7UUFDN0MsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU87U0FDVjtRQUNELGFBQWEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLGFBQWEsQ0FBQyxpQkFBaUIsR0FBRyxtQkFBQSxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBVSxDQUFDO1FBQ3JFLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFOztnQkFDZCxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmltaXRpdmVUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9wcmltaXRpdmUtdHlwZS9wcmltaXRpdmUtdHlwZSc7XHJcbmltcG9ydCB7IFByaW1pdGl2ZVR5cGVLaW5kIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9wcmltaXRpdmUtdHlwZS9wcmltaXRpdmUtdHlwZS1raW5kJztcclxuaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJpbWl0aXZlVHlwZUNvbnZlcnRvciB7XHJcblxyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogT2JqZWN0LCBkYXRhdHlwZTogSURhdGFUeXBlLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghZGF0YXR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcHJpbWl0aXZldHlwZSA9IGRhdGF0eXBlIGFzIFByaW1pdGl2ZVR5cGU7XHJcbiAgICAgICAgb2JqWydraW5kJ10gPSBwcmltaXRpdmV0eXBlLmtpbmQ7XHJcbiAgICAgICAgLy/ov5nmmK9udW1iZXJcclxuICAgICAgICBsZXQgcHJpbWl0aXZlVHlwZUtpbmROdW0gPSBwcmltaXRpdmV0eXBlLnByaW1pdGl2ZVR5cGVLaW5kO1xyXG4gICAgICAgIG9ialsncHJpbWl0aXZlVHlwZUtpbmQnXSA9IHByaW1pdGl2ZVR5cGVLaW5kTnVtO1xyXG5cclxuICAgICAgICBpZiAocHJpbWl0aXZldHlwZS5leHRlbnNpb24pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvSk9iaihwcmltaXRpdmV0eXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBpbml0RnJvbU9iamVjdChkYXRhVHlwZTogSURhdGFUeXBlLCBvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgcHJpbWl0aXZldHlwZSA9IGRhdGFUeXBlIGFzIFByaW1pdGl2ZVR5cGU7XHJcbiAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcmltaXRpdmV0eXBlLmtpbmQgPSBvYmpbJ2tpbmQnXTtcclxuICAgICAgICBwcmltaXRpdmV0eXBlLnByaW1pdGl2ZVR5cGVLaW5kID0gb2JqWydwcmltaXRpdmVUeXBlS2luZCddIGFzIG51bWJlcjtcclxuICAgICAgICBpZiAob2JqW1wiZXh0ZW5zaW9uXCJdKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihwcmltaXRpdmV0eXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==