/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';
import { StructuredType } from '../../define/data-type/structured-type/structured-type';
export class DataTypeConvertUtil {
    /**
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    static convertToObject(datatype, ctxt) {
        /** @type {?} */
        let result = new Object();
        if (datatype instanceof StructuredType) {
            result['kind'] = "RefStructuredType";
            result["isRefer"] = true;
            result["refId"] = datatype.id;
        }
        else {
            /** @type {?} */
            var kind = datatype.getKind();
            result["kind"] = kind;
            /** @type {?} */
            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
            result = serializer.serialize(datatype, ctxt);
        }
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    static initFromObject(obj, ctxt) {
        /** @type {?} */
        let result;
        if (obj['isRefer'] != null) {
            result = new StructuredReferType();
            ((/** @type {?} */ (result))).refId = obj['refId'];
        }
        else {
            /** @type {?} */
            var kind = obj["kind"];
            /** @type {?} */
            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
            result = serializer.deserialize(obj, ctxt);
        }
        return result;
        // switch (obj["kind"]) {
        //     case DataTypeConst.DEFAULT_PRIMITIVE:
        //         let primitiveKindConvertor = new PrimitiveTypeConvertor();
        //         return primitiveKindConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_COLLECTION:
        //         let collectionConvertor = new CollectionTypeConvertor();
        //         return collectionConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_MAP:
        //         let mapConvertor = new MapTypeConvertor();
        //         return mapConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_STRUCTURED:
        //         let structureConvertor = new StructuredTypeConvertor();
        //         return structureConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_ENTITY:
        //         let entityConvertor = new StructuredTypeConvertor();
        //         return entityConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_VALUE_OBJECT:
        //         let voConvertor = new StructuredTypeConvertor();
        //         return voConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
        //         let dtoConvertor = new StructuredTypeConvertor();
        //         return dtoConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_ENUMERATION:
        //         let enumerationConvertor = new StructuredTypeConvertor();
        //         return enumerationConvertor.initFromObject(obj);
        //     case DataTypeConst.STRUCTURED_REF:
        //         let structureRefConvertor = new StructuredTypeReferConvertor();
        //         return structureRefConvertor.initFromObject(obj);
        //     default:
        //         throw new Error(`数据类型不支持的${obj["kind"]}类型！`);
        // }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10eXBlLWNvbnZlcnQtdXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL3V0aWxzL2RhdGEtdHlwZS1jb252ZXJ0LXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlFQUF5RSxDQUFDO0FBRTlHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUV4RixNQUFNLE9BQU8sbUJBQW1COzs7Ozs7SUFFNUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFtQixFQUFFLElBQXVCOztZQUMzRCxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDekIsSUFBSSxRQUFRLFlBQVksY0FBYyxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxtQkFBbUIsQ0FBQztZQUNyQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1NBQ2pDO2FBQ0k7O2dCQUNHLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7O2dCQUNsQixVQUFVLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUM5RCxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQVcsRUFBRSxJQUF1Qjs7WUFDbEQsTUFBaUI7UUFDckIsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3hCLE1BQU0sR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7WUFDbkMsQ0FBQyxtQkFBQSxNQUFNLEVBQXVCLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hEO2FBQ0k7O2dCQUNHLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDOztnQkFDbEIsVUFBVSxHQUFHLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDOUQsTUFBTSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsT0FBTyxNQUFNLENBQUM7UUFDZCx5QkFBeUI7UUFDekIsNENBQTRDO1FBQzVDLHFFQUFxRTtRQUNyRSw2REFBNkQ7UUFDN0QsNkNBQTZDO1FBQzdDLG1FQUFtRTtRQUNuRSwwREFBMEQ7UUFDMUQsc0NBQXNDO1FBQ3RDLHFEQUFxRDtRQUNyRCxtREFBbUQ7UUFDbkQsNkNBQTZDO1FBQzdDLGtFQUFrRTtRQUNsRSx5REFBeUQ7UUFDekQseUNBQXlDO1FBQ3pDLCtEQUErRDtRQUMvRCxzREFBc0Q7UUFDdEQsK0NBQStDO1FBQy9DLDJEQUEyRDtRQUMzRCxrREFBa0Q7UUFDbEQsdURBQXVEO1FBQ3ZELDREQUE0RDtRQUM1RCxtREFBbUQ7UUFDbkQsOENBQThDO1FBQzlDLG9FQUFvRTtRQUNwRSwyREFBMkQ7UUFDM0QseUNBQXlDO1FBQ3pDLDBFQUEwRTtRQUMxRSw0REFBNEQ7UUFDNUQsZUFBZTtRQUNmLHdEQUF3RDtRQUN4RCxJQUFJO0lBQ1IsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IFN0cnVjdHVyZWRSZWZlclR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3N0cnVjdHVyZWQtdHlwZS1yZWZlci10eXBlL3N0cnVjdHVyZWQtcmVmZXItdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL3N0cnVjdHVyZWQtdHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YVR5cGVDb252ZXJ0VXRpbCB7XHJcblxyXG4gICAgc3RhdGljIGNvbnZlcnRUb09iamVjdChkYXRhdHlwZTogSURhdGFUeXBlLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IE9iamVjdCB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBPYmplY3QoKTtcclxuICAgICAgICBpZiAoZGF0YXR5cGUgaW5zdGFuY2VvZiBTdHJ1Y3R1cmVkVHlwZSkge1xyXG4gICAgICAgICAgICByZXN1bHRbJ2tpbmQnXSA9IFwiUmVmU3RydWN0dXJlZFR5cGVcIjtcclxuICAgICAgICAgICAgcmVzdWx0W1wiaXNSZWZlclwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJlc3VsdFtcInJlZklkXCJdID0gZGF0YXR5cGUuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIga2luZCA9IGRhdGF0eXBlLmdldEtpbmQoKTtcclxuICAgICAgICAgICAgcmVzdWx0W1wia2luZFwiXSA9IGtpbmQ7XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gY3R4dC5nZXREYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyLnNlcmlhbGl6ZShkYXRhdHlwZSwgY3R4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGluaXRGcm9tT2JqZWN0KG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IElEYXRhVHlwZSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogSURhdGFUeXBlO1xyXG4gICAgICAgIGlmIChvYmpbJ2lzUmVmZXInXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBTdHJ1Y3R1cmVkUmVmZXJUeXBlKCk7XHJcbiAgICAgICAgICAgIChyZXN1bHQgYXMgU3RydWN0dXJlZFJlZmVyVHlwZSkucmVmSWQgPSBvYmpbJ3JlZklkJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIga2luZCA9IG9ialtcImtpbmRcIl07XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gY3R4dC5nZXREYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKG9iaiwgY3R4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgLy8gc3dpdGNoIChvYmpbXCJraW5kXCJdKSB7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX1BSSU1JVElWRTpcclxuICAgICAgICAvLyAgICAgICAgIGxldCBwcmltaXRpdmVLaW5kQ29udmVydG9yID0gbmV3IFByaW1pdGl2ZVR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBwcmltaXRpdmVLaW5kQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX0NPTExFQ1RJT046XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgY29sbGVjdGlvbkNvbnZlcnRvciA9IG5ldyBDb2xsZWN0aW9uVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25Db252ZXJ0b3IuaW5pdEZyb21PYmplY3Qob2JqKTtcclxuICAgICAgICAvLyAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LkRFRkFVTFRfTUFQOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IG1hcENvbnZlcnRvciA9IG5ldyBNYXBUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gbWFwQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX1NUUlVDVFVSRUQ6XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgc3RydWN0dXJlQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gc3RydWN0dXJlQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX0VOVElUWTpcclxuICAgICAgICAvLyAgICAgICAgIGxldCBlbnRpdHlDb252ZXJ0b3IgPSBuZXcgU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBlbnRpdHlDb252ZXJ0b3IuaW5pdEZyb21PYmplY3Qob2JqKTtcclxuICAgICAgICAvLyAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LkRFRkFVTFRfVkFMVUVfT0JKRUNUOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHZvQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdm9Db252ZXJ0b3IuaW5pdEZyb21PYmplY3Qob2JqKTtcclxuICAgICAgICAvLyAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LkRFRkFVTFRfREFUQV9UUkFOU0ZFUl9PQkpFQ1Q6XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgZHRvQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gZHRvQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX0VOVU1FUkFUSU9OOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGVudW1lcmF0aW9uQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gZW51bWVyYXRpb25Db252ZXJ0b3IuaW5pdEZyb21PYmplY3Qob2JqKTtcclxuICAgICAgICAvLyAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LlNUUlVDVFVSRURfUkVGOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHN0cnVjdHVyZVJlZkNvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZVJlZmVyQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gc3RydWN0dXJlUmVmQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgLy8gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOaVsOaNruexu+Wei+S4jeaUr+aMgeeahCR7b2JqW1wia2luZFwiXX3nsbvlnovvvIFgKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcbn0iXX0=