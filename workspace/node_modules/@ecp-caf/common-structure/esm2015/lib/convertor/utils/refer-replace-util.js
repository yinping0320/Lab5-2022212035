/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';
export class ReferReplaceUtil {
    /**
     * @param {?} allStructureTypes
     * @param {?} operations
     * @return {?}
     */
    static replaceOperationRefer(allStructureTypes, operations) {
        if (operations != null) {
            operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            op => {
                /** @type {?} */
                let retType = op.returnType;
                if (retType != null && retType instanceof StructuredReferType) {
                    /** @type {?} */
                    let structureTypeId = ((/** @type {?} */ (retType))).refId;
                    /** @type {?} */
                    let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);
                    op.returnType = queryStructureType;
                }
                if (op.parameters != null) {
                    op.parameters.forEach((/**
                     * @param {?} parameter
                     * @return {?}
                     */
                    parameter => {
                        /** @type {?} */
                        let parameterType = parameter.parameterType;
                        if (parameterType instanceof StructuredReferType) {
                            /** @type {?} */
                            let structureTypeId = ((/** @type {?} */ (parameterType))).refId;
                            /** @type {?} */
                            let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);
                            parameter.parameterType = queryStructureType;
                        }
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} structure
     * @return {?}
     */
    static replacePropertyRefer(structure) {
        /** @type {?} */
        let allStructures = this.getAllStructuredTypes(structure);
        if (structure.structuredTypes != null) {
            structure.structuredTypes.forEach((/**
             * @param {?} structureType
             * @return {?}
             */
            structureType => {
                if (structureType.properties != null) {
                    structureType.properties.forEach((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    prop => {
                        if (prop.propertyType instanceof StructuredReferType) {
                            /** @type {?} */
                            let structureTypeId = ((/** @type {?} */ (prop.propertyType))).refId;
                            /** @type {?} */
                            let queryStructureType = this.getRefStructureType(allStructures, structureTypeId);
                            prop.propertyType = queryStructureType;
                        }
                    }));
                }
            }));
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            refStructure => {
                this.replacePropertyRefer(refStructure);
            }));
        }
    }
    /**
     * @param {?} allStructures
     * @param {?} structureId
     * @return {?}
     */
    static getRefStructureType(allStructures, structureId) {
        /** @type {?} */
        let queryStructureType = allStructures.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id == structureId));
        return queryStructureType;
    }
    /**
     * @param {?} structure
     * @return {?}
     */
    static getAllStructuredTypes(structure) {
        /** @type {?} */
        let array = new Array();
        if (structure.structuredTypes != null) {
            array = array.concat(structure.structuredTypes);
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            refStructure => {
                if (refStructure.structuredTypes != null) {
                    array = array.concat(refStructure.structuredTypes);
                }
            }));
        }
        return array;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXItcmVwbGFjZS11dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvdXRpbHMvcmVmZXItcmVwbGFjZS11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5RUFBeUUsQ0FBQztBQUs5RyxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7SUFDekIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLGlCQUFtQyxFQUFFLFVBQXVCO1FBQ3JGLElBQUksVUFBVSxJQUFJLElBQUksRUFBRTtZQUNwQixVQUFVLENBQUMsT0FBTzs7OztZQUFDLEVBQUUsQ0FBQyxFQUFFOztvQkFDaEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFVO2dCQUMzQixJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksT0FBTyxZQUFZLG1CQUFtQixFQUFFOzt3QkFDdkQsZUFBZSxHQUFXLENBQUMsbUJBQUEsT0FBTyxFQUF1QixDQUFDLENBQUMsS0FBSzs7d0JBQ2hFLGtCQUFrQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRSxlQUFlLENBQUM7b0JBQ3JGLEVBQUUsQ0FBQyxVQUFVLEdBQUcsa0JBQWtCLENBQUM7aUJBQ3RDO2dCQUNELElBQUksRUFBRSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7b0JBQ3ZCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTzs7OztvQkFBQyxTQUFTLENBQUMsRUFBRTs7NEJBQzFCLGFBQWEsR0FBRyxTQUFTLENBQUMsYUFBYTt3QkFDM0MsSUFBSSxhQUFhLFlBQVksbUJBQW1CLEVBQUU7O2dDQUMxQyxlQUFlLEdBQVcsQ0FBQyxtQkFBQSxhQUFhLEVBQXVCLENBQUMsQ0FBQyxLQUFLOztnQ0FDdEUsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQzs0QkFDckYsU0FBUyxDQUFDLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQzt5QkFDaEQ7b0JBQ0wsQ0FBQyxFQUFDLENBQUE7aUJBQ0w7WUFDTCxDQUFDLEVBQUMsQ0FBQTtTQUNMO0lBQ0wsQ0FBQzs7Ozs7SUFHRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsU0FBMEI7O1lBQzlDLGFBQWEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDO1FBQ3pELElBQUksU0FBUyxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7WUFDbkMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPOzs7O1lBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQzlDLElBQUksYUFBYSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7b0JBQ2xDLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTzs7OztvQkFBQyxJQUFJLENBQUMsRUFBRTt3QkFDcEMsSUFBSSxJQUFJLENBQUMsWUFBWSxZQUFZLG1CQUFtQixFQUFFOztnQ0FDOUMsZUFBZSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLFlBQVksRUFBdUIsQ0FBQyxDQUFDLEtBQUs7O2dDQUNsRSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQzs0QkFDakYsSUFBSSxDQUFDLFlBQVksR0FBRyxrQkFBa0IsQ0FBQzt5QkFDMUM7b0JBQ0wsQ0FBQyxFQUFDLENBQUE7aUJBQ0w7WUFDTCxDQUFDLEVBQUMsQ0FBQTtTQUNMO1FBQ0QsSUFBSSxTQUFTLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtZQUNqQyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU87Ozs7WUFBQyxZQUFZLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVDLENBQUMsRUFBQyxDQUFBO1NBQ0w7SUFDTCxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsYUFBK0IsRUFBRSxXQUFtQjs7WUFDdkUsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksV0FBVyxFQUFDO1FBQ3JFLE9BQU8sa0JBQWtCLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsU0FBMEI7O1lBQy9DLEtBQUssR0FBMEIsSUFBSSxLQUFLLEVBQWtCO1FBQzlELElBQUksU0FBUyxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7WUFDbkMsS0FBSyxHQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxTQUFTLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtZQUNqQyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU87Ozs7WUFBQyxZQUFZLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxZQUFZLENBQUMsZUFBZSxJQUFJLElBQUksRUFBRTtvQkFDdEMsS0FBSyxHQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUNwRDtZQUNMLENBQUMsRUFBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBSUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25TdHJ1Y3R1cmUgfSBmcm9tICcuLi8uLi9kZWZpbmUvc3RydWN0dXJlL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL3N0cnVjdHVyZWQtdHlwZSc7XHJcbmltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkUmVmZXJUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUtcmVmZXItdHlwZS9zdHJ1Y3R1cmVkLXJlZmVyLXR5cGUnO1xyXG5pbXBvcnQgeyBFbnRpdHlPYmplY3QgfSBmcm9tICcuLi8uLi9kZWZpbmUvc3RydWN0dXJlL2VudGl0eS1vYmplY3QnO1xyXG5pbXBvcnQgeyBPcGVyYXRpb24gfSBmcm9tICcuLi8uLi9kZWZpbmUvb3BlcmF0aW9uL29wZXJhdGlvbic7XHJcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9kYXRhLXR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlZmVyUmVwbGFjZVV0aWwge1xyXG4gICAgc3RhdGljIHJlcGxhY2VPcGVyYXRpb25SZWZlcihhbGxTdHJ1Y3R1cmVUeXBlczogU3RydWN0dXJlZFR5cGVbXSwgb3BlcmF0aW9uczogT3BlcmF0aW9uW10pIHtcclxuICAgICAgICBpZiAob3BlcmF0aW9ucyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbnMuZm9yRWFjaChvcCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmV0VHlwZSA9IG9wLnJldHVyblR5cGU7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0VHlwZSAhPSBudWxsICYmIHJldFR5cGUgaW5zdGFuY2VvZiBTdHJ1Y3R1cmVkUmVmZXJUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0cnVjdHVyZVR5cGVJZDogc3RyaW5nID0gKHJldFR5cGUgYXMgU3RydWN0dXJlZFJlZmVyVHlwZSkucmVmSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXJ5U3RydWN0dXJlVHlwZSA9IHRoaXMuZ2V0UmVmU3RydWN0dXJlVHlwZShhbGxTdHJ1Y3R1cmVUeXBlcywgc3RydWN0dXJlVHlwZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICBvcC5yZXR1cm5UeXBlID0gcXVlcnlTdHJ1Y3R1cmVUeXBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9wLnBhcmFtZXRlcnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wLnBhcmFtZXRlcnMuZm9yRWFjaChwYXJhbWV0ZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyVHlwZSA9IHBhcmFtZXRlci5wYXJhbWV0ZXJUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVyVHlwZSBpbnN0YW5jZW9mIFN0cnVjdHVyZWRSZWZlclR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHJ1Y3R1cmVUeXBlSWQ6IHN0cmluZyA9IChwYXJhbWV0ZXJUeXBlIGFzIFN0cnVjdHVyZWRSZWZlclR5cGUpLnJlZklkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXJ5U3RydWN0dXJlVHlwZSA9IHRoaXMuZ2V0UmVmU3RydWN0dXJlVHlwZShhbGxTdHJ1Y3R1cmVUeXBlcywgc3RydWN0dXJlVHlwZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlci5wYXJhbWV0ZXJUeXBlID0gcXVlcnlTdHJ1Y3R1cmVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyByZXBsYWNlUHJvcGVydHlSZWZlcihzdHJ1Y3R1cmU6IENvbW1vblN0cnVjdHVyZSkge1xyXG4gICAgICAgIGxldCBhbGxTdHJ1Y3R1cmVzID0gdGhpcy5nZXRBbGxTdHJ1Y3R1cmVkVHlwZXMoc3RydWN0dXJlKTtcclxuICAgICAgICBpZiAoc3RydWN0dXJlLnN0cnVjdHVyZWRUeXBlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZS5zdHJ1Y3R1cmVkVHlwZXMuZm9yRWFjaChzdHJ1Y3R1cmVUeXBlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdHJ1Y3R1cmVUeXBlLnByb3BlcnRpZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cnVjdHVyZVR5cGUucHJvcGVydGllcy5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcC5wcm9wZXJ0eVR5cGUgaW5zdGFuY2VvZiBTdHJ1Y3R1cmVkUmVmZXJUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RydWN0dXJlVHlwZUlkID0gKHByb3AucHJvcGVydHlUeXBlIGFzIFN0cnVjdHVyZWRSZWZlclR5cGUpLnJlZklkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXJ5U3RydWN0dXJlVHlwZSA9IHRoaXMuZ2V0UmVmU3RydWN0dXJlVHlwZShhbGxTdHJ1Y3R1cmVzLCBzdHJ1Y3R1cmVUeXBlSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcC5wcm9wZXJ0eVR5cGUgPSBxdWVyeVN0cnVjdHVyZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RydWN0dXJlLnJlZlN0cnVjdHVyZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzdHJ1Y3R1cmUucmVmU3RydWN0dXJlcy5mb3JFYWNoKHJlZlN0cnVjdHVyZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VQcm9wZXJ0eVJlZmVyKHJlZlN0cnVjdHVyZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRSZWZTdHJ1Y3R1cmVUeXBlKGFsbFN0cnVjdHVyZXM6IFN0cnVjdHVyZWRUeXBlW10sIHN0cnVjdHVyZUlkOiBzdHJpbmcpOiBTdHJ1Y3R1cmVkVHlwZSB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5U3RydWN0dXJlVHlwZSA9IGFsbFN0cnVjdHVyZXMuZmluZCh4ID0+IHguaWQgPT0gc3RydWN0dXJlSWQpO1xyXG4gICAgICAgIHJldHVybiBxdWVyeVN0cnVjdHVyZVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEFsbFN0cnVjdHVyZWRUeXBlcyhzdHJ1Y3R1cmU6IENvbW1vblN0cnVjdHVyZSkge1xyXG4gICAgICAgIGxldCBhcnJheTogQXJyYXk8U3RydWN0dXJlZFR5cGU+ID0gbmV3IEFycmF5PFN0cnVjdHVyZWRUeXBlPigpO1xyXG4gICAgICAgIGlmIChzdHJ1Y3R1cmUuc3RydWN0dXJlZFR5cGVzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgYXJyYXk9YXJyYXkuY29uY2F0KHN0cnVjdHVyZS5zdHJ1Y3R1cmVkVHlwZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RydWN0dXJlLnJlZlN0cnVjdHVyZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzdHJ1Y3R1cmUucmVmU3RydWN0dXJlcy5mb3JFYWNoKHJlZlN0cnVjdHVyZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVmU3RydWN0dXJlLnN0cnVjdHVyZWRUeXBlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXk9YXJyYXkuY29uY2F0KHJlZlN0cnVjdHVyZS5zdHJ1Y3R1cmVkVHlwZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0iXX0=