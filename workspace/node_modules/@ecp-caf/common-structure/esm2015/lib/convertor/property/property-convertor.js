/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
export class PropertyConvertor {
    /**
     * @param {?} obj
     * @param {?} property
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, property, ctxt) {
        if (!property) {
            return;
        }
        obj['kind'] = property.kind;
        obj['id'] = property.id;
        obj['code'] = property.code;
        obj['name'] = property.name;
        obj['description'] = property.description;
        obj['defaultValue'] = property.defaultValue;
        obj['required'] = (/** @type {?} */ (property.required));
        if (property.propertyType) {
            /** @type {?} */
            let kind = property.propertyType.getKind();
            if (!kind) {
                throw new Error('属性序列化时属性类型获取TypeKind为空格！');
            }
            obj['propertyType'] = DataTypeConvertUtil.convertToObject(property.propertyType, ctxt);
        }
        obj['constraint'] = null;
        if (property.constraint) {
            /** @type {?} */
            let kind = property.constraint.getKind();
            if (!kind) {
                throw new Error('属性序列化时属性约束获取ConstraintKind为空格！');
            }
            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(property.constraint, ctxt);
        }
        if (property.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(property, obj);
        }
    }
    /**
     * @param {?} property
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(property, obj, ctxt) {
        if (!obj) {
            return;
        }
        property.kind = obj['kind'];
        property.id = obj['id'];
        property.code = obj['code'];
        property.name = obj['name'];
        property.defaultValue = obj['defaultValue'];
        property.required = (/** @type {?} */ (obj['required']));
        property.description = obj['description'];
        if (obj['propertyType']) {
            /** @type {?} */
            let kind = obj['propertyType']['kind'];
            if (!kind) {
                throw new Error('解析属性时数据类型的TypeKind为空！');
            }
            property.propertyType = DataTypeConvertUtil.initFromObject(obj['propertyType'], ctxt);
        }
        if (obj['constraint']) {
            /** @type {?} */
            let kind = obj['constraint']['kind'];
            if (!kind) {
                throw new Error('解析属性时约束类型的ConstraintKind为空！');
            }
            property.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(property, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvcHJvcGVydHkvcHJvcGVydHktY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RSxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7O0lBRTFCLGVBQWUsQ0FBQyxHQUFXLEVBQUUsUUFBa0IsRUFBRSxJQUF1QjtRQUNwRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsT0FBTztTQUNWO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDeEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDNUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDNUIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDMUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDNUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLG1CQUFTLFFBQVEsQ0FBQyxRQUFRLEVBQUEsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUU7O2dCQUNuQixJQUFJLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7WUFDMUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7YUFDL0M7WUFDRCxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDMUY7UUFDRCxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXpCLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTs7Z0JBQ2pCLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUN4QyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQzthQUNyRDtZQUNELEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0c7UUFFRCxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7O2dCQUNoQixrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDOzs7Ozs7O0lBRUQsY0FBYyxDQUFDLFFBQWtCLEVBQUUsR0FBVyxFQUFFLElBQXVCO1FBQ25FLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixRQUFRLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixRQUFRLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QyxRQUFRLENBQUMsUUFBUSxHQUFHLG1CQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBVyxDQUFDO1FBQy9DLFFBQVEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTFDLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFOztnQkFDakIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDdEMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7YUFDNUM7WUFDRCxRQUFRLENBQUMsWUFBWSxHQUFHLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekY7UUFDRCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTs7Z0JBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDcEMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7YUFDbEQ7WUFDRCxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdHO1FBRUQsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7O2dCQUNkLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3BlcnR5IH0gZnJvbSAnLi4vLi4vZGVmaW5lL3Byb3BlcnR5L3Byb3BlcnR5JztcclxuaW1wb3J0IHsgRGF0YVR5cGVDb252ZXJ0VXRpbCB9IGZyb20gJy4uL3V0aWxzL2RhdGEtdHlwZS1jb252ZXJ0LXV0aWwnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udmVydG9yIH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2V4dGVuc2lvbi1jb252ZXJ0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb3BlcnR5Q29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOiBPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqWydraW5kJ10gPSBwcm9wZXJ0eS5raW5kO1xyXG4gICAgICAgIG9ialsnaWQnXSA9IHByb3BlcnR5LmlkO1xyXG4gICAgICAgIG9ialsnY29kZSddID0gcHJvcGVydHkuY29kZTtcclxuICAgICAgICBvYmpbJ25hbWUnXSA9IHByb3BlcnR5Lm5hbWU7XHJcbiAgICAgICAgb2JqWydkZXNjcmlwdGlvbiddID0gcHJvcGVydHkuZGVzY3JpcHRpb247XHJcbiAgICAgICAgb2JqWydkZWZhdWx0VmFsdWUnXSA9IHByb3BlcnR5LmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICBvYmpbJ3JlcXVpcmVkJ10gPSA8Ym9vbGVhbj5wcm9wZXJ0eS5yZXF1aXJlZDtcclxuXHJcbiAgICAgICAgaWYgKHByb3BlcnR5LnByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgICBsZXQga2luZCA9IHByb3BlcnR5LnByb3BlcnR5VHlwZS5nZXRLaW5kKCk7XHJcbiAgICAgICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCflsZ7mgKfluo/liJfljJbml7blsZ7mgKfnsbvlnovojrflj5ZUeXBlS2luZOS4uuepuuagvO+8gScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialsncHJvcGVydHlUeXBlJ10gPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmNvbnZlcnRUb09iamVjdChwcm9wZXJ0eS5wcm9wZXJ0eVR5cGUsIGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYmpbJ2NvbnN0cmFpbnQnXSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChwcm9wZXJ0eS5jb25zdHJhaW50KSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gcHJvcGVydHkuY29uc3RyYWludC5nZXRLaW5kKCk7XHJcbiAgICAgICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCflsZ7mgKfluo/liJfljJbml7blsZ7mgKfnuqbmnZ/ojrflj5ZDb25zdHJhaW50S2luZOS4uuepuuagvO+8gScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialsnY29uc3RyYWludCddID0gY3R4dC5nZXRDb25zdHJhaW50U2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCkuc2VyaWFsaXplKHByb3BlcnR5LmNvbnN0cmFpbnQsY3R4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocHJvcGVydHkuZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb0pPYmoocHJvcGVydHksIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KHByb3BlcnR5OiBQcm9wZXJ0eSwgb2JqOiBPYmplY3QsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm9wZXJ0eS5raW5kID0gb2JqWydraW5kJ107XHJcbiAgICAgICAgcHJvcGVydHkuaWQgPSBvYmpbJ2lkJ107XHJcbiAgICAgICAgcHJvcGVydHkuY29kZSA9IG9ialsnY29kZSddO1xyXG4gICAgICAgIHByb3BlcnR5Lm5hbWUgPSBvYmpbJ25hbWUnXTtcclxuICAgICAgICBwcm9wZXJ0eS5kZWZhdWx0VmFsdWUgPSBvYmpbJ2RlZmF1bHRWYWx1ZSddO1xyXG4gICAgICAgIHByb3BlcnR5LnJlcXVpcmVkID0gb2JqWydyZXF1aXJlZCddIGFzIGJvb2xlYW47XHJcbiAgICAgICAgcHJvcGVydHkuZGVzY3JpcHRpb24gPSBvYmpbJ2Rlc2NyaXB0aW9uJ107XHJcblxyXG4gICAgICAgIGlmIChvYmpbJ3Byb3BlcnR5VHlwZSddKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gb2JqWydwcm9wZXJ0eVR5cGUnXVsna2luZCddO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6Q5bGe5oCn5pe25pWw5o2u57G75Z6L55qEVHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcm9wZXJ0eS5wcm9wZXJ0eVR5cGUgPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmluaXRGcm9tT2JqZWN0KG9ialsncHJvcGVydHlUeXBlJ10sIGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JqWydjb25zdHJhaW50J10pIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBvYmpbJ2NvbnN0cmFpbnQnXVsna2luZCddO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6Q5bGe5oCn5pe257qm5p2f57G75Z6L55qEQ29uc3RyYWludEtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcm9wZXJ0eS5jb25zdHJhaW50ID0gY3R4dC5nZXRDb25zdHJhaW50U2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCkuZGVzZXJpYWxpemUob2JqWydjb25zdHJhaW50J10sY3R4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob2JqW1wiZXh0ZW5zaW9uXCJdKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihwcm9wZXJ0eSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=