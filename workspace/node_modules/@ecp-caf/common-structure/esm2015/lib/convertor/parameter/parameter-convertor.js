/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
export class ParameterConvertor {
    /**
     * @param {?} obj
     * @param {?} parameter
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, parameter, ctxt) {
        if (!parameter) {
            return;
        }
        obj['kind'] = parameter.kind;
        obj['code'] = parameter.code;
        obj['name'] = parameter.name;
        obj['description'] = parameter.description;
        obj['required'] = parameter.required;
        obj['defaultValue'] = parameter.defaultValue;
        obj['parameterType'] = null;
        if (parameter.parameterType) {
            /** @type {?} */
            let kind = parameter.parameterType.getKind();
            if (!kind) {
                throw new Error('参数序列化时数据类型的TypeKind为空！');
            }
            obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType, ctxt);
        }
        obj['constraint'] = null;
        if (parameter.constraint) {
            /** @type {?} */
            let kind = parameter.constraint.getKind();
            if (!kind) {
                throw new Error('参数序列化时参数约束的ConstraintKind为空！');
            }
            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint, ctxt);
        }
        if (parameter.extension) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(parameter, obj);
        }
    }
    /**
     * @param {?} parameter
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(parameter, obj, ctxt) {
        if (!obj) {
            return;
        }
        parameter.kind = obj['kind'];
        parameter.code = obj['code'];
        parameter.name = obj['name'];
        parameter.defaultValue = obj['defaultValue'];
        parameter.description = obj['description'];
        parameter.required = (/** @type {?} */ (obj['required']));
        if (obj['parameterType']) {
            /** @type {?} */
            let kind = obj['parameterType']['kind'];
            if (!kind) {
                throw new Error('解析参数数据类型时TypeKind为空！');
            }
            parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);
        }
        if (obj['constraint']) {
            /** @type {?} */
            let kind = obj['constraint']['kind'];
            if (!kind) {
                throw new Error('解析参数约束类型时ConstraintKind为空！');
            }
            parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            let extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(parameter, obj);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyLWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL3BhcmFtZXRlci9wYXJhbWV0ZXItY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RSxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7O0lBRTNCLGVBQWUsQ0FBQyxHQUFVLEVBQUMsU0FBb0IsRUFBQyxJQUFzQjtRQUNsRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osT0FBTztTQUNWO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFFN0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDM0MsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDckMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFFN0MsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLFNBQVMsQ0FBQyxhQUFhLEVBQUU7O2dCQUNyQixJQUFJLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUU7WUFDNUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7YUFDN0M7WUFDRCxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUY7UUFFRCxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRTs7Z0JBQ2xCLElBQUksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUN6QyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQzthQUNuRDtZQUNELEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUc7UUFFRCxJQUFHLFNBQVMsQ0FBQyxTQUFTLEVBQUM7O2dCQUNmLGtCQUFrQixHQUFDLElBQUksa0JBQWtCLEVBQUU7WUFDL0Msa0JBQWtCLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7Ozs7Ozs7SUFFRCxjQUFjLENBQUMsU0FBb0IsRUFBRSxHQUFXLEVBQUUsSUFBdUI7UUFDckUsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU87U0FDVjtRQUNELFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzdDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsbUJBQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFXLENBQUM7UUFFaEQsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUU7O2dCQUNsQixJQUFJLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQzthQUMzQztZQUNELFNBQVMsQ0FBQyxhQUFhLEdBQUcsbUJBQW1CLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1RjtRQUNELElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFOztnQkFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUNqRDtZQUNELFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUc7UUFDRCxJQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBQzs7Z0JBQ1osa0JBQWtCLEdBQUMsSUFBSSxrQkFBa0IsRUFBRTtZQUMvQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyYW1ldGVyIH0gZnJvbSAnLi4vLi4vZGVmaW5lL3BhcmFtZXRlci9wYXJhbWV0ZXInO1xyXG5pbXBvcnQgeyBEYXRhVHlwZUNvbnZlcnRVdGlsIH0gZnJvbSAnLi4vdXRpbHMvZGF0YS10eXBlLWNvbnZlcnQtdXRpbCc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVyQ29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOk9iamVjdCxwYXJhbWV0ZXI6IFBhcmFtZXRlcixjdHh0OklTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFwYXJhbWV0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYmpbJ2tpbmQnXSA9IHBhcmFtZXRlci5raW5kO1xyXG5cclxuICAgICAgICBvYmpbJ2NvZGUnXSA9IHBhcmFtZXRlci5jb2RlO1xyXG4gICAgICAgIG9ialsnbmFtZSddID0gcGFyYW1ldGVyLm5hbWU7XHJcbiAgICAgICAgb2JqWydkZXNjcmlwdGlvbiddID0gcGFyYW1ldGVyLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIG9ialsncmVxdWlyZWQnXSA9IHBhcmFtZXRlci5yZXF1aXJlZDtcclxuICAgICAgICBvYmpbJ2RlZmF1bHRWYWx1ZSddID0gcGFyYW1ldGVyLmRlZmF1bHRWYWx1ZTtcclxuXHJcbiAgICAgICAgb2JqWydwYXJhbWV0ZXJUeXBlJ10gPSBudWxsO1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXIucGFyYW1ldGVyVHlwZSkge1xyXG4gICAgICAgICAgICBsZXQga2luZCA9IHBhcmFtZXRlci5wYXJhbWV0ZXJUeXBlLmdldEtpbmQoKTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+WPguaVsOW6j+WIl+WMluaXtuaVsOaNruexu+Wei+eahFR5cGVLaW5k5Li656m677yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqWydwYXJhbWV0ZXJUeXBlJ10gPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmNvbnZlcnRUb09iamVjdChwYXJhbWV0ZXIucGFyYW1ldGVyVHlwZSxjdHh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9ialsnY29uc3RyYWludCddID0gbnVsbDtcclxuICAgICAgICBpZiAocGFyYW1ldGVyLmNvbnN0cmFpbnQpIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBwYXJhbWV0ZXIuY29uc3RyYWludC5nZXRLaW5kKCk7XHJcbiAgICAgICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCflj4LmlbDluo/liJfljJbml7blj4LmlbDnuqbmnZ/nmoRDb25zdHJhaW50S2luZOS4uuepuu+8gScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialsnY29uc3RyYWludCddID0gY3R4dC5nZXRDb25zdHJhaW50U2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCkuc2VyaWFsaXplKHBhcmFtZXRlci5jb25zdHJhaW50LGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihwYXJhbWV0ZXIuZXh0ZW5zaW9uKXtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvcj1uZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb0pPYmoocGFyYW1ldGVyLG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KHBhcmFtZXRlcjogUGFyYW1ldGVyLCBvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIW9iaikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmFtZXRlci5raW5kID0gb2JqWydraW5kJ107XHJcbiAgICAgICAgcGFyYW1ldGVyLmNvZGUgPSBvYmpbJ2NvZGUnXTtcclxuICAgICAgICBwYXJhbWV0ZXIubmFtZSA9IG9ialsnbmFtZSddO1xyXG4gICAgICAgIHBhcmFtZXRlci5kZWZhdWx0VmFsdWUgPSBvYmpbJ2RlZmF1bHRWYWx1ZSddO1xyXG4gICAgICAgIHBhcmFtZXRlci5kZXNjcmlwdGlvbiA9IG9ialsnZGVzY3JpcHRpb24nXTtcclxuICAgICAgICBwYXJhbWV0ZXIucmVxdWlyZWQgPSBvYmpbJ3JlcXVpcmVkJ10gYXMgYm9vbGVhbjtcclxuXHJcbiAgICAgICAgaWYgKG9ialsncGFyYW1ldGVyVHlwZSddKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gb2JqWydwYXJhbWV0ZXJUeXBlJ11bJ2tpbmQnXTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ino+aekOWPguaVsOaVsOaNruexu+Wei+aXtlR5cGVLaW5k5Li656m677yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlclR5cGUgPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmluaXRGcm9tT2JqZWN0KG9ialsncGFyYW1ldGVyVHlwZSddLCBjdHh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ialsnY29uc3RyYWludCddKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gb2JqWydjb25zdHJhaW50J11bJ2tpbmQnXTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ino+aekOWPguaVsOe6puadn+exu+Wei+aXtkNvbnN0cmFpbnRLaW5k5Li656m677yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyYW1ldGVyLmNvbnN0cmFpbnQgPSBjdHh0LmdldENvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKS5kZXNlcmlhbGl6ZShvYmpbJ2NvbnN0cmFpbnQnXSxjdHh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYob2JqW1wiZXh0ZW5zaW9uXCJdKXtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvcj1uZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihwYXJhbWV0ZXIsb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=