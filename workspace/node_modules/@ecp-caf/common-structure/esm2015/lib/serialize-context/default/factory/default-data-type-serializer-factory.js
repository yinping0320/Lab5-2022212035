/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultPrimitiveTypeSerializer } from '../serializer/default-primitive-type-serializer';
import { DefaultCollectionTypeSerializer } from '../serializer/default-collection-type-serializer';
import { DefaultMapTypeSerializer } from '../serializer/default-map-type-serializer';
import { DefaultStructuredTypeSerializer } from '../serializer/default-structured-type-serializer';
import { DefaultEntityTypeSerializer } from '../serializer/default-entity-type-serializer';
import { DefaultEnumerationTypeSerializer } from '../serializer/default-enumeration-type-serializer';
import { DefaultDataTransferObjectTypeSerializer } from '../serializer/default-dto-type-serializer';
import { DataTypeConst } from '../../../define/constant/data-type-const';
import { DefaultValueObjectTypeSerializer } from '../serializer/default-vo-type-serializer';
import { DefaultObjectTypeSerializer } from '../serializer/default-object-type-serializer';
export class DefaultDataTypeSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultPrimitiveTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_COLLECTION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultCollectionTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_MAP:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultMapTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_STRUCTURED:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultStructuredTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultDataTransferObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_ENTITY:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEntityTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_VALUE_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultValueObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_ENUMERATION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEnumerationTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未找到类型为${kind}的序列化器！`);
        }
        return this.serializerDict[kind];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultDataTypeSerializerFactory.prototype.serializerDict;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJpYWxpemUtY29udGV4dC9kZWZhdWx0L2ZhY3RvcnkvZGVmYXVsdC1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNyRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUMzRixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUNyRyxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNwRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDekUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDNUYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFM0YsTUFBTSxPQUFPLGdDQUFnQztJQUE3QztRQUVZLG1CQUFjLEdBQTJDLEVBQUUsQ0FBQztJQWdFeEUsQ0FBQzs7Ozs7SUE5REcsR0FBRyxDQUFDLElBQVk7UUFDWixRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssYUFBYSxDQUFDLGlCQUFpQjtnQkFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7O3dCQUN4QixVQUFVLEdBQUcsSUFBSSw4QkFBOEIsRUFBRTtvQkFDckQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUM7aUJBQzFDO2dCQUNELE1BQU07WUFDVixLQUFLLGFBQWEsQ0FBQyxrQkFBa0I7Z0JBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDeEIsVUFBVSxHQUFHLElBQUksK0JBQStCLEVBQUU7b0JBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMxQztnQkFDRCxNQUFNO1lBQ1YsS0FBSyxhQUFhLENBQUMsV0FBVztnQkFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7O3dCQUN4QixVQUFVLEdBQUcsSUFBSSx3QkFBd0IsRUFBRTtvQkFDL0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUM7aUJBQzFDO2dCQUNELE1BQU07WUFDVixLQUFLLGFBQWEsQ0FBQyxrQkFBa0I7Z0JBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDeEIsVUFBVSxHQUFHLElBQUksK0JBQStCLEVBQUU7b0JBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMxQztnQkFDRCxNQUFNO1lBQ1YsS0FBSyxhQUFhLENBQUMsNEJBQTRCO2dCQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTs7d0JBQ3hCLFVBQVUsR0FBRyxJQUFJLHVDQUF1QyxFQUFFO29CQUM5RCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztpQkFDMUM7Z0JBQ0QsTUFBTTtZQUNWLEtBQUssYUFBYSxDQUFDLGNBQWM7Z0JBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDeEIsVUFBVSxHQUFHLElBQUksMkJBQTJCLEVBQUU7b0JBQ2xELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMxQztnQkFDRCxNQUFNO1lBQ1YsS0FBSyxhQUFhLENBQUMsb0JBQW9CO2dCQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTs7d0JBQ3hCLFVBQVUsR0FBRyxJQUFJLGdDQUFnQyxFQUFFO29CQUN2RCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztpQkFDMUM7Z0JBQ0QsTUFBTTtZQUNWLEtBQUssYUFBYSxDQUFDLG1CQUFtQjtnQkFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7O3dCQUN4QixVQUFVLEdBQUcsSUFBSSxnQ0FBZ0MsRUFBRTtvQkFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUM7aUJBQzFDO2dCQUNELE1BQU07WUFDVixLQUFLLGFBQWEsQ0FBQyxjQUFjO2dCQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTs7d0JBQ3hCLFVBQVUsR0FBRyxJQUFJLDJCQUEyQixFQUFFO29CQUNsRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztpQkFDMUM7Z0JBQ0QsTUFBTTtZQUNWO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FFSjs7Ozs7O0lBaEVHLDBEQUFvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2ZhY3RvcnkvaS1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5JztcclxuaW1wb3J0IHsgSURhdGFUeXBlU2VyaWFsaXplciB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9zZXJpYWxpemVyL2ktZGF0YS10eXBlLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBEZWZhdWx0UHJpbWl0aXZlVHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtcHJpbWl0aXZlLXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IERlZmF1bHRDb2xsZWN0aW9uVHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtY29sbGVjdGlvbi10eXBlLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBEZWZhdWx0TWFwVHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtbWFwLXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IERlZmF1bHRTdHJ1Y3R1cmVkVHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtc3RydWN0dXJlZC10eXBlLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBEZWZhdWx0RW50aXR5VHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtZW50aXR5LXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IERlZmF1bHRFbnVtZXJhdGlvblR5cGVTZXJpYWxpemVyIH0gZnJvbSAnLi4vc2VyaWFsaXplci9kZWZhdWx0LWVudW1lcmF0aW9uLXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IERlZmF1bHREYXRhVHJhbnNmZXJPYmplY3RUeXBlU2VyaWFsaXplciB9IGZyb20gJy4uL3NlcmlhbGl6ZXIvZGVmYXVsdC1kdG8tdHlwZS1zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgRGF0YVR5cGVDb25zdCB9IGZyb20gJy4uLy4uLy4uL2RlZmluZS9jb25zdGFudC9kYXRhLXR5cGUtY29uc3QnO1xyXG5pbXBvcnQgeyBEZWZhdWx0VmFsdWVPYmplY3RUeXBlU2VyaWFsaXplciB9IGZyb20gJy4uL3NlcmlhbGl6ZXIvZGVmYXVsdC12by10eXBlLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBEZWZhdWx0T2JqZWN0VHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtb2JqZWN0LXR5cGUtc2VyaWFsaXplcic7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkgaW1wbGVtZW50cyBJRGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSB7XHJcblxyXG4gICAgcHJpdmF0ZSBzZXJpYWxpemVyRGljdDogeyBba2V5OiBzdHJpbmddOiBJRGF0YVR5cGVTZXJpYWxpemVyIH0gPSB7fTtcclxuXHJcbiAgICBnZXQoa2luZDogc3RyaW5nKTogSURhdGFUeXBlU2VyaWFsaXplciB7XHJcbiAgICAgICAgc3dpdGNoIChraW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX1BSSU1JVElWRTpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IERlZmF1bHRQcmltaXRpdmVUeXBlU2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0gPSBzZXJpYWxpemVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX0NPTExFQ1RJT046XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IG5ldyBEZWZhdWx0Q29sbGVjdGlvblR5cGVTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LkRFRkFVTFRfTUFQOlxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlcmlhbGl6ZXJEaWN0W2tpbmRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXIgPSBuZXcgRGVmYXVsdE1hcFR5cGVTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LkRFRkFVTFRfU1RSVUNUVVJFRDpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IERlZmF1bHRTdHJ1Y3R1cmVkVHlwZVNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZXJEaWN0W2tpbmRdID0gc2VyaWFsaXplcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIERhdGFUeXBlQ29uc3QuREVGQVVMVF9EQVRBX1RSQU5TRkVSX09CSkVDVDpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IERlZmF1bHREYXRhVHJhbnNmZXJPYmplY3RUeXBlU2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0gPSBzZXJpYWxpemVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX0VOVElUWTpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IERlZmF1bHRFbnRpdHlUeXBlU2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0gPSBzZXJpYWxpemVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX1ZBTFVFX09CSkVDVDpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IERlZmF1bHRWYWx1ZU9iamVjdFR5cGVTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBEYXRhVHlwZUNvbnN0LkRFRkFVTFRfRU5VTUVSQVRJT046XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IG5ldyBEZWZhdWx0RW51bWVyYXRpb25UeXBlU2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0gPSBzZXJpYWxpemVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX09CSkVDVDpcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IERlZmF1bHRPYmplY3RUeXBlU2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0gPSBzZXJpYWxpemVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOacquaJvuWIsOexu+Wei+S4uiR7a2luZH3nmoTluo/liJfljJblmajvvIFgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF07XHJcbiAgICB9XHJcblxyXG59Il19