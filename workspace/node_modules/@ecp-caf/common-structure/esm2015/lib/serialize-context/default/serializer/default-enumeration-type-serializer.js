/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EnumerationTypeConvertor } from '../../../convertor/data-type/enumeration-type-convertor';
import { EnumerationType } from '../../../define/data-type/structured-type/enumeration-type/enumeration-type';
export class DefaultEnumerationTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new EnumerationTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new EnumerationType();
        /** @type {?} */
        let baseConvertor = new EnumerationTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1lbnVtZXJhdGlvbi10eXBlLXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL3NlcmlhbGl6ZS1jb250ZXh0L2RlZmF1bHQvc2VyaWFsaXplci9kZWZhdWx0LWVudW1lcmF0aW9uLXR5cGUtc2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBS0EsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDbkcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZFQUE2RSxDQUFDO0FBRTlHLE1BQU0sT0FBTyxnQ0FBZ0M7Ozs7OztJQUN6QyxTQUFTLENBQUMsSUFBZSxFQUFFLElBQXVCOztZQUMxQyxNQUFNLEdBQUMsSUFBSSxNQUFNLEVBQUU7O1lBQ25CLGFBQWEsR0FBQyxJQUFJLHdCQUF3QixFQUFFO1FBQ2hELGFBQWEsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFDLElBQUksRUFBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFRCxXQUFXLENBQUMsR0FBVyxFQUFFLElBQXVCOztZQUN4QyxNQUFNLEdBQUcsSUFBSSxlQUFlLEVBQUU7O1lBQzlCLGFBQWEsR0FBRyxJQUFJLHdCQUF3QixFQUFFO1FBQ2xELGFBQWEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGF0YVR5cGVTZXJpYWxpemVyIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL3NlcmlhbGl6ZXIvaS1kYXRhLXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgUHJpbWl0aXZlVHlwZUNvbnZlcnRvciB9IGZyb20gJy4uLy4uLy4uL2NvbnZlcnRvci9kYXRhLXR5cGUvcHJpbWl0aXZlLXR5cGUtY29udmVydG9yJztcclxuaW1wb3J0IHsgUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4uLy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvcHJpbWl0aXZlLXR5cGUvcHJpbWl0aXZlLXR5cGUnO1xyXG5pbXBvcnQgeyBFbnVtZXJhdGlvblR5cGVDb252ZXJ0b3IgfSBmcm9tICcuLi8uLi8uLi9jb252ZXJ0b3IvZGF0YS10eXBlL2VudW1lcmF0aW9uLXR5cGUtY29udmVydG9yJztcclxuaW1wb3J0IHsgRW51bWVyYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvZW51bWVyYXRpb24tdHlwZS9lbnVtZXJhdGlvbi10eXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0RW51bWVyYXRpb25UeXBlU2VyaWFsaXplciBpbXBsZW1lbnRzIElEYXRhVHlwZVNlcmlhbGl6ZXJ7XHJcbiAgICBzZXJpYWxpemUodHlwZTogSURhdGFUeXBlLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IE9iamVjdCB7XHJcbiAgICAgICAgbGV0IHJlc3VsdD1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgbGV0IGJhc2VDb252ZXJ0b3I9bmV3IEVudW1lcmF0aW9uVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIGJhc2VDb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KHJlc3VsdCx0eXBlLGN0eHQpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBkZXNlcmlhbGl6ZShvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBJRGF0YVR5cGUge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgRW51bWVyYXRpb25UeXBlKCk7XHJcbiAgICAgICAgbGV0IGJhc2VDb252ZXJ0b3IgPSBuZXcgRW51bWVyYXRpb25UeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgYmFzZUNvbnZlcnRvci5pbml0RnJvbU9iamVjdChyZXN1bHQsIG9iaiwgY3R4dCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBcclxufSJdfQ==