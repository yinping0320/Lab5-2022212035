/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';
import { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';
export class DefaultPrimitiveTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new PrimitiveTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new PrimitiveType();
        /** @type {?} */
        let baseConvertor = new PrimitiveTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcmltaXRpdmUtdHlwZS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJpYWxpemUtY29udGV4dC9kZWZhdWx0L3NlcmlhbGl6ZXIvZGVmYXVsdC1wcmltaXRpdmUtdHlwZS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUMvRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFFeEYsTUFBTSxPQUFPLDhCQUE4Qjs7Ozs7O0lBQ3ZDLFNBQVMsQ0FBQyxJQUFlLEVBQUUsSUFBdUI7O1lBQzFDLE1BQU0sR0FBQyxJQUFJLE1BQU0sRUFBRTs7WUFDbkIsYUFBYSxHQUFDLElBQUksc0JBQXNCLEVBQUU7UUFDOUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxHQUFXLEVBQUUsSUFBdUI7O1lBQ3hDLE1BQU0sR0FBRyxJQUFJLGFBQWEsRUFBRTs7WUFDNUIsYUFBYSxHQUFHLElBQUksc0JBQXNCLEVBQUU7UUFDaEQsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FHSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhVHlwZVNlcmlhbGl6ZXIgfSBmcm9tICcuLi8uLi9leHRlbnNpb24vc2VyaWFsaXplci9pLWRhdGEtdHlwZS1zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBQcmltaXRpdmVUeXBlQ29udmVydG9yIH0gZnJvbSAnLi4vLi4vLi4vY29udmVydG9yL2RhdGEtdHlwZS9wcmltaXRpdmUtdHlwZS1jb252ZXJ0b3InO1xyXG5pbXBvcnQgeyBQcmltaXRpdmVUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9wcmltaXRpdmUtdHlwZS9wcmltaXRpdmUtdHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdFByaW1pdGl2ZVR5cGVTZXJpYWxpemVyIGltcGxlbWVudHMgSURhdGFUeXBlU2VyaWFsaXplcntcclxuICAgIHNlcmlhbGl6ZSh0eXBlOiBJRGF0YVR5cGUsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogT2JqZWN0IHtcclxuICAgICAgICBsZXQgcmVzdWx0PW5ldyBPYmplY3QoKTtcclxuICAgICAgICBsZXQgYmFzZUNvbnZlcnRvcj1uZXcgUHJpbWl0aXZlVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIGJhc2VDb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KHJlc3VsdCx0eXBlLGN0eHQpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBkZXNlcmlhbGl6ZShvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBJRGF0YVR5cGUge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgUHJpbWl0aXZlVHlwZSgpO1xyXG4gICAgICAgIGxldCBiYXNlQ29udmVydG9yID0gbmV3IFByaW1pdGl2ZVR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICBiYXNlQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KHJlc3VsdCwgb2JqLCBjdHh0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG59Il19