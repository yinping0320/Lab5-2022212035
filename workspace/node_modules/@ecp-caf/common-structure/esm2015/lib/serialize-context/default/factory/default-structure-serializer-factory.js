/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DEFAULT_ENTITY_OBJECT, DEFAULT_VALUE_OBJECT, DEFAULT_DATA_TRANSFER_OBJECT } from '../default-constant';
import { DefaultEntityObjectSerializer } from '../serializer/default-entity-object-serializer';
import { DefaultValueObjectSerializer } from '../serializer/default-value-object-serializer';
import { DefaultDataTransferObjectSerializer } from '../serializer/default-data-transfer-object-serializer';
export class DefaultStructureSerializerFactory {
    constructor() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DEFAULT_ENTITY_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEntityObjectSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DEFAULT_VALUE_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultValueObjectSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DEFAULT_DATA_TRANSFER_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultDataTransferObjectSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error(`未匹配到类型为${kind}的序列化器!`);
        }
        return this.serializerDict[kind];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultStructureSerializerFactory.prototype.serializerDict;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zdHJ1Y3R1cmUtc2VyaWFsaXplci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJpYWxpemUtY29udGV4dC9kZWZhdWx0L2ZhY3RvcnkvZGVmYXVsdC1zdHJ1Y3R1cmUtc2VyaWFsaXplci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoSCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUM3RixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUU1RyxNQUFNLE9BQU8saUNBQWlDO0lBQTlDO1FBQ1ksbUJBQWMsR0FBa0QsRUFBRSxDQUFDO0lBMkIvRSxDQUFDOzs7OztJQXpCRyxHQUFHLENBQUMsSUFBWTtRQUNaLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxxQkFBcUI7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDeEIsVUFBVSxHQUFHLElBQUksNkJBQTZCLEVBQUU7b0JBQ3BELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMxQztnQkFDRCxNQUFNO1lBQ1YsS0FBSyxvQkFBb0I7Z0JBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDeEIsVUFBVSxHQUFHLElBQUksNEJBQTRCLEVBQUU7b0JBQ25ELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMxQztnQkFDRCxNQUFNO1lBQ1YsS0FBSyw0QkFBNEI7Z0JBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFOzt3QkFDeEIsVUFBVSxHQUFHLElBQUksbUNBQW1DLEVBQUU7b0JBQzFELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2lCQUMxQztnQkFDRCxNQUFNO1lBQ1Y7Z0JBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLENBQUM7U0FDL0M7UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKOzs7Ozs7SUEzQkcsMkRBQTJFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbW1vblN0cnVjdHVyZVNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2ZhY3RvcnkvaS1jb21tb24tc3RydWN0dXJlLXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVyIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL3NlcmlhbGl6ZXIvaS1jb21tb24tc3RydWN0dXJlLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBERUZBVUxUX0VOVElUWV9PQkpFQ1QsIERFRkFVTFRfVkFMVUVfT0JKRUNULCBERUZBVUxUX0RBVEFfVFJBTlNGRVJfT0JKRUNUIH0gZnJvbSAnLi4vZGVmYXVsdC1jb25zdGFudCc7XHJcbmltcG9ydCB7IERlZmF1bHRFbnRpdHlPYmplY3RTZXJpYWxpemVyIH0gZnJvbSAnLi4vc2VyaWFsaXplci9kZWZhdWx0LWVudGl0eS1vYmplY3Qtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IERlZmF1bHRWYWx1ZU9iamVjdFNlcmlhbGl6ZXIgfSBmcm9tICcuLi9zZXJpYWxpemVyL2RlZmF1bHQtdmFsdWUtb2JqZWN0LXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBEZWZhdWx0RGF0YVRyYW5zZmVyT2JqZWN0U2VyaWFsaXplciB9IGZyb20gJy4uL3NlcmlhbGl6ZXIvZGVmYXVsdC1kYXRhLXRyYW5zZmVyLW9iamVjdC1zZXJpYWxpemVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0U3RydWN0dXJlU2VyaWFsaXplckZhY3RvcnkgaW1wbGVtZW50cyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplckZhY3Rvcnkge1xyXG4gICAgcHJpdmF0ZSBzZXJpYWxpemVyRGljdDogeyBba2V5OiBzdHJpbmddOiBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplciB9ID0ge307XHJcblxyXG4gICAgZ2V0KGtpbmQ6IHN0cmluZyk6IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVyIHtcclxuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSBERUZBVUxUX0VOVElUWV9PQkpFQ1Q6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IG5ldyBEZWZhdWx0RW50aXR5T2JqZWN0U2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0gPSBzZXJpYWxpemVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgREVGQVVMVF9WQUxVRV9PQkpFQ1Q6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VyaWFsaXplckRpY3Rba2luZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IG5ldyBEZWZhdWx0VmFsdWVPYmplY3RTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXSA9IHNlcmlhbGl6ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBERUZBVUxUX0RBVEFfVFJBTlNGRVJfT0JKRUNUOlxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlcmlhbGl6ZXJEaWN0W2tpbmRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXIgPSBuZXcgRGVmYXVsdERhdGFUcmFuc2Zlck9iamVjdFNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZXJEaWN0W2tpbmRdID0gc2VyaWFsaXplcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDmnKrljLnphY3liLDnsbvlnovkuLoke2tpbmR955qE5bqP5YiX5YyW5ZmoIWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVyRGljdFtraW5kXTtcclxuICAgIH1cclxufSJdfQ==