/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTransferObjectTypeConvertor } from '../../../convertor/data-type/data-transfer-object-type-convertor';
import { DataTransferObjectType } from '../../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';
export class DefaultDataTransferObjectTypeSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let result = new Object();
        /** @type {?} */
        let baseConvertor = new DataTransferObjectTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        /** @type {?} */
        let result = new DataTransferObjectType();
        /** @type {?} */
        let baseConvertor = new DataTransferObjectTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1kdG8tdHlwZS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJpYWxpemUtY29udGV4dC9kZWZhdWx0L3NlcmlhbGl6ZXIvZGVmYXVsdC1kdG8tdHlwZS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxrRUFBa0UsQ0FBQztBQUNuSCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrRkFBK0YsQ0FBQztBQUV2SSxNQUFNLE9BQU8sdUNBQXVDOzs7Ozs7SUFDaEQsU0FBUyxDQUFDLElBQWUsRUFBRSxJQUF1Qjs7WUFDMUMsTUFBTSxHQUFDLElBQUksTUFBTSxFQUFFOztZQUNuQixhQUFhLEdBQUMsSUFBSSwrQkFBK0IsRUFBRTtRQUN2RCxhQUFhLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLEdBQVcsRUFBRSxJQUF1Qjs7WUFDeEMsTUFBTSxHQUFDLElBQUksc0JBQXNCLEVBQUU7O1lBQ25DLGFBQWEsR0FBQyxJQUFJLCtCQUErQixFQUFFO1FBQ3ZELGFBQWEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGF0YVR5cGVTZXJpYWxpemVyIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL3NlcmlhbGl6ZXIvaS1kYXRhLXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgRGF0YVRyYW5zZmVyT2JqZWN0VHlwZUNvbnZlcnRvciB9IGZyb20gJy4uLy4uLy4uL2NvbnZlcnRvci9kYXRhLXR5cGUvZGF0YS10cmFuc2Zlci1vYmplY3QtdHlwZS1jb252ZXJ0b3InO1xyXG5pbXBvcnQgeyBEYXRhVHJhbnNmZXJPYmplY3RUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvZGF0YS10cmFuc2Zlci1vYmplY3QtdHlwZS9kYXRhLXRyYW5zZmVyLW9iamVjdC10eXBlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0RGF0YVRyYW5zZmVyT2JqZWN0VHlwZVNlcmlhbGl6ZXIgaW1wbGVtZW50cyBJRGF0YVR5cGVTZXJpYWxpemVye1xyXG4gICAgc2VyaWFsaXplKHR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBPYmplY3Qge1xyXG4gICAgICAgIGxldCByZXN1bHQ9bmV3IE9iamVjdCgpO1xyXG4gICAgICAgIGxldCBiYXNlQ29udmVydG9yPW5ldyBEYXRhVHJhbnNmZXJPYmplY3RUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgYmFzZUNvbnZlcnRvci5jb252ZXJ0VG9PYmplY3QocmVzdWx0LHR5cGUsY3R4dCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0gICAgXHJcbiAgICBcclxuICAgIGRlc2VyaWFsaXplKG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IElEYXRhVHlwZSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdD1uZXcgRGF0YVRyYW5zZmVyT2JqZWN0VHlwZSgpO1xyXG4gICAgICAgIGxldCBiYXNlQ29udmVydG9yPW5ldyBEYXRhVHJhbnNmZXJPYmplY3RUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgYmFzZUNvbnZlcnRvci5pbml0RnJvbU9iamVjdChyZXN1bHQsb2JqLGN0eHQpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cclxufSJdfQ==