/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultDataTypeSerializerFactory } from './factory/default-data-type-serializer-factory';
import { DefaultOperationSerializerFactory } from './factory/default-operation-serializer-factory';
import { DefaultParameterSerializerFactory } from './factory/default-parameter-serializer-factory';
import { DefaultPropertySerializerFactory } from './factory/default-property-serializer-factory';
import { DefaultStructureSerializerFactory } from './factory/default-structure-serializer-factory';
import { DefaultConstraintSerializerFactory } from './factory/default-constraint-serializer-factory';
export class DefaultSerializeContext {
    /**
     * @return {?}
     */
    getDataTypeSerializerFactory() {
        if (!this.dataTypeFactory) {
            this.dataTypeFactory = new DefaultDataTypeSerializerFactory();
        }
        return this.dataTypeFactory;
    }
    /**
     * @return {?}
     */
    getOperationSerializerFactory() {
        if (!this.operationFactory) {
            this.operationFactory = new DefaultOperationSerializerFactory();
        }
        return this.operationFactory;
    }
    /**
     * @return {?}
     */
    getParameterSerializerFactory() {
        if (!this.parameterFactory) {
            this.parameterFactory = new DefaultParameterSerializerFactory();
        }
        return this.parameterFactory;
    }
    /**
     * @return {?}
     */
    getPropertySerializerFactory() {
        if (!this.propertyFactory) {
            this.propertyFactory = new DefaultPropertySerializerFactory();
        }
        return this.propertyFactory;
    }
    /**
     * @return {?}
     */
    getStructureSerializerFactory() {
        if (!this.structureFactory) {
            this.structureFactory = new DefaultStructureSerializerFactory();
        }
        return this.structureFactory;
    }
    /**
     * @return {?}
     */
    getConstraintSerializerFactory() {
        if (!this.constraintFactory) {
            this.constraintFactory = new DefaultConstraintSerializerFactory();
        }
        return this.constraintFactory;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultSerializeContext.prototype.dataTypeFactory;
    /**
     * @type {?}
     * @private
     */
    DefaultSerializeContext.prototype.operationFactory;
    /**
     * @type {?}
     * @private
     */
    DefaultSerializeContext.prototype.parameterFactory;
    /**
     * @type {?}
     * @private
     */
    DefaultSerializeContext.prototype.propertyFactory;
    /**
     * @type {?}
     * @private
     */
    DefaultSerializeContext.prototype.structureFactory;
    /**
     * @type {?}
     * @private
     */
    DefaultSerializeContext.prototype.constraintFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zZXJpYWxpemUtY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvc2VyaWFsaXplLWNvbnRleHQvZGVmYXVsdC9kZWZhdWx0LXNlcmlhbGl6ZS1jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFNQSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNsRyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNqRyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUduRyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUVyRyxNQUFNLE9BQU8sdUJBQXVCOzs7O0lBUWhDLDRCQUE0QjtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZ0NBQWdDLEVBQUUsQ0FBQztTQUNqRTtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsNkJBQTZCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksaUNBQWlDLEVBQUUsQ0FBQztTQUNuRTtRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCw2QkFBNkI7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxpQ0FBaUMsRUFBRSxDQUFDO1NBQ25FO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQzs7OztJQUVELDRCQUE0QjtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZ0NBQWdDLEVBQUUsQ0FBQztTQUNqRTtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsNkJBQTZCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksaUNBQWlDLEVBQUUsQ0FBQztTQUNuRTtRQUNELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCw4QkFBOEI7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN6QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxrQ0FBa0MsRUFBRSxDQUFDO1NBQ3JFO1FBQ0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDbEMsQ0FBQztDQUVKOzs7Ozs7SUFqREcsa0RBQW9EOzs7OztJQUNwRCxtREFBc0Q7Ozs7O0lBQ3RELG1EQUFzRDs7Ozs7SUFDdEQsa0RBQW9EOzs7OztJQUNwRCxtREFBNEQ7Ozs7O0lBQzVELG9EQUF3RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBJRGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4uL2V4dGVuc2lvbi9mYWN0b3J5L2ktZGF0YS10eXBlLXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IElQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4uL2V4dGVuc2lvbi9mYWN0b3J5L2ktcGFyYW1ldGVyLXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IElQcm9wZXJ0eVNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2ZhY3RvcnkvaS1wcm9wZXJ0eS1zZXJpYWxpemVyLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICcuLi9leHRlbnNpb24vZmFjdG9yeS9pLWNvbW1vbi1zdHJ1Y3R1cmUtc2VyaWFsaXplci1mYWN0b3J5JztcclxuaW1wb3J0IHsgSU9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2ZhY3RvcnkvaS1vcGVyYXRpb24tc2VyaWFsaXplci1mYWN0b3J5JztcclxuaW1wb3J0IHsgRGVmYXVsdERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICcuL2ZhY3RvcnkvZGVmYXVsdC1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5JztcclxuaW1wb3J0IHsgRGVmYXVsdE9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnLi9mYWN0b3J5L2RlZmF1bHQtb3BlcmF0aW9uLXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IERlZmF1bHRQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4vZmFjdG9yeS9kZWZhdWx0LXBhcmFtZXRlci1zZXJpYWxpemVyLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBEZWZhdWx0UHJvcGVydHlTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4vZmFjdG9yeS9kZWZhdWx0LXByb3BlcnR5LXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IERlZmF1bHRTdHJ1Y3R1cmVTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4vZmFjdG9yeS9kZWZhdWx0LXN0cnVjdHVyZS1zZXJpYWxpemVyLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uL2V4dGVuc2lvbi9pLWNvbW1vbi1zdHJ1Y3R1cmUtc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBJQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnLi4vZXh0ZW5zaW9uL2ZhY3RvcnkvaS1jb25zdHJhaW50LXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IERlZmF1bHRDb25zdHJhaW50U2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICcuL2ZhY3RvcnkvZGVmYXVsdC1jb25zdHJhaW50LXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdFNlcmlhbGl6ZUNvbnRleHQgaW1wbGVtZW50cyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplQ29udGV4dCB7XHJcbiAgICBwcml2YXRlIGRhdGFUeXBlRmFjdG9yeTogSURhdGFUeXBlU2VyaWFsaXplckZhY3Rvcnk7XHJcbiAgICBwcml2YXRlIG9wZXJhdGlvbkZhY3Rvcnk6IElPcGVyYXRpb25TZXJpYWxpemVyRmFjdG9yeTtcclxuICAgIHByaXZhdGUgcGFyYW1ldGVyRmFjdG9yeTogSVBhcmFtZXRlclNlcmlhbGl6ZXJGYWN0b3J5O1xyXG4gICAgcHJpdmF0ZSBwcm9wZXJ0eUZhY3Rvcnk6IElQcm9wZXJ0eVNlcmlhbGl6ZXJGYWN0b3J5O1xyXG4gICAgcHJpdmF0ZSBzdHJ1Y3R1cmVGYWN0b3J5OiBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplckZhY3Rvcnk7XHJcbiAgICBwcml2YXRlIGNvbnN0cmFpbnRGYWN0b3J5OiBJQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5O1xyXG5cclxuICAgIGdldERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkoKTogSURhdGFUeXBlU2VyaWFsaXplckZhY3Rvcnkge1xyXG4gICAgICAgIGlmICghdGhpcy5kYXRhVHlwZUZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhVHlwZUZhY3RvcnkgPSBuZXcgRGVmYXVsdERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVR5cGVGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5KCk6IElPcGVyYXRpb25TZXJpYWxpemVyRmFjdG9yeSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wZXJhdGlvbkZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGVyYXRpb25GYWN0b3J5ID0gbmV3IERlZmF1bHRPcGVyYXRpb25TZXJpYWxpemVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25GYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhcmFtZXRlclNlcmlhbGl6ZXJGYWN0b3J5KCk6IElQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmFtZXRlckZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJGYWN0b3J5ID0gbmV3IERlZmF1bHRQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb3BlcnR5U2VyaWFsaXplckZhY3RvcnkoKTogSVByb3BlcnR5U2VyaWFsaXplckZhY3Rvcnkge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wZXJ0eUZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eUZhY3RvcnkgPSBuZXcgRGVmYXVsdFByb3BlcnR5U2VyaWFsaXplckZhY3RvcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydHlGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN0cnVjdHVyZVNlcmlhbGl6ZXJGYWN0b3J5KCk6IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVyRmFjdG9yeSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0cnVjdHVyZUZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5zdHJ1Y3R1cmVGYWN0b3J5ID0gbmV3IERlZmF1bHRTdHJ1Y3R1cmVTZXJpYWxpemVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zdHJ1Y3R1cmVGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSgpOiBJQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5IHtcclxuICAgICAgICBpZiAoIXRoaXMuY29uc3RyYWludEZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50RmFjdG9yeSA9IG5ldyBEZWZhdWx0Q29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cmFpbnRGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxufSJdfQ==