/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';
import { StructuredType } from '../../define/data-type/structured-type/structured-type';
var DataTypeConvertUtil = /** @class */ (function () {
    function DataTypeConvertUtil() {
    }
    /**
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    DataTypeConvertUtil.convertToObject = /**
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (datatype, ctxt) {
        /** @type {?} */
        var result = new Object();
        if (datatype instanceof StructuredType) {
            result['kind'] = "RefStructuredType";
            result["isRefer"] = true;
            result["refId"] = datatype.id;
        }
        else {
            /** @type {?} */
            var kind = datatype.getKind();
            result["kind"] = kind;
            /** @type {?} */
            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
            result = serializer.serialize(datatype, ctxt);
        }
        return result;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    DataTypeConvertUtil.initFromObject = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        /** @type {?} */
        var result;
        if (obj['isRefer'] != null) {
            result = new StructuredReferType();
            ((/** @type {?} */ (result))).refId = obj['refId'];
        }
        else {
            /** @type {?} */
            var kind = obj["kind"];
            /** @type {?} */
            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
            result = serializer.deserialize(obj, ctxt);
        }
        return result;
        // switch (obj["kind"]) {
        //     case DataTypeConst.DEFAULT_PRIMITIVE:
        //         let primitiveKindConvertor = new PrimitiveTypeConvertor();
        //         return primitiveKindConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_COLLECTION:
        //         let collectionConvertor = new CollectionTypeConvertor();
        //         return collectionConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_MAP:
        //         let mapConvertor = new MapTypeConvertor();
        //         return mapConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_STRUCTURED:
        //         let structureConvertor = new StructuredTypeConvertor();
        //         return structureConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_ENTITY:
        //         let entityConvertor = new StructuredTypeConvertor();
        //         return entityConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_VALUE_OBJECT:
        //         let voConvertor = new StructuredTypeConvertor();
        //         return voConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
        //         let dtoConvertor = new StructuredTypeConvertor();
        //         return dtoConvertor.initFromObject(obj);
        //     case DataTypeConst.DEFAULT_ENUMERATION:
        //         let enumerationConvertor = new StructuredTypeConvertor();
        //         return enumerationConvertor.initFromObject(obj);
        //     case DataTypeConst.STRUCTURED_REF:
        //         let structureRefConvertor = new StructuredTypeReferConvertor();
        //         return structureRefConvertor.initFromObject(obj);
        //     default:
        //         throw new Error(`数据类型不支持的${obj["kind"]}类型！`);
        // }
    };
    return DataTypeConvertUtil;
}());
export { DataTypeConvertUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10eXBlLWNvbnZlcnQtdXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL3V0aWxzL2RhdGEtdHlwZS1jb252ZXJ0LXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlFQUF5RSxDQUFDO0FBRTlHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUV4RjtJQUFBO0lBOERBLENBQUM7Ozs7OztJQTVEVSxtQ0FBZTs7Ozs7SUFBdEIsVUFBdUIsUUFBbUIsRUFBRSxJQUF1Qjs7WUFDM0QsTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3pCLElBQUksUUFBUSxZQUFZLGNBQWMsRUFBRTtZQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsbUJBQW1CLENBQUM7WUFDckMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUNqQzthQUNJOztnQkFDRyxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUM3QixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDOztnQkFDbEIsVUFBVSxHQUFHLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDOUQsTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Ozs7O0lBRU0sa0NBQWM7Ozs7O0lBQXJCLFVBQXNCLEdBQVcsRUFBRSxJQUF1Qjs7WUFDbEQsTUFBaUI7UUFDckIsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3hCLE1BQU0sR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7WUFDbkMsQ0FBQyxtQkFBQSxNQUFNLEVBQXVCLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hEO2FBQ0k7O2dCQUNHLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDOztnQkFDbEIsVUFBVSxHQUFHLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDOUQsTUFBTSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsT0FBTyxNQUFNLENBQUM7UUFDZCx5QkFBeUI7UUFDekIsNENBQTRDO1FBQzVDLHFFQUFxRTtRQUNyRSw2REFBNkQ7UUFDN0QsNkNBQTZDO1FBQzdDLG1FQUFtRTtRQUNuRSwwREFBMEQ7UUFDMUQsc0NBQXNDO1FBQ3RDLHFEQUFxRDtRQUNyRCxtREFBbUQ7UUFDbkQsNkNBQTZDO1FBQzdDLGtFQUFrRTtRQUNsRSx5REFBeUQ7UUFDekQseUNBQXlDO1FBQ3pDLCtEQUErRDtRQUMvRCxzREFBc0Q7UUFDdEQsK0NBQStDO1FBQy9DLDJEQUEyRDtRQUMzRCxrREFBa0Q7UUFDbEQsdURBQXVEO1FBQ3ZELDREQUE0RDtRQUM1RCxtREFBbUQ7UUFDbkQsOENBQThDO1FBQzlDLG9FQUFvRTtRQUNwRSwyREFBMkQ7UUFDM0QseUNBQXlDO1FBQ3pDLDBFQUEwRTtRQUMxRSw0REFBNEQ7UUFDNUQsZUFBZTtRQUNmLHdEQUF3RDtRQUN4RCxJQUFJO0lBQ1IsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQTlERCxJQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkUmVmZXJUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUtcmVmZXItdHlwZS9zdHJ1Y3R1cmVkLXJlZmVyLXR5cGUnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgU3RydWN0dXJlZFR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3N0cnVjdHVyZWQtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFUeXBlQ29udmVydFV0aWwge1xyXG5cclxuICAgIHN0YXRpYyBjb252ZXJ0VG9PYmplY3QoZGF0YXR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBPYmplY3Qge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYgKGRhdGF0eXBlIGluc3RhbmNlb2YgU3RydWN0dXJlZFR5cGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0WydraW5kJ10gPSBcIlJlZlN0cnVjdHVyZWRUeXBlXCI7XHJcbiAgICAgICAgICAgIHJlc3VsdFtcImlzUmVmZXJcIl0gPSB0cnVlO1xyXG4gICAgICAgICAgICByZXN1bHRbXCJyZWZJZFwiXSA9IGRhdGF0eXBlLmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGtpbmQgPSBkYXRhdHlwZS5nZXRLaW5kKCk7XHJcbiAgICAgICAgICAgIHJlc3VsdFtcImtpbmRcIl0gPSBraW5kO1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IGN0eHQuZ2V0RGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplci5zZXJpYWxpemUoZGF0YXR5cGUsIGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpbml0RnJvbU9iamVjdChvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBJRGF0YVR5cGUge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IElEYXRhVHlwZTtcclxuICAgICAgICBpZiAob2JqWydpc1JlZmVyJ10gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgU3RydWN0dXJlZFJlZmVyVHlwZSgpO1xyXG4gICAgICAgICAgICAocmVzdWx0IGFzIFN0cnVjdHVyZWRSZWZlclR5cGUpLnJlZklkID0gb2JqWydyZWZJZCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGtpbmQgPSBvYmpbXCJraW5kXCJdO1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IGN0eHQuZ2V0RGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShvYmosIGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIC8vIHN3aXRjaCAob2JqW1wia2luZFwiXSkge1xyXG4gICAgICAgIC8vICAgICBjYXNlIERhdGFUeXBlQ29uc3QuREVGQVVMVF9QUklNSVRJVkU6XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgcHJpbWl0aXZlS2luZENvbnZlcnRvciA9IG5ldyBQcmltaXRpdmVUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gcHJpbWl0aXZlS2luZENvbnZlcnRvci5pbml0RnJvbU9iamVjdChvYmopO1xyXG4gICAgICAgIC8vICAgICBjYXNlIERhdGFUeXBlQ29uc3QuREVGQVVMVF9DT0xMRUNUSU9OOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGNvbGxlY3Rpb25Db252ZXJ0b3IgPSBuZXcgQ29sbGVjdGlvblR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX01BUDpcclxuICAgICAgICAvLyAgICAgICAgIGxldCBtYXBDb252ZXJ0b3IgPSBuZXcgTWFwVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIG1hcENvbnZlcnRvci5pbml0RnJvbU9iamVjdChvYmopO1xyXG4gICAgICAgIC8vICAgICBjYXNlIERhdGFUeXBlQ29uc3QuREVGQVVMVF9TVFJVQ1RVUkVEOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHN0cnVjdHVyZUNvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHN0cnVjdHVyZUNvbnZlcnRvci5pbml0RnJvbU9iamVjdChvYmopO1xyXG4gICAgICAgIC8vICAgICBjYXNlIERhdGFUeXBlQ29uc3QuREVGQVVMVF9FTlRJVFk6XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgZW50aXR5Q29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gZW50aXR5Q29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX1ZBTFVFX09CSkVDVDpcclxuICAgICAgICAvLyAgICAgICAgIGxldCB2b0NvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHZvQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5ERUZBVUxUX0RBVEFfVFJBTlNGRVJfT0JKRUNUOlxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGR0b0NvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIGR0b0NvbnZlcnRvci5pbml0RnJvbU9iamVjdChvYmopO1xyXG4gICAgICAgIC8vICAgICBjYXNlIERhdGFUeXBlQ29uc3QuREVGQVVMVF9FTlVNRVJBVElPTjpcclxuICAgICAgICAvLyAgICAgICAgIGxldCBlbnVtZXJhdGlvbkNvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIGVudW1lcmF0aW9uQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KG9iaik7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgRGF0YVR5cGVDb25zdC5TVFJVQ1RVUkVEX1JFRjpcclxuICAgICAgICAvLyAgICAgICAgIGxldCBzdHJ1Y3R1cmVSZWZDb252ZXJ0b3IgPSBuZXcgU3RydWN0dXJlZFR5cGVSZWZlckNvbnZlcnRvcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHN0cnVjdHVyZVJlZkNvbnZlcnRvci5pbml0RnJvbU9iamVjdChvYmopO1xyXG4gICAgICAgIC8vICAgICBkZWZhdWx0OlxyXG4gICAgICAgIC8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDmlbDmja7nsbvlnovkuI3mlK/mjIHnmoQke29ialtcImtpbmRcIl1957G75Z6L77yBYCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG59Il19