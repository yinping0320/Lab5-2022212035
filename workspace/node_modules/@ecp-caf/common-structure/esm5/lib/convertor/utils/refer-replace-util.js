/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';
var ReferReplaceUtil = /** @class */ (function () {
    function ReferReplaceUtil() {
    }
    /**
     * @param {?} allStructureTypes
     * @param {?} operations
     * @return {?}
     */
    ReferReplaceUtil.replaceOperationRefer = /**
     * @param {?} allStructureTypes
     * @param {?} operations
     * @return {?}
     */
    function (allStructureTypes, operations) {
        var _this = this;
        if (operations != null) {
            operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            function (op) {
                /** @type {?} */
                var retType = op.returnType;
                if (retType != null && retType instanceof StructuredReferType) {
                    /** @type {?} */
                    var structureTypeId = ((/** @type {?} */ (retType))).refId;
                    /** @type {?} */
                    var queryStructureType = _this.getRefStructureType(allStructureTypes, structureTypeId);
                    op.returnType = queryStructureType;
                }
                if (op.parameters != null) {
                    op.parameters.forEach((/**
                     * @param {?} parameter
                     * @return {?}
                     */
                    function (parameter) {
                        /** @type {?} */
                        var parameterType = parameter.parameterType;
                        if (parameterType instanceof StructuredReferType) {
                            /** @type {?} */
                            var structureTypeId = ((/** @type {?} */ (parameterType))).refId;
                            /** @type {?} */
                            var queryStructureType = _this.getRefStructureType(allStructureTypes, structureTypeId);
                            parameter.parameterType = queryStructureType;
                        }
                    }));
                }
            }));
        }
    };
    /**
     * @param {?} structure
     * @return {?}
     */
    ReferReplaceUtil.replacePropertyRefer = /**
     * @param {?} structure
     * @return {?}
     */
    function (structure) {
        var _this = this;
        /** @type {?} */
        var allStructures = this.getAllStructuredTypes(structure);
        if (structure.structuredTypes != null) {
            structure.structuredTypes.forEach((/**
             * @param {?} structureType
             * @return {?}
             */
            function (structureType) {
                if (structureType.properties != null) {
                    structureType.properties.forEach((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    function (prop) {
                        if (prop.propertyType instanceof StructuredReferType) {
                            /** @type {?} */
                            var structureTypeId = ((/** @type {?} */ (prop.propertyType))).refId;
                            /** @type {?} */
                            var queryStructureType = _this.getRefStructureType(allStructures, structureTypeId);
                            prop.propertyType = queryStructureType;
                        }
                    }));
                }
            }));
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            function (refStructure) {
                _this.replacePropertyRefer(refStructure);
            }));
        }
    };
    /**
     * @param {?} allStructures
     * @param {?} structureId
     * @return {?}
     */
    ReferReplaceUtil.getRefStructureType = /**
     * @param {?} allStructures
     * @param {?} structureId
     * @return {?}
     */
    function (allStructures, structureId) {
        /** @type {?} */
        var queryStructureType = allStructures.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.id == structureId; }));
        return queryStructureType;
    };
    /**
     * @param {?} structure
     * @return {?}
     */
    ReferReplaceUtil.getAllStructuredTypes = /**
     * @param {?} structure
     * @return {?}
     */
    function (structure) {
        /** @type {?} */
        var array = new Array();
        if (structure.structuredTypes != null) {
            array = array.concat(structure.structuredTypes);
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            function (refStructure) {
                if (refStructure.structuredTypes != null) {
                    array = array.concat(refStructure.structuredTypes);
                }
            }));
        }
        return array;
    };
    return ReferReplaceUtil;
}());
export { ReferReplaceUtil };
//# sourceMappingURL=data:application/json;base64,