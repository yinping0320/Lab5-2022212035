/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
var MapTypeConvertor = /** @class */ (function () {
    function MapTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    MapTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        var maptype = (/** @type {?} */ (datatype));
        obj['kind'] = maptype.kind;
        obj['keyType'] = null;
        if (maptype.keyType) {
            /** @type {?} */
            var kind = maptype.keyType.getKind();
            if (!kind) {
                throw new Error('Map类型序列化时KeyType的TypeKind为空！');
            }
            obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);
        }
        obj['valueType'] = null;
        if (maptype.valueType) {
            /** @type {?} */
            var kind = maptype.valueType.getKind();
            if (!kind) {
                throw new Error('Map类型序列化时ValueType的TypeKind为空！');
            }
            obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);
        }
        if (maptype.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(maptype, obj);
        }
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    MapTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var maptype = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        maptype.kind = obj['kind'];
        if (obj['keyType']) {
            /** @type {?} */
            var kind = obj['keyType']['kind'];
            if (!kind) {
                throw new Error('解析MapType的KeyType属性时数据类型的TypeKind为空！');
            }
            maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);
        }
        if (obj['valueType']) {
            /** @type {?} */
            var kind = obj['valueType']['kind'];
            if (!kind) {
                throw new Error('解析MapType的ValueType属性时数据类型的TypeKind为空！');
            }
            maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(maptype, obj);
        }
    };
    return MapTypeConvertor;
}());
export { MapTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL21hcC10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEU7SUFBQTtJQTZEQSxDQUFDOzs7Ozs7O0lBM0RHLDBDQUFlOzs7Ozs7SUFBZixVQUFnQixHQUFXLEVBQUUsUUFBbUIsRUFBRSxJQUF1QjtRQUNyRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsT0FBTztTQUNWOztZQUVHLE9BQU8sR0FBRyxtQkFBQSxRQUFRLEVBQVc7UUFDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDM0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7O2dCQUNiLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQzthQUNuRDtZQUNELEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMvRTtRQUVELEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFOztnQkFDZixJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7YUFDckQ7WUFDRCxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbkY7UUFFRCxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7O2dCQUNmLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7Ozs7Ozs7SUFFRCx5Q0FBYzs7Ozs7O0lBQWQsVUFBZSxRQUFtQixFQUFFLEdBQVcsRUFBRSxJQUF1Qjs7WUFDaEUsT0FBTyxHQUFHLG1CQUFBLFFBQVEsRUFBVztRQUNqQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTztTQUNWO1FBQ0QsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0IsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7O2dCQUNaLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsT0FBTyxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlFO1FBRUQsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7O2dCQUNkLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ25DLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO2FBQzdEO1lBQ0QsT0FBTyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7O2dCQUNkLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM3QztJQUNMLENBQUM7SUFDTCx1QkFBQztBQUFELENBQUMsQUE3REQsSUE2REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXBUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9tYXAtdHlwZS9tYXAtdHlwZSc7XHJcbmltcG9ydCB7IERhdGFUeXBlQ29udmVydFV0aWwgfSBmcm9tICcuLi91dGlscy9kYXRhLXR5cGUtY29udmVydC11dGlsJztcclxuaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFwVHlwZUNvbnZlcnRvciB7XHJcblxyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogT2JqZWN0LCBkYXRhdHlwZTogSURhdGFUeXBlLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghZGF0YXR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1hcHR5cGUgPSBkYXRhdHlwZSBhcyBNYXBUeXBlO1xyXG4gICAgICAgIG9ialsna2luZCddID0gbWFwdHlwZS5raW5kO1xyXG4gICAgICAgIG9ialsna2V5VHlwZSddID0gbnVsbDtcclxuICAgICAgICBpZiAobWFwdHlwZS5rZXlUeXBlKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gbWFwdHlwZS5rZXlUeXBlLmdldEtpbmQoKTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcOexu+Wei+W6j+WIl+WMluaXtktleVR5cGXnmoRUeXBlS2luZOS4uuepuu+8gScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialsna2V5VHlwZSddID0gRGF0YVR5cGVDb252ZXJ0VXRpbC5jb252ZXJ0VG9PYmplY3QobWFwdHlwZS5rZXlUeXBlLCBjdHh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9ialsndmFsdWVUeXBlJ10gPSBudWxsO1xyXG4gICAgICAgIGlmIChtYXB0eXBlLnZhbHVlVHlwZSkge1xyXG4gICAgICAgICAgICBsZXQga2luZCA9IG1hcHR5cGUudmFsdWVUeXBlLmdldEtpbmQoKTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcOexu+Wei+W6j+WIl+WMluaXtlZhbHVlVHlwZeeahFR5cGVLaW5k5Li656m677yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqWyd2YWx1ZVR5cGUnXSA9IERhdGFUeXBlQ29udmVydFV0aWwuY29udmVydFRvT2JqZWN0KG1hcHR5cGUudmFsdWVUeXBlLCBjdHh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChtYXB0eXBlLmV4dGVuc2lvbikge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9KT2JqKG1hcHR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGRhdGFUeXBlOiBJRGF0YVR5cGUsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBtYXB0eXBlID0gZGF0YVR5cGUgYXMgTWFwVHlwZTtcclxuICAgICAgICBpZiAoIW9iaikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcHR5cGUua2luZCA9IG9ialsna2luZCddO1xyXG5cclxuICAgICAgICBpZiAob2JqWydrZXlUeXBlJ10pIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBvYmpbJ2tleVR5cGUnXVsna2luZCddO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6QTWFwVHlwZeeahEtleVR5cGXlsZ7mgKfml7bmlbDmja7nsbvlnovnmoRUeXBlS2luZOS4uuepuu+8gScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hcHR5cGUua2V5VHlwZSA9IERhdGFUeXBlQ29udmVydFV0aWwuaW5pdEZyb21PYmplY3Qob2JqWydrZXlUeXBlJ10sIGN0eHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9ialsndmFsdWVUeXBlJ10pIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBvYmpbJ3ZhbHVlVHlwZSddWydraW5kJ107XHJcbiAgICAgICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfop6PmnpBNYXBUeXBl55qEVmFsdWVUeXBl5bGe5oCn5pe25pWw5o2u57G75Z6L55qEVHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXB0eXBlLnZhbHVlVHlwZSA9IERhdGFUeXBlQ29udmVydFV0aWwuaW5pdEZyb21PYmplY3Qob2JqWyd2YWx1ZVR5cGUnXSwgY3R4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob2JqW1wiZXh0ZW5zaW9uXCJdKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihtYXB0eXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==