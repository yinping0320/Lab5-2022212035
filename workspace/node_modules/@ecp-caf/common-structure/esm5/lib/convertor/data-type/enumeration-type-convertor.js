/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredTypeConvertor } from './structured-type-convertor';
import { EnumerationItemConvertor } from './enumeration-item-convertor';
import { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';
import { ExtensionConvertor } from '../extension/extension-convertor';
var EnumerationTypeConvertor = /** @class */ (function () {
    function EnumerationTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    EnumerationTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        /** @type {?} */
        var structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.convertToObject(obj, datatype, ctxt);
        /** @type {?} */
        var enumerationType = (/** @type {?} */ (datatype));
        //enum items
        obj['enumerationItems'] = new Array();
        if (enumerationType.enumerationItems) {
            /** @type {?} */
            var convertor_1 = new EnumerationItemConvertor();
            enumerationType.enumerationItems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var itemObj = new Object();
                convertor_1.convertToObject(itemObj, item);
                obj['enumerationItems'].push(itemObj);
            }));
        }
        if (enumerationType.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(enumerationType, obj);
        }
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    EnumerationTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
        //enum items
        /** @type {?} */
        var enumerationType = (/** @type {?} */ (dataType));
        if (obj['enumerationItems']) {
            enumerationType.enumerationItems = new Array();
            /** @type {?} */
            var convertor_2 = new EnumerationItemConvertor();
            obj['enumerationItems'].forEach((/**
             * @param {?} itemObj
             * @return {?}
             */
            function (itemObj) {
                /** @type {?} */
                var item = new EnumerationItem();
                convertor_2.initFromObject(item, itemObj);
                enumerationType.enumerationItems.push(item);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(enumerationType, obj);
        }
    };
    return EnumerationTypeConvertor;
}());
export { EnumerationTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bWVyYXRpb24tdHlwZS1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9kYXRhLXR5cGUvZW51bWVyYXRpb24tdHlwZS1jb252ZXJ0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSXRFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUMzRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RTtJQUFBO0lBNkNBLENBQUM7Ozs7Ozs7SUEzQ0csa0RBQWU7Ozs7OztJQUFmLFVBQWdCLEdBQVcsRUFBRSxRQUFtQixFQUFFLElBQXVCOztZQUNqRSxtQkFBbUIsR0FBNEIsSUFBSSx1QkFBdUIsRUFBRTtRQUNoRixtQkFBbUIsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQzs7WUFDckQsZUFBZSxHQUFHLG1CQUFBLFFBQVEsRUFBbUI7UUFDakQsWUFBWTtRQUNaLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDOUMsSUFBSSxlQUFlLENBQUMsZ0JBQWdCLEVBQUU7O2dCQUM5QixXQUFTLEdBQTZCLElBQUksd0JBQXdCLEVBQUU7WUFDeEUsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLElBQUk7O29CQUNyQyxPQUFPLEdBQUcsSUFBSSxNQUFNLEVBQUU7Z0JBQzFCLFdBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN6QyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUdELElBQUksZUFBZSxDQUFDLFNBQVMsRUFBRTs7Z0JBQ3ZCLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN0RDtJQUVMLENBQUM7Ozs7Ozs7SUFFRCxpREFBYzs7Ozs7O0lBQWQsVUFBZSxRQUFtQixFQUFFLEdBQVcsRUFBRSxJQUF1Qjs7WUFDaEUsbUJBQW1CLEdBQTRCLElBQUksdUJBQXVCLEVBQUU7UUFDaEYsbUJBQW1CLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7OztZQUVwRCxlQUFlLEdBQUcsbUJBQUEsUUFBUSxFQUFtQjtRQUNqRCxJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQ3pCLGVBQWUsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEtBQUssRUFBbUIsQ0FBQzs7Z0JBQzVELFdBQVMsR0FBNkIsSUFBSSx3QkFBd0IsRUFBRTtZQUN4RSxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxPQUFPOztvQkFDL0IsSUFBSSxHQUFvQixJQUFJLGVBQWUsRUFBRTtnQkFDakQsV0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFOztnQkFDZCxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDO0lBQ0wsK0JBQUM7QUFBRCxDQUFDLEFBN0NELElBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yIH0gZnJvbSAnLi9zdHJ1Y3R1cmVkLXR5cGUtY29udmVydG9yJztcclxuaW1wb3J0IHsgRW50aXR5VHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL2VudGl0eS10eXBlL2VudGl0eS10eXBlJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IEVudW1lcmF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL2VudW1lcmF0aW9uLXR5cGUvZW51bWVyYXRpb24tdHlwZSc7XHJcbmltcG9ydCB7IEVudW1lcmF0aW9uSXRlbUNvbnZlcnRvciB9IGZyb20gJy4vZW51bWVyYXRpb24taXRlbS1jb252ZXJ0b3InO1xyXG5pbXBvcnQgeyBFbnVtZXJhdGlvbkl0ZW0gfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3N0cnVjdHVyZWQtdHlwZS9lbnVtZXJhdGlvbi10eXBlL2VudW1lcmF0aW9uLWl0ZW0nO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgRW51bWVyYXRpb25UeXBlQ29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOiBPYmplY3QsIGRhdGF0eXBlOiBJRGF0YVR5cGUsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZWRDb252ZXJ0b3I6IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgc3RydWN0dXJlZENvbnZlcnRvci5jb252ZXJ0VG9PYmplY3Qob2JqLCBkYXRhdHlwZSwgY3R4dCk7XHJcbiAgICAgICAgbGV0IGVudW1lcmF0aW9uVHlwZSA9IGRhdGF0eXBlIGFzIEVudW1lcmF0aW9uVHlwZTtcclxuICAgICAgICAvL2VudW0gaXRlbXNcclxuICAgICAgICBvYmpbJ2VudW1lcmF0aW9uSXRlbXMnXSA9IG5ldyBBcnJheTxPYmplY3Q+KCk7XHJcbiAgICAgICAgaWYgKGVudW1lcmF0aW9uVHlwZS5lbnVtZXJhdGlvbkl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGxldCBjb252ZXJ0b3I6IEVudW1lcmF0aW9uSXRlbUNvbnZlcnRvciA9IG5ldyBFbnVtZXJhdGlvbkl0ZW1Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZW51bWVyYXRpb25UeXBlLmVudW1lcmF0aW9uSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtT2JqID0gbmV3IE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgY29udmVydG9yLmNvbnZlcnRUb09iamVjdChpdGVtT2JqLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgIG9ialsnZW51bWVyYXRpb25JdGVtcyddLnB1c2goaXRlbU9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChlbnVtZXJhdGlvblR5cGUuZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb0pPYmooZW51bWVyYXRpb25UeXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3QoZGF0YVR5cGU6IElEYXRhVHlwZSwgb2JqOiBPYmplY3QsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZWRDb252ZXJ0b3I6IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgc3RydWN0dXJlZENvbnZlcnRvci5pbml0RnJvbU9iamVjdChkYXRhVHlwZSwgb2JqLCBjdHh0KTtcclxuICAgICAgICAvL2VudW0gaXRlbXNcclxuICAgICAgICBsZXQgZW51bWVyYXRpb25UeXBlID0gZGF0YVR5cGUgYXMgRW51bWVyYXRpb25UeXBlO1xyXG4gICAgICAgIGlmIChvYmpbJ2VudW1lcmF0aW9uSXRlbXMnXSkge1xyXG4gICAgICAgICAgICBlbnVtZXJhdGlvblR5cGUuZW51bWVyYXRpb25JdGVtcyA9IG5ldyBBcnJheTxFbnVtZXJhdGlvbkl0ZW0+KCk7XHJcbiAgICAgICAgICAgIGxldCBjb252ZXJ0b3I6IEVudW1lcmF0aW9uSXRlbUNvbnZlcnRvciA9IG5ldyBFbnVtZXJhdGlvbkl0ZW1Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgb2JqWydlbnVtZXJhdGlvbkl0ZW1zJ10uZm9yRWFjaChpdGVtT2JqID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtOiBFbnVtZXJhdGlvbkl0ZW0gPSBuZXcgRW51bWVyYXRpb25JdGVtKCk7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0b3IuaW5pdEZyb21PYmplY3QoaXRlbSwgaXRlbU9iaik7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhdGlvblR5cGUuZW51bWVyYXRpb25JdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmpbXCJleHRlbnNpb25cIl0pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvT2JqKGVudW1lcmF0aW9uVHlwZSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=