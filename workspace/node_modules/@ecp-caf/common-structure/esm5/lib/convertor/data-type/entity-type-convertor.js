/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredTypeConvertor } from './structured-type-convertor';
import { ExtensionConvertor } from '../extension/extension-convertor';
var EntityTypeConvertor = /** @class */ (function () {
    function EntityTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    EntityTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        /** @type {?} */
        var structuredConvertor = new StructuredTypeConvertor();
        /** @type {?} */
        var result = structuredConvertor.convertToObject(obj, datatype, ctxt);
        result['primaryKeys'] = new Array();
        /** @type {?} */
        var entityType = (/** @type {?} */ (datatype));
        if (entityType.primaryKeys) {
            entityType.primaryKeys.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                result['primaryKeys'].push(element);
            }));
        }
        if (entityType.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(entityType, obj);
        }
        return result;
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    EntityTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var entityType = (/** @type {?} */ (dataType));
        /** @type {?} */
        var structuredConvertor = new StructuredTypeConvertor();
        structuredConvertor.initFromObject(dataType, obj, ctxt);
        if (obj['primaryKey']) {
            entityType.primaryKeys = new Array();
            obj['primaryKey'].forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                entityType.primaryKeys.push(element);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(entityType, obj);
        }
    };
    return EntityTypeConvertor;
}());
export { EntityTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL2VudGl0eS10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEU7SUFBQTtJQW9DQSxDQUFDOzs7Ozs7O0lBbENHLDZDQUFlOzs7Ozs7SUFBZixVQUFnQixHQUFXLEVBQUUsUUFBbUIsRUFBRSxJQUF1Qjs7WUFDakUsbUJBQW1CLEdBQTRCLElBQUksdUJBQXVCLEVBQUU7O1lBQzVFLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUM7UUFDckUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7O1lBQ3hDLFVBQVUsR0FBRyxtQkFBQSxRQUFRLEVBQWM7UUFDdkMsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO1lBQ3hCLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsT0FBTztnQkFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN4QyxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFOztnQkFDbEIsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Ozs7OztJQUVELDRDQUFjOzs7Ozs7SUFBZCxVQUFlLFFBQW1CLEVBQUUsR0FBVyxFQUFFLElBQXVCOztZQUNoRSxVQUFVLEdBQUcsbUJBQUEsUUFBUSxFQUFjOztZQUNuQyxtQkFBbUIsR0FBNEIsSUFBSSx1QkFBdUIsRUFBRTtRQUNoRixtQkFBbUIsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuQixVQUFVLENBQUMsV0FBVyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7WUFDN0MsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLE9BQU87Z0JBQzdCLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFFRCxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTs7Z0JBQ2Qsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQXBDRCxJQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvciB9IGZyb20gJy4vc3RydWN0dXJlZC10eXBlLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IEVudGl0eVR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3N0cnVjdHVyZWQtdHlwZS9lbnRpdHktdHlwZS9lbnRpdHktdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5VHlwZUNvbnZlcnRvciB7XHJcblxyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogT2JqZWN0LCBkYXRhdHlwZTogSURhdGFUeXBlLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzdHJ1Y3R1cmVkQ29udmVydG9yOiBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvcigpO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBzdHJ1Y3R1cmVkQ29udmVydG9yLmNvbnZlcnRUb09iamVjdChvYmosIGRhdGF0eXBlLCBjdHh0KTtcclxuICAgICAgICByZXN1bHRbJ3ByaW1hcnlLZXlzJ10gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xyXG4gICAgICAgIGxldCBlbnRpdHlUeXBlID0gZGF0YXR5cGUgYXMgRW50aXR5VHlwZTtcclxuICAgICAgICBpZiAoZW50aXR5VHlwZS5wcmltYXJ5S2V5cykge1xyXG4gICAgICAgICAgICBlbnRpdHlUeXBlLnByaW1hcnlLZXlzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbJ3ByaW1hcnlLZXlzJ10ucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZW50aXR5VHlwZS5leHRlbnNpb24pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvSk9iaihlbnRpdHlUeXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGRhdGFUeXBlOiBJRGF0YVR5cGUsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBlbnRpdHlUeXBlID0gZGF0YVR5cGUgYXMgRW50aXR5VHlwZTtcclxuICAgICAgICBsZXQgc3RydWN0dXJlZENvbnZlcnRvcjogU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IgPSBuZXcgU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICBzdHJ1Y3R1cmVkQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KGRhdGFUeXBlLCBvYmosIGN0eHQpO1xyXG4gICAgICAgIGlmIChvYmpbJ3ByaW1hcnlLZXknXSkge1xyXG4gICAgICAgICAgICBlbnRpdHlUeXBlLnByaW1hcnlLZXlzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuICAgICAgICAgICAgb2JqWydwcmltYXJ5S2V5J10uZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGVudGl0eVR5cGUucHJpbWFyeUtleXMucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob2JqW1wiZXh0ZW5zaW9uXCJdKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihlbnRpdHlUeXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==