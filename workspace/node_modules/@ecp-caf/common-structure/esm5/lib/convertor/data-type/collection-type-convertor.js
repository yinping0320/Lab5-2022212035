/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
var CollectionTypeConvertor = /** @class */ (function () {
    function CollectionTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    CollectionTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        var collectiontype = (/** @type {?} */ (datatype));
        obj['kind'] = collectiontype.kind;
        obj['elementType'] = null;
        if (collectiontype.elementType) {
            /** @type {?} */
            var kind = collectiontype.elementType.getKind();
            if (!kind) {
                throw new Error('集合类型序列化时TypeKind为空！');
            }
            obj['elementType'] = DataTypeConvertUtil.convertToObject(collectiontype.elementType, ctxt);
        }
        if (collectiontype.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(collectiontype, obj);
        }
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    CollectionTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var collectionType = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        collectionType.kind = obj['kind'];
        if (obj['elementType']) {
            /** @type {?} */
            var kind = obj['elementType']['kind'];
            if (!kind) {
                throw new Error('解析CollectionType时数据类型的TypeKind为空！');
            }
            collectionType.elementType = DataTypeConvertUtil.initFromObject(obj['elementType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(collectionType, obj);
        }
    };
    return CollectionTypeConvertor;
}());
export { CollectionTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi10eXBlLWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL2RhdGEtdHlwZS9jb2xsZWN0aW9uLXR5cGUtY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUd0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RTtJQUFBO0lBeUNBLENBQUM7Ozs7Ozs7SUF2Q0csaURBQWU7Ozs7OztJQUFmLFVBQWdCLEdBQVcsRUFBRSxRQUFtQixFQUFFLElBQXVCO1FBQ3JFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxPQUFPO1NBQ1Y7O1lBQ0csY0FBYyxHQUFHLG1CQUFBLFFBQVEsRUFBa0I7UUFDL0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDbEMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLGNBQWMsQ0FBQyxXQUFXLEVBQUU7O2dCQUN4QixJQUFJLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDL0MsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7YUFDMUM7WUFDRCxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUY7UUFFRCxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUU7O2dCQUN0QixrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDOzs7Ozs7O0lBRUQsZ0RBQWM7Ozs7OztJQUFkLFVBQWUsUUFBbUIsRUFBRSxHQUFXLEVBQUUsSUFBdUI7O1lBQ2hFLGNBQWMsR0FBRyxtQkFBQSxRQUFRLEVBQWtCO1FBQy9DLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxjQUFjLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRTs7Z0JBQ2hCLElBQUksR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO2FBQ3hEO1lBQ0QsY0FBYyxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7O2dCQUNkLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNwRDtJQUNMLENBQUM7SUFDTCw4QkFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xsZWN0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvY29sbGVjdGlvbi10eXBlL2NvbGxlY3Rpb24tdHlwZSc7XHJcbmltcG9ydCB7IERhdGFUeXBlQ29udmVydFV0aWwgfSBmcm9tICcuLi91dGlscy9kYXRhLXR5cGUtY29udmVydC11dGlsJztcclxuaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvblR5cGVDb252ZXJ0b3Ige1xyXG5cclxuICAgIGNvbnZlcnRUb09iamVjdChvYmo6IE9iamVjdCwgZGF0YXR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWRhdGF0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNvbGxlY3Rpb250eXBlID0gZGF0YXR5cGUgYXMgQ29sbGVjdGlvblR5cGU7XHJcbiAgICAgICAgb2JqWydraW5kJ10gPSBjb2xsZWN0aW9udHlwZS5raW5kO1xyXG4gICAgICAgIG9ialsnZWxlbWVudFR5cGUnXSA9IG51bGw7XHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb250eXBlLmVsZW1lbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gY29sbGVjdGlvbnR5cGUuZWxlbWVudFR5cGUuZ2V0S2luZCgpO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6ZuG5ZCI57G75Z6L5bqP5YiX5YyW5pe2VHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmpbJ2VsZW1lbnRUeXBlJ10gPSBEYXRhVHlwZUNvbnZlcnRVdGlsLmNvbnZlcnRUb09iamVjdChjb2xsZWN0aW9udHlwZS5lbGVtZW50VHlwZSwgY3R4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29sbGVjdGlvbnR5cGUuZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb0pPYmooY29sbGVjdGlvbnR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGRhdGFUeXBlOiBJRGF0YVR5cGUsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIHZhciBjb2xsZWN0aW9uVHlwZSA9IGRhdGFUeXBlIGFzIENvbGxlY3Rpb25UeXBlO1xyXG4gICAgICAgIGlmICghb2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29sbGVjdGlvblR5cGUua2luZCA9IG9ialsna2luZCddO1xyXG4gICAgICAgIGlmIChvYmpbJ2VsZW1lbnRUeXBlJ10pIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBvYmpbJ2VsZW1lbnRUeXBlJ11bJ2tpbmQnXTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ino+aekENvbGxlY3Rpb25UeXBl5pe25pWw5o2u57G75Z6L55qEVHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHlwZS5lbGVtZW50VHlwZSA9IERhdGFUeXBlQ29udmVydFV0aWwuaW5pdEZyb21PYmplY3Qob2JqWydlbGVtZW50VHlwZSddLCBjdHh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ialtcImV4dGVuc2lvblwiXSkge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9PYmooY29sbGVjdGlvblR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19