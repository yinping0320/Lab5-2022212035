/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExtensionConvertor } from '../extension/extension-convertor';
var ObjectTypeConvertor = /** @class */ (function () {
    function ObjectTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    ObjectTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        var objectType = (/** @type {?} */ (datatype));
        obj['kind'] = objectType.kind;
        if (objectType.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(objectType, obj);
        }
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    ObjectTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var objectType = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        objectType.kind = obj['kind'];
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(objectType, obj);
        }
    };
    return ObjectTypeConvertor;
}());
export { ObjectTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL29iamVjdC10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEU7SUFBQTtJQTJCQSxDQUFDOzs7Ozs7O0lBMUJHLDZDQUFlOzs7Ozs7SUFBZixVQUFnQixHQUFXLEVBQUUsUUFBbUIsRUFBRSxJQUF1QjtRQUNyRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsT0FBTztTQUNWOztZQUNHLFVBQVUsR0FBRyxtQkFBQSxRQUFRLEVBQWM7UUFDdkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFFOUIsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFOztnQkFDbEIsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO0lBQ0wsQ0FBQzs7Ozs7OztJQUVELDRDQUFjOzs7Ozs7SUFBZCxVQUFlLFFBQW1CLEVBQUUsR0FBVyxFQUFFLElBQXVCOztZQUNoRSxVQUFVLEdBQUcsbUJBQUEsUUFBUSxFQUFjO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxVQUFVLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUc5QixJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTs7Z0JBQ2Qsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQTNCRCxJQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvaS1kYXRhLXR5cGUnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuaW1wb3J0IHsgT2JqZWN0VHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvb2JqZWN0LXR5cGUvb2JqZWN0LXR5cGUnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbnZlcnRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0VHlwZUNvbnZlcnRvciB7XHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOiBPYmplY3QsIGRhdGF0eXBlOiBJRGF0YVR5cGUsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFkYXRhdHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBvYmplY3RUeXBlID0gZGF0YXR5cGUgYXMgT2JqZWN0VHlwZTtcclxuICAgICAgICBvYmpbJ2tpbmQnXSA9IG9iamVjdFR5cGUua2luZDtcclxuXHJcbiAgICAgICAgaWYgKG9iamVjdFR5cGUuZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb0pPYmoob2JqZWN0VHlwZSwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3QoZGF0YVR5cGU6IElEYXRhVHlwZSwgb2JqOiBPYmplY3QsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IG9iamVjdFR5cGUgPSBkYXRhVHlwZSBhcyBPYmplY3RUeXBlO1xyXG4gICAgICAgIGlmICghb2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqZWN0VHlwZS5raW5kID0gb2JqWydraW5kJ107XHJcblxyXG5cclxuICAgICAgICBpZiAob2JqW1wiZXh0ZW5zaW9uXCJdKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb09iaihvYmplY3RUeXBlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==