/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ExtensionConvertor } from '../extension/extension-convertor';
var PrimitiveTypeConvertor = /** @class */ (function () {
    function PrimitiveTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    PrimitiveTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        if (!datatype) {
            return;
        }
        /** @type {?} */
        var primitivetype = (/** @type {?} */ (datatype));
        obj['kind'] = primitivetype.kind;
        //这是number
        /** @type {?} */
        var primitiveTypeKindNum = primitivetype.primitiveTypeKind;
        obj['primitiveTypeKind'] = primitiveTypeKindNum;
        if (primitivetype.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(primitivetype, obj);
        }
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    PrimitiveTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var primitivetype = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        primitivetype.kind = obj['kind'];
        primitivetype.primitiveTypeKind = (/** @type {?} */ (obj['primitiveTypeKind']));
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(primitivetype, obj);
        }
    };
    return PrimitiveTypeConvertor;
}());
export { PrimitiveTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXR5cGUtY29udmVydG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9jb252ZXJ0b3IvZGF0YS10eXBlL3ByaW1pdGl2ZS10eXBlLWNvbnZlcnRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFdEU7SUFBQTtJQStCQSxDQUFDOzs7Ozs7O0lBN0JHLGdEQUFlOzs7Ozs7SUFBZixVQUFnQixHQUFXLEVBQUUsUUFBbUIsRUFBRSxJQUF1QjtRQUNyRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsT0FBTztTQUNWOztZQUNHLGFBQWEsR0FBRyxtQkFBQSxRQUFRLEVBQWlCO1FBQzdDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDOzs7WUFFN0Isb0JBQW9CLEdBQUcsYUFBYSxDQUFDLGlCQUFpQjtRQUMxRCxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztRQUVoRCxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUU7O2dCQUNyQixrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDcEQ7SUFFTCxDQUFDOzs7Ozs7O0lBRUQsK0NBQWM7Ozs7OztJQUFkLFVBQWUsUUFBbUIsRUFBRSxHQUFXLEVBQUUsSUFBdUI7O1lBQ2hFLGFBQWEsR0FBRyxtQkFBQSxRQUFRLEVBQWlCO1FBQzdDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxhQUFhLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxhQUFhLENBQUMsaUJBQWlCLEdBQUcsbUJBQUEsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEVBQVUsQ0FBQztRQUNyRSxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTs7Z0JBQ2Qsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0FBQyxBQS9CRCxJQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaW1pdGl2ZVR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3ByaW1pdGl2ZS10eXBlL3ByaW1pdGl2ZS10eXBlJztcclxuaW1wb3J0IHsgUHJpbWl0aXZlVHlwZUtpbmQgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL3ByaW1pdGl2ZS10eXBlL3ByaW1pdGl2ZS10eXBlLWtpbmQnO1xyXG5pbXBvcnQgeyBJRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kZWZpbmUvZGF0YS10eXBlL2ktZGF0YS10eXBlJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkNvbnZlcnRvciB9IGZyb20gJy4uL2V4dGVuc2lvbi9leHRlbnNpb24tY29udmVydG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcmltaXRpdmVUeXBlQ29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOiBPYmplY3QsIGRhdGF0eXBlOiBJRGF0YVR5cGUsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFkYXRhdHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwcmltaXRpdmV0eXBlID0gZGF0YXR5cGUgYXMgUHJpbWl0aXZlVHlwZTtcclxuICAgICAgICBvYmpbJ2tpbmQnXSA9IHByaW1pdGl2ZXR5cGUua2luZDtcclxuICAgICAgICAvL+i/meaYr251bWJlclxyXG4gICAgICAgIGxldCBwcmltaXRpdmVUeXBlS2luZE51bSA9IHByaW1pdGl2ZXR5cGUucHJpbWl0aXZlVHlwZUtpbmQ7XHJcbiAgICAgICAgb2JqWydwcmltaXRpdmVUeXBlS2luZCddID0gcHJpbWl0aXZlVHlwZUtpbmROdW07XHJcblxyXG4gICAgICAgIGlmIChwcmltaXRpdmV0eXBlLmV4dGVuc2lvbikge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9KT2JqKHByaW1pdGl2ZXR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGRhdGFUeXBlOiBJRGF0YVR5cGUsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBwcmltaXRpdmV0eXBlID0gZGF0YVR5cGUgYXMgUHJpbWl0aXZlVHlwZTtcclxuICAgICAgICBpZiAoIW9iaikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaW1pdGl2ZXR5cGUua2luZCA9IG9ialsna2luZCddO1xyXG4gICAgICAgIHByaW1pdGl2ZXR5cGUucHJpbWl0aXZlVHlwZUtpbmQgPSBvYmpbJ3ByaW1pdGl2ZVR5cGVLaW5kJ10gYXMgbnVtYmVyO1xyXG4gICAgICAgIGlmIChvYmpbXCJleHRlbnNpb25cIl0pIHtcclxuICAgICAgICAgICAgbGV0IGV4dGVuc2lvbkNvbnZlcnRvciA9IG5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvT2JqKHByaW1pdGl2ZXR5cGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19