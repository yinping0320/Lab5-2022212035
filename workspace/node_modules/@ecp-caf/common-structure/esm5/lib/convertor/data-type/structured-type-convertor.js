/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PropertyConvertor } from '../property/property-convertor';
import { ExtensionConvertor } from '../extension/extension-convertor';
var StructuredTypeConvertor = /** @class */ (function () {
    function StructuredTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    StructuredTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        /** @type {?} */
        var structure = (/** @type {?} */ (datatype));
        if (!structure) {
            return;
        }
        obj['kind'] = structure.kind;
        obj['id'] = structure.id;
        obj['code'] = structure.code;
        obj['name'] = structure.name;
        obj['description'] = structure.description;
        obj['properties'] = new Array();
        if (structure.properties) {
            /** @type {?} */
            var propertyConvertor = new PropertyConvertor();
            structure.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                /** @type {?} */
                var kind = property.kind;
                /** @type {?} */
                var serializer = ctxt.getPropertySerializerFactory().get(kind);
                /** @type {?} */
                var propertyObj = serializer.serialize(property, ctxt);
                obj['properties'].push(propertyObj);
            }));
        }
        if (structure.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(structure, obj);
        }
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    StructuredTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var structure = (/** @type {?} */ (dataType));
        if (!obj) {
            return;
        }
        structure.kind = obj['kind'];
        structure.id = obj['id'];
        structure.name = obj['name'];
        structure.code = obj['code'];
        structure.description = obj['description'];
        if (obj['properties']) {
            structure.properties = new Array();
            /** @type {?} */
            var propertyConvertor = new PropertyConvertor();
            obj['properties'].forEach((/**
             * @param {?} propertyObj
             * @return {?}
             */
            function (propertyObj) {
                /** @type {?} */
                var propKind = propertyObj["kind"];
                /** @type {?} */
                var serializer = ctxt.getPropertySerializerFactory().get(propKind);
                /** @type {?} */
                var property = serializer.deserialize(propertyObj, ctxt);
                structure.properties.push(property);
            }));
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(structure, obj);
        }
    };
    return StructuredTypeConvertor;
}());
export { StructuredTypeConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlZC10eXBlLWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUtY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQU9uRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RTtJQUFBO0lBd0RBLENBQUM7Ozs7Ozs7SUF0REcsaURBQWU7Ozs7OztJQUFmLFVBQWdCLEdBQVcsRUFBRSxRQUFtQixFQUFFLElBQXVCOztZQUNqRSxTQUFTLEdBQUcsbUJBQUEsUUFBUSxFQUFrQjtRQUMxQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osT0FBTztTQUNWO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDekIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDM0MsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDeEMsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFOztnQkFDbEIsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRTtZQUMvQyxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLFFBQVE7O29CQUM3QixJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUk7O29CQUNwQixVQUFVLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzs7b0JBQzFELFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7Z0JBQ3RELEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRTs7Z0JBQ2pCLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDakQsa0JBQWtCLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNoRDtJQUNMLENBQUM7Ozs7Ozs7SUFFRCxnREFBYzs7Ozs7O0lBQWQsVUFBZSxRQUFtQixFQUFFLEdBQVcsRUFBRSxJQUF1Qjs7WUFDaEUsU0FBUyxHQUFHLG1CQUFBLFFBQVEsRUFBa0I7UUFDMUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU87U0FDVjtRQUNELFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTNDLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ25CLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLEVBQVksQ0FBQzs7Z0JBQ3pDLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUU7WUFDL0MsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLFdBQVc7O29CQUM3QixRQUFRLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQzs7b0JBQzlCLFVBQVUsR0FBRyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDOztvQkFDOUQsUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztnQkFDeEQsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFOztnQkFDZCxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1lBQ2pELGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDO0lBQ0wsOEJBQUM7QUFBRCxDQUFDLEFBeERELElBd0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydHkgfSBmcm9tICcuLi8uLi9kZWZpbmUvcHJvcGVydHkvcHJvcGVydHknO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUNvbnZlcnRvciB9IGZyb20gJy4uL3Byb3BlcnR5L3Byb3BlcnR5LWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IFN0cnVjdHVyZWRUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvc3RydWN0dXJlZC10eXBlJztcclxuaW1wb3J0IHsgSURhdGFUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9pLWRhdGEtdHlwZSc7XHJcbmltcG9ydCB7IENvbW1vblN0cnVjdHVyZUNvbnZlcnRvciB9IGZyb20gJy4uL3N0cnVjdHVyZS9jb21tb24tc3RydWN0dXJlLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IENvbW1vblN0cnVjdHVyZSB9IGZyb20gJy4uLy4uL2RlZmluZS9zdHJ1Y3R1cmUvY29tbW9uLXN0cnVjdHVyZSc7XHJcbmltcG9ydCB7IERhdGFUeXBlQ29udmVydFV0aWwgfSBmcm9tICcuLi91dGlscy9kYXRhLXR5cGUtY29udmVydC11dGlsJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkNvbnZlcnRvciB9IGZyb20gJy4uL2V4dGVuc2lvbi9leHRlbnNpb24tY29udmVydG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVkVHlwZUNvbnZlcnRvciB7XHJcblxyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogT2JqZWN0LCBkYXRhdHlwZTogSURhdGFUeXBlLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzdHJ1Y3R1cmUgPSBkYXRhdHlwZSBhcyBTdHJ1Y3R1cmVkVHlwZTtcclxuICAgICAgICBpZiAoIXN0cnVjdHVyZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ialsna2luZCddID0gc3RydWN0dXJlLmtpbmQ7XHJcbiAgICAgICAgb2JqWydpZCddID0gc3RydWN0dXJlLmlkO1xyXG4gICAgICAgIG9ialsnY29kZSddID0gc3RydWN0dXJlLmNvZGU7XHJcbiAgICAgICAgb2JqWyduYW1lJ10gPSBzdHJ1Y3R1cmUubmFtZTtcclxuICAgICAgICBvYmpbJ2Rlc2NyaXB0aW9uJ10gPSBzdHJ1Y3R1cmUuZGVzY3JpcHRpb247XHJcbiAgICAgICAgb2JqWydwcm9wZXJ0aWVzJ10gPSBuZXcgQXJyYXk8T2JqZWN0PigpO1xyXG4gICAgICAgIGlmIChzdHJ1Y3R1cmUucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBsZXQgcHJvcGVydHlDb252ZXJ0b3IgPSBuZXcgUHJvcGVydHlDb252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgc3RydWN0dXJlLnByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2luZCA9IHByb3BlcnR5LmtpbmQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplciA9IGN0eHQuZ2V0UHJvcGVydHlTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eU9iaiA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKHByb3BlcnR5LCBjdHh0KTtcclxuICAgICAgICAgICAgICAgIG9ialsncHJvcGVydGllcyddLnB1c2gocHJvcGVydHlPYmopO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdHJ1Y3R1cmUuZXh0ZW5zaW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbnNpb25Db252ZXJ0b3IgPSBuZXcgRXh0ZW5zaW9uQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbkNvbnZlcnRvci5hZGRUb0pPYmooc3RydWN0dXJlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0RnJvbU9iamVjdChkYXRhVHlwZTogSURhdGFUeXBlLCBvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgc3RydWN0dXJlID0gZGF0YVR5cGUgYXMgU3RydWN0dXJlZFR5cGU7XHJcbiAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdHJ1Y3R1cmUua2luZCA9IG9ialsna2luZCddO1xyXG4gICAgICAgIHN0cnVjdHVyZS5pZCA9IG9ialsnaWQnXTtcclxuICAgICAgICBzdHJ1Y3R1cmUubmFtZSA9IG9ialsnbmFtZSddO1xyXG4gICAgICAgIHN0cnVjdHVyZS5jb2RlID0gb2JqWydjb2RlJ107XHJcbiAgICAgICAgc3RydWN0dXJlLmRlc2NyaXB0aW9uID0gb2JqWydkZXNjcmlwdGlvbiddO1xyXG5cclxuICAgICAgICBpZiAob2JqWydwcm9wZXJ0aWVzJ10pIHtcclxuICAgICAgICAgICAgc3RydWN0dXJlLnByb3BlcnRpZXMgPSBuZXcgQXJyYXk8UHJvcGVydHk+KCk7XHJcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUNvbnZlcnRvciA9IG5ldyBQcm9wZXJ0eUNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBvYmpbJ3Byb3BlcnRpZXMnXS5mb3JFYWNoKHByb3BlcnR5T2JqID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9wS2luZCA9IHByb3BlcnR5T2JqW1wia2luZFwiXTtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyID0gY3R4dC5nZXRQcm9wZXJ0eVNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KHByb3BLaW5kKTtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocHJvcGVydHlPYmosIGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgc3RydWN0dXJlLnByb3BlcnRpZXMucHVzaChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9ialtcImV4dGVuc2lvblwiXSkge1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yID0gbmV3IEV4dGVuc2lvbkNvbnZlcnRvcigpO1xyXG4gICAgICAgICAgICBleHRlbnNpb25Db252ZXJ0b3IuYWRkVG9PYmooc3RydWN0dXJlLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==