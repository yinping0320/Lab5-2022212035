/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonStructureConvertor } from './common-structure-convertor';
var AggregateConvertor = /** @class */ (function () {
    function AggregateConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} aggregate
     * @param {?} ctxt
     * @return {?}
     */
    AggregateConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} aggregate
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, aggregate, ctxt) {
        /** @type {?} */
        var structureConvertor = new CommonStructureConvertor();
        structureConvertor.convertToObject(obj, aggregate, ctxt);
        //root
        if (aggregate.root) {
            obj['rootId'] = aggregate.root.id;
        }
    };
    /**
     * @param {?} aggregate
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    AggregateConvertor.prototype.initFromObject = /**
     * @param {?} aggregate
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (aggregate, obj, ctxt) {
        /** @type {?} */
        var structureConvertor = new CommonStructureConvertor();
        structureConvertor.initFromObject(aggregate, obj, ctxt);
        //root
        /** @type {?} */
        var rootId = obj['rootId'];
        if (rootId && aggregate.structuredTypes && aggregate.structuredTypes.length > 0) {
            aggregate.root = aggregate.structuredTypes.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.id == rootId; }));
        }
    };
    return AggregateConvertor;
}());
export { AggregateConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL3N0cnVjdHVyZS9hZ2dyZWdhdGUtY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUl4RTtJQUFBO0lBb0JBLENBQUM7Ozs7Ozs7SUFsQkksNENBQWU7Ozs7OztJQUFmLFVBQWdCLEdBQVUsRUFBQyxTQUFvQixFQUFDLElBQXFDOztZQUM5RSxrQkFBa0IsR0FBQyxJQUFJLHdCQUF3QixFQUFFO1FBQ3JELGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELE1BQU07UUFDTixJQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUM7WUFDZCxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7U0FDbkM7SUFDTCxDQUFDOzs7Ozs7O0lBRUEsMkNBQWM7Ozs7OztJQUFkLFVBQWUsU0FBbUIsRUFBQyxHQUFXLEVBQUMsSUFBcUM7O1lBQzdFLGtCQUFrQixHQUFDLElBQUksd0JBQXdCLEVBQUU7UUFDckQsa0JBQWtCLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLENBQUM7OztZQUVsRCxNQUFNLEdBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUN4QixJQUFHLE1BQU0sSUFBRSxTQUFTLENBQUMsZUFBZSxJQUFFLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBQztZQUNyRSxTQUFTLENBQUMsSUFBSSxHQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSTs7OztZQUFDLFVBQUEsQ0FBQyxJQUFFLE9BQUEsQ0FBQyxDQUFDLEVBQUUsSUFBRSxNQUFNLEVBQVosQ0FBWSxFQUFDLENBQUM7U0FDbEU7SUFDTCxDQUFDO0lBQ0wseUJBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdncmVnYXRlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL3N0cnVjdHVyZS9hZ2dyZWdhdGUnO1xyXG5pbXBvcnQgeyBDb21tb25TdHJ1Y3R1cmVDb252ZXJ0b3IgfSBmcm9tICcuL2NvbW1vbi1zdHJ1Y3R1cmUtY29udmVydG9yJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktY29tbW9uLXN0cnVjdHVyZS1zZXJpYWxpemUtY29udGV4dCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQWdncmVnYXRlQ29udmVydG9ye1xyXG5cclxuICAgICBjb252ZXJ0VG9PYmplY3Qob2JqOk9iamVjdCxhZ2dyZWdhdGU6IEFnZ3JlZ2F0ZSxjdHh0OklDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZUNvbnZlcnRvcj1uZXcgQ29tbW9uU3RydWN0dXJlQ29udmVydG9yKCk7ICBcclxuICAgICAgICBzdHJ1Y3R1cmVDb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KG9iaixhZ2dyZWdhdGUsY3R4dCk7XHJcbiAgICAgICAgLy9yb290XHJcbiAgICAgICAgaWYoYWdncmVnYXRlLnJvb3Qpe1xyXG4gICAgICAgICAgICBvYmpbJ3Jvb3RJZCddPWFnZ3JlZ2F0ZS5yb290LmlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAgaW5pdEZyb21PYmplY3QoYWdncmVnYXRlOkFnZ3JlZ2F0ZSxvYmo6IE9iamVjdCxjdHh0OklDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cnVjdHVyZUNvbnZlcnRvcj1uZXcgQ29tbW9uU3RydWN0dXJlQ29udmVydG9yKCk7ICBcclxuICAgICAgICBzdHJ1Y3R1cmVDb252ZXJ0b3IuaW5pdEZyb21PYmplY3QoYWdncmVnYXRlLG9iaixjdHh0KTtcclxuICAgICAgICAvL3Jvb3RcclxuICAgICAgICBsZXQgcm9vdElkPW9ialsncm9vdElkJ107XHJcbiAgICAgICAgaWYocm9vdElkJiZhZ2dyZWdhdGUuc3RydWN0dXJlZFR5cGVzJiZhZ2dyZWdhdGUuc3RydWN0dXJlZFR5cGVzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgYWdncmVnYXRlLnJvb3Q9YWdncmVnYXRlLnN0cnVjdHVyZWRUeXBlcy5maW5kKHg9PnguaWQ9PXJvb3RJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19