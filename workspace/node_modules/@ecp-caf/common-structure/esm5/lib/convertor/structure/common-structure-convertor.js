/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructuredTypeConvertor } from '../data-type/structured-type-convertor';
import { ReferReplaceUtil } from '../utils/refer-replace-util';
var CommonStructureConvertor = /** @class */ (function () {
    function CommonStructureConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    CommonStructureConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, structure, ctxt) {
        if (!structure) {
            return;
        }
        obj['id'] = structure.id;
        obj['uri'] = structure.uri;
        obj['code'] = structure.code;
        obj['name'] = structure.name;
        obj['kind'] = structure.kind;
        obj['description'] = structure.description;
        /** @type {?} */
        var structureConvertor = new StructuredTypeConvertor();
        obj['structuredTypes'] = new Array();
        if (structure.structuredTypes) {
            structure.structuredTypes.forEach((/**
             * @param {?} structuredType
             * @return {?}
             */
            function (structuredType) {
                /** @type {?} */
                var kind = structuredType.kind;
                /** @type {?} */
                var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                /** @type {?} */
                var structuredTypeObj = serializer.serialize(structuredType, ctxt);
                obj['structuredTypes'].push(structuredTypeObj);
            }));
        }
        obj['refStructures'] = new Array();
        if (structure.refStructures) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            function (refStructure) {
                /** @type {?} */
                var kind = refStructure.kind;
                /** @type {?} */
                var serializer = ctxt.getStructureSerializerFactory().get(kind);
                /** @type {?} */
                var refStructureObj = serializer.serialize(refStructure, ctxt);
                obj['refStructures'].push(refStructureObj);
            }));
        }
    };
    /**
     * @param {?} structure
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    CommonStructureConvertor.prototype.initFromObject = /**
     * @param {?} structure
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (structure, obj, ctxt) {
        if (!obj) {
            return;
        }
        structure.kind = obj['kind'];
        structure.id = obj['id'];
        structure.uri = obj['uri'];
        structure.code = obj['code'];
        structure.name = obj['name'];
        structure.description = obj['description'];
        if (obj['structuredTypes']) {
            structure.structuredTypes = new Array();
            obj['structuredTypes'].forEach((/**
             * @param {?} structureObj
             * @return {?}
             */
            function (structureObj) {
                /** @type {?} */
                var kind = structureObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getDataTypeSerializerFactory().get(kind);
                /** @type {?} */
                var structuredType = (/** @type {?} */ (serializer.deserialize(structureObj, ctxt)));
                structure.structuredTypes.push(structuredType);
                // structure.structuredTypes.push(DataTypeConvertUtil.initFromObject(structureObj) as StructuredType);
            }));
        }
        if (obj['refStructures']) {
            structure.refStructures = new Array();
            obj['refStructures'].forEach((/**
             * @param {?} refTree
             * @return {?}
             */
            function (refTree) {
                /** @type {?} */
                var kind = refTree['kind'];
                /** @type {?} */
                var refSerializer = ctxt.getStructureSerializerFactory().get(kind);
                /** @type {?} */
                var refStructure = refSerializer.deserialize(refTree, ctxt);
                structure.refStructures.push(refStructure);
                // structure.refStructures.push(CommonStructureConvertUtil.initFromObject(refTree));
            }));
        }
        //替换structuredTypes和refStructures中的propRefer
        ReferReplaceUtil.replacePropertyRefer(structure);
    };
    return CommonStructureConvertor;
}());
export { CommonStructureConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cnVjdHVyZS1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9zdHJ1Y3R1cmUvY29tbW9uLXN0cnVjdHVyZS1jb252ZXJ0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBR2pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSy9EO0lBQUE7SUF1RUEsQ0FBQzs7Ozs7OztJQXJFRyxrREFBZTs7Ozs7O0lBQWYsVUFBZ0IsR0FBVSxFQUFDLFNBQTBCLEVBQUMsSUFBcUM7UUFDdkYsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE9BQU87U0FDVjtRQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDOztZQUN2QyxrQkFBa0IsR0FBRyxJQUFJLHVCQUF1QixFQUFFO1FBRXRELEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDN0MsSUFBSSxTQUFTLENBQUMsZUFBZSxFQUFFO1lBQzNCLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsY0FBYzs7b0JBQ3hDLElBQUksR0FBQyxj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U0FDTDtRQUNELDRDQUE0QztRQUM1QyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUwsK0JBQUM7QUFBRCxDQUFDLEFBdkVELElBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RydWN0dXJlZFR5cGVDb252ZXJ0b3IgfSBmcm9tICcuLi9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IENvbW1vblN0cnVjdHVyZSB9IGZyb20gJy4uLy4uL2RlZmluZS9zdHJ1Y3R1cmUvY29tbW9uLXN0cnVjdHVyZSc7XHJcbmltcG9ydCB7IFN0cnVjdHVyZWRUeXBlIH0gZnJvbSAnLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmVkLXR5cGUvc3RydWN0dXJlZC10eXBlJztcclxuaW1wb3J0IHsgUmVmZXJSZXBsYWNlVXRpbCB9IGZyb20gJy4uL3V0aWxzL3JlZmVyLXJlcGxhY2UtdXRpbCc7XHJcbmltcG9ydCB7IERhdGFUeXBlQ29udmVydFV0aWwgfSBmcm9tICcuLi91dGlscy9kYXRhLXR5cGUtY29udmVydC11dGlsJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktY29tbW9uLXN0cnVjdHVyZS1zZXJpYWxpemUtY29udGV4dCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbW9uU3RydWN0dXJlQ29udmVydG9yIHtcclxuXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOk9iamVjdCxzdHJ1Y3R1cmU6IENvbW1vblN0cnVjdHVyZSxjdHh0OklDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFzdHJ1Y3R1cmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gICBcclxuICAgICAgICBvYmpbJ2lkJ10gPSBzdHJ1Y3R1cmUuaWQ7XHJcbiAgICAgICAgb2JqWyd1cmknXT1zdHJ1Y3R1cmUudXJpO1xyXG4gICAgICAgIG9ialsnY29kZSddID0gc3RydWN0dXJlLmNvZGU7XHJcbiAgICAgICAgb2JqWyduYW1lJ10gPSBzdHJ1Y3R1cmUubmFtZTtcclxuICAgICAgICBvYmpbJ2tpbmQnXSA9IHN0cnVjdHVyZS5raW5kO1xyXG4gICAgICAgIG9ialsnZGVzY3JpcHRpb24nXSA9IHN0cnVjdHVyZS5kZXNjcmlwdGlvbjtcclxuICAgICAgICBsZXQgc3RydWN0dXJlQ29udmVydG9yID0gbmV3IFN0cnVjdHVyZWRUeXBlQ29udmVydG9yKCk7XHJcblxyXG4gICAgICAgIG9ialsnc3RydWN0dXJlZFR5cGVzJ10gPSBuZXcgQXJyYXk8T2JqZWN0PigpO1xyXG4gICAgICAgIGlmIChzdHJ1Y3R1cmUuc3RydWN0dXJlZFR5cGVzKSB7XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZS5zdHJ1Y3R1cmVkVHlwZXMuZm9yRWFjaChzdHJ1Y3R1cmVkVHlwZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2luZD1zdHJ1Y3R1cmVkVHlwZS5raW5kO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXI9Y3R4dC5nZXREYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cnVjdHVyZWRUeXBlT2JqPXNlcmlhbGl6ZXIuc2VyaWFsaXplKHN0cnVjdHVyZWRUeXBlLGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgb2JqWydzdHJ1Y3R1cmVkVHlwZXMnXS5wdXNoKHN0cnVjdHVyZWRUeXBlT2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvYmpbJ3JlZlN0cnVjdHVyZXMnXSA9IG5ldyBBcnJheTxPYmplY3Q+KCk7XHJcbiAgICAgICAgaWYgKHN0cnVjdHVyZS5yZWZTdHJ1Y3R1cmVzKSB7XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZS5yZWZTdHJ1Y3R1cmVzLmZvckVhY2gocmVmU3RydWN0dXJlID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBraW5kPXJlZlN0cnVjdHVyZS5raW5kO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXI9Y3R4dC5nZXRTdHJ1Y3R1cmVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgICAgIHZhciByZWZTdHJ1Y3R1cmVPYmo9c2VyaWFsaXplci5zZXJpYWxpemUocmVmU3RydWN0dXJlLGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgb2JqWydyZWZTdHJ1Y3R1cmVzJ10ucHVzaChyZWZTdHJ1Y3R1cmVPYmopO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3Qoc3RydWN0dXJlOkNvbW1vblN0cnVjdHVyZSxvYmo6IE9iamVjdCxjdHh0OklDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdHJ1Y3R1cmUua2luZCA9IG9ialsna2luZCddO1xyXG4gICAgICAgIHN0cnVjdHVyZS5pZCA9IG9ialsnaWQnXTtcclxuICAgICAgICBzdHJ1Y3R1cmUudXJpPW9ialsndXJpJ107XHJcbiAgICAgICAgc3RydWN0dXJlLmNvZGUgPSBvYmpbJ2NvZGUnXTtcclxuICAgICAgICBzdHJ1Y3R1cmUubmFtZSA9IG9ialsnbmFtZSddO1xyXG4gICAgICAgIHN0cnVjdHVyZS5kZXNjcmlwdGlvbiA9IG9ialsnZGVzY3JpcHRpb24nXTtcclxuXHJcbiAgICAgICAgaWYgKG9ialsnc3RydWN0dXJlZFR5cGVzJ10pIHtcclxuICAgICAgICAgICAgc3RydWN0dXJlLnN0cnVjdHVyZWRUeXBlcyA9IG5ldyBBcnJheTxTdHJ1Y3R1cmVkVHlwZT4oKTtcclxuICAgICAgICAgICAgb2JqWydzdHJ1Y3R1cmVkVHlwZXMnXS5mb3JFYWNoKHN0cnVjdHVyZU9iaiA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2luZD1zdHJ1Y3R1cmVPYmpbJ2tpbmQnXTtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVyPWN0eHQuZ2V0RGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgICAgIHZhciBzdHJ1Y3R1cmVkVHlwZT1zZXJpYWxpemVyLmRlc2VyaWFsaXplKHN0cnVjdHVyZU9iaixjdHh0KSBhcyBTdHJ1Y3R1cmVkVHlwZTtcclxuICAgICAgICAgICAgICAgIHN0cnVjdHVyZS5zdHJ1Y3R1cmVkVHlwZXMucHVzaChzdHJ1Y3R1cmVkVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBzdHJ1Y3R1cmUuc3RydWN0dXJlZFR5cGVzLnB1c2goRGF0YVR5cGVDb252ZXJ0VXRpbC5pbml0RnJvbU9iamVjdChzdHJ1Y3R1cmVPYmopIGFzIFN0cnVjdHVyZWRUeXBlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob2JqWydyZWZTdHJ1Y3R1cmVzJ10pIHtcclxuICAgICAgICAgICAgc3RydWN0dXJlLnJlZlN0cnVjdHVyZXMgPSBuZXcgQXJyYXk8Q29tbW9uU3RydWN0dXJlPigpO1xyXG4gICAgICAgICAgICBvYmpbJ3JlZlN0cnVjdHVyZXMnXS5mb3JFYWNoKHJlZlRyZWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtpbmQ9cmVmVHJlZVsna2luZCddO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlZlNlcmlhbGl6ZXI9Y3R4dC5nZXRTdHJ1Y3R1cmVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICAgICAgICAgIHZhciByZWZTdHJ1Y3R1cmU9cmVmU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyZWZUcmVlLGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgc3RydWN0dXJlLnJlZlN0cnVjdHVyZXMucHVzaChyZWZTdHJ1Y3R1cmUpO1xyXG4gICAgICAgICAgICAgICAgLy8gc3RydWN0dXJlLnJlZlN0cnVjdHVyZXMucHVzaChDb21tb25TdHJ1Y3R1cmVDb252ZXJ0VXRpbC5pbml0RnJvbU9iamVjdChyZWZUcmVlKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5pu/5o2ic3RydWN0dXJlZFR5cGVz5ZKMcmVmU3RydWN0dXJlc+S4reeahHByb3BSZWZlclxyXG4gICAgICAgIFJlZmVyUmVwbGFjZVV0aWwucmVwbGFjZVByb3BlcnR5UmVmZXIoc3RydWN0dXJlKTtcclxuICAgIH1cclxuXHJcbn0iXX0=