/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonStructureConvertor } from './common-structure-convertor';
import { ReferReplaceUtil } from '../utils/refer-replace-util';
var ValueObjectConvertor = /** @class */ (function () {
    function ValueObjectConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} vo
     * @param {?} ctxt
     * @return {?}
     */
    ValueObjectConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} vo
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, vo, ctxt) {
        /** @type {?} */
        var structureConvertor = new CommonStructureConvertor();
        structureConvertor.convertToObject(obj, vo, ctxt);
        //first?
        /** @type {?} */
        var type = vo.dataType;
        obj['structureId'] = type.id;
    };
    /**
     * @param {?} vo
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    ValueObjectConvertor.prototype.initFromObject = /**
     * @param {?} vo
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (vo, obj, ctxt) {
        /** @type {?} */
        var structureConvertor = new CommonStructureConvertor();
        structureConvertor.initFromObject(vo, obj, ctxt);
        //没有root
        /** @type {?} */
        var allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(vo);
        ReferReplaceUtil.replaceOperationRefer(allStructureTypes, vo.operations);
    };
    return ValueObjectConvertor;
}());
export { ValueObjectConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtb2JqZWN0LWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL3N0cnVjdHVyZS92YWx1ZS1vYmplY3QtY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUl4RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUcvRDtJQUFBO0lBZ0JBLENBQUM7Ozs7Ozs7SUFmSSw4Q0FBZTs7Ozs7O0lBQWYsVUFBZ0IsR0FBVSxFQUFDLEVBQWUsRUFBQyxJQUFxQzs7WUFDekUsa0JBQWtCLEdBQUMsSUFBSSx3QkFBd0IsRUFBRTtRQUNyRCxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQzs7O1lBRTVDLElBQUksR0FBQyxFQUFFLENBQUMsUUFBUTtRQUNwQixHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7Ozs7O0lBRUEsNkNBQWM7Ozs7OztJQUFkLFVBQWUsRUFBYyxFQUFDLEdBQVcsRUFBQyxJQUFxQzs7WUFDeEUsa0JBQWtCLEdBQUMsSUFBSSx3QkFBd0IsRUFBRTtRQUNyRCxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsQ0FBQzs7O1lBRTNDLGlCQUFpQixHQUF1QixnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUM7UUFDdEYsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLEVBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFDTCwyQkFBQztBQUFELENBQUMsQUFoQkQsSUFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25TdHJ1Y3R1cmVDb252ZXJ0b3IgfSBmcm9tICcuL2NvbW1vbi1zdHJ1Y3R1cmUtY29udmVydG9yJztcclxuaW1wb3J0IHsgVmFsdWVPYmplY3QgfSBmcm9tICcuLi8uLi9kZWZpbmUvc3RydWN0dXJlL3ZhbHVlLW9iamVjdCc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL3N0cnVjdHVyZWQtdHlwZSc7XHJcbmltcG9ydCB7IFJlZmVyUmVwbGFjZVV0aWwgfSBmcm9tICcuLi91dGlscy9yZWZlci1yZXBsYWNlLXV0aWwnO1xyXG5pbXBvcnQgeyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLWNvbW1vbi1zdHJ1Y3R1cmUtc2VyaWFsaXplLWNvbnRleHQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZhbHVlT2JqZWN0Q29udmVydG9yIHtcclxuICAgICBjb252ZXJ0VG9PYmplY3Qob2JqOk9iamVjdCx2bzogVmFsdWVPYmplY3QsY3R4dDpJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzdHJ1Y3R1cmVDb252ZXJ0b3I9bmV3IENvbW1vblN0cnVjdHVyZUNvbnZlcnRvcigpOyAgXHJcbiAgICAgICAgc3RydWN0dXJlQ29udmVydG9yLmNvbnZlcnRUb09iamVjdChvYmosdm8sY3R4dCk7XHJcbiAgICAgICAgLy9maXJzdD9cclxuICAgICAgICB2YXIgdHlwZT12by5kYXRhVHlwZTtcclxuICAgICAgICBvYmpbJ3N0cnVjdHVyZUlkJ109dHlwZS5pZDtcclxuICAgIH1cclxuXHJcbiAgICAgaW5pdEZyb21PYmplY3Qodm86VmFsdWVPYmplY3Qsb2JqOiBPYmplY3QsY3R4dDpJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzdHJ1Y3R1cmVDb252ZXJ0b3I9bmV3IENvbW1vblN0cnVjdHVyZUNvbnZlcnRvcigpOyAgXHJcbiAgICAgICAgc3RydWN0dXJlQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KHZvLG9iaixjdHh0KTtcclxuICAgICAgICAvL+ayoeaciXJvb3RcclxuICAgICAgICBsZXQgYWxsU3RydWN0dXJlVHlwZXM6QXJyYXk8U3RydWN0dXJlZFR5cGU+PVJlZmVyUmVwbGFjZVV0aWwuZ2V0QWxsU3RydWN0dXJlZFR5cGVzKHZvKTtcclxuICAgICAgICBSZWZlclJlcGxhY2VVdGlsLnJlcGxhY2VPcGVyYXRpb25SZWZlcihhbGxTdHJ1Y3R1cmVUeXBlcyx2by5vcGVyYXRpb25zKTtcclxuICAgIH1cclxufSJdfQ==