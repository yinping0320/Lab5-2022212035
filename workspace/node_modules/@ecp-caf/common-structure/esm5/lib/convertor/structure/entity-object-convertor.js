/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ReferReplaceUtil } from '../utils/refer-replace-util';
import { AggregateConvertor } from './aggregate-convertor';
var EntityObjectConvertor = /** @class */ (function () {
    function EntityObjectConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} entity
     * @param {?} ctxt
     * @return {?}
     */
    EntityObjectConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} entity
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, entity, ctxt) {
        /** @type {?} */
        var aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.convertToObject(obj, entity, ctxt);
        obj['entityRelations'] = entity.entityRelations;
        obj['operations'] = new Array();
        if (entity.operations) {
            entity.operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            function (op) {
                /** @type {?} */
                var kind = op['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var opObj = serializer.serialize(op, ctxt);
                obj['operations'].push(opObj);
            }));
        }
    };
    /**
     * @param {?} entity
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    EntityObjectConvertor.prototype.initFromObject = /**
     * @param {?} entity
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (entity, obj, ctxt) {
        /** @type {?} */
        var aggregateConvertor = new AggregateConvertor();
        aggregateConvertor.initFromObject(entity, obj, ctxt);
        if (obj['entityRelations']) {
            entity.entityRelations = obj['entityRelations'];
        }
        if (obj['operations']) {
            entity.operations = new Array();
            obj['operations'].forEach((/**
             * @param {?} operationObj
             * @return {?}
             */
            function (operationObj) {
                /** @type {?} */
                var kind = operationObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var operation = serializer.deserialize(operationObj, ctxt);
                entity.operations.push(operation);
            }));
        }
        /** @type {?} */
        var allStructureTypes = ReferReplaceUtil.getAllStructuredTypes(entity);
        ReferReplaceUtil.replaceOperationRefer(allStructureTypes, entity.operations);
    };
    return EntityObjectConvertor;
}());
export { EntityObjectConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LW9iamVjdC1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9zdHJ1Y3R1cmUvZW50aXR5LW9iamVjdC1jb252ZXJ0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRS9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSzNEO0lBQUE7SUFtQ0EsQ0FBQzs7Ozs7OztJQWpDSSwrQ0FBZTs7Ozs7O0lBQWYsVUFBZ0IsR0FBVSxFQUFDLE1BQW9CLEVBQUMsSUFBcUM7O1lBQzlFLGtCQUFrQixHQUFDLElBQUksa0JBQWtCLEVBQUU7UUFDL0Msa0JBQWtCLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEQsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztRQUNoRCxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUN4QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxFQUFFOztvQkFDcEIsSUFBSSxHQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7O29CQUNmLFVBQVUsR0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDOztvQkFDekQsS0FBSyxHQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQztnQkFDdkMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Ozs7OztJQUVBLDhDQUFjOzs7Ozs7SUFBZCxVQUFlLE1BQW1CLEVBQUMsR0FBVyxFQUFDLElBQXFDOztZQUM3RSxrQkFBa0IsR0FBQyxJQUFJLGtCQUFrQixFQUFFO1FBQy9DLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDeEIsTUFBTSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNuRDtRQUNELElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLEVBQWEsQ0FBQztZQUMzQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsWUFBWTs7b0JBQzlCLElBQUksR0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDOztvQkFDekIsVUFBVSxHQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7O29CQUN6RCxTQUFTLEdBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDO2dCQUN2RCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QyxDQUFDLEVBQUMsQ0FBQztTQUNOOztZQUNHLGlCQUFpQixHQUF1QixnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDMUYsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLEVBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFDTCw0QkFBQztBQUFELENBQUMsQUFuQ0QsSUFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25TdHJ1Y3R1cmVDb252ZXJ0b3IgfSBmcm9tICcuL2NvbW1vbi1zdHJ1Y3R1cmUtY29udmVydG9yJztcclxuaW1wb3J0IHsgT3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vZGVmaW5lL29wZXJhdGlvbi9vcGVyYXRpb24nO1xyXG5pbXBvcnQgeyBPcGVyYXRpb25Db252ZXJ0b3IgfSBmcm9tICcuLi9vcGVyYXRpb24vb3BlcmF0aW9uLWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IFJlZmVyUmVwbGFjZVV0aWwgfSBmcm9tICcuLi91dGlscy9yZWZlci1yZXBsYWNlLXV0aWwnO1xyXG5pbXBvcnQgeyBFbnRpdHlPYmplY3QgfSBmcm9tICcuLi8uLi9kZWZpbmUvc3RydWN0dXJlL2VudGl0eS1vYmplY3QnO1xyXG5pbXBvcnQgeyBBZ2dyZWdhdGVDb252ZXJ0b3IgfSBmcm9tICcuL2FnZ3JlZ2F0ZS1jb252ZXJ0b3InO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVkVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluZS9kYXRhLXR5cGUvc3RydWN0dXJlZC10eXBlL3N0cnVjdHVyZWQtdHlwZSc7XHJcbmltcG9ydCB7IElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZXh0ZW5zaW9uL2ktc2VyaWFsaXplLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLWNvbW1vbi1zdHJ1Y3R1cmUtc2VyaWFsaXplLWNvbnRleHQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVudGl0eU9iamVjdENvbnZlcnRvciAge1xyXG5cclxuICAgICBjb252ZXJ0VG9PYmplY3Qob2JqOk9iamVjdCxlbnRpdHk6IEVudGl0eU9iamVjdCxjdHh0OklDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGFnZ3JlZ2F0ZUNvbnZlcnRvcj1uZXcgQWdncmVnYXRlQ29udmVydG9yKCk7ICBcclxuICAgICAgICBhZ2dyZWdhdGVDb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KG9iaixlbnRpdHksY3R4dCk7XHJcbiAgICAgICAgb2JqWydlbnRpdHlSZWxhdGlvbnMnXSA9IGVudGl0eS5lbnRpdHlSZWxhdGlvbnM7XHJcbiAgICAgICAgb2JqWydvcGVyYXRpb25zJ10gPSBuZXcgQXJyYXk8T2JqZWN0PigpO1xyXG4gICAgICAgIGlmIChlbnRpdHkub3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICBlbnRpdHkub3BlcmF0aW9ucy5mb3JFYWNoKG9wID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBraW5kPW9wWydraW5kJ107XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplcj1jdHh0LmdldE9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wT2JqPXNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wLGN0eHQpO1xyXG4gICAgICAgICAgICAgICAgb2JqWydvcGVyYXRpb25zJ10ucHVzaChvcE9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAgaW5pdEZyb21PYmplY3QoZW50aXR5OkVudGl0eU9iamVjdCxvYmo6IE9iamVjdCxjdHh0OklDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGFnZ3JlZ2F0ZUNvbnZlcnRvcj1uZXcgQWdncmVnYXRlQ29udmVydG9yKCk7ICBcclxuICAgICAgICBhZ2dyZWdhdGVDb252ZXJ0b3IuaW5pdEZyb21PYmplY3QoZW50aXR5LG9iaixjdHh0KTtcclxuICAgICAgICBpZiAob2JqWydlbnRpdHlSZWxhdGlvbnMnXSkge1xyXG4gICAgICAgICAgICBlbnRpdHkuZW50aXR5UmVsYXRpb25zID0gb2JqWydlbnRpdHlSZWxhdGlvbnMnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ialsnb3BlcmF0aW9ucyddKSB7XHJcbiAgICAgICAgICAgIGVudGl0eS5vcGVyYXRpb25zID0gbmV3IEFycmF5PE9wZXJhdGlvbj4oKTtcclxuICAgICAgICAgICAgb2JqWydvcGVyYXRpb25zJ10uZm9yRWFjaChvcGVyYXRpb25PYmogPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtpbmQ9b3BlcmF0aW9uT2JqWydraW5kJ107XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VyaWFsaXplcj1jdHh0LmdldE9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wZXJhdGlvbj1zZXJpYWxpemVyLmRlc2VyaWFsaXplKG9wZXJhdGlvbk9iaixjdHh0KTtcclxuICAgICAgICAgICAgICAgIGVudGl0eS5vcGVyYXRpb25zLnB1c2gob3BlcmF0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhbGxTdHJ1Y3R1cmVUeXBlczpBcnJheTxTdHJ1Y3R1cmVkVHlwZT49UmVmZXJSZXBsYWNlVXRpbC5nZXRBbGxTdHJ1Y3R1cmVkVHlwZXMoZW50aXR5KTtcclxuICAgICAgICBSZWZlclJlcGxhY2VVdGlsLnJlcGxhY2VPcGVyYXRpb25SZWZlcihhbGxTdHJ1Y3R1cmVUeXBlcyxlbnRpdHkub3BlcmF0aW9ucyk7XHJcbiAgICB9XHJcbn0iXX0=