/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
var ParameterConvertor = /** @class */ (function () {
    function ParameterConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} parameter
     * @param {?} ctxt
     * @return {?}
     */
    ParameterConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} parameter
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, parameter, ctxt) {
        if (!parameter) {
            return;
        }
        obj['kind'] = parameter.kind;
        obj['code'] = parameter.code;
        obj['name'] = parameter.name;
        obj['description'] = parameter.description;
        obj['required'] = parameter.required;
        obj['defaultValue'] = parameter.defaultValue;
        obj['parameterType'] = null;
        if (parameter.parameterType) {
            /** @type {?} */
            var kind = parameter.parameterType.getKind();
            if (!kind) {
                throw new Error('参数序列化时数据类型的TypeKind为空！');
            }
            obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType, ctxt);
        }
        obj['constraint'] = null;
        if (parameter.constraint) {
            /** @type {?} */
            var kind = parameter.constraint.getKind();
            if (!kind) {
                throw new Error('参数序列化时参数约束的ConstraintKind为空！');
            }
            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint, ctxt);
        }
        if (parameter.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(parameter, obj);
        }
    };
    /**
     * @param {?} parameter
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    ParameterConvertor.prototype.initFromObject = /**
     * @param {?} parameter
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (parameter, obj, ctxt) {
        if (!obj) {
            return;
        }
        parameter.kind = obj['kind'];
        parameter.code = obj['code'];
        parameter.name = obj['name'];
        parameter.defaultValue = obj['defaultValue'];
        parameter.description = obj['description'];
        parameter.required = (/** @type {?} */ (obj['required']));
        if (obj['parameterType']) {
            /** @type {?} */
            var kind = obj['parameterType']['kind'];
            if (!kind) {
                throw new Error('解析参数数据类型时TypeKind为空！');
            }
            parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);
        }
        if (obj['constraint']) {
            /** @type {?} */
            var kind = obj['constraint']['kind'];
            if (!kind) {
                throw new Error('解析参数约束类型时ConstraintKind为空！');
            }
            parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(parameter, obj);
        }
    };
    return ParameterConvertor;
}());
export { ParameterConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyLWNvbnZlcnRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUvIiwic291cmNlcyI6WyJsaWIvY29udmVydG9yL3BhcmFtZXRlci9wYXJhbWV0ZXItY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RTtJQUFBO0lBb0VBLENBQUM7Ozs7Ozs7SUFsRUcsNENBQWU7Ozs7OztJQUFmLFVBQWdCLEdBQVUsRUFBQyxTQUFvQixFQUFDLElBQXNCO1FBQ2xFLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixPQUFPO1NBQ1Y7UUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUU3QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM3QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM3QixHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUMzQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUNyQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUU3QyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksU0FBUyxDQUFDLGFBQWEsRUFBRTs7Z0JBQ3JCLElBQUksR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRTtZQUM1QyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQzthQUM3QztZQUNELEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQztTQUM1RjtRQUVELEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFOztnQkFDbEIsSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsQ0FBQztTQUM1RztRQUVELElBQUcsU0FBUyxDQUFDLFNBQVMsRUFBQzs7Z0JBQ2Ysa0JBQWtCLEdBQUMsSUFBSSxrQkFBa0IsRUFBRTtZQUMvQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9DO0lBQ0wsQ0FBQzs7Ozs7OztJQUVELDJDQUFjOzs7Ozs7SUFBZCxVQUFlLFNBQW9CLEVBQUUsR0FBVyxFQUFFLElBQXVCO1FBQ3JFLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPO1NBQ1Y7UUFDRCxTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM3QyxTQUFTLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQyxTQUFTLENBQUMsUUFBUSxHQUFHLG1CQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBVyxDQUFDO1FBRWhELElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFOztnQkFDbEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDdkMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDM0M7WUFDRCxTQUFTLENBQUMsYUFBYSxHQUFHLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDNUY7UUFDRCxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTs7Z0JBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDcEMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7YUFDakQ7WUFDRCxTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlHO1FBQ0QsSUFBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUM7O2dCQUNaLGtCQUFrQixHQUFDLElBQUksa0JBQWtCLEVBQUU7WUFDL0Msa0JBQWtCLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBQyxHQUFHLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFwRUQsSUFvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJhbWV0ZXIgfSBmcm9tICcuLi8uLi9kZWZpbmUvcGFyYW1ldGVyL3BhcmFtZXRlcic7XHJcbmltcG9ydCB7IERhdGFUeXBlQ29udmVydFV0aWwgfSBmcm9tICcuLi91dGlscy9kYXRhLXR5cGUtY29udmVydC11dGlsJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9zZXJpYWxpemUtY29udGV4dC9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkNvbnZlcnRvciB9IGZyb20gJy4uL2V4dGVuc2lvbi9leHRlbnNpb24tY29udmVydG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJDb252ZXJ0b3Ige1xyXG5cclxuICAgIGNvbnZlcnRUb09iamVjdChvYmo6T2JqZWN0LHBhcmFtZXRlcjogUGFyYW1ldGVyLGN0eHQ6SVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXBhcmFtZXRlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ialsna2luZCddID0gcGFyYW1ldGVyLmtpbmQ7XHJcblxyXG4gICAgICAgIG9ialsnY29kZSddID0gcGFyYW1ldGVyLmNvZGU7XHJcbiAgICAgICAgb2JqWyduYW1lJ10gPSBwYXJhbWV0ZXIubmFtZTtcclxuICAgICAgICBvYmpbJ2Rlc2NyaXB0aW9uJ10gPSBwYXJhbWV0ZXIuZGVzY3JpcHRpb247XHJcbiAgICAgICAgb2JqWydyZXF1aXJlZCddID0gcGFyYW1ldGVyLnJlcXVpcmVkO1xyXG4gICAgICAgIG9ialsnZGVmYXVsdFZhbHVlJ10gPSBwYXJhbWV0ZXIuZGVmYXVsdFZhbHVlO1xyXG5cclxuICAgICAgICBvYmpbJ3BhcmFtZXRlclR5cGUnXSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlci5wYXJhbWV0ZXJUeXBlKSB7XHJcbiAgICAgICAgICAgIGxldCBraW5kID0gcGFyYW1ldGVyLnBhcmFtZXRlclR5cGUuZ2V0S2luZCgpO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5Y+C5pWw5bqP5YiX5YyW5pe25pWw5o2u57G75Z6L55qEVHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmpbJ3BhcmFtZXRlclR5cGUnXSA9IERhdGFUeXBlQ29udmVydFV0aWwuY29udmVydFRvT2JqZWN0KHBhcmFtZXRlci5wYXJhbWV0ZXJUeXBlLGN0eHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb2JqWydjb25zdHJhaW50J10gPSBudWxsO1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXIuY29uc3RyYWludCkge1xyXG4gICAgICAgICAgICBsZXQga2luZCA9IHBhcmFtZXRlci5jb25zdHJhaW50LmdldEtpbmQoKTtcclxuICAgICAgICAgICAgaWYgKCFraW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+WPguaVsOW6j+WIl+WMluaXtuWPguaVsOe6puadn+eahENvbnN0cmFpbnRLaW5k5Li656m677yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqWydjb25zdHJhaW50J10gPSBjdHh0LmdldENvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKS5zZXJpYWxpemUocGFyYW1ldGVyLmNvbnN0cmFpbnQsY3R4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHBhcmFtZXRlci5leHRlbnNpb24pe1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yPW5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvSk9iaihwYXJhbWV0ZXIsb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3QocGFyYW1ldGVyOiBQYXJhbWV0ZXIsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghb2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyYW1ldGVyLmtpbmQgPSBvYmpbJ2tpbmQnXTtcclxuICAgICAgICBwYXJhbWV0ZXIuY29kZSA9IG9ialsnY29kZSddO1xyXG4gICAgICAgIHBhcmFtZXRlci5uYW1lID0gb2JqWyduYW1lJ107XHJcbiAgICAgICAgcGFyYW1ldGVyLmRlZmF1bHRWYWx1ZSA9IG9ialsnZGVmYXVsdFZhbHVlJ107XHJcbiAgICAgICAgcGFyYW1ldGVyLmRlc2NyaXB0aW9uID0gb2JqWydkZXNjcmlwdGlvbiddO1xyXG4gICAgICAgIHBhcmFtZXRlci5yZXF1aXJlZCA9IG9ialsncmVxdWlyZWQnXSBhcyBib29sZWFuO1xyXG5cclxuICAgICAgICBpZiAob2JqWydwYXJhbWV0ZXJUeXBlJ10pIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBvYmpbJ3BhcmFtZXRlclR5cGUnXVsna2luZCddO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6Q5Y+C5pWw5pWw5o2u57G75Z6L5pe2VHlwZUtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVyVHlwZSA9IERhdGFUeXBlQ29udmVydFV0aWwuaW5pdEZyb21PYmplY3Qob2JqWydwYXJhbWV0ZXJUeXBlJ10sIGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JqWydjb25zdHJhaW50J10pIHtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSBvYmpbJ2NvbnN0cmFpbnQnXVsna2luZCddO1xyXG4gICAgICAgICAgICBpZiAoIWtpbmQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6Q5Y+C5pWw57qm5p2f57G75Z6L5pe2Q29uc3RyYWludEtpbmTkuLrnqbrvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJhbWV0ZXIuY29uc3RyYWludCA9IGN0eHQuZ2V0Q29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpLmRlc2VyaWFsaXplKG9ialsnY29uc3RyYWludCddLGN0eHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihvYmpbXCJleHRlbnNpb25cIl0pe1xyXG4gICAgICAgICAgICBsZXQgZXh0ZW5zaW9uQ29udmVydG9yPW5ldyBFeHRlbnNpb25Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgZXh0ZW5zaW9uQ29udmVydG9yLmFkZFRvT2JqKHBhcmFtZXRlcixvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==