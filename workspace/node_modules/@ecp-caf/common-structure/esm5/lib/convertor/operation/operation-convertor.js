/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ParameterConvertor } from '../parameter/parameter-convertor';
import { DataTypeConvertUtil } from '../utils/data-type-convert-util';
import { ExtensionConvertor } from '../extension/extension-convertor';
var OperationConvertor = /** @class */ (function () {
    function OperationConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} operation
     * @param {?} ctxt
     * @return {?}
     */
    OperationConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} operation
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, operation, ctxt) {
        if (!operation) {
            return;
        }
        obj['kind'] = operation.kind;
        obj['code'] = operation.code;
        obj['name'] = operation.name;
        obj['uri'] = operation.uri;
        obj['description'] = operation.description;
        obj['returnType'] = null;
        if (operation.returnType) {
            /** @type {?} */
            var kind = operation.returnType.getKind();
            if (!kind) {
                throw new Error('操作序列化时返回值类型的TypeKind为空!');
            }
            obj['returnType'] = DataTypeConvertUtil.convertToObject(operation.returnType, ctxt);
        }
        obj['parameters'] = new Array();
        if (operation.parameters) {
            /** @type {?} */
            var parameterConvertor = new ParameterConvertor();
            operation.parameters.forEach((/**
             * @param {?} parameter
             * @return {?}
             */
            function (parameter) {
                /** @type {?} */
                var kind = parameter.kind;
                /** @type {?} */
                var serializer = ctxt.getParameterSerializerFactory().get(kind);
                /** @type {?} */
                var parameterObj = serializer.deserialize(parameter, ctxt);
                obj["parameters"].push(parameterObj);
            }));
        }
        if (operation.extension) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToJObj(operation, obj);
        }
    };
    /**
     * @param {?} operation
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    OperationConvertor.prototype.initFromObject = /**
     * @param {?} operation
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (operation, obj, ctxt) {
        if (!obj) {
            return;
        }
        operation.kind = obj['kind'];
        operation.code = obj['code'];
        operation.name = obj['name'];
        operation.uri = obj['uri'];
        operation.description = obj['description'];
        if (obj['parameters']) {
            operation.parameters = new Array();
            /** @type {?} */
            var parameterConvertor = new ParameterConvertor();
            obj['parameters'].forEach((/**
             * @param {?} parameterObj
             * @return {?}
             */
            function (parameterObj) {
                /** @type {?} */
                var kind = parameterObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getParameterSerializerFactory().get(kind);
                /** @type {?} */
                var parameter = serializer.deserialize(parameterObj, ctxt);
                operation.parameters.push(parameter);
            }));
        }
        if (obj['returnType']) {
            /** @type {?} */
            var kind = obj['returnType']['kind'];
            if (!kind) {
                throw new Error('解析操作的返回值时TypeKind为空！');
            }
            operation.returnType = DataTypeConvertUtil.initFromObject(obj['returnType'], ctxt);
        }
        if (obj["extension"]) {
            /** @type {?} */
            var extensionConvertor = new ExtensionConvertor();
            extensionConvertor.addToObj(operation, obj);
        }
    };
    return OperationConvertor;
}());
export { OperationConvertor };
//# sourceMappingURL=data:application/json;base64,