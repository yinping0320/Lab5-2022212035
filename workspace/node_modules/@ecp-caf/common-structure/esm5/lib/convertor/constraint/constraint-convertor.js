/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ConstraintConst } from '../../define/constant/constraint-const';
var ConstraintConvertor = /** @class */ (function () {
    function ConstraintConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    ConstraintConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, constraint, ctxt) {
        if (!constraint) {
            return;
        }
        switch (constraint.getKind()) {
            case ConstraintConst.DECIMAL:
                /** @type {?} */
                var decimalconstraint = (/** @type {?} */ (constraint));
                obj['scale'] = (/** @type {?} */ (decimalconstraint.scale));
                obj['pricision'] = (/** @type {?} */ (decimalconstraint.pricision));
            case ConstraintConst.STRING:
                /** @type {?} */
                var stringconstraint = (/** @type {?} */ (constraint));
                obj['maxLength'] = (/** @type {?} */ (stringconstraint.maxLength));
            default:
                throw new Error("\u7EA6\u675F\u4E0D\u652F\u6301\u7684" + constraint.getKind() + "\u7C7B\u578B\uFF01");
        }
    };
    /**
     * @param {?} constraint
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    ConstraintConvertor.prototype.initFromObject = /**
     * @param {?} constraint
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (constraint, obj, ctxt) {
        if (!obj) {
            return null;
        }
        switch (obj['kind']) {
            case ConstraintConst.DECIMAL:
            case ConstraintConst.STRING:
            default:
                throw new Error("\u7EA6\u675F\u4E0D\u652F\u6301\u7684" + obj['kind'] + "\u7C7B\u578B\uFF01");
        }
    };
    return ConstraintConvertor;
}());
export { ConstraintConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RyYWludC1jb252ZXJ0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNwLWNhZi9jb21tb24tc3RydWN0dXJlLyIsInNvdXJjZXMiOlsibGliL2NvbnZlcnRvci9jb25zdHJhaW50L2NvbnN0cmFpbnQtY29udmVydG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFNekU7SUFBQTtJQThCQSxDQUFDOzs7Ozs7O0lBNUJHLDZDQUFlOzs7Ozs7SUFBZixVQUFnQixHQUFXLEVBQUUsVUFBdUIsRUFBRSxJQUF1QjtRQUN6RSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsT0FBTztTQUNWO1FBQ0QsUUFBUSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDMUIsS0FBSyxlQUFlLENBQUMsT0FBTzs7b0JBQ3BCLGlCQUFpQixHQUFHLG1CQUFBLFVBQVUsRUFBcUI7Z0JBQ3ZELEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxtQkFBUSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUEsQ0FBQztnQkFDL0MsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLG1CQUFRLGlCQUFpQixDQUFDLFNBQVMsRUFBQSxDQUFDO1lBQzNELEtBQUssZUFBZSxDQUFDLE1BQU07O29CQUNuQixnQkFBZ0IsR0FBRyxtQkFBQSxVQUFVLEVBQW9CO2dCQUNyRCxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsbUJBQVEsZ0JBQWdCLENBQUMsU0FBUyxFQUFBLENBQUM7WUFDMUQ7Z0JBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBUyxVQUFVLENBQUMsT0FBTyxFQUFFLHVCQUFLLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7Ozs7Ozs7SUFFRCw0Q0FBYzs7Ozs7O0lBQWQsVUFBZSxVQUF1QixFQUFFLEdBQVcsRUFBRSxJQUF1QjtRQUN4RSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCLEtBQUssZUFBZSxDQUFDLE9BQU8sQ0FBQztZQUM3QixLQUFLLGVBQWUsQ0FBQyxNQUFNLENBQUM7WUFDNUI7Z0JBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLHVCQUFLLENBQUMsQ0FBQztTQUNsRDtJQUNMLENBQUM7SUFDTCwwQkFBQztBQUFELENBQUMsQUE5QkQsSUE4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29uc3RyYWludCB9IGZyb20gJy4uLy4uL2RlZmluZS9jb25zdHJhaW50L2ktY29uc3RyYWludCc7XHJcbmltcG9ydCB7IENvbnN0cmFpbnRDb25zdCB9IGZyb20gJy4uLy4uL2RlZmluZS9jb25zdGFudC9jb25zdHJhaW50LWNvbnN0JztcclxuaW1wb3J0IHsgRGVjaW1hbENvbnN0cmFpbnQgfSBmcm9tICcuLi8uLi9kZWZpbmUvY29uc3RyYWludC9kZWNpbWFsLWNvbnN0cmFpbnQnO1xyXG5pbXBvcnQgeyBTdHJpbmdDb25zdHJhaW50IH0gZnJvbSAnLi4vLi4vZGVmaW5lL2NvbnN0cmFpbnQvc3RyaW5nLWNvbnN0cmFpbnQnO1xyXG5pbXBvcnQgeyBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZS1jb250ZXh0L2V4dGVuc2lvbi9pLXNlcmlhbGl6ZS1jb250ZXh0JztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ29uc3RyYWludENvbnZlcnRvciB7XHJcblxyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogT2JqZWN0LCBjb25zdHJhaW50OiBJQ29uc3RyYWludCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWNvbnN0cmFpbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGNvbnN0cmFpbnQuZ2V0S2luZCgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29uc3RyYWludENvbnN0LkRFQ0lNQUw6XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVjaW1hbGNvbnN0cmFpbnQgPSBjb25zdHJhaW50IGFzIERlY2ltYWxDb25zdHJhaW50O1xyXG4gICAgICAgICAgICAgICAgb2JqWydzY2FsZSddID0gPG51bWJlcj5kZWNpbWFsY29uc3RyYWludC5zY2FsZTtcclxuICAgICAgICAgICAgICAgIG9ialsncHJpY2lzaW9uJ10gPSA8bnVtYmVyPmRlY2ltYWxjb25zdHJhaW50LnByaWNpc2lvbjtcclxuICAgICAgICAgICAgY2FzZSBDb25zdHJhaW50Q29uc3QuU1RSSU5HOlxyXG4gICAgICAgICAgICAgICAgbGV0IHN0cmluZ2NvbnN0cmFpbnQgPSBjb25zdHJhaW50IGFzIFN0cmluZ0NvbnN0cmFpbnQ7XHJcbiAgICAgICAgICAgICAgICBvYmpbJ21heExlbmd0aCddID0gPG51bWJlcj5zdHJpbmdjb25zdHJhaW50Lm1heExlbmd0aDtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg57qm5p2f5LiN5pSv5oyB55qEJHtjb25zdHJhaW50LmdldEtpbmQoKX3nsbvlnovvvIFgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3QoY29uc3RyYWludDogSUNvbnN0cmFpbnQsIG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghb2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKG9ialsna2luZCddKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29uc3RyYWludENvbnN0LkRFQ0lNQUw6XHJcbiAgICAgICAgICAgIGNhc2UgQ29uc3RyYWludENvbnN0LlNUUklORzpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg57qm5p2f5LiN5pSv5oyB55qEJHtvYmpbJ2tpbmQnXX3nsbvlnovvvIFgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=