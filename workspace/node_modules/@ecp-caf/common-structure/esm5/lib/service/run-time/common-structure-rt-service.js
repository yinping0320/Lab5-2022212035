/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';
var CommonStructureRTService = /** @class */ (function () {
    function CommonStructureRTService(http) {
        this.http = http;
        this.commom_structure_url = '/api/runtime/sys/v1.0/common-structure';
    }
    /**
     * 获取CommonStructure
     * @param type 元数据类型
     * @param id 元数据Id
     * @param headers 请求header，应包含sessionId等必需参数
     */
    /**
     * 获取CommonStructure
     * @param {?} id 元数据Id
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    CommonStructureRTService.prototype.get = /**
     * 获取CommonStructure
     * @param {?} id 元数据Id
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    function (id, headers) {
        /** @type {?} */
        var idParam = encodeURIComponent(id);
        /** @type {?} */
        var url = this.commom_structure_url + '?id=' + id;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            //使用默认serializeContext进行反序列化
            /** @type {?} */
            var serializeCtxt = new DefaultSerializeContext();
            /** @type {?} */
            var kind = obj['kind'];
            /** @type {?} */
            var serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
            return (/** @type {?} */ (serializer.deserialize(obj, serializeCtxt)));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            alert("获取通用数据结构失败！");
            return null;
        })));
    };
    ;
    CommonStructureRTService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommonStructureRTService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CommonStructureRTService;
}());
export { CommonStructureRTService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonStructureRTService.prototype.commom_structure_url;
    /**
     * @type {?}
     * @private
     */
    CommonStructureRTService.prototype.http;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cnVjdHVyZS1ydC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3J1bi10aW1lL2NvbW1vbi1zdHJ1Y3R1cmUtcnQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFFL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBR3BHO0lBS0ksa0NBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFGNUIseUJBQW9CLEdBQUcsd0NBQXdDLENBQUM7SUFFaEMsQ0FBQztJQUV6Qzs7Ozs7T0FLRzs7Ozs7OztJQUNILHNDQUFHOzs7Ozs7SUFBSCxVQUFJLEVBQVUsRUFBRSxPQUFvQjs7WUFDNUIsT0FBTyxHQUFHLGtCQUFrQixDQUFDLEVBQUUsQ0FBQzs7WUFDaEMsR0FBRyxHQUFJLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLEdBQUcsRUFBRTtRQUNsRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFlLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQ2xFLFVBQUEsR0FBRzs7O2dCQUVDLGFBQWEsR0FBRyxJQUFJLHVCQUF1QixFQUFFOztnQkFDN0MsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7O2dCQUNsQixVQUFVLEdBQUcsYUFBYSxDQUFDLDZCQUE2QixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUN4RSxPQUFPLG1CQUFBLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFnQixDQUFDO1FBQ3RFLENBQUM7Ozs7UUFDRCxVQUFBLEtBQUs7WUFDRCxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDckIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxFQUFDLENBQ0QsQ0FBQztJQUNOLENBQUM7SUFBQSxDQUFDOztnQkE3QkwsVUFBVTs7OztnQkFQRixVQUFVOztJQXVDbkIsK0JBQUM7Q0FBQSxBQWhDRCxJQWdDQztTQS9CWSx3QkFBd0I7Ozs7OztJQUVqQyx3REFBd0U7Ozs7O0lBRTVELHdDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEVudGl0eU9iamVjdCB9IGZyb20gJy4uLy4uL2RlZmluZS9zdHJ1Y3R1cmUvZW50aXR5LW9iamVjdCc7XHJcbmltcG9ydCB7IERlZmF1bHRTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplLWNvbnRleHQvZGVmYXVsdC9kZWZhdWx0LXNlcmlhbGl6ZS1jb250ZXh0JztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb21tb25TdHJ1Y3R1cmVSVFNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgY29tbW9tX3N0cnVjdHVyZV91cmwgPSAnL2FwaS9ydW50aW1lL3N5cy92MS4wL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5ZDb21tb25TdHJ1Y3R1cmVcclxuICAgICAqIEBwYXJhbSB0eXBlIOWFg+aVsOaNruexu+Wei1xyXG4gICAgICogQHBhcmFtIGlkIOWFg+aVsOaNrklkXHJcbiAgICAgKiBAcGFyYW0gaGVhZGVycyDor7fmsYJoZWFkZXLvvIzlupTljIXlkKtzZXNzaW9uSWTnrYnlv4XpnIDlj4LmlbBcclxuICAgICAqL1xyXG4gICAgZ2V0KGlkOiBzdHJpbmcsIGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogT2JzZXJ2YWJsZTxFbnRpdHlPYmplY3Q+IHtcclxuICAgICAgICBsZXQgaWRQYXJhbSA9IGVuY29kZVVSSUNvbXBvbmVudChpZCk7XHJcbiAgICAgICAgbGV0IHVybCA9ICB0aGlzLmNvbW1vbV9zdHJ1Y3R1cmVfdXJsICsgJz9pZD0nICsgaWQgO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEVudGl0eU9iamVjdD4odXJsLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSkucGlwZShtYXAoXHJcbiAgICAgICAgICAgIG9iaiA9PiB7XHJcbiAgICAgICAgICAgIC8v5L2/55So6buY6K6kc2VyaWFsaXplQ29udGV4dOi/m+ihjOWPjeW6j+WIl+WMllxyXG4gICAgICAgICAgICBsZXQgc2VyaWFsaXplQ3R4dCA9IG5ldyBEZWZhdWx0U2VyaWFsaXplQ29udGV4dCgpO1xyXG4gICAgICAgICAgICBsZXQga2luZCA9IG9ialsna2luZCddO1xyXG4gICAgICAgICAgICBsZXQgc2VyaWFsaXplciA9IHNlcmlhbGl6ZUN0eHQuZ2V0U3RydWN0dXJlU2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVyLmRlc2VyaWFsaXplKG9iaiwgc2VyaWFsaXplQ3R4dCkgYXMgRW50aXR5T2JqZWN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXJyb3I9PntcclxuICAgICAgICAgICAgYWxlcnQoXCLojrflj5bpgJrnlKjmlbDmja7nu5PmnoTlpLHotKXvvIFcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgXHJcbn0iXX0=