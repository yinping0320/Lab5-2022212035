/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataTransferObject } from '../../../define/structure/data-transfer-object';
import { DataTransferObjectConvertor } from '../../../convertor/structure/data-transfer-object-convertor';
var DefaultDataTransferObjectSerializer = /** @class */ (function () {
    function DefaultDataTransferObjectSerializer() {
    }
    /**
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    DefaultDataTransferObjectSerializer.prototype.serialize = /**
     * @param {?} structure
     * @param {?} ctxt
     * @return {?}
     */
    function (structure, ctxt) {
        /** @type {?} */
        var result = new DataTransferObject();
        /** @type {?} */
        var baseConvertor = new DataTransferObjectConvertor();
        /** @type {?} */
        var dto = (/** @type {?} */ (structure));
        baseConvertor.convertToObject(result, dto, ctxt);
        return result;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    DefaultDataTransferObjectSerializer.prototype.deserialize = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        /** @type {?} */
        var result = new DataTransferObject();
        /** @type {?} */
        var baseConvertor = new DataTransferObjectConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    };
    return DefaultDataTransferObjectSerializer;
}());
export { DefaultDataTransferObjectSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1kYXRhLXRyYW5zZmVyLW9iamVjdC1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJpYWxpemUtY29udGV4dC9kZWZhdWx0L3NlcmlhbGl6ZXIvZGVmYXVsdC1kYXRhLXRyYW5zZmVyLW9iamVjdC1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUcxRztJQUFBO0lBaUJBLENBQUM7Ozs7OztJQWhCRyx1REFBUzs7Ozs7SUFBVCxVQUFVLFNBQTBCLEVBQUUsSUFBc0M7O1lBQ3BFLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixFQUFFOztZQUNqQyxhQUFhLEdBQUcsSUFBSSwyQkFBMkIsRUFBRTs7WUFDakQsR0FBRyxHQUFHLG1CQUFBLFNBQVMsRUFBc0I7UUFDekMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUdELHlEQUFXOzs7OztJQUFYLFVBQVksR0FBVyxFQUFFLElBQXNDOztZQUN2RCxNQUFNLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTs7WUFDakMsYUFBYSxHQUFHLElBQUksMkJBQTJCLEVBQUU7UUFDckQsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTCwwQ0FBQztBQUFELENBQUMsQUFqQkQsSUFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplciB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9zZXJpYWxpemVyL2ktY29tbW9uLXN0cnVjdHVyZS1zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgQ29tbW9uU3RydWN0dXJlIH0gZnJvbSAnLi4vLi4vLi4vZGVmaW5lL3N0cnVjdHVyZS9jb21tb24tc3RydWN0dXJlJztcclxuaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICcuLi8uLi9leHRlbnNpb24vaS1zZXJpYWxpemUtY29udGV4dCc7XHJcbmltcG9ydCB7IERhdGFUcmFuc2Zlck9iamVjdCB9IGZyb20gJy4uLy4uLy4uL2RlZmluZS9zdHJ1Y3R1cmUvZGF0YS10cmFuc2Zlci1vYmplY3QnO1xyXG5pbXBvcnQgeyBEYXRhVHJhbnNmZXJPYmplY3RDb252ZXJ0b3IgfSBmcm9tICcuLi8uLi8uLi9jb252ZXJ0b3Ivc3RydWN0dXJlL2RhdGEtdHJhbnNmZXItb2JqZWN0LWNvbnZlcnRvcic7XHJcbmltcG9ydCB7IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2ktY29tbW9uLXN0cnVjdHVyZS1zZXJpYWxpemUtY29udGV4dCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdERhdGFUcmFuc2Zlck9iamVjdFNlcmlhbGl6ZXIgaW1wbGVtZW50cyBJQ29tbW9uU3RydWN0dXJlU2VyaWFsaXplciB7XHJcbiAgICBzZXJpYWxpemUoc3RydWN0dXJlOiBDb21tb25TdHJ1Y3R1cmUsIGN0eHQ6IElDb21tb25TdHJ1Y3R1cmVTZXJpYWxpemVDb250ZXh0KTogT2JqZWN0IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IERhdGFUcmFuc2Zlck9iamVjdCgpO1xyXG4gICAgICAgIGxldCBiYXNlQ29udmVydG9yID0gbmV3IERhdGFUcmFuc2Zlck9iamVjdENvbnZlcnRvcigpO1xyXG4gICAgICAgIGxldCBkdG8gPSBzdHJ1Y3R1cmUgYXMgRGF0YVRyYW5zZmVyT2JqZWN0O1xyXG4gICAgICAgIGJhc2VDb252ZXJ0b3IuY29udmVydFRvT2JqZWN0KHJlc3VsdCwgZHRvLCBjdHh0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBkZXNlcmlhbGl6ZShvYmo6IE9iamVjdCwgY3R4dDogSUNvbW1vblN0cnVjdHVyZVNlcmlhbGl6ZUNvbnRleHQpOiBDb21tb25TdHJ1Y3R1cmUge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgRGF0YVRyYW5zZmVyT2JqZWN0KCk7XHJcbiAgICAgICAgbGV0IGJhc2VDb252ZXJ0b3IgPSBuZXcgRGF0YVRyYW5zZmVyT2JqZWN0Q29udmVydG9yKCk7XHJcbiAgICAgICAgYmFzZUNvbnZlcnRvci5pbml0RnJvbU9iamVjdChyZXN1bHQsIG9iaiwgY3R4dCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbn0iXX0=