/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultPrimitiveTypeSerializer } from '../serializer/default-primitive-type-serializer';
import { DefaultCollectionTypeSerializer } from '../serializer/default-collection-type-serializer';
import { DefaultMapTypeSerializer } from '../serializer/default-map-type-serializer';
import { DefaultStructuredTypeSerializer } from '../serializer/default-structured-type-serializer';
import { DefaultEntityTypeSerializer } from '../serializer/default-entity-type-serializer';
import { DefaultEnumerationTypeSerializer } from '../serializer/default-enumeration-type-serializer';
import { DefaultDataTransferObjectTypeSerializer } from '../serializer/default-dto-type-serializer';
import { DataTypeConst } from '../../../define/constant/data-type-const';
import { DefaultValueObjectTypeSerializer } from '../serializer/default-vo-type-serializer';
import { DefaultObjectTypeSerializer } from '../serializer/default-object-type-serializer';
var DefaultDataTypeSerializerFactory = /** @class */ (function () {
    function DefaultDataTypeSerializerFactory() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    DefaultDataTypeSerializerFactory.prototype.get = /**
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultPrimitiveTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_COLLECTION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultCollectionTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_MAP:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultMapTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_STRUCTURED:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultStructuredTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultDataTransferObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_ENTITY:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEntityTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_VALUE_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultValueObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_ENUMERATION:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultEnumerationTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            case DataTypeConst.DEFAULT_OBJECT:
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultObjectTypeSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error("\u672A\u627E\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668\uFF01");
        }
        return this.serializerDict[kind];
    };
    return DefaultDataTypeSerializerFactory;
}());
export { DefaultDataTypeSerializerFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultDataTypeSerializerFactory.prototype.serializerDict;
}
//# sourceMappingURL=data:application/json;base64,