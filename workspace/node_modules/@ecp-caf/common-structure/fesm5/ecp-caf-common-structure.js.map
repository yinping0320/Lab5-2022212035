{"version":3,"file":"ecp-caf-common-structure.js.map","sources":["ng://@ecp-caf/common-structure/lib/define/structure/common-structure.ts","ng://@ecp-caf/common-structure/lib/define/structure/aggregate.ts","ng://@ecp-caf/common-structure/lib/define/constant/common-structure-const.ts","ng://@ecp-caf/common-structure/lib/define/structure/entity-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/data-transfer-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/value-object.ts","ng://@ecp-caf/common-structure/lib/define/structure/entity-relation.ts","ng://@ecp-caf/common-structure/lib/define/constant/element-const.ts","ng://@ecp-caf/common-structure/lib/extension.ts","ng://@ecp-caf/common-structure/lib/define/operation/operation.ts","ng://@ecp-caf/common-structure/lib/define/parameter/parameter.ts","ng://@ecp-caf/common-structure/lib/define/property/property.ts","ng://@ecp-caf/common-structure/lib/define/data-type/data-type.ts","ng://@ecp-caf/common-structure/lib/define/constant/data-type-const.ts","ng://@ecp-caf/common-structure/lib/define/data-type/collection-type/collection-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/map-type/map-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/primitive-type/primitive-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/structured-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/entity-type/entity-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/value-object-type/value-object-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/enumeration-type/enumeration-type.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type/enumeration-type/enumeration-item.ts","ng://@ecp-caf/common-structure/lib/define/data-type/object-type/object-type.ts","ng://@ecp-caf/common-structure/lib/define/constant/constraint-const.ts","ng://@ecp-caf/common-structure/lib/define/constraint/decimal-constraint.ts","ng://@ecp-caf/common-structure/lib/define/constraint/string-constraint.ts","ng://@ecp-caf/common-structure/lib/define/data-type/primitive-type/primitive-type-kind.ts","ng://@ecp-caf/common-structure/lib/define/data-type/structured-type-refer-type/structured-refer-type.ts","ng://@ecp-caf/common-structure/lib/convertor/utils/data-type-convert-util.ts","ng://@ecp-caf/common-structure/lib/convertor/extension/extension-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/collection-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/map-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/primitive-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/property/property-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/structured-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/data-transfer-object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/entity-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/value-object-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/enumeration-item-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/data-type/enumeration-type-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/parameter/parameter-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/operation/operation-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/utils/refer-replace-util.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/common-structure-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/aggregate-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/entity-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/data-transfer-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/value-object-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/relation-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/structure/relation-dict-convertor.ts","ng://@ecp-caf/common-structure/lib/convertor/constraint/constraint-convertor.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-primitive-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-collection-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-map-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-structured-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-entity-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-enumeration-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-dto-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-vo-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-object-type-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-data-type-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/default-constant.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-operation-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-operation-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-parameter-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-parameter-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-property-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-property-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-entity-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-value-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-data-transfer-object-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-structure-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/serializer/default-constraint-serializer.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/factory/default-constraint-serializer-factory.ts","ng://@ecp-caf/common-structure/lib/serialize-context/default/default-serialize-context.ts","ng://@ecp-caf/common-structure/lib/service/design-time/common-structure-dt-service.ts","ng://@ecp-caf/common-structure/lib/service/run-time/common-structure-rt-service.ts","ng://@ecp-caf/common-structure/lib/common-structure.module.ts"],"sourcesContent":["import { StructuredType } from '../data-type/structured-type/structured-type';\r\n\r\nexport class CommonStructure{\r\n    id:string;\r\n    code:string;\r\n    name:string;\r\n    uri:string;\r\n    description:string;\r\n    kind:string;\r\n    structuredTypes:Array<StructuredType>;\r\n    refStructures:Array<CommonStructure>;\r\n    \r\n}","import { CommonStructure } from './common-structure';\r\nimport { StructuredType } from '../data-type/structured-type/structured-type';\r\n\r\nexport class Aggregate extends CommonStructure{\r\n\r\n    root:StructuredType\r\n\r\n}\r\n","export class CommonStructureConst{\r\n    private constructor(){}\r\n    \r\n    static readonly DEFAULT_ENTITY_OBJECT = \"DefaultEntityObject\";\r\n    static readonly DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDataTransferObject\";\r\n    static readonly DEFAULT_VALUE_OBJECT = \"DefaultValueObject\";\r\n\r\n    \r\n \r\n}","import { EntityRelation } from './entity-relation';\r\nimport { Operation } from '../operation/operation';\r\nimport { Aggregate } from './aggregate';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class EntityObject extends Aggregate{\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_ENTITY_OBJECT;\r\n    }\r\n    entityRelations:{string:{string:Array<EntityRelation>}};\r\n    operations:Array<Operation>;\r\n\r\n}","import { Aggregate } from './aggregate';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class DataTransferObject extends Aggregate{\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_DATA_TRANSFER_OBJECT;\r\n    }\r\n\r\n}","import { CommonStructure } from './common-structure';\r\nimport { ValueObjectType } from '../data-type/structured-type/value-object-type/value-object-type';\r\nimport { Operation } from '../operation/operation';\r\nimport { CommonStructureConst } from '../constant/common-structure-const';\r\n\r\nexport class ValueObject extends CommonStructure {\r\n    dataType: ValueObjectType;\r\n    operations: Array<Operation>;\r\n    constructor(){\r\n        super();\r\n        this.kind=CommonStructureConst.DEFAULT_VALUE_OBJECT;\r\n    }\r\n\r\n}","export class EntityRelation {\r\n\r\n    ParentPropCode: string;\r\n\r\n    ChildPropCode: string;\r\n}","export class ElementConstant{\r\n    private constructor(){}\r\n\r\n    static readonly DEFAULT_MULTILLINGUAL_PROPERTY = \"DefaultMultillingualProperty\";\r\n    static readonly DEFAULT_OPERATION = \"DefaultOperation\";\r\n    static readonly DEFAULT_PARAMETER = \"DefaultParameter\";\r\n    static readonly DEFAULT_PROPERTY = \"DefaultProperty\";\r\n}","import { IExtension } from './i-extension';\r\n\r\nexport class Extension implements IExtension {\r\n\r\n    extension: { [key: string]: string };\r\n\r\n    getKeys(): any[] {\r\n        let result = new Array<string>();\r\n        for (let key in this.extension) {\r\n            result.push(key);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getValue(key: any) {\r\n        this.extension[key];\r\n    }\r\n}","import { Parameter } from '../parameter/parameter';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Operation extends Extension {\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    uri: string;\r\n    parameters: Array<Parameter>;\r\n    returnType:IDataType;\r\n    kind:string;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_OPERATION;\r\n    }\r\n}","import { IConstraint } from '../constraint/i-constraint';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Parameter extends Extension {\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n    defaultValue: any;\r\n    parameterType:IDataType;\r\n    constraint: IConstraint;\r\n    kind:string;\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_PARAMETER;\r\n    }\r\n}","import { IConstraint } from '../constraint/i-constraint';\r\nimport { IDataType } from '../data-type/i-data-type';\r\nimport { ElementConstant } from '../constant/element-const';\r\nimport { Extension } from '../../extension';\r\n\r\nexport class Property extends Extension{\r\n    id:string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n    defaultValue: any;\r\n    propertyType: IDataType;\r\n    kind:string;\r\n    constraint: IConstraint;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=ElementConstant.DEFAULT_PROPERTY;\r\n    }\r\n}","import { IDataType } from './i-data-type';\r\nimport { Extension } from '../../extension';\r\n\r\nexport abstract class DataType extends Extension  implements IDataType{\r\n    \r\n    kind:string;\r\n\r\n    getKind():string{\r\n        return this.kind;\r\n    }\r\n}","export class DataTypeConst{\r\n    private constructor(){}\r\n\r\n    static readonly DEFAULT_PRIMITIVE = \"DefaultPrimitiveType\";\r\n    static readonly DEFAULT_COLLECTION = \"DefaultCollectionType\";\r\n    static readonly DEFAULT_MAP = \"DefaultMapType\";\r\n    static readonly DEFAULT_OBJECT=\"Object\";\r\n    static readonly DEFAULT_STRUCTURED=\"DefaultStructuredType\"\r\n\r\n    static readonly DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDtoType\";\r\n    static readonly DEFAULT_ENTITY = \"DefaultEntityType\";\r\n    static readonly DEFAULT_VALUE_OBJECT = \"DefaultValueObjectType\";\r\n    static readonly DEFAULT_ENUMERATION = \"DefaultEnumType\";\r\n    \r\n    static readonly STRUCTURED_REF = \"RefStructuredType\";\r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * éåç±»å\r\n */\r\nexport class CollectionType extends DataType implements IDataType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_COLLECTION;\r\n    }\r\n\r\n    /**\r\n     * åç´ ç±»åï¼å¦List<T>ä¸­Tçç±»å\r\n     */\r\n    elementType:IDataType;\r\n    \r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * Mapç±»å\r\n */\r\nexport class MapType extends DataType implements IDataType\r\n{\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_MAP;\r\n    }\r\n\r\n    /**\r\n     * é®çç±»å\r\n     */\r\n    keyType:IDataType;\r\n\r\n    /**\r\n     * å¼çç±»å\r\n     */\r\n    valueType:IDataType;\r\n}","import { PrimitiveTypeKind } from './primitive-type-kind';\r\nimport { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * åçç±»å\r\n */\r\nexport class PrimitiveType extends DataType implements IDataType {\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_PRIMITIVE;\r\n    }\r\n\r\n    /**\r\n     * è·ååçç±»åï¼å¦Int,Bool,Float,Doubleç­åºæ¬ç±»å\r\n     */\r\n    primitiveTypeKind: PrimitiveTypeKind;\r\n}","import { Property } from '../../property/property';\r\nimport { DataType } from '../data-type';\r\nimport { IDataType } from '../i-data-type';\r\nimport { CommonStructure } from '../../structure/common-structure';\r\n\r\n/**\r\n * ç»æä½ç±»å\r\n */\r\nexport class StructuredType extends DataType implements IDataType {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    properties: Array<Property>;\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class EntityType extends StructuredType{\r\n    primaryKeys:Array<string>;\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_ENTITY;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class DataTransferObjectType extends StructuredType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\n\r\nexport class ValueObjectType extends StructuredType{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_VALUE_OBJECT;\r\n    }\r\n}","import { StructuredType } from '../structured-type';\r\nimport { DataTypeConst } from '../../../constant/data-type-const';\r\nimport { EnumerationItem } from './enumeration-item';\r\n\r\nexport class EnumerationType extends StructuredType{\r\n\r\n    enumerationItems:Array<EnumerationItem>;\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_ENUMERATION;\r\n    }\r\n}","export class EnumerationItem{\r\n    code:string;\r\n    value:string;\r\n    description:string;\r\n}","import { IDataType } from '../i-data-type';\r\nimport { DataType } from '../data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\nexport class ObjectType extends DataType implements IDataType{\r\n\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.DEFAULT_OBJECT;\r\n    }\r\n\r\n    getKind(): string {\r\n       return this.kind;\r\n    }    \r\n\r\n}","export class ConstraintConst{\r\n\r\n    private constructor(){}\r\n    static readonly STRING: string = \"StringConstraint\";\r\n    static readonly DECIMAL: string = \"DecimalConstraint\";\r\n \r\n}","import { IConstraint } from './i-constraint';\r\nimport { ConstraintConst } from '../constant/constraint-const';\r\n\r\nexport class DecimalConstraint implements IConstraint{\r\n\r\n    getKind(): string {\r\n        return ConstraintConst.DECIMAL;\r\n    }\r\n    \r\n    scale:number;\r\n    pricision:number;\r\n}","import { IConstraint } from './i-constraint';\r\nimport { ConstraintConst } from '../constant/constraint-const';\r\n\r\nexport class StringConstraint implements IConstraint{\r\n\r\n    getKind(): string {\r\n        return ConstraintConst.STRING;\r\n    }\r\n    \r\n    maxLength:number;\r\n}","export enum PrimitiveTypeKind {\r\n    // String = 0,\r\n    // Bool = 1,\r\n    // Int16 = 2,\r\n    // Int32 = 3,\r\n    // Int64 = 4,\r\n    // Float = 5,\r\n    // Double = 6,\r\n    // Decimal = 7,\r\n    // DateTime = 8,\r\n    // TimeStamp = 9,\r\n    // Byte=10 ,\r\n    String,\r\n    Bool,\r\n    Int16,\r\n    Int32,\r\n    Int64,\r\n    Float,\r\n    Double,\r\n    Decimal,\r\n    DateTime,\r\n    TimeStamp,\r\n    Byte\r\n}","\r\nimport { DataType } from '../data-type';\r\nimport { IDataType } from '../i-data-type';\r\nimport { DataTypeConst } from '../../constant/data-type-const';\r\n\r\n/**\r\n * Mapç±»å\r\n */\r\nexport class StructuredReferType extends DataType implements IDataType{\r\n    constructor(){\r\n        super();\r\n        this.kind=DataTypeConst.STRUCTURED_REF;\r\n    }\r\n   \r\n    /**\r\n     * structuredId\r\n     */\r\n    refId:string;\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\n\r\nexport class DataTypeConvertUtil {\r\n\r\n    static convertToObject(datatype: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        if (datatype instanceof StructuredType) {\r\n            result['kind'] = \"RefStructuredType\";\r\n            result[\"isRefer\"] = true;\r\n            result[\"refId\"] = datatype.id;\r\n        }\r\n        else {\r\n            var kind = datatype.getKind();\r\n            result[\"kind\"] = kind;\r\n            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);\r\n            result = serializer.serialize(datatype, ctxt);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static initFromObject(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result: IDataType;\r\n        if (obj['isRefer'] != null) {\r\n            result = new StructuredReferType();\r\n            (result as StructuredReferType).refId = obj['refId'];\r\n        }\r\n        else {\r\n            var kind = obj[\"kind\"];\r\n            var serializer = ctxt.getDataTypeSerializerFactory().get(kind);\r\n            result = serializer.deserialize(obj, ctxt);\r\n        }\r\n        return result;\r\n        // switch (obj[\"kind\"]) {\r\n        //     case DataTypeConst.DEFAULT_PRIMITIVE:\r\n        //         let primitiveKindConvertor = new PrimitiveTypeConvertor();\r\n        //         return primitiveKindConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_COLLECTION:\r\n        //         let collectionConvertor = new CollectionTypeConvertor();\r\n        //         return collectionConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_MAP:\r\n        //         let mapConvertor = new MapTypeConvertor();\r\n        //         return mapConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_STRUCTURED:\r\n        //         let structureConvertor = new StructuredTypeConvertor();\r\n        //         return structureConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_ENTITY:\r\n        //         let entityConvertor = new StructuredTypeConvertor();\r\n        //         return entityConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_VALUE_OBJECT:\r\n        //         let voConvertor = new StructuredTypeConvertor();\r\n        //         return voConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:\r\n        //         let dtoConvertor = new StructuredTypeConvertor();\r\n        //         return dtoConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.DEFAULT_ENUMERATION:\r\n        //         let enumerationConvertor = new StructuredTypeConvertor();\r\n        //         return enumerationConvertor.initFromObject(obj);\r\n        //     case DataTypeConst.STRUCTURED_REF:\r\n        //         let structureRefConvertor = new StructuredTypeReferConvertor();\r\n        //         return structureRefConvertor.initFromObject(obj);\r\n        //     default:\r\n        //         throw new Error(`æ°æ®ç±»åä¸æ¯æç${obj[\"kind\"]}ç±»åï¼`);\r\n        // }\r\n    }\r\n}","import { Extension } from '../../extension';\r\n\r\nexport class ExtensionConvertor{\r\n\r\n    addToJObj(extensionObj:Extension,jObj:Object){\r\n        jObj['extension'] = extensionObj.extension;\r\n\r\n    }\r\n\r\n    addToObj(extensionObj:Extension,jObj:Object){\r\n        if (jObj['extension']) {\r\n            extensionObj.extension = jObj['extension'];\r\n        }\r\n    }\r\n}","import { CollectionType } from '../../define/data-type/collection-type/collection-type';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class CollectionTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let collectiontype = datatype as CollectionType;\r\n        obj['kind'] = collectiontype.kind;\r\n        obj['elementType'] = null;\r\n        if (collectiontype.elementType) {\r\n            let kind = collectiontype.elementType.getKind();\r\n            if (!kind) {\r\n                throw new Error('éåç±»ååºååæ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['elementType'] = DataTypeConvertUtil.convertToObject(collectiontype.elementType, ctxt);\r\n        }\r\n\r\n        if (collectiontype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(collectiontype, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        var collectionType = dataType as CollectionType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        collectionType.kind = obj['kind'];\r\n        if (obj['elementType']) {\r\n            let kind = obj['elementType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æCollectionTypeæ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            collectionType.elementType = DataTypeConvertUtil.initFromObject(obj['elementType'], ctxt);\r\n        }\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(collectionType, obj);\r\n        }\r\n    }\r\n}","import { MapType } from '../../define/data-type/map-type/map-type';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class MapTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n\r\n        let maptype = datatype as MapType;\r\n        obj['kind'] = maptype.kind;\r\n        obj['keyType'] = null;\r\n        if (maptype.keyType) {\r\n            let kind = maptype.keyType.getKind();\r\n            if (!kind) {\r\n                throw new Error('Mapç±»ååºååæ¶KeyTypeçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['keyType'] = DataTypeConvertUtil.convertToObject(maptype.keyType, ctxt);\r\n        }\r\n\r\n        obj['valueType'] = null;\r\n        if (maptype.valueType) {\r\n            let kind = maptype.valueType.getKind();\r\n            if (!kind) {\r\n                throw new Error('Mapç±»ååºååæ¶ValueTypeçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['valueType'] = DataTypeConvertUtil.convertToObject(maptype.valueType, ctxt);\r\n        }\r\n\r\n        if (maptype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(maptype, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let maptype = dataType as MapType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        maptype.kind = obj['kind'];\r\n\r\n        if (obj['keyType']) {\r\n            let kind = obj['keyType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æMapTypeçKeyTypeå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            maptype.keyType = DataTypeConvertUtil.initFromObject(obj['keyType'], ctxt);\r\n        }\r\n\r\n        if (obj['valueType']) {\r\n            let kind = obj['valueType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æMapTypeçValueTypeå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            maptype.valueType = DataTypeConvertUtil.initFromObject(obj['valueType'], ctxt);\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(maptype, obj);\r\n        }\r\n    }\r\n}","import { PrimitiveType } from '../../define/data-type/primitive-type/primitive-type';\r\nimport { PrimitiveTypeKind } from '../../define/data-type/primitive-type/primitive-type-kind';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class PrimitiveTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let primitivetype = datatype as PrimitiveType;\r\n        obj['kind'] = primitivetype.kind;\r\n        //è¿æ¯number\r\n        let primitiveTypeKindNum = primitivetype.primitiveTypeKind;\r\n        obj['primitiveTypeKind'] = primitiveTypeKindNum;\r\n\r\n        if (primitivetype.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(primitivetype, obj);\r\n        }\r\n        \r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let primitivetype = dataType as PrimitiveType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        primitivetype.kind = obj['kind'];\r\n        primitivetype.primitiveTypeKind = obj['primitiveTypeKind'] as number;\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(primitivetype, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ObjectType } from '../../define/data-type/object-type/object-type';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class ObjectTypeConvertor {\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        if (!datatype) {\r\n            return;\r\n        }\r\n        let objectType = datatype as ObjectType;\r\n        obj['kind'] = objectType.kind;\r\n\r\n        if (objectType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(objectType, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let objectType = dataType as ObjectType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        objectType.kind = obj['kind'];\r\n\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(objectType, obj);\r\n        }\r\n    }\r\n}","import { Property } from '../../define/property/property';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class PropertyConvertor {\r\n\r\n    convertToObject(obj: Object, property: Property, ctxt: ISerializeContext): void {\r\n        if (!property) {\r\n            return;\r\n        }\r\n        obj['kind'] = property.kind;\r\n        obj['id'] = property.id;\r\n        obj['code'] = property.code;\r\n        obj['name'] = property.name;\r\n        obj['description'] = property.description;\r\n        obj['defaultValue'] = property.defaultValue;\r\n        obj['required'] = <boolean>property.required;\r\n\r\n        if (property.propertyType) {\r\n            let kind = property.propertyType.getKind();\r\n            if (!kind) {\r\n                throw new Error('å±æ§åºååæ¶å±æ§ç±»åè·åTypeKindä¸ºç©ºæ ¼ï¼');\r\n            }\r\n            obj['propertyType'] = DataTypeConvertUtil.convertToObject(property.propertyType, ctxt);\r\n        }\r\n        obj['constraint'] = null;\r\n\r\n        if (property.constraint) {\r\n            let kind = property.constraint.getKind();\r\n            if (!kind) {\r\n                throw new Error('å±æ§åºååæ¶å±æ§çº¦æè·åConstraintKindä¸ºç©ºæ ¼ï¼');\r\n            }\r\n            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(property.constraint,ctxt);\r\n        }\r\n\r\n        if (property.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(property, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(property: Property, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        property.kind = obj['kind'];\r\n        property.id = obj['id'];\r\n        property.code = obj['code'];\r\n        property.name = obj['name'];\r\n        property.defaultValue = obj['defaultValue'];\r\n        property.required = obj['required'] as boolean;\r\n        property.description = obj['description'];\r\n\r\n        if (obj['propertyType']) {\r\n            let kind = obj['propertyType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æå±æ§æ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            property.propertyType = DataTypeConvertUtil.initFromObject(obj['propertyType'], ctxt);\r\n        }\r\n        if (obj['constraint']) {\r\n            let kind = obj['constraint']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æå±æ§æ¶çº¦æç±»åçConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            property.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'],ctxt);\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(property, obj);\r\n        }\r\n    }\r\n}","import { Property } from '../../define/property/property';\r\nimport { PropertyConvertor } from '../property/property-convertor';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { CommonStructureConvertor } from '../structure/common-structure-convertor';\r\nimport { CommonStructure } from '../../define/structure/common-structure';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class StructuredTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structure = datatype as StructuredType;\r\n        if (!structure) {\r\n            return;\r\n        }\r\n        obj['kind'] = structure.kind;\r\n        obj['id'] = structure.id;\r\n        obj['code'] = structure.code;\r\n        obj['name'] = structure.name;\r\n        obj['description'] = structure.description;\r\n        obj['properties'] = new Array<Object>();\r\n        if (structure.properties) {\r\n            let propertyConvertor = new PropertyConvertor();\r\n            structure.properties.forEach(property => {\r\n                var kind = property.kind;\r\n                var serializer = ctxt.getPropertySerializerFactory().get(kind);\r\n                var propertyObj = serializer.serialize(property, ctxt);\r\n                obj['properties'].push(propertyObj);\r\n            });\r\n        }\r\n\r\n        if (structure.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(structure, obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structure = dataType as StructuredType;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        structure.kind = obj['kind'];\r\n        structure.id = obj['id'];\r\n        structure.name = obj['name'];\r\n        structure.code = obj['code'];\r\n        structure.description = obj['description'];\r\n\r\n        if (obj['properties']) {\r\n            structure.properties = new Array<Property>();\r\n            let propertyConvertor = new PropertyConvertor();\r\n            obj['properties'].forEach(propertyObj => {\r\n                var propKind = propertyObj[\"kind\"];\r\n                var serializer = ctxt.getPropertySerializerFactory().get(propKind);\r\n                var property = serializer.deserialize(propertyObj, ctxt);\r\n                structure.properties.push(property);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(structure, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { DataTransferObjectType } from '../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { CommonStructureConvertor } from '../structure/common-structure-convertor';\r\n\r\nexport class DataTransferObjectTypeConvertor{\r\n    convertToObject(obj:Object,datatype:IDataType,ctxt:ISerializeContext):void{\r\n        let structuredConvertor: StructuredTypeConvertor=new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj,datatype,ctxt);\r\n    }\r\n\r\n    initFromObject(dataType:IDataType,obj:Object,ctxt:ISerializeContext):void{\r\n        let structuredConvertor: StructuredTypeConvertor=new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType,obj,ctxt) ;\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { EntityType } from '../../define/data-type/structured-type/entity-type/entity-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class EntityTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        let result = structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n        result['primaryKeys'] = new Array<string>();\r\n        let entityType = datatype as EntityType;\r\n        if (entityType.primaryKeys) {\r\n            entityType.primaryKeys.forEach(element => {\r\n                result['primaryKeys'].push(element);\r\n            });\r\n        }\r\n\r\n        if (entityType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(entityType, obj);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let entityType = dataType as EntityType;\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n        if (obj['primaryKey']) {\r\n            entityType.primaryKeys = new Array<string>();\r\n            obj['primaryKey'].forEach(element => {\r\n                entityType.primaryKeys.push(element);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(entityType, obj);\r\n        }\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { ValueObjectType } from '../../define/data-type/structured-type/value-object-type/value-object-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\n\r\nexport class ValueObjectTypeConvertor {\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n    }\r\n}","import { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';\r\n\r\nexport class EnumerationItemConvertor{\r\n    convertToObject(obj:Object,item: EnumerationItem): void {\r\n        obj['code'] = item.code;\r\n        obj['value'] = item.value;\r\n        obj['description'] = item.description;\r\n    }\r\n\r\n    initFromObject(item:EnumerationItem,obj: Object): void {\r\n        let enumItem = item as EnumerationItem;\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        enumItem.code = obj['code'];\r\n        enumItem.value = obj['value'];\r\n        enumItem.description = obj['description'];\r\n    }\r\n}","import { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredTypeConvertor } from './structured-type-convertor';\r\nimport { EntityType } from '../../define/data-type/structured-type/entity-type/entity-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { EnumerationType } from '../../define/data-type/structured-type/enumeration-type/enumeration-type';\r\nimport { EnumerationItemConvertor } from './enumeration-item-convertor';\r\nimport { EnumerationItem } from '../../define/data-type/structured-type/enumeration-type/enumeration-item';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class EnumerationTypeConvertor {\r\n\r\n    convertToObject(obj: Object, datatype: IDataType, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.convertToObject(obj, datatype, ctxt);\r\n        let enumerationType = datatype as EnumerationType;\r\n        //enum items\r\n        obj['enumerationItems'] = new Array<Object>();\r\n        if (enumerationType.enumerationItems) {\r\n            let convertor: EnumerationItemConvertor = new EnumerationItemConvertor();\r\n            enumerationType.enumerationItems.forEach(item => {\r\n                let itemObj = new Object();\r\n                convertor.convertToObject(itemObj, item);\r\n                obj['enumerationItems'].push(itemObj);\r\n            });\r\n        }\r\n\r\n\r\n        if (enumerationType.extension) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(enumerationType, obj);\r\n        }\r\n\r\n    }\r\n\r\n    initFromObject(dataType: IDataType, obj: Object, ctxt: ISerializeContext): void {\r\n        let structuredConvertor: StructuredTypeConvertor = new StructuredTypeConvertor();\r\n        structuredConvertor.initFromObject(dataType, obj, ctxt);\r\n        //enum items\r\n        let enumerationType = dataType as EnumerationType;\r\n        if (obj['enumerationItems']) {\r\n            enumerationType.enumerationItems = new Array<EnumerationItem>();\r\n            let convertor: EnumerationItemConvertor = new EnumerationItemConvertor();\r\n            obj['enumerationItems'].forEach(itemObj => {\r\n                let item: EnumerationItem = new EnumerationItem();\r\n                convertor.initFromObject(item, itemObj);\r\n                enumerationType.enumerationItems.push(item);\r\n            });\r\n        }\r\n\r\n        if (obj[\"extension\"]) {\r\n            let extensionConvertor = new ExtensionConvertor();\r\n            extensionConvertor.addToObj(enumerationType, obj);\r\n        }\r\n    }\r\n}","import { Parameter } from '../../define/parameter/parameter';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class ParameterConvertor {\r\n\r\n    convertToObject(obj:Object,parameter: Parameter,ctxt:ISerializeContext): void {\r\n        if (!parameter) {\r\n            return;\r\n        }\r\n        obj['kind'] = parameter.kind;\r\n\r\n        obj['code'] = parameter.code;\r\n        obj['name'] = parameter.name;\r\n        obj['description'] = parameter.description;\r\n        obj['required'] = parameter.required;\r\n        obj['defaultValue'] = parameter.defaultValue;\r\n\r\n        obj['parameterType'] = null;\r\n        if (parameter.parameterType) {\r\n            let kind = parameter.parameterType.getKind();\r\n            if (!kind) {\r\n                throw new Error('åæ°åºååæ¶æ°æ®ç±»åçTypeKindä¸ºç©ºï¼');\r\n            }\r\n            obj['parameterType'] = DataTypeConvertUtil.convertToObject(parameter.parameterType,ctxt);\r\n        }\r\n\r\n        obj['constraint'] = null;\r\n        if (parameter.constraint) {\r\n            let kind = parameter.constraint.getKind();\r\n            if (!kind) {\r\n                throw new Error('åæ°åºååæ¶åæ°çº¦æçConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            obj['constraint'] = ctxt.getConstraintSerializerFactory().get(kind).serialize(parameter.constraint,ctxt);\r\n        }\r\n        \r\n        if(parameter.extension){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(parameter,obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(parameter: Parameter, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        parameter.kind = obj['kind'];\r\n        parameter.code = obj['code'];\r\n        parameter.name = obj['name'];\r\n        parameter.defaultValue = obj['defaultValue'];\r\n        parameter.description = obj['description'];\r\n        parameter.required = obj['required'] as boolean;\r\n\r\n        if (obj['parameterType']) {\r\n            let kind = obj['parameterType']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æåæ°æ°æ®ç±»åæ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            parameter.parameterType = DataTypeConvertUtil.initFromObject(obj['parameterType'], ctxt);\r\n        }\r\n        if (obj['constraint']) {\r\n            let kind = obj['constraint']['kind'];\r\n            if (!kind) {\r\n                throw new Error('è§£æåæ°çº¦æç±»åæ¶ConstraintKindä¸ºç©ºï¼');\r\n            }\r\n            parameter.constraint = ctxt.getConstraintSerializerFactory().get(kind).deserialize(obj['constraint'],ctxt);\r\n        }\r\n        if(obj[\"extension\"]){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToObj(parameter,obj);\r\n        }\r\n    }\r\n}","import { Operation } from '../../define/operation/operation';\r\nimport { Parameter } from '../../define/parameter/parameter';\r\nimport { ParameterConvertor } from '../parameter/parameter-convertor';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ExtensionConvertor } from '../extension/extension-convertor';\r\n\r\nexport class OperationConvertor{\r\n\r\n    convertToObject(obj:Object,operation:Operation,ctxt:ISerializeContext):void{\r\n        if(!operation){\r\n            return ;\r\n        }\r\n        obj['kind']=operation.kind;\r\n\r\n        obj['code']=operation.code;\r\n        obj['name']=operation.name;\r\n        obj['uri']=operation.uri;\r\n        obj['description']=operation.description;\r\n\r\n        obj['returnType']=null;\r\n        if(operation.returnType){\r\n            let kind=operation.returnType.getKind();\r\n            if(!kind){\r\n                throw new Error('æä½åºååæ¶è¿åå¼ç±»åçTypeKindä¸ºç©º!');\r\n            }\r\n            obj['returnType']=DataTypeConvertUtil.convertToObject(operation.returnType,ctxt);\r\n        }\r\n        \r\n        obj['parameters']=new Array<Object>();\r\n        if(operation.parameters){\r\n            let parameterConvertor=new ParameterConvertor();\r\n            operation.parameters.forEach(parameter => {\r\n                var kind=parameter.kind;\r\n                var serializer=ctxt.getParameterSerializerFactory().get(kind);\r\n                var parameterObj=serializer.deserialize(parameter,ctxt);\r\n                obj[\"parameters\"].push(parameterObj);\r\n            });\r\n        }\r\n\r\n        if(operation.extension){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToJObj(operation,obj);\r\n        }\r\n    }\r\n\r\n    initFromObject(operation:Operation,obj:Object,ctxt:ISerializeContext):void{\r\n        if(!obj){\r\n            return ;\r\n        }\r\n        operation.kind=obj['kind'];\r\n        operation.code=obj['code'];\r\n        operation.name=obj['name'];\r\n        operation.uri=obj['uri'];\r\n        operation.description=obj['description'];\r\n\r\n        if(obj['parameters']){\r\n            operation.parameters=new Array<Parameter>();\r\n            let parameterConvertor=new ParameterConvertor();\r\n            obj['parameters'].forEach(parameterObj => {\r\n                var kind=parameterObj['kind'];\r\n                var serializer=ctxt.getParameterSerializerFactory().get(kind);\r\n                var parameter=serializer.deserialize(parameterObj,ctxt);\r\n                operation.parameters.push(parameter);\r\n            });\r\n        }\r\n        if(obj['returnType']){\r\n            let kind=obj['returnType']['kind'];\r\n            if(!kind){\r\n                throw new Error('è§£ææä½çè¿åå¼æ¶TypeKindä¸ºç©ºï¼');\r\n            }\r\n            operation.returnType=DataTypeConvertUtil.initFromObject(obj['returnType'],ctxt);\r\n        }\r\n        \r\n        if(obj[\"extension\"]){\r\n            let extensionConvertor=new ExtensionConvertor();\r\n            extensionConvertor.addToObj(operation,obj);\r\n        }\r\n    }\r\n}","import { CommonStructure } from '../../define/structure/common-structure';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { IDataType } from '../../define/data-type/i-data-type';\r\nimport { StructuredReferType } from '../../define/data-type/structured-type-refer-type/structured-refer-type';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { Operation } from '../../define/operation/operation';\r\nimport { DataType } from '../../define/data-type/data-type';\r\n\r\nexport class ReferReplaceUtil {\r\n    static replaceOperationRefer(allStructureTypes: StructuredType[], operations: Operation[]) {\r\n        if (operations != null) {\r\n            operations.forEach(op => {\r\n                let retType = op.returnType;\r\n                if (retType != null && retType instanceof StructuredReferType) {\r\n                    let structureTypeId: string = (retType as StructuredReferType).refId;\r\n                    let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);\r\n                    op.returnType = queryStructureType;\r\n                }\r\n                if (op.parameters != null) {\r\n                    op.parameters.forEach(parameter => {\r\n                        let parameterType = parameter.parameterType;\r\n                        if (parameterType instanceof StructuredReferType) {\r\n                            let structureTypeId: string = (parameterType as StructuredReferType).refId;\r\n                            let queryStructureType = this.getRefStructureType(allStructureTypes, structureTypeId);\r\n                            parameter.parameterType = queryStructureType;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    static replacePropertyRefer(structure: CommonStructure) {\r\n        let allStructures = this.getAllStructuredTypes(structure);\r\n        if (structure.structuredTypes != null) {\r\n            structure.structuredTypes.forEach(structureType => {\r\n                if (structureType.properties != null) {\r\n                    structureType.properties.forEach(prop => {\r\n                        if (prop.propertyType instanceof StructuredReferType) {\r\n                            let structureTypeId = (prop.propertyType as StructuredReferType).refId;\r\n                            let queryStructureType = this.getRefStructureType(allStructures, structureTypeId);\r\n                            prop.propertyType = queryStructureType;\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                this.replacePropertyRefer(refStructure);\r\n            })\r\n        }\r\n    }\r\n\r\n    static getRefStructureType(allStructures: StructuredType[], structureId: string): StructuredType {\r\n        let queryStructureType = allStructures.find(x => x.id == structureId);\r\n        return queryStructureType;\r\n    }\r\n\r\n    static getAllStructuredTypes(structure: CommonStructure) {\r\n        let array: Array<StructuredType> = new Array<StructuredType>();\r\n        if (structure.structuredTypes != null) {\r\n            array=array.concat(structure.structuredTypes);\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                if (refStructure.structuredTypes != null) {\r\n                    array=array.concat(refStructure.structuredTypes);\r\n                }\r\n            })\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n\r\n}","import { StructuredTypeConvertor } from '../data-type/structured-type-convertor';\r\nimport { CommonStructure } from '../../define/structure/common-structure';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { DataTypeConvertUtil } from '../utils/data-type-convert-util';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class CommonStructureConvertor {\r\n\r\n    convertToObject(obj:Object,structure: CommonStructure,ctxt:ICommonStructureSerializeContext): void {\r\n        if (!structure) {\r\n            return;\r\n        }   \r\n        obj['id'] = structure.id;\r\n        obj['uri']=structure.uri;\r\n        obj['code'] = structure.code;\r\n        obj['name'] = structure.name;\r\n        obj['kind'] = structure.kind;\r\n        obj['description'] = structure.description;\r\n        let structureConvertor = new StructuredTypeConvertor();\r\n\r\n        obj['structuredTypes'] = new Array<Object>();\r\n        if (structure.structuredTypes) {\r\n            structure.structuredTypes.forEach(structuredType => {\r\n                var kind=structuredType.kind;\r\n                var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n                var structuredTypeObj=serializer.serialize(structuredType,ctxt);\r\n                obj['structuredTypes'].push(structuredTypeObj);\r\n            });\r\n        }\r\n\r\n        obj['refStructures'] = new Array<Object>();\r\n        if (structure.refStructures) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                var kind=refStructure.kind;\r\n                var serializer=ctxt.getStructureSerializerFactory().get(kind);\r\n                var refStructureObj=serializer.serialize(refStructure,ctxt);\r\n                obj['refStructures'].push(refStructureObj);\r\n            });\r\n        }\r\n    }\r\n\r\n    initFromObject(structure:CommonStructure,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        structure.kind = obj['kind'];\r\n        structure.id = obj['id'];\r\n        structure.uri=obj['uri'];\r\n        structure.code = obj['code'];\r\n        structure.name = obj['name'];\r\n        structure.description = obj['description'];\r\n\r\n        if (obj['structuredTypes']) {\r\n            structure.structuredTypes = new Array<StructuredType>();\r\n            obj['structuredTypes'].forEach(structureObj => {\r\n                var kind=structureObj['kind'];\r\n                var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n                var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;\r\n                structure.structuredTypes.push(structuredType);\r\n                // structure.structuredTypes.push(DataTypeConvertUtil.initFromObject(structureObj) as StructuredType);\r\n            });\r\n        }\r\n\r\n        if (obj['refStructures']) {\r\n            structure.refStructures = new Array<CommonStructure>();\r\n            obj['refStructures'].forEach(refTree => {\r\n                var kind=refTree['kind'];\r\n                var refSerializer=ctxt.getStructureSerializerFactory().get(kind);\r\n                var refStructure=refSerializer.deserialize(refTree,ctxt);\r\n                structure.refStructures.push(refStructure);\r\n                // structure.refStructures.push(CommonStructureConvertUtil.initFromObject(refTree));\r\n            })\r\n        }\r\n        //æ¿æ¢structuredTypesårefStructuresä¸­çpropRefer\r\n        ReferReplaceUtil.replacePropertyRefer(structure);\r\n    }\r\n\r\n}","import { Aggregate } from '../../define/structure/aggregate';\r\nimport { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class AggregateConvertor{\r\n\r\n     convertToObject(obj:Object,aggregate: Aggregate,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.convertToObject(obj,aggregate,ctxt);\r\n        //root\r\n        if(aggregate.root){\r\n            obj['rootId']=aggregate.root.id;\r\n        }\r\n    }\r\n\r\n     initFromObject(aggregate:Aggregate,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.initFromObject(aggregate,obj,ctxt);\r\n        //root\r\n        let rootId=obj['rootId'];\r\n        if(rootId&&aggregate.structuredTypes&&aggregate.structuredTypes.length>0){\r\n            aggregate.root=aggregate.structuredTypes.find(x=>x.id==rootId);\r\n        }\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { Operation } from '../../define/operation/operation';\r\nimport { OperationConvertor } from '../operation/operation-convertor';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { AggregateConvertor } from './aggregate-convertor';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class EntityObjectConvertor  {\r\n\r\n     convertToObject(obj:Object,entity: EntityObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.convertToObject(obj,entity,ctxt);\r\n        obj['entityRelations'] = entity.entityRelations;\r\n        obj['operations'] = new Array<Object>();\r\n        if (entity.operations) {\r\n            entity.operations.forEach(op => {\r\n                var kind=op['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var opObj=serializer.serialize(op,ctxt);\r\n                obj['operations'].push(opObj);\r\n            });\r\n        }\r\n    }\r\n\r\n     initFromObject(entity:EntityObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.initFromObject(entity,obj,ctxt);\r\n        if (obj['entityRelations']) {\r\n            entity.entityRelations = obj['entityRelations'];\r\n        }\r\n        if (obj['operations']) {\r\n            entity.operations = new Array<Operation>();\r\n            obj['operations'].forEach(operationObj => {\r\n                var kind=operationObj['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var operation=serializer.deserialize(operationObj,ctxt);\r\n                entity.operations.push(operation);\r\n            });\r\n        }\r\n        let allStructureTypes:Array<StructuredType>=ReferReplaceUtil.getAllStructuredTypes(entity);\r\n        ReferReplaceUtil.replaceOperationRefer(allStructureTypes,entity.operations);\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { DataTransferObject } from '../../define/structure/data-transfer-object';\r\nimport { AggregateConvertor } from './aggregate-convertor';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class DataTransferObjectConvertor {\r\n     convertToObject(obj:Object,dto: DataTransferObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.convertToObject(obj,dto,ctxt);\r\n    }\r\n\r\n     initFromObject(dto:DataTransferObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let aggregateConvertor=new AggregateConvertor();  \r\n        aggregateConvertor.initFromObject(dto,obj,ctxt);\r\n    }\r\n}","import { CommonStructureConvertor } from './common-structure-convertor';\r\nimport { ValueObject } from '../../define/structure/value-object';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\nimport { StructuredType } from '../../define/data-type/structured-type/structured-type';\r\nimport { ReferReplaceUtil } from '../utils/refer-replace-util';\r\nimport { ICommonStructureSerializeContext } from '../../serialize-context/extension/i-common-structure-serialize-context';\r\n\r\nexport class ValueObjectConvertor {\r\n     convertToObject(obj:Object,vo: ValueObject,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.convertToObject(obj,vo,ctxt);\r\n        //first?\r\n        var type=vo.dataType;\r\n        obj['structureId']=type.id;\r\n    }\r\n\r\n     initFromObject(vo:ValueObject,obj: Object,ctxt:ICommonStructureSerializeContext): void {\r\n        let structureConvertor=new CommonStructureConvertor();  \r\n        structureConvertor.initFromObject(vo,obj,ctxt);\r\n        //æ²¡æroot\r\n        let allStructureTypes:Array<StructuredType>=ReferReplaceUtil.getAllStructuredTypes(vo);\r\n        ReferReplaceUtil.replaceOperationRefer(allStructureTypes,vo.operations);\r\n    }\r\n}","import { EntityRelation } from '../../define/structure/entity-relation';\r\n\r\nexport class RelationConvertor{\r\n    \r\n    convertorToObject(relation:EntityRelation):Object{\r\n        let obj=new Object();\r\n        if(!relation){\r\n            return obj;\r\n        }\r\n        obj['ParentPropCode']=relation.ParentPropCode;\r\n        obj['ChildPropCode']=relation.ChildPropCode;\r\n        return obj;\r\n    }\r\n\r\n    initFromObject(obj:Object):EntityRelation{\r\n        let relation=new EntityRelation();\r\n        if(!obj){\r\n            return relation;\r\n        }\r\n        relation.ParentPropCode=obj['ParentPropCode'];\r\n        relation.ChildPropCode=obj['ChildPropCode'];\r\n        return relation;\r\n    }\r\n}","import { RelationConvertor } from './relation-convertor';\r\nimport { EntityRelation } from '../../define/structure/entity-relation';\r\n\r\nexport class RelationDictConvertor {\r\n\r\n    convertorToObject(relationDict: { string: { string: Array<EntityRelation> } }): Object {\r\n        return relationDict;\r\n    }\r\n\r\n    initFromObject(obj: Object): { string: { string: Array<EntityRelation> } } {\r\n        let relationDict = new Object();\r\n        if (!obj) {\r\n            return relationDict as { string: { string: Array<EntityRelation> } };\r\n        }\r\n        let pCodeList = Object.keys(obj);\r\n        pCodeList.forEach(pCode => {\r\n            let cDict = obj[pCode];\r\n            if (cDict) {\r\n                relationDict[pCode] = new Object();\r\n                let cCodeList = Object.keys(cDict);\r\n                cCodeList.forEach(cCode => {\r\n                    let cValue = cDict[cCode];\r\n                    if (cValue) {\r\n                        relationDict[pCode][cCode] = new Array<EntityRelation>();\r\n                        cValue.forEach(relationObj => {\r\n                            let relationConvertor = new RelationConvertor();\r\n                            let relation = relationConvertor.initFromObject(relationObj);\r\n                            relationDict[pCode][cCode].push(relation);\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return relationDict as { string: { string: Array<EntityRelation> } };\r\n    }\r\n}","import { IConstraint } from '../../define/constraint/i-constraint';\r\nimport { ConstraintConst } from '../../define/constant/constraint-const';\r\nimport { DecimalConstraint } from '../../define/constraint/decimal-constraint';\r\nimport { StringConstraint } from '../../define/constraint/string-constraint';\r\nimport { ISerializeContext } from '../../serialize-context/extension/i-serialize-context';\r\n\r\n\r\nexport class ConstraintConvertor {\r\n\r\n    convertToObject(obj: Object, constraint: IConstraint, ctxt: ISerializeContext): void {\r\n        if (!constraint) {\r\n            return;\r\n        }\r\n        switch (constraint.getKind()) {\r\n            case ConstraintConst.DECIMAL:\r\n                let decimalconstraint = constraint as DecimalConstraint;\r\n                obj['scale'] = <number>decimalconstraint.scale;\r\n                obj['pricision'] = <number>decimalconstraint.pricision;\r\n            case ConstraintConst.STRING:\r\n                let stringconstraint = constraint as StringConstraint;\r\n                obj['maxLength'] = <number>stringconstraint.maxLength;\r\n            default:\r\n                throw new Error(`çº¦æä¸æ¯æç${constraint.getKind()}ç±»åï¼`);\r\n        }\r\n    }\r\n\r\n    initFromObject(constraint: IConstraint, obj: Object, ctxt: ISerializeContext): void {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        switch (obj['kind']) {\r\n            case ConstraintConst.DECIMAL:\r\n            case ConstraintConst.STRING:\r\n            default:\r\n                throw new Error(`çº¦æä¸æ¯æç${obj['kind']}ç±»åï¼`);\r\n        }\r\n    }\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';\r\nimport { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';\r\n\r\nexport class DefaultPrimitiveTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new PrimitiveTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new PrimitiveType();\r\n        let baseConvertor = new PrimitiveTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { CollectionTypeConvertor } from '../../../convertor/data-type/collection-type-convertor';\r\nimport { CollectionType } from '../../../define/data-type/collection-type/collection-type';\r\n\r\nexport class DefaultCollectionTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new CollectionTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new CollectionType();\r\n        let baseConvertor = new CollectionTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { MapTypeConvertor } from '../../../convertor/data-type/map-type-convertor';\r\nimport { MapType } from '../../../define/data-type/map-type/map-type';\r\n\r\nexport class DefaultMapTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new MapTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new MapType();                \r\n        let baseConvertor = new MapTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { StructuredTypeConvertor } from '../../../convertor/data-type/structured-type-convertor';\r\nimport { StructuredType } from '../../../define/data-type/structured-type/structured-type';\r\n\r\nexport class DefaultStructuredTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new StructuredTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new StructuredType();\r\n        let baseConvertor = new StructuredTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { EntityTypeConvertor } from '../../../convertor/data-type/entity-type-convertor';\r\nimport { EntityType } from '../../../define/data-type/structured-type/entity-type/entity-type';\r\n\r\nexport class DefaultEntityTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new EntityTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new EntityType();\r\n        let baseConvertor = new EntityTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PrimitiveTypeConvertor } from '../../../convertor/data-type/primitive-type-convertor';\r\nimport { PrimitiveType } from '../../../define/data-type/primitive-type/primitive-type';\r\nimport { EnumerationTypeConvertor } from '../../../convertor/data-type/enumeration-type-convertor';\r\nimport { EnumerationType } from '../../../define/data-type/structured-type/enumeration-type/enumeration-type';\r\n\r\nexport class DefaultEnumerationTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new EnumerationTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new EnumerationType();\r\n        let baseConvertor = new EnumerationTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { DataTransferObjectTypeConvertor } from '../../../convertor/data-type/data-transfer-object-type-convertor';\r\nimport { DataTransferObjectType } from '../../../define/data-type/structured-type/data-transfer-object-type/data-transfer-object-type';\r\n\r\nexport class DefaultDataTransferObjectTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new DataTransferObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result=new DataTransferObjectType();\r\n        let baseConvertor=new DataTransferObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ValueObjectTypeConvertor } from '../../../convertor/data-type/value-object-type-convertor';\r\nimport { ValueObjectType } from '../../../define/data-type/structured-type/value-object-type/value-object-type';\r\n\r\nexport class DefaultValueObjectTypeSerializer implements IDataTypeSerializer{\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new ValueObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result,type,ctxt);\r\n        return result;\r\n    }    \r\n    \r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new ValueObjectType();\r\n        let baseConvertor = new ValueObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n    \r\n}","import { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { IDataType } from '../../../define/data-type/i-data-type';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ObjectTypeConvertor } from '../../../convertor/data-type/object-type-convertor';\r\nimport { ObjectType } from '../../../define/data-type/object-type/object-type';\r\n\r\nexport class DefaultObjectTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ObjectTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new ObjectType();\r\n        let baseConvertor = new ObjectTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializerFactory } from '../../extension/factory/i-data-type-serializer-factory';\r\nimport { IDataTypeSerializer } from '../../extension/serializer/i-data-type-serializer';\r\nimport { DefaultPrimitiveTypeSerializer } from '../serializer/default-primitive-type-serializer';\r\nimport { DefaultCollectionTypeSerializer } from '../serializer/default-collection-type-serializer';\r\nimport { DefaultMapTypeSerializer } from '../serializer/default-map-type-serializer';\r\nimport { DefaultStructuredTypeSerializer } from '../serializer/default-structured-type-serializer';\r\nimport { DefaultEntityTypeSerializer } from '../serializer/default-entity-type-serializer';\r\nimport { DefaultEnumerationTypeSerializer } from '../serializer/default-enumeration-type-serializer';\r\nimport { DefaultDataTransferObjectTypeSerializer } from '../serializer/default-dto-type-serializer';\r\nimport { DataTypeConst } from '../../../define/constant/data-type-const';\r\nimport { DefaultValueObjectTypeSerializer } from '../serializer/default-vo-type-serializer';\r\nimport { DefaultObjectTypeSerializer } from '../serializer/default-object-type-serializer';\r\n\r\nexport class DefaultDataTypeSerializerFactory implements IDataTypeSerializerFactory {\r\n\r\n    private serializerDict: { [key: string]: IDataTypeSerializer } = {};\r\n\r\n    get(kind: string): IDataTypeSerializer {\r\n        switch (kind) {\r\n            case DataTypeConst.DEFAULT_PRIMITIVE:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultPrimitiveTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_COLLECTION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultCollectionTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_MAP:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultMapTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_STRUCTURED:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultStructuredTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_DATA_TRANSFER_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultDataTransferObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_ENTITY:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEntityTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_VALUE_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultValueObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_ENUMERATION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEnumerationTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DataTypeConst.DEFAULT_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultObjectTypeSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªæ¾å°ç±»åä¸º${kind}çåºååå¨ï¼`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","/** DefaultDataType */\r\nexport const DEFAULT_PRIMITIVE_TYPE = \"DefaultPrimitiveType\";\r\nexport const DEFAULT_COLLECTION_TYPE = \"DefaultCollectionType\";\r\nexport const DEFAULT_MAP_TYPE = \"DefaultMapType\";\r\nexport const DEFAULT_STRUCTURED_TYPE = \"DefaultStructuredType\";\r\nexport const DEFAULT_DATA_TRANSFER_OBJECT_TYPE = \"DefaultDtoType\";\r\nexport const DEFAULT_ENTITY_TYPE = \"DefaultEntityType\";\r\nexport const DEFAULT_VALUE_OBJECT_TYPE = \"DefaultValueObjectType\";\r\nexport const DEFAULT_ENUMERATION_TYPE = \"DefaultEnumType\";\r\nexport const DEFAULT_OBJECT_TYPE = \"Object\";\r\n\r\n\r\n/** DefaultElement */\r\nexport const DEFAULT_PROPERTY = \"DefaultProperty\";\r\nexport const DEFAULT_PARAMETER = \"DefaultParameter\";\r\nexport const DEFAULT_OPERATION = \"DefaultOperation\";\r\nexport const DEFAULT_MUTILLINGUAL_PROPERTY = \"DefaultMultillingualProperty\";\r\n\r\n\r\n/** DefaultStructure */\r\nexport const DEFAULT_ENTITY_OBJECT = \"DefaultEntityObject\";\r\nexport const DEFAULT_DATA_TRANSFER_OBJECT = \"DefaultDataTransferObject\";\r\nexport const DEFAULT_VALUE_OBJECT = \"DefaultValueObject\";\r\n\r\n/** DefaultConstraint */\r\nexport const DEFAULT_CONSTRAINT = \"DefaultConstraint\"\r\n","import { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { Operation } from '../../../define/operation/operation';\r\nimport { OperationConvertor } from '../../../convertor/operation/operation-convertor';\r\n\r\nexport class DefaultOperationSerializer implements IOperationSerializer {\r\n    serialize(op: Operation, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new OperationConvertor();\r\n        baseConvertor.convertToObject(result, op, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Operation {\r\n        let result = new Operation();\r\n        let baseConvertor = new OperationConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IOperationSerializerFactory } from '../../extension/factory/i-operation-serializer-factory';\r\nimport { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { DEFAULT_OPERATION } from '../default-constant';\r\nimport { DefaultOperationSerializer } from '../serializer/default-operation-serializer';\r\n\r\nexport class DefaultOperationSerializerFactory implements IOperationSerializerFactory {\r\n    private serializerDict: { [key: string]: IOperationSerializer } = {};\r\n\r\n    get(kind: string): IOperationSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_OPERATION:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultOperationSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { IParameterSerializer } from '../../extension/serializer/i-parameter-serializer';\r\nimport { Parameter } from '../../../define/parameter/parameter';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ParameterConvertor } from '../../../convertor/parameter/parameter-convertor';\r\n\r\nexport class DefaultParameterSerializer implements IParameterSerializer{\r\n    serialize(param: Parameter, ctxt: ISerializeContext): Object {\r\n        let result=new Object();\r\n        let baseConvertor=new ParameterConvertor();\r\n        baseConvertor.convertToObject(result,param,ctxt);\r\n        return result;\r\n    }    \r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Parameter {\r\n        let result=new Parameter();\r\n        let baseConvertor=new ParameterConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n}","import { IParameterSerializerFactory } from '../../extension/factory/i-parameter-serializer-factory';\r\nimport { IParameterSerializer } from '../../extension/serializer/i-parameter-serializer';\r\nimport { DEFAULT_PARAMETER } from '../default-constant';\r\nimport { DefaultParameterSerializer } from '../serializer/default-parameter-serializer';\r\n\r\nexport class DefaultParameterSerializerFactory implements IParameterSerializerFactory{\r\n    private serializerDict: { [key: string]: IParameterSerializer } = {};\r\n\r\n    get(kind: string): IParameterSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_PARAMETER:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultParameterSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { IPropertySerializer } from '../../extension/serializer/i-property-serializer';\r\nimport { Property } from '../../../define/property/property';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { PropertyConvertor } from '../../../convertor/property/property-convertor';\r\n\r\nexport class DefaultProeprtySerializer implements IPropertySerializer {\r\n    serialize(prop: Property, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new PropertyConvertor();\r\n        baseConvertor.convertToObject(result, prop, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): Property {\r\n        let result = new Property();\r\n        let baseConvertor = new PropertyConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IPropertySerializerFactory } from '../../extension/factory/i-property-serializer-factory';\r\nimport { IPropertySerializer } from '../../extension/serializer/i-property-serializer';\r\nimport { DEFAULT_PROPERTY } from '../default-constant';\r\nimport { DefaultProeprtySerializer } from '../serializer/default-property-serializer';\r\n\r\nexport class DefaultPropertySerializerFactory implements IPropertySerializerFactory {\r\n    private serializerDict: { [key: string]: IPropertySerializer } = {};\r\n\r\n    get(kind: string): IPropertySerializer {\r\n        switch (kind) {\r\n            case DEFAULT_PROPERTY:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultProeprtySerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { EntityObjectConvertor } from '../../../convertor/structure/entity-object-convertor';\r\nimport { EntityObject } from '../../../define/structure/entity-object';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultEntityObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new Object();\r\n        //ä½¿ç¨åºæ¬çåºååå¨\r\n        let baseConvertor = new EntityObjectConvertor();\r\n        let entity = structure as EntityObject;\r\n        baseConvertor.convertToObject(result, entity, ctxt);\r\n        //Cando:å¢å èªå·±å¯¹Objectçæ©å±\r\n        return result;\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new EntityObject();\r\n        let baseConvertor = new EntityObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { ValueObjectConvertor } from '../../../convertor/structure/value-object-convertor';\r\nimport { ValueObject } from '../../../define/structure/value-object';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultValueObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ValueObjectConvertor();\r\n        let valueObject = structure as ValueObject;\r\n        baseConvertor.convertToObject(result, valueObject, ctxt);\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new ValueObject();\r\n        let baseConvertor = new ValueObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { CommonStructure } from '../../../define/structure/common-structure';\r\nimport { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { DataTransferObject } from '../../../define/structure/data-transfer-object';\r\nimport { DataTransferObjectConvertor } from '../../../convertor/structure/data-transfer-object-convertor';\r\nimport { ICommonStructureSerializeContext } from '../../extension/i-common-structure-serialize-context';\r\n\r\nexport class DefaultDataTransferObjectSerializer implements ICommonStructureSerializer {\r\n    serialize(structure: CommonStructure, ctxt: ICommonStructureSerializeContext): Object {\r\n        let result = new DataTransferObject();\r\n        let baseConvertor = new DataTransferObjectConvertor();\r\n        let dto = structure as DataTransferObject;\r\n        baseConvertor.convertToObject(result, dto, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n    deserialize(obj: Object, ctxt: ICommonStructureSerializeContext): CommonStructure {\r\n        let result = new DataTransferObject();\r\n        let baseConvertor = new DataTransferObjectConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n}","import { ICommonStructureSerializerFactory } from '../../extension/factory/i-common-structure-serializer-factory';\r\nimport { ICommonStructureSerializer } from '../../extension/serializer/i-common-structure-serializer';\r\nimport { DEFAULT_ENTITY_OBJECT, DEFAULT_VALUE_OBJECT, DEFAULT_DATA_TRANSFER_OBJECT } from '../default-constant';\r\nimport { DefaultEntityObjectSerializer } from '../serializer/default-entity-object-serializer';\r\nimport { DefaultValueObjectSerializer } from '../serializer/default-value-object-serializer';\r\nimport { DefaultDataTransferObjectSerializer } from '../serializer/default-data-transfer-object-serializer';\r\n\r\nexport class DefaultStructureSerializerFactory implements ICommonStructureSerializerFactory {\r\n    private serializerDict: { [key: string]: ICommonStructureSerializer } = {};\r\n\r\n    get(kind: string): ICommonStructureSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_ENTITY_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultEntityObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DEFAULT_VALUE_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultValueObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            case DEFAULT_DATA_TRANSFER_OBJECT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultDataTransferObjectSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n}","import { ISerializeContext } from '../../extension/i-serialize-context';\r\nimport { IConstraintSerializer } from '../../extension/serializer/i-constraint-serializer';\r\nimport { IConstraint } from '../../../define/constraint/i-constraint';\r\nimport { ConstraintConvertor } from '../../../convertor/constraint/constraint-convertor';\r\n\r\nexport class DefaultConstraintSerializer implements IConstraintSerializer{\r\n    serialize(constraint: IConstraint, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new ConstraintConvertor();\r\n        baseConvertor.convertToObject(result, constraint, ctxt);\r\n        return result;\r\n    }   \r\n    \r\n     deserialize(obj: Object, ctxt: ISerializeContext): IConstraint {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import { IOperationSerializer } from '../../extension/serializer/i-operation-serializer';\r\nimport { IConstraintSerializerFactory } from '../../extension/factory/i-constraint-serializer-factory';\r\nimport { IConstraint } from '../../../define/constraint/i-constraint';\r\nimport { IConstraintSerializer } from '../../extension/serializer/i-constraint-serializer';\r\nimport { DEFAULT_CONSTRAINT } from '../default-constant';\r\nimport { DefaultConstraintSerializer } from '../serializer/default-constraint-serializer';\r\n\r\nexport class DefaultConstraintSerializerFactory implements IConstraintSerializerFactory {\r\n\r\n    private serializerDict: { [key: string]: IConstraintSerializer } = {};\r\n\r\n    get(kind: string): IConstraintSerializer {\r\n        switch (kind) {\r\n            case DEFAULT_CONSTRAINT:\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultConstraintSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n    \r\n}","import { ISerializeContext } from '../extension/i-serialize-context';\r\nimport { IDataTypeSerializerFactory } from '../extension/factory/i-data-type-serializer-factory';\r\nimport { IParameterSerializerFactory } from '../extension/factory/i-parameter-serializer-factory';\r\nimport { IPropertySerializerFactory } from '../extension/factory/i-property-serializer-factory';\r\nimport { ICommonStructureSerializerFactory } from '../extension/factory/i-common-structure-serializer-factory';\r\nimport { IOperationSerializerFactory } from '../extension/factory/i-operation-serializer-factory';\r\nimport { DefaultDataTypeSerializerFactory } from './factory/default-data-type-serializer-factory';\r\nimport { DefaultOperationSerializerFactory } from './factory/default-operation-serializer-factory';\r\nimport { DefaultParameterSerializerFactory } from './factory/default-parameter-serializer-factory';\r\nimport { DefaultPropertySerializerFactory } from './factory/default-property-serializer-factory';\r\nimport { DefaultStructureSerializerFactory } from './factory/default-structure-serializer-factory';\r\nimport { ICommonStructureSerializeContext } from '../extension/i-common-structure-serialize-context';\r\nimport { IConstraintSerializerFactory } from '../extension/factory/i-constraint-serializer-factory';\r\nimport { DefaultConstraintSerializerFactory } from './factory/default-constraint-serializer-factory';\r\n\r\nexport class DefaultSerializeContext implements ICommonStructureSerializeContext {\r\n    private dataTypeFactory: IDataTypeSerializerFactory;\r\n    private operationFactory: IOperationSerializerFactory;\r\n    private parameterFactory: IParameterSerializerFactory;\r\n    private propertyFactory: IPropertySerializerFactory;\r\n    private structureFactory: ICommonStructureSerializerFactory;\r\n    private constraintFactory: IConstraintSerializerFactory;\r\n\r\n    getDataTypeSerializerFactory(): IDataTypeSerializerFactory {\r\n        if (!this.dataTypeFactory) {\r\n            this.dataTypeFactory = new DefaultDataTypeSerializerFactory();\r\n        }\r\n        return this.dataTypeFactory;\r\n    }\r\n\r\n    getOperationSerializerFactory(): IOperationSerializerFactory {\r\n        if (!this.operationFactory) {\r\n            this.operationFactory = new DefaultOperationSerializerFactory();\r\n        }\r\n        return this.operationFactory;\r\n    }\r\n\r\n    getParameterSerializerFactory(): IParameterSerializerFactory {\r\n        if (!this.parameterFactory) {\r\n            this.parameterFactory = new DefaultParameterSerializerFactory();\r\n        }\r\n        return this.parameterFactory;\r\n    }\r\n\r\n    getPropertySerializerFactory(): IPropertySerializerFactory {\r\n        if (!this.propertyFactory) {\r\n            this.propertyFactory = new DefaultPropertySerializerFactory();\r\n        }\r\n        return this.propertyFactory;\r\n    }\r\n\r\n    getStructureSerializerFactory(): ICommonStructureSerializerFactory {\r\n        if (!this.structureFactory) {\r\n            this.structureFactory = new DefaultStructureSerializerFactory();\r\n        }\r\n        return this.structureFactory;\r\n    }\r\n\r\n    getConstraintSerializerFactory(): IConstraintSerializerFactory {\r\n        if (!this.constraintFactory) {\r\n            this.constraintFactory = new DefaultConstraintSerializerFactory();\r\n        }\r\n        return this.constraintFactory;\r\n    }\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';\r\n\r\n\r\n@Injectable()\r\nexport class CommonStructureDTService {\r\n\r\n    private commom_structure_url = '/api/dev/main/v1.0/common-structure';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * Nçè·åCommonStructure\r\n     * @param type åæ°æ®ç±»å\r\n     * @param id åæ°æ®Id\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    get(id: string, headers: HttpHeaders): Observable<EntityObject> {\r\n        let idParam = encodeURIComponent(id);\r\n        let url =  this.commom_structure_url + '?id=' + id ;\r\n        return this.http.get<EntityObject>(url, { headers: headers }).pipe(map(\r\n            obj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = obj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            return serializer.deserialize(obj, serializeCtxt) as EntityObject;\r\n        },\r\n        error=>{\r\n            alert(\"è·åéç¨æ°æ®ç»æå¤±è´¥ï¼\");\r\n            return null;\r\n        })\r\n        );\r\n    };\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntityObject } from '../../define/structure/entity-object';\r\nimport { DefaultSerializeContext } from '../../serialize-context/default/default-serialize-context';\r\n\r\n\r\n@Injectable()\r\nexport class CommonStructureRTService {\r\n\r\n    private commom_structure_url = '/api/runtime/sys/v1.0/common-structure';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * è·åCommonStructure\r\n     * @param type åæ°æ®ç±»å\r\n     * @param id åæ°æ®Id\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    get(id: string, headers: HttpHeaders): Observable<EntityObject> {\r\n        let idParam = encodeURIComponent(id);\r\n        let url =  this.commom_structure_url + '?id=' + id ;\r\n        return this.http.get<EntityObject>(url, { headers: headers }).pipe(map(\r\n            obj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = obj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            return serializer.deserialize(obj, serializeCtxt) as EntityObject;\r\n        },\r\n        error=>{\r\n            alert(\"è·åéç¨æ°æ®ç»æå¤±è´¥ï¼\");\r\n            return null;\r\n        })\r\n        );\r\n    };\r\n\r\n    \r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonStructureDTService } from './service/design-time/common-structure-dt-service';\r\nimport { CommonStructureRTService } from './service/run-time/common-structure-rt-service';\r\n// import { CodeRuleSelectModule } from './test/code-rule-select.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    // CodeRuleSelectModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers:[CommonStructureDTService,CommonStructureRTService],\r\n  exports:[]\r\n})\r\nexport class CommonStructureModule { }\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
