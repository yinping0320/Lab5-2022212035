(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@progress/kendo-angular-dropdowns'), require('@progress/kendo-angular-grid'), require('@farris/ui-dialog'), require('@progress/kendo-angular-layout'), require('@progress/kendo-angular-treeview'), require('@farris/ui-filter-editor'), require('@farris/ui-tabs'), require('@farris/ui-popover'), require('@angular/common'), require('@farris/ui-messager'), require('@farris/ui-datagrid'), require('@farris/ui-input-group'), require('@farris/ui-multi-select'), require('@farris/ui-combo-list'), require('@farris/ui-button'), require('@farris/ui-tooltip'), require('@farris/ui-progress'), require('@farris/ui-forms'), require('@farris/ui-layout'), require('@farris/ui-datagrid-filter'), require('@farris/ui-section'), require('@angular/core'), require('@farris/ui-modal'), require('@farris/devkit'), require('@farris/command-services'), require('@farris/ui-notify'), require('rxjs'), require('@angular/common/http'), require('@farris/ui-loading')) :
    typeof define === 'function' && define.amd ? define('@gsp-dip/data-imp-exp', ['exports', '@angular/forms', '@progress/kendo-angular-dropdowns', '@progress/kendo-angular-grid', '@farris/ui-dialog', '@progress/kendo-angular-layout', '@progress/kendo-angular-treeview', '@farris/ui-filter-editor', '@farris/ui-tabs', '@farris/ui-popover', '@angular/common', '@farris/ui-messager', '@farris/ui-datagrid', '@farris/ui-input-group', '@farris/ui-multi-select', '@farris/ui-combo-list', '@farris/ui-button', '@farris/ui-tooltip', '@farris/ui-progress', '@farris/ui-forms', '@farris/ui-layout', '@farris/ui-datagrid-filter', '@farris/ui-section', '@angular/core', '@farris/ui-modal', '@farris/devkit', '@farris/command-services', '@farris/ui-notify', 'rxjs', '@angular/common/http', '@farris/ui-loading'], factory) :
    (factory((global['gsp-dip'] = global['gsp-dip'] || {}, global['gsp-dip']['data-imp-exp'] = {}),global.ng.forms,global.kendoAngularDropdowns,global.kendoAngularGrid,global.uiDialog,global.kendoAngularLayout,global.kendoAngularTreeview,global.uiFilterEditor,global.uiTabs,global.uiPopover,global.ng.common,global.uiMessager,global.uiDatagrid,global.uiInputGroup,global.uiMultiSelect,global.uiComboList,global.uiButton,global.uiTooltip,global.uiProgress,global.uiForms,global.uiLayout,global.uiDatagridFilter,global.uiSection,global.ng.core,global.i1,global.devkit,global.commandServices,global.i1$1,global.rxjs,global.ng.common.http,global.i3));
}(this, (function (exports,forms,kendoAngularDropdowns,kendoAngularGrid,uiDialog,kendoAngularLayout,kendoAngularTreeview,uiFilterEditor,uiTabs,uiPopover,common,uiMessager,uiDatagrid,uiInputGroup,uiMultiSelect,uiComboList,uiButton,uiTooltip,uiProgress,uiForms,uiLayout,uiDatagridFilter,uiSection,i0,i1,devkit,commandServices,i1$1,rxjs,i5,i3) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DefaultLang = {
        "zh-CHS": {
            "import_file": "导入文件",
            "choose_file": "选择文件",
            "import_placeholder": "请选择需要导入的文件",
            "file_type": "文件类型",
            "download_template": "下载模板",
            "ie_cancel": "取消",
            "ie_ok": "确定",
            "data_import": "数据导入",
            "data_export": "数据导出",
            "data_export_customfile": "自选文件类型数据导出",
            "choose_truefile": "请重新选择上传的文件",
            "download_template_ok": "下载模板成功",
            "download_template_fail": "下载模板失败！失败原因：",
            "upload_fail": "上传失败！原因：",
            "import_success": "文件导入成功！",
            "import_form_success": "数据导入表单成功！",
            "import_fail": "文件导入失败！失败原因：",
            "master_table_noid": "未获取到主表ID值，请确认主表是否有数据",
            "bind_form_error": "绑定数据错误，请检查数据是否有重复",
            "validate_result_show": "校验结果展示",
            "file_download_fail": "文件下载失败",
            "export_success": "导出成功，请等待文件下载完成",
            "export_fail": "导出失败！失败原因：",
            "download_vsto": "下载Excel组件",
            "export_pdf": "导出PDF",
            "order": "序号",
            "validate_type": "校验类型",
            "table_name": "对象名称",
            "illegal_data_location": "数据校验信息",
            "validate_result": "校验结果.pdf",
            "wps_table": "WPS 表格(*.et)",
            "wps_table_m": "WPS 表格（模板文件）(*.ett)",
            "customexport_no_column": "【选中信息项】未包含有效的字段，请选择！",
            "vsto_component": "数据导出组件.msi",
            "data_entity": "数据实体",
            "selected_item": "选中信息项",
            "upload_filetype_nomatch": "上传的文件与选择的文件类型不匹配",
            "save_customrule_fail": "保存自定义导入规则失败，失败原因：",
            "ruleselect_code": "编号",
            "ruleselect_name": "名称",
            "ruleselect_rulesource": "规则来源",
            "ruleselect_syspreset": "系统预置",
            "ruleselect_custom": "自定义",
            "ruleselect_billcategory": "单据种类",
            "ruleselect_creator": "创建人",
            "ruleselect_filetype": "文件类型",
            "ruleselect_selectrulenotify": "请选择一条规则",
            "rule_list": "规则选择",
            "select_data_export": "请先选择要导出的数据",
            "select_xlsx_notify": "该文件类型不支持宏设置，会导致部分下拉帮助失效，请知晓",
            "ruleselect_updatetime": "更新时间",
            "ruleselect_listempty": "可选规则列表为空",
            "import_loading": "正在导入...",
            "after_validate_suspend": "请修改文件重新进行导入",
            "MandatoryImport": "强制导入",
            "Ignore": "忽略",
            "AllMandatoryImport": "全部强制导入",
            "AllIgnore": "全部忽略",
            "export_validate_result": "导出校验结果",
            "continue": "继续",
            "cancel": "中止",
            "you_have": "您有",
            "warning_info": "条校验不符合项，如继续执行，被忽略的数据将不会被导入系统，强制导入可能会影响数据的质量",
            "error_info": "条校验不符合项，请参照校验信息修改导入模板",
            "security_level": "密级等级",
            "importfile_toobig": "当前导入文件太大，最大允许的文件大小：",
            "partdata-import-success": "部分数据导入完成",
            "operation": "操作",
            "product_preset": "产品预置",
            "project_define": "项目定义",
            "user_custom": "用户自定义"
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileConst = /** @class */ (function () {
        function FileConst() {
        }
        FileConst.xls = 'Office Excel97-2003(*.xls)';
        FileConst.xlsx = 'Office Excel(*.xlsx)';
        FileConst.xlsm = 'Office Excel Macro(*.xlsm)';
        FileConst.et = 'WPS Table(*.et)';
        FileConst.xml = 'XML File(*.xml)';
        FileConst.pdf = 'PDF File(*.pdf)';
        FileConst.csv = 'CSV File(*.csv)';
        return FileConst;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isNullOrUndefined(obj) {
        if (obj === undefined) {
            return true;
        }
        if (obj === null) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isNullOrEmpty(obj) {
        if (obj === undefined) {
            return true;
        }
        if (obj === null) {
            return true;
        }
        if (obj.length == 0) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function isNullOrBlank(str) {
        if (str == null) {
            return true;
        }
        if (str.trim().length == 0) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} paraName
     * @return {?}
     */
    function getQueryString(paraName) {
        /** @type {?} */
        var url = window.location.hash;
        /** @type {?} */
        var arrObj = url.split('?');
        if (arrObj.length > 1) {
            /** @type {?} */
            var arrPara = arrObj[1].split('&');
            /** @type {?} */
            var arr = void 0;
            // tslint:disable-next-line: prefer-for-of
            for (var i = 0; i < arrPara.length; i++) {
                arr = arrPara[i].split('=');
                if (arr != null && arr[0] === paraName) {
                    return arr[1];
                }
            }
            return '';
        }
        else {
            return '';
        }
    }
    var FileTypeUtil = /** @class */ (function () {
        function FileTypeUtil() {
        }
        /**
         * @param {?} valueField
         * @return {?}
         */
        FileTypeUtil.getFileExtension = /**
         * @param {?} valueField
         * @return {?}
         */
            function (valueField) {
                /** @type {?} */
                var suffix = null;
                switch (valueField) {
                    case FileConst.xls:
                        suffix = '.xls';
                        break;
                    case FileConst.xlsx:
                        suffix = '.xlsx';
                        break;
                    case FileConst.xlsm:
                        suffix = '.xlsm';
                        break;
                    case FileConst.et:
                        suffix = '.et';
                        break;
                    case FileConst.xml:
                        suffix = '.xml';
                        break;
                    case FileConst.pdf:
                        suffix = '.pdf';
                        break;
                    case FileConst.csv:
                        suffix = '.csv';
                        break;
                    default:
                        break;
                }
                return suffix;
            };
        /**
         * @param {?} fileType
         * @return {?}
         */
        FileTypeUtil.getFileTypeName = /**
         * @param {?} fileType
         * @return {?}
         */
            function (fileType) {
                /** @type {?} */
                var fileTypeName = '';
                switch (fileType) {
                    case 'XLS':
                        fileTypeName = FileConst.xls;
                        break;
                    case 'XLSX':
                        fileTypeName = FileConst.xlsx;
                        break;
                    case 'XLSM':
                        fileTypeName = FileConst.xlsm;
                        break;
                    case 'ET':
                        fileTypeName = FileConst.et;
                        break;
                    case 'XML':
                        fileTypeName = FileConst.xml;
                        break;
                    case 'PDF':
                        fileTypeName = FileConst.pdf;
                        break;
                    case 'CSV':
                        fileTypeName = FileConst.csv;
                        break;
                    default:
                        break;
                }
                return fileTypeName;
            };
        return FileTypeUtil;
    }());
    var DataIEUtils = /** @class */ (function () {
        function DataIEUtils() {
        }
        /**
         * @param {?} repository
         * @param {?} option
         * @return {?}
         */
        DataIEUtils.ChooseSu = /**
         * @param {?} repository
         * @param {?} option
         * @return {?}
         */
            function (repository, option) {
                /** @type {?} */
                var su = '';
                // 通用导入导出仓库存在，使用下面分支
                if (repository !== null) {
                    /** @type {?} */
                    var befRestService = DataIEUtils.GetBefRestService(repository);
                    su = DataIEUtils.getSu(befRestService.baseUri);
                }
                // 手工开发的仓库不存在，采用传入的su
                if (option['su'] !== undefined && option['su'] !== null) {
                    su = option['su'];
                }
                return su;
            };
        /**
         * @param {?} preurl
         * @return {?}
         */
        DataIEUtils.getSu = /**
         * @param {?} preurl
         * @return {?}
         */
            function (preurl) {
                /** @type {?} */
                var str = preurl.substring(preurl.indexOf("//") + 2);
                /** @type {?} */
                var strs = str.split('/');
                /** @type {?} */
                var su = strs[3];
                return su;
            };
        /**
         * @param {?} preurl
         * @return {?}
         */
        DataIEUtils.getApp = /**
         * @param {?} preurl
         * @return {?}
         */
            function (preurl) {
                /** @type {?} */
                var str = preurl.substring(preurl.indexOf("//") + 2);
                /** @type {?} */
                var strs = str.split('/');
                /** @type {?} */
                var app = strs[2];
                return app;
            };
        /**
         * @param {?} preurl
         * @return {?}
         */
        DataIEUtils.getPort = /**
         * @param {?} preurl
         * @return {?}
         */
            function (preurl) {
                // "http://localhost:5000/api/scm/sd/v1.0"
                /** @type {?} */
                var str = preurl.substring(preurl.indexOf("//") + 2);
                // 只取前两位，51xx,50xx,52xx
                /** @type {?} */
                var port = str.substr(str.indexOf(':') + 1, 2);
                return port;
            };
        /**
         * @param {?} repository
         * @return {?}
         */
        DataIEUtils.GetBefRestService = /**
         * @param {?} repository
         * @return {?}
         */
            function (repository) {
                /** @type {?} */
                var befRepository = ( /** @type {?} */(repository));
                return befRepository.restService;
            };
        /**
         * @param {?} baseUrl
         * @return {?}
         */
        DataIEUtils.GetPreUrl = /**
         * @param {?} baseUrl
         * @return {?}
         */
            function (baseUrl) {
                /** @type {?} */
                var lastIndex = baseUrl.lastIndexOf('/');
                /** @type {?} */
                var preurl = baseUrl.substr(0, lastIndex);
                return preurl;
            };
        /**
         * @param {?} str
         * @return {?}
         */
        DataIEUtils.JudgeIllegalChar = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ',', ' '];
                illegalChar.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (str.indexOf(item) !== -1) {
                        return true;
                    }
                }));
                return false;
            };
        /**
         * @param {?} http
         * @return {?}
         */
        DataIEUtils.getTranslateValue = /**
         * @param {?} http
         * @return {?}
         */
            function (http) {
                /** @type {?} */
                var lang;
                if (localStorage === undefined || localStorage === null) {
                    return rxjs.of(DefaultLang['zh-CHS']);
                }
                lang = localStorage.getItem('languageCode');
                if (lang === undefined || lang === null || lang === 'zh-CHS') {
                    return rxjs.of(DefaultLang['zh-CHS']);
                }
                if (http === undefined || http === null) {
                    return rxjs.of(DefaultLang['zh-CHS']);
                }
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var url = "/platform/common/web/@gsp-dip/i18n/" + lang + ".json";
                http.get(url).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    console.log(data);
                    subject.next(data);
                }));
                return subject;
            };
        return DataIEUtils;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ElementSelectComponent = /** @class */ (function () {
        function ElementSelectComponent(http) {
            var _this = this;
            this.http = http;
            this.cols = [];
            this.selectedKeys = [];
            this.newSelectedKeys = [];
            // public isNewExpanded = true;
            this.keys = [];
            this.newKeys = [];
            this.Model = null;
            this.CustomModel = null;
            this.InnerModel = null;
            this.TreeData = null;
            this.NewData = null;
            this.isExpanded = ( /**
             * @param {?} dataItem
             * @param {?} index
             * @return {?}
             */function (dataItem, index) {
                return _this.keys.indexOf(index) > -1;
            });
            this.isNewExpanded = ( /**
             * @param {?} dataItem
             * @param {?} index
             * @return {?}
             */function (dataItem, index) {
                return _this.newKeys.indexOf(index) > -1;
            });
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.data_entity = res['data_entity'];
                _this.selected_item = res['selected_item'];
            }));
        }
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                //暂时屏蔽
                // this.checkRightData();
                this.TreeData = this.OrganizeLeftTreeOriginal();
                this.NewData = this.OrganizeRightTreeOriginal();
            };
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.checkRightData = /**
         * @return {?}
         */
            function () {
                if (this.CustomModel !== null) {
                    /** @type {?} */
                    var mainObj = this.Model['MainObject'];
                    /** @type {?} */
                    var elements = mainObj['Elements'];
                    /** @type {?} */
                    var customMainObj = this.CustomModel['MainObject'];
                    /** @type {?} */
                    var customElements_1 = customMainObj['Elements'];
                    var _loop_1 = function (i) {
                        /** @type {?} */
                        var ele = customElements_1[i];
                        /** @type {?} */
                        var idx = elements.findIndex(( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) { return e['ID'] === ele['ID']; }));
                        if (idx < 0) {
                            customElements_1.splice(i, 1);
                            i--;
                        }
                        out_i_1 = i;
                    };
                    var out_i_1;
                    for (var i = 0; i < customElements_1.length; i++) {
                        _loop_1(i);
                        i = out_i_1;
                    }
                }
            };
        // 组织右侧树，将模型转换为可以展示的Json结构。
        // 组织右侧树，将模型转换为可以展示的Json结构。
        /**
         * @private
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeRightTreeOriginal =
            // 组织右侧树，将模型转换为可以展示的Json结构。
            /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var tree = [];
                if (this.CustomModel !== null) {
                    /** @type {?} */
                    var mainObj = this.CustomModel['MainObject'];
                    tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
                }
                else {
                    /** @type {?} */
                    var mainObj = this.Model['MainObject'];
                    tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
                }
                return tree;
            };
        // 组织左侧树
        // 组织左侧树
        /**
         * @private
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeLeftTreeOriginal =
            // 组织左侧树
            /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var tree = [];
                if (this.CustomModel !== null) {
                    /** @type {?} */
                    var mainObj = this.Model['MainObject'];
                    /** @type {?} */
                    var customMainObj = this.CustomModel['MainObject'];
                    tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OraganizeMinusObj(mainObj, customMainObj) });
                }
                else {
                    /** @type {?} */
                    var mainObj = this.Model['MainObject'];
                    tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
                }
                return tree;
            };
        // 组织列，customObj：从数据库中获取的对象，obj：外面传入的对象。
        // 组织列，customObj：从数据库中获取的对象，obj：外面传入的对象。
        /**
         * @private
         * @param {?} obj
         * @param {?} customObj
         * @return {?}
         */
        ElementSelectComponent.prototype.OraganizeMinusObj =
            // 组织列，customObj：从数据库中获取的对象，obj：外面传入的对象。
            /**
             * @private
             * @param {?} obj
             * @param {?} customObj
             * @return {?}
             */
            function (obj, customObj) {
                var _this = this;
                // const items = [];
                // obj['Elements'].forEach(ele => {
                //   const customEle = customObj['Elements'].find(t => t['ID'] === ele['ID']);
                //   if (customEle === null || customEle === undefined) {
                //     if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                //       const udtItems = this.OrganizeUdtElements(ele['UdtElements'], customEle['UdtElements']);
                //     } else {
                //       items.push({id: ele['ID'], text: ele['Name'], code: ele['Code'], order: ele['Order']});
                //     }
                //   }
                // });
                /** @type {?} */
                var items = this.OrganizeElementsWithUdtMinus(obj['Elements'], customObj['Elements']);
                if (obj['ChildrenDeo'].length > 0) {
                    obj['ChildrenDeo'].forEach(( /**
                     * @param {?} deo
                     * @return {?}
                     */function (deo) {
                        /** @type {?} */
                        var customChildDeo = customObj['ChildrenDeo'].find(( /**
                         * @param {?} t
                         * @return {?}
                         */function (t) { return t['ID'] === deo['ID']; }));
                        items.push({ id: deo['ID'], code: deo['Code'], text: deo['FileObjectName'], items: _this.OraganizeMinusObj(deo, customChildDeo) });
                    }));
                }
                return items;
            };
        // 获取左右树udt字段的差
        // 获取左右树udt字段的差
        /**
         * @private
         * @param {?} newUdtEles
         * @param {?} udtEles
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeElementsWithUdtMinus =
            // 获取左右树udt字段的差
            /**
             * @private
             * @param {?} newUdtEles
             * @param {?} udtEles
             * @return {?}
             */
            function (newUdtEles, udtEles) {
                var _this = this;
                /** @type {?} */
                var items = [];
                newUdtEles.forEach(( /**
                 * @param {?} ele
                 * @return {?}
                 */function (ele) {
                    /** @type {?} */
                    var customEle = udtEles.find(( /**
                     * @param {?} t
                     * @return {?}
                     */function (t) { return t['ID'] === ele['ID']; }));
                    if (customEle === null || customEle === undefined) {
                        if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                            /** @type {?} */
                            var udtItems = _this.OrganizeElementsWithUdt(ele['UdtElements']);
                            if (udtItems.length > 0) {
                                items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                            }
                        }
                        else {
                            items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                        }
                    }
                    else {
                        if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                            /** @type {?} */
                            var udtItems = _this.OrganizeElementsWithUdtMinus(ele['UdtElements'], customEle['UdtElements']);
                            if (udtItems.length > 0) {
                                items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                            }
                        }
                    }
                }));
                return items;
            };
        // 添加子对象Json串
        // private OrganizeChildObjJson(obj): any[] {
        //   const items = [];
        //   if (obj['ChildrenDeo'].length > 0) {
        //     obj['ChildrenDeo'].forEach(deo => items.push({id: deo['ID'], code: deo['Code'], text: deo['Name'],
        //     items: this.OrganizeChildObjJson(deo)}));
        //   }
        //   return items;
        // }
        // 添加对象Json串
        // 添加子对象Json串
        // private OrganizeChildObjJson(obj): any[] {
        //   const items = [];
        //   if (obj['ChildrenDeo'].length > 0) {
        //     obj['ChildrenDeo'].forEach(deo => items.push({id: deo['ID'], code: deo['Code'], text: deo['Name'],
        //     items: this.OrganizeChildObjJson(deo)}));
        //   }
        //   return items;
        // }
        // 添加对象Json串
        /**
         * @private
         * @param {?} obj
         * @param {?} addEle
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeObjJson =
            // 添加子对象Json串
            // private OrganizeChildObjJson(obj): any[] {
            //   const items = [];
            //   if (obj['ChildrenDeo'].length > 0) {
            //     obj['ChildrenDeo'].forEach(deo => items.push({id: deo['ID'], code: deo['Code'], text: deo['Name'],
            //     items: this.OrganizeChildObjJson(deo)}));
            //   }
            //   return items;
            // }
            // 添加对象Json串
            /**
             * @private
             * @param {?} obj
             * @param {?} addEle
             * @return {?}
             */
            function (obj, addEle) {
                var _this = this;
                /** @type {?} */
                var items = [];
                if (addEle) {
                    items = this.OrganizeElementsWithUdt(obj['Elements']);
                    // obj['Elements'].forEach(ele => items.push({id: ele['ID'], text: ele['Name'], code: ele['Code'], order: ele['Order']}));
                }
                if (obj['ChildrenDeo'].length > 0) {
                    obj['ChildrenDeo'].forEach(( /**
                     * @param {?} deo
                     * @return {?}
                     */function (deo) {
                        return items.push({
                            id: deo['ID'], code: deo['Code'], text: deo['FileObjectName'],
                            items: _this.OrganizeObjJson(deo, addEle)
                        });
                    }));
                }
                return items;
            };
        /**
         * @private
         * @param {?} eles
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeElementsWithUdt = /**
         * @private
         * @param {?} eles
         * @return {?}
         */
            function (eles) {
                var _this = this;
                /** @type {?} */
                var items = [];
                eles.forEach(( /**
                 * @param {?} ele
                 * @return {?}
                 */function (ele) {
                    if (ele['UdtElements'].length > 0) {
                        /** @type {?} */
                        var udtItems = _this.OrganizeElementsWithUdt(ele['UdtElements']);
                        if (udtItems.length > 0) {
                            items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                        }
                        else {
                            items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                        }
                    }
                    else {
                        items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                    }
                }));
                return items;
            };
        // 右移
        // 右移
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.RightMove =
            // 右移
            /**
             * @return {?}
             */
            function () {
                if (this.selectedKeys.length === 0) {
                    return;
                }
                /** @type {?} */
                var indexes = this.GetIndexes(this.selectedKeys[0]);
                this.MoveData(indexes, this.TreeData, '', this.NewData);
            };
        // 左移
        // 左移
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.LeftMove =
            // 左移
            /**
             * @return {?}
             */
            function () {
                if (this.newSelectedKeys.length === 0) {
                    return;
                }
                /** @type {?} */
                var indexes = this.GetIndexes(this.newSelectedKeys[0]);
                this.MoveData(indexes, this.NewData, '', this.TreeData);
            };
        /**
         * @private
         * @param {?} sKeys
         * @return {?}
         */
        ElementSelectComponent.prototype.GetIndexes = /**
         * @private
         * @param {?} sKeys
         * @return {?}
         */
            function (sKeys) {
                /** @type {?} */
                var arr = sKeys.split('_');
                arr.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                }));
                return arr;
            };
        /**
         * @private
         * @param {?} indexes
         * @param {?} data
         * @param {?} objId
         * @param {?} newData
         * @return {?}
         */
        ElementSelectComponent.prototype.MoveData = /**
         * @private
         * @param {?} indexes
         * @param {?} data
         * @param {?} objId
         * @param {?} newData
         * @return {?}
         */
            function (indexes, data, objId, newData) {
                /** @type {?} */
                var index = indexes.shift();
                if (indexes.length > 0) {
                    this.MoveData(indexes, data[index].items, data[index].id, newData);
                }
                else {
                    if (data[index].order !== undefined) {
                        /** @type {?} */
                        var result = this.AddData(objId, newData, data[index]);
                        if (!result) {
                            return;
                        }
                        data.splice(index, 1);
                    }
                }
            };
        /**
         * @private
         * @param {?} mainId
         * @param {?} newData
         * @param {?} data
         * @return {?}
         */
        ElementSelectComponent.prototype.AddData = /**
         * @private
         * @param {?} mainId
         * @param {?} newData
         * @param {?} data
         * @return {?}
         */
            function (mainId, newData, data) {
                // 先找到所属对象
                /** @type {?} */
                var obj = this.FindObjAndIndex(mainId, newData, '');
                if (obj === null) {
                    return false;
                }
                // 找到要插入的位置
                /** @type {?} */
                var index = this.FindColIndex(obj.dataItem.items, data.order);
                obj.dataItem.items.splice(index, 0, data);
                this.handleNewExpand(obj);
                return true;
            };
        /**
         * @private
         * @param {?} mainId
         * @param {?} data
         * @param {?} parentIndex
         * @return {?}
         */
        ElementSelectComponent.prototype.FindObjAndIndex = /**
         * @private
         * @param {?} mainId
         * @param {?} data
         * @param {?} parentIndex
         * @return {?}
         */
            function (mainId, data, parentIndex) {
                /** @type {?} */
                var result = null;
                // tslint:disable-next-line:prefer-for-of
                for (var i = 0; i < data.length; i++) {
                    if (data[i].id === mainId) {
                        if (parentIndex !== '') {
                            result = { index: parentIndex + '_' + i.toString(), dataItem: data[i] };
                        }
                        else {
                            result = { index: i.toString(), dataItem: data[i] };
                        }
                    }
                    else if (data[i].items !== undefined && data[i].items.length > 0) {
                        result = this.FindObjAndIndex(mainId, data[i].items, i.toString());
                    }
                    if (result == null) {
                        continue;
                    }
                    else {
                        return result;
                    }
                }
                return result;
            };
        /**
         * @private
         * @param {?} items
         * @param {?} order
         * @return {?}
         */
        ElementSelectComponent.prototype.FindColIndex = /**
         * @private
         * @param {?} items
         * @param {?} order
         * @return {?}
         */
            function (items, order) {
                /** @type {?} */
                var index = -1;
                if (items.length === 0) {
                    return 0;
                }
                for (var i = 0; i < items.length; i++) {
                    if (items[i].order < order) {
                        index = i;
                    }
                    else {
                        break;
                    }
                }
                return index + 1;
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ElementSelectComponent.prototype.handleCollapse = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.keys = this.keys.filter(( /**
                 * @param {?} k
                 * @return {?}
                 */function (k) { return k !== node.index; }));
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ElementSelectComponent.prototype.handleExpand = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                console.log(node);
                this.keys = this.keys.concat(node.index);
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ElementSelectComponent.prototype.handleNewCollapse = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                this.newKeys = this.newKeys.filter(( /**
                 * @param {?} k
                 * @return {?}
                 */function (k) { return k !== node.index; }));
            };
        /**
         * @param {?} node
         * @return {?}
         */
        ElementSelectComponent.prototype.handleNewExpand = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                console.log(node);
                this.newKeys = this.newKeys.concat(node.index);
            };
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.RightMoveAll = /**
         * @return {?}
         */
            function () {
                // this.ClearTree(this.TreeData);
                // this.FillTree(this.NewData);
                this.TreeData = [];
                /** @type {?} */
                var mainObj = this.Model['MainObject'];
                this.TreeData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
                // this.FillTree(this.TreeData);
                this.NewData = [];
                this.NewData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
            };
        /**
         * @param {?} t
         * @return {?}
         */
        ElementSelectComponent.prototype.FillTree = /**
         * @param {?} t
         * @return {?}
         */
            function (t) {
                t = [];
                /** @type {?} */
                var mainObj = this.Model['MainObject'];
                t.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
            };
        /**
         * @param {?} t
         * @return {?}
         */
        ElementSelectComponent.prototype.ClearTree = /**
         * @param {?} t
         * @return {?}
         */
            function (t) {
                // t = [];
                // const mainObj = this.Model['MainObject'];
                // t.push({id: mainObj['ID'], code: mainObj['Code'], text: mainObj['Name'], items: this.OrganizeObjJson(mainObj, false)});
                t = [];
            };
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.LeftMoveAll = /**
         * @return {?}
         */
            function () {
                // this.ClearTree(this.NewData);
                this.NewData = [];
                /** @type {?} */
                var mainObj = this.Model['MainObject'];
                this.NewData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
                // this.FillTree(this.TreeData);
                this.TreeData = [];
                this.TreeData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
            };
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.MoveUp = /**
         * @return {?}
         */
            function () {
                if (this.newSelectedKeys.length === 0) {
                    return;
                }
                /** @type {?} */
                var indexes = this.GetIndexes(this.newSelectedKeys[0]);
                /** @type {?} */
                var lastIndex = indexes.pop();
                /** @type {?} */
                var items = this.GetItems(indexes, this.NewData);
                if (items[lastIndex].order === undefined || items[lastIndex].order === 0) {
                    return;
                }
                /** @type {?} */
                var temp = items[lastIndex].order;
                items[lastIndex].order = items[lastIndex - 1].order;
                items[lastIndex - 1].order = temp;
                items.splice(lastIndex - 1, 0, items[lastIndex]);
                items.splice(Number(lastIndex) + 1, 1);
                /** @type {?} */
                var parentIndex = this.newSelectedKeys[0];
                this.newSelectedKeys[0] = parentIndex.substring(0, parentIndex.lastIndexOf('_') + 1) + (lastIndex - 1);
            };
        /**
         * @private
         * @param {?} indexes
         * @param {?} data
         * @return {?}
         */
        ElementSelectComponent.prototype.GetItems = /**
         * @private
         * @param {?} indexes
         * @param {?} data
         * @return {?}
         */
            function (indexes, data) {
                if (indexes.length === 0) {
                    return data;
                }
                /** @type {?} */
                var index = indexes.shift();
                return this.GetItems(indexes, data[index].items);
            };
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.MoveDown = /**
         * @return {?}
         */
            function () {
                if (this.newSelectedKeys.length === 0) {
                    return;
                }
                /** @type {?} */
                var indexes = this.GetIndexes(this.newSelectedKeys[0]);
                /** @type {?} */
                var lastIndex = indexes.pop();
                /** @type {?} */
                var items = this.GetItems(indexes, this.NewData);
                if (items.length === lastIndex || items[Number(lastIndex) + 1] === undefined || items[Number(lastIndex) + 1].order === undefined
                    || items[lastIndex].order === undefined) {
                    return;
                }
                /** @type {?} */
                var temp = items[lastIndex].order;
                items[lastIndex].order = items[Number(lastIndex) + 1].order;
                items[Number(lastIndex) + 1].order = temp;
                items.splice(Number(lastIndex) + 2, 0, items[lastIndex]);
                items.splice(lastIndex, 1);
                /** @type {?} */
                var parentIndex = this.newSelectedKeys[0];
                this.newSelectedKeys[0] = parentIndex.substring(0, parentIndex.lastIndexOf('_') + 1) + (Number(lastIndex) + 1);
            };
        /**
         * @return {?}
         */
        ElementSelectComponent.prototype.Save = /**
         * @return {?}
         */
            function () {
                // 传入的模型的主对象
                if (this.InnerModel == null) {
                    this.InnerModel = this.Model;
                }
                /** @type {?} */
                var mainObj = this.InnerModel['MainObject'];
                /** @type {?} */
                var newMainObj = this.NewData[0];
                /** @type {?} */
                var preMainObj = this.Model['MainObject'];
                mainObj['Elements'] = this.OrganizeElements(preMainObj['Elements'], newMainObj);
                this.OrganizeChildrenDeo(mainObj, newMainObj, preMainObj);
            };
        /**
         * @private
         * @param {?} obj
         * @param {?} newObj
         * @param {?} preMainObj
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeChildrenDeo = /**
         * @private
         * @param {?} obj
         * @param {?} newObj
         * @param {?} preMainObj
         * @return {?}
         */
            function (obj, newObj, preMainObj) {
                var _this = this;
                if (obj['ChildrenDeo'] !== undefined && obj['ChildrenDeo'].length > 0) {
                    /** @type {?} */
                    var newChildrenDeo_1 = [];
                    obj['ChildrenDeo'].forEach(( /**
                     * @param {?} t
                     * @return {?}
                     */function (t) {
                        /** @type {?} */
                        var childDeo = newObj['items'].find(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item['id'] === t['ID']; }));
                        /** @type {?} */
                        var preChildObj = preMainObj['ChildrenDeo'].find(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item['ID'] === t['ID']; }));
                        if (childDeo !== null && childDeo !== undefined) {
                            t['Elements'] = _this.OrganizeElements(preChildObj['Elements'], childDeo);
                            if (t['Elements'] !== undefined && t['Elements'] !== null) {
                                newChildrenDeo_1.push(t);
                            }
                        }
                        _this.OrganizeChildrenDeo(t, childDeo, preChildObj);
                    }));
                    obj['ChildrenDeo'] = newChildrenDeo_1;
                }
            };
        // 保存时组织列, obj: 外部传入的列，newObj: 编辑后新的列
        // 保存时组织列, obj: 外部传入的列，newObj: 编辑后新的列
        /**
         * @private
         * @param {?} obj
         * @param {?} newObj
         * @return {?}
         */
        ElementSelectComponent.prototype.OrganizeElements =
            // 保存时组织列, obj: 外部传入的列，newObj: 编辑后新的列
            /**
             * @private
             * @param {?} obj
             * @param {?} newObj
             * @return {?}
             */
            function (obj, newObj) {
                /** @type {?} */
                var newEles = newObj['items'];
                /** @type {?} */
                var eles = [];
                newEles.forEach(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) {
                    /** @type {?} */
                    var ele = obj.find(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return e['ID'] === t['id']; }));
                    if (ele !== undefined && ele !== null) {
                        eles.push(ele);
                    }
                }));
                return eles;
            };
        ElementSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-element-select',
                        template: "<div *ngIf=\"Model\" class=\"row inner\">\r\n  <div class=\"col-lg-5 col-md-5\">\r\n    <div>\r\n      <div>\r\n        {{data_entity}}\r\n      </div>\r\n      \r\n      <div class=\"hasborder\" style=\"height:330px;overflow-y:auto\">\r\n        <kendo-treeview\r\n          [nodes]=\"TreeData\"\r\n          textField=\"text\"\r\n          kendoTreeViewExpandable\r\n          kendoTreeViewSelectable\r\n          kendoTreeViewHierarchyBinding\r\n          childrenField=\"items\"\r\n          [(selectedKeys)]=\"selectedKeys\"\r\n          [isExpanded]=\"isExpanded\"\r\n          (collapse)=\"handleCollapse($event)\"\r\n          (expand)=\"handleExpand($event)\"\r\n        >\r\n        \r\n        </kendo-treeview>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"col-lg-2 col-md-2 btn-group-vertical\" role=\"group\" aria-label=\"...\">\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"RightMove()\">></button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"LeftMove()\"><</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"RightMoveAll()\">>></button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"LeftMoveAll()\"><<</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"MoveUp()\">^</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"MoveDown()\">v</button>\r\n  </div>\r\n  <div class=\"col-lg-5 col-md-5\">\r\n    <div>\r\n      <div>\r\n        {{selected_item}}\r\n      </div>\r\n      <div class=\"hasborder\" style=\"height:330px;overflow-y:auto\">\r\n        <kendo-treeview\r\n          [nodes]=\"NewData\"\r\n          textField=\"text\"\r\n          kendoTreeViewExpandable\r\n          kendoTreeViewSelectable\r\n          kendoTreeViewHierarchyBinding\r\n          childrenField=\"items\"\r\n          [(selectedKeys)]=\"newSelectedKeys\"\r\n          [isExpanded]=\"isNewExpanded\"\r\n          (collapse)=\"handleNewCollapse($event)\"\r\n          (expand)=\"handleNewExpand($event)\"\r\n        >\r\n          <ng-template kendoTreeViewNodeTemplate let-dataItem>\r\n            {{dataItem.text}}\r\n            <span></span>\r\n          </ng-template>\r\n        </kendo-treeview>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- <div *ngIf=\"Model\" class=\"row inner\">\r\n\r\n  <multi-select [dataSource]=\"leftTreeData\" [idField]=\"'name'\" [valueField]=\"'type'\" [textField]=\"'name'\" [displayType]=\"'Tree'\"\r\n    [(selectedId)]=\"treeSelectedId\">\r\n    <ng-template farrisTemplate=\"text\" let-data>\r\n      {{ data['name'] }} [ {{ data['type'] }}]\r\n    </ng-template>\r\n  </multi-select>\r\n</div> -->",
                        providers: [],
                        styles: ["kendo-grid-column{line-height:30px}.inner{margin:5px}.btn{width:80px;margin-bottom:5px}.hasborder{border:.5px solid #a9a9a9;height:330px}"]
                    }] }
        ];
        /** @nocollapse */
        ElementSelectComponent.ctorParameters = function () {
            return [
                { type: i5.HttpClient }
            ];
        };
        ElementSelectComponent.propDecorators = {
            Model: [{ type: i0.Input }],
            CustomModel: [{ type: i0.Input }],
            InnerModel: [{ type: i0.Input }]
        };
        return ElementSelectComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileLikeObject = /** @class */ (function () {
        function FileLikeObject(fileOrInput) {
            this.rawFile = fileOrInput;
            /** @type {?} */
            var isInput = this.isElement(fileOrInput);
            /** @type {?} */
            var fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
            /** @type {?} */
            var postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
            /** @type {?} */
            var method = 'createFrom' + postfix;
            (( /** @type {?} */(this)))[method](fakePathOrObject);
        }
        /**
         * @param {?} node
         * @return {?}
         */
        FileLikeObject.prototype.isElement = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                return !!(node && (node.nodeName || node.prop && node.attr && node.find));
            };
        /**
         * @param {?} path
         * @return {?}
         */
        FileLikeObject.prototype.createFromFakePath = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                this.lastModifiedDate = void 0;
                this.size = void 0;
                this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
                this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
            };
        /**
         * @param {?} object
         * @return {?}
         */
        FileLikeObject.prototype.createFromObject = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                this.size = object.size;
                this.type = object.type;
                this.name = object.name;
            };
        return FileLikeObject;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileItem = /** @class */ (function () {
        function FileItem(uploader, some, options) {
            this.url = '/';
            this.headers = [];
            this.withCredentials = true;
            this.formData = [];
            this.isReady = false;
            this.isUploading = false;
            this.isUploaded = false;
            this.isSuccess = false;
            this.isCancel = false;
            this.isError = false;
            this.progress = 0;
            this.index = void 0;
            this.uploader = uploader;
            this.some = some;
            this.options = options;
            this.file = new FileLikeObject(some);
            this.lfile = some;
            if (uploader.options) {
                this.method = uploader.options.method || 'POST';
                this.alias = uploader.options.itemAlias || 'file';
            }
            this.url = uploader.options.url;
        }
        /**
         * @return {?}
         */
        FileItem.prototype.upload = /**
         * @return {?}
         */
            function () {
                try {
                    this.uploader.uploadItem(this);
                }
                catch (e) {
                    this.uploader._onCompleteItem(this, '', 0, {});
                    this.uploader._onErrorItem(this, '', 0, {});
                }
            };
        /**
         * @return {?}
         */
        FileItem.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.uploader.cancelItem(this);
            };
        /**
         * @return {?}
         */
        FileItem.prototype.remove = /**
         * @return {?}
         */
            function () {
                this.uploader.removeFromQueue(this);
            };
        /**
         * @return {?}
         */
        FileItem.prototype.onBeforeUpload = /**
         * @return {?}
         */
            function () {
                return void 0;
            };
        /**
         * @param {?} form
         * @return {?}
         */
        FileItem.prototype.onBuildForm = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                return { form: form };
            };
        /**
         * @param {?} progress
         * @return {?}
         */
        FileItem.prototype.onProgress = /**
         * @param {?} progress
         * @return {?}
         */
            function (progress) {
                return { progress: progress };
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype.onSuccess = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                return { response: response, status: status, headers: headers };
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype.onError = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                return { response: response, status: status, headers: headers };
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype.onCancel = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                return { response: response, status: status, headers: headers };
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype.onComplete = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                return { response: response, status: status, headers: headers };
            };
        /**
         * @return {?}
         */
        FileItem.prototype._onBeforeUpload = /**
         * @return {?}
         */
            function () {
                this.isReady = true;
                this.isUploading = true;
                this.isUploaded = false;
                this.isSuccess = false;
                this.isCancel = false;
                this.isError = false;
                this.progress = 0;
                this.onBeforeUpload();
            };
        /**
         * @param {?} form
         * @return {?}
         */
        FileItem.prototype._onBuildForm = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.onBuildForm(form);
            };
        /**
         * @param {?} progress
         * @return {?}
         */
        FileItem.prototype._onProgress = /**
         * @param {?} progress
         * @return {?}
         */
            function (progress) {
                this.progress = progress;
                this.onProgress(progress);
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype._onSuccess = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                this.isReady = false;
                this.isUploading = false;
                this.isUploaded = true;
                this.isSuccess = true;
                this.isCancel = false;
                this.isError = false;
                this.progress = 100;
                this.index = void 0;
                this.onSuccess(response, status, headers);
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype._onError = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                this.isReady = false;
                this.isUploading = false;
                this.isUploaded = true;
                this.isSuccess = false;
                this.isCancel = false;
                this.isError = true;
                this.progress = 0;
                this.index = void 0;
                this.onError(response, status, headers);
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype._onCancel = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                this.isReady = false;
                this.isUploading = false;
                this.isUploaded = false;
                this.isSuccess = false;
                this.isCancel = true;
                this.isError = false;
                this.progress = 0;
                this.index = void 0;
                this.onCancel(response, status, headers);
            };
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileItem.prototype._onComplete = /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (response, status, headers) {
                this.onComplete(response, status, headers);
                if (this.uploader.options.removeAfterUpload) {
                    this.remove();
                }
            };
        /**
         * @return {?}
         */
        FileItem.prototype._prepareToUploading = /**
         * @return {?}
         */
            function () {
                this.index = this.index || ++this.uploader.nextIndex;
                this.isReady = true;
            };
        return FileItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileUploader = /** @class */ (function () {
        function FileUploader(options) {
            this.isUploading = false;
            this.queue = [];
            this.progress = 0;
            this.nextIndex = 0;
            this.options = {
                autoUpload: false,
                isHTML5: true,
                filters: [],
                removeAfterUpload: false,
                disableMultipart: false,
                formatDataFunction: ( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.lfile; }),
                formatDataFunctionIsAsync: false
            };
            this.setOptions(options);
            this.response = new i0.EventEmitter();
        }
        /**
         * @param {?} options
         * @return {?}
         */
        FileUploader.prototype.setOptions = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var e_1, _a;
                this.options = Object.assign(this.options, options);
                this.authToken = this.options.authToken;
                this.authTokenHeader = this.options.authTokenHeader || 'Authorization';
                this.autoUpload = this.options.autoUpload;
                this.options.filters.unshift({ name: 'queueLimit', fn: this.queueLimitFilter });
                if (this.options.maxFileSize) {
                    this.options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });
                }
                if (this.options.allowedFileType) {
                    this.options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });
                }
                if (this.options.allowedMimeType) {
                    this.options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });
                }
                try {
                    for (var _b = __values(this.queue), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        item.url = this.options.url;
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @param {?} files
         * @param {?=} options
         * @param {?=} filters
         * @return {?}
         */
        FileUploader.prototype.addToQueue = /**
         * @param {?} files
         * @param {?=} options
         * @param {?=} filters
         * @return {?}
         */
            function (files, options, filters) {
                var _this = this;
                var e_2, _a;
                /** @type {?} */
                var list = [];
                try {
                    for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                        var file = files_1_1.value;
                        list.push(file);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (files_1_1 && !files_1_1.done && (_a = files_1.return))
                            _a.call(files_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                /** @type {?} */
                var arrayOfFilters = this._getFilters(filters);
                /** @type {?} */
                var count = this.queue.length;
                /** @type {?} */
                var addedFileItems = [];
                list.map(( /**
                 * @param {?} some
                 * @return {?}
                 */function (some) {
                    if (!options) {
                        options = _this.options;
                    }
                    /** @type {?} */
                    var temp = new FileLikeObject(some);
                    if (_this._isValidFile(temp, arrayOfFilters, options)) {
                        /** @type {?} */
                        var fileItem = new FileItem(_this, some, options);
                        addedFileItems.push(fileItem);
                        _this.queue.push(fileItem);
                        _this._onAfterAddingFile(fileItem);
                    }
                    else {
                        /** @type {?} */
                        var filter = arrayOfFilters[_this.failFilterIndex];
                        _this._onWhenAddingFileFailed(temp, filter, options);
                    }
                }));
                if (this.queue.length !== count) {
                    this._onAfterAddingAll(addedFileItems);
                    this.progress = this._getTotalProgress();
                }
                this._render();
                if (this.options.autoUpload) {
                    this.uploadAll();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploader.prototype.removeFromQueue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var index = this.getIndexOfItem(value);
                /** @type {?} */
                var item = this.queue[index];
                if (item.isUploading) {
                    item.cancel();
                }
                this.queue.splice(index, 1);
                this.progress = this._getTotalProgress();
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.clearQueue = /**
         * @return {?}
         */
            function () {
                while (this.queue.length) {
                    this.queue[0].remove();
                }
                this.progress = 0;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploader.prototype.uploadItem = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var index = this.getIndexOfItem(value);
                /** @type {?} */
                var item = this.queue[index];
                /** @type {?} */
                var transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';
                item._prepareToUploading();
                if (this.isUploading) {
                    return;
                }
                this.isUploading = true;
                (( /** @type {?} */(this)))[transport](item);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploader.prototype.cancelItem = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var index = this.getIndexOfItem(value);
                /** @type {?} */
                var item = this.queue[index];
                /** @type {?} */
                var prop = this.options.isHTML5 ? item.xhr : item.form;
                if (item && item.isUploading) {
                    prop.abort();
                }
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.uploadAll = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var items = this.getNotUploadedItems().filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return !item.isUploading; }));
                if (!items.length) {
                    return;
                }
                items.map(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item._prepareToUploading(); }));
                items[0].upload();
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.cancelAll = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var items = this.getNotUploadedItems();
                items.map(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.cancel(); }));
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploader.prototype.isFile = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return this.isFile(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploader.prototype.isFileLikeObject = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value instanceof FileLikeObject;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploader.prototype.getIndexOfItem = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return typeof value === 'number' ? value : this.queue.indexOf(value);
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.getNotUploadedItems = /**
         * @return {?}
         */
            function () {
                // 修改 by 邹承元：此处是只上传没有上传过的文件，不适合导入导出场景，故修改为可以都上传。
                // return this.queue.filter((item: FileItem) => !item.isUploaded);
                return this.queue.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return true; }));
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.getReadyItems = /**
         * @return {?}
         */
            function () {
                return this.queue
                    .filter(( /**
             * @param {?} item
             * @return {?}
             */function (item) { return (item.isReady && !item.isUploading); }))
                    .sort(( /**
             * @param {?} item1
             * @param {?} item2
             * @return {?}
             */function (item1, item2) { return item1.index - item2.index; }));
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.destroy = /**
         * @return {?}
         */
            function () {
                return void 0;
            };
        /**
         * @param {?} fileItems
         * @return {?}
         */
        FileUploader.prototype.onAfterAddingAll = /**
         * @param {?} fileItems
         * @return {?}
         */
            function (fileItems) {
                return { fileItems: fileItems };
            };
        /**
         * @param {?} fileItem
         * @param {?} form
         * @return {?}
         */
        FileUploader.prototype.onBuildItemForm = /**
         * @param {?} fileItem
         * @param {?} form
         * @return {?}
         */
            function (fileItem, form) {
                return { fileItem: fileItem, form: form };
            };
        /**
         * @param {?} fileItem
         * @return {?}
         */
        FileUploader.prototype.onAfterAddingFile = /**
         * @param {?} fileItem
         * @return {?}
         */
            function (fileItem) {
                return { fileItem: fileItem };
            };
        /**
         * @param {?} item
         * @param {?} filter
         * @param {?} options
         * @return {?}
         */
        FileUploader.prototype.onWhenAddingFileFailed = /**
         * @param {?} item
         * @param {?} filter
         * @param {?} options
         * @return {?}
         */
            function (item, filter, options) {
                return { item: item, filter: filter, options: options };
            };
        /**
         * @param {?} fileItem
         * @return {?}
         */
        FileUploader.prototype.onBeforeUploadItem = /**
         * @param {?} fileItem
         * @return {?}
         */
            function (fileItem) {
                return { fileItem: fileItem };
            };
        /**
         * @param {?} fileItem
         * @param {?} progress
         * @return {?}
         */
        FileUploader.prototype.onProgressItem = /**
         * @param {?} fileItem
         * @param {?} progress
         * @return {?}
         */
            function (fileItem, progress) {
                return { fileItem: fileItem, progress: progress };
            };
        /**
         * @param {?} progress
         * @return {?}
         */
        FileUploader.prototype.onProgressAll = /**
         * @param {?} progress
         * @return {?}
         */
            function (progress) {
                return { progress: progress };
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype.onSuccessItem = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                return { item: item, response: response, status: status, headers: headers };
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype.onErrorItem = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                return { item: item, response: response, status: status, headers: headers };
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype.onCancelItem = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                return { item: item, response: response, status: status, headers: headers };
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype.onCompleteItem = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                return { item: item, response: response, status: status, headers: headers };
            };
        /**
         * @return {?}
         */
        FileUploader.prototype.onCompleteAll = /**
         * @return {?}
         */
            function () {
                return void 0;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FileUploader.prototype._mimeTypeFilter = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FileUploader.prototype._fileSizeFilter = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return !(this.options.maxFileSize && item.size > this.options.maxFileSize);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FileUploader.prototype._fileTypeFilter = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                // return !(this.options.allowedFileType &&
                //   this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);
                //by miao  这个地方不过滤文件类型了，后端有白名单限制
                return true;
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype._onErrorItem = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                item._onError(response, status, headers);
                this.onErrorItem(item, response, status, headers);
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype._onCompleteItem = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                item._onComplete(response, status, headers);
                this.onCompleteItem(item, response, status, headers);
                /** @type {?} */
                var nextItem = this.getReadyItems()[0];
                this.isUploading = false;
                if (nextItem) {
                    nextItem.upload();
                    return;
                }
                this.onCompleteAll();
                this.progress = this._getTotalProgress();
                this._render();
            };
        /**
         * @protected
         * @param {?} parsedHeaders
         * @return {?}
         */
        FileUploader.prototype._headersGetter = /**
         * @protected
         * @param {?} parsedHeaders
         * @return {?}
         */
            function (parsedHeaders) {
                return ( /**
                 * @param {?} name
                 * @return {?}
                 */function (name) {
                    if (name) {
                        return parsedHeaders[name.toLowerCase()] || void 0;
                    }
                    return parsedHeaders;
                });
            };
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */
        FileUploader.prototype._xhrTransport = /**
         * @protected
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var _this = this;
                var e_3, _a, e_4, _b;
                /** @type {?} */
                var that = this;
                /** @type {?} */
                var xhr = item.xhr = new XMLHttpRequest();
                /** @type {?} */
                var sendable;
                this._onBeforeUploadItem(item);
                if (typeof item.lfile.size !== 'number') {
                    throw new TypeError('The file specified is no longer valid');
                }
                if (!this.options.disableMultipart) {
                    sendable = new FormData();
                    this._onBuildItemForm(item, sendable);
                    /** @type {?} */
                    var appendFile = ( /**
                     * @return {?}
                     */function () { return sendable.append(item.alias, item.lfile, item.file.name); });
                    if (!this.options.parametersBeforeFiles) {
                        appendFile();
                    }
                    // For AWS, Additional Parameters must come BEFORE Files
                    if (this.options.additionalParameter !== undefined) {
                        Object.keys(this.options.additionalParameter).forEach(( /**
                         * @param {?} key
                         * @return {?}
                         */function (key) {
                            /** @type {?} */
                            var paramVal = _this.options.additionalParameter[key];
                            // Allow an additional parameter to include the filename
                            if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {
                                paramVal = paramVal.replace('{{file_name}}', item.file.name);
                            }
                            sendable.append(key, paramVal);
                        }));
                    }
                    if (this.options.parametersBeforeFiles) {
                        appendFile();
                    }
                }
                else {
                    sendable = this.options.formatDataFunction(item);
                }
                xhr.upload.onprogress = ( /**
                 * @param {?} event
                 * @return {?}
                 */function (event) {
                    /** @type {?} */
                    var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
                    _this._onProgressItem(item, progress);
                });
                xhr.onload = ( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var headers = _this._parseHeaders(xhr.getAllResponseHeaders());
                    /** @type {?} */
                    var response = _this._transformResponse(xhr.response, headers);
                    /** @type {?} */
                    var gist = _this._isSuccessCode(xhr.status) ? 'Success' : 'Error';
                    /** @type {?} */
                    var method = '_on' + gist + 'Item';
                    (( /** @type {?} */(_this)))[method](item, response, xhr.status, headers);
                    _this._onCompleteItem(item, response, xhr.status, headers);
                });
                xhr.onerror = ( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var headers = _this._parseHeaders(xhr.getAllResponseHeaders());
                    /** @type {?} */
                    var response = _this._transformResponse(xhr.response, headers);
                    _this._onErrorItem(item, response, xhr.status, headers);
                    _this._onCompleteItem(item, response, xhr.status, headers);
                });
                xhr.onabort = ( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var headers = _this._parseHeaders(xhr.getAllResponseHeaders());
                    /** @type {?} */
                    var response = _this._transformResponse(xhr.response, headers);
                    _this._onCancelItem(item, response, xhr.status, headers);
                    _this._onCompleteItem(item, response, xhr.status, headers);
                });
                xhr.open(item.method, item.url, true);
                xhr.withCredentials = item.withCredentials;
                if (this.options.headers) {
                    try {
                        for (var _c = __values(this.options.headers), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var header = _d.value;
                            xhr.setRequestHeader(header.name, header.value);
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return))
                                _a.call(_c);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                }
                if (item.headers.length) {
                    try {
                        for (var _e = __values(item.headers), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var header = _f.value;
                            xhr.setRequestHeader(header.name, header.value);
                        }
                    }
                    catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                    }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return))
                                _b.call(_e);
                        }
                        finally {
                            if (e_4)
                                throw e_4.error;
                        }
                    }
                }
                if (this.authToken) {
                    xhr.setRequestHeader(this.authTokenHeader, this.authToken);
                }
                // xhr.onreadystatechange = function () {
                //   if (xhr.readyState == XMLHttpRequest.DONE) {
                //     that.response.emit(xhr.responseText);
                //   }
                // }
                xhr.onreadystatechange = ( /**
                 * @return {?}
                 */function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        that.response.emit(xhr.responseText);
                    }
                });
                if (this.options.formatDataFunctionIsAsync) {
                    sendable.then(( /**
                     * @param {?} result
                     * @return {?}
                     */function (result) { return xhr.send(JSON.stringify(result)); }));
                }
                else {
                    xhr.send(sendable);
                }
                this._render();
            };
        /**
         * @protected
         * @param {?=} value
         * @return {?}
         */
        FileUploader.prototype._getTotalProgress = /**
         * @protected
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (value === void 0) {
                    value = 0;
                }
                if (this.options.removeAfterUpload) {
                    return value;
                }
                /** @type {?} */
                var notUploaded = this.getNotUploadedItems().length;
                /** @type {?} */
                var uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;
                /** @type {?} */
                var ratio = 100 / this.queue.length;
                /** @type {?} */
                var current = value * ratio / 100;
                return Math.round(uploaded * ratio + current);
            };
        /**
         * @protected
         * @param {?} filters
         * @return {?}
         */
        FileUploader.prototype._getFilters = /**
         * @protected
         * @param {?} filters
         * @return {?}
         */
            function (filters) {
                if (!filters) {
                    return this.options.filters;
                }
                if (Array.isArray(filters)) {
                    return filters;
                }
                if (typeof filters === 'string') {
                    /** @type {?} */
                    var names_1 = filters.match(/[^\s,]+/g);
                    return this.options.filters
                        .filter(( /**
                 * @param {?} filter
                 * @return {?}
                 */function (filter) { return names_1.indexOf(filter.name) !== -1; }));
                }
                return this.options.filters;
            };
        /**
         * @protected
         * @return {?}
         */
        FileUploader.prototype._render = /**
         * @protected
         * @return {?}
         */
            function () {
                return void 0;
            };
        /**
         * @protected
         * @return {?}
         */
        FileUploader.prototype._queueLimitFilter = /**
         * @protected
         * @return {?}
         */
            function () {
                return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;
            };
        /**
         * @protected
         * @param {?} file
         * @param {?} filters
         * @param {?} options
         * @return {?}
         */
        FileUploader.prototype._isValidFile = /**
         * @protected
         * @param {?} file
         * @param {?} filters
         * @param {?} options
         * @return {?}
         */
            function (file, filters, options) {
                var _this = this;
                this.failFilterIndex = -1;
                return !filters.length ? true : filters.every(( /**
                 * @param {?} filter
                 * @return {?}
                 */function (filter) {
                    _this.failFilterIndex++;
                    return filter.fn.call(_this, file, options);
                }));
            };
        /**
         * @protected
         * @param {?} status
         * @return {?}
         */
        FileUploader.prototype._isSuccessCode = /**
         * @protected
         * @param {?} status
         * @return {?}
         */
            function (status) {
                return (status >= 200 && status < 300) || status === 304;
            };
        /**
         * @protected
         * @param {?} response
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype._transformResponse = /**
         * @protected
         * @param {?} response
         * @param {?} headers
         * @return {?}
         */
            function (response, headers) {
                return response;
            };
        /**
         * @protected
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype._parseHeaders = /**
         * @protected
         * @param {?} headers
         * @return {?}
         */
            function (headers) {
                /** @type {?} */
                var parsed = {};
                /** @type {?} */
                var key;
                /** @type {?} */
                var val;
                /** @type {?} */
                var i;
                if (!headers) {
                    return parsed;
                }
                headers.split('\n').map(( /**
                 * @param {?} line
                 * @return {?}
                 */function (line) {
                    i = line.indexOf(':');
                    key = line.slice(0, i).trim().toLowerCase();
                    val = line.slice(i + 1).trim();
                    if (key) {
                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                    }
                }));
                return parsed;
            };
        /**
         * @protected
         * @param {?} item
         * @param {?} filter
         * @param {?} options
         * @return {?}
         */
        FileUploader.prototype._onWhenAddingFileFailed = /**
         * @protected
         * @param {?} item
         * @param {?} filter
         * @param {?} options
         * @return {?}
         */
            function (item, filter, options) {
                this.onWhenAddingFileFailed(item, filter, options);
            };
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */
        FileUploader.prototype._onAfterAddingFile = /**
         * @protected
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.onAfterAddingFile(item);
            };
        /**
         * @protected
         * @param {?} items
         * @return {?}
         */
        FileUploader.prototype._onAfterAddingAll = /**
         * @protected
         * @param {?} items
         * @return {?}
         */
            function (items) {
                this.onAfterAddingAll(items);
            };
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */
        FileUploader.prototype._onBeforeUploadItem = /**
         * @protected
         * @param {?} item
         * @return {?}
         */
            function (item) {
                item._onBeforeUpload();
                this.onBeforeUploadItem(item);
            };
        /**
         * @protected
         * @param {?} item
         * @param {?} form
         * @return {?}
         */
        FileUploader.prototype._onBuildItemForm = /**
         * @protected
         * @param {?} item
         * @param {?} form
         * @return {?}
         */
            function (item, form) {
                item._onBuildForm(form);
                this.onBuildItemForm(item, form);
            };
        /**
         * @protected
         * @param {?} item
         * @param {?} progress
         * @return {?}
         */
        FileUploader.prototype._onProgressItem = /**
         * @protected
         * @param {?} item
         * @param {?} progress
         * @return {?}
         */
            function (item, progress) {
                /** @type {?} */
                var total = this._getTotalProgress(progress);
                this.progress = total;
                item._onProgress(progress);
                this.onProgressItem(item, progress);
                this.onProgressAll(total);
                this._render();
            };
        /**
         * @protected
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype._onSuccessItem = /**
         * @protected
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                item._onSuccess(response, status, headers);
                this.onSuccessItem(item, response, status, headers);
            };
        /**
         * @protected
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        FileUploader.prototype._onCancelItem = /**
         * @protected
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                item._onCancel(response, status, headers);
                this.onCancelItem(item, response, status, headers);
            };
        /**
         * @protected
         * @return {?}
         */
        FileUploader.prototype.queueLimitFilter = /**
         * @protected
         * @return {?}
         */
            function () {
                return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;
            };
        return FileUploader;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var DataValidateStrategy = {
        Ignore: 0,
        MandatoryImport: 1,
    };
    DataValidateStrategy[DataValidateStrategy.Ignore] = 'Ignore';
    DataValidateStrategy[DataValidateStrategy.MandatoryImport] = 'MandatoryImport';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValidateFormComponent = /** @class */ (function () {
        function ValidateFormComponent(http) {
            this.http = http;
            this.closeModal = new i0.EventEmitter();
            this.okModal = new i0.EventEmitter();
            this.validateInfoAllWarning = false;
            this.onlyOneObject = false;
            this.showInfo = '';
            this.ValidateInfoColumns = [];
            this.radioData = [];
            this.checkboxData1 = [];
            this.checkboxData2 = [];
            this.checkBoxValue1 = DataValidateStrategy[0];
            this.checkBoxValue2 = '';
            this.validatedInfoList = [];
        }
        /**
         * @return {?}
         */
        ValidateFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var res = this.i18nResource;
                this.order = res['order'];
                this.validate_type = res['validate_type'];
                this.table_name = res['table_name'];
                this.illegal_data_location = res['illegal_data_location'];
                this.validate_result = res['validate_result'];
                this.export_validate_result = res['export_validate_result'];
                this.continue = res['continue'];
                this.checkboxData1 = [
                    { value: DataValidateStrategy[0], name: this.i18nResource['AllIgnore'] }
                ];
                this.checkboxData2 = [
                    { value: DataValidateStrategy[1], name: this.i18nResource['AllMandatoryImport'] }
                ];
                this.radioData = [
                    { value: DataValidateStrategy[0], name: this.i18nResource['Ignore'] },
                    { value: DataValidateStrategy[1], name: this.i18nResource['MandatoryImport'] }
                ];
                this.validateResult.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    if (element.validateInfoAllWarning) {
                        _this.validateInfoAllWarning = true;
                    }
                    if (element.onlyOneObject) {
                        _this.onlyOneObject = true;
                    }
                    if (element.newValidatedInfoList !== null && element.newValidatedInfoList !== undefined) {
                        _this.validatedInfoList = _this.validatedInfoList.concat(element.newValidatedInfoList);
                    }
                    if (element.validateShowInfo) {
                        _this.customShowInfo = element.validateShowInfo;
                    }
                }));
                if (this.validateInfoAllWarning) {
                    this.cancel = res['cancel'];
                }
                else {
                    this.cancel = res['ie_ok'];
                }
                if (this.validateInfoAllWarning) {
                    this.showInfo = this.customShowInfo ? this.customShowInfo : this.i18nResource['you_have'] + this.validatedInfoList.length + this.i18nResource['warning_info'];
                    if (this.onlyOneObject) {
                        this.ValidateInfoColumns = [
                            { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true },
                            {
                                field: 'operation', width: 80, title: '操作', headerTemplate: this.headerTemplate,
                                template: this.columnOperation, sortable: false, showTips: true
                            }
                        ];
                    }
                    else {
                        this.ValidateInfoColumns = [
                            { field: 'dataObjectName', width: 40, title: this.table_name, sortable: false, showTips: true },
                            { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true },
                            {
                                field: 'operation', width: 80, title: '操作', headerTemplate: this.headerTemplate,
                                template: this.columnOperation, sortable: false, showTips: true
                            }
                        ];
                    }
                }
                else {
                    this.showInfo = this.customShowInfo ? this.customShowInfo : this.i18nResource['you_have'] + this.validatedInfoList.length + this.i18nResource['error_info'];
                    if (this.onlyOneObject) {
                        this.ValidateInfoColumns = [
                            { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true }
                        ];
                    }
                    else {
                        this.ValidateInfoColumns = [
                            { field: 'dataObjectName', width: 40, title: this.table_name, sortable: false, showTips: true },
                            { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true }
                        ];
                    }
                }
            };
        /**
         * @return {?}
         */
        ValidateFormComponent.prototype.checkBoxChange1 = /**
         * @return {?}
         */
            function () {
                if (this.checkBoxValue1) {
                    this.checkBoxValue2 = '';
                    if (this.validatedInfoList) {
                        this.validatedInfoList.forEach(( /**
                         * @param {?} t
                         * @return {?}
                         */function (t) { return t.dataValidateStrategy = DataValidateStrategy[0]; }));
                    }
                }
            };
        /**
         * @return {?}
         */
        ValidateFormComponent.prototype.checkBoxChange2 = /**
         * @return {?}
         */
            function () {
                if (this.checkBoxValue2) {
                    this.checkBoxValue1 = '';
                    if (this.validatedInfoList) {
                        this.validatedInfoList.forEach(( /**
                         * @param {?} t
                         * @return {?}
                         */function (t) { return t.dataValidateStrategy = DataValidateStrategy[1]; }));
                    }
                }
            };
        /**
         * @param {?} ctx
         * @return {?}
         */
        ValidateFormComponent.prototype.radioChange = /**
         * @param {?} ctx
         * @return {?}
         */
            function (ctx) {
                /** @type {?} */
                var ignoreList = this.validatedInfoList.filter(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) { return t.dataValidateStrategy == DataValidateStrategy[0]; }));
                if (ignoreList.length == this.validatedInfoList.length) {
                    this.checkBoxValue1 = DataValidateStrategy[0];
                    this.checkBoxValue2 = '';
                }
                else if (ignoreList.length == 0) {
                    this.checkBoxValue1 = '';
                    this.checkBoxValue2 = DataValidateStrategy[1];
                }
                else {
                    this.checkBoxValue1 = '';
                    this.checkBoxValue2 = '';
                }
            };
        /**
         * @return {?}
         */
        ValidateFormComponent.prototype.continueHandler = /**
         * @return {?}
         */
            function () {
                this.okModal.emit(this.validatedInfoList);
            };
        /**
         * @return {?}
         */
        ValidateFormComponent.prototype.cancelHandler = /**
         * @return {?}
         */
            function () {
                this.closeModal.emit();
            };
        /**
         * @return {?}
         */
        ValidateFormComponent.prototype.exportPdf = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/rpcfileoper/DownloadValidateFile';
                /** @type {?} */
                var body = {
                    su: this.su,
                    validateTitles: [this.order, this.table_name, this.illegal_data_location],
                    validatedInfos: this.validatedInfoList
                };
                this.loadingParam.loadingService.show();
                this.http.post(url, body, {
                    responseType: 'blob',
                    observe: 'response',
                    params: { su: this.su }
                }).subscribe(( /**
                 * @param {?} filedata
                 * @return {?}
                 */function (filedata) {
                    _this.loadingParam.loadingService.clearAll();
                    if (!filedata || filedata.body.size == 0) {
                        return;
                    }
                    else {
                        /** @type {?} */
                        var blob = new Blob([filedata.body]);
                        if (navigator.msSaveOrOpenBlob) {
                            navigator.msSaveOrOpenBlob(blob, _this.validate_result);
                        }
                        else {
                            /** @type {?} */
                            var link = document.createElement('a');
                            link.setAttribute('href', window.URL.createObjectURL(blob));
                            // 设置下载的文件名
                            link.setAttribute('download', _this.validate_result);
                            link.style.visibility = 'hidden';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        }
                        /** @type {?} */
                        var delUrl = '/api/runtime/dip/v1.0/rpcfileoper/DeleteFile';
                        /** @type {?} */
                        var delParam = {
                            relativePath: "VALIDATEPDFFILE/test.pdf",
                            su: _this.su
                        };
                        _this.http.post(delUrl, delParam, { params: { su: _this.su } }).subscribe();
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingParam.loadingService.clearAll();
                    console.log(error);
                }));
            };
        ValidateFormComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-validate-form',
                        template: "<!-- <div>\r\n  <div>\r\n    <kendo-tabstrip (tabSelect)=\"OnTableSelect($event)\">\r\n      <kendo-tabstrip-tab *ngFor=\"let result of validateResult; let i = index\" [title]=\"result.componentName\" [selected]=\"i === 0?true: false\">\r\n        <ng-template kendoTabContent>\r\n          <kendo-grid [height]=\"350\" [data]=\"result.validatedInfoList\">\r\n            <kendo-grid-column field=\"order\" title=\"\u5E8F\u53F7\" [width]=\"40\"></kendo-grid-column>\r\n            <kendo-grid-column field=\"message\" title=\"\u6821\u9A8C\u7ED3\u679C\" [width]=\"100\"></kendo-grid-column>\r\n            <kendo-grid-column field=\"tableName\" title=\"\u5BF9\u8C61\u540D\u79F0\" [width]=\"80\"></kendo-grid-column>\r\n            <kendo-grid-column field=\"illegalDataLocation\" title=\"\u975E\u6CD5\u6570\u636E\u4F4D\u7F6E\" [width]=\"300\"></kendo-grid-column>\r\n          </kendo-grid>\r\n        </ng-template>\r\n      </kendo-tabstrip-tab>\r\n    </kendo-tabstrip>\r\n  </div>\r\n  <div>\r\n    <kendo-excelexport class=\"excelExport\" *ngFor=\"let result of validateResult; let i = index\" [data]=\"result.validatedInfoList\" fileName=\"\u6821\u9A8C\u7ED3\u679C.xlsx\">\r\n      <kendo-excelexport-column field=\"order\" title=\"\u5E8F\u53F7\" [width]=\"80\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"message\" title=\"\u6821\u9A8C\u7ED3\u679C\" [width]=\"300\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"tableName\" title=\"\u5BF9\u8C61\u540D\u79F0\" [width]=\"160\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"illegalDataLocation\" title=\"\u975E\u6CD5\u6570\u636E\u4F4D\u7F6E\" [width]=\"160\"></kendo-excelexport-column>\r\n    </kendo-excelexport>\r\n  </div>\r\n  <ng-template #selectFooter>\r\n    <div class=\"btns\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">\u53D6\u6D88</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Export()\">\u5BFC\u51FA</button>\r\n    </div>\r\n  </ng-template>\r\n</div> -->\r\n\r\n<!-- <kendo-grid [kendoGridBinding]=\"validatedInfoList\" [pageable]=\"true\" [pageSize]=\"20\" [height]=\"450\" [reorderable]=\"true\"\r\n  [resizable]=\"true\">\r\n  <ng-template kendoGridToolbarTemplate>\r\n    <button kendoGridPDFCommand icon=\"file-pdf\">{{export_pdf}}</button>\r\n  </ng-template>\r\n  <kendo-grid-column field=\"order\" [title]=\"order\" [width]=\"35\">\r\n  </kendo-grid-column>\r\n  <kendo-grid-column field=\"message\" [title]=\"validate_type\" [width]=\"60\">\r\n  </kendo-grid-column>\r\n  <kendo-grid-column field=\"tableName\" [title]=\"table_name\" [width]=\"60\">\r\n  </kendo-grid-column>\r\n  <kendo-grid-column field=\"illegalDataLocation\" [title]=\"illegal_data_location\" [width]=\"350\">\r\n  </kendo-grid-column>\r\n\r\n  <kendo-grid-pdf [fileName]=\"validate_result\" [allPages]=\"true\">\r\n    <kendo-grid-pdf-margin top=\"1cm\" left=\"1cm\" right=\"1cm\" bottom=\"1cm\"></kendo-grid-pdf-margin>\r\n  </kendo-grid-pdf>\r\n</kendo-grid> -->\r\n<!-- <div>\r\n    <kendo-excelexport class=\"excelExport\" *ngFor=\"let result of validateResult; let i = index\" [data]=\"result.validatedInfoList\"  fileName=\"ValidateResult.xlsx\">\r\n      <kendo-excelexport-column field=\"order\" title=\"\u5E8F\u53F7\" [width]=\"40\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"message\" title=\"\u6821\u9A8C\u7C7B\u578B\" [width]=\"80\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"tableName\" title=\"\u5BF9\u8C61\u540D\u79F0\" [width]=\"80\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"illegalDataLocation\" title=\"\u975E\u6CD5\u6570\u636E\u4F4D\u7F6E\" [width]=\"350\"></kendo-excelexport-column>\r\n    </kendo-excelexport>\r\n  </div> -->\r\n<!-- <kendo-grid-excel fileName=\"ValidateResult.xlsx\"></kendo-grid-excel> -->\r\n<div class=\"d-flex flex-fill\" style=\"height: 100px;\">\r\n  <div style=\"\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 100px;\r\n    border: 6px solid cornflowerblue;\r\n    margin-left: 80px;\r\n    margin-top: 10px;\r\n    font-size: 30px;\r\n    color: inherit;\r\n\">{{validatedInfoList.length}}\r\n  </div>\r\n  <div style=\"margin-top: 40px;margin-left: 30px;\">{{showInfo}}</div>\r\n</div>\r\n<div class=\"d-flex flex-fill\" style=\"height: 350px;\">\r\n  <farris-datagrid #ValidateInfoGrid id=\"validate-info-grid\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n                   [columns]=\"ValidateInfoColumns\" [showLineNumber]=\"true\" [pagination]=\"false\" [showBorder]=\"true\"\r\n                   [striped]=\"true\" [sizeType]=\"'sm'\" [data]=\"validatedInfoList\">\r\n  </farris-datagrid>\r\n  <ng-template #headerTemplate let-ctx>\r\n    <farris-checkboxgroup [(ngModel)]=\"checkBoxValue1\" [disable]=\"checkBoxValue1.length != 0\" [horizontal]=\"true\" [data]=\"checkboxData1\"\r\n                          (changeValue)=\"checkBoxChange1()\">\r\n    </farris-checkboxgroup>\r\n    <farris-checkboxgroup [(ngModel)]=\"checkBoxValue2\" [disable]=\"checkBoxValue2.length != 0\" [horizontal]=\"true\" [data]=\"checkboxData2\"\r\n                          (changeValue)=\"checkBoxChange2()\">\r\n    </farris-checkboxgroup>\r\n  </ng-template>\r\n  <ng-template #columnOperation let-ctx>\r\n    <farris-radiogroup  [(ngModel)]=\"validatedInfoList[ctx.rowIndex].dataValidateStrategy\" [horizontal]=\"true\" [data]=\"radioData\"\r\n                       (changeValue)=\"radioChange(ctx)\">\r\n    </farris-radiogroup>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #selectFooter>\r\n  <button type=\"button\" class=\"btn btn-outline-secondary \" (click)=\"exportPdf()\">{{export_validate_result}}</button>\r\n  <button *ngIf=\"validateInfoAllWarning\" type=\"button\" class=\"btn btn-outline-secondary \" (click)=\"continueHandler()\">{{continue}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary \" (click)=\"cancelHandler()\">{{cancel}}</button>\r\n</ng-template>\r\n",
                        styles: [".barmanager{position:absolute;bottom:0;height:30px;right:30px;padding-left:50px}@font-face{font-family:\"DejaVu Sans\";src:url(/platform/common/web/@gsp-dip/fonts/microsoft-yahei.ttf) format(\"truetype\")}.k-grid{font-family:\"DejaVu Sans\",Arial,sans-serif}"]
                    }] }
        ];
        /** @nocollapse */
        ValidateFormComponent.ctorParameters = function () {
            return [
                { type: i5.HttpClient }
            ];
        };
        ValidateFormComponent.propDecorators = {
            ValidateInfoGrid: [{ type: i0.ViewChild, args: ['ValidateInfoGrid',] }],
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            columnOperation: [{ type: i0.ViewChild, args: ['columnOperation',] }],
            headerTemplate: [{ type: i0.ViewChild, args: ['headerTemplate',] }],
            closeModal: [{ type: i0.Output }],
            okModal: [{ type: i0.Output }],
            validateResult: [{ type: i0.Input }]
        };
        return ValidateFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileOperateService = /** @class */ (function () {
        function FileOperateService(http) {
            var _this = this;
            this.http = http;
            this.origin = window.location.origin;
            this.fileUrl = this.origin + '/api/runtime/rtcommon/v1.0/fileoper';
            this.downloadComplete = new i0.EventEmitter();
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.file_download_fail = res['file_download_fail'];
            }));
        }
        // 下载文件
        // 下载文件
        /**
         * @param {?} relativePath
         * @param {?} fileName
         * @param {?} preurl
         * @param {?} option
         * @param {?=} needDelete
         * @return {?}
         */
        FileOperateService.prototype.DownloadFile =
            // 下载文件
            /**
             * @param {?} relativePath
             * @param {?} fileName
             * @param {?} preurl
             * @param {?} option
             * @param {?=} needDelete
             * @return {?}
             */
            function (relativePath, fileName, preurl, option, needDelete) {
                var _this = this;
                if (needDelete === void 0) {
                    needDelete = true;
                }
                /** @type {?} */
                var tempUrl = '';
                if (preurl === '') {
                    tempUrl = this.fileUrl;
                }
                else {
                    tempUrl = preurl + "/fileoper";
                }
                /** @type {?} */
                var app = DataIEUtils.getApp(tempUrl);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                if (option !== null && option['su'] !== null && option['su'] !== undefined) {
                    su = option['su'];
                }
                /** @type {?} */
                var fileParam = {
                    relativePath: relativePath,
                    app: app,
                    su: su
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
                this.http.post(fixedUrl + "/DownloadFile", fileParam, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    responseType: 'blob',
                    observe: 'response',
                    params: { su: su }
                }).subscribe(( /**
                 * @param {?} filedata
                 * @return {?}
                 */function (filedata) {
                    if (!filedata || filedata.body.size == 0) {
                        _this.downloadComplete.emit(_this.file_download_fail);
                    }
                    else {
                        //const blob = new Blob([filedata.body], {type: 'application/vnd.ms-excel'});
                        /** @type {?} */
                        var blob = new Blob([filedata.body]);
                        if (navigator.msSaveOrOpenBlob) {
                            navigator.msSaveOrOpenBlob(blob, fileName);
                        }
                        else {
                            /** @type {?} */
                            var link = document.createElement('a');
                            link.setAttribute('href', window.URL.createObjectURL(blob));
                            // 设置下载的文件名
                            link.setAttribute('download', fileName);
                            link.style.visibility = 'hidden';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        }
                        _this.downloadComplete.emit('');
                        if (needDelete) {
                            _this.DeleteFile(relativePath, preurl, su);
                        }
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.downloadComplete.error(error);
                }));
                // 添加error异常处理
            };
        // 打包文件下载文件
        // 打包文件下载文件
        /**
         * @param {?} relativePaths
         * @param {?} itemsFileName
         * @param {?} packageName
         * @param {?} preurl
         * @param {?} packtype
         * @param {?=} needDelete
         * @return {?}
         */
        FileOperateService.prototype.DownloadPackageFile =
            // 打包文件下载文件
            /**
             * @param {?} relativePaths
             * @param {?} itemsFileName
             * @param {?} packageName
             * @param {?} preurl
             * @param {?} packtype
             * @param {?=} needDelete
             * @return {?}
             */
            function (relativePaths, itemsFileName, packageName, preurl, packtype, needDelete) {
                var _this = this;
                if (needDelete === void 0) {
                    needDelete = true;
                }
                /** @type {?} */
                var tempUrl = '';
                if (preurl === '') {
                    tempUrl = this.fileUrl;
                }
                else {
                    tempUrl = preurl + "/fileoper";
                }
                /** @type {?} */
                var app = DataIEUtils.getApp(tempUrl);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var fileParam = {
                    relativePaths: relativePaths,
                    itemsFileName: itemsFileName,
                    packType: packtype,
                    packageName: packageName,
                    su: su
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
                this.http.post(fixedUrl + "/DownloadPackageFile", fileParam, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    responseType: 'blob',
                    observe: 'response',
                    params: { su: su }
                }).subscribe(( /**
                 * @param {?} filedata
                 * @return {?}
                 */function (filedata) {
                    if (!filedata || filedata.body.size == 0) {
                        _this.downloadComplete.emit(_this.file_download_fail);
                    }
                    else {
                        /** @type {?} */
                        var blob = new Blob([filedata.body]);
                        // 设置下载的文件名
                        /** @type {?} */
                        var downloadFileName = packageName + '.' + packtype;
                        if (navigator.msSaveOrOpenBlob) {
                            navigator.msSaveOrOpenBlob(blob, downloadFileName);
                        }
                        else {
                            /** @type {?} */
                            var link = document.createElement('a');
                            link.setAttribute('href', window.URL.createObjectURL(blob));
                            link.setAttribute('download', downloadFileName);
                            link.style.visibility = 'hidden';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        }
                        _this.downloadComplete.emit('');
                        if (needDelete) {
                            _this.DeleteFile(downloadFileName, preurl);
                        }
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.downloadComplete.error(error);
                }));
                // 添加error异常处理
            };
        /**
         * 手工表单下载
         * @param relativePath
         * @param fileName
         * @param su
         * @param needDelete
         */
        /**
         * 手工表单下载
         * @param {?} relativePath
         * @param {?} fileName
         * @param {?} su
         * @param {?=} needDelete
         * @return {?}
         */
        FileOperateService.prototype.DownloadFile4HandCraft = /**
         * 手工表单下载
         * @param {?} relativePath
         * @param {?} fileName
         * @param {?} su
         * @param {?=} needDelete
         * @return {?}
         */
            function (relativePath, fileName, su, needDelete) {
                var _this = this;
                if (needDelete === void 0) {
                    needDelete = true;
                }
                /** @type {?} */
                var fileParam = {
                    relativePath: relativePath,
                    app: '',
                    su: su
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
                this.http.post(fixedUrl + "/DownloadFile", fileParam, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    responseType: 'blob',
                    observe: 'response',
                    params: { su: su }
                }).subscribe(( /**
                 * @param {?} filedata
                 * @return {?}
                 */function (filedata) {
                    if (!filedata || filedata.body.size == 0) {
                        _this.downloadComplete.emit(_this.file_download_fail);
                    }
                    else {
                        /** @type {?} */
                        var blob = new Blob([filedata.body]);
                        if (navigator.msSaveOrOpenBlob) {
                            navigator.msSaveOrOpenBlob(blob, fileName);
                        }
                        else {
                            /** @type {?} */
                            var link = document.createElement('a');
                            link.setAttribute('href', window.URL.createObjectURL(blob));
                            // 设置下载的文件名
                            link.setAttribute('download', fileName);
                            link.style.visibility = 'hidden';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        }
                        _this.downloadComplete.emit('');
                        if (needDelete) {
                            _this.DeleteFile4HandCraft(relativePath, su);
                        }
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.downloadComplete.error(error);
                }));
                // 添加error异常处理
            };
        // 删除文件
        // 删除文件
        /**
         * @param {?} relativePath
         * @param {?} preurl
         * @param {?=} customSu
         * @return {?}
         */
        FileOperateService.prototype.DeleteFile =
            // 删除文件
            /**
             * @param {?} relativePath
             * @param {?} preurl
             * @param {?=} customSu
             * @return {?}
             */
            function (relativePath, preurl, customSu) {
                if (customSu === void 0) {
                    customSu = '';
                }
                /** @type {?} */
                var tempUrl = '';
                if (preurl === '') {
                    tempUrl = this.fileUrl;
                }
                else {
                    tempUrl = preurl + "/fileoper";
                }
                /** @type {?} */
                var su = '';
                if (customSu !== '') {
                    su = customSu;
                }
                else {
                    su = DataIEUtils.getSu(tempUrl);
                }
                /** @type {?} */
                var delParam = {
                    relativePath: relativePath,
                    su: su
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
                this.http.post(fixedUrl + "/DeleteFile", delParam, {
                    params: { su: su }
                }).subscribe();
            };
        /**
         * @param {?} relativePath
         * @param {?} su
         * @return {?}
         */
        FileOperateService.prototype.DeleteFile4HandCraft = /**
         * @param {?} relativePath
         * @param {?} su
         * @return {?}
         */
            function (relativePath, su) {
                /** @type {?} */
                var delParam = {
                    relativePath: relativePath,
                    su: su
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
                this.http.post(fixedUrl + "/DeleteFile", delParam, {
                    params: { su: su }
                }).subscribe();
            };
        FileOperateService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FileOperateService.ctorParameters = function () {
            return [
                { type: i5.HttpClient }
            ];
        };
        return FileOperateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var MethodType = {
        CommonImport: 0,
        ImportSubTableDetail: 1,
        CommonExport: 2,
        ExportCurrentTableData: 3,
        ExportCurrentChildData: 4,
        CardFormDataImport: 5,
        DownloadImportTemplate: 6,
    };
    MethodType[MethodType.CommonImport] = 'CommonImport';
    MethodType[MethodType.ImportSubTableDetail] = 'ImportSubTableDetail';
    MethodType[MethodType.CommonExport] = 'CommonExport';
    MethodType[MethodType.ExportCurrentTableData] = 'ExportCurrentTableData';
    MethodType[MethodType.ExportCurrentChildData] = 'ExportCurrentChildData';
    MethodType[MethodType.CardFormDataImport] = 'CardFormDataImport';
    MethodType[MethodType.DownloadImportTemplate] = 'DownloadImportTemplate';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataImportService = /** @class */ (function () {
        function DataImportService(modalService, resolver, operateService, notify, http, injector) {
            var _this = this;
            this.modalService = modalService;
            this.resolver = resolver;
            this.operateService = operateService;
            this.notify = notify;
            this.http = http;
            this.injector = injector;
            this.origin = window.location.origin;
            this.url = this.origin + '/api/runtime/rtcommon/v1.0/import';
            this.DataIeProgressParams = {
                "ImportProgressValue": 13
            };
            this.complete = new i0.EventEmitter();
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.master_table_noid = res['master_table_noid'];
                _this.bind_form_error = res['bind_form_error'];
                _this.validate_result_show = res['validate_result_show'];
            }));
        }
        /**
         * @param {?} commonParams
         * @return {?}
         */
        DataImportService.prototype.ImportSubTable = /**
         * @param {?} commonParams
         * @return {?}
         */
            function (commonParams) {
                /** @type {?} */
                var ruleId = commonParams.ruleId;
                /** @type {?} */
                var option = commonParams.option;
                /** @type {?} */
                var frameContext = commonParams.frameContext;
                /** @type {?} */
                var methodType = commonParams.methodType;
                /** @type {?} */
                var suffix = commonParams.suffix;
                /** @type {?} */
                var fileName = commonParams.fileName;
                /** @type {?} */
                var befRestService = this.getBefRestService(frameContext.repository);
                commonParams.befRestService = befRestService;
                commonParams.repository = frameContext.repository;
                /** @type {?} */
                var globalVar = '';
                if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
                    if (typeof (option['GlobalParam']) === 'object') {
                        globalVar = JSON.stringify(option['GlobalParam']);
                    }
                    else {
                        globalVar = option['GlobalParam'];
                    }
                }
                /** @type {?} */
                var model = '';
                if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
                    model = JSON.stringify(option.Models[0]);
                }
                /** @type {?} */
                var mainObjId = frameContext.bindingData.list.currentId;
                if (isNullOrEmpty(mainObjId)) {
                    this.notify.info(this.master_table_noid);
                    return false;
                    // this.errorlevel = 'Info';
                    // this.complete.emit('未获取到主表ID值，请确认主表是否有数据');
                }
                else {
                    /** @type {?} */
                    var funcId = getQueryString('funcId');
                    /** @type {?} */
                    var importParam = {
                        body: {
                            dataImportContext: {
                                RuleId: ruleId,
                                FileName: fileName,
                                MainObjId: mainObjId,
                                GlobalParam: globalVar,
                                Suffix: suffix,
                                Model: model,
                                funcId: funcId,
                                securityLevelName: commonParams.securityLevelName,
                                methodType: methodType
                            },
                            requestInfo: befRestService.buildRequestInfo()
                        }
                    };
                    commonParams.importParam = importParam;
                    commonParams.mainObjId = mainObjId;
                    this.Import(commonParams);
                }
            };
        /**
         * @param {?} commonParams
         * @return {?}
         */
        DataImportService.prototype.ImportSubTable4HandCraft = /**
         * @param {?} commonParams
         * @return {?}
         */
            function (commonParams) {
                /** @type {?} */
                var ruleId = commonParams.ruleId;
                /** @type {?} */
                var option = commonParams.option;
                /** @type {?} */
                var frameContext = commonParams.frameContext;
                /** @type {?} */
                var suffix = commonParams.suffix;
                /** @type {?} */
                var fileName = commonParams.fileName;
                /** @type {?} */
                var globalVar = '';
                if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
                    if (typeof (option['GlobalParam']) === 'object') {
                        globalVar = JSON.stringify(option['GlobalParam']);
                    }
                    else {
                        globalVar = option['GlobalParam'];
                    }
                }
                /** @type {?} */
                var repository = frameContext === null ? null : frameContext.repository;
                /** @type {?} */
                var mainObjId = '';
                //手工表单仓库为null
                if (repository === null) {
                    if (option['mainId'] === undefined || option['mainId'] === null || option['mainId'] === '') {
                        this.notify.info(this.master_table_noid);
                        return false;
                    }
                    else {
                        mainObjId = option['mainId'];
                    }
                }
                else { //通用导入
                    if (frameContext.bindingData.list.currentId === '' || frameContext.bindingData.list.currentId === null) {
                        this.notify.info(this.master_table_noid);
                        return false;
                    }
                    else {
                        mainObjId = frameContext.bindingData.list.currentId;
                    }
                }
                /** @type {?} */
                var funcId = getQueryString('funcId');
                /** @type {?} */
                var importParam = {
                    ruleId: ruleId,
                    fileName: fileName,
                    mainObjId: mainObjId,
                    globalParam: globalVar,
                    suffix: suffix,
                    funcId: funcId,
                    securityLevelName: commonParams.securityLevelName
                };
                commonParams.importParam = importParam;
                commonParams.mainObjId = mainObjId;
                // this.Import4HandCraft(commonParams);
            };
        /**
         * @param {?} commonParams
         * @return {?}
         */
        DataImportService.prototype.ImportByRuleId = /**
         * @param {?} commonParams
         * @return {?}
         */
            function (commonParams) {
                /** @type {?} */
                var ruleId = commonParams.ruleId;
                /** @type {?} */
                var option = commonParams.option;
                /** @type {?} */
                var repository = commonParams.repository;
                /** @type {?} */
                var suffix = commonParams.suffix;
                /** @type {?} */
                var fileName = commonParams.fileName;
                /** @type {?} */
                var methodType = commonParams.methodType;
                /** @type {?} */
                var befRestService = this.getBefRestService(repository);
                commonParams.befRestService = befRestService;
                /** @type {?} */
                var globalVar = '';
                if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
                    if (typeof (option['GlobalParam']) === 'object') {
                        globalVar = JSON.stringify(option['GlobalParam']);
                    }
                    else {
                        globalVar = option['GlobalParam'];
                    }
                }
                /** @type {?} */
                var model = '';
                if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
                    model = JSON.stringify(option.Models[0]);
                }
                console.log('baseUri: ' + befRestService.baseUri);
                /** @type {?} */
                var funcId = getQueryString('funcId');
                if (methodType === MethodType.CardFormDataImport) {
                    commonParams.mainObjId = option.mainObjId;
                }
                else {
                    commonParams.mainObjId = '';
                }
                /** @type {?} */
                var importParam = {
                    body: {
                        dataImportContext: {
                            RuleId: ruleId,
                            FileName: fileName,
                            GlobalParam: globalVar,
                            Suffix: suffix,
                            Model: model,
                            funcId: funcId,
                            securityLevelName: commonParams.securityLevelName,
                            mainObjId: commonParams.mainObjId,
                            methodType: methodType
                        }
                    }
                };
                commonParams.importParam = importParam;
                this.Import(commonParams);
            };
        /**
         * @param {?} commonParams
         * @return {?}
         */
        DataImportService.prototype.Import = /**
         * @param {?} commonParams
         * @return {?}
         */
            function (commonParams) {
                var _this = this;
                /** @type {?} */
                var repository = commonParams.repository;
                /** @type {?} */
                var importParam = commonParams.importParam;
                /** @type {?} */
                var befRestService = commonParams.befRestService;
                /** @type {?} */
                var methodType = commonParams.methodType;
                /** @type {?} */
                var subscriber = befRestService.request(befRestService.baseUri + "/service/dataimportvmaction", 'put', null, importParam);
                subscriber.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var su = DataIEUtils.getSu(befRestService.baseUri);
                    /** @type {?} */
                    var importResult = ( /** @type {?} */(data.returnValue));
                    if (isNullOrUndefined(importResult)) {
                        importResult = ( /** @type {?} */(data));
                    }
                    commonParams.su = su;
                    commonParams.importResult = importResult;
                    if (importResult.succeed === true) {
                        try {
                            if (importResult.formData && importResult.formData.length > 0) {
                                importResult.isform = true;
                                if (methodType === MethodType.ImportSubTableDetail) {
                                    //子表导入表单
                                    /** @type {?} */
                                    var newData = importResult.formData[0];
                                    /** @type {?} */
                                    var curEntity = repository.entityCollection.getEntityById(commonParams.mainObjId);
                                    curEntity.load(newData);
                                }
                                else if (methodType === MethodType.CardFormDataImport) ;
                                else {
                                    //主从表导入表单
                                    /** @type {?} */
                                    var entities_1 = [];
                                    importResult.formData.forEach(( /**
                                     * @param {?} rdata
                                     * @return {?}
                                     */function (rdata) {
                                        /** @type {?} */
                                        var entity = repository.buildEntity(rdata);
                                        entities_1.push(entity);
                                    }));
                                    repository.entityCollection.addEntities(entities_1);
                                }
                            }
                            if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                                _this.complete.emit('部分数据导入完成');
                            }
                            else {
                                if (importResult.isform == true) {
                                    //此处为传递，无需国际化
                                    _this.complete.emit('导入表单成功');
                                }
                                else {
                                    _this.complete.emit('');
                                }
                            }
                            // this.complete.emit(true);
                            //this.complete.emit('');
                            //导入成功如果展示校验结果，只能是校验策略是忽略，所有校验结果都是error
                            _this.ShowValidatedResult(commonParams);
                            // this.notify.info('数据导入成功');
                            // this.needDestroy.emit();
                        }
                        catch (_a) {
                            // this.complete.emit(false);
                            _this.complete.emit(importResult.message);
                            _this.notify.error(_this.bind_form_error);
                        }
                    }
                    else {
                        console.log(importResult.exceptionSource);
                        _this.errorlevel = importResult.errorLevel;
                        _this.ShowValidatedResult(commonParams);
                        // this.complete.emit(importResult.message);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.log(error);
                    _this.errorlevel = 'error';
                    _this.complete.emit(error.error.Message);
                }));
            };
        // 显示校验结果
        // 显示校验结果
        /**
         * @private
         * @param {?} commonParams
         * @return {?}
         */
        DataImportService.prototype.ShowValidatedResult =
            // 显示校验结果
            /**
             * @private
             * @param {?} commonParams
             * @return {?}
             */
            function (commonParams) {
                var _this = this;
                /** @type {?} */
                var importResult = commonParams.importResult;
                /** @type {?} */
                var loadingParam = commonParams.loadingParam;
                /** @type {?} */
                var befRestService = commonParams.befRestService;
                if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                    loadingParam.loadingService.clearAll();
                    /** @type {?} */
                    var cmpRef = this.CreateValidatedComponent();
                    cmpRef.instance.validateResult = importResult.validatedResults;
                    cmpRef.instance.su = commonParams.su;
                    cmpRef.instance.i18nResource = commonParams.i18nResource;
                    cmpRef.instance.loadingParam = loadingParam;
                    /** @type {?} */
                    var validateModalConfig = {
                        title: this.validate_result_show,
                        width: 950,
                        height: 550,
                        buttons: cmpRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog_1 = this.modalService.show(cmpRef, validateModalConfig);
                    //0代表按钮中止或X点击；1代表按钮继续
                    /** @type {?} */
                    var closed_1 = 0;
                    dialog_1.dialog.instance.closed.subscribe(( /**
                     * @return {?}
                     */function () {
                        if (closed_1 === 0) {
                            _this.complete.emit('校验中止');
                        }
                    }));
                    cmpRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        closed_1 = 0;
                        dialog_1.close();
                    }));
                    cmpRef.instance.okModal.subscribe(( /**
                     * @param {?} validatedInfoList
                     * @return {?}
                     */function (validatedInfoList) {
                        closed_1 = 1;
                        dialog_1.close();
                        loadingParam.loadingService.show(loadingParam.loadingConfig);
                        commonParams.importParam.body.dataImportContext['validatedInfoList'] = validatedInfoList;
                        _this.Import(commonParams);
                    }));
                }
                else {
                    this.complete.emit(importResult.message);
                }
            };
        /**
         * @private
         * @param {?} repository
         * @return {?}
         */
        DataImportService.prototype.getBefRestService = /**
         * @private
         * @param {?} repository
         * @return {?}
         */
            function (repository) {
                /** @type {?} */
                var befRepository = ( /** @type {?} */(repository));
                return befRepository.restService;
            };
        // 生成校验窗口组件
        // 生成校验窗口组件
        /**
         * @private
         * @return {?}
         */
        DataImportService.prototype.CreateValidatedComponent =
            // 生成校验窗口组件
            /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ValidateFormComponent);
                /** @type {?} */
                var comRef = compFactory.create(this.injector);
                return comRef;
            };
        /**
         * @param {?} str
         * @return {?}
         */
        DataImportService.prototype.JudgeIllegalChar = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ','];
                illegalChar.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (str.indexOf(item) !== -1) {
                        return true;
                    }
                }));
                return false;
            };
        // 下载模板
        // 下载模板
        /**
         * @param {?} ruleId
         * @param {?} repository
         * @param {?} importOption
         * @param {?} suffix
         * @return {?}
         */
        DataImportService.prototype.DowmloadTemplate =
            // 下载模板
            /**
             * @param {?} ruleId
             * @param {?} repository
             * @param {?} importOption
             * @param {?} suffix
             * @return {?}
             */
            function (ruleId, repository, importOption, suffix) {
                var _this = this;
                /** @type {?} */
                var befRestService = this.getBefRestService(repository);
                /** @type {?} */
                var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var tempUrl = preUrl + "/import";
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                if (importOption['su'] !== undefined && importOption['su'] !== null) {
                    su = importOption['su'];
                }
                /** @type {?} */
                var securityLevelName = '';
                if (!isNullOrUndefined(importOption.securityLevelName)) {
                    securityLevelName = importOption.securityLevelName;
                }
                /** @type {?} */
                var model = '';
                if (importOption.Models !== undefined && importOption.Models !== null && importOption.Models.length > 0) {
                    model = JSON.stringify(importOption.Models[0]);
                }
                /** @type {?} */
                var globalVar = '';
                if (!isNullOrUndefined(importOption['GlobalParam'])) {
                    if (typeof (importOption['GlobalParam']) === 'object') {
                        globalVar = JSON.stringify(importOption['GlobalParam']);
                    }
                    else {
                        globalVar = importOption['GlobalParam'];
                    }
                }
                /** @type {?} */
                var templateParam = {
                    body: {
                        ruleId: ruleId,
                        suffix: suffix,
                        su: su,
                        model: model,
                        globalParam: globalVar,
                        securityLevelName: securityLevelName
                    }
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport';
                /** @type {?} */
                var subscriber = befRestService.request(fixedUrl + "/TemplateDownload", 'post', { su: su }, templateParam);
                subscriber.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data['result'] === true) {
                        /** @type {?} */
                        var filename = '';
                        if (importOption['templatefilename'] === '' || importOption['templatefilename'] === undefined) {
                            filename = data['fileName'];
                        }
                        else {
                            /** @type {?} */
                            var suffixIndex = data['fileName'].lastIndexOf('.');
                            /** @type {?} */
                            var tempsuffix = data['fileName'].substring(suffixIndex);
                            /** @type {?} */
                            var customName = importOption['templatefilename'];
                            if (!_this.JudgeIllegalChar(customName)) {
                                if (customName.indexOf('.') !== -1) {
                                    filename = customName;
                                }
                                else {
                                    filename = customName + tempsuffix;
                                }
                            }
                            else {
                                filename = data['fileName'];
                            }
                        }
                        _this.operateService.DownloadFile(data['docRelativePath'], filename, preUrl, importOption);
                        /** @type {?} */
                        var subscription_1 = _this.operateService.downloadComplete.subscribe(( /**
                         * @param {?} result
                         * @return {?}
                         */function (result) {
                            if (result === '') {
                                _this.complete.emit('');
                                subscription_1.unsubscribe();
                            }
                            else {
                                _this.complete.emit(result);
                                subscription_1.unsubscribe();
                            }
                        }));
                    }
                    else {
                        // this.notify.error('下载模板失败，失败信息：' + data['message']);
                        _this.complete.emit(data['message']);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.log(error);
                    _this.complete.emit('下载模板失败');
                }));
            };
        // 下载模板
        // 下载模板
        /**
         * @param {?} ruleId
         * @param {?} importOption
         * @param {?} suffix
         * @return {?}
         */
        DataImportService.prototype.DowmloadTemplate4HandCraft =
            // 下载模板
            /**
             * @param {?} ruleId
             * @param {?} importOption
             * @param {?} suffix
             * @return {?}
             */
            function (ruleId, importOption, suffix) {
                var _this = this;
                /** @type {?} */
                var su = importOption.su;
                /** @type {?} */
                var globalVar = '';
                if (importOption['GlobalParam'] !== null && importOption['GlobalParam'] !== undefined) {
                    if (typeof (importOption['GlobalParam']) === 'object') {
                        globalVar = JSON.stringify(importOption['GlobalParam']);
                    }
                    else {
                        globalVar = importOption['GlobalParam'];
                    }
                }
                /** @type {?} */
                var securityLevelName = '';
                if (!isNullOrUndefined(importOption.securityLevelName)) {
                    securityLevelName = importOption.securityLevelName;
                }
                /** @type {?} */
                var templateParam = {
                    ruleId: ruleId,
                    suffix: suffix,
                    su: su,
                    globalParam: globalVar,
                    securityLevelName: securityLevelName
                };
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/TemplateDownload';
                this.http.post(fixedUrl, templateParam, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    responseType: 'blob',
                    observe: 'response',
                    params: { su: su }
                }).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    console.log(res);
                    /** @type {?} */
                    var data = res.body;
                    if (data.type == 'application/json') {
                        /** @type {?} */
                        var reader_1 = new FileReader();
                        reader_1.onload = ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            /** @type {?} */
                            var responseParam = JSON.parse(( /** @type {?} */(reader_1.result)));
                            if (!responseParam.result) {
                                _this.complete.emit(responseParam.message);
                            }
                        });
                        reader_1.readAsText(data, 'utf-8');
                    }
                    else {
                        /** @type {?} */
                        var fileName = '';
                        /** @type {?} */
                        var contentDisposition = res.headers.get("content-disposition");
                        if (contentDisposition) {
                            // 正则获取filename的值
                            /** @type {?} */
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            /** @type {?} */
                            var matches = filenameRegex.exec(contentDisposition);
                            if (matches != null && matches[1]) {
                                fileName = matches[1].replace(/['"]/g, '');
                            }
                            // 通过 URLEncoder.encode(pFileName, StandardCharsets.UTF_8.name()) 加密编码的, 使用decodeURI(fileName) 解密
                            fileName = decodeURI(fileName);
                            // 通过 new String(pFileName.getBytes(), StandardCharsets.ISO_8859_1) 加密编码的, 使用decodeURI(escape(fileName)) 解密
                            // fileName = decodeURI(escape(fileName))
                        }
                        if (!isNullOrUndefined(importOption.templatefilename)) {
                            /** @type {?} */
                            var suffixIndex = fileName.lastIndexOf('.');
                            /** @type {?} */
                            var suffix_1 = fileName.substring(suffixIndex);
                            fileName = importOption.templatefilename + suffix_1;
                        }
                        /** @type {?} */
                        var blob = new Blob([data]);
                        if (!data || data.size == 0) {
                            _this.complete.emit('返回的数据为空');
                        }
                        else {
                            if (navigator.msSaveOrOpenBlob) {
                                navigator.msSaveOrOpenBlob(blob, fileName);
                            }
                            else {
                                /** @type {?} */
                                var link = document.createElement('a');
                                link.setAttribute('href', window.URL.createObjectURL(blob));
                                // 设置下载的文件名
                                link.setAttribute('download', fileName);
                                link.style.visibility = 'hidden';
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                            }
                            _this.complete.emit('');
                        }
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.complete.error(error.error.Message);
                }));
            };
        DataImportService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        DataImportService.ctorParameters = function () {
            return [
                { type: i1.BsModalService },
                { type: i0.ComponentFactoryResolver },
                { type: FileOperateService },
                { type: i1$1.NotifyService },
                { type: i5.HttpClient },
                { type: i0.Injector }
            ];
        };
        return DataImportService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var RuleFileType = {
        /**
         * Excel 2003文件格式
         */
        XLS: 0,
        /**
         * Excel 2007文件格式（启用宏）
         */
        XLSM: 1,
        /**
         * Excel 2007文件格式
         */
        XLSX: 2,
        /**
         * WPS表格
         */
        ET: 3,
        /**
         * WPS表格 模板文件
         */
        ETT: 4,
        /**
         * xml文件
         */
        XML: 5,
        /**
         * pdf文件
         */
        PDF: 6,
        /**
         * csv文件
         */
        CSV: 7,
    };
    RuleFileType[RuleFileType.XLS] = 'XLS';
    RuleFileType[RuleFileType.XLSM] = 'XLSM';
    RuleFileType[RuleFileType.XLSX] = 'XLSX';
    RuleFileType[RuleFileType.ET] = 'ET';
    RuleFileType[RuleFileType.ETT] = 'ETT';
    RuleFileType[RuleFileType.XML] = 'XML';
    RuleFileType[RuleFileType.PDF] = 'PDF';
    RuleFileType[RuleFileType.CSV] = 'CSV';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent1Component = /** @class */ (function () {
        function ExtendComponent1Component(http, notify) {
            var _this = this;
            this.http = http;
            this.notify = notify;
            this.closeModal = new i0.EventEmitter();
            this.okModal = new i0.EventEmitter();
            this.ObjInfoColumns = [];
            this.ObjInfoData = [];
            this.FieldsColumns = [];
            this.FieldsData = [];
            this.canNotCheckedRow = ( /**
             * @param {?} row
             * @param {?} index
             * @return {?}
             */function (row, index) {
                return row.require;
            });
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.i18nResouce = res;
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
            }));
        }
        /**
         * @return {?}
         */
        ExtendComponent1Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ObjInfoColumns = [
                    { field: 'fileObjectName', width: 100, title: '对象名称', sortable: false, showTips: true }
                ];
                this.dataIeRuleExtend = JSON.parse(JSON.stringify(this.dataIeRuleExtendOriginal));
                this.extendRuleInfo = JSON.parse(this.dataIeRuleExtend.extendRuleInfo);
                this.ObjInfoData = this.extendRuleInfo.objInfos;
                this.FieldsColumns = [
                    { field: 'fileElementName', width: 100, title: '列名', sortable: false, showTips: true, filter: true }
                ];
            };
        /**
         * @return {?}
         */
        ExtendComponent1Component.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // this.objSelectChanged({data:this.ObjInfoData[0]});
                this.ObjsGrid.selectRow(this.ObjInfoData[0].id);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.moveUp = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _a;
                /** @type {?} */
                var selectedRow = this.FieldsGrid.selectedRow;
                if (!selectedRow || !selectedRow.data) {
                    return;
                }
                /** @type {?} */
                var id = selectedRow.data.id;
                /** @type {?} */
                var idx = this.FieldsData.findIndex(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.id === id; }));
                if (idx <= 0) {
                    return;
                }
                /** @type {?} */
                var temp = this.FieldsData.splice(idx, 1);
                (_a = this.FieldsData).splice.apply(_a, __spread([idx - 1, 0], temp));
                this.FieldsData = JSON.parse(JSON.stringify(this.FieldsData));
                this.FieldsGrid.selectRow(id);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.moveDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _a;
                /** @type {?} */
                var selectedRow = this.FieldsGrid.selectedRow;
                if (!selectedRow || !selectedRow.data) {
                    return;
                }
                /** @type {?} */
                var id = selectedRow.data.id;
                /** @type {?} */
                var idx = this.FieldsData.findIndex(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.id === id; }));
                if (idx >= this.FieldsData.length - 1) {
                    return;
                }
                /** @type {?} */
                var temp = this.FieldsData.splice(idx, 1);
                (_a = this.FieldsData).splice.apply(_a, __spread([idx + 1, 0], temp));
                this.FieldsData = JSON.parse(JSON.stringify(this.FieldsData));
                this.FieldsGrid.selectRow(id);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.onFilterChanged = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (!e.fileElementName) {
                    /** @type {?} */
                    var selectedRow = this.ObjsGrid.selectedRow;
                    if (!selectedRow || !selectedRow.data) {
                        return;
                    }
                    this.objSelectChanged(selectedRow);
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.objSelectChanged = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                /** @type {?} */
                var rowDataId = e.data.id;
                /** @type {?} */
                var idx = this.ObjInfoData.findIndex(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.id === rowDataId; }));
                if (idx >= 0) {
                    this.FieldsData = this.ObjInfoData[idx].fieldsInfo;
                    this.FieldsGrid.loadData(this.FieldsData);
                    // this.FieldsGrid = JSON.parse(JSON.stringify(fieldsData));
                    this.FieldsData.forEach(( /**
                     * @param {?} d
                     * @return {?}
                     */function (d) {
                        if (d.checked) {
                            _this.FieldsGrid.checkRow(d.id, false);
                        }
                    }));
                    /** @type {?} */
                    var selectedRow = this.FieldsGrid.selectedRow;
                    if (selectedRow) {
                        this.FieldsGrid.clearSelections();
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.ElementCheckedRow = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var rowData = e.data;
                /** @type {?} */
                var idx = this.FieldsData.findIndex(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.id === rowData.id; }));
                if (idx >= 0) {
                    this.FieldsData[idx].checked = true;
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.ElementUnCheckedRow = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var rowData = e.data;
                /** @type {?} */
                var idx = this.FieldsData.findIndex(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.id === rowData.id; }));
                if (idx >= 0) {
                    this.FieldsData[idx].checked = false;
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.ElementCheckedAll = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.FieldsData.forEach(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) {
                    d.checked = true;
                }));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        ExtendComponent1Component.prototype.ElementUnCheckedAll = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (isNullOrEmpty(e)) {
                    return;
                }
                this.FieldsData.forEach(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) {
                    d.checked = false;
                }));
            };
        /**
         * @return {?}
         */
        ExtendComponent1Component.prototype.okHandler = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (isNullOrBlank(this.dataIeRuleExtend.code)) {
                    this.notify.warning('模板编号不能为空');
                    return;
                }
                if (isNullOrBlank(this.dataIeRuleExtend.name)) {
                    this.notify.warning('模板名称不能为空');
                    return;
                }
                this.extendRuleInfo.objInfos = this.ObjInfoData;
                this.dataIeRuleExtend.extendRuleInfo = JSON.stringify(this.extendRuleInfo);
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/checkUpdateRuleExtend';
                this.http.post(url, this.dataIeRuleExtend).subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (e.success) {
                        _this.okModal.emit(_this.dataIeRuleExtend);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        ExtendComponent1Component.prototype.cancelHandler = /**
         * @return {?}
         */
            function () {
                this.closeModal.emit();
            };
        ExtendComponent1Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component1',
                        template: "<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\" style=\"margin-top: 13px;\">\n\n  <div class=\"farris-group-wrap form-inline farris-form-inline item-label\">\n    <div class=\"form-group farris-form-group\">\n      <label class=\" col-form-label\">\n        <span class=\"farris-label-info text-danger\">*</span>\n        <span class=\"farris-label-text\">\u6A21\u677F\u7F16\u53F7</span>\n      </label>\n      <div class=\"farris-input-wrap\" style=\"width:240px;\">\n        <input-group name=\"templateCode\" [(ngModel)]=\"dataIeRuleExtend.code\"></input-group>\n        <div class=\"farris-feedback valid-feedback\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"farris-group-wrap form-inline farris-form-inline item-label\">\n    <div class=\"form-group farris-form-group\">\n      <label class=\" col-form-label\">\n        <span class=\"farris-label-info text-danger\">*</span>\n        <span class=\"farris-label-text\">\u6A21\u677F\u540D\u79F0</span>\n      </label>\n      <div class=\"farris-input-wrap\" style=\"width:240px;\">\n        <input-group name=\"templateName\" [(ngModel)]=\"dataIeRuleExtend.name\"></input-group>\n        <div class=\"farris-feedback valid-feedback\"></div>\n      </div>\n    </div>\n  </div>\n\n\n</form>\n<farris-section style=\"height: 500px;\">\n  <div class=\"f-page f-page-is-wizard\">\n    <div class=\"position-relative flex-fill farris-split-section m-2 farris-overflow-hidden\">\n\n      <layout id=\"manage-layout\" direction=\"h\" fill=\"true\" class=\"d-flex flex-row layout-fill\">\n        <layout-panel id=\"adptor-layout-panel-left\" class=\"col-2 d-flex flex-column farris-lsection p-0\" region=\"west\"\n                      minWidth=\"150\"\n                      showBorder=\"false\"\n                      style=\"flex: 0 0 auto; max-width: none; width: 260px;margin-top: 14px;overflow-y: auto;overflow-x: hidden\">\n          <div class=\"flex-fill farris-overflow-y-auto\" style=\"background-color: white;height: 468px;\">\n            <farris-datagrid #ObjsGrid id=\"objs-grid\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\n                             [columns]=\"ObjInfoColumns\"\n                             [pagination]=\"false\" [showBorder]=\"true\" [striped]=\"true\" [showLineNumber]=\"true\"\n                             [sizeType]=\"'sm'\"\n                             [data]=\"ObjInfoData\" [editable]=\"false\" (selectChanged)=\"objSelectChanged($event)\">\n            </farris-datagrid>\n          </div>\n        </layout-panel>\n\n        <layout-panel id=\"adptor-layout-panel-right\" class=\"farris-rsection f-overflow-y-auto d-flex flex-fill\"\n                      region=\"center\" minWidth=\"280\"\n                      showBorder=\"false\">\n          <div class=\"f-struct-wrapper f-utils-fill-flex-column\" style=\"width: 445px;height: 460px;\">\n            <div class=\"row\" style=\"margin-left:5px;\">\n              <farris-button [type]=\"'link'\" (click)=\"moveUp($event)\">\u4E0A\u79FB</farris-button>\n              <farris-button [type]=\"'link'\" (click)=\"moveDown($event)\">\u4E0B\u79FB</farris-button>\n            </div>\n            <farris-datagrid #FieldsGrid id=\"fields-grid\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\n                             [columns]=\"FieldsColumns\"\n                             [showAllCheckbox]=\"false\" [selectOnCheck]=\"true\" [onlySelectSelf]=\"true\"\n                             [showCheckbox]=\"true\"\n                             [multiSelect]=\"true\" [keepSelect]=\"true\" [pagination]=\"false\" [showBorder]=\"true\"\n                             [showLineNumber]=\"true\"\n                             [striped]=\"true\" [sizeType]=\"'sm'\" [data]=\"FieldsData\" [enableFilterRow]=\"true\"\n                             (filterChanged)=\"onFilterChanged($event)\" [disableRow]=\"canNotCheckedRow\"\n                             (checked)=\"ElementCheckedRow($event)\" (unChecked)=\"ElementUnCheckedRow($event)\"\n                             >\n            </farris-datagrid>\n          </div>\n        </layout-panel>\n      </layout>\n\n    </div>\n  </div>\n</farris-section>\n\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"cancelHandler()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"okHandler()\">{{ie_ok}}</button>\n</ng-template>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent1Component.ctorParameters = function () {
            return [
                { type: i5.HttpClient },
                { type: i1$1.NotifyService }
            ];
        };
        ExtendComponent1Component.propDecorators = {
            ObjsGrid: [{ type: i0.ViewChild, args: ['ObjsGrid',] }],
            FieldsGrid: [{ type: i0.ViewChild, args: ['FieldsGrid',] }],
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            closeModal: [{ type: i0.Output }],
            okModal: [{ type: i0.Output }]
        };
        return ExtendComponent1Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RuleSelectComponent = /** @class */ (function () {
        function RuleSelectComponent(http, notify, injector, modalService, msgService, resolver) {
            var _this = this;
            this.http = http;
            this.notify = notify;
            this.injector = injector;
            this.modalService = modalService;
            this.msgService = msgService;
            this.resolver = resolver;
            this.closeModal = new i0.EventEmitter();
            this.okModal = new i0.EventEmitter();
            // 规则ID 该id为表单上配置的规则id
            this.ruleId = '';
            this.voId = '';
            this.RuleMgrsData = [];
            this.fileTypes = [
                { label: 'Office Excel97-2003(*.xls)', value: RuleFileType[0] },
                { label: 'Office Excel Macro(*.xlsm)', value: RuleFileType[1] },
                { label: 'Office Excel(*.xlsx)', value: RuleFileType[2] },
                { label: 'WPS Table(*.et)', value: RuleFileType[3] },
                { label: 'WPS Table(Template File)(*.ett)', value: RuleFileType[4] },
                { label: 'XML Table(*.xml)', value: RuleFileType[5] },
                { label: 'PDF File(*.pdf)', value: RuleFileType[6] },
                { label: 'CSV File(*.csv)', value: RuleFileType[7] }
            ];
            this.RuleMgrsColumns = [];
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.i18nResouce = res;
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.ruleselect_code = res['ruleselect_code'];
                _this.ruleselect_name = res['ruleselect_name'];
                _this.ruleselect_rulesource = res['ruleselect_rulesource'];
                _this.ruleselect_custom = res['ruleselect_custom'];
                _this.ruleselect_syspreset = res['ruleselect_syspreset'];
                _this.ruleselect_billcategory = res['ruleselect_billcategory'];
                _this.ruleselect_creator = res['ruleselect_creator'];
                _this.ruleselect_filetype = res['ruleselect_filetype'];
                _this.ruleselect_selectrulenotify = res['ruleselect_selectrulenotify'];
                _this.ruleselect_updatetime = res['ruleselect_updatetime'];
            }));
        }
        /**
         * @return {?}
         */
        RuleSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var ruleSourceType = [
                    { label: this.i18nResouce['product_preset'], value: 'ProductPreset' },
                    { label: this.i18nResouce['project_define'], value: 'ProjectDefine' },
                    { label: this.i18nResouce['user_custom'], value: 'UserCustom' }
                ];
                this.RuleMgrsColumns = [
                    { field: 'code', width: 180, title: this.ruleselect_code, showTips: true, halign: 'center', align: 'center', sortable: true },
                    { field: 'name', width: 180, title: this.ruleselect_name, showTips: true, halign: 'center', align: 'center', sortable: true },
                    // {
                    //   field: 'ruleSourceType', width: 100, title: this.ruleselect_rulesource, showTips: true, halign: 'center', align: 'center', sortable: true,
                    //   formatter: { type: 'enum', options: { valueField: 'value', textField: 'label', data: ruleSourceType } }
                    // },
                    {
                        field: 'sysPreset', width: 100, title: this.ruleselect_rulesource, halign: 'center', align: 'center', sortable: true,
                        formatter: { type: 'boolean', options: { trueText: this.ruleselect_syspreset, falseText: this.ruleselect_custom } }
                    },
                    // { field: 'bizEntityName', width: 150, title: '数据实体', halign: 'center', align: 'center', sortable: true },
                    {
                        field: 'fileType', width: 180, title: this.ruleselect_filetype, showTips: true, halign: 'center', align: 'center', sortable: true,
                        formatter: { type: 'enum', options: { valueField: 'value', textField: 'label', data: this.fileTypes } }
                    },
                    { field: 'lastModifiedTime', width: 150, title: this.ruleselect_updatetime, showTips: true, halign: 'center', align: 'center', sortable: true }
                    // {
                    //   field: 'operation',
                    //   width: 130,
                    //   halign: 'center',
                    //   align: 'center',
                    //   title: this.i18nResouce['operation'],
                    //   template: this.columnOperation
                    // }
                    // { field: 'creator', width: 150, title: this.ruleselect_creator, halign: 'center', align: 'center', sortable: true }
                ];
            };
        /**
         * @param {?} ctx
         * @return {?}
         */
        RuleSelectComponent.prototype.createRuleExtend = /**
         * @param {?} ctx
         * @return {?}
         */
            function (ctx) {
                var _this = this;
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/createRuleExtendInfo/' + ctx.rowData.id;
                this.http.get(url).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    /** @type {?} */
                    var compFactory = _this.resolver.resolveComponentFactory(ExtendComponent1Component);
                    /** @type {?} */
                    var compRef = compFactory.create(_this.injector);
                    compRef.instance.dataIeRuleExtendOriginal = res;
                    /** @type {?} */
                    var modalConfig = {
                        title: '导入模板配置',
                        width: 750,
                        height: 650,
                        buttons: compRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                    compRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        dialog.close();
                    }));
                    compRef.instance.okModal.subscribe(( /**
                     * @param {?} dataIeRuleExtend
                     * @return {?}
                     */function (dataIeRuleExtend) {
                        /** @type {?} */
                        var idx = _this.RuleMgrsData.findIndex(( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) { return e.id === dataIeRuleExtend.id; }));
                        if (idx >= 0) {
                            _this.RuleMgrsData[idx] = dataIeRuleExtend;
                            _this.RuleMgrsGrid.refresh();
                        }
                        else {
                            _this.RuleMgrsData.push(dataIeRuleExtend);
                        }
                        dialog.close();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @param {?} ctx
         * @return {?}
         */
        RuleSelectComponent.prototype.updateRule = /**
         * @param {?} ctx
         * @return {?}
         */
            function (ctx) {
            };
        /**
         * @param {?} ctx
         * @return {?}
         */
        RuleSelectComponent.prototype.deleteRule = /**
         * @param {?} ctx
         * @return {?}
         */
            function (ctx) {
            };
        /**
         * @return {?}
         */
        RuleSelectComponent.prototype.okHandler = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var selectedRow = this.RuleMgrsGrid.selectedRow;
                if (selectedRow === null) {
                    this.notify.info(this.ruleselect_selectrulenotify);
                    return;
                }
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/updateConfigRule';
                /** @type {?} */
                var body = {
                    ruleId: this.ruleId,
                    voId: this.voId,
                    ruleType: this.ruleType,
                    currentRuleId: selectedRow.id
                };
                this.http.post(url, body).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    console.log(res.message);
                    _this.okModal.emit(selectedRow.data);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        RuleSelectComponent.prototype.cancelHandler = /**
         * @return {?}
         */
            function () {
                this.closeModal.emit();
            };
        RuleSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'thd-rule-select',
                        template: "<div class=\"d-flex flex-fill\" style=\"height:100%;\">\n  <farris-datagrid #RuleMgrsGrid id=\"rule-mgrs-data\" [fit]=\"true\" [fitColumns]=\"true\" [columns]=\"RuleMgrsColumns\"\n                   [pagination]=\"false\"\n                   [showLineNumber]=\"true\" [keepSelect]=\"true\" [sizeType]=\"'sm'\" [data]=\"RuleMgrsData\">\n  </farris-datagrid>\n  <ng-template #columnOperation let-ctx>\n    <a *ngIf=\"ctx.rowData.ruleSourceType !== 'UserCustom'\" href=\"javascript: void(0);\" (click)=\"createRuleExtend(ctx)\">\u521B\u5EFA\u6269\u5C55</a>\n    <div *ngIf=\"ctx.rowData.ruleSourceType === 'UserCustom'\">\n      <a href=\"javascript: void(0);\" (click)=\"updateRule(ctx)\">\u4FEE\u6539</a>\n      &nbsp;&nbsp;\n      <a href=\"javascript: void(0);\" (click)=\"deleteRule(ctx)\">\u5220\u9664</a>\n    </div>\n\n  </ng-template>\n</div>\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"cancelHandler()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"okHandler()\">{{ie_ok}}</button>\n</ng-template>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RuleSelectComponent.ctorParameters = function () {
            return [
                { type: i5.HttpClient },
                { type: i1$1.NotifyService },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: uiMessager.MessagerService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        RuleSelectComponent.propDecorators = {
            RuleMgrsGrid: [{ type: i0.ViewChild, args: ['RuleMgrsGrid',] }],
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            columnOperation: [{ type: i0.ViewChild, args: ['columnOperation',] }],
            closeModal: [{ type: i0.Output }],
            okModal: [{ type: i0.Output }]
        };
        return RuleSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataieProgressComponent = /** @class */ (function () {
        function DataieProgressComponent() {
            this.closeModal = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        DataieProgressComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        DataieProgressComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-dataie-progress',
                        template: "<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\r\n    <div class=\"col-12\">\r\n\r\n\r\n        <farris-progress [percent]=\"DataIeProgressParams.ImportProgressValue\" [status]=\"'active'\"></farris-progress>\r\n        <p>\u6570\u636E\u5BFC\u5165\u4E2D</p>\r\n\r\n    </div>\r\n</form>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        DataieProgressComponent.ctorParameters = function () { return []; };
        DataieProgressComponent.propDecorators = {
            closeModal: [{ type: i0.Output }]
        };
        return DataieProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonParams = /** @class */ (function () {
        function CommonParams() {
            this.ruleId = '';
            this.keys = [];
            this.option = {};
            this.fileName = '';
            this.frameContext = null;
            this.repository = null;
            this.befRestService = null;
            this.suffix = '';
            this.loadingParam = {};
            this.i18nResource = {};
            this.importParam = {};
            this.mainObjId = '';
            this.su = '';
            this.importResult = {};
            this.securityLevelName = '';
        }
        return CommonParams;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImportDialogComponent = /** @class */ (function () {
        function ImportDialogComponent(dataImportService, notify, loadingService, http, injector, modalService, listDataSer, msgService, resolver) {
            var _this = this;
            this.dataImportService = dataImportService;
            this.notify = notify;
            this.loadingService = loadingService;
            this.http = http;
            this.injector = injector;
            this.modalService = modalService;
            this.listDataSer = listDataSer;
            this.msgService = msgService;
            this.resolver = resolver;
            // 规则ID 该id为表单上配置的规则id
            this.ruleId = '';
            // 过滤条件
            this.importOption = null;
            this.frameContext = null;
            this.subject = null;
            this.showfiletype = true;
            this.enableRuntimeCustom = false;
            // 记录的规则
            this.recordRule = null;
            //当前选择规则的id、名称和文件类型
            this.currentRuleName = '';
            this.currentRuleId = '';
            this.currentRuleFileType = '';
            this.enableTemplate = true;
            this.closeXLSX = false;
            this.enableSecurityLevelSelect = false;
            this.securityLevelName = '';
            this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
            this.ImportSecretRemindInfo = '';
            // 文件名称
            this.fileName = '';
            this.origin = window.location.origin;
            this.uploader = new FileUploader({
                url: '',
                method: 'POST',
                autoUpload: false,
                itemAlias: 'uploadedfile'
            });
            // 控制Destroy表单中的输入组件
            this.needDestroy = new i0.EventEmitter();
            this.valueField = null;
            this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
            this.fileListItems = [
                { id: FileConst.xls, label: FileConst.xls },
                { id: FileConst.xlsx, label: FileConst.xlsx },
                { id: FileConst.xlsm, label: FileConst.xlsm },
                { id: FileConst.et, label: FileConst.et },
            ];
            this.securityLevelItems = [];
            this.uploader.onSuccessItem = this.Import.bind(this);
            this.uploader.onErrorItem = this.ErrorLog.bind(this);
            this.uploader.onAfterAddingFile = this.afterAddFile;
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.import_file = res['import_file'];
                _this.choose_file = res['choose_file'];
                _this.file_type = res['file_type'];
                _this.import_placeholder = res['import_placeholder'];
                _this.download_template = res['download_template'];
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.choose_truefile = res['choose_truefile'];
                _this.download_template_ok = res['download_template_ok'];
                _this.download_template_fail = res['download_template_fail'];
                _this.upload_fail = res['upload_fail'];
                _this.import_success = res['import_success'];
                _this.import_form_success = res['import_form_success'];
                _this.import_fail = res['import_fail'];
                _this.rule_list = res['rule_list'];
                _this.select_xlsx_notify = res['select_xlsx_notify'];
                _this.i18nResource = res;
            }));
        }
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var extendInfo = this.recordRule.extendInfo;
                if (!isNullOrUndefined(extendInfo)) {
                    this.extendInfo = JSON.parse(extendInfo);
                    this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
                    this.closeXLSX = this.extendInfo['closeXLSX'];
                    if (this.closeXLSX === true) {
                        this.fileListItems = [
                            { id: FileConst.xls, label: FileConst.xls },
                            { id: FileConst.xlsm, label: FileConst.xlsm },
                            { id: FileConst.et, label: FileConst.et }
                        ];
                    }
                }
                /** @type {?} */
                var securityLevels = this.recordRule.securityLevels;
                if (!isNullOrEmpty(securityLevels)) {
                    this.enableSecurityLevelSelect = true;
                    securityLevels.forEach(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        /** @type {?} */
                        var level = {
                            value: e.name,
                            label: e.name
                        };
                        _this.securityLevelItems.push(level);
                    }));
                    this.securityLevelName = this.securityLevelItems[0].value;
                }
                this.currentRuleId = this.recordRule.ruleId;
                this.currentRuleName = this.recordRule.ruleName;
                this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
                if (this.valueField === '') {
                    //未在当前可选文件的类型时，不显示选文件类型控件
                    this.showfiletype = false;
                }
                this.currentRuleFileType = this.valueField;
                this.controlFileType();
                if (this.importOption.enableRuntimeCustom === true) {
                    this.enableRuntimeCustom = true;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        ImportDialogComponent.prototype.openSelectRule = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                this.loadingService.show();
                //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
                /** @type {?} */
                var body = {
                    ruleId: this.ruleId,
                    ruleType: 0,
                    voId: this.importOption.voId,
                    methodType: this.methodType,
                    importChildNodeCode: this.importOption.importChildNodeCode,
                    closeXlsx: this.closeXLSX
                };
                this.http.post(url, body).subscribe(( /**
                 * @param {?} RuleMgrs
                 * @return {?}
                 */function (RuleMgrs) {
                    _this.loadingService.clearAll();
                    if (RuleMgrs.length === 0) {
                        _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                        return;
                    }
                    /** @type {?} */
                    var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
                    /** @type {?} */
                    var compRef = compFactory.create(_this.injector);
                    compRef.instance.ruleId = _this.ruleId;
                    compRef.instance.voId = _this.importOption.voId;
                    compRef.instance.ruleType = 0;
                    compRef.instance.RuleMgrsData = RuleMgrs;
                    /** @type {?} */
                    var modalConfig = {
                        title: _this.rule_list,
                        width: 950,
                        height: 500,
                        buttons: compRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                    compRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        dialog.close();
                    }));
                    compRef.instance.okModal.subscribe(( /**
                     * @param {?} RuleMgr
                     * @return {?}
                     */function (RuleMgr) {
                        _this.currentRuleId = RuleMgr.id;
                        _this.currentRuleName = RuleMgr.name;
                        _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                        _this.currentRuleFileType = _this.valueField;
                        _this.controlFileType();
                        dialog.close();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingService.clearAll();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.canDownloadTemplate = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = FileTypeUtil.getFileExtension(this.valueField);
                /** @type {?} */
                var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
                if (canList.findIndex(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) { return t === suffix; })) < 0) {
                    return false;
                }
                return true;
            };
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        // 选择文件后事件
        // 选择文件后事件
        /**
         * @param {?} event
         * @return {?}
         */
        ImportDialogComponent.prototype.selectedFileOnChange =
            // 选择文件后事件
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var str = event.target.value;
                if (str === '') {
                    return;
                }
                /** @type {?} */
                var index = str.lastIndexOf('\\');
                this.fileName = str.substring(index + 1);
                if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
                    this.uploader.queue = [];
                    this.notify.info(this.choose_truefile);
                    return;
                }
                // console.log('队列中的文件' + this.uploader.queue[0]);
            };
        // 关闭窗口
        // 关闭窗口
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.Close =
            // 关闭窗口
            /**
             * @return {?}
             */
            function () {
                this.needDestroy.emit();
            };
        // 选择文件事件
        // 选择文件事件
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.SelectFile =
            // 选择文件事件
            /**
             * @return {?}
             */
            function () {
                this.fileUpload.nativeElement.click();
            };
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.fileTypeValueChange = /**
         * @return {?}
         */
            function () {
                if (this.controlFileType() === '.xlsx') {
                    this.notify.info(this.select_xlsx_notify);
                }
            };
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.controlFileType = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = FileTypeUtil.getFileExtension(this.valueField);
                if (suffix !== null) {
                    this.acceptFileType = suffix;
                }
                else {
                    this.acceptFileType = '*';
                }
                return suffix;
            };
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.clickSetting = /**
         * @return {?}
         */
            function () {
                this.notify.info('设置一下');
            };
        // 下载模板
        // 下载模板
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.DownloadTemplate =
            // 下载模板
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                this.loadingService.show();
                /** @type {?} */
                var suffix = null;
                if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
                    suffix = FileTypeUtil.getFileExtension(this.valueField);
                }
                this.importOption['securityLevelName'] = this.securityLevelName;
                this.dataImportService.DowmloadTemplate(this.currentRuleId, this.frameContext.repository, this.importOption, suffix);
                /** @type {?} */
                var unsubscriber = this.dataImportService.complete.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.loadingService.clearAll();
                    if (data === '') {
                        _this.notify.success(_this.download_template_ok);
                        unsubscriber.unsubscribe();
                    }
                    else {
                        _this.notify.error(_this.download_template_fail + data);
                        unsubscriber.unsubscribe();
                    }
                }));
            };
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.showProgressDialog = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(DataieProgressComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.DataIeProgressParams = this.dataImportService.DataIeProgressParams;
                /** @type {?} */
                var modalConfig = {
                    width: 530,
                    height: 50,
                    title: '',
                    showHeader: false,
                    showMaxButton: false,
                    showMinButton: false,
                    showButtons: false,
                    showCloseButton: false,
                    resizable: false
                };
                return this.modalService.show(compRef, modalConfig);
            };
        // 添加文件后事件
        // 添加文件后事件
        /**
         * @param {?} fileItem
         * @return {?}
         */
        ImportDialogComponent.prototype.afterAddFile =
            // 添加文件后事件
            /**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
            };
        // 开始导入
        // 开始导入
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.Ok =
            // 开始导入
            /**
             * @return {?}
             */
            function () {
                console.log('开始上传！');
                console.log(this.uploader.queue);
                /** @type {?} */
                var loadingConfig = {
                    message: this.i18nResource['import_loading']
                };
                this.loadingService.show(loadingConfig);
                // this.DataIeProgressDialog = this.showProgressDialog();
                /** @type {?} */
                var len = this.uploader.queue.length;
                if (len === 0) {
                    this.notify.info(this.choose_truefile);
                    this.loadingService.clearAll();
                    return;
                }
                /** @type {?} */
                var lastFileItem = this.uploader.queue[len - 1];
                /** @type {?} */
                var maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
                if (lastFileItem.file.size > maxFileSize) {
                    this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
                    this.loadingService.clearAll();
                    return;
                }
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
                /** @type {?} */
                var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var tempUrl = preUrl + "/import/Upload";
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                if (this.importOption['su'] !== null && this.importOption['su'] !== undefined) {
                    su = this.importOption['su'];
                }
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
                /** @type {?} */
                var headers = [{ name: 'su', value: su }];
                if (!isNullOrUndefined(this.extendInfo)) {
                    /** @type {?} */
                    var enableSecurityLevel = ( /** @type {?} */(this.extendInfo['enableSecurityLevel']));
                    if (enableSecurityLevel) {
                        headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                        /** @type {?} */
                        var securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                        /** @type {?} */
                        var securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                        headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                        headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                        headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
                    }
                }
                this.uploader.setOptions({
                    url: fixedUrl,
                    method: 'POST',
                    autoUpload: false,
                    itemAlias: 'uploadedfile',
                    headers: headers
                });
                this.uploader.uploadItem(lastFileItem);
            };
        // 取消事件
        // 取消事件
        /**
         * @return {?}
         */
        ImportDialogComponent.prototype.Cancel =
            // 取消事件
            /**
             * @return {?}
             */
            function () {
                this.needDestroy.emit();
            };
        // 上传失败后方法
        // 上传失败后方法
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        ImportDialogComponent.prototype.ErrorLog =
            // 上传失败后方法
            /**
             * @param {?} item
             * @param {?} response
             * @param {?} status
             * @param {?} headers
             * @return {?}
             */
            function (item, response, status, headers) {
                console.log('上传失败');
                console.log('错误代码：' + status);
                console.log(response);
                console.log(headers);
                this.loadingService.clearAll();
                try {
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    this.msgService.error(this.upload_fail + temRes.message);
                }
                catch (_a) {
                    this.msgService.error(this.upload_fail + response);
                }
                this.Close();
                /** @type {?} */
                var len = this.uploader.queue.length;
                if (len > 0) {
                    this.uploader.queue.splice(0, 1);
                }
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        ImportDialogComponent.prototype.Import = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                /** @type {?} */
                var suffix = null;
                if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
                    suffix = FileTypeUtil.getFileExtension(this.valueField);
                }
                // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 45;
                switch (this.methodType) {
                    case MethodType.CommonImport:
                    case MethodType.CardFormDataImport:
                        this.DataImportById(item, response, status, headers, suffix);
                        break;
                    case MethodType.ImportSubTableDetail:
                        this.ImportSubTable(item, response, status, headers, suffix);
                        break;
                }
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @param {?} suffix
         * @return {?}
         */
        ImportDialogComponent.prototype.ImportSubTable = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @param {?} suffix
         * @return {?}
         */
            function (item, response, status, headers, suffix) {
                var _this = this;
                if (status === 200) {
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    /** @type {?} */
                    var loadingConfig = {
                        message: this.i18nResource['import_loading']
                    };
                    /** @type {?} */
                    var loadingParam = {
                        loadingService: this.loadingService,
                        loadingConfig: loadingConfig
                    };
                    /** @type {?} */
                    var commonParams = new CommonParams();
                    commonParams.methodType = this.methodType;
                    commonParams.ruleId = this.currentRuleId;
                    commonParams.option = this.importOption;
                    commonParams.fileName = temRes['fileName'];
                    commonParams.frameContext = this.frameContext;
                    commonParams.suffix = suffix;
                    commonParams.loadingParam = loadingParam;
                    commonParams.i18nResource = this.i18nResource;
                    commonParams.securityLevelName = this.securityLevelName;
                    this.dataImportService.ImportSubTable(commonParams);
                    /** @type {?} */
                    var subscriber_1 = this.dataImportService.complete.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.loadingService.clearAll();
                        // this.DataIeProgressDialog.close();
                        subscriber_1.unsubscribe();
                        if (data === '') {
                            _this.notify.success(_this.import_success);
                            _this.subject.next(true);
                            _this.subject.complete();
                            _this.needDestroy.emit();
                        }
                        else if (data === '导入表单成功') {
                            _this.notify.success(_this.import_form_success);
                            _this.subject.next(true);
                            _this.subject.complete();
                            _this.needDestroy.emit();
                        }
                        else if (data === '部分数据导入完成') {
                            _this.notify.success(_this.i18nResource['partdata-import-success']);
                            _this.subject.next(true);
                            _this.subject.complete();
                            _this.needDestroy.emit();
                        }
                        else if (data === '校验中止') {
                            _this.notify.info(_this.i18nResource['after_validate_suspend']);
                            _this.needDestroy.emit();
                            _this.subject.next(false);
                            _this.subject.complete();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.dataImportService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.messageShow('info', data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.messageShow('warning', data);
                            }
                            else {
                                _this.messageShow('error', _this.import_fail + data);
                            }
                            _this.needDestroy.emit();
                            _this.subject.next(false);
                            _this.subject.complete();
                        }
                    }));
                }
            };
        // 上传成功后方法
        // 上传成功后方法
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @param {?} suffix
         * @return {?}
         */
        ImportDialogComponent.prototype.DataImportById =
            // 上传成功后方法
            /**
             * @param {?} item
             * @param {?} response
             * @param {?} status
             * @param {?} headers
             * @param {?} suffix
             * @return {?}
             */
            function (item, response, status, headers, suffix) {
                var _this = this;
                console.log(status);
                console.log('上传完成！');
                if (status === 200) {
                    //上传成功后清空上传队列
                    this.uploader.queue = [];
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    console.log('上传成功');
                    console.log(temRes);
                    /** @type {?} */
                    var loadingConfig = {
                        message: this.i18nResource['import_loading']
                    };
                    /** @type {?} */
                    var loadingParam = {
                        loadingService: this.loadingService,
                        loadingConfig: loadingConfig
                    };
                    /** @type {?} */
                    var commonParams = new CommonParams();
                    commonParams.methodType = this.methodType;
                    commonParams.ruleId = this.currentRuleId;
                    commonParams.option = this.importOption;
                    commonParams.fileName = temRes['fileName'];
                    commonParams.repository = this.frameContext.repository;
                    commonParams.suffix = suffix;
                    commonParams.loadingParam = loadingParam;
                    commonParams.i18nResource = this.i18nResource;
                    commonParams.securityLevelName = this.securityLevelName;
                    this.dataImportService.ImportByRuleId(commonParams);
                    /** @type {?} */
                    var unsubscriber_1 = this.dataImportService.complete.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.loadingService.clearAll();
                        // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 100;
                        // this.DataIeProgressDialog.close();
                        if (data === '') {
                            _this.notify.success(_this.import_success);
                            unsubscriber_1.unsubscribe();
                            //导入数据库后刷新界面数据
                            if (_this.importOption.importdbRefresh === true) {
                                if (_this.listDataSer !== null && _this.frameContext !== null) {
                                    /** @type {?} */
                                    var filterConditionList = _this.frameContext.uiState['filterConditionList'];
                                    if (filterConditionList !== undefined && filterConditionList !== null && typeof (filterConditionList) === 'string') {
                                        _this.listDataSer.load(filterConditionList).subscribe(( /**
                                         * @return {?}
                                         */function () {
                                            console.log('导入数据库后带过滤条件重新加载表单数据');
                                        }), ( /**
                                         * @param {?} error
                                         * @return {?}
                                         */function (error) {
                                            console.log('导入数据库后带过滤条件重新加载表单数据异常');
                                        }));
                                    }
                                    else {
                                        _this.listDataSer.load().subscribe(( /**
                                         * @return {?}
                                         */function () {
                                            console.log('导入数据库后重新加载表单数据');
                                        }), ( /**
                                         * @param {?} error
                                         * @return {?}
                                         */function (error) {
                                            console.log('导入数据库后重新加载表单数据异常');
                                        }));
                                    }
                                }
                            }
                            _this.needDestroy.emit();
                            _this.subject.next(true);
                            _this.subject.complete();
                        }
                        else if (data === '导入表单成功') {
                            _this.notify.success(_this.import_form_success);
                            unsubscriber_1.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(true);
                            _this.subject.complete();
                        }
                        else if (data === '部分数据导入完成') {
                            _this.notify.success(_this.i18nResource['partdata-import-success']);
                            unsubscriber_1.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(true);
                            _this.subject.complete();
                        }
                        else if (data === '校验中止') {
                            _this.notify.info(_this.i18nResource['after_validate_suspend']);
                            unsubscriber_1.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(false);
                            _this.subject.complete();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.dataImportService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.messageShow('info', data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.messageShow('warning', data);
                            }
                            else {
                                _this.messageShow('error', _this.import_fail + data);
                            }
                            unsubscriber_1.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(false);
                            _this.subject.complete();
                        }
                    }));
                }
            };
        /**
         * @param {?} type
         * @param {?} message
         * @return {?}
         */
        ImportDialogComponent.prototype.messageShow = /**
         * @param {?} type
         * @param {?} message
         * @return {?}
         */
            function (type, message) {
                if (this.msgService) {
                    if (type === 'info') {
                        this.msgService.info(message);
                    }
                    else if (type === 'warning') {
                        this.msgService.warning(message);
                    }
                    else {
                        this.msgService.error(message);
                    }
                }
                else {
                    if (type === 'info') {
                        this.notify.info(message);
                    }
                    else if (type === 'warning') {
                        this.notify.warning(message);
                    }
                    else {
                        this.notify.error(message);
                    }
                }
            };
        ImportDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-import-dialog',
                        template: "<!-- <div class=\"container\">\r\n    <div region=\"south\" class=\"south mgleft\">\r\n        <table>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n                <td>\r\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\r\n                </td>\r\n                <td>\r\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\r\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n                    </input-group>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule === false\">\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectfiletype\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\r\n                </td>\r\n                <td>\r\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\r\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_upload\">{{import_file}}</label>\r\n                </td>\r\n                <td>\r\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n                        (change)=\"selectedFileOnChange($event)\" />\r\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div> -->\r\n\r\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\r\n  <div class=\"col-12\" style=\"margin-top: 67px\">\r\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{rule_list}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\r\n                       [enableClear]=\"false\"\r\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n          </input-group>\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{file_type}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\r\n                             [textField]=\"'label'\"\r\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\r\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n        </div>\r\n        <span>&nbsp;</span>\r\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\r\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\r\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\r\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\r\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\r\n\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{import_file}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\r\n                 [accept]=\"acceptFileType\"\r\n                 (change)=\"selectedFileOnChange($event)\"/>\r\n          <div class=\"input-group\">\r\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                   [(ngModel)]=\"fileName\"\r\n                   [placeholder]=\"import_placeholder\">\r\n            <span class=\"input-group-btn\">\r\n                            <button class=\"btn btn-primary\" type=\"button\"\r\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\r\n                        </span>\r\n          </div>\r\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\r\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n    </div>\r\n\r\n\r\n  </div>\r\n</form>\r\n\r\n\r\n<ng-template #selectFooter>\r\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\r\n\r\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>\r\n",
                        providers: [i1$1.NotifyService, DataImportService
                        ],
                        styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
                    }] }
        ];
        /** @nocollapse */
        ImportDialogComponent.ctorParameters = function () {
            return [
                { type: DataImportService },
                { type: i1$1.NotifyService },
                { type: i3.LoadingService },
                { type: i5.HttpClient },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: commandServices.ListDataService },
                { type: uiMessager.MessagerService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        ImportDialogComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            ruleId: [{ type: i0.Input }],
            importOption: [{ type: i0.Input }],
            frameContext: [{ type: i0.Input }],
            methodType: [{ type: i0.Input }],
            subject: [{ type: i0.Input }],
            fileUpload: [{ type: i0.ViewChild, args: ['fileUpload',] }],
            needDestroy: [{ type: i0.Output }]
        };
        return ImportDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataExportService = /** @class */ (function () {
        function DataExportService(operateService, notify, http, loadingService) {
            var _this = this;
            this.operateService = operateService;
            this.notify = notify;
            this.http = http;
            this.loadingService = loadingService;
            this.origin = window.location.origin;
            this.export = new i0.EventEmitter();
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.i18nResource = res;
            }));
        }
        /**
         * 数据导出服务
         */
        /**
         * 数据导出服务
         * @param {?} repository
         * @param {?} exportParam
         * @param {?} option
         * @return {?}
         */
        DataExportService.prototype.Export = /**
         * 数据导出服务
         * @param {?} repository
         * @param {?} exportParam
         * @param {?} option
         * @return {?}
         */
            function (repository, exportParam, option) {
                var _this = this;
                this.StartLoading();
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(repository);
                /** @type {?} */
                var subject = befRestService.request(befRestService.baseUri + "/service/dataexportvmaction", 'put', null, exportParam);
                subject.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var exportResult = ( /** @type {?} */(data.returnValue));
                    if (isNullOrUndefined(exportResult)) {
                        exportResult = ( /** @type {?} */(data));
                    }
                    if (exportResult.succeed === true) {
                        /** @type {?} */
                        var fileName = '';
                        if (option === '' || option['customfilename'] === '' || option['customfilename'] === undefined) {
                            fileName = exportResult.fileName;
                        }
                        else {
                            /** @type {?} */
                            var suffixIndex = exportResult.fileName.lastIndexOf('.');
                            /** @type {?} */
                            var suffix = exportResult.fileName.substring(suffixIndex);
                            if (!DataIEUtils.JudgeIllegalChar(option['customfilename'])) {
                                fileName = option['customfilename'] + suffix;
                            }
                            else {
                                fileName = exportResult.fileName;
                            }
                        }
                        /** @type {?} */
                        var preurl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                        _this.operateService.DownloadFile(exportResult.docRelativePath, fileName, preurl, option);
                        /** @type {?} */
                        var subscriber_1 = _this.operateService.downloadComplete.subscribe(( /**
                         * @param {?} result
                         * @return {?}
                         */function (result) {
                            _this.CloseLoading();
                            if (result === '') {
                                _this.export.emit('');
                                subscriber_1.unsubscribe();
                            }
                            else {
                                _this.export.emit(result);
                                subscriber_1.unsubscribe();
                            }
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            _this.CloseLoading();
                            _this.notify.error(error.message);
                        }));
                    }
                    else {
                        _this.CloseLoading();
                        _this.errorlevel = exportResult.errorLevel;
                        _this.export.emit(exportResult.message);
                        // this.notify.error('数据导出失败！\n 失败原因：' + exportResult.message);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.CloseLoading();
                    _this.notify.error(error.error.Message);
                }));
            };
        /**
         * 打包导出
         * @param repository
         * @param optionJson
         */
        /**
         * 打包导出
         * @param {?} repository
         * @param {?} optionJson
         * @return {?}
         */
        DataExportService.prototype.ExportByPackage = /**
         * 打包导出
         * @param {?} repository
         * @param {?} optionJson
         * @return {?}
         */
            function (repository, optionJson) {
                /** @type {?} */
                var packitems = optionJson.package.packitems;
                if (packitems === undefined || packitems === null || packitems.length === 0) {
                    this.notify.error('请传入需要打包导出的规则信息');
                    return;
                }
                this.StartLoading();
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(repository);
                /** @type {?} */
                var relativePaths = [];
                /** @type {?} */
                var itemsFileName = [];
                this.ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson);
            };
        /**
         * @param {?} packitems
         * @param {?} befRestService
         * @param {?} relativePaths
         * @param {?} itemsFileName
         * @param {?} optionJson
         * @return {?}
         */
        DataExportService.prototype.ExecuteMutiRequest = /**
         * @param {?} packitems
         * @param {?} befRestService
         * @param {?} relativePaths
         * @param {?} itemsFileName
         * @param {?} optionJson
         * @return {?}
         */
            function (packitems, befRestService, relativePaths, itemsFileName, optionJson) {
                var _this = this;
                if (packitems.length <= 0) {
                    return;
                }
                /** @type {?} */
                var item = packitems.pop();
                /** @type {?} */
                var customfilename = '';
                /** @type {?} */
                var ruleId = item['ruleid'];
                if (ruleId === undefined || ruleId === '') {
                    this.notify.error('请传入需要打包导出的规则id');
                    this.CloseLoading();
                    return;
                }
                /** @type {?} */
                var globalVar = '';
                if (item['globalParam'] !== null && item['globalParam'] !== undefined) {
                    if (typeof (item['globalParam']) === 'object') {
                        globalVar = JSON.stringify(item['globalParam']);
                    }
                    else {
                        globalVar = item['globalParam'];
                    }
                }
                /** @type {?} */
                var itemfilename = item['itemfilename'];
                if (itemfilename !== null && itemfilename !== undefined) {
                    itemsFileName.push(itemfilename);
                }
                /** @type {?} */
                var funcId = getQueryString('funcId');
                /** @type {?} */
                var exportParam = null;
                /** @type {?} */
                var filter = item['filter'];
                if (filter !== undefined && filter !== null && JSON.stringify(filter) !== '{}') {
                    exportParam = {
                        body: {
                            exportContext: {
                                RuleId: ruleId,
                                Filter: filter,
                                GlobalParam: globalVar,
                                funcId: funcId
                            }
                        }
                    };
                }
                else {
                    exportParam = {
                        body: {
                            exportContext: {
                                RuleId: ruleId,
                                GlobalParam: globalVar,
                                funcId: funcId
                            }
                        }
                    };
                }
                /** @type {?} */
                var subject = befRestService.request(befRestService.baseUri + "/service/dataexportvmaction", 'put', null, exportParam);
                subject.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var exportResult;
                    if (isNullOrUndefined(data.returnValue)) {
                        exportResult = ( /** @type {?} */(data));
                    }
                    else {
                        exportResult = ( /** @type {?} */(data.returnValue));
                    }
                    if (exportResult.succeed === true) {
                        relativePaths.push(exportResult.docRelativePath);
                        customfilename = exportResult.fileName.split('.')[0];
                        console.log('导出执行完毕，relativePath：' + JSON.stringify(exportResult.relativePath));
                        if (packitems.length === 0) {
                            /** @type {?} */
                            var preurl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                            if (optionJson.package.customfilename !== undefined && optionJson.package.customfilename !== '') {
                                customfilename = optionJson.package.customfilename;
                            }
                            /** @type {?} */
                            var packtype = 'zip';
                            if (optionJson.package.packtype !== undefined) {
                                packtype = optionJson.package.packtype;
                            }
                            if (itemsFileName.length === 0) {
                                itemsFileName = null;
                            }
                            _this.operateService.DownloadPackageFile(relativePaths, itemsFileName, customfilename, preurl, packtype);
                            /** @type {?} */
                            var subscriber_2 = _this.operateService.downloadComplete.subscribe(( /**
                             * @param {?} result
                             * @return {?}
                             */function (result) {
                                _this.CloseLoading();
                                if (result === '') {
                                    _this.export.emit('');
                                    subscriber_2.unsubscribe();
                                }
                                else {
                                    _this.export.emit(result);
                                    subscriber_2.unsubscribe();
                                }
                            }));
                        }
                        else {
                            _this.ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson);
                        }
                    }
                    else {
                        _this.CloseLoading();
                        _this.errorlevel = exportResult.errorLevel;
                        _this.export.emit(exportResult.message);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.CloseLoading();
                    _this.notify.error(error.error.Message);
                }));
            };
        /**
         * 手工表单导出
         * @param exportParam
         * @param option
         */
        /**
         * 手工表单导出
         * @param {?} exportParam
         * @param {?} option
         * @return {?}
         */
        DataExportService.prototype.Export4HandCraft = /**
         * 手工表单导出
         * @param {?} exportParam
         * @param {?} option
         * @return {?}
         */
            function (exportParam, option) {
                var _this = this;
                this.StartLoading();
                /** @type {?} */
                var su = option.su;
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/dataexportvmaction';
                this.http.put(fixedUrl, exportParam, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    responseType: 'blob',
                    observe: 'response',
                    params: { su: su }
                }).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.CloseLoading();
                    console.log(res);
                    /** @type {?} */
                    var data = res.body;
                    if (data.type == 'application/json') {
                        /** @type {?} */
                        var reader_1 = new FileReader();
                        reader_1.onload = ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            /** @type {?} */
                            var dataIeResult = ( /** @type {?} */(JSON.parse(( /** @type {?} */(reader_1.result)))));
                            if (!dataIeResult.succeed) {
                                _this.errorlevel = dataIeResult.errorLevel;
                                _this.export.emit(dataIeResult.message);
                            }
                        });
                        reader_1.readAsText(data, 'utf-8');
                    }
                    else {
                        /** @type {?} */
                        var fileName = '';
                        /** @type {?} */
                        var contentDisposition = res.headers.get("content-disposition");
                        if (contentDisposition) {
                            // 正则获取filename的值
                            /** @type {?} */
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            /** @type {?} */
                            var matches = filenameRegex.exec(contentDisposition);
                            if (matches != null && matches[1]) {
                                fileName = matches[1].replace(/['"]/g, '');
                            }
                            // 通过 URLEncoder.encode(pFileName, StandardCharsets.UTF_8.name()) 加密编码的, 使用decodeURI(fileName) 解密
                            fileName = decodeURI(fileName);
                            // 通过 new String(pFileName.getBytes(), StandardCharsets.ISO_8859_1) 加密编码的, 使用decodeURI(escape(fileName)) 解密
                            // fileName = decodeURI(escape(fileName))
                        }
                        if (!isNullOrUndefined(option.customfilename)) {
                            /** @type {?} */
                            var suffixIndex = fileName.lastIndexOf('.');
                            /** @type {?} */
                            var suffix = fileName.substring(suffixIndex);
                            fileName = option.customfilename + suffix;
                        }
                        /** @type {?} */
                        var blob = new Blob([data]);
                        if (!data || data.size == 0) {
                            _this.export.emit('返回的数据为空');
                        }
                        else {
                            if (navigator.msSaveOrOpenBlob) {
                                navigator.msSaveOrOpenBlob(blob, fileName);
                            }
                            else {
                                /** @type {?} */
                                var link = document.createElement('a');
                                link.setAttribute('href', window.URL.createObjectURL(blob));
                                // 设置下载的文件名
                                link.setAttribute('download', fileName);
                                link.style.visibility = 'hidden';
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                            }
                            _this.export.emit('');
                        }
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.CloseLoading();
                    _this.notify.error(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        DataExportService.prototype.StartLoading = /**
         * @return {?}
         */
            function () {
                if (this.loadingService !== undefined && this.loadingService !== null) {
                    this.loadingService.show();
                }
            };
        /**
         * @return {?}
         */
        DataExportService.prototype.CloseLoading = /**
         * @return {?}
         */
            function () {
                if (this.loadingService !== undefined && this.loadingService !== null) {
                    this.loadingService.clearAll();
                }
            };
        /**
         * @param {?} ruleId
         * @param {?} frameContext
         * @param {?} pageIndex
         * @param {?} pageSize
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
        DataExportService.prototype.ExportCurrentData = /**
         * @param {?} ruleId
         * @param {?} frameContext
         * @param {?} pageIndex
         * @param {?} pageSize
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
            function (ruleId, frameContext, pageIndex, pageSize, option, suffix) {
                /** @type {?} */
                var exportParam = null;
                /** @type {?} */
                var model = '';
                if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
                    model = JSON.stringify(option.Models[0]);
                }
                /** @type {?} */
                var globalVar = '';
                if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
                    if (typeof (option['globalParam']) === 'object') {
                        globalVar = JSON.stringify(option['globalParam']);
                    }
                    else {
                        globalVar = option['globalParam'];
                    }
                }
                if (suffix === null || suffix === undefined) {
                    suffix = '';
                }
                /** @type {?} */
                var funcId = getQueryString('funcId');
                /** @type {?} */
                var filterParem = option['filter'];
                /** @type {?} */
                var newFilters = [];
                /** @type {?} */
                var selectFilterGridComponent = option['selectFilterGridComponent'];
                if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
                    /** @type {?} */
                    var ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
                    if (!isNullOrUndefined(ids) && ids.length > 0) {
                        /** @type {?} */
                        var idsStr = '';
                        for (var i = 0; i < ids.length; i++) {
                            /** @type {?} */
                            var id = ids[i];
                            if (i === ids.length - 1) {
                                idsStr += id;
                            }
                            else {
                                idsStr += id + '\r\n';
                            }
                        }
                        /** @type {?} */
                        var selectIdFilterCondition = {
                            FilterField: "ID",
                            Compare: 14,
                            Value: idsStr,
                            Relation: 1,
                            Expresstype: 0
                        };
                        newFilters.push(selectIdFilterCondition);
                    }
                    else {
                        this.notify.info(this.i18nResource['select_data_export']);
                        return;
                    }
                }
                /** @type {?} */
                var filterConditionList = frameContext.uiState['filterConditionList'];
                if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                    /** @type {?} */
                    var filterConditionListJson = void 0;
                    if (typeof (filterConditionList) === 'string') {
                        filterConditionListJson = JSON.parse(filterConditionList);
                    }
                    else {
                        filterConditionListJson = filterConditionList;
                    }
                    for (var index = 0; index < filterConditionListJson.length; index++) {
                        /** @type {?} */
                        var element = filterConditionListJson[index];
                        /** @type {?} */
                        var value = decodeURIComponent(element.Value);
                        element.Value = value;
                        newFilters.push(element);
                    }
                }
                if (newFilters.length > 0) {
                    if (!isNullOrUndefined(filterParem) && filterParem.FilterConditions !== null) {
                        filterParem.FilterConditions = newFilters.concat(filterParem.FilterConditions);
                    }
                    else {
                        if (isNullOrUndefined(filterParem)) {
                            filterParem = {};
                        }
                        filterParem['FilterConditions'] = newFilters;
                    }
                }
                if (isNullOrUndefined(filterParem)) {
                    exportParam = {
                        body: {
                            exportContext: {
                                RuleId: ruleId,
                                Suffix: suffix,
                                PaginationInfo: {
                                    PageIndex: pageIndex,
                                    PageSize: pageSize
                                },
                                Model: model,
                                GlobalParam: globalVar,
                                funcId: funcId
                            }
                        }
                    };
                }
                else {
                    //确保最后一个关系为空
                    if (!isNullOrUndefined(filterParem.FilterConditions) && filterParem.FilterConditions.length > 0) {
                        filterParem.FilterConditions[filterParem.FilterConditions.length - 1].Relation = 0;
                    }
                    exportParam = {
                        body: {
                            exportContext: {
                                RuleId: ruleId,
                                Filter: filterParem,
                                Suffix: suffix,
                                PaginationInfo: {
                                    PageIndex: pageIndex,
                                    PageSize: pageSize
                                },
                                Model: model,
                                GlobalParam: globalVar,
                                funcId: funcId
                            }
                        }
                    };
                }
                this.Export(frameContext.repository, exportParam, option);
            };
        /**
         * @param {?} ruleId
         * @param {?} frameContext
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
        DataExportService.prototype.ExportById = /**
         * @param {?} ruleId
         * @param {?} frameContext
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
            function (ruleId, frameContext, option, suffix) {
                /** @type {?} */
                var exportParam = null;
                /** @type {?} */
                var model = '';
                if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
                    model = JSON.stringify(option.Models[0]);
                }
                /** @type {?} */
                var globalVar = '';
                if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
                    if (typeof (option['globalParam']) === 'object') {
                        globalVar = JSON.stringify(option['globalParam']);
                    }
                    else {
                        globalVar = option['globalParam'];
                    }
                }
                if (suffix === null || suffix === undefined) {
                    suffix = '';
                }
                /** @type {?} */
                var funcId = getQueryString('funcId');
                /** @type {?} */
                var filterParam = option['filter'];
                /** @type {?} */
                var newFilters = [];
                /** @type {?} */
                var selectFilterGridComponent = option['selectFilterGridComponent'];
                if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
                    /** @type {?} */
                    var ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
                    if (!isNullOrUndefined(ids) && ids.length > 0) {
                        /** @type {?} */
                        var idsStr = '';
                        for (var i = 0; i < ids.length; i++) {
                            /** @type {?} */
                            var id = ids[i];
                            if (i === ids.length - 1) {
                                idsStr += id;
                            }
                            else {
                                idsStr += id + '\r\n';
                            }
                        }
                        /** @type {?} */
                        var selectIdFilterCondition = {
                            FilterField: "ID",
                            Compare: 14,
                            Value: idsStr,
                            Relation: 1,
                            Expresstype: 0
                        };
                        newFilters.push(selectIdFilterCondition);
                    }
                    else {
                        this.notify.info(this.i18nResource['select_data_export']);
                        return;
                    }
                }
                if (option['enableScreeningScheme'] === true) {
                    /** @type {?} */
                    var filterConditionList = frameContext.uiState['filterConditionList'];
                    if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                        /** @type {?} */
                        var filterConditionListJson = void 0;
                        if (typeof (filterConditionList) === 'string') {
                            filterConditionListJson = JSON.parse(filterConditionList);
                        }
                        else {
                            filterConditionListJson = filterConditionList;
                        }
                        for (var index = 0; index < filterConditionListJson.length; index++) {
                            /** @type {?} */
                            var element = filterConditionListJson[index];
                            /** @type {?} */
                            var value = decodeURIComponent(element.Value);
                            // if (typeof (value) === 'string' && value.includes('\r\n')) {
                            //     element.Value = value.replace('\r\n', '\\r\\n');
                            // } else {
                            // }
                            element.Value = value;
                            newFilters.push(element);
                        }
                    }
                }
                if (newFilters.length > 0) {
                    if (!isNullOrUndefined(filterParam) && filterParam.FilterConditions !== null) {
                        filterParam.FilterConditions = newFilters.concat(filterParam.FilterConditions);
                    }
                    else {
                        if (isNullOrUndefined(filterParam)) {
                            filterParam = {};
                        }
                        filterParam['FilterConditions'] = newFilters;
                    }
                }
                if (isNullOrUndefined(filterParam)) {
                    exportParam = {
                        body: {
                            exportContext: {
                                RuleId: ruleId,
                                Suffix: suffix,
                                Model: model,
                                GlobalParam: globalVar,
                                funcId: funcId
                            }
                        }
                    };
                }
                else {
                    //确保最后一个关系为空
                    if (!isNullOrUndefined(filterParam.FilterConditions) && filterParam.FilterConditions.length > 0) {
                        filterParam.FilterConditions[filterParam.FilterConditions.length - 1].Relation = 0;
                    }
                    exportParam = {
                        body: {
                            exportContext: {
                                RuleId: ruleId,
                                Filter: filterParam,
                                Suffix: suffix,
                                Model: model,
                                GlobalParam: globalVar,
                                funcId: funcId
                            }
                        }
                    };
                }
                this.Export(frameContext.repository, exportParam, option);
            };
        /**
         * @param {?} ruleId
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
        DataExportService.prototype.ExportById4HandCraft = /**
         * @param {?} ruleId
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
            function (ruleId, option, suffix) {
                /** @type {?} */
                var globalVar = '';
                if (!isNullOrUndefined(option['globalParam'])) {
                    if (typeof (option['globalParam']) === 'object') {
                        globalVar = JSON.stringify(option['globalParam']);
                    }
                    else {
                        globalVar = option['globalParam'];
                    }
                }
                if (isNullOrUndefined(suffix)) {
                    suffix = '';
                }
                /** @type {?} */
                var funcId = '';
                if (!isNullOrUndefined(option.funcId)) {
                    funcId = option.funcId;
                }
                /** @type {?} */
                var exportParam = {
                    ruleId: ruleId,
                    filter: option['filter'],
                    suffix: suffix,
                    globalParam: globalVar,
                    funcId: funcId
                };
                this.Export4HandCraft(exportParam, option);
            };
        /**
         * @param {?} ruleId
         * @param {?} frameContext
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
        DataExportService.prototype.ExportCurrentChildData = /**
         * @param {?} ruleId
         * @param {?} frameContext
         * @param {?} option
         * @param {?=} suffix
         * @return {?}
         */
            function (ruleId, frameContext, option, suffix) {
                /** @type {?} */
                var exportParam = null;
                /** @type {?} */
                var globalVar = '';
                if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
                    if (typeof (option['globalParam']) === 'object') {
                        globalVar = JSON.stringify(option['globalParam']);
                    }
                    else {
                        globalVar = option['globalParam'];
                    }
                }
                if (suffix === null || suffix === undefined) {
                    suffix = '';
                }
                /** @type {?} */
                var funcId = getQueryString('funcId');
                exportParam = {
                    body: {
                        exportContext: {
                            RuleId: ruleId,
                            Suffix: suffix,
                            MainObjId: frameContext.bindingData.list.currentId,
                            GlobalParam: globalVar,
                            funcId: funcId
                        }
                    }
                };
                this.Export(frameContext.repository, exportParam, option);
            };
        DataExportService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        DataExportService.ctorParameters = function () {
            return [
                { type: FileOperateService },
                { type: i1$1.NotifyService },
                { type: i5.HttpClient },
                { type: i3.LoadingService }
            ];
        };
        DataExportService.propDecorators = {
            export: [{ type: i0.Output }]
        };
        return DataExportService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomDataIEService = /** @class */ (function () {
        function CustomDataIEService(notify, operateService, loadingService, importService, http) {
            var _this = this;
            this.notify = notify;
            this.operateService = operateService;
            this.loadingService = loadingService;
            this.importService = importService;
            this.http = http;
            this.origin = window.location.origin;
            this.customExportUrl = this.origin + '/api/runtime/dip/v1.0/customexport';
            this.customImportUrl = this.origin + '/api/runtime/dip/v1.0/customimport';
            this.export = new i0.EventEmitter();
            this.complete = new i0.EventEmitter();
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.i18nResource = res;
            }));
        }
        /**
         * @param {?} model
         * @param {?} components
         * @param {?} frameContext
         * @param {?} suffix
         * @param {?} isImportForm
         * @param {?} i18nId
         * @param {?} dimension
         * @return {?}
         */
        CustomDataIEService.prototype.SaveCustomImportRule = /**
         * @param {?} model
         * @param {?} components
         * @param {?} frameContext
         * @param {?} suffix
         * @param {?} isImportForm
         * @param {?} i18nId
         * @param {?} dimension
         * @return {?}
         */
            function (model, components, frameContext, suffix, isImportForm, i18nId, dimension) {
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
                /** @type {?} */
                var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var importParam = null;
                if (isNullOrUndefined(dimension)) {
                    importParam = {
                        body: {
                            dataExchangeModel: JSON.stringify(model),
                            components: components,
                            suffix: suffix,
                            keys: ['DataImport', model['MainObject']['Source']['SourceMetadataID']],
                            importForm: isImportForm,
                            su: su,
                            i18nId: i18nId
                        }
                    };
                }
                else {
                    importParam = {
                        body: {
                            dataExchangeModel: JSON.stringify(model),
                            components: components,
                            suffix: suffix,
                            keys: ['DataImport', model['MainObject']['Source']['SourceMetadataID'], dimension],
                            importForm: isImportForm,
                            su: su,
                            i18nId: i18nId
                        }
                    };
                }
                /** @type {?} */
                var subject;
                if (!isNullOrUndefined(this.http)) {
                    subject = this.http.post(this.customImportUrl + "/AddImportRule", importParam.body, { params: { su: su } });
                }
                else {
                    subject = befRestService.request(this.customImportUrl + "/AddImportRule", 'post', { su: su }, importParam);
                }
                return subject;
            };
        /**
         * @param {?} model
         * @param {?} components
         * @param {?} frameContext
         * @param {?} suffix
         * @param {?} i18nId
         * @param {?} dimension
         * @return {?}
         */
        CustomDataIEService.prototype.SaveCustomExportRule = /**
         * @param {?} model
         * @param {?} components
         * @param {?} frameContext
         * @param {?} suffix
         * @param {?} i18nId
         * @param {?} dimension
         * @return {?}
         */
            function (model, components, frameContext, suffix, i18nId, dimension) {
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
                /** @type {?} */
                var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var exportParam = null;
                if (isNullOrUndefined(dimension)) {
                    exportParam = {
                        body: {
                            dataExchangeModel: JSON.stringify(model),
                            components: components,
                            suffix: suffix,
                            keys: ['DataExport', model['MainObject']['Source']['SourceMetadataID']],
                            su: su,
                            i18nId: i18nId
                        }
                    };
                }
                else {
                    exportParam = {
                        body: {
                            dataExchangeModel: JSON.stringify(model),
                            components: components,
                            suffix: suffix,
                            keys: ['DataExport', model['MainObject']['Source']['SourceMetadataID'], dimension],
                            su: su,
                            i18nId: i18nId
                        }
                    };
                }
                /** @type {?} */
                var subject;
                if (!isNullOrUndefined(this.http)) {
                    subject = this.http.post(this.customExportUrl + "/AddExportRule", exportParam.body, { params: { su: su } });
                }
                else {
                    subject = befRestService.request(this.customExportUrl + "/AddExportRule", 'post', { su: su }, exportParam);
                }
                return subject;
            };
        // 下载模板
        // 下载模板
        /**
         * @param {?} model
         * @param {?} frameContext
         * @param {?} importOption
         * @return {?}
         */
        CustomDataIEService.prototype.DowmloadTemplate =
            // 下载模板
            /**
             * @param {?} model
             * @param {?} frameContext
             * @param {?} importOption
             * @return {?}
             */
            function (model, frameContext, importOption) {
                var _this = this;
                /** @type {?} */
                var keys = ['DataImport', model['MainObject']['Source']['SourceMetadataID'], importOption.dimension];
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
                /** @type {?} */
                var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var templateParam = {
                    body: {
                        keys: keys,
                        su: su
                    }
                };
                /** @type {?} */
                var subject = befRestService.request(this.customImportUrl + "/TemplateDownload", 'post', { su: su }, templateParam);
                subject.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data['success'] === true) {
                        /** @type {?} */
                        var filename = data['fileName'];
                        if (importOption !== null && importOption['templatefilename'] !== null && importOption['templatefilename'] !== undefined) {
                            /** @type {?} */
                            var suffixIndex = filename.lastIndexOf('.');
                            /** @type {?} */
                            var suffix = filename.substring(suffixIndex);
                            filename = importOption['templatefilename'] + suffix;
                        }
                        /** @type {?} */
                        var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                        _this.operateService.DownloadFile(data['relativePath'], filename, preUrl, importOption);
                        /** @type {?} */
                        var subscription_1 = _this.operateService.downloadComplete.subscribe(( /**
                         * @param {?} result
                         * @return {?}
                         */function (result) {
                            if (result === '') {
                                _this.complete.emit('');
                                subscription_1.unsubscribe();
                            }
                            else {
                                _this.complete.emit(result);
                                subscription_1.unsubscribe();
                            }
                        }));
                    }
                    else {
                        _this.complete.emit(data['message']);
                    }
                }));
            };
        /**
         * @param {?} keys
         * @param {?} repository
         * @param {?} i18nId
         * @param {?} model
         * @return {?}
         */
        CustomDataIEService.prototype.GetImportRuleModel = /**
         * @param {?} keys
         * @param {?} repository
         * @param {?} i18nId
         * @param {?} model
         * @return {?}
         */
            function (keys, repository, i18nId, model) {
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(repository);
                /** @type {?} */
                var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var params = {
                    body: {
                        keys: keys,
                        su: su,
                        i18nId: i18nId,
                        needI18nModel: JSON.stringify(model)
                    }
                };
                /** @type {?} */
                var subject;
                if (!isNullOrUndefined(this.http)) {
                    subject = this.http.post(this.customImportUrl + "/GetImportModel", params.body, { params: { su: su } });
                }
                else {
                    subject = befRestService.request(this.customImportUrl + "/GetImportModel", 'post', { su: su }, params);
                }
                return subject;
            };
        /**
         * @param {?} keys
         * @param {?} repository
         * @param {?} i18nId
         * @param {?} model
         * @return {?}
         */
        CustomDataIEService.prototype.GetExportRuleModel = /**
         * @param {?} keys
         * @param {?} repository
         * @param {?} i18nId
         * @param {?} model
         * @return {?}
         */
            function (keys, repository, i18nId, model) {
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(repository);
                /** @type {?} */
                var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var params = {
                    body: {
                        keys: keys,
                        su: su,
                        i18nId: i18nId,
                        needI18nModel: JSON.stringify(model)
                    }
                };
                /** @type {?} */
                var subject;
                if (!isNullOrUndefined(this.http)) {
                    subject = this.http.post(this.customExportUrl + "/GetExportModel", params.body, { params: { su: su } });
                }
                else {
                    subject = befRestService.request(this.customExportUrl + "/GetExportModel", 'post', { su: su }, params);
                }
                return subject;
            };
        /**
         * @param {?} commonParams
         * @return {?}
         */
        CustomDataIEService.prototype.ImportByRule = /**
         * @param {?} commonParams
         * @return {?}
         */
            function (commonParams) {
                /** @type {?} */
                var repository = commonParams.repository;
                /** @type {?} */
                var option = commonParams.option;
                /** @type {?} */
                var keys = commonParams.keys;
                /** @type {?} */
                var fileName = commonParams.fileName;
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(repository);
                /** @type {?} */
                var globalVar = '';
                if (option !== null && option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
                    globalVar = JSON.stringify(option['GlobalParam']);
                }
                /** @type {?} */
                var funcId = getQueryString('funcId');
                /** @type {?} */
                var importParam = {
                    body: {
                        dataImportContext: {
                            Keys: keys,
                            FileName: fileName,
                            GlobalParam: globalVar,
                            funcId: funcId
                        }
                    }
                };
                commonParams.befRestService = befRestService;
                commonParams.importParam = importParam;
                commonParams.mainObjId = '';
                this.importService.Import(commonParams);
            };
        /**
         * @param {?} commonParams
         * @return {?}
         */
        CustomDataIEService.prototype.ImportSubTableByRule = /**
         * @param {?} commonParams
         * @return {?}
         */
            function (commonParams) {
                /** @type {?} */
                var repository = commonParams.repository;
                /** @type {?} */
                var option = commonParams.option;
                /** @type {?} */
                var keys = commonParams.keys;
                /** @type {?} */
                var fileName = commonParams.fileName;
                /** @type {?} */
                var frameContext = commonParams.frameContext;
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(repository);
                /** @type {?} */
                var globalVar = '';
                if (option !== null && option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
                    globalVar = JSON.stringify(option['GlobalParam']);
                }
                if (frameContext.bindingData.list.currentId === '' || frameContext.bindingData.list.currentId === null) {
                    this.notify.info(this.i18nResource['master_table_noid']);
                    return false;
                }
                else {
                    /** @type {?} */
                    var funcId = getQueryString('funcId');
                    /** @type {?} */
                    var importParam = {
                        body: {
                            dataImportContext: {
                                Keys: keys,
                                FileName: fileName,
                                MainObjId: frameContext.bindingData.list.currentId,
                                GlobalParam: globalVar,
                                funcId: funcId
                            },
                            requestInfo: befRestService.buildRequestInfo()
                        }
                    };
                    commonParams.befRestService = befRestService;
                    commonParams.importParam = importParam;
                    commonParams.mainObjId = frameContext.bindingData.list.currentId;
                    this.importService.Import(commonParams);
                }
            };
        /**
         * @param {?} keys
         * @param {?} filter
         * @param {?} option
         * @param {?} frameContext
         * @return {?}
         */
        CustomDataIEService.prototype.ExportByRule = /**
         * @param {?} keys
         * @param {?} filter
         * @param {?} option
         * @param {?} frameContext
         * @return {?}
         */
            function (keys, filter, option, frameContext) {
                var _this = this;
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
                /** @type {?} */
                var funcId = getQueryString('funcId');
                /** @type {?} */
                var newFilters = [];
                /** @type {?} */
                var selectFilterGridComponent = option['selectFilterGridComponent'];
                if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
                    /** @type {?} */
                    var ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
                    if (!isNullOrUndefined(ids) && ids.length > 0) {
                        /** @type {?} */
                        var idsStr = '';
                        for (var i = 0; i < ids.length; i++) {
                            /** @type {?} */
                            var id = ids[i];
                            if (i === ids.length - 1) {
                                idsStr += id;
                            }
                            else {
                                idsStr += id + '\r\n';
                            }
                        }
                        /** @type {?} */
                        var selectIdFilterCondition = {
                            FilterField: "ID",
                            Compare: 14,
                            Value: idsStr,
                            Relation: 1,
                            Expresstype: 0
                        };
                        newFilters.push(selectIdFilterCondition);
                    }
                    else {
                        this.notify.info(this.i18nResource['select-data-export']);
                        return;
                    }
                }
                if (option['enableScreeningScheme'] === true) {
                    /** @type {?} */
                    var filterConditionList = frameContext.uiState['filterConditionList'];
                    if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                        /** @type {?} */
                        var filterConditionListJson = void 0;
                        if (typeof (filterConditionList) === 'string') {
                            filterConditionListJson = JSON.parse(filterConditionList);
                        }
                        else {
                            filterConditionListJson = filterConditionList;
                        }
                        for (var index = 0; index < filterConditionListJson.length; index++) {
                            /** @type {?} */
                            var element = filterConditionListJson[index];
                            /** @type {?} */
                            var value = decodeURIComponent(element.Value);
                            element.Value = value;
                            newFilters.push(element);
                        }
                    }
                }
                if (newFilters.length > 0) {
                    if (!isNullOrUndefined(filter) && filter.FilterConditions !== null) {
                        filter.FilterConditions = newFilters.concat(filter.FilterConditions);
                    }
                    else {
                        if (isNullOrUndefined(filter)) {
                            filter = {};
                        }
                        filter['FilterConditions'] = newFilters;
                    }
                }
                if (!isNullOrUndefined(filter) && !isNullOrUndefined(filter.FilterConditions)) {
                    //确保最后一个关系为空
                    filter.FilterConditions[filter.FilterConditions.length - 1].Relation = 0;
                }
                /** @type {?} */
                var exportParam = {
                    body: {
                        exportContext: {
                            Filter: filter,
                            Keys: keys,
                            GlobalParam: '',
                            funcId: funcId
                        }
                    }
                };
                this.loadingService.show();
                /** @type {?} */
                var subject = befRestService.request(befRestService.baseUri + "/service/dataexportvmaction", 'put', null, exportParam);
                subject.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === null) {
                        // this.export.emit(false);
                        _this.notify.info('数据导出失败！\n 失败原因：服务端响应异常，请检查');
                    }
                    /** @type {?} */
                    var exportResult = ( /** @type {?} */(data.returnValue));
                    if (isNullOrUndefined(exportResult)) {
                        exportResult = ( /** @type {?} */(data));
                    }
                    /** @type {?} */
                    var fileName = exportResult.fileName;
                    if (option !== null && option['customfilename'] !== null && option['customfilename'] !== undefined) {
                        /** @type {?} */
                        var suffixIndex = fileName.lastIndexOf('.');
                        /** @type {?} */
                        var suffix = fileName.substring(suffixIndex);
                        fileName = option['customfilename'] + suffix;
                    }
                    if (exportResult.succeed === true) {
                        /** @type {?} */
                        var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                        _this.operateService.DownloadFile(exportResult.relativePath, fileName, preUrl, option);
                        /** @type {?} */
                        var subscriber_1 = _this.operateService.downloadComplete.subscribe(( /**
                         * @param {?} result
                         * @return {?}
                         */function (result) {
                            _this.loadingService.clearAll();
                            if (result === '') {
                                _this.export.emit('');
                                subscriber_1.unsubscribe();
                            }
                            else {
                                _this.export.emit(result);
                                subscriber_1.unsubscribe();
                            }
                        }));
                    }
                    else {
                        _this.loadingService.clearAll();
                        _this.errorlevel = exportResult.errorLevel;
                        _this.export.emit(exportResult.message);
                        // this.notify.error('数据导出失败！\n 失败原因：' + exportResult.message);
                    }
                }));
            };
        CustomDataIEService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        CustomDataIEService.ctorParameters = function () {
            return [
                { type: i1$1.NotifyService },
                { type: FileOperateService },
                { type: i3.LoadingService },
                { type: DataImportService },
                { type: i5.HttpClient }
            ];
        };
        CustomDataIEService.propDecorators = {
            export: [{ type: i0.Output }]
        };
        /** @nocollapse */ CustomDataIEService.ngInjectableDef = i0.defineInjectable({ factory: function CustomDataIEService_Factory() { return new CustomDataIEService(i0.inject(i1$1.NotifyService), i0.inject(FileOperateService), i0.inject(i3.LoadingService), i0.inject(DataImportService), i0.inject(i5.HttpClient)); }, token: CustomDataIEService, providedIn: "root" });
        return CustomDataIEService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExportDialogComponent = /** @class */ (function () {
        function ExportDialogComponent(dataExportService, notify, fileService, entityService, customIEService, resolver, modalService, http) {
            var _this = this;
            this.dataExportService = dataExportService;
            this.notify = notify;
            this.fileService = fileService;
            this.entityService = entityService;
            this.customIEService = customIEService;
            this.resolver = resolver;
            this.modalService = modalService;
            this.http = http;
            // 规则ID
            this.ruleId = '';
            this.i18nId = '';
            this.exportOption = null;
            this.isHandCraft = false;
            this.subject = null;
            // repository = null;
            this.frameContext = null;
            this.show = false;
            this.needDestroy = new i0.EventEmitter();
            this.valueField = 'Office Excel97-2003(*.xls)';
            this.Model = null;
            this.components = null;
            this.filter = null;
            this.InnerModel = null;
            this.CustomModel = null;
            this.isCustomExport = null;
            // public fileListItems = [
            //     {id:'Office Excel97-2003(*.xls)',label:'Office Excel97-2003(*.xls)'},
            //     {id:'Office Excel(*.xlsx)',label:'Office Excel(*.xlsx)'},
            //     {id:'Office Excel Macro(*.xlsm)',label:'Office Excel Macro(*.xlsm)'},
            //     {id:'WPS Table(*.et)',label:'WPS Table(*.et)'}
            //     // 'WPS Table(Template File)(*.ett)'
            // ];
            this.fileListItems = [
                'Office Excel97-2003(*.xls)',
                'Office Excel(*.xlsx)',
                'Office Excel Macro(*.xlsm)',
                'WPS Table(*.et)'
                // 'WPS Table(Template File)(*.ett)'
            ];
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.export_success = res['export_success'];
                _this.export_fail = res['export_fail'];
                _this.file_type = res['file_type'];
                _this.download_vsto = res['download_vsto'];
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.customexport_no_column = res['customexport_no_column'];
                _this.vsto_component = res['vsto_component'];
            }));
        }
        /**
         * @return {?}
         */
        ExportDialogComponent.prototype.DownloadVSTO = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var repository = this.frameContext === null ? null : this.frameContext.repository;
                if (this.isHandCraft === true) {
                    /** @type {?} */
                    var su = DataIEUtils.ChooseSu(repository, this.exportOption);
                    this.fileService.DownloadFile4HandCraft('数据导出组件.msi', this.vsto_component, su, false);
                }
                else {
                    /** @type {?} */
                    var befService = DataIEUtils.GetBefRestService(repository);
                    this.fileService.DownloadFile('数据导出组件.msi', this.vsto_component, befService.baseUri, false);
                }
            };
        /**
         * @return {?}
         */
        ExportDialogComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.needDestroy.emit();
            };
        /**
         * @return {?}
         */
        ExportDialogComponent.prototype.Ok = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.ruleId === '' && this.InnerModel === null) {
                    return;
                }
                /** @type {?} */
                var suffix = '.xls';
                switch (this.valueField) {
                    case 'Office Excel97-2003(*.xls)':
                        suffix = '.xls';
                        break;
                    case 'Office Excel(*.xlsx)':
                        suffix = '.xlsx';
                        break;
                    case 'Office Excel Macro(*.xlsm)':
                        suffix = '.xlsm';
                        break;
                    case 'WPS Table(*.et)':
                        suffix = '.et';
                        break;
                    case 'WPS Table(Template File)(*.ett)':
                        suffix = '.ett';
                        break;
                    default:
                        break;
                }
                if (this.isCustomExport === false) {
                    suffix = null;
                }
                //自定义导出分支
                if (this.InnerModel !== null) {
                    this.eleSelectComp.Save();
                    /** @type {?} */
                    var elements = this.InnerModel.MainObject.Elements;
                    /** @type {?} */
                    var mainObjName = this.InnerModel.MainObject.FileObjectName;
                    if (elements == null || elements === undefined || elements.length === 0) {
                        this.notify.info(mainObjName + ' ' + this.customexport_no_column);
                        return;
                    }
                    this.customIEService.SaveCustomExportRule(this.InnerModel, this.components, this.frameContext, suffix, this.i18nId, this.exportOption.dimension).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data['success'] === true) {
                            _this.customIEService.ExportByRule(['DataExport', _this.Model['MainObject']['Source']['SourceMetadataID'], _this.exportOption.dimension], _this.filter, _this.exportOption, _this.frameContext);
                        }
                        else {
                            _this.notify.error(_this.export_fail + data['message']);
                        }
                    }));
                    /** @type {?} */
                    var unscriber_1 = this.customIEService.export.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data === '') {
                            _this.notify.success(_this.export_success);
                            unscriber_1.unsubscribe();
                            _this.subject.next(true);
                            _this.subject.complete();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.customIEService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.notify.warning(data);
                            }
                            else {
                                _this.notify.error(_this.export_fail + data);
                            }
                            // this.notify.error('导出失败！');
                            unscriber_1.unsubscribe();
                            _this.subject.next(false);
                            _this.subject.complete();
                        }
                        _this.needDestroy.emit();
                    }));
                }
                //选VSTO特性下的普通导出分支
                if (this.ruleId !== '') {
                    switch (this.methodType) {
                        case MethodType.CommonExport:
                            this.dataExportService.ExportById(this.ruleId, this.frameContext, this.exportOption, suffix);
                            /** @type {?} */
                            var unscriber_2 = this.dataExportService.export.subscribe(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                if (data === '') {
                                    _this.notify.success(_this.export_success);
                                    unscriber_2.unsubscribe();
                                    _this.subject.next(true);
                                    _this.subject.complete();
                                }
                                else {
                                    /** @type {?} */
                                    var errorlevel = _this.dataExportService.errorlevel;
                                    if (errorlevel === 'Info') {
                                        _this.notify.info(data);
                                    }
                                    else if (errorlevel === 'Warning') {
                                        _this.notify.warning(data);
                                    }
                                    else {
                                        _this.notify.error(_this.export_fail + data);
                                    }
                                    // this.notify.error('导出失败！');
                                    unscriber_2.unsubscribe();
                                    _this.subject.next(false);
                                    _this.subject.complete();
                                }
                                _this.needDestroy.emit();
                            }));
                            break;
                        case MethodType.ExportCurrentTableData:
                            this.dataExportService.ExportCurrentData(this.ruleId, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, this.exportOption, suffix);
                            /** @type {?} */
                            var exportUnscribe_1 = this.dataExportService.export.subscribe(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                if (data === '') {
                                    _this.notify.success(_this.export_success);
                                    exportUnscribe_1.unsubscribe();
                                    _this.subject.next(true);
                                    _this.subject.complete();
                                }
                                else {
                                    /** @type {?} */
                                    var errorlevel = _this.dataExportService.errorlevel;
                                    if (errorlevel === 'Info') {
                                        _this.notify.info(data);
                                    }
                                    else if (errorlevel === 'Warning') {
                                        _this.notify.warning(data);
                                    }
                                    else {
                                        _this.notify.error(_this.export_fail + data);
                                    }
                                    exportUnscribe_1.unsubscribe();
                                    _this.subject.next(false);
                                    _this.subject.complete();
                                }
                                _this.needDestroy.emit();
                            }));
                            break;
                    }
                    // this.needDestroy.emit();
                }
            };
        /**
         * @return {?}
         */
        ExportDialogComponent.prototype.Cancel = /**
         * @return {?}
         */
            function () {
                this.needDestroy.emit(true);
            };
        ExportDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-export-dialog',
                        template: "<div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\r\n    <div region=\"north\" class=\"north\">\r\n        <div class=\"row\" style=\"margin-top: 12px\">\r\n            <!--\r\n            <div class=\"div-inline\">\r\n                <input type=\"text\" style=\"text-align: center;width: 100px; border: 0px\" name=\"expfiltercond\" id=\"expfiltercond\" value=\"\u8FC7\u6EE4\u6392\u5E8F\u6761\u4EF6\">\r\n            </div>\r\n            <div class=\"div-inline\">\r\n                <input style=\"width:680px\" type=\"text\" id=\"filterExpression\" name=\"filterExpression\" placeholder=\"\u8BBE\u7F6E\u8FC7\u6EE4\u4E0E\u6392\u5E8F\u6761\u4EF6\" />\r\n            </div>\r\n            <div class=\"div-inline\">\r\n                <button class=\" btn btn-primary\" style=\"width:60px\" type=\"button\" (click)=\"SetFilter()\">\u8BBE\u7F6E</button>\r\n            </div>\r\n            -->\r\n            \r\n            <!--<label>\u8FC7\u6EE4</label>\r\n            <filter [columns]=\"columns\", [(ngModel)]=\"filterConditions\"></filter>-->\r\n            <!--\r\n            <label>\u6392\u5E8F</label>\r\n            <sorter [columns]=\"columns\" [(ngModel)]=\"conditions\"></sorter>\r\n            -->\r\n        </div>\r\n        <div style=\"margin-top: 12px\">\r\n            <div class=\"div-inline\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div region=\"center\" class=\"center flex-fill\">\r\n      <div *ngIf=\"isCustomExport\">\r\n          <app-element-select [Model]=\"Model\" [InnerModel]=\"InnerModel\" [CustomModel]=\"CustomModel\"></app-element-select>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"isCustomExport\" region=\"south\" class=\"south mgleft\">\r\n        <!-- \u81EA\u5B9A\u4E49\u5BFC\u51FA -->\r\n      <label>{{file_type}}</label>\r\n      <kendo-dropdownlist class=\"longleng\" id=\"fileType\" [data]=\"fileListItems\" [(ngModel)] = \"valueField\">\r\n      </kendo-dropdownlist>\r\n      <!-- <farris-combo-list id=\"fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list> -->\r\n    </div>\r\n</div>\r\n<ng-template #selectFooter>\r\n    <!-- <div class=\"btns\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"DownloadVSTO()\" *ngIf=\"show\">{{download_vsto}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n    </div> -->\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadVSTO()\" *ngIf=\"show\">{{download_vsto}}</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>",
                        providers: [i1$1.NotifyService],
                        styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}*{padding:0;margin:0}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longleng{width:820px}"]
                    }] }
        ];
        /** @nocollapse */
        ExportDialogComponent.ctorParameters = function () {
            return [
                { type: DataExportService },
                { type: i1$1.NotifyService },
                { type: FileOperateService },
                { type: commandServices.EntityListService },
                { type: CustomDataIEService },
                { type: i0.ComponentFactoryResolver },
                { type: i1.BsModalService },
                { type: i5.HttpClient }
            ];
        };
        ExportDialogComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            ruleId: [{ type: i0.Input }],
            i18nId: [{ type: i0.Input }],
            exportOption: [{ type: i0.Input }],
            isHandCraft: [{ type: i0.Input }],
            frameContext: [{ type: i0.Input }],
            methodType: [{ type: i0.Input }],
            show: [{ type: i0.Input }],
            needDestroy: [{ type: i0.Output }],
            eleSelectComp: [{ type: i0.ViewChild, args: [ElementSelectComponent,] }],
            Model: [{ type: i0.Input }],
            components: [{ type: i0.Input }],
            filter: [{ type: i0.Input }],
            InnerModel: [{ type: i0.Input }],
            CustomModel: [{ type: i0.Input }],
            isCustomExport: [{ type: i0.Input }]
        };
        return ExportDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileDropDirective = /** @class */ (function () {
        function FileDropDirective(element) {
            this.fileOver = new i0.EventEmitter();
            this.FileDrop = new i0.EventEmitter();
            this.element = element;
        }
        /**
         * @return {?}
         */
        FileDropDirective.prototype.getOptions = /**
         * @return {?}
         */
            function () {
                return this.uploader.options;
            };
        /**
         * @return {?}
         */
        FileDropDirective.prototype.getFilters = /**
         * @return {?}
         */
            function () {
                return {};
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileDropDirective.prototype.onDrop = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var transfer = this._getTransfer(event);
                if (!transfer) {
                    return;
                }
                /** @type {?} */
                var options = this.getOptions();
                /** @type {?} */
                var filters = this.getFilters();
                this._preventAndStop(event);
                this.uploader.addToQueue(transfer.files, options, filters);
                this.fileOver.emit(false);
                this.FileDrop.emit(transfer.files);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileDropDirective.prototype.onDragOver = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var transfer = this._getTransfer(event);
                if (!this._haveFiles(transfer.types)) {
                    return;
                }
                transfer.dropEffect = 'copy';
                this._preventAndStop(event);
                this.fileOver.emit(true);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileDropDirective.prototype.onDragLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if ((( /** @type {?} */(this))).element) {
                    if (event.currentTarget === (( /** @type {?} */(this))).element[0]) {
                        return;
                    }
                }
                this._preventAndStop(event);
                this.fileOver.emit(false);
            };
        /**
         * @protected
         * @param {?} event
         * @return {?}
         */
        FileDropDirective.prototype._getTransfer = /**
         * @protected
         * @param {?} event
         * @return {?}
         */
            function (event) {
                return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;
            };
        /**
         * @protected
         * @param {?} event
         * @return {?}
         */
        FileDropDirective.prototype._preventAndStop = /**
         * @protected
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
            };
        /**
         * @protected
         * @param {?} types
         * @return {?}
         */
        FileDropDirective.prototype._haveFiles = /**
         * @protected
         * @param {?} types
         * @return {?}
         */
            function (types) {
                if (!types) {
                    return false;
                }
                if (types.indexOf) {
                    return types.indexOf('Files') !== -1;
                }
                else if (types.contains) {
                    return types.contains('Files');
                }
                else {
                    return false;
                }
            };
        FileDropDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[libFileDrop]'
                    },] }
        ];
        /** @nocollapse */
        FileDropDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        FileDropDirective.propDecorators = {
            uploader: [{ type: i0.Input }],
            fileOver: [{ type: i0.Output }],
            FileDrop: [{ type: i0.Output }],
            onDrop: [{ type: i0.HostListener, args: ['drop', ['$event'],] }],
            onDragOver: [{ type: i0.HostListener, args: ['dragover', ['$event'],] }],
            onDragLeave: [{ type: i0.HostListener, args: ['dragleave', ['$event'],] }]
        };
        return FileDropDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileSelectDirective = /** @class */ (function () {
        function FileSelectDirective(element) {
            this.FileSelected = new i0.EventEmitter();
            this.element = element;
        }
        /**
         * @return {?}
         */
        FileSelectDirective.prototype.getOptions = /**
         * @return {?}
         */
            function () {
                return this.uploader.options;
            };
        /**
         * @return {?}
         */
        FileSelectDirective.prototype.getFilters = /**
         * @return {?}
         */
            function () {
                return {};
            };
        /**
         * @return {?}
         */
        FileSelectDirective.prototype.isEmptyAfterSelection = /**
         * @return {?}
         */
            function () {
                return !!this.element.nativeElement.attributes.multiple;
            };
        /**
         * @return {?}
         */
        FileSelectDirective.prototype.onChange = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var files = this.element.nativeElement.files;
                /** @type {?} */
                var options = this.getOptions();
                /** @type {?} */
                var filters = this.getFilters();
                this.uploader.addToQueue(files, options, filters);
                this.FileSelected.emit(files);
                if (this.isEmptyAfterSelection()) {
                    this.element.nativeElement.value = '';
                }
            };
        FileSelectDirective.decorators = [
            { type: i0.Directive, args: [{ selector: '[libFileSelect]' },] }
        ];
        /** @nocollapse */
        FileSelectDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        FileSelectDirective.propDecorators = {
            uploader: [{ type: i0.Input }],
            FileSelected: [{ type: i0.Output }],
            onChange: [{ type: i0.HostListener, args: ['change',] }]
        };
        return FileSelectDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomImportDialogComponent = /** @class */ (function () {
        function CustomImportDialogComponent(customDataIEService, notify, loadingService, importService, http) {
            var _this = this;
            this.customDataIEService = customDataIEService;
            this.notify = notify;
            this.loadingService = loadingService;
            this.importService = importService;
            this.http = http;
            // 规则ID
            this.ruleId = '';
            this.i18nId = '';
            // 过滤条件
            this.importOption = null;
            this.frameContext = null;
            // @Input()
            // methodType: MethodType;
            this.subject = null;
            this.acceptFileType = '.xls';
            // 文件名称
            this.fileName = '';
            this.origin = window.location.origin;
            this.valueField = 'Office Excel97-2003(*.xls)';
            this.uploader = new FileUploader({
                url: this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload',
                method: 'POST',
                autoUpload: false,
                itemAlias: 'uploadedfile',
                allowedFileType: ['xls', 'xml', 'pdf', 'wps', 'doc']
            });
            // 控制Destroy表单中的输入组件
            this.needDestroy = new i0.EventEmitter();
            this.Model = null;
            this.InnerModel = null;
            this.components = null;
            this.CustomModel = null;
            this.IsImportForm = false;
            // public fileListItems = [
            //     {id:'Office Excel97-2003(*.xls)',label:'Office Excel97-2003(*.xls)'},
            //     {id:'Office Excel(*.xlsx)',label:'Office Excel(*.xlsx)'},
            //     {id:'Office Excel Macro(*.xlsm)',label:'Office Excel Macro(*.xlsm)'},
            //     {id:'WPS Table(*.et)',label:'WPS Table(*.et)'}
            //     // 'WPS Table(Template File)(*.ett)'
            // ];
            this.fileListItems = [
                'Office Excel97-2003(*.xls)',
                'Office Excel(*.xlsx)',
                'Office Excel Macro(*.xlsm)',
                'WPS Table(*.et)'
                // 'WPS Table(Template File)(*.ett)'
            ];
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.import_file = res['import_file'];
                _this.choose_file = res['choose_file'];
                _this.file_type = res['file_type'];
                _this.import_placeholder = res['import_placeholder'];
                _this.download_template = res['download_template'];
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.choose_truefile = res['choose_truefile'];
                _this.download_template_ok = res['download_template_ok'];
                _this.download_template_fail = res['download_template_fail'];
                _this.upload_fail = res['upload_fail'];
                _this.import_success = res['import_success'];
                _this.import_form_success = res['import_form_success'];
                _this.import_fail = res['import_fail'];
                _this.upload_filetype_nomatch = res['upload_filetype_nomatch'];
                _this.save_customrule_fail = res['save_customrule_fail'];
                _this.customexport_no_column = res['customexport_no_column'];
                _this.select_xlsx_notify = res['select_xlsx_notify'];
                _this.i18nResource = res;
            }));
        }
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // 上传成功后执行的事件
                this.uploader.onSuccessItem = this.Import.bind(this);
                // 上传失败后执行的事件
                this.uploader.onErrorItem = this.ErrorLog.bind(this);
                // 添加文件后执行的事件
                this.uploader.onAfterAddingFile = this.afterAddFile;
                // 上传文件前执行的事件
                this.uploader.onBeforeUploadItem = this.SaveCustomImportRule;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CustomImportDialogComponent.prototype.selectedFileOnChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var str = event.target.value;
                if (str === '') {
                    return;
                }
                /** @type {?} */
                var index = str.lastIndexOf('\\');
                this.fileName = str.substring(index + 1);
                // console.log('队列中的文件' + this.uploader.queue[0]);
            };
        // 关闭窗口
        // 关闭窗口
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.Close =
            // 关闭窗口
            /**
             * @return {?}
             */
            function () {
                this.needDestroy.emit();
            };
        // 选择文件事件
        // 选择文件事件
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.SelectFile =
            // 选择文件事件
            /**
             * @return {?}
             */
            function () {
                this.fileUpload.nativeElement.click();
            };
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.fileTypeValueChange = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = this.getFileExtension();
                if (suffix === '.xlsx') {
                    this.notify.info(this.select_xlsx_notify);
                }
                if (suffix !== null) {
                    this.acceptFileType = suffix;
                }
                else {
                    this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
                }
            };
        //下载模板
        //下载模板
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.DownloadTemplate =
            //下载模板
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                //const temRes = JSON.parse(response);
                /** @type {?} */
                var suffix = '.xls';
                suffix = this.getFileExtension();
                if (this.InnerModel !== null) {
                    this.eleSelectComp.Save();
                    /** @type {?} */
                    var elements = this.InnerModel.MainObject.Elements;
                    /** @type {?} */
                    var mainObjName = this.InnerModel.MainObject.FileObjectName;
                    if (elements == null || elements === undefined || elements.length === 0) {
                        this.notify.info(mainObjName + ' ' + this.customexport_no_column);
                        return;
                    }
                    this.customDataIEService.SaveCustomImportRule(this.InnerModel, this.components, this.frameContext, suffix, false, this.i18nId, this.importOption.dimension).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data['success'] === true) {
                            _this.customDataIEService.DowmloadTemplate(_this.Model, _this.frameContext, _this.importOption);
                            /** @type {?} */
                            var unsubscriber_1 = _this.customDataIEService.complete.subscribe(( /**
                             * @param {?} data
                             * @return {?}
                             */function (data) {
                                if (data === '') {
                                    _this.notify.success(_this.download_template_ok);
                                    unsubscriber_1.unsubscribe();
                                }
                                else {
                                    _this.notify.error(_this.download_template_fail + data);
                                    unsubscriber_1.unsubscribe();
                                }
                            }));
                        }
                        else {
                            _this.notify.error(_this.save_customrule_fail + data['message']);
                        }
                    }));
                }
            };
        // 添加文件后事件
        // 添加文件后事件
        /**
         * @param {?} fileItem
         * @return {?}
         */
        CustomImportDialogComponent.prototype.afterAddFile =
            // 添加文件后事件
            /**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
            };
        // 开始导入
        // 开始导入
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.Ok =
            // 开始导入
            /**
             * @return {?}
             */
            function () {
                console.log('开始上传！');
                console.log(this.uploader.queue);
                /** @type {?} */
                var loadingConfig = {
                    message: this.i18nResource['import_loading']
                };
                this.loadingService.show(loadingConfig);
                /** @type {?} */
                var len = this.uploader.queue.length;
                if (len === 0) {
                    this.notify.info(this.choose_truefile);
                    this.loadingService.clearAll();
                    return;
                }
                /** @type {?} */
                var lastFileItem = this.uploader.queue[len - 1];
                // this.uploader.uploadAll();
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
                /** @type {?} */
                var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                /** @type {?} */
                var tempUrl = preUrl + "/import/Upload";
                /** @type {?} */
                var su = DataIEUtils.getSu(tempUrl);
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
                this.uploader.setOptions({
                    url: fixedUrl,
                    method: 'POST',
                    autoUpload: false,
                    itemAlias: 'uploadedfile',
                    allowedFileType: ['xls', 'xml', 'pdf', 'wps', 'doc'],
                    headers: [{ name: 'su', value: su }]
                });
                if (this.fileName.split(".").length === 2) {
                    if (this.getFileExtension() !== ("." + this.fileName.split(".")[1])) {
                        this.notify.info(this.upload_filetype_nomatch);
                        this.loadingService.clearAll();
                        return;
                    }
                }
                this.uploader.uploadItem(lastFileItem);
            };
        // 取消事件
        // 取消事件
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.Cancel =
            // 取消事件
            /**
             * @return {?}
             */
            function () {
                this.needDestroy.emit();
            };
        // 上传失败后方法
        // 上传失败后方法
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        CustomImportDialogComponent.prototype.ErrorLog =
            // 上传失败后方法
            /**
             * @param {?} item
             * @param {?} response
             * @param {?} status
             * @param {?} headers
             * @return {?}
             */
            function (item, response, status, headers) {
                console.log('上传失败');
                console.log('错误代码：' + status);
                console.log(response);
                console.log(headers);
                if (response !== ' ') {
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    this.notify.info(this.upload_fail + temRes);
                    console.log('失败原因：' + temRes);
                }
            };
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.SaveCustomImportRule = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        CustomImportDialogComponent.prototype.Import = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                var _this = this;
                /** @type {?} */
                var temRes = JSON.parse(response);
                /** @type {?} */
                var suffix = '.xls';
                suffix = this.getFileExtension();
                if (this.InnerModel !== null) {
                    /** @type {?} */
                    var isForm = false;
                    if (this.importOption !== null && this.importOption['IsImportForm'] !== null && this.importOption['IsImportForm'] !== undefined) {
                        if (this.importOption['IsImportForm'] === true) {
                            isForm = true;
                        }
                    }
                    this.eleSelectComp.Save();
                    this.customDataIEService.SaveCustomImportRule(this.InnerModel, this.components, this.frameContext, suffix, isForm, this.i18nId, this.importOption.dimension).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data['success'] === true) {
                            if (data['isImportSub'] == true) {
                                _this.ImportSubTableByRule(item, response, status, headers);
                            }
                            else {
                                _this.ImportByRule(item, response, status, headers);
                            }
                        }
                        else {
                            _this.notify.error(_this.save_customrule_fail + data['message']);
                            _this.loadingService.clearAll();
                        }
                    }));
                }
                else {
                    console.log('数据交换模型参数值为空');
                    this.loadingService.clearAll();
                }
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        CustomImportDialogComponent.prototype.ImportByRule = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                var _this = this;
                console.log(status);
                console.log('上传完成！');
                if (status == 200) {
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    console.log('上传成功');
                    console.log(temRes);
                    /** @type {?} */
                    var loadingConfig = {
                        message: this.i18nResource['import_loading']
                    };
                    /** @type {?} */
                    var loadingParam = {
                        loadingService: this.loadingService,
                        loadingConfig: loadingConfig
                    };
                    /** @type {?} */
                    var commonParams = new CommonParams();
                    commonParams.keys = ['DataImport', this.Model['MainObject']['Source']['SourceMetadataID'], this.importOption.dimension];
                    commonParams.option = this.importOption;
                    commonParams.fileName = temRes['fileName'];
                    commonParams.repository = this.frameContext.repository;
                    commonParams.loadingParam = loadingParam;
                    commonParams.i18nResource = this.i18nResource;
                    this.customDataIEService.ImportByRule(commonParams);
                    /** @type {?} */
                    var unsubscriber_2 = this.importService.complete.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.loadingService.clearAll();
                        if (data === '') {
                            _this.notify.success(_this.import_success);
                            unsubscriber_2.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(true);
                            _this.subject.complete();
                        }
                        else if (data === '导入表单成功') {
                            _this.notify.success(_this.import_form_success);
                            unsubscriber_2.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(true);
                            _this.subject.complete();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.importService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.notify.warning(data);
                            }
                            else {
                                _this.notify.error(_this.import_fail + data);
                            }
                            unsubscriber_2.unsubscribe();
                            _this.needDestroy.emit();
                            _this.subject.next(false);
                            _this.subject.complete();
                        }
                    }));
                }
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        CustomImportDialogComponent.prototype.ImportSubTableByRule = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                var _this = this;
                if (status === 200) {
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    /** @type {?} */
                    var loadingConfig = {
                        message: this.i18nResource['import_loading']
                    };
                    /** @type {?} */
                    var loadingParam = {
                        loadingService: this.loadingService,
                        loadingConfig: loadingConfig
                    };
                    /** @type {?} */
                    var commonParams = new CommonParams();
                    commonParams.keys = ['DataImport', this.Model['MainObject']['Source']['SourceMetadataID'], this.importOption.dimension];
                    commonParams.option = this.importOption;
                    commonParams.fileName = temRes['fileName'];
                    commonParams.repository = this.frameContext.repository;
                    commonParams.frameContext = this.frameContext;
                    commonParams.loadingParam = loadingParam;
                    commonParams.i18nResource = this.i18nResource;
                    /** @type {?} */
                    var flag = this.customDataIEService.ImportSubTableByRule(commonParams);
                    if (flag === false) {
                        this.loadingService.clearAll();
                    }
                    /** @type {?} */
                    var unsubscriber_3 = this.importService.complete.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.loadingService.clearAll();
                        if (data === '') {
                            _this.notify.success(_this.import_success);
                            unsubscriber_3.unsubscribe();
                            _this.subject.next(true);
                            _this.subject.complete();
                            _this.needDestroy.emit();
                        }
                        else if (data === '导入表单成功') {
                            _this.notify.success(_this.import_form_success);
                            unsubscriber_3.unsubscribe();
                            _this.subject.next(true);
                            _this.subject.complete();
                            _this.needDestroy.emit();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.importService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.notify.warning(data);
                            }
                            else {
                                _this.notify.error(_this.import_fail + data);
                            }
                            unsubscriber_3.unsubscribe();
                            _this.subject.next(false);
                            _this.subject.complete();
                            _this.needDestroy.emit();
                        }
                        unsubscriber_3.unsubscribe();
                    }));
                }
            };
        /**
         * @return {?}
         */
        CustomImportDialogComponent.prototype.getFileExtension = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = null;
                switch (this.valueField) {
                    case 'Office Excel97-2003(*.xls)':
                        suffix = '.xls';
                        break;
                    case 'Office Excel(*.xlsx)':
                        suffix = '.xlsx';
                        break;
                    case 'Office Excel Macro(*.xlsm)':
                        suffix = '.xlsm';
                        break;
                    case 'WPS Table(*.et)':
                        suffix = '.et';
                        break;
                    case 'WPS Table(Template File)(*.ett)':
                        suffix = '.ett';
                        break;
                    default:
                        break;
                }
                return suffix;
            };
        CustomImportDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-custom-import-dialog',
                        template: "<div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\r\n  <div region=\"north\" class=\"north\">\r\n    <div style=\"margin-top: 12px;margin-left: 20px\">\r\n      <table>\r\n        <tr>\r\n          <td class=\"mkwidth\">\r\n            <label for=\"f_upload\">{{import_file}}</label>\r\n          </td>\r\n          <td>\r\n            <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n              (change)=\"selectedFileOnChange($event)\" />\r\n            <div class=\"input-group\" style=\"margin-left: 10px; width: 800px\">\r\n              <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n              <span class=\"input-group-btn\">\r\n                <button class=\"btn btn-primary\" type=\"button\" (click)=\"SelectFile()\">{{choose_file}}</button>\r\n              </span>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div region=\"center\" class=\"center flex-fill\">\r\n    <div>\r\n      <app-element-select [Model]=\"Model\" [InnerModel]=\"InnerModel\" [CustomModel]=\"CustomModel\"></app-element-select>\r\n    </div>\r\n  </div>\r\n  <div region=\"south\" class=\"south mgleft\">\r\n    <label>{{file_type}}</label>\r\n    <kendo-dropdownlist class=\"longleng\" id=\"fileType\" [data]=\"fileListItems\" [value]=\"'Office Excel97-2003(*.xls)'\"\r\n      [(ngModel)]=\"valueField\" (valueChange)=\"fileTypeValueChange()\">\r\n    </kendo-dropdownlist>\r\n  </div>\r\n  <!-- <farris-combo-list id=\"fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n    [data]=\"fileListItems\"></farris-combo-list> -->\r\n\r\n</div>\r\n<ng-template #selectFooter>\r\n  <!-- <div class=\"btns\">\r\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n    </div> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>",
                        styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}*{padding:0;margin:0}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longleng{width:820px}"]
                    }] }
        ];
        /** @nocollapse */
        CustomImportDialogComponent.ctorParameters = function () {
            return [
                { type: CustomDataIEService },
                { type: i1$1.NotifyService },
                { type: i3.LoadingService },
                { type: DataImportService },
                { type: i5.HttpClient }
            ];
        };
        CustomImportDialogComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            ruleId: [{ type: i0.Input }],
            i18nId: [{ type: i0.Input }],
            importOption: [{ type: i0.Input }],
            frameContext: [{ type: i0.Input }],
            subject: [{ type: i0.Input }],
            fileUpload: [{ type: i0.ViewChild, args: ['fileUpload',] }],
            eleSelectComp: [{ type: i0.ViewChild, args: [ElementSelectComponent,] }],
            needDestroy: [{ type: i0.Output }],
            Model: [{ type: i0.Input }],
            InnerModel: [{ type: i0.Input }],
            components: [{ type: i0.Input }],
            CustomModel: [{ type: i0.Input }],
            IsImportForm: [{ type: i0.Input }]
        };
        return CustomImportDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExportCustomSelectComponent = /** @class */ (function () {
        function ExportCustomSelectComponent(dataExportService, notify, entityService, http, loadingService, injector, modalService, resolver) {
            var _this = this;
            this.dataExportService = dataExportService;
            this.notify = notify;
            this.entityService = entityService;
            this.http = http;
            this.loadingService = loadingService;
            this.injector = injector;
            this.modalService = modalService;
            this.resolver = resolver;
            this.ruleId = '';
            this.frameContext = null;
            this.subject = null;
            this.exportOption = null;
            this.needDestroy = new i0.EventEmitter();
            this.enableRuntimeCustom = false;
            // 记录的规则
            this.recordRule = null;
            this.currentRuleName = '';
            this.currentRuleId = '';
            this.currentRuleFileType = '';
            this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
            this.loadingComp = null;
            this.fileListItems = [
                { id: FileConst.xls, label: FileConst.xls },
                { id: FileConst.xlsx, label: FileConst.xlsx },
                { id: FileConst.xlsm, label: FileConst.xlsm },
                { id: FileConst.et, label: FileConst.et },
            ];
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.export_success = res['export_success'];
                _this.export_fail = res['export_fail'];
                _this.file_type = res['file_type'];
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.rule_list = res['rule_list'];
                _this.i18nResource = res;
            }));
        }
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.currentRuleId = this.recordRule.ruleId;
                this.currentRuleName = this.recordRule.ruleName;
                this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
                this.currentRuleFileType = this.valueField;
                if (this.exportOption.enableRuntimeCustom === true) {
                    this.enableRuntimeCustom = true;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.openSelectRule = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                this.loadingComp = this.loadingService.show();
                //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
                /** @type {?} */
                var body = {
                    ruleId: this.ruleId,
                    ruleType: 1,
                    voId: this.exportOption.voId,
                    methodType: this.methodType,
                    exportChildNodeCode: this.exportOption.exportChildNodeCode
                };
                this.http.post(url, body).subscribe(( /**
                 * @param {?} RuleMgrs
                 * @return {?}
                 */function (RuleMgrs) {
                    _this.loadingService.clearAll();
                    if (RuleMgrs.length === 0) {
                        _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                        return;
                    }
                    /** @type {?} */
                    var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
                    /** @type {?} */
                    var compRef = compFactory.create(_this.injector);
                    compRef.instance.ruleId = _this.ruleId;
                    compRef.instance.voId = _this.exportOption.voId;
                    compRef.instance.ruleType = 1;
                    compRef.instance.RuleMgrsData = RuleMgrs;
                    /** @type {?} */
                    var modalConfig = {
                        title: _this.rule_list,
                        width: 950,
                        height: 500,
                        buttons: compRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                    compRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        dialog.close();
                    }));
                    compRef.instance.okModal.subscribe(( /**
                     * @param {?} RuleMgr
                     * @return {?}
                     */function (RuleMgr) {
                        _this.currentRuleId = RuleMgr.id;
                        _this.currentRuleName = RuleMgr.name;
                        _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                        _this.currentRuleFileType = _this.valueField;
                        dialog.close();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingService.clearAll();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.Ok = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = null;
                if (this.valueField !== this.currentRuleFileType) {
                    suffix = FileTypeUtil.getFileExtension(this.valueField);
                }
                switch (this.methodType) {
                    case MethodType.CommonExport:
                        this.dataExportService.ExportById(this.currentRuleId, this.frameContext, this.exportOption, suffix);
                        this.exportComplete();
                        break;
                    case MethodType.ExportCurrentTableData:
                        this.dataExportService.ExportCurrentData(this.currentRuleId, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, this.exportOption, suffix);
                        this.exportComplete();
                        break;
                    case MethodType.ExportCurrentChildData:
                        this.dataExportService.ExportCurrentChildData(this.currentRuleId, this.frameContext, this.exportOption, suffix);
                        this.exportComplete();
                        break;
                }
            };
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.exportComplete = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var exportUnscribe = this.dataExportService.export.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === '') {
                        _this.notify.success(_this.export_success);
                        exportUnscribe.unsubscribe();
                        _this.subject.next(true);
                        _this.subject.complete();
                    }
                    else {
                        /** @type {?} */
                        var errorlevel = _this.dataExportService.errorlevel;
                        if (errorlevel === 'Info') {
                            _this.notify.info(data);
                        }
                        else if (errorlevel === 'Warning') {
                            _this.notify.warning(data);
                        }
                        else {
                            _this.notify.error(_this.export_fail + data);
                        }
                        exportUnscribe.unsubscribe();
                        _this.subject.next(false);
                        _this.subject.complete();
                    }
                    _this.needDestroy.emit();
                }));
            };
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.canSelectFileType = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = FileTypeUtil.getFileExtension(this.valueField);
                /** @type {?} */
                var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
                if (canList.findIndex(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) { return t === suffix; })) < 0) {
                    return false;
                }
                return true;
            };
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.needDestroy.emit();
            };
        /**
         * @return {?}
         */
        ExportCustomSelectComponent.prototype.Cancel = /**
         * @return {?}
         */
            function () {
                this.needDestroy.emit(true);
            };
        ExportCustomSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-export-custom-select',
                        template: "<!-- <div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n    <div class=\"col-12\" style=\"margin-top: 72px\">\n        <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n            <div class=\"form-group farris-form-group\">\n                <label class=\" col-form-label\">\n                    <span class=\"farris-label-text\">{{rule_list}}</span>\n                </label>\n                <div class=\"farris-input-wrap\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n            <span>&nbsp;</span>\n        </div>\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\n            <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n                <label class=\"col-form-label\">\n                    <span class=\"farris-label-text\">{{file_type}}</span>\n                </label>\n                <div class=\"farris-input-wrap\">\n                    <farris-combo-list [readonly]=\"canSelectFileType() === false\" id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\"\n                        [idField]=\"'id'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"fileListItems\"></farris-combo-list>\n                </div>\n                <span>&nbsp;&nbsp;</span>\n                <!-- <span *ngIf=\"enableRuntimeCustom === true\" class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n                <span *ngIf=\"enableRuntimeCustom === false\" class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n                <span  class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n            </div>\n        </div>\n\n\n\n    </div>\n</form>\n\n<ng-template #selectFooter>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>",
                        providers: [i1$1.NotifyService, DataExportService, commandServices.EntityListService, devkit.BindingData],
                        styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longlen{width:400px}"]
                    }] }
        ];
        /** @nocollapse */
        ExportCustomSelectComponent.ctorParameters = function () {
            return [
                { type: DataExportService },
                { type: i1$1.NotifyService },
                { type: commandServices.EntityListService },
                { type: i5.HttpClient },
                { type: i3.LoadingService },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        ExportCustomSelectComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            ruleId: [{ type: i0.Input }],
            methodType: [{ type: i0.Input }],
            frameContext: [{ type: i0.Input }],
            exportOption: [{ type: i0.Input }],
            needDestroy: [{ type: i0.Output }]
        };
        return ExportCustomSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImportDialogHandcraftComponent = /** @class */ (function () {
        function ImportDialogHandcraftComponent(dataImportService, notify, loadingService, http, injector, modalService, msgService, resolver) {
            var _this = this;
            this.dataImportService = dataImportService;
            this.notify = notify;
            this.loadingService = loadingService;
            this.http = http;
            this.injector = injector;
            this.modalService = modalService;
            this.msgService = msgService;
            this.resolver = resolver;
            // 规则ID 该id为表单上配置的规则id
            this.ruleId = '';
            // 过滤条件
            this.importOption = null;
            this.subject = null;
            this.selectrule = false;
            // 记录的规则
            this.recordRule = null;
            this.selectfiletype = null;
            this.currentRuleName = '';
            this.currentRuleId = '';
            this.currentRuleFileType = '';
            this.enableTemplate = true;
            this.closeXLSX = false;
            this.enableSecurityLevelSelect = false;
            this.securityLevelName = '';
            this.ImportSecretRemindInfo = '';
            this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
            // 文件名称
            this.fileName = '';
            this.origin = window.location.origin;
            this.uploader = new FileUploader({
                url: '',
                method: 'POST',
                autoUpload: false,
                itemAlias: 'uploadedfile'
            });
            // 控制Destroy表单中的输入组件
            this.needDestroy = new i0.EventEmitter();
            this.showfiletype = true;
            this.enableRuntimeCustom = false;
            this.valueField = null;
            this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
            this.fileListItems = [
                { id: FileConst.xls, label: FileConst.xls },
                { id: FileConst.xlsx, label: FileConst.xlsx },
                { id: FileConst.xlsm, label: FileConst.xlsm },
                { id: FileConst.et, label: FileConst.et },
            ];
            this.securityLevelItems = [];
            this.uploader.onSuccessItem = this.Import.bind(this);
            this.uploader.onErrorItem = this.ErrorLog.bind(this);
            this.uploader.onAfterAddingFile = this.afterAddFile;
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.import_file = res['import_file'];
                _this.choose_file = res['choose_file'];
                _this.file_type = res['file_type'];
                _this.import_placeholder = res['import_placeholder'];
                _this.download_template = res['download_template'];
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.choose_truefile = res['choose_truefile'];
                _this.download_template_ok = res['download_template_ok'];
                _this.download_template_fail = res['download_template_fail'];
                _this.upload_fail = res['upload_fail'];
                _this.import_success = res['import_success'];
                _this.import_form_success = res['import_form_success'];
                _this.import_fail = res['import_fail'];
                _this.rule_list = res['rule_list'];
                _this.select_xlsx_notify = res['select_xlsx_notify'];
                _this.i18nResource = res;
            }));
        }
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.importOption.selectfiletype === true) {
                    this.selectfiletype = this.importOption.selectfiletype;
                    if (this.importOption.suffix !== undefined && this.importOption.suffix !== null) {
                        this.valueField = FileTypeUtil.getFileTypeName(this.importOption.suffix.toUpperCase());
                    }
                }
                /** @type {?} */
                var extendInfo = this.recordRule.extendInfo;
                if (!isNullOrUndefined(extendInfo)) {
                    this.extendInfo = JSON.parse(extendInfo);
                    this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
                    this.closeXLSX = this.extendInfo['closeXLSX'];
                    if (this.closeXLSX === true) {
                        this.fileListItems = [
                            { id: FileConst.xls, label: FileConst.xls },
                            { id: FileConst.xlsm, label: FileConst.xlsm },
                            { id: FileConst.et, label: FileConst.et }
                        ];
                    }
                }
                /** @type {?} */
                var securityLevels = this.recordRule.securityLevels;
                if (!isNullOrEmpty(securityLevels)) {
                    this.enableSecurityLevelSelect = true;
                    securityLevels.forEach(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        /** @type {?} */
                        var level = {
                            value: e.name,
                            label: e.name
                        };
                        _this.securityLevelItems.push(level);
                    }));
                    this.securityLevelName = this.securityLevelItems[0].value;
                }
                this.currentRuleId = this.recordRule.ruleId;
                this.currentRuleName = this.recordRule.ruleName;
                this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
                if (this.valueField === '') {
                    //未在当前可选文件的类型时，不显示选文件类型控件
                    this.showfiletype = false;
                }
                this.currentRuleFileType = this.valueField;
                this.controlFileType();
                if (this.importOption.enableRuntimeCustom === true) {
                    this.enableRuntimeCustom = true;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.openSelectRule = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                this.loadingService.show();
                //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
                /** @type {?} */
                var body = {
                    ruleId: this.ruleId,
                    ruleType: 0,
                    voId: this.importOption.voId,
                    methodType: this.methodType,
                    importChildNodeCode: this.importOption.importChildNodeCode,
                    closeXlsx: this.closeXLSX
                };
                this.http.post(url, body).subscribe(( /**
                 * @param {?} RuleMgrs
                 * @return {?}
                 */function (RuleMgrs) {
                    _this.loadingService.clearAll();
                    if (RuleMgrs.length === 0) {
                        _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                        return;
                    }
                    /** @type {?} */
                    var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
                    /** @type {?} */
                    var compRef = compFactory.create(_this.injector);
                    compRef.instance.ruleId = _this.ruleId;
                    compRef.instance.voId = _this.importOption.voId;
                    compRef.instance.ruleType = 0;
                    compRef.instance.RuleMgrsData = RuleMgrs;
                    /** @type {?} */
                    var modalConfig = {
                        title: _this.rule_list,
                        width: 950,
                        height: 500,
                        buttons: compRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                    compRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        dialog.close();
                    }));
                    compRef.instance.okModal.subscribe(( /**
                     * @param {?} RuleMgr
                     * @return {?}
                     */function (RuleMgr) {
                        _this.currentRuleId = RuleMgr.id;
                        _this.currentRuleName = RuleMgr.name;
                        _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                        _this.currentRuleFileType = _this.valueField;
                        _this.controlFileType();
                        dialog.close();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingService.clearAll();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.getFileExtension = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = null;
                switch (this.valueField) {
                    case FileConst.xls:
                        suffix = '.xls';
                        break;
                    case FileConst.xlsx:
                        suffix = '.xlsx';
                        break;
                    case FileConst.xlsm:
                        suffix = '.xlsm';
                        break;
                    case FileConst.et:
                        suffix = '.et';
                        break;
                    case FileConst.xml:
                        suffix = '.xml';
                        break;
                    case FileConst.pdf:
                        suffix = '.pdf';
                        break;
                    case FileConst.csv:
                        suffix = '.csv';
                        break;
                    default:
                        break;
                }
                return suffix;
            };
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.canDownloadTemplate = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = this.getFileExtension();
                /** @type {?} */
                var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
                if (canList.findIndex(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) { return t === suffix; })) < 0) {
                    return false;
                }
                return true;
            };
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        // 选择文件后事件
        // 选择文件后事件
        /**
         * @param {?} event
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.selectedFileOnChange =
            // 选择文件后事件
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var str = event.target.value;
                if (str === '') {
                    return;
                }
                /** @type {?} */
                var index = str.lastIndexOf('\\');
                this.fileName = str.substring(index + 1);
                if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
                    this.uploader.queue = [];
                    this.notify.info(this.choose_truefile);
                    return;
                }
                // console.log('队列中的文件' + this.uploader.queue[0]);
            };
        // 关闭窗口
        // 关闭窗口
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.Close =
            // 关闭窗口
            /**
             * @return {?}
             */
            function () {
                this.needDestroy.emit();
            };
        // 选择文件事件
        // 选择文件事件
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.SelectFile =
            // 选择文件事件
            /**
             * @return {?}
             */
            function () {
                this.fileUpload.nativeElement.click();
            };
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.fileTypeValueChange = /**
         * @return {?}
         */
            function () {
                if (this.controlFileType() === '.xlsx') {
                    this.notify.info(this.select_xlsx_notify);
                }
            };
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.controlFileType = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = FileTypeUtil.getFileExtension(this.valueField);
                if (suffix !== null) {
                    this.acceptFileType = suffix;
                }
                else {
                    this.acceptFileType = '*';
                }
                return suffix;
            };
        // 下载模板
        // 下载模板
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.DownloadTemplate =
            // 下载模板
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                this.loadingService.show();
                /** @type {?} */
                var suffix = null;
                if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
                    suffix = FileTypeUtil.getFileExtension(this.valueField);
                }
                this.importOption['securityLevelName'] = this.securityLevelName;
                this.dataImportService.DowmloadTemplate4HandCraft(this.currentRuleId, this.importOption, suffix);
                // this.dataImportService.complete.unsubscribe();
                /** @type {?} */
                var unsubscriber = this.dataImportService.complete.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.loadingService.clearAll();
                    if (data === '') {
                        _this.notify.success(_this.download_template_ok);
                        unsubscriber.unsubscribe();
                    }
                    else {
                        _this.notify.error(_this.download_template_fail + data);
                        unsubscriber.unsubscribe();
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingService.clearAll();
                    _this.notify.error(error.message);
                }));
            };
        // 添加文件后事件
        // 添加文件后事件
        /**
         * @param {?} fileItem
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.afterAddFile =
            // 添加文件后事件
            /**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
            };
        // 开始导入
        // 开始导入
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.Ok =
            // 开始导入
            /**
             * @return {?}
             */
            function () {
                console.log('开始上传！');
                console.log(this.uploader.queue);
                /** @type {?} */
                var loadingConfig = {
                    message: this.i18nResource['import_loading']
                };
                this.loadingService.show(loadingConfig);
                /** @type {?} */
                var len = this.uploader.queue.length;
                if (len === 0) {
                    this.notify.info(this.choose_truefile);
                    this.loadingService.clearAll();
                    return;
                }
                /** @type {?} */
                var lastFileItem = this.uploader.queue[len - 1];
                /** @type {?} */
                var maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
                if (lastFileItem.file.size > maxFileSize) {
                    this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
                    this.loadingService.clearAll();
                    return;
                }
                /** @type {?} */
                var su = this.importOption.su;
                /** @type {?} */
                var fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/dataimportvmaction?su=' + su;
                /** @type {?} */
                var headers = [{ name: 'su', value: su }];
                if (!isNullOrUndefined(this.extendInfo)) {
                    /** @type {?} */
                    var enableSecurityLevel = ( /** @type {?} */(this.extendInfo['enableSecurityLevel']));
                    if (enableSecurityLevel) {
                        headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                        /** @type {?} */
                        var securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                        /** @type {?} */
                        var securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                        headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                        headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                        headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
                    }
                }
                /** @type {?} */
                var suffix = '';
                if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
                    suffix = FileTypeUtil.getFileExtension(this.valueField);
                }
                /** @type {?} */
                var globalVar = '';
                if (!isNullOrUndefined(this.importOption['GlobalParam'])) {
                    if (typeof (this.importOption['GlobalParam']) === 'object') {
                        globalVar = JSON.stringify(this.importOption['GlobalParam']);
                    }
                    else {
                        globalVar = this.importOption['GlobalParam'];
                    }
                }
                /** @type {?} */
                var funcId = '';
                if (!isNullOrUndefined(this.importOption.funcId)) {
                    funcId = this.importOption.funcId;
                }
                headers.push({ name: 'ruleId', value: this.currentRuleId });
                headers.push({ name: 'globalParam', value: globalVar });
                headers.push({ name: 'suffix', value: suffix });
                headers.push({ name: 'funcId', value: funcId });
                headers.push({ name: 'securityLevelName', value: this.securityLevelName });
                this.uploader.setOptions({
                    url: fixedUrl,
                    method: 'POST',
                    autoUpload: false,
                    itemAlias: 'uploadedfile',
                    headers: headers
                });
                this.uploader.uploadItem(lastFileItem);
            };
        // 取消事件
        // 取消事件
        /**
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.Cancel =
            // 取消事件
            /**
             * @return {?}
             */
            function () {
                this.needDestroy.emit();
            };
        // 上传失败后方法
        // 上传失败后方法
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.ErrorLog =
            // 上传失败后方法
            /**
             * @param {?} item
             * @param {?} response
             * @param {?} status
             * @param {?} headers
             * @return {?}
             */
            function (item, response, status, headers) {
                this.loadingService.clearAll();
                try {
                    /** @type {?} */
                    var temRes = JSON.parse(response);
                    this.msgService.error(this.upload_fail + temRes.message);
                }
                catch (_a) {
                    this.msgService.error(this.upload_fail + response);
                }
                this.Close();
                /** @type {?} */
                var len = this.uploader.queue.length;
                if (len > 0) {
                    this.uploader.queue.splice(0, 1);
                }
            };
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.Import = /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
            function (item, response, status, headers) {
                switch (this.methodType) {
                    case MethodType.CommonImport:
                        this.DataImportById(item, response, status, headers);
                        break;
                    case MethodType.ImportSubTableDetail:
                        // this.ImportSubTable(item, response, status, headers, suffix);
                        break;
                }
            };
        // 显示校验结果
        // 显示校验结果
        /**
         * @private
         * @param {?} commonParams
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.ShowValidatedResult =
            // 显示校验结果
            /**
             * @private
             * @param {?} commonParams
             * @return {?}
             */
            function (commonParams) {
                var _this = this;
                /** @type {?} */
                var importResult = commonParams.importResult;
                /** @type {?} */
                var loadingParam = commonParams.loadingParam;
                if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                    loadingParam.loadingService.clearAll();
                    /** @type {?} */
                    var compFactory = this.resolver.resolveComponentFactory(ValidateFormComponent);
                    /** @type {?} */
                    var cmpRef = compFactory.create(this.injector);
                    cmpRef.instance.validateResult = importResult.validatedResults;
                    cmpRef.instance.su = commonParams.su;
                    cmpRef.instance.i18nResource = commonParams.i18nResource;
                    cmpRef.instance.loadingParam = loadingParam;
                    /** @type {?} */
                    var validateModalConfig = {
                        title: this.i18nResource['validate_result_show'],
                        width: 950,
                        height: 550,
                        buttons: cmpRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog_1 = this.modalService.show(cmpRef, validateModalConfig);
                    //0代表按钮中止或X点击；1代表按钮继续
                    /** @type {?} */
                    var closed_1 = 0;
                    dialog_1.dialog.instance.closed.subscribe(( /**
                     * @return {?}
                     */function () {
                        if (closed_1 === 0) {
                            _this.notify.info(_this.i18nResource['after_validate_suspend']);
                            _this.needDestroy.emit();
                        }
                    }));
                    cmpRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        closed_1 = 0;
                        dialog_1.close();
                    }));
                    cmpRef.instance.okModal.subscribe(( /**
                     * @param {?} validatedInfoList
                     * @return {?}
                     */function (validatedInfoList) {
                        closed_1 = 1;
                        dialog_1.close();
                        loadingParam.loadingService.show(loadingParam.loadingConfig);
                        commonParams.importParam['validatedInfoList'] = validatedInfoList;
                        //todo
                        // this.Import4HandCraft(commonParams);
                    }));
                }
            };
        // 上传成功后方法
        // 上传成功后方法
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */
        ImportDialogHandcraftComponent.prototype.DataImportById =
            // 上传成功后方法
            /**
             * @param {?} item
             * @param {?} response
             * @param {?} status
             * @param {?} headers
             * @return {?}
             */
            function (item, response, status, headers) {
                console.log(status);
                this.loadingService.clearAll();
                /** @type {?} */
                var importResult = ( /** @type {?} */(JSON.parse(response)));
                /** @type {?} */
                var loadingConfig = {
                    message: this.i18nResource['import_loading']
                };
                /** @type {?} */
                var loadingParam = {
                    loadingService: this.loadingService,
                    loadingConfig: loadingConfig
                };
                /** @type {?} */
                var commonParams = new CommonParams();
                commonParams.loadingParam = loadingParam;
                commonParams.i18nResource = this.i18nResource;
                commonParams.su = this.importOption.su;
                commonParams.importResult = importResult;
                if (importResult.succeed === true) {
                    if (importResult.formData && importResult.formData.length > 0) {
                        if (typeof (importResult.formData[0]) !== 'object') {
                            /** @type {?} */
                            var formDataObjArray_1 = [];
                            importResult.formData.forEach(( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                formDataObjArray_1.push(JSON.parse(e));
                            }));
                            importResult.formData = formDataObjArray_1;
                        }
                    }
                    this.needDestroy.emit(importResult);
                    //导入成功如果展示校验结果，只能是校验策略是忽略，所有校验结果都是error
                    this.ShowValidatedResult(commonParams);
                }
                else {
                    if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                        this.ShowValidatedResult(commonParams);
                    }
                    else {
                        /** @type {?} */
                        var errorlevel = importResult.errorLevel;
                        if (errorlevel === 'Info') {
                            this.notify.info(importResult.message);
                        }
                        else if (errorlevel === 'Warning') {
                            this.msgService.warning(importResult.message);
                        }
                        else {
                            this.msgService.error(this.import_fail + importResult.message);
                        }
                        this.needDestroy.emit(importResult);
                    }
                }
            };
        ImportDialogHandcraftComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-import-dialog-handcraft',
                        template: "<!-- <div class=\"container\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n                <td>\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td>\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule === false\">\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td>\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label for=\"f_upload\">{{import_file}}</label>\n                </td>\n                <td>\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\n                        (change)=\"selectedFileOnChange($event)\" />\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n  <div class=\"col-12\" style=\"margin-top: 67px\">\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{rule_list}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\n                       [enableClear]=\"false\"\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n          </input-group>\n        </div>\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\n      </div>\n    </div>\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{file_type}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\n                             [textField]=\"'label'\"\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\n        </div>\n        <span>&nbsp;</span>\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n\n      </div>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{import_file}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\n                 [accept]=\"acceptFileType\"\n                 (change)=\"selectedFileOnChange($event)\"/>\n          <div class=\"input-group\">\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\n                   [(ngModel)]=\"fileName\"\n                   [placeholder]=\"import_placeholder\">\n            <span class=\"input-group-btn\">\n                            <button class=\"btn btn-primary\" type=\"button\"\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\n                        </span>\n          </div>\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\n        </div>\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\n      </div>\n    </div>\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\n        </div>\n      </div>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\n    </div>\n\n\n  </div>\n</form>\n\n\n<ng-template #selectFooter>\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\n\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>\n",
                        styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
                    }] }
        ];
        /** @nocollapse */
        ImportDialogHandcraftComponent.ctorParameters = function () {
            return [
                { type: DataImportService },
                { type: i1$1.NotifyService },
                { type: i3.LoadingService },
                { type: i5.HttpClient },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: uiMessager.MessagerService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        ImportDialogHandcraftComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            ruleId: [{ type: i0.Input }],
            importOption: [{ type: i0.Input }],
            methodType: [{ type: i0.Input }],
            subject: [{ type: i0.Input }],
            recordRule: [{ type: i0.Input }],
            fileUpload: [{ type: i0.ViewChild, args: ['fileUpload',] }],
            needDestroy: [{ type: i0.Output }]
        };
        return ImportDialogHandcraftComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExportCustomSelectHandcraftComponent = /** @class */ (function () {
        function ExportCustomSelectHandcraftComponent(dataExportService, notify, http, loadingService, injector, modalService, resolver) {
            var _this = this;
            this.dataExportService = dataExportService;
            this.notify = notify;
            this.http = http;
            this.loadingService = loadingService;
            this.injector = injector;
            this.modalService = modalService;
            this.resolver = resolver;
            this.ruleId = '';
            this.frameContext = null;
            this.subject = null;
            this.exportOption = null;
            this.needDestroy = new i0.EventEmitter();
            this.enableRuntimeCustom = false;
            // 记录的规则
            this.recordRule = null;
            this.currentRuleName = '';
            this.currentRuleId = '';
            this.currentRuleFileType = '';
            this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
            this.loadingComp = null;
            this.fileListItems = [
                { id: FileConst.xls, label: FileConst.xls },
                { id: FileConst.xlsx, label: FileConst.xlsx },
                { id: FileConst.xlsm, label: FileConst.xlsm },
                { id: FileConst.et, label: FileConst.et },
            ];
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.export_success = res['export_success'];
                _this.export_fail = res['export_fail'];
                _this.file_type = res['file_type'];
                _this.ie_cancel = res['ie_cancel'];
                _this.ie_ok = res['ie_ok'];
                _this.rule_list = res['rule_list'];
                _this.i18nResource = res;
            }));
        }
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.currentRuleId = this.recordRule.ruleId;
                this.currentRuleName = this.recordRule.ruleName;
                this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
                this.currentRuleFileType = this.valueField;
                if (this.exportOption.enableRuntimeCustom === true) {
                    this.enableRuntimeCustom = true;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.openSelectRule = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                this.loadingComp = this.loadingService.show();
                //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
                /** @type {?} */
                var body = {
                    ruleId: this.ruleId,
                    ruleType: 1,
                    voId: this.exportOption.voId,
                    methodType: this.methodType,
                    exportChildNodeCode: this.exportOption.exportChildNodeCode
                };
                this.http.post(url, body).subscribe(( /**
                 * @param {?} RuleMgrs
                 * @return {?}
                 */function (RuleMgrs) {
                    _this.loadingService.clearAll();
                    if (RuleMgrs.length === 0) {
                        _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                        return;
                    }
                    /** @type {?} */
                    var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
                    /** @type {?} */
                    var compRef = compFactory.create(_this.injector);
                    compRef.instance.ruleId = _this.ruleId;
                    compRef.instance.voId = _this.exportOption.voId;
                    compRef.instance.ruleType = 1;
                    compRef.instance.RuleMgrsData = RuleMgrs;
                    /** @type {?} */
                    var modalConfig = {
                        title: _this.rule_list,
                        width: 950,
                        height: 500,
                        buttons: compRef.instance.modalFooter,
                        showHeader: true,
                        showMaxButton: false,
                        showButtons: true
                    };
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                    compRef.instance.closeModal.subscribe(( /**
                     * @return {?}
                     */function () {
                        dialog.close();
                    }));
                    compRef.instance.okModal.subscribe(( /**
                     * @param {?} RuleMgr
                     * @return {?}
                     */function (RuleMgr) {
                        _this.currentRuleId = RuleMgr.id;
                        _this.currentRuleName = RuleMgr.name;
                        _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                        _this.currentRuleFileType = _this.valueField;
                        dialog.close();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingService.clearAll();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.Ok = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = null;
                if (this.valueField !== this.currentRuleFileType) {
                    suffix = FileTypeUtil.getFileExtension(this.valueField);
                }
                switch (this.methodType) {
                    case MethodType.CommonExport:
                        this.dataExportService.ExportById4HandCraft(this.currentRuleId, this.exportOption, suffix);
                        this.exportComplete();
                        break;
                    case MethodType.ExportCurrentTableData:
                        this.notify.warning('不支持导出当前页');
                        this.exportComplete();
                        break;
                    case MethodType.ExportCurrentChildData:
                        this.notify.warning('不支持导出子表数据');
                        this.exportComplete();
                        break;
                }
            };
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.exportComplete = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var exportUnscribe = this.dataExportService.export.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === '') {
                        _this.notify.success(_this.export_success);
                        exportUnscribe.unsubscribe();
                        /** @type {?} */
                        var res = {
                            type: 'success',
                            data: null,
                            other: null
                        };
                        _this.subject.next(res);
                        _this.subject.complete();
                    }
                    else {
                        /** @type {?} */
                        var errorlevel = _this.dataExportService.errorlevel;
                        if (errorlevel === 'Info') {
                            _this.notify.info(data);
                        }
                        else if (errorlevel === 'Warning') {
                            _this.notify.warning(data);
                        }
                        else {
                            _this.notify.error(_this.export_fail + data);
                        }
                        /** @type {?} */
                        var res = {
                            type: 'fail',
                            data: null,
                            other: data
                        };
                        _this.subject.next(res);
                        _this.subject.complete();
                    }
                    exportUnscribe.unsubscribe();
                    _this.needDestroy.emit();
                }));
            };
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.canSelectFileType = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var suffix = FileTypeUtil.getFileExtension(this.valueField);
                /** @type {?} */
                var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
                if (canList.findIndex(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) { return t === suffix; })) < 0) {
                    return false;
                }
                return true;
            };
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.needDestroy.emit();
            };
        /**
         * @return {?}
         */
        ExportCustomSelectHandcraftComponent.prototype.Cancel = /**
         * @return {?}
         */
            function () {
                this.needDestroy.emit(true);
            };
        ExportCustomSelectHandcraftComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-export-custom-select-handcraft',
                        template: "<!-- <div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n  <div class=\"col-12\" style=\"margin-top: 72px\">\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{rule_list}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n          </input-group>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{file_type}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list [readonly]=\"canSelectFileType() === false\" id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\"\n                             [idField]=\"'id'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"fileListItems\"></farris-combo-list>\n        </div>\n        <span>&nbsp;&nbsp;</span>\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\" class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n        <span *ngIf=\"enableRuntimeCustom === false\" class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n        <span  class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n      </div>\n    </div>\n\n\n\n  </div>\n</form>\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>\n",
                        styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longlen{width:400px}"]
                    }] }
        ];
        /** @nocollapse */
        ExportCustomSelectHandcraftComponent.ctorParameters = function () {
            return [
                { type: DataExportService },
                { type: i1$1.NotifyService },
                { type: i5.HttpClient },
                { type: i3.LoadingService },
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        ExportCustomSelectHandcraftComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            ruleId: [{ type: i0.Input }],
            methodType: [{ type: i0.Input }],
            frameContext: [{ type: i0.Input }],
            exportOption: [{ type: i0.Input }],
            needDestroy: [{ type: i0.Output }]
        };
        return ExportCustomSelectHandcraftComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataieHandcraftService = /** @class */ (function () {
        function DataieHandcraftService(resolver, modalService, injector, dataExportService, notify, customIEService, http, loadingService) {
            var _this = this;
            this.resolver = resolver;
            this.modalService = modalService;
            this.injector = injector;
            this.dataExportService = dataExportService;
            this.notify = notify;
            this.customIEService = customIEService;
            this.http = http;
            this.loadingService = loadingService;
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.data_import = res['data_import'];
                _this.data_export = res['data_export'];
                _this.export_success = res['export_success'];
                _this.export_fail = res['export_fail'];
                _this.data_export_customfile = res['data_export_customfile'];
                _this.i18nResource = res;
            }));
        }
        /**
         * 通用导出方法
         * @param type
         * @param ruleID
         * @param option
         */
        /**
         * 通用导出方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.CommonDataExport = /**
         * 通用导出方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (type, ruleID, option) {
                if (type === 1) {
                    console.log('执行方法：ExportCurrentListData');
                    throw new Error('不支持配置该类型:1');
                }
                else if (type === 2) {
                    console.log('执行方法：ExportByModel');
                    throw new Error('不支持配置该类型:2');
                }
                else if (type === 3) {
                    console.log('执行方法：ExportCurrentChildData');
                    // return this.ExportCurrentChildData(ruleID, option);
                    throw new Error('不支持配置该类型:3');
                }
                else if (type === 0) {
                    console.log('执行方法：ExportByRule');
                    return this.ExportByRule(ruleID, option);
                }
                else {
                    console.log('执行方法：ExportByRule');
                    return this.ExportByRule(ruleID, option);
                }
            };
        /**
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.ExportByRule = /**
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ExportCommonEntry(ruleID, option, MethodType.CommonExport).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.ExportCurrentChildData = /**
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentChildData).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
        DataieHandcraftService.prototype.ExportCommonEntry = /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
            function (ruleID, option, methodType) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var optionJson = this.ParseExportJson(option);
                console.log(optionJson);
                if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.voId)) {
                    this.notify.warning("未配置规则id，且无法获取到表单对应的voId，请检查");
                    /** @type {?} */
                    var res = {
                        type: 'close',
                        data: null,
                        other: null
                    };
                    subject.next(res);
                    return subject;
                }
                if (methodType === MethodType.ExportCurrentChildData) {
                    if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.exportChildNodeCode)) {
                        //导出子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                        this.notify.warning("规则id为空时，根据Vo查找规则，导出子表必须配置子表节点");
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                        return subject;
                    }
                }
                if (isNullOrEmpty(ruleID) || optionJson.enableRuntimeCustom === true) {
                    this.StartLoading();
                    /** @type {?} */
                    var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
                    /** @type {?} */
                    var postBody = {
                        body: {
                            ruleId: ruleID,
                            ruleType: 1,
                            voId: optionJson.voId,
                            needModelConvert: optionJson.needModelConvert === true,
                            methodType: methodType,
                            exportChildNodeCode: optionJson.exportChildNodeCode,
                            enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                        }
                    };
                    this.http.post(url, postBody.body).subscribe(( /**
                     * @param {?} recordRule
                     * @return {?}
                     */function (recordRule) {
                        _this.CloseLoading();
                        optionJson.voId = recordRule.voId;
                        _this.ExportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe(( /**
                         * @param {?} s
                         * @return {?}
                         */function (s) {
                            subject.next(s);
                            subject.complete();
                        }));
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.CloseLoading();
                        _this.notify.error(error.error.Message);
                        console.log(error.error.Message);
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: error.error.Message
                        };
                        subject.next(res);
                    }));
                }
                else {
                    this.ExportByRuleImpl(ruleID, optionJson, methodType).subscribe(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        subject.next(s);
                        subject.complete();
                    }));
                }
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} mType
         * @param {?=} recordRule
         * @return {?}
         */
        DataieHandcraftService.prototype.ExportByRuleImpl = /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} mType
         * @param {?=} recordRule
         * @return {?}
         */
            function (ruleID, optionJson, mType, recordRule) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                    if (optionJson.customExportTitle.length > 20) {
                        this.notify.warning('自定义标题名称的长度太长');
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                        return subject;
                    }
                    if (DataIEUtils.JudgeIllegalChar(optionJson.customExportTitle)) {
                        this.notify.warning('自定义标题名称存在不合法字符');
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                        return subject;
                    }
                }
                if (optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
                    /** @type {?} */
                    var compFactory = this.resolver.resolveComponentFactory(ExportCustomSelectHandcraftComponent);
                    /** @type {?} */
                    var cmpRef = compFactory.create(this.injector);
                    cmpRef.instance.ruleId = ruleID;
                    cmpRef.instance.exportOption = optionJson;
                    cmpRef.instance.recordRule = recordRule;
                    cmpRef.instance.subject = subject;
                    cmpRef.instance.methodType = MethodType.CommonExport;
                    /** @type {?} */
                    var title = this.data_export;
                    if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                        title = optionJson.customExportTitle;
                    }
                    /** @type {?} */
                    var exportModalConfig = {
                        title: title,
                        width: 530,
                        height: 342,
                        buttons: cmpRef.instance.modalFooter,
                        showCloseButton: true,
                        showMaxButton: false,
                        showMinButton: false,
                        showButtons: true,
                        resizable: false
                    };
                    /** @type {?} */
                    var dialog_1 = this.modalService.show(cmpRef, exportModalConfig);
                    dialog_1.dialog.instance.closed.subscribe(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                    }));
                    cmpRef.instance.needDestroy.subscribe(( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        dialog_1.close();
                    }));
                }
                else {
                    if (!isNullOrUndefined(recordRule) && !isNullOrEmpty(recordRule.ruleId)) {
                        ruleID = recordRule.ruleId;
                    }
                    if (mType == MethodType.CommonExport) {
                        this.dataExportService.ExportById4HandCraft(ruleID, optionJson);
                    }
                    else if (mType == MethodType.ExportCurrentTableData) {
                        throw new Error('不支持该类型:ExportCurrentTableData');
                    }
                    else {
                        throw new Error('不支持该类型:ExportCurrentChildData');
                    }
                    /** @type {?} */
                    var unscriber_1 = this.dataExportService.export.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data === '') {
                            /** @type {?} */
                            var res = {
                                type: 'success',
                                data: null,
                                other: null
                            };
                            subject.next(res);
                            subject.complete();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.dataExportService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.notify.warning(data);
                            }
                            else {
                                _this.notify.error(_this.export_fail + data);
                            }
                            /** @type {?} */
                            var res = {
                                type: 'fail',
                                data: null,
                                other: data
                            };
                            subject.next(res);
                            subject.complete();
                        }
                        unscriber_1.unsubscribe();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.notify.error(error.error.Message);
                        /** @type {?} */
                        var res = {
                            type: 'fail',
                            data: null,
                            other: error.error.Message
                        };
                        subject.next(res);
                        subject.complete();
                    }));
                }
                return subject;
            };
        /**
         * 通用导入方法
         * @param type
         * @param ruleID
         * @param option
         */
        /**
         * 通用导入方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.CommonDataImport = /**
         * 通用导入方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (type, ruleID, option) {
                if (type === 1) {
                    console.log('执行方法：ImportSublistData');
                    return this.ImportSublistData(ruleID, option);
                }
                else if (type === 2) {
                    console.log('执行方法：ImportByModel');
                    throw new Error('不支持配置该类型:2');
                }
                else if (type === 0) {
                    console.log('执行方法：ImportByRule');
                    return this.ImportByRule(ruleID, option);
                }
                else {
                    console.log('执行方法：ImportByRule');
                    return this.ImportByRule(ruleID, option);
                }
            };
        // 普通导入
        // 普通导入
        /**
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.ImportByRule =
            // 普通导入
            /**
             * @param {?} ruleID
             * @param {?} option
             * @return {?}
             */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ImportCommonEntry(ruleID, option, MethodType.CommonImport).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        // 子表导入
        // 子表导入
        /**
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.ImportSublistData =
            // 子表导入
            /**
             * @param {?} ruleID
             * @param {?} option
             * @return {?}
             */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ImportCommonEntry(ruleID, option, MethodType.ImportSubTableDetail).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
        DataieHandcraftService.prototype.ImportCommonEntry = /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
            function (ruleID, option, methodType) {
                var _this = this;
                console.log(option);
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var optionJson = this.ParseImportJson(option);
                /** @type {?} */
                var su = optionJson.su;
                if (methodType === MethodType.ImportSubTableDetail) {
                    if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.importChildNodeCode)) {
                        //导入子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                        this.notify.warning("规则id为空时，根据模型查找规则，导入子表必须配置子表节点");
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                        return subject;
                    }
                }
                this.StartLoading();
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
                /** @type {?} */
                var postBody = {
                    body: {
                        ruleId: ruleID,
                        su: su,
                        ruleType: 0,
                        voId: optionJson.voId,
                        needModelConvert: optionJson.needModelConvert === true,
                        methodType: methodType,
                        importChildNodeCode: optionJson.importChildNodeCode,
                        enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                    }
                };
                this.http.post(url, postBody.body).subscribe(( /**
                 * @param {?} recordRule
                 * @return {?}
                 */function (recordRule) {
                    _this.CloseLoading();
                    optionJson.voId = recordRule.voId;
                    _this.ImportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        subject.next(s);
                        subject.complete();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.CloseLoading();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                    /** @type {?} */
                    var res = {
                        type: 'close',
                        data: null,
                        other: error.error.Message
                    };
                    subject.next(res);
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} methodType
         * @param {?=} recordRule
         * @return {?}
         */
        DataieHandcraftService.prototype.ImportByRuleImpl = /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} methodType
         * @param {?=} recordRule
         * @return {?}
         */
            function (ruleID, optionJson, methodType, recordRule) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                    if (optionJson.customImportTitle.length > 20) {
                        this.notify.warning('自定义标题名称的长度太长');
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                        return subject;
                    }
                    if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                        this.notify.warning('自定义标题名称存在不合法字符');
                        /** @type {?} */
                        var res = {
                            type: 'close',
                            data: null,
                            other: null
                        };
                        subject.next(res);
                        return subject;
                    }
                }
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ImportDialogHandcraftComponent);
                /** @type {?} */
                var cmpRef = compFactory.create(this.injector);
                cmpRef.instance.ruleId = ruleID;
                cmpRef.instance.recordRule = recordRule;
                cmpRef.instance.importOption = optionJson;
                if (methodType == MethodType.CommonImport) {
                    cmpRef.instance.methodType = MethodType.CommonImport;
                }
                else {
                    cmpRef.instance.methodType = MethodType.ImportSubTableDetail;
                }
                cmpRef.instance.subject = subject;
                /** @type {?} */
                var title = this.data_import;
                if (!isNullOrUndefined(optionJson.customImportTitle)) {
                    title = optionJson.customImportTitle;
                }
                /** @type {?} */
                var importModalConfig = {
                    title: title,
                    width: 530,
                    height: 342,
                    buttons: cmpRef.instance.modalFooter,
                    showCloseButton: true,
                    showMaxButton: false,
                    showMinButton: false,
                    showButtons: true,
                    resizable: false
                };
                /** @type {?} */
                var dialog = this.modalService.show(cmpRef, importModalConfig);
                dialog.dialog.instance.closed.subscribe(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var res = {
                        type: 'close',
                        data: null,
                        other: null
                    };
                    subject.next(res);
                }));
                cmpRef.instance.needDestroy.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    dialog.close();
                    /** @type {?} */
                    var importResult = ( /** @type {?} */(data));
                    if (!isNullOrUndefined(importResult)) {
                        /** @type {?} */
                        var res = void 0;
                        if (importResult.succeed) {
                            res = {
                                type: 'success',
                                data: importResult,
                                other: null
                            };
                        }
                        else {
                            res = {
                                type: 'fail',
                                data: importResult,
                                other: null
                            };
                        }
                        subject.next(res);
                        subject.complete();
                    }
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.ParseExportJson = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                if (typeof (option) === 'object') {
                    return option;
                }
                if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
                    return {};
                }
                /** @type {?} */
                var optionJson = null;
                try {
                    optionJson = JSON.parse(option);
                }
                catch (_a) {
                    this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
                    return {};
                }
                if (typeof (optionJson) !== 'object') {
                    optionJson = {};
                }
                return optionJson;
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        DataieHandcraftService.prototype.ParseImportJson = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                if (typeof (option) === 'object') {
                    return option;
                }
                if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
                    return {};
                }
                /** @type {?} */
                var optionJson = null;
                try {
                    optionJson = JSON.parse(option);
                }
                catch (_a) {
                    this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
                    return {};
                }
                if (typeof (optionJson) !== 'object') {
                    optionJson = {};
                }
                /** @type {?} */
                var globalParam = optionJson['globalParam'];
                if (globalParam !== undefined && globalParam !== null) {
                    optionJson['GlobalParam'] = globalParam;
                }
                return optionJson;
            };
        /**
         * @return {?}
         */
        DataieHandcraftService.prototype.StartLoading = /**
         * @return {?}
         */
            function () {
                if (this.loadingService !== undefined && this.loadingService !== null) {
                    this.loadingService.show();
                }
            };
        /**
         * @return {?}
         */
        DataieHandcraftService.prototype.CloseLoading = /**
         * @return {?}
         */
            function () {
                if (this.loadingService !== undefined && this.loadingService !== null) {
                    this.loadingService.clearAll();
                }
            };
        DataieHandcraftService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DataieHandcraftService.ctorParameters = function () {
            return [
                { type: i0.ComponentFactoryResolver },
                { type: i1.BsModalService },
                { type: i0.Injector },
                { type: DataExportService },
                { type: i1$1.NotifyService },
                { type: CustomDataIEService },
                { type: i5.HttpClient },
                { type: i3.LoadingService }
            ];
        };
        /** @nocollapse */ DataieHandcraftService.ngInjectableDef = i0.defineInjectable({ factory: function DataieHandcraftService_Factory() { return new DataieHandcraftService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i1.BsModalService), i0.inject(i0.INJECTOR), i0.inject(DataExportService), i0.inject(i1$1.NotifyService), i0.inject(CustomDataIEService), i0.inject(i5.HttpClient), i0.inject(i3.LoadingService)); }, token: DataieHandcraftService, providedIn: "root" });
        return DataieHandcraftService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent9Component = /** @class */ (function () {
        function ExtendComponent9Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent9Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent9Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component9',
                        template: "<p>\n  extend-component9 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent9Component.ctorParameters = function () { return []; };
        return ExtendComponent9Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent8Component = /** @class */ (function () {
        function ExtendComponent8Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent8Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent8Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component8',
                        template: "<p>\n  extend-component8 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent8Component.ctorParameters = function () { return []; };
        return ExtendComponent8Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent7Component = /** @class */ (function () {
        function ExtendComponent7Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent7Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent7Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component7',
                        template: "<p>\n  extend-component7 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent7Component.ctorParameters = function () { return []; };
        return ExtendComponent7Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent6Component = /** @class */ (function () {
        function ExtendComponent6Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent6Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent6Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component6',
                        template: "<p>\n  extend-component6 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent6Component.ctorParameters = function () { return []; };
        return ExtendComponent6Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent5Component = /** @class */ (function () {
        function ExtendComponent5Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent5Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent5Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component5',
                        template: "<p>\n  extend-component5 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent5Component.ctorParameters = function () { return []; };
        return ExtendComponent5Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent4Component = /** @class */ (function () {
        function ExtendComponent4Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent4Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent4Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component4',
                        template: "<p>\n  extend-component4 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent4Component.ctorParameters = function () { return []; };
        return ExtendComponent4Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent3Component = /** @class */ (function () {
        function ExtendComponent3Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent3Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent3Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component3',
                        template: "<p>\n  extend-component3 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent3Component.ctorParameters = function () { return []; };
        return ExtendComponent3Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendComponent2Component = /** @class */ (function () {
        function ExtendComponent2Component() {
        }
        /**
         * @return {?}
         */
        ExtendComponent2Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        ExtendComponent2Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-extend-component2',
                        template: "<p>\n  extend-component2 works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ExtendComponent2Component.ctorParameters = function () { return []; };
        return ExtendComponent2Component;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RuleCustomSettingComponent = /** @class */ (function () {
        function RuleCustomSettingComponent() {
        }
        /**
         * @return {?}
         */
        RuleCustomSettingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        RuleCustomSettingComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hlo-rule-custom-setting',
                        template: "<p>\n  rule-custom-setting works!\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RuleCustomSettingComponent.ctorParameters = function () { return []; };
        return RuleCustomSettingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RuleIdHelpComponent = /** @class */ (function () {
        function RuleIdHelpComponent(notify, http, loadingService) {
            this.notify = notify;
            this.http = http;
            this.loadingService = loadingService;
            this.closeModal = new i0.EventEmitter();
            this.afterHelpConfirm = new i0.EventEmitter();
            this.fileTypes = [
                { label: 'Office Excel97-2003(*.xls)', value: RuleFileType[0] },
                { label: 'Office Excel Macro(*.xlsm)', value: RuleFileType[1] },
                { label: 'Office Excel(*.xlsx)', value: RuleFileType[2] },
                { label: 'WPS Table(*.et)', value: RuleFileType[3] },
                { label: 'WPS Table(Template File)(*.ett)', value: RuleFileType[4] },
                { label: 'XML Table(*.xml)', value: RuleFileType[5] },
                { label: 'PDF File(*.pdf)', value: RuleFileType[6] },
                { label: 'CSV File(*.csv)', value: RuleFileType[7] }
            ];
        }
        /**
         * @return {?}
         */
        RuleIdHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.RuleIdHelpColumn = [
                    { field: 'code', width: 180, title: '编号', halign: 'center', align: 'center', sortable: true },
                    { field: 'name', width: 180, title: '名称', halign: 'center', align: 'center', sortable: true },
                    // { field: 'bizEntityName', width: 150, title: '数据实体', halign: 'center', align: 'center', sortable: true },
                    {
                        field: 'fileType', width: 180, title: '文件类型', halign: 'center', align: 'center', sortable: true,
                        formatter: { type: 'enum', options: { valueField: 'value', textField: 'label', data: this.fileTypes } }
                    },
                    { field: 'lastModifiedTime', width: 150, title: '最后修改时间', halign: 'center', align: 'center', sortable: true }
                    // { field: 'creator', width: 150, title: this.ruleselect_creator, halign: 'center', align: 'center', sortable: true }
                ];
                this.loadingService.show();
                /** @type {?} */
                var url = "/api/runtime/dip/v1.0/dataIeRuleManage/getImpExpHelpRules";
                /** @type {?} */
                var requestBody = {
                    "ruleType": this.ruleType,
                    //导入为0，导出为1
                    "beId": this.beId,
                    "voId": this.voId
                };
                this.http.post(url, requestBody).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.loadingService.clearAll();
                    _this.RuleIdHelpData = res;
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.loadingService.clearAll();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
            };
        /**
         * @return {?}
         */
        RuleIdHelpComponent.prototype.okHandler = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectedRow = this.RuleIdHelpGrid.selectedRow;
                if (selectedRow === null) {
                    this.notify.info('请选择一条规则');
                    return;
                }
                this.ruleId = selectedRow.data.id;
                this.closeModal.emit(this.ruleId);
            };
        /**
         * @return {?}
         */
        RuleIdHelpComponent.prototype.cancelHandler = /**
         * @return {?}
         */
            function () {
                this.closeModal.emit();
            };
        RuleIdHelpComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rule-id-help',
                        template: "\n  <div class=\"d-flex flex-fill\" style=\"height:100%;\">\n    <farris-datagrid #RuleIdHelpGrid id=\"rule-mgrs-data\" [fit]=\"true\" [fitColumns]=\"true\" [columns]=\"RuleIdHelpColumn\"\n                     [pagination]=\"false\"\n                     [showLineNumber]=\"true\" [keepSelect]=\"true\" [sizeType]=\"'sm'\" [data]=\"RuleIdHelpData\">\n    </farris-datagrid>\n  </div>\n\n  <ng-template #selectFooter>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"cancelHandler()\">\u53D6\u6D88</button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"okHandler()\">\u786E\u5B9A</button>\n  </ng-template>\n\n\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RuleIdHelpComponent.ctorParameters = function () {
            return [
                { type: i1$1.NotifyService },
                { type: i5.HttpClient },
                { type: i3.LoadingService }
            ];
        };
        RuleIdHelpComponent.propDecorators = {
            modalFooter: [{ type: i0.ViewChild, args: ['selectFooter',] }],
            RuleIdHelpGrid: [{ type: i0.ViewChild, args: ['RuleIdHelpGrid',] }],
            ruleId: [{ type: i0.Output }],
            closeModal: [{ type: i0.Output }],
            afterHelpConfirm: [{ type: i0.Output }],
            ruleType: [{ type: i0.Input }],
            beId: [{ type: i0.Input }],
            voId: [{ type: i0.Input }]
        };
        return RuleIdHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataieRuleHelpComponent = /** @class */ (function () {
        function DataieRuleHelpComponent(injector, modalService, resolver) {
            this.injector = injector;
            this.modalService = modalService;
            this.resolver = resolver;
        }
        /**
         * @return {?}
         */
        DataieRuleHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 打开导入导出规则id选择帮助
         * @param ruleType 规则类型，导入为0，导出为1
         * @param voId
         * @param beId
         */
        /**
         * 打开导入导出规则id选择帮助
         * @param {?} ruleType 规则类型，导入为0，导出为1
         * @param {?} voId
         * @param {?} beId
         * @return {?}
         */
        DataieRuleHelpComponent.prototype.showRuleIdHelp = /**
         * 打开导入导出规则id选择帮助
         * @param {?} ruleType 规则类型，导入为0，导出为1
         * @param {?} voId
         * @param {?} beId
         * @return {?}
         */
            function (ruleType, voId, beId) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(RuleIdHelpComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.beId = beId;
                compRef.instance.ruleType = ruleType;
                compRef.instance.voId = voId;
                /** @type {?} */
                var modalConfig = {
                    title: '规则选择',
                    width: 920,
                    height: 500,
                    buttons: compRef.instance.modalFooter,
                    showHeader: true,
                    showMaxButton: false,
                    showButtons: true
                };
                /** @type {?} */
                var dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModal.subscribe(( /**
                 * @param {?} ruleId
                 * @return {?}
                 */function (ruleId) {
                    console.log(ruleId);
                    dialog.close();
                    subject.next(ruleId);
                }));
                return subject;
            };
        DataieRuleHelpComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'dataie-rule-help',
                        template: "\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        DataieRuleHelpComponent.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: i1.BsModalService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        return DataieRuleHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataImpExpModule = /** @class */ (function () {
        function DataImpExpModule() {
        }
        DataImpExpModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            ElementSelectComponent,
                            ImportDialogComponent,
                            ExportDialogComponent,
                            ValidateFormComponent,
                            FileDropDirective,
                            FileSelectDirective,
                            CustomImportDialogComponent,
                            ExportCustomSelectComponent,
                            RuleSelectComponent,
                            ImportDialogHandcraftComponent,
                            ExportCustomSelectHandcraftComponent,
                            //extendcomponent
                            DataieProgressComponent,
                            RuleCustomSettingComponent,
                            ExtendComponent1Component,
                            ExtendComponent2Component,
                            ExtendComponent3Component,
                            ExtendComponent4Component,
                            ExtendComponent5Component,
                            ExtendComponent6Component,
                            ExtendComponent7Component,
                            ExtendComponent8Component,
                            ExtendComponent9Component,
                            RuleIdHelpComponent,
                            DataieRuleHelpComponent,
                        ],
                        exports: [
                            ElementSelectComponent,
                            ImportDialogComponent,
                            ExportDialogComponent,
                            ValidateFormComponent,
                            CustomImportDialogComponent,
                            ExportCustomSelectComponent,
                            ImportDialogHandcraftComponent,
                            FileDropDirective,
                            FileSelectDirective,
                            RuleIdHelpComponent,
                            DataieRuleHelpComponent
                        ],
                        entryComponents: [ImportDialogComponent, ImportDialogHandcraftComponent,
                            ExportDialogComponent, ValidateFormComponent, RuleSelectComponent,
                            CustomImportDialogComponent, ExportCustomSelectComponent,
                            RuleIdHelpComponent, DataieRuleHelpComponent, ExportCustomSelectHandcraftComponent,
                            //extendcomponent
                            DataieProgressComponent,
                            RuleCustomSettingComponent,
                            ExtendComponent1Component,
                            ExtendComponent2Component,
                            ExtendComponent3Component,
                            ExtendComponent4Component,
                            ExtendComponent5Component,
                            ExtendComponent6Component,
                            ExtendComponent7Component,
                            ExtendComponent8Component,
                            ExtendComponent9Component
                        ],
                        imports: [
                            common.CommonModule,
                            kendoAngularDropdowns.DropDownsModule,
                            kendoAngularGrid.GridModule,
                            i1.ModalModule.forRoot(),
                            forms.FormsModule,
                            uiForms.FarrisFormsModule,
                            uiDialog.FarrisDialogModule,
                            kendoAngularLayout.LayoutModule,
                            kendoAngularGrid.ExcelModule,
                            kendoAngularTreeview.TreeViewModule,
                            uiFilterEditor.FilterModule,
                            uiTabs.FarrisTabsModule,
                            kendoAngularGrid.PDFModule,
                            uiDatagrid.DatagridModule,
                            uiDatagridFilter.DatagridFilterRowModule.forRoot(),
                            uiInputGroup.InputGroupModule,
                            uiMultiSelect.MultiSelectModule,
                            uiComboList.ComboListModule,
                            uiButton.FarrisButtonModule,
                            uiPopover.PopoverModule,
                            uiTooltip.FarrisTooltipModule,
                            uiProgress.ProgressModule,
                            uiLayout.LayoutModule,
                            uiSection.FarrisSectionModule
                        ],
                        providers: [DataExportService, FileOperateService, DataImportService, CustomDataIEService, DataieHandcraftService
                        ],
                        bootstrap: []
                    },] }
        ];
        return DataImpExpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataImportExportService = /** @class */ (function () {
        function DataImportExportService(modalService, resolver, injector, frameContext, dataExportService, notify, entityService, customIEService, handcraftSer, http, loadingService, dataImportService) {
            var _this = this;
            this.modalService = modalService;
            this.resolver = resolver;
            this.injector = injector;
            this.frameContext = frameContext;
            this.dataExportService = dataExportService;
            this.notify = notify;
            this.entityService = entityService;
            this.customIEService = customIEService;
            this.handcraftSer = handcraftSer;
            this.http = http;
            this.loadingService = loadingService;
            this.dataImportService = dataImportService;
            DataIEUtils.getTranslateValue(http).subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                _this.i18nResource = res;
                _this.data_import = res['data_import'];
                _this.data_export = res['data_export'];
                _this.export_success = res['export_success'];
                _this.export_fail = res['export_fail'];
                _this.data_export_customfile = res['data_export_customfile'];
                _this.rule_list = res['rule_list'];
            }));
        }
        /**
         * 根据规则导出
         * @param ruleID
         * @param option
         */
        /**
         * 根据规则导出
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ExportByRule = /**
         * 根据规则导出
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var optionJson = this.ParseExportJson(option);
                if (optionJson.packSize) {
                    //获取总共有多少条数据
                    /** @type {?} */
                    var totalData = this.frameContext.bindingData.pagingInfo.total;
                    if (isNullOrUndefined(totalData) || totalData <= 0) {
                        this.notify.warning('未获取到总数据量或数据量为0，无法进行分批打包导出，请检查');
                        subject.next(false);
                        subject.complete();
                    }
                    else {
                        /** @type {?} */
                        var filterConditions = [];
                        if (optionJson.enableScreeningScheme === true) {
                            /** @type {?} */
                            var filterConditionList = this.frameContext.uiState['filterConditionList'];
                            if (!isNullOrUndefined(filterConditionList) && filterConditionList !== '' && filterConditionList !== '[]') {
                                /** @type {?} */
                                var filterConditionListJson = [];
                                if (typeof (filterConditionList) === 'string') {
                                    filterConditionListJson = JSON.parse(filterConditionList);
                                }
                                else {
                                    filterConditionListJson = filterConditionList;
                                }
                                for (var index = 0; index < filterConditionListJson.length; index++) {
                                    /** @type {?} */
                                    var element = filterConditionListJson[index];
                                    element.Value = decodeURIComponent(element.Value);
                                    if (index === filterConditionListJson.length - 1) {
                                        element.Relation = 0;
                                    }
                                    filterConditions.push(element);
                                }
                            }
                        }
                        //分页大小，对应的每个Excel文件的数据量
                        /** @type {?} */
                        var pageSize = Number.parseInt(optionJson.packSize);
                        /** @type {?} */
                        var num = Math.ceil(totalData / pageSize);
                        /** @type {?} */
                        var packitems = [];
                        for (var i = 0; i < num; i++) {
                            /** @type {?} */
                            var packitem = {
                                ruleid: ruleID,
                                globalParam: optionJson.globalParam,
                                filter: {
                                    filterConditions: filterConditions,
                                    isUsePagination: true,
                                    pagination: {
                                        pageIndex: i + 1,
                                        pageSize: pageSize
                                    }
                                }
                            };
                            packitems.push(packitem);
                        }
                        /** @type {?} */
                        var customfilename = '打包导出' + new Date();
                        if (!isNullOrEmpty(optionJson.customfilename)) {
                            customfilename = optionJson.customfilename;
                        }
                        /** @type {?} */
                        var option_1 = {
                            package: {
                                customfilename: customfilename,
                                packitems: packitems
                            }
                        };
                        this.ExportByPackage(JSON.stringify(option_1)).subscribe(( /**
                         * @param {?} s
                         * @return {?}
                         */function (s) {
                            subject.next(s);
                            subject.complete();
                        }));
                    }
                }
                else {
                    this.ExportCommonEntry(ruleID, option, MethodType.CommonExport).subscribe(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        subject.next(s);
                        subject.complete();
                    }));
                }
                return subject;
            };
        /**
         * 根据规则导出
         * @param ruleID
         * @param option
         */
        /**
         * 根据规则导出
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ExportCurrentChildData = /**
         * 根据规则导出
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentChildData).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * 导出当前列表数据（分页）
         * @param ruleID
         * @param option
         */
        /**
         * 导出当前列表数据（分页）
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ExportCurrentListData = /**
         * 导出当前列表数据（分页）
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentTableData).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * 批量打包导出
         * @param option 配置打包信息
         */
        /**
         * 批量打包导出
         * @param {?} option 配置打包信息
         * @return {?}
         */
        DataImportExportService.prototype.ExportByPackage = /**
         * 批量打包导出
         * @param {?} option 配置打包信息
         * @return {?}
         */
            function (option) {
                var _this = this;
                console.log(option);
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var optionJson = this.ParseExportJson(option);
                this.dataExportService.ExportByPackage(this.frameContext.repository, optionJson);
                /** @type {?} */
                var unscriber = this.dataExportService.export.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data === '') {
                        _this.notify.success(_this.export_success);
                        unscriber.unsubscribe();
                        subject.next(true);
                        subject.complete();
                    }
                    else {
                        /** @type {?} */
                        var errorlevel = _this.dataExportService.errorlevel;
                        if (errorlevel === 'Info') {
                            _this.notify.info(data);
                        }
                        else if (errorlevel === 'Warning') {
                            _this.notify.warning(data);
                        }
                        else {
                            _this.notify.error(_this.export_fail + data);
                        }
                        unscriber.unsubscribe();
                        subject.next(false);
                        subject.complete();
                    }
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
        DataImportExportService.prototype.ExportCommonEntry = /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
            function (ruleID, option, methodType) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                console.log(option);
                /** @type {?} */
                var optionJson = this.ParseExportJson(option);
                if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.voId)) {
                    this.notify.warning("未配置规则id，且无法获取到表单对应的voId，请检查");
                    return subject;
                }
                if (methodType === MethodType.ExportCurrentChildData) {
                    if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.exportChildNodeCode)) {
                        //导出子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                        this.notify.warning("规则id为空时，根据Vo查找规则，导出子表必须配置子表节点");
                        return subject;
                    }
                }
                if (isNullOrEmpty(ruleID) || optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
                    /** @type {?} */
                    var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
                    this.StartLoading();
                    /** @type {?} */
                    var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
                    /** @type {?} */
                    var postBody = {
                        body: {
                            ruleId: ruleID,
                            ruleType: 1,
                            voId: optionJson.voId,
                            methodType: methodType,
                            exportChildNodeCode: optionJson.exportChildNodeCode,
                            enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                        }
                    };
                    /** @type {?} */
                    var subscriber = void 0;
                    if (!isNullOrUndefined(this.http)) {
                        subscriber = this.http.post(url, postBody.body);
                    }
                    else {
                        subscriber = befRestService.request(url, 'post', null, postBody);
                    }
                    subscriber.subscribe(( /**
                     * @param {?} recordRule
                     * @return {?}
                     */function (recordRule) {
                        _this.CloseLoading();
                        _this.ExportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe(( /**
                         * @param {?} s
                         * @return {?}
                         */function (s) {
                            subject.next(s);
                            subject.complete();
                        }));
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.CloseLoading();
                        _this.notify.error(error.error.Message);
                        console.log(error.error.Message);
                    }));
                }
                else {
                    this.ExportByRuleImpl(ruleID, optionJson, methodType).subscribe(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        subject.next(s);
                        subject.complete();
                    }));
                }
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} mType
         * @param {?=} recordRule
         * @return {?}
         */
        DataImportExportService.prototype.ExportByRuleImpl = /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} mType
         * @param {?=} recordRule
         * @return {?}
         */
            function (ruleID, optionJson, mType, recordRule) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                    if (optionJson.customExportTitle.length > 20) {
                        this.notify.warning('自定义标题名称的长度太长');
                        return subject;
                    }
                    if (DataIEUtils.JudgeIllegalChar(optionJson.customExportTitle)) {
                        this.notify.warning('自定义标题名称存在不合法字符');
                        return subject;
                    }
                }
                if (optionJson.applyui === true) {
                    /** @type {?} */
                    var cmpRef = this.CreateExportComponent();
                    cmpRef.instance.ruleId = ruleID;
                    cmpRef.instance.exportOption = optionJson;
                    cmpRef.instance.frameContext = this.frameContext;
                    cmpRef.instance.methodType = mType;
                    cmpRef.instance.subject = subject;
                    cmpRef.instance.show = optionJson.vsto;
                    cmpRef.instance.isCustomExport = false;
                    /** @type {?} */
                    var exportModalConfig = this.GetExportDialogConfig(cmpRef, optionJson);
                    /** @type {?} */
                    var dialog_1 = this.modalService.show(cmpRef, exportModalConfig);
                    cmpRef.instance.needDestroy.subscribe(( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        dialog_1.close();
                    }));
                }
                else if (optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
                    /** @type {?} */
                    var cmpRef = this.CreateSelectExportComponent();
                    cmpRef.instance.ruleId = ruleID;
                    cmpRef.instance.exportOption = optionJson;
                    cmpRef.instance.recordRule = recordRule;
                    cmpRef.instance.frameContext = this.frameContext;
                    cmpRef.instance.methodType = mType;
                    cmpRef.instance.subject = subject;
                    /** @type {?} */
                    var exportModalConfig = this.GetSelectExportDialogConfig(cmpRef, optionJson);
                    /** @type {?} */
                    var dialog_2 = this.modalService.show(cmpRef, exportModalConfig);
                    cmpRef.instance.needDestroy.subscribe(( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        dialog_2.close();
                    }));
                }
                else {
                    if (!isNullOrUndefined(recordRule) && !isNullOrEmpty(recordRule.ruleId)) {
                        ruleID = recordRule.ruleId;
                    }
                    if (mType == MethodType.CommonExport) {
                        this.dataExportService.ExportById(ruleID, this.frameContext, optionJson);
                    }
                    else if (mType == MethodType.ExportCurrentTableData) {
                        this.dataExportService.ExportCurrentData(ruleID, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, optionJson);
                    }
                    else {
                        this.dataExportService.ExportCurrentChildData(ruleID, this.frameContext, optionJson);
                    }
                    /** @type {?} */
                    var unscriber_1 = this.dataExportService.export.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data === '') {
                            // 有人需求导出去掉成功提示，因为文件还没下载下来提示提前了
                            if (optionJson.cancelnotify === undefined || optionJson.cancelnotify === null || optionJson.cancelnotify === false) {
                                _this.notify.success(_this.export_success);
                            }
                            subject.next(true);
                            subject.complete();
                        }
                        else {
                            /** @type {?} */
                            var errorlevel = _this.dataExportService.errorlevel;
                            if (errorlevel === 'Info') {
                                _this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                _this.notify.warning(data);
                            }
                            else {
                                _this.notify.error(_this.export_fail + data);
                            }
                            subject.next(false);
                            subject.complete();
                        }
                        unscriber_1.unsubscribe();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.notify.error(error.error.Message);
                        subject.next(false);
                        subject.complete();
                    }));
                }
                return subject;
            };
        /**
         * 通用导入方法
         * @param type
         * @param ruleID
         * @param option
         */
        /**
         * 通用导入方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.CommonDataImport = /**
         * 通用导入方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (type, ruleID, option) {
                // if (type !== 2 && (ruleID === undefined || ruleID === null || ruleID === '')) {
                //     this.notify.error('请在表单导入命令动作处配置导入规则ID');
                //     return;
                // }
                if (type === 1) {
                    console.log('执行方法：ImportSublistData');
                    return this.ImportSublistData(ruleID, option);
                }
                else if (type === 2) {
                    console.log('执行方法：ImportByModel');
                    return this.ImportByModel(option);
                }
                else if (type === 0) {
                    console.log('执行方法：ImportByRule');
                    return this.ImportByRule(ruleID, option);
                }
                else {
                    console.log('执行方法：ImportByRule');
                    return this.ImportByRule(ruleID, option);
                }
            };
        /**
         * 卡片表单数据导入（主从表，子表，统一只导入到表单）
         * @param dataId
         * @param ruleID
         * @param option
         */
        /**
         * 卡片表单数据导入（主从表，子表，统一只导入到表单）
         * @param {?} dataId
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.CardDataImport = /**
         * 卡片表单数据导入（主从表，子表，统一只导入到表单）
         * @param {?} dataId
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (dataId, ruleID, option) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                console.log(dataId);
                if (!dataId) {
                    this.notify.warning('未读取到主表数据id，不允许导入');
                    subject.next(false);
                    return subject;
                }
                /** @type {?} */
                var optionJson = this.ParseImportJson(option);
                optionJson['mainObjId'] = dataId;
                this.frameContext.repository.updateAllChanges().subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    _this.ImportCommonEntry(ruleID, JSON.stringify(optionJson), MethodType.CardFormDataImport).subscribe(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        subject.next(s);
                        subject.complete();
                    }));
                }));
                return subject;
            };
        /**
         * 通用导出方法
         * @param type
         * @param ruleID
         * @param option
         */
        /**
         * 通用导出方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.CommonDataExport = /**
         * 通用导出方法
         * @param {?} type
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (type, ruleID, option) {
                // if (type !== 2 && (ruleID === undefined || ruleID === null || ruleID === '')) {
                //     this.notify.error('请在表单导出命令动作处配置导出规则ID');
                //     return;
                // }
                if (type === 1) {
                    console.log('执行方法：ExportCurrentListData');
                    // const pageInfo = new PageInfo();
                    // pageInfo.pageIndex = this.entityService.pageIndex;
                    // pageInfo.pageSize = this.entityService.pageSize;
                    return this.ExportCurrentListData(ruleID, option);
                }
                else if (type === 2) {
                    console.log('执行方法：ExportByModel');
                    return this.ExportByModel(option);
                }
                else if (type === 3) {
                    console.log('执行方法：ExportCurrentChildData');
                    return this.ExportCurrentChildData(ruleID, option);
                }
                else if (type === 0) {
                    console.log('执行方法：ExportByRule');
                    return this.ExportByRule(ruleID, option);
                }
                else {
                    console.log('执行方法：ExportByRule');
                    return this.ExportByRule(ruleID, option);
                }
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ParseExportJson = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                /** @type {?} */
                var voId = this.frameContext.appContext.formId;
                if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
                    return { filter: null, voId: voId, customfilename: '', applyui: false, vsto: false };
                }
                /** @type {?} */
                var optionJson = null;
                try {
                    optionJson = JSON.parse(option);
                }
                catch (_a) {
                    this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
                    return { filter: null, voId: voId, customfilename: '', applyui: false, vsto: false };
                }
                if (typeof (optionJson) !== 'object') {
                    optionJson = {};
                }
                optionJson['voId'] = voId;
                return optionJson;
            };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ParseImportJson = /**
         * @private
         * @param {?} option
         * @return {?}
         */
            function (option) {
                /** @type {?} */
                var voId = this.frameContext.appContext.formId;
                if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
                    return { templatefilename: '', GlobalParam: '', voId: voId };
                }
                /** @type {?} */
                var optionJson = null;
                try {
                    optionJson = JSON.parse(option);
                }
                catch (_a) {
                    this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
                    return { templatefilename: '', GlobalParam: '', voId: voId };
                }
                if (typeof (optionJson) !== 'object') {
                    optionJson = {};
                }
                /** @type {?} */
                var globalParam = optionJson['globalParam'];
                if (globalParam !== undefined && globalParam !== null) {
                    optionJson['GlobalParam'] = globalParam;
                }
                optionJson['voId'] = voId;
                return optionJson;
            };
        /**
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ExportByModel = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var optionJson = JSON.parse(option);
                /** @type {?} */
                var model = optionJson.dataExchangeModel;
                /** @type {?} */
                var components = [];
                if (optionJson.components !== undefined && optionJson.components !== null && optionJson.components.length > 0) {
                    optionJson.components.forEach(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) {
                        return components.push(JSON.stringify(c));
                    }));
                }
                /** @type {?} */
                var i18nId = '';
                if (optionJson.I18nMetadataID !== undefined && optionJson.I18nMetadataID !== null) {
                    i18nId = optionJson.I18nMetadataID;
                }
                /** @type {?} */
                var filter = null;
                if (optionJson.filter !== undefined && optionJson.filter !== null) {
                    filter = optionJson.filter;
                }
                /** @type {?} */
                var cmpRef = this.CreateExportComponent();
                cmpRef.instance.frameContext = this.frameContext;
                cmpRef.instance.methodType = MethodType.CommonExport;
                cmpRef.instance.isCustomExport = true;
                cmpRef.instance.Model = model;
                cmpRef.instance.subject = subject;
                cmpRef.instance.components = components;
                cmpRef.instance.i18nId = i18nId;
                cmpRef.instance.filter = filter;
                cmpRef.instance.exportOption = optionJson;
                /** @type {?} */
                var modelStr = JSON.stringify(model);
                cmpRef.instance.InnerModel = JSON.parse(modelStr);
                /** @type {?} */
                var exportModalConfig = this.GetExportDialogConfig(cmpRef, optionJson);
                /** @type {?} */
                var keys = ['DataExport', model['MainObject']['Source']['SourceMetadataID'], optionJson.dimension];
                this.customIEService.GetExportRuleModel(keys, this.frameContext.repository, i18nId, model).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data['success'] === true) {
                        cmpRef.instance.CustomModel = JSON.parse(data['modelStr']);
                    }
                    if (i18nId !== '' && data['i18nModel'] !== undefined && data['i18nModel'] !== null) {
                        /** @type {?} */
                        var i18nModel = JSON.parse(data['i18nModel']);
                        cmpRef.instance.Model = i18nModel;
                        /** @type {?} */
                        var modelStr_1 = JSON.stringify(i18nModel);
                        cmpRef.instance.InnerModel = JSON.parse(modelStr_1);
                    }
                    /** @type {?} */
                    var dialog = _this.modalService.show(cmpRef, exportModalConfig);
                    cmpRef.instance.needDestroy.subscribe(( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        dialog.close();
                    }));
                }));
                return subject;
                // const dialog = this.modalService.show(cmpRef, exportModalConfig);
                // cmpRef.instance.needDestroy.subscribe($event => { dialog.close(); });
            };
        /**
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ImportByModel = /**
         * @param {?} option
         * @return {?}
         */
            function (option) {
                var _this = this;
                /** @type {?} */
                var optionJson = JSON.parse(option);
                /** @type {?} */
                var model = optionJson.dataExchangeModel;
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var components = [];
                if (optionJson.components !== undefined && optionJson.components !== null && optionJson.components.length > 0) {
                    optionJson.components.forEach(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) {
                        return components.push(JSON.stringify(c));
                    }));
                }
                /** @type {?} */
                var i18nId = '';
                if (optionJson.I18nMetadataID !== undefined && optionJson.I18nMetadataID !== null) {
                    i18nId = optionJson.I18nMetadataID;
                }
                if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                    if (optionJson.customImportTitle.length > 20) {
                        this.notify.warning('自定义标题名称的长度太长');
                        return subject;
                    }
                    if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                        this.notify.warning('自定义标题名称存在不合法字符');
                        return subject;
                    }
                }
                /** @type {?} */
                var cmpRef = this.CreateCustomImportComponent();
                cmpRef.instance.frameContext = this.frameContext;
                cmpRef.instance.importOption = optionJson;
                // cmpRef.instance.methodType = MethodType.ImportSubTableDetail;
                cmpRef.instance.subject = subject;
                cmpRef.instance.i18nId = i18nId;
                cmpRef.instance.Model = model;
                /** @type {?} */
                var modelStr = JSON.stringify(model);
                cmpRef.instance.InnerModel = JSON.parse(modelStr);
                cmpRef.instance.components = components;
                /** @type {?} */
                var importModalConfig = this.GetCustomImportDialogConfig(cmpRef, optionJson);
                /** @type {?} */
                var keys = ['DataImport', model['MainObject']['Source']['SourceMetadataID'], optionJson.dimension];
                this.customIEService.GetImportRuleModel(keys, this.frameContext.repository, i18nId, model).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    if (data['success'] === true) {
                        cmpRef.instance.CustomModel = JSON.parse(data['modelStr']);
                    }
                    if (i18nId !== '' && data['i18nModel'] !== undefined && data['i18nModel'] !== null) {
                        /** @type {?} */
                        var i18nModel = JSON.parse(data['i18nModel']);
                        cmpRef.instance.Model = i18nModel;
                        /** @type {?} */
                        var modelStr_2 = JSON.stringify(i18nModel);
                        cmpRef.instance.InnerModel = JSON.parse(modelStr_2);
                    }
                    /** @type {?} */
                    var dialog = _this.modalService.show(cmpRef, importModalConfig);
                    cmpRef.instance.needDestroy.subscribe(( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        dialog.close();
                    }));
                }));
                return subject;
            };
        /**
         * 下载导入模板
         * @param ruleID
         * @param option
         */
        /**
         * 下载导入模板
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.DownloadTemplate = /**
         * 下载导入模板
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ImportCommonEntry(ruleID, option, MethodType.DownloadImportTemplate).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * 根据规则导入
         * @param ruleID
         * @param option
         */
        /**
         * 根据规则导入
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ImportByRule = /**
         * 根据规则导入
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ImportCommonEntry(ruleID, option, MethodType.CommonImport).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * 导入子表数据
         * @param ruleID
         * @param option
         */
        /**
         * 导入子表数据
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
        DataImportExportService.prototype.ImportSublistData = /**
         * 导入子表数据
         * @param {?} ruleID
         * @param {?} option
         * @return {?}
         */
            function (ruleID, option) {
                /** @type {?} */
                var subject = new rxjs.Subject();
                this.ImportCommonEntry(ruleID, option, MethodType.ImportSubTableDetail).subscribe(( /**
                 * @param {?} s
                 * @return {?}
                 */function (s) {
                    subject.next(s);
                    subject.complete();
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
        DataImportExportService.prototype.ImportCommonEntry = /**
         * @private
         * @param {?} ruleID
         * @param {?} option
         * @param {?} methodType
         * @return {?}
         */
            function (ruleID, option, methodType) {
                var _this = this;
                console.log(option);
                /** @type {?} */
                var subject = new rxjs.Subject();
                /** @type {?} */
                var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
                /** @type {?} */
                var su = DataIEUtils.getSu(befRestService.baseUri);
                /** @type {?} */
                var optionJson = this.ParseImportJson(option);
                if (methodType === MethodType.ImportSubTableDetail) {
                    if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.importChildNodeCode)) {
                        //导入子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                        this.notify.warning("规则id为空时，根据Vo查找规则，导入子表必须配置子表节点");
                        return subject;
                    }
                }
                this.StartLoading();
                /** @type {?} */
                var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
                /** @type {?} */
                var postBody = {
                    body: {
                        ruleId: ruleID,
                        su: su,
                        ruleType: 0,
                        voId: optionJson.voId,
                        methodType: methodType,
                        importChildNodeCode: optionJson.importChildNodeCode,
                        enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                    }
                };
                /** @type {?} */
                var subscriber;
                if (!isNullOrUndefined(this.http)) {
                    subscriber = this.http.post(url, postBody.body);
                }
                else {
                    subscriber = befRestService.request(url, 'post', null, postBody);
                }
                subscriber.subscribe(( /**
                 * @param {?} recordRule
                 * @return {?}
                 */function (recordRule) {
                    _this.CloseLoading();
                    _this.ImportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        subject.next(s);
                        subject.complete();
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.CloseLoading();
                    _this.notify.error(error.error.Message);
                    console.log(error.error.Message);
                }));
                return subject;
            };
        /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} methodType
         * @param {?=} recordRule
         * @return {?}
         */
        DataImportExportService.prototype.ImportByRuleImpl = /**
         * @private
         * @param {?} ruleID
         * @param {?} optionJson
         * @param {?} methodType
         * @param {?=} recordRule
         * @return {?}
         */
            function (ruleID, optionJson, methodType, recordRule) {
                var _this = this;
                /** @type {?} */
                var subject = new rxjs.Subject();
                if (methodType === MethodType.DownloadImportTemplate) {
                    this.loadingService.show();
                    /** @type {?} */
                    var ruleId = recordRule.ruleId ? recordRule.ruleId : ruleID;
                    this.dataImportService.DowmloadTemplate(ruleId, this.frameContext.repository, optionJson, null);
                    this.dataImportService.complete.subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.loadingService.clearAll();
                        if (data === '') {
                            _this.notify.success(_this.i18nResource.download_template_ok);
                            subject.next(true);
                            subject.complete();
                        }
                        else {
                            _this.notify.error(_this.i18nResource.download_template_fail + data);
                            subject.next(false);
                            subject.complete();
                        }
                    }));
                }
                else {
                    if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                        if (optionJson.customImportTitle.length > 20) {
                            this.notify.warning('自定义标题名称的长度太长');
                            return subject;
                        }
                        if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                            this.notify.warning('自定义标题名称存在不合法字符');
                            return subject;
                        }
                    }
                    /** @type {?} */
                    var cmpRef = this.CreateImportComponent();
                    cmpRef.instance.ruleId = ruleID;
                    cmpRef.instance.importOption = optionJson;
                    cmpRef.instance.recordRule = recordRule;
                    cmpRef.instance.frameContext = this.frameContext;
                    cmpRef.instance.methodType = methodType;
                    cmpRef.instance.subject = subject;
                    /** @type {?} */
                    var importModalConfig = this.GetImportDialogConfig(cmpRef, optionJson);
                    /** @type {?} */
                    var dialog_3 = this.modalService.show(cmpRef, importModalConfig);
                    cmpRef.instance.needDestroy.subscribe(( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        dialog_3.close();
                    }));
                }
                return subject;
            };
        /**
         * @return {?}
         */
        DataImportExportService.prototype.StartLoading = /**
         * @return {?}
         */
            function () {
                if (this.loadingService !== undefined && this.loadingService !== null) {
                    this.loadingService.show();
                }
            };
        /**
         * @return {?}
         */
        DataImportExportService.prototype.CloseLoading = /**
         * @return {?}
         */
            function () {
                if (this.loadingService !== undefined && this.loadingService !== null) {
                    this.loadingService.clearAll();
                }
            };
        /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
        DataImportExportService.prototype.GetImportDialogConfig = /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
            function (cmpRef, optionJson) {
                /** @type {?} */
                var title = this.data_import;
                if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                    title = optionJson.customImportTitle;
                }
                /** @type {?} */
                var importModalConfig = {
                    title: title,
                    width: 530,
                    height: 342,
                    buttons: cmpRef.instance.modalFooter,
                    showCloseButton: true,
                    showMaxButton: false,
                    showMinButton: false,
                    showButtons: true,
                    resizable: false
                };
                return importModalConfig;
            };
        /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
        DataImportExportService.prototype.GetCustomImportDialogConfig = /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
            function (cmpRef, optionJson) {
                /** @type {?} */
                var title = this.data_import;
                if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                    title = optionJson.customImportTitle;
                }
                /** @type {?} */
                var importModalConfig = {
                    title: title,
                    width: 950,
                    height: 570,
                    buttons: cmpRef.instance.modalFooter,
                    showCloseButton: true,
                    showMaxButton: false,
                    showMinButton: false,
                    showButtons: true,
                    resizable: false
                };
                return importModalConfig;
            };
        /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
        DataImportExportService.prototype.GetExportDialogConfig = /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
            function (cmpRef, optionJson) {
                /** @type {?} */
                var title = this.data_export;
                if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                    title = optionJson.customExportTitle;
                }
                /** @type {?} */
                var exportModalConfig = {
                    title: title,
                    width: 922,
                    height: 530,
                    buttons: cmpRef.instance.modalFooter,
                    showCloseButton: true,
                    showMaxButton: false,
                    showMinButton: false,
                    showButtons: true,
                    resizable: false
                };
                return exportModalConfig;
            };
        /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
        DataImportExportService.prototype.GetSelectExportDialogConfig = /**
         * @private
         * @param {?} cmpRef
         * @param {?} optionJson
         * @return {?}
         */
            function (cmpRef, optionJson) {
                /** @type {?} */
                var title = this.data_export;
                if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                    title = optionJson.customExportTitle;
                }
                /** @type {?} */
                var exportModalConfig = {
                    title: title,
                    width: 530,
                    height: 342,
                    buttons: cmpRef.instance.modalFooter,
                    showCloseButton: true,
                    showMaxButton: false,
                    showMinButton: false,
                    showButtons: true,
                    resizable: false
                };
                return exportModalConfig;
            };
        // 创建输入组件实例
        // 创建输入组件实例
        /**
         * @private
         * @return {?}
         */
        DataImportExportService.prototype.CreateImportComponent =
            // 创建输入组件实例
            /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ImportDialogComponent);
                /** @type {?} */
                var cmpRef = compFactory.create(this.injector);
                return cmpRef;
            };
        // 创建输出组件实例
        // 创建输出组件实例
        /**
         * @private
         * @return {?}
         */
        DataImportExportService.prototype.CreateExportComponent =
            // 创建输出组件实例
            /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ExportDialogComponent);
                /** @type {?} */
                var cmpRef = compFactory.create(this.injector);
                return cmpRef;
            };
        /**
         * @private
         * @return {?}
         */
        DataImportExportService.prototype.CreateSelectExportComponent = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(ExportCustomSelectComponent);
                /** @type {?} */
                var cmpRef = compFactory.create(this.injector);
                return cmpRef;
            };
        /**
         * @private
         * @return {?}
         */
        DataImportExportService.prototype.CreateCustomImportComponent = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(CustomImportDialogComponent);
                /** @type {?} */
                var cmpRef = compFactory.create(this.injector);
                return cmpRef;
            };
        DataImportExportService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        DataImportExportService.ctorParameters = function () {
            return [
                { type: i1.BsModalService },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector },
                { type: devkit.FrameContext },
                { type: DataExportService },
                { type: i1$1.NotifyService },
                { type: commandServices.EntityListService },
                { type: CustomDataIEService },
                { type: DataieHandcraftService },
                { type: i5.HttpClient },
                { type: i3.LoadingService },
                { type: DataImportService }
            ];
        };
        return DataImportExportService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DIP_DATAIE_SERVICE = [
        DataImportExportService
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DataImpExpModule = DataImpExpModule;
    exports.DataImportExportService = DataImportExportService;
    exports.DIP_DATAIE_SERVICE = DIP_DATAIE_SERVICE;
    exports.DataieHandcraftService = DataieHandcraftService;
    exports.RuleIdHelpComponent = RuleIdHelpComponent;
    exports.DataieRuleHelpComponent = DataieRuleHelpComponent;
    exports.ɵp = DataieProgressComponent;
    exports.ɵr = ExtendComponent1Component;
    exports.ɵs = ExtendComponent2Component;
    exports.ɵt = ExtendComponent3Component;
    exports.ɵu = ExtendComponent4Component;
    exports.ɵv = ExtendComponent5Component;
    exports.ɵw = ExtendComponent6Component;
    exports.ɵx = ExtendComponent7Component;
    exports.ɵy = ExtendComponent8Component;
    exports.ɵz = ExtendComponent9Component;
    exports.ɵq = RuleCustomSettingComponent;
    exports.ɵe = ExportDialogComponent;
    exports.ɵk = CustomImportDialogComponent;
    exports.ɵa = ElementSelectComponent;
    exports.ɵo = ExportCustomSelectHandcraftComponent;
    exports.ɵl = ExportCustomSelectComponent;
    exports.ɵn = ImportDialogHandcraftComponent;
    exports.ɵb = ImportDialogComponent;
    exports.ɵm = RuleSelectComponent;
    exports.ɵg = CustomDataIEService;
    exports.ɵf = DataExportService;
    exports.ɵc = DataImportService;
    exports.ɵd = FileOperateService;
    exports.ɵi = FileDropDirective;
    exports.ɵj = FileSelectDirective;
    exports.ɵh = ValidateFormComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-dip-data-imp-exp.umd.js.map