/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FileLikeObject = /** @class */ (function () {
    function FileLikeObject(fileOrInput) {
        this.rawFile = fileOrInput;
        /** @type {?} */
        var isInput = this.isElement(fileOrInput);
        /** @type {?} */
        var fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        /** @type {?} */
        var postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        /** @type {?} */
        var method = 'createFrom' + postfix;
        ((/** @type {?} */ (this)))[method](fakePathOrObject);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    FileLikeObject.prototype.isElement = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return !!(node && (node.nodeName || node.prop && node.attr && node.find));
    };
    /**
     * @param {?} path
     * @return {?}
     */
    FileLikeObject.prototype.createFromFakePath = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    };
    /**
     * @param {?} object
     * @return {?}
     */
    FileLikeObject.prototype.createFromObject = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    };
    return FileLikeObject;
}());
export { FileLikeObject };
if (false) {
    /** @type {?} */
    FileLikeObject.prototype.lastModifiedDate;
    /** @type {?} */
    FileLikeObject.prototype.size;
    /** @type {?} */
    FileLikeObject.prototype.type;
    /** @type {?} */
    FileLikeObject.prototype.name;
    /** @type {?} */
    FileLikeObject.prototype.rawFile;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1saWtlLW9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtZGlwL2RhdGEtaW1wLWV4cC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL1VwbG9hZGVyU2VydmljZS9GaWxlVXBsb2FkL2ZpbGUtbGlrZS1vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0lBT0ksd0JBQW1CLFdBQWdCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDOztZQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7O1lBQ3JDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVzs7WUFDNUQsT0FBTyxHQUFHLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVE7O1lBQ3RFLE1BQU0sR0FBRyxZQUFZLEdBQUcsT0FBTztRQUNyQyxDQUFDLG1CQUFBLElBQUksRUFBTyxDQUFDLENBQUUsTUFBTSxDQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUNELGtDQUFTOzs7O0lBQVQsVUFBVSxJQUFTO1FBQ2YsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDOzs7OztJQUNELDJDQUFrQjs7OztJQUFsQixVQUFtQixJQUFZO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7Ozs7O0lBQ0gseUNBQWdCOzs7O0lBQWhCLFVBQWlCLE1BQW9EO1FBQ2pFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFDUCxxQkFBQztBQUFELENBQUMsQUE3QkQsSUE2QkM7Ozs7SUE1QkcsMENBQTZCOztJQUM3Qiw4QkFBaUI7O0lBQ2pCLDhCQUFvQjs7SUFDcEIsOEJBQW9COztJQUNwQixpQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRmlsZUxpa2VPYmplY3Qge1xyXG4gICAgcHVibGljIGxhc3RNb2RpZmllZERhdGU6IGFueTtcclxuICAgIHB1YmxpYyBzaXplOiBhbnk7XHJcbiAgICBwdWJsaWMgdHlwZTogc3RyaW5nO1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyByYXdGaWxlOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGZpbGVPcklucHV0OiBhbnkpIHtcclxuICAgIHRoaXMucmF3RmlsZSA9IGZpbGVPcklucHV0O1xyXG4gICAgY29uc3QgaXNJbnB1dCA9IHRoaXMuaXNFbGVtZW50KGZpbGVPcklucHV0KTtcclxuICAgIGNvbnN0IGZha2VQYXRoT3JPYmplY3QgPSBpc0lucHV0ID8gZmlsZU9ySW5wdXQudmFsdWUgOiBmaWxlT3JJbnB1dDtcclxuICAgIGNvbnN0IHBvc3RmaXggPSB0eXBlb2YgZmFrZVBhdGhPck9iamVjdCA9PT0gJ3N0cmluZycgPyAnRmFrZVBhdGgnIDogJ09iamVjdCc7XHJcbiAgICBjb25zdCBtZXRob2QgPSAnY3JlYXRlRnJvbScgKyBwb3N0Zml4O1xyXG4gICAgKHRoaXMgYXMgYW55KVsgbWV0aG9kIF0oZmFrZVBhdGhPck9iamVjdCk7XHJcbiAgICB9XHJcbiAgICBpc0VsZW1lbnQobm9kZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICEhKG5vZGUgJiYgKG5vZGUubm9kZU5hbWUgfHwgbm9kZS5wcm9wICYmIG5vZGUuYXR0ciAmJiBub2RlLmZpbmQpKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUZyb21GYWtlUGF0aChwYXRoOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxhc3RNb2RpZmllZERhdGUgPSB2b2lkIDA7XHJcbiAgICAgICAgdGhpcy5zaXplID0gdm9pZCAwO1xyXG4gICAgICAgIHRoaXMudHlwZSA9ICdsaWtlLycgKyBwYXRoLnNsaWNlKHBhdGgubGFzdEluZGV4T2YoJy4nKSArIDEpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gcGF0aC5zbGljZShwYXRoLmxhc3RJbmRleE9mKCcvJykgKyBwYXRoLmxhc3RJbmRleE9mKCdcXFxcJykgKyAyKTtcclxuICAgICAgfVxyXG4gICAgY3JlYXRlRnJvbU9iamVjdChvYmplY3Q6IHsgc2l6ZTogbnVtYmVyLCB0eXBlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zaXplID0gb2JqZWN0LnNpemU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gb2JqZWN0LnR5cGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gb2JqZWN0Lm5hbWU7XHJcbiAgICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4iXX0=