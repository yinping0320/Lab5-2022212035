/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { ImportDialogComponent } from '../../import-dialog/import-dialog.component';
import { ExportDialogComponent } from '../../custom-export-dialog/export-dialog.component';
import { BsModalService } from '@farris/ui-modal';
import { FrameContext } from '@farris/devkit';
import { MethodType } from '../../model/DataIEType/MethodType';
import { EntityListService } from '@farris/command-services';
import { NotifyService } from '@farris/ui-notify';
import { DataExportService } from './data-export.service';
import { Subject } from 'rxjs';
import { CustomDataIEService } from './custom-data-ie.service';
import { CustomImportDialogComponent } from '../../custom-import-dialog/custom-import-dialog.component';
import { ExportCustomSelectComponent } from '../../export-custom-select/export-custom-select.component';
import { HttpClient } from '@angular/common/http';
import { DataIEUtils, isNullOrEmpty, isNullOrUndefined } from '../Utils/DataIEUtils';
import { DataieHandcraftService } from './dataie-handcraft.service';
import { LoadingService } from '@farris/ui-loading';
import { DataImportService } from "./data-import.service";
var DataImportExportService = /** @class */ (function () {
    function DataImportExportService(modalService, resolver, injector, frameContext, dataExportService, notify, entityService, customIEService, handcraftSer, http, loadingService, dataImportService) {
        var _this = this;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.frameContext = frameContext;
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.entityService = entityService;
        this.customIEService = customIEService;
        this.handcraftSer = handcraftSer;
        this.http = http;
        this.loadingService = loadingService;
        this.dataImportService = dataImportService;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.i18nResource = res;
            _this.data_import = res['data_import'];
            _this.data_export = res['data_export'];
            _this.export_success = res['export_success'];
            _this.export_fail = res['export_fail'];
            _this.data_export_customfile = res['data_export_customfile'];
            _this.rule_list = res['rule_list'];
        }));
    }
    /**
     * 根据规则导出
     * @param ruleID
     * @param option
     */
    /**
     * 根据规则导出
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ExportByRule = /**
     * 根据规则导出
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var optionJson = this.ParseExportJson(option);
        if (optionJson.packSize) {
            //获取总共有多少条数据
            /** @type {?} */
            var totalData = this.frameContext.bindingData.pagingInfo.total;
            if (isNullOrUndefined(totalData) || totalData <= 0) {
                this.notify.warning('未获取到总数据量或数据量为0，无法进行分批打包导出，请检查');
                subject.next(false);
                subject.complete();
            }
            else {
                /** @type {?} */
                var filterConditions = [];
                if (optionJson.enableScreeningScheme === true) {
                    /** @type {?} */
                    var filterConditionList = this.frameContext.uiState['filterConditionList'];
                    if (!isNullOrUndefined(filterConditionList) && filterConditionList !== '' && filterConditionList !== '[]') {
                        /** @type {?} */
                        var filterConditionListJson = [];
                        if (typeof (filterConditionList) === 'string') {
                            filterConditionListJson = JSON.parse(filterConditionList);
                        }
                        else {
                            filterConditionListJson = filterConditionList;
                        }
                        for (var index = 0; index < filterConditionListJson.length; index++) {
                            /** @type {?} */
                            var element = filterConditionListJson[index];
                            element.Value = decodeURIComponent(element.Value);
                            if (index === filterConditionListJson.length - 1) {
                                element.Relation = 0;
                            }
                            filterConditions.push(element);
                        }
                    }
                }
                //分页大小，对应的每个Excel文件的数据量
                /** @type {?} */
                var pageSize = Number.parseInt(optionJson.packSize);
                /** @type {?} */
                var num = Math.ceil(totalData / pageSize);
                /** @type {?} */
                var packitems = [];
                for (var i = 0; i < num; i++) {
                    /** @type {?} */
                    var packitem = {
                        ruleid: ruleID,
                        globalParam: optionJson.globalParam,
                        filter: {
                            filterConditions: filterConditions,
                            isUsePagination: true,
                            pagination: {
                                pageIndex: i + 1,
                                pageSize: pageSize
                            }
                        }
                    };
                    packitems.push(packitem);
                }
                /** @type {?} */
                var customfilename = '打包导出' + new Date();
                if (!isNullOrEmpty(optionJson.customfilename)) {
                    customfilename = optionJson.customfilename;
                }
                /** @type {?} */
                var option_1 = {
                    package: {
                        customfilename: customfilename,
                        packitems: packitems
                    }
                };
                this.ExportByPackage(JSON.stringify(option_1)).subscribe((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) {
                    subject.next(s);
                    subject.complete();
                }));
            }
        }
        else {
            this.ExportCommonEntry(ruleID, option, MethodType.CommonExport).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                subject.next(s);
                subject.complete();
            }));
        }
        return subject;
    };
    /**
     * 根据规则导出
     * @param ruleID
     * @param option
     */
    /**
     * 根据规则导出
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ExportCurrentChildData = /**
     * 根据规则导出
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentChildData).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * 导出当前列表数据（分页）
     * @param ruleID
     * @param option
     */
    /**
     * 导出当前列表数据（分页）
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ExportCurrentListData = /**
     * 导出当前列表数据（分页）
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentTableData).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * 批量打包导出
     * @param option 配置打包信息
     */
    /**
     * 批量打包导出
     * @param {?} option 配置打包信息
     * @return {?}
     */
    DataImportExportService.prototype.ExportByPackage = /**
     * 批量打包导出
     * @param {?} option 配置打包信息
     * @return {?}
     */
    function (option) {
        var _this = this;
        console.log(option);
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var optionJson = this.ParseExportJson(option);
        this.dataExportService.ExportByPackage(this.frameContext.repository, optionJson);
        /** @type {?} */
        var unscriber = this.dataExportService.export.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === '') {
                _this.notify.success(_this.export_success);
                unscriber.unsubscribe();
                subject.next(true);
                subject.complete();
            }
            else {
                /** @type {?} */
                var errorlevel = _this.dataExportService.errorlevel;
                if (errorlevel === 'Info') {
                    _this.notify.info(data);
                }
                else if (errorlevel === 'Warning') {
                    _this.notify.warning(data);
                }
                else {
                    _this.notify.error(_this.export_fail + data);
                }
                unscriber.unsubscribe();
                subject.next(false);
                subject.complete();
            }
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    DataImportExportService.prototype.ExportCommonEntry = /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    function (ruleID, option, methodType) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        console.log(option);
        /** @type {?} */
        var optionJson = this.ParseExportJson(option);
        if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.voId)) {
            this.notify.warning("未配置规则id，且无法获取到表单对应的voId，请检查");
            return subject;
        }
        if (methodType === MethodType.ExportCurrentChildData) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.exportChildNodeCode)) {
                //导出子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据Vo查找规则，导出子表必须配置子表节点");
                return subject;
            }
        }
        if (isNullOrEmpty(ruleID) || optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
            /** @type {?} */
            var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
            this.StartLoading();
            /** @type {?} */
            var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
            /** @type {?} */
            var postBody = {
                body: {
                    ruleId: ruleID,
                    ruleType: 1,
                    voId: optionJson.voId,
                    methodType: methodType,
                    exportChildNodeCode: optionJson.exportChildNodeCode,
                    enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                }
            };
            /** @type {?} */
            var subscriber = void 0;
            if (!isNullOrUndefined(this.http)) {
                subscriber = this.http.post(url, postBody.body);
            }
            else {
                subscriber = befRestService.request(url, 'post', null, postBody);
            }
            subscriber.subscribe((/**
             * @param {?} recordRule
             * @return {?}
             */
            function (recordRule) {
                _this.CloseLoading();
                _this.ExportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) {
                    subject.next(s);
                    subject.complete();
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.CloseLoading();
                _this.notify.error(error.error.Message);
                console.log(error.error.Message);
            }));
        }
        else {
            this.ExportByRuleImpl(ruleID, optionJson, methodType).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                subject.next(s);
                subject.complete();
            }));
        }
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} mType
     * @param {?=} recordRule
     * @return {?}
     */
    DataImportExportService.prototype.ExportByRuleImpl = /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} mType
     * @param {?=} recordRule
     * @return {?}
     */
    function (ruleID, optionJson, mType, recordRule) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            if (optionJson.customExportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customExportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                return subject;
            }
        }
        if (optionJson.applyui === true) {
            /** @type {?} */
            var cmpRef = this.CreateExportComponent();
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.exportOption = optionJson;
            cmpRef.instance.frameContext = this.frameContext;
            cmpRef.instance.methodType = mType;
            cmpRef.instance.subject = subject;
            cmpRef.instance.show = optionJson.vsto;
            cmpRef.instance.isCustomExport = false;
            /** @type {?} */
            var exportModalConfig = this.GetExportDialogConfig(cmpRef, optionJson);
            /** @type {?} */
            var dialog_1 = this.modalService.show(cmpRef, exportModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                dialog_1.close();
            }));
        }
        else if (optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
            /** @type {?} */
            var cmpRef = this.CreateSelectExportComponent();
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.exportOption = optionJson;
            cmpRef.instance.recordRule = recordRule;
            cmpRef.instance.frameContext = this.frameContext;
            cmpRef.instance.methodType = mType;
            cmpRef.instance.subject = subject;
            /** @type {?} */
            var exportModalConfig = this.GetSelectExportDialogConfig(cmpRef, optionJson);
            /** @type {?} */
            var dialog_2 = this.modalService.show(cmpRef, exportModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                dialog_2.close();
            }));
        }
        else {
            if (!isNullOrUndefined(recordRule) && !isNullOrEmpty(recordRule.ruleId)) {
                ruleID = recordRule.ruleId;
            }
            if (mType == MethodType.CommonExport) {
                this.dataExportService.ExportById(ruleID, this.frameContext, optionJson);
            }
            else if (mType == MethodType.ExportCurrentTableData) {
                this.dataExportService.ExportCurrentData(ruleID, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, optionJson);
            }
            else {
                this.dataExportService.ExportCurrentChildData(ruleID, this.frameContext, optionJson);
            }
            /** @type {?} */
            var unscriber_1 = this.dataExportService.export.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data === '') {
                    // 有人需求导出去掉成功提示，因为文件还没下载下来提示提前了
                    if (optionJson.cancelnotify === undefined || optionJson.cancelnotify === null || optionJson.cancelnotify === false) {
                        _this.notify.success(_this.export_success);
                    }
                    subject.next(true);
                    subject.complete();
                }
                else {
                    /** @type {?} */
                    var errorlevel = _this.dataExportService.errorlevel;
                    if (errorlevel === 'Info') {
                        _this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        _this.notify.warning(data);
                    }
                    else {
                        _this.notify.error(_this.export_fail + data);
                    }
                    subject.next(false);
                    subject.complete();
                }
                unscriber_1.unsubscribe();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.notify.error(error.error.Message);
                subject.next(false);
                subject.complete();
            }));
        }
        return subject;
    };
    /**
     * 通用导入方法
     * @param type
     * @param ruleID
     * @param option
     */
    /**
     * 通用导入方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.CommonDataImport = /**
     * 通用导入方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (type, ruleID, option) {
        // if (type !== 2 && (ruleID === undefined || ruleID === null || ruleID === '')) {
        //     this.notify.error('请在表单导入命令动作处配置导入规则ID');
        //     return;
        // }
        if (type === 1) {
            console.log('执行方法：ImportSublistData');
            return this.ImportSublistData(ruleID, option);
        }
        else if (type === 2) {
            console.log('执行方法：ImportByModel');
            return this.ImportByModel(option);
        }
        else if (type === 0) {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
    };
    /**
     * 卡片表单数据导入（主从表，子表，统一只导入到表单）
     * @param dataId
     * @param ruleID
     * @param option
     */
    /**
     * 卡片表单数据导入（主从表，子表，统一只导入到表单）
     * @param {?} dataId
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.CardDataImport = /**
     * 卡片表单数据导入（主从表，子表，统一只导入到表单）
     * @param {?} dataId
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (dataId, ruleID, option) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        console.log(dataId);
        if (!dataId) {
            this.notify.warning('未读取到主表数据id，不允许导入');
            subject.next(false);
            return subject;
        }
        /** @type {?} */
        var optionJson = this.ParseImportJson(option);
        optionJson['mainObjId'] = dataId;
        this.frameContext.repository.updateAllChanges().subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.ImportCommonEntry(ruleID, JSON.stringify(optionJson), MethodType.CardFormDataImport).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                subject.next(s);
                subject.complete();
            }));
        }));
        return subject;
    };
    /**
     * 通用导出方法
     * @param type
     * @param ruleID
     * @param option
     */
    /**
     * 通用导出方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.CommonDataExport = /**
     * 通用导出方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (type, ruleID, option) {
        // if (type !== 2 && (ruleID === undefined || ruleID === null || ruleID === '')) {
        //     this.notify.error('请在表单导出命令动作处配置导出规则ID');
        //     return;
        // }
        if (type === 1) {
            console.log('执行方法：ExportCurrentListData');
            // const pageInfo = new PageInfo();
            // pageInfo.pageIndex = this.entityService.pageIndex;
            // pageInfo.pageSize = this.entityService.pageSize;
            return this.ExportCurrentListData(ruleID, option);
        }
        else if (type === 2) {
            console.log('执行方法：ExportByModel');
            return this.ExportByModel(option);
        }
        else if (type === 3) {
            console.log('执行方法：ExportCurrentChildData');
            return this.ExportCurrentChildData(ruleID, option);
        }
        else if (type === 0) {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ParseExportJson = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var voId = this.frameContext.appContext.formId;
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return { filter: null, voId: voId, customfilename: '', applyui: false, vsto: false };
        }
        /** @type {?} */
        var optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return { filter: null, voId: voId, customfilename: '', applyui: false, vsto: false };
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        optionJson['voId'] = voId;
        return optionJson;
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ParseImportJson = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var voId = this.frameContext.appContext.formId;
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return { templatefilename: '', GlobalParam: '', voId: voId };
        }
        /** @type {?} */
        var optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return { templatefilename: '', GlobalParam: '', voId: voId };
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        /** @type {?} */
        var globalParam = optionJson['globalParam'];
        if (globalParam !== undefined && globalParam !== null) {
            optionJson['GlobalParam'] = globalParam;
        }
        optionJson['voId'] = voId;
        return optionJson;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ExportByModel = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var optionJson = JSON.parse(option);
        /** @type {?} */
        var model = optionJson.dataExchangeModel;
        /** @type {?} */
        var components = [];
        if (optionJson.components !== undefined && optionJson.components !== null && optionJson.components.length > 0) {
            optionJson.components.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return components.push(JSON.stringify(c));
            }));
        }
        /** @type {?} */
        var i18nId = '';
        if (optionJson.I18nMetadataID !== undefined && optionJson.I18nMetadataID !== null) {
            i18nId = optionJson.I18nMetadataID;
        }
        /** @type {?} */
        var filter = null;
        if (optionJson.filter !== undefined && optionJson.filter !== null) {
            filter = optionJson.filter;
        }
        /** @type {?} */
        var cmpRef = this.CreateExportComponent();
        cmpRef.instance.frameContext = this.frameContext;
        cmpRef.instance.methodType = MethodType.CommonExport;
        cmpRef.instance.isCustomExport = true;
        cmpRef.instance.Model = model;
        cmpRef.instance.subject = subject;
        cmpRef.instance.components = components;
        cmpRef.instance.i18nId = i18nId;
        cmpRef.instance.filter = filter;
        cmpRef.instance.exportOption = optionJson;
        /** @type {?} */
        var modelStr = JSON.stringify(model);
        cmpRef.instance.InnerModel = JSON.parse(modelStr);
        /** @type {?} */
        var exportModalConfig = this.GetExportDialogConfig(cmpRef, optionJson);
        /** @type {?} */
        var keys = ['DataExport', model['MainObject']['Source']['SourceMetadataID'], optionJson.dimension];
        this.customIEService.GetExportRuleModel(keys, this.frameContext.repository, i18nId, model).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data['success'] === true) {
                cmpRef.instance.CustomModel = JSON.parse(data['modelStr']);
            }
            if (i18nId !== '' && data['i18nModel'] !== undefined && data['i18nModel'] !== null) {
                /** @type {?} */
                var i18nModel = JSON.parse(data['i18nModel']);
                cmpRef.instance.Model = i18nModel;
                /** @type {?} */
                var modelStr_1 = JSON.stringify(i18nModel);
                cmpRef.instance.InnerModel = JSON.parse(modelStr_1);
            }
            /** @type {?} */
            var dialog = _this.modalService.show(cmpRef, exportModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                dialog.close();
            }));
        }));
        return subject;
        // const dialog = this.modalService.show(cmpRef, exportModalConfig);
        // cmpRef.instance.needDestroy.subscribe($event => { dialog.close(); });
    };
    /**
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ImportByModel = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        var _this = this;
        /** @type {?} */
        var optionJson = JSON.parse(option);
        /** @type {?} */
        var model = optionJson.dataExchangeModel;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var components = [];
        if (optionJson.components !== undefined && optionJson.components !== null && optionJson.components.length > 0) {
            optionJson.components.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return components.push(JSON.stringify(c));
            }));
        }
        /** @type {?} */
        var i18nId = '';
        if (optionJson.I18nMetadataID !== undefined && optionJson.I18nMetadataID !== null) {
            i18nId = optionJson.I18nMetadataID;
        }
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            if (optionJson.customImportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                return subject;
            }
        }
        /** @type {?} */
        var cmpRef = this.CreateCustomImportComponent();
        cmpRef.instance.frameContext = this.frameContext;
        cmpRef.instance.importOption = optionJson;
        // cmpRef.instance.methodType = MethodType.ImportSubTableDetail;
        cmpRef.instance.subject = subject;
        cmpRef.instance.i18nId = i18nId;
        cmpRef.instance.Model = model;
        /** @type {?} */
        var modelStr = JSON.stringify(model);
        cmpRef.instance.InnerModel = JSON.parse(modelStr);
        cmpRef.instance.components = components;
        /** @type {?} */
        var importModalConfig = this.GetCustomImportDialogConfig(cmpRef, optionJson);
        /** @type {?} */
        var keys = ['DataImport', model['MainObject']['Source']['SourceMetadataID'], optionJson.dimension];
        this.customIEService.GetImportRuleModel(keys, this.frameContext.repository, i18nId, model).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data['success'] === true) {
                cmpRef.instance.CustomModel = JSON.parse(data['modelStr']);
            }
            if (i18nId !== '' && data['i18nModel'] !== undefined && data['i18nModel'] !== null) {
                /** @type {?} */
                var i18nModel = JSON.parse(data['i18nModel']);
                cmpRef.instance.Model = i18nModel;
                /** @type {?} */
                var modelStr_2 = JSON.stringify(i18nModel);
                cmpRef.instance.InnerModel = JSON.parse(modelStr_2);
            }
            /** @type {?} */
            var dialog = _this.modalService.show(cmpRef, importModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                dialog.close();
            }));
        }));
        return subject;
    };
    /**
     * 下载导入模板
     * @param ruleID
     * @param option
     */
    /**
     * 下载导入模板
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.DownloadTemplate = /**
     * 下载导入模板
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.DownloadImportTemplate).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * 根据规则导入
     * @param ruleID
     * @param option
     */
    /**
     * 根据规则导入
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ImportByRule = /**
     * 根据规则导入
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.CommonImport).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * 导入子表数据
     * @param ruleID
     * @param option
     */
    /**
     * 导入子表数据
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataImportExportService.prototype.ImportSublistData = /**
     * 导入子表数据
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.ImportSubTableDetail).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    DataImportExportService.prototype.ImportCommonEntry = /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    function (ruleID, option, methodType) {
        var _this = this;
        console.log(option);
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        var su = DataIEUtils.getSu(befRestService.baseUri);
        /** @type {?} */
        var optionJson = this.ParseImportJson(option);
        if (methodType === MethodType.ImportSubTableDetail) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.importChildNodeCode)) {
                //导入子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据Vo查找规则，导入子表必须配置子表节点");
                return subject;
            }
        }
        this.StartLoading();
        /** @type {?} */
        var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
        /** @type {?} */
        var postBody = {
            body: {
                ruleId: ruleID,
                su: su,
                ruleType: 0,
                voId: optionJson.voId,
                methodType: methodType,
                importChildNodeCode: optionJson.importChildNodeCode,
                enableRuntimeCustom: optionJson.enableRuntimeCustom === true
            }
        };
        /** @type {?} */
        var subscriber;
        if (!isNullOrUndefined(this.http)) {
            subscriber = this.http.post(url, postBody.body);
        }
        else {
            subscriber = befRestService.request(url, 'post', null, postBody);
        }
        subscriber.subscribe((/**
         * @param {?} recordRule
         * @return {?}
         */
        function (recordRule) {
            _this.CloseLoading();
            _this.ImportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                subject.next(s);
                subject.complete();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.CloseLoading();
            _this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} methodType
     * @param {?=} recordRule
     * @return {?}
     */
    DataImportExportService.prototype.ImportByRuleImpl = /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} methodType
     * @param {?=} recordRule
     * @return {?}
     */
    function (ruleID, optionJson, methodType, recordRule) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        if (methodType === MethodType.DownloadImportTemplate) {
            this.loadingService.show();
            /** @type {?} */
            var ruleId = recordRule.ruleId ? recordRule.ruleId : ruleID;
            this.dataImportService.DowmloadTemplate(ruleId, this.frameContext.repository, optionJson, null);
            this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.loadingService.clearAll();
                if (data === '') {
                    _this.notify.success(_this.i18nResource.download_template_ok);
                    subject.next(true);
                    subject.complete();
                }
                else {
                    _this.notify.error(_this.i18nResource.download_template_fail + data);
                    subject.next(false);
                    subject.complete();
                }
            }));
        }
        else {
            if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                if (optionJson.customImportTitle.length > 20) {
                    this.notify.warning('自定义标题名称的长度太长');
                    return subject;
                }
                if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                    this.notify.warning('自定义标题名称存在不合法字符');
                    return subject;
                }
            }
            /** @type {?} */
            var cmpRef = this.CreateImportComponent();
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.importOption = optionJson;
            cmpRef.instance.recordRule = recordRule;
            cmpRef.instance.frameContext = this.frameContext;
            cmpRef.instance.methodType = methodType;
            cmpRef.instance.subject = subject;
            /** @type {?} */
            var importModalConfig = this.GetImportDialogConfig(cmpRef, optionJson);
            /** @type {?} */
            var dialog_3 = this.modalService.show(cmpRef, importModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                dialog_3.close();
            }));
        }
        return subject;
    };
    /**
     * @return {?}
     */
    DataImportExportService.prototype.StartLoading = /**
     * @return {?}
     */
    function () {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.show();
        }
    };
    /**
     * @return {?}
     */
    DataImportExportService.prototype.CloseLoading = /**
     * @return {?}
     */
    function () {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.clearAll();
        }
    };
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    DataImportExportService.prototype.GetImportDialogConfig = /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    function (cmpRef, optionJson) {
        /** @type {?} */
        var title = this.data_import;
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            title = optionJson.customImportTitle;
        }
        /** @type {?} */
        var importModalConfig = {
            title: title,
            width: 530,
            height: 342,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return importModalConfig;
    };
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    DataImportExportService.prototype.GetCustomImportDialogConfig = /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    function (cmpRef, optionJson) {
        /** @type {?} */
        var title = this.data_import;
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            title = optionJson.customImportTitle;
        }
        /** @type {?} */
        var importModalConfig = {
            title: title,
            width: 950,
            height: 570,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return importModalConfig;
    };
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    DataImportExportService.prototype.GetExportDialogConfig = /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    function (cmpRef, optionJson) {
        /** @type {?} */
        var title = this.data_export;
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            title = optionJson.customExportTitle;
        }
        /** @type {?} */
        var exportModalConfig = {
            title: title,
            width: 922,
            height: 530,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return exportModalConfig;
    };
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    DataImportExportService.prototype.GetSelectExportDialogConfig = /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    function (cmpRef, optionJson) {
        /** @type {?} */
        var title = this.data_export;
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            title = optionJson.customExportTitle;
        }
        /** @type {?} */
        var exportModalConfig = {
            title: title,
            width: 530,
            height: 342,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return exportModalConfig;
    };
    // 创建输入组件实例
    // 创建输入组件实例
    /**
     * @private
     * @return {?}
     */
    DataImportExportService.prototype.CreateImportComponent = 
    // 创建输入组件实例
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ImportDialogComponent);
        /** @type {?} */
        var cmpRef = compFactory.create(this.injector);
        return cmpRef;
    };
    // 创建输出组件实例
    // 创建输出组件实例
    /**
     * @private
     * @return {?}
     */
    DataImportExportService.prototype.CreateExportComponent = 
    // 创建输出组件实例
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ExportDialogComponent);
        /** @type {?} */
        var cmpRef = compFactory.create(this.injector);
        return cmpRef;
    };
    /**
     * @private
     * @return {?}
     */
    DataImportExportService.prototype.CreateSelectExportComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ExportCustomSelectComponent);
        /** @type {?} */
        var cmpRef = compFactory.create(this.injector);
        return cmpRef;
    };
    /**
     * @private
     * @return {?}
     */
    DataImportExportService.prototype.CreateCustomImportComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(CustomImportDialogComponent);
        /** @type {?} */
        var cmpRef = compFactory.create(this.injector);
        return cmpRef;
    };
    DataImportExportService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataImportExportService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: FrameContext },
        { type: DataExportService },
        { type: NotifyService },
        { type: EntityListService },
        { type: CustomDataIEService },
        { type: DataieHandcraftService },
        { type: HttpClient },
        { type: LoadingService },
        { type: DataImportService }
    ]; };
    return DataImportExportService;
}());
export { DataImportExportService };
if (false) {
    /** @type {?} */
    DataImportExportService.prototype.data_import;
    /** @type {?} */
    DataImportExportService.prototype.data_export;
    /** @type {?} */
    DataImportExportService.prototype.data_export_customfile;
    /** @type {?} */
    DataImportExportService.prototype.export_success;
    /** @type {?} */
    DataImportExportService.prototype.export_fail;
    /** @type {?} */
    DataImportExportService.prototype.rule_list;
    /** @type {?} */
    DataImportExportService.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.frameContext;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.dataExportService;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.entityService;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.customIEService;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.handcraftSer;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    DataImportExportService.prototype.dataImportService;
}
//# sourceMappingURL=data:application/json;base64,