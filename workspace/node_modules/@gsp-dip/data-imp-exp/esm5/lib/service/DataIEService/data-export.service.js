/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable, Output } from '@angular/core';
import { DataIEUtils, getQueryString, isNullOrEmpty, isNullOrUndefined } from '../Utils/DataIEUtils';
import { FileOperateService } from './file-operate.service';
import { NotifyService } from '@farris/ui-notify';
import { LoadingService } from '@farris/ui-loading';
import { HttpClient } from '@angular/common/http';
var DataExportService = /** @class */ (function () {
    function DataExportService(operateService, notify, http, loadingService) {
        var _this = this;
        this.operateService = operateService;
        this.notify = notify;
        this.http = http;
        this.loadingService = loadingService;
        this.origin = window.location.origin;
        this.export = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.i18nResource = res;
        }));
    }
    /**
     * 数据导出服务
     */
    /**
     * 数据导出服务
     * @param {?} repository
     * @param {?} exportParam
     * @param {?} option
     * @return {?}
     */
    DataExportService.prototype.Export = /**
     * 数据导出服务
     * @param {?} repository
     * @param {?} exportParam
     * @param {?} option
     * @return {?}
     */
    function (repository, exportParam, option) {
        var _this = this;
        this.StartLoading();
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        var subject = befRestService.request(befRestService.baseUri + "/service/dataexportvmaction", 'put', null, exportParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var exportResult = (/** @type {?} */ (data.returnValue));
            if (isNullOrUndefined(exportResult)) {
                exportResult = (/** @type {?} */ (data));
            }
            if (exportResult.succeed === true) {
                /** @type {?} */
                var fileName = '';
                if (option === '' || option['customfilename'] === '' || option['customfilename'] === undefined) {
                    fileName = exportResult.fileName;
                }
                else {
                    /** @type {?} */
                    var suffixIndex = exportResult.fileName.lastIndexOf('.');
                    /** @type {?} */
                    var suffix = exportResult.fileName.substring(suffixIndex);
                    if (!DataIEUtils.JudgeIllegalChar(option['customfilename'])) {
                        fileName = option['customfilename'] + suffix;
                    }
                    else {
                        fileName = exportResult.fileName;
                    }
                }
                /** @type {?} */
                var preurl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                _this.operateService.DownloadFile(exportResult.docRelativePath, fileName, preurl, option);
                /** @type {?} */
                var subscriber_1 = _this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.CloseLoading();
                    if (result === '') {
                        _this.export.emit('');
                        subscriber_1.unsubscribe();
                    }
                    else {
                        _this.export.emit(result);
                        subscriber_1.unsubscribe();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.CloseLoading();
                    _this.notify.error(error.message);
                }));
            }
            else {
                _this.CloseLoading();
                _this.errorlevel = exportResult.errorLevel;
                _this.export.emit(exportResult.message);
                // this.notify.error('数据导出失败！\n 失败原因：' + exportResult.message);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.CloseLoading();
            _this.notify.error(error.error.Message);
        }));
    };
    /**
     * 打包导出
     * @param repository
     * @param optionJson
     */
    /**
     * 打包导出
     * @param {?} repository
     * @param {?} optionJson
     * @return {?}
     */
    DataExportService.prototype.ExportByPackage = /**
     * 打包导出
     * @param {?} repository
     * @param {?} optionJson
     * @return {?}
     */
    function (repository, optionJson) {
        /** @type {?} */
        var packitems = optionJson.package.packitems;
        if (packitems === undefined || packitems === null || packitems.length === 0) {
            this.notify.error('请传入需要打包导出的规则信息');
            return;
        }
        this.StartLoading();
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        var relativePaths = [];
        /** @type {?} */
        var itemsFileName = [];
        this.ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson);
    };
    /**
     * @param {?} packitems
     * @param {?} befRestService
     * @param {?} relativePaths
     * @param {?} itemsFileName
     * @param {?} optionJson
     * @return {?}
     */
    DataExportService.prototype.ExecuteMutiRequest = /**
     * @param {?} packitems
     * @param {?} befRestService
     * @param {?} relativePaths
     * @param {?} itemsFileName
     * @param {?} optionJson
     * @return {?}
     */
    function (packitems, befRestService, relativePaths, itemsFileName, optionJson) {
        var _this = this;
        if (packitems.length <= 0) {
            return;
        }
        /** @type {?} */
        var item = packitems.pop();
        /** @type {?} */
        var customfilename = '';
        /** @type {?} */
        var ruleId = item['ruleid'];
        if (ruleId === undefined || ruleId === '') {
            this.notify.error('请传入需要打包导出的规则id');
            this.CloseLoading();
            return;
        }
        /** @type {?} */
        var globalVar = '';
        if (item['globalParam'] !== null && item['globalParam'] !== undefined) {
            if (typeof (item['globalParam']) === 'object') {
                globalVar = JSON.stringify(item['globalParam']);
            }
            else {
                globalVar = item['globalParam'];
            }
        }
        /** @type {?} */
        var itemfilename = item['itemfilename'];
        if (itemfilename !== null && itemfilename !== undefined) {
            itemsFileName.push(itemfilename);
        }
        /** @type {?} */
        var funcId = getQueryString('funcId');
        /** @type {?} */
        var exportParam = null;
        /** @type {?} */
        var filter = item['filter'];
        if (filter !== undefined && filter !== null && JSON.stringify(filter) !== '{}') {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Filter: filter,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        else {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        /** @type {?} */
        var subject = befRestService.request(befRestService.baseUri + "/service/dataexportvmaction", 'put', null, exportParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var exportResult;
            if (isNullOrUndefined(data.returnValue)) {
                exportResult = (/** @type {?} */ (data));
            }
            else {
                exportResult = (/** @type {?} */ (data.returnValue));
            }
            if (exportResult.succeed === true) {
                relativePaths.push(exportResult.docRelativePath);
                customfilename = exportResult.fileName.split('.')[0];
                console.log('导出执行完毕，relativePath：' + JSON.stringify(exportResult.relativePath));
                if (packitems.length === 0) {
                    /** @type {?} */
                    var preurl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                    if (optionJson.package.customfilename !== undefined && optionJson.package.customfilename !== '') {
                        customfilename = optionJson.package.customfilename;
                    }
                    /** @type {?} */
                    var packtype = 'zip';
                    if (optionJson.package.packtype !== undefined) {
                        packtype = optionJson.package.packtype;
                    }
                    if (itemsFileName.length === 0) {
                        itemsFileName = null;
                    }
                    _this.operateService.DownloadPackageFile(relativePaths, itemsFileName, customfilename, preurl, packtype);
                    /** @type {?} */
                    var subscriber_2 = _this.operateService.downloadComplete.subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        _this.CloseLoading();
                        if (result === '') {
                            _this.export.emit('');
                            subscriber_2.unsubscribe();
                        }
                        else {
                            _this.export.emit(result);
                            subscriber_2.unsubscribe();
                        }
                    }));
                }
                else {
                    _this.ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson);
                }
            }
            else {
                _this.CloseLoading();
                _this.errorlevel = exportResult.errorLevel;
                _this.export.emit(exportResult.message);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.CloseLoading();
            _this.notify.error(error.error.Message);
        }));
    };
    /**
     * 手工表单导出
     * @param exportParam
     * @param option
     */
    /**
     * 手工表单导出
     * @param {?} exportParam
     * @param {?} option
     * @return {?}
     */
    DataExportService.prototype.Export4HandCraft = /**
     * 手工表单导出
     * @param {?} exportParam
     * @param {?} option
     * @return {?}
     */
    function (exportParam, option) {
        var _this = this;
        this.StartLoading();
        /** @type {?} */
        var su = option.su;
        /** @type {?} */
        var fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/dataexportvmaction';
        this.http.put(fixedUrl, exportParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.CloseLoading();
            console.log(res);
            /** @type {?} */
            var data = res.body;
            if (data.type == 'application/json') {
                /** @type {?} */
                var reader_1 = new FileReader();
                reader_1.onload = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var dataIeResult = (/** @type {?} */ (JSON.parse((/** @type {?} */ (reader_1.result)))));
                    if (!dataIeResult.succeed) {
                        _this.errorlevel = dataIeResult.errorLevel;
                        _this.export.emit(dataIeResult.message);
                    }
                });
                reader_1.readAsText(data, 'utf-8');
            }
            else {
                /** @type {?} */
                var fileName = '';
                /** @type {?} */
                var contentDisposition = res.headers.get("content-disposition");
                if (contentDisposition) {
                    // 正则获取filename的值
                    /** @type {?} */
                    var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                    /** @type {?} */
                    var matches = filenameRegex.exec(contentDisposition);
                    if (matches != null && matches[1]) {
                        fileName = matches[1].replace(/['"]/g, '');
                    }
                    // 通过 URLEncoder.encode(pFileName, StandardCharsets.UTF_8.name()) 加密编码的, 使用decodeURI(fileName) 解密
                    fileName = decodeURI(fileName);
                    // 通过 new String(pFileName.getBytes(), StandardCharsets.ISO_8859_1) 加密编码的, 使用decodeURI(escape(fileName)) 解密
                    // fileName = decodeURI(escape(fileName))
                }
                if (!isNullOrUndefined(option.customfilename)) {
                    /** @type {?} */
                    var suffixIndex = fileName.lastIndexOf('.');
                    /** @type {?} */
                    var suffix = fileName.substring(suffixIndex);
                    fileName = option.customfilename + suffix;
                }
                /** @type {?} */
                var blob = new Blob([data]);
                if (!data || data.size == 0) {
                    _this.export.emit('返回的数据为空');
                }
                else {
                    if (navigator.msSaveOrOpenBlob) {
                        navigator.msSaveOrOpenBlob(blob, fileName);
                    }
                    else {
                        /** @type {?} */
                        var link = document.createElement('a');
                        link.setAttribute('href', window.URL.createObjectURL(blob));
                        // 设置下载的文件名
                        link.setAttribute('download', fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                    _this.export.emit('');
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.CloseLoading();
            _this.notify.error(error.error.Message);
        }));
    };
    /**
     * @return {?}
     */
    DataExportService.prototype.StartLoading = /**
     * @return {?}
     */
    function () {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.show();
        }
    };
    /**
     * @return {?}
     */
    DataExportService.prototype.CloseLoading = /**
     * @return {?}
     */
    function () {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.clearAll();
        }
    };
    /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    DataExportService.prototype.ExportCurrentData = /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    function (ruleId, frameContext, pageIndex, pageSize, option, suffix) {
        /** @type {?} */
        var exportParam = null;
        /** @type {?} */
        var model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        /** @type {?} */
        var globalVar = '';
        if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (suffix === null || suffix === undefined) {
            suffix = '';
        }
        /** @type {?} */
        var funcId = getQueryString('funcId');
        /** @type {?} */
        var filterParem = option['filter'];
        /** @type {?} */
        var newFilters = [];
        /** @type {?} */
        var selectFilterGridComponent = option['selectFilterGridComponent'];
        if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
            /** @type {?} */
            var ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
            if (!isNullOrUndefined(ids) && ids.length > 0) {
                /** @type {?} */
                var idsStr = '';
                for (var i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    var id = ids[i];
                    if (i === ids.length - 1) {
                        idsStr += id;
                    }
                    else {
                        idsStr += id + '\r\n';
                    }
                }
                /** @type {?} */
                var selectIdFilterCondition = {
                    FilterField: "ID",
                    Compare: 14,
                    Value: idsStr,
                    Relation: 1,
                    Expresstype: 0
                };
                newFilters.push(selectIdFilterCondition);
            }
            else {
                this.notify.info(this.i18nResource['select_data_export']);
                return;
            }
        }
        /** @type {?} */
        var filterConditionList = frameContext.uiState['filterConditionList'];
        if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
            /** @type {?} */
            var filterConditionListJson = void 0;
            if (typeof (filterConditionList) === 'string') {
                filterConditionListJson = JSON.parse(filterConditionList);
            }
            else {
                filterConditionListJson = filterConditionList;
            }
            for (var index = 0; index < filterConditionListJson.length; index++) {
                /** @type {?} */
                var element = filterConditionListJson[index];
                /** @type {?} */
                var value = decodeURIComponent(element.Value);
                element.Value = value;
                newFilters.push(element);
            }
        }
        if (newFilters.length > 0) {
            if (!isNullOrUndefined(filterParem) && filterParem.FilterConditions !== null) {
                filterParem.FilterConditions = newFilters.concat(filterParem.FilterConditions);
            }
            else {
                if (isNullOrUndefined(filterParem)) {
                    filterParem = {};
                }
                filterParem['FilterConditions'] = newFilters;
            }
        }
        if (isNullOrUndefined(filterParem)) {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Suffix: suffix,
                        PaginationInfo: {
                            PageIndex: pageIndex,
                            PageSize: pageSize
                        },
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        else {
            //确保最后一个关系为空
            if (!isNullOrUndefined(filterParem.FilterConditions) && filterParem.FilterConditions.length > 0) {
                filterParem.FilterConditions[filterParem.FilterConditions.length - 1].Relation = 0;
            }
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Filter: filterParem,
                        Suffix: suffix,
                        PaginationInfo: {
                            PageIndex: pageIndex,
                            PageSize: pageSize
                        },
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        this.Export(frameContext.repository, exportParam, option);
    };
    /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    DataExportService.prototype.ExportById = /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    function (ruleId, frameContext, option, suffix) {
        /** @type {?} */
        var exportParam = null;
        /** @type {?} */
        var model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        /** @type {?} */
        var globalVar = '';
        if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (suffix === null || suffix === undefined) {
            suffix = '';
        }
        /** @type {?} */
        var funcId = getQueryString('funcId');
        /** @type {?} */
        var filterParam = option['filter'];
        /** @type {?} */
        var newFilters = [];
        /** @type {?} */
        var selectFilterGridComponent = option['selectFilterGridComponent'];
        if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
            /** @type {?} */
            var ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
            if (!isNullOrUndefined(ids) && ids.length > 0) {
                /** @type {?} */
                var idsStr = '';
                for (var i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    var id = ids[i];
                    if (i === ids.length - 1) {
                        idsStr += id;
                    }
                    else {
                        idsStr += id + '\r\n';
                    }
                }
                /** @type {?} */
                var selectIdFilterCondition = {
                    FilterField: "ID",
                    Compare: 14,
                    Value: idsStr,
                    Relation: 1,
                    Expresstype: 0
                };
                newFilters.push(selectIdFilterCondition);
            }
            else {
                this.notify.info(this.i18nResource['select_data_export']);
                return;
            }
        }
        if (option['enableScreeningScheme'] === true) {
            /** @type {?} */
            var filterConditionList = frameContext.uiState['filterConditionList'];
            if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                /** @type {?} */
                var filterConditionListJson = void 0;
                if (typeof (filterConditionList) === 'string') {
                    filterConditionListJson = JSON.parse(filterConditionList);
                }
                else {
                    filterConditionListJson = filterConditionList;
                }
                for (var index = 0; index < filterConditionListJson.length; index++) {
                    /** @type {?} */
                    var element = filterConditionListJson[index];
                    /** @type {?} */
                    var value = decodeURIComponent(element.Value);
                    // if (typeof (value) === 'string' && value.includes('\r\n')) {
                    //     element.Value = value.replace('\r\n', '\\r\\n');
                    // } else {
                    // }
                    element.Value = value;
                    newFilters.push(element);
                }
            }
        }
        if (newFilters.length > 0) {
            if (!isNullOrUndefined(filterParam) && filterParam.FilterConditions !== null) {
                filterParam.FilterConditions = newFilters.concat(filterParam.FilterConditions);
            }
            else {
                if (isNullOrUndefined(filterParam)) {
                    filterParam = {};
                }
                filterParam['FilterConditions'] = newFilters;
            }
        }
        if (isNullOrUndefined(filterParam)) {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Suffix: suffix,
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        else {
            //确保最后一个关系为空
            if (!isNullOrUndefined(filterParam.FilterConditions) && filterParam.FilterConditions.length > 0) {
                filterParam.FilterConditions[filterParam.FilterConditions.length - 1].Relation = 0;
            }
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Filter: filterParam,
                        Suffix: suffix,
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        this.Export(frameContext.repository, exportParam, option);
    };
    /**
     * @param {?} ruleId
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    DataExportService.prototype.ExportById4HandCraft = /**
     * @param {?} ruleId
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    function (ruleId, option, suffix) {
        /** @type {?} */
        var globalVar = '';
        if (!isNullOrUndefined(option['globalParam'])) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (isNullOrUndefined(suffix)) {
            suffix = '';
        }
        /** @type {?} */
        var funcId = '';
        if (!isNullOrUndefined(option.funcId)) {
            funcId = option.funcId;
        }
        /** @type {?} */
        var exportParam = {
            ruleId: ruleId,
            filter: option['filter'],
            suffix: suffix,
            globalParam: globalVar,
            funcId: funcId
        };
        this.Export4HandCraft(exportParam, option);
    };
    /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    DataExportService.prototype.ExportCurrentChildData = /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    function (ruleId, frameContext, option, suffix) {
        /** @type {?} */
        var exportParam = null;
        /** @type {?} */
        var globalVar = '';
        if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (suffix === null || suffix === undefined) {
            suffix = '';
        }
        /** @type {?} */
        var funcId = getQueryString('funcId');
        exportParam = {
            body: {
                exportContext: {
                    RuleId: ruleId,
                    Suffix: suffix,
                    MainObjId: frameContext.bindingData.list.currentId,
                    GlobalParam: globalVar,
                    funcId: funcId
                }
            }
        };
        this.Export(frameContext.repository, exportParam, option);
    };
    DataExportService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataExportService.ctorParameters = function () { return [
        { type: FileOperateService },
        { type: NotifyService },
        { type: HttpClient },
        { type: LoadingService }
    ]; };
    DataExportService.propDecorators = {
        export: [{ type: Output }]
    };
    return DataExportService;
}());
export { DataExportService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DataExportService.prototype.origin;
    /** @type {?} */
    DataExportService.prototype.export;
    /** @type {?} */
    DataExportService.prototype.errorlevel;
    /** @type {?} */
    DataExportService.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    DataExportService.prototype.operateService;
    /**
     * @type {?}
     * @private
     */
    DataExportService.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    DataExportService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DataExportService.prototype.loadingService;
}
//# sourceMappingURL=data:application/json;base64,