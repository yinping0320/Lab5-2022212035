/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable, Output } from '@angular/core';
import { DataIEUtils, getQueryString, isNullOrEmpty, isNullOrUndefined } from '../Utils/DataIEUtils';
import { NotifyService } from '@farris/ui-notify';
import { FileOperateService } from './file-operate.service';
import { DataImportService } from './data-import.service';
import { LoadingService } from '@farris/ui-loading';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-notify";
import * as i2 from "./file-operate.service";
import * as i3 from "@farris/ui-loading";
import * as i4 from "./data-import.service";
import * as i5 from "@angular/common/http";
var CustomDataIEService = /** @class */ (function () {
    function CustomDataIEService(notify, operateService, loadingService, importService, http) {
        var _this = this;
        this.notify = notify;
        this.operateService = operateService;
        this.loadingService = loadingService;
        this.importService = importService;
        this.http = http;
        this.origin = window.location.origin;
        this.customExportUrl = this.origin + '/api/runtime/dip/v1.0/customexport';
        this.customImportUrl = this.origin + '/api/runtime/dip/v1.0/customimport';
        this.export = new EventEmitter();
        this.complete = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.i18nResource = res;
        }));
    }
    /**
     * @param {?} model
     * @param {?} components
     * @param {?} frameContext
     * @param {?} suffix
     * @param {?} isImportForm
     * @param {?} i18nId
     * @param {?} dimension
     * @return {?}
     */
    CustomDataIEService.prototype.SaveCustomImportRule = /**
     * @param {?} model
     * @param {?} components
     * @param {?} frameContext
     * @param {?} suffix
     * @param {?} isImportForm
     * @param {?} i18nId
     * @param {?} dimension
     * @return {?}
     */
    function (model, components, frameContext, suffix, isImportForm, i18nId, dimension) {
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        var importParam = null;
        if (isNullOrUndefined(dimension)) {
            importParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataImport', model['MainObject']['Source']['SourceMetadataID']],
                    importForm: isImportForm,
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        else {
            importParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataImport', model['MainObject']['Source']['SourceMetadataID'], dimension],
                    importForm: isImportForm,
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        /** @type {?} */
        var subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(this.customImportUrl + "/AddImportRule", importParam.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(this.customImportUrl + "/AddImportRule", 'post', { su: su }, importParam);
        }
        return subject;
    };
    /**
     * @param {?} model
     * @param {?} components
     * @param {?} frameContext
     * @param {?} suffix
     * @param {?} i18nId
     * @param {?} dimension
     * @return {?}
     */
    CustomDataIEService.prototype.SaveCustomExportRule = /**
     * @param {?} model
     * @param {?} components
     * @param {?} frameContext
     * @param {?} suffix
     * @param {?} i18nId
     * @param {?} dimension
     * @return {?}
     */
    function (model, components, frameContext, suffix, i18nId, dimension) {
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        var exportParam = null;
        if (isNullOrUndefined(dimension)) {
            exportParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataExport', model['MainObject']['Source']['SourceMetadataID']],
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        else {
            exportParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataExport', model['MainObject']['Source']['SourceMetadataID'], dimension],
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        /** @type {?} */
        var subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(this.customExportUrl + "/AddExportRule", exportParam.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(this.customExportUrl + "/AddExportRule", 'post', { su: su }, exportParam);
        }
        return subject;
    };
    // 下载模板
    // 下载模板
    /**
     * @param {?} model
     * @param {?} frameContext
     * @param {?} importOption
     * @return {?}
     */
    CustomDataIEService.prototype.DowmloadTemplate = 
    // 下载模板
    /**
     * @param {?} model
     * @param {?} frameContext
     * @param {?} importOption
     * @return {?}
     */
    function (model, frameContext, importOption) {
        var _this = this;
        /** @type {?} */
        var keys = ['DataImport', model['MainObject']['Source']['SourceMetadataID'], importOption.dimension];
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        var templateParam = {
            body: {
                keys: keys,
                su: su
            }
        };
        /** @type {?} */
        var subject = befRestService.request(this.customImportUrl + "/TemplateDownload", 'post', { su: su }, templateParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data['success'] === true) {
                /** @type {?} */
                var filename = data['fileName'];
                if (importOption !== null && importOption['templatefilename'] !== null && importOption['templatefilename'] !== undefined) {
                    /** @type {?} */
                    var suffixIndex = filename.lastIndexOf('.');
                    /** @type {?} */
                    var suffix = filename.substring(suffixIndex);
                    filename = importOption['templatefilename'] + suffix;
                }
                /** @type {?} */
                var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                _this.operateService.DownloadFile(data['relativePath'], filename, preUrl, importOption);
                /** @type {?} */
                var subscription_1 = _this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result === '') {
                        _this.complete.emit('');
                        subscription_1.unsubscribe();
                    }
                    else {
                        _this.complete.emit(result);
                        subscription_1.unsubscribe();
                    }
                }));
            }
            else {
                _this.complete.emit(data['message']);
            }
        }));
    };
    /**
     * @param {?} keys
     * @param {?} repository
     * @param {?} i18nId
     * @param {?} model
     * @return {?}
     */
    CustomDataIEService.prototype.GetImportRuleModel = /**
     * @param {?} keys
     * @param {?} repository
     * @param {?} i18nId
     * @param {?} model
     * @return {?}
     */
    function (keys, repository, i18nId, model) {
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        var params = {
            body: {
                keys: keys,
                su: su,
                i18nId: i18nId,
                needI18nModel: JSON.stringify(model)
            }
        };
        /** @type {?} */
        var subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(this.customImportUrl + "/GetImportModel", params.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(this.customImportUrl + "/GetImportModel", 'post', { su: su }, params);
        }
        return subject;
    };
    /**
     * @param {?} keys
     * @param {?} repository
     * @param {?} i18nId
     * @param {?} model
     * @return {?}
     */
    CustomDataIEService.prototype.GetExportRuleModel = /**
     * @param {?} keys
     * @param {?} repository
     * @param {?} i18nId
     * @param {?} model
     * @return {?}
     */
    function (keys, repository, i18nId, model) {
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        var tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        var params = {
            body: {
                keys: keys,
                su: su,
                i18nId: i18nId,
                needI18nModel: JSON.stringify(model)
            }
        };
        /** @type {?} */
        var subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(this.customExportUrl + "/GetExportModel", params.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(this.customExportUrl + "/GetExportModel", 'post', { su: su }, params);
        }
        return subject;
    };
    /**
     * @param {?} commonParams
     * @return {?}
     */
    CustomDataIEService.prototype.ImportByRule = /**
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        /** @type {?} */
        var repository = commonParams.repository;
        /** @type {?} */
        var option = commonParams.option;
        /** @type {?} */
        var keys = commonParams.keys;
        /** @type {?} */
        var fileName = commonParams.fileName;
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        var globalVar = '';
        if (option !== null && option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            globalVar = JSON.stringify(option['GlobalParam']);
        }
        /** @type {?} */
        var funcId = getQueryString('funcId');
        /** @type {?} */
        var importParam = {
            body: {
                dataImportContext: {
                    Keys: keys,
                    FileName: fileName,
                    GlobalParam: globalVar,
                    funcId: funcId
                }
            }
        };
        commonParams.befRestService = befRestService;
        commonParams.importParam = importParam;
        commonParams.mainObjId = '';
        this.importService.Import(commonParams);
    };
    /**
     * @param {?} commonParams
     * @return {?}
     */
    CustomDataIEService.prototype.ImportSubTableByRule = /**
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        /** @type {?} */
        var repository = commonParams.repository;
        /** @type {?} */
        var option = commonParams.option;
        /** @type {?} */
        var keys = commonParams.keys;
        /** @type {?} */
        var fileName = commonParams.fileName;
        /** @type {?} */
        var frameContext = commonParams.frameContext;
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        var globalVar = '';
        if (option !== null && option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            globalVar = JSON.stringify(option['GlobalParam']);
        }
        if (frameContext.bindingData.list.currentId === '' || frameContext.bindingData.list.currentId === null) {
            this.notify.info(this.i18nResource['master_table_noid']);
            return false;
        }
        else {
            /** @type {?} */
            var funcId = getQueryString('funcId');
            /** @type {?} */
            var importParam = {
                body: {
                    dataImportContext: {
                        Keys: keys,
                        FileName: fileName,
                        MainObjId: frameContext.bindingData.list.currentId,
                        GlobalParam: globalVar,
                        funcId: funcId
                    },
                    requestInfo: befRestService.buildRequestInfo()
                }
            };
            commonParams.befRestService = befRestService;
            commonParams.importParam = importParam;
            commonParams.mainObjId = frameContext.bindingData.list.currentId;
            this.importService.Import(commonParams);
        }
    };
    /**
     * @param {?} keys
     * @param {?} filter
     * @param {?} option
     * @param {?} frameContext
     * @return {?}
     */
    CustomDataIEService.prototype.ExportByRule = /**
     * @param {?} keys
     * @param {?} filter
     * @param {?} option
     * @param {?} frameContext
     * @return {?}
     */
    function (keys, filter, option, frameContext) {
        var _this = this;
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        var funcId = getQueryString('funcId');
        /** @type {?} */
        var newFilters = [];
        /** @type {?} */
        var selectFilterGridComponent = option['selectFilterGridComponent'];
        if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
            /** @type {?} */
            var ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
            if (!isNullOrUndefined(ids) && ids.length > 0) {
                /** @type {?} */
                var idsStr = '';
                for (var i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    var id = ids[i];
                    if (i === ids.length - 1) {
                        idsStr += id;
                    }
                    else {
                        idsStr += id + '\r\n';
                    }
                }
                /** @type {?} */
                var selectIdFilterCondition = {
                    FilterField: "ID",
                    Compare: 14,
                    Value: idsStr,
                    Relation: 1,
                    Expresstype: 0
                };
                newFilters.push(selectIdFilterCondition);
            }
            else {
                this.notify.info(this.i18nResource['select-data-export']);
                return;
            }
        }
        if (option['enableScreeningScheme'] === true) {
            /** @type {?} */
            var filterConditionList = frameContext.uiState['filterConditionList'];
            if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                /** @type {?} */
                var filterConditionListJson = void 0;
                if (typeof (filterConditionList) === 'string') {
                    filterConditionListJson = JSON.parse(filterConditionList);
                }
                else {
                    filterConditionListJson = filterConditionList;
                }
                for (var index = 0; index < filterConditionListJson.length; index++) {
                    /** @type {?} */
                    var element = filterConditionListJson[index];
                    /** @type {?} */
                    var value = decodeURIComponent(element.Value);
                    element.Value = value;
                    newFilters.push(element);
                }
            }
        }
        if (newFilters.length > 0) {
            if (!isNullOrUndefined(filter) && filter.FilterConditions !== null) {
                filter.FilterConditions = newFilters.concat(filter.FilterConditions);
            }
            else {
                if (isNullOrUndefined(filter)) {
                    filter = {};
                }
                filter['FilterConditions'] = newFilters;
            }
        }
        if (!isNullOrUndefined(filter) && !isNullOrUndefined(filter.FilterConditions)) {
            //确保最后一个关系为空
            filter.FilterConditions[filter.FilterConditions.length - 1].Relation = 0;
        }
        /** @type {?} */
        var exportParam = {
            body: {
                exportContext: {
                    Filter: filter,
                    Keys: keys,
                    GlobalParam: '',
                    funcId: funcId
                }
            }
        };
        this.loadingService.show();
        /** @type {?} */
        var subject = befRestService.request(befRestService.baseUri + "/service/dataexportvmaction", 'put', null, exportParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === null) {
                // this.export.emit(false);
                _this.notify.info('数据导出失败！\n 失败原因：服务端响应异常，请检查');
            }
            /** @type {?} */
            var exportResult = (/** @type {?} */ (data.returnValue));
            if (isNullOrUndefined(exportResult)) {
                exportResult = (/** @type {?} */ (data));
            }
            /** @type {?} */
            var fileName = exportResult.fileName;
            if (option !== null && option['customfilename'] !== null && option['customfilename'] !== undefined) {
                /** @type {?} */
                var suffixIndex = fileName.lastIndexOf('.');
                /** @type {?} */
                var suffix = fileName.substring(suffixIndex);
                fileName = option['customfilename'] + suffix;
            }
            if (exportResult.succeed === true) {
                /** @type {?} */
                var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                _this.operateService.DownloadFile(exportResult.relativePath, fileName, preUrl, option);
                /** @type {?} */
                var subscriber_1 = _this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.loadingService.clearAll();
                    if (result === '') {
                        _this.export.emit('');
                        subscriber_1.unsubscribe();
                    }
                    else {
                        _this.export.emit(result);
                        subscriber_1.unsubscribe();
                    }
                }));
            }
            else {
                _this.loadingService.clearAll();
                _this.errorlevel = exportResult.errorLevel;
                _this.export.emit(exportResult.message);
                // this.notify.error('数据导出失败！\n 失败原因：' + exportResult.message);
            }
        }));
    };
    CustomDataIEService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CustomDataIEService.ctorParameters = function () { return [
        { type: NotifyService },
        { type: FileOperateService },
        { type: LoadingService },
        { type: DataImportService },
        { type: HttpClient }
    ]; };
    CustomDataIEService.propDecorators = {
        export: [{ type: Output }]
    };
    /** @nocollapse */ CustomDataIEService.ngInjectableDef = i0.defineInjectable({ factory: function CustomDataIEService_Factory() { return new CustomDataIEService(i0.inject(i1.NotifyService), i0.inject(i2.FileOperateService), i0.inject(i3.LoadingService), i0.inject(i4.DataImportService), i0.inject(i5.HttpClient)); }, token: CustomDataIEService, providedIn: "root" });
    return CustomDataIEService;
}());
export { CustomDataIEService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.origin;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.customExportUrl;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.customImportUrl;
    /** @type {?} */
    CustomDataIEService.prototype.complete;
    /** @type {?} */
    CustomDataIEService.prototype.export;
    /** @type {?} */
    CustomDataIEService.prototype.errorlevel;
    /** @type {?} */
    CustomDataIEService.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.operateService;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.importService;
    /**
     * @type {?}
     * @private
     */
    CustomDataIEService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,