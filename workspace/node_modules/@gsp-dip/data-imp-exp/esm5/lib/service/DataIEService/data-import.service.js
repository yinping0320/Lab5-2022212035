/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, EventEmitter, Injectable, Injector } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { ValidateFormComponent } from '../../validate-form/validate-form.component';
import { FileOperateService } from './file-operate.service';
import { NotifyService } from '@farris/ui-notify';
import { DataIEUtils, getQueryString, isNullOrEmpty, isNullOrUndefined } from '../Utils/DataIEUtils';
import { HttpClient } from '@angular/common/http';
import { MethodType } from "../../model/DataIEType/MethodType";
var DataImportService = /** @class */ (function () {
    function DataImportService(modalService, resolver, operateService, notify, http, injector) {
        var _this = this;
        this.modalService = modalService;
        this.resolver = resolver;
        this.operateService = operateService;
        this.notify = notify;
        this.http = http;
        this.injector = injector;
        this.origin = window.location.origin;
        this.url = this.origin + '/api/runtime/rtcommon/v1.0/import';
        this.DataIeProgressParams = {
            "ImportProgressValue": 13
        };
        this.complete = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.master_table_noid = res['master_table_noid'];
            _this.bind_form_error = res['bind_form_error'];
            _this.validate_result_show = res['validate_result_show'];
        }));
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    DataImportService.prototype.ImportSubTable = /**
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        /** @type {?} */
        var ruleId = commonParams.ruleId;
        /** @type {?} */
        var option = commonParams.option;
        /** @type {?} */
        var frameContext = commonParams.frameContext;
        /** @type {?} */
        var methodType = commonParams.methodType;
        /** @type {?} */
        var suffix = commonParams.suffix;
        /** @type {?} */
        var fileName = commonParams.fileName;
        /** @type {?} */
        var befRestService = this.getBefRestService(frameContext.repository);
        commonParams.befRestService = befRestService;
        commonParams.repository = frameContext.repository;
        /** @type {?} */
        var globalVar = '';
        if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            if (typeof (option['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(option['GlobalParam']);
            }
            else {
                globalVar = option['GlobalParam'];
            }
        }
        /** @type {?} */
        var model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        /** @type {?} */
        var mainObjId = frameContext.bindingData.list.currentId;
        if (isNullOrEmpty(mainObjId)) {
            this.notify.info(this.master_table_noid);
            return false;
            // this.errorlevel = 'Info';
            // this.complete.emit('未获取到主表ID值，请确认主表是否有数据');
        }
        else {
            /** @type {?} */
            var funcId = getQueryString('funcId');
            /** @type {?} */
            var importParam = {
                body: {
                    dataImportContext: {
                        RuleId: ruleId,
                        FileName: fileName,
                        MainObjId: mainObjId,
                        GlobalParam: globalVar,
                        Suffix: suffix,
                        Model: model,
                        funcId: funcId,
                        securityLevelName: commonParams.securityLevelName,
                        methodType: methodType
                    },
                    requestInfo: befRestService.buildRequestInfo()
                }
            };
            commonParams.importParam = importParam;
            commonParams.mainObjId = mainObjId;
            this.Import(commonParams);
        }
    };
    /**
     * @param {?} commonParams
     * @return {?}
     */
    DataImportService.prototype.ImportSubTable4HandCraft = /**
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        /** @type {?} */
        var ruleId = commonParams.ruleId;
        /** @type {?} */
        var option = commonParams.option;
        /** @type {?} */
        var frameContext = commonParams.frameContext;
        /** @type {?} */
        var suffix = commonParams.suffix;
        /** @type {?} */
        var fileName = commonParams.fileName;
        /** @type {?} */
        var globalVar = '';
        if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            if (typeof (option['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(option['GlobalParam']);
            }
            else {
                globalVar = option['GlobalParam'];
            }
        }
        /** @type {?} */
        var repository = frameContext === null ? null : frameContext.repository;
        /** @type {?} */
        var mainObjId = '';
        //手工表单仓库为null
        if (repository === null) {
            if (option['mainId'] === undefined || option['mainId'] === null || option['mainId'] === '') {
                this.notify.info(this.master_table_noid);
                return false;
            }
            else {
                mainObjId = option['mainId'];
            }
        }
        else { //通用导入
            if (frameContext.bindingData.list.currentId === '' || frameContext.bindingData.list.currentId === null) {
                this.notify.info(this.master_table_noid);
                return false;
            }
            else {
                mainObjId = frameContext.bindingData.list.currentId;
            }
        }
        /** @type {?} */
        var funcId = getQueryString('funcId');
        /** @type {?} */
        var importParam = {
            ruleId: ruleId,
            fileName: fileName,
            mainObjId: mainObjId,
            globalParam: globalVar,
            suffix: suffix,
            funcId: funcId,
            securityLevelName: commonParams.securityLevelName
        };
        commonParams.importParam = importParam;
        commonParams.mainObjId = mainObjId;
        // this.Import4HandCraft(commonParams);
    };
    /**
     * @param {?} commonParams
     * @return {?}
     */
    DataImportService.prototype.ImportByRuleId = /**
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        /** @type {?} */
        var ruleId = commonParams.ruleId;
        /** @type {?} */
        var option = commonParams.option;
        /** @type {?} */
        var repository = commonParams.repository;
        /** @type {?} */
        var suffix = commonParams.suffix;
        /** @type {?} */
        var fileName = commonParams.fileName;
        /** @type {?} */
        var methodType = commonParams.methodType;
        /** @type {?} */
        var befRestService = this.getBefRestService(repository);
        commonParams.befRestService = befRestService;
        /** @type {?} */
        var globalVar = '';
        if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            if (typeof (option['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(option['GlobalParam']);
            }
            else {
                globalVar = option['GlobalParam'];
            }
        }
        /** @type {?} */
        var model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        console.log('baseUri: ' + befRestService.baseUri);
        /** @type {?} */
        var funcId = getQueryString('funcId');
        if (methodType === MethodType.CardFormDataImport) {
            commonParams.mainObjId = option.mainObjId;
        }
        else {
            commonParams.mainObjId = '';
        }
        /** @type {?} */
        var importParam = {
            body: {
                dataImportContext: {
                    RuleId: ruleId,
                    FileName: fileName,
                    GlobalParam: globalVar,
                    Suffix: suffix,
                    Model: model,
                    funcId: funcId,
                    securityLevelName: commonParams.securityLevelName,
                    mainObjId: commonParams.mainObjId,
                    methodType: methodType
                }
            }
        };
        commonParams.importParam = importParam;
        this.Import(commonParams);
    };
    /**
     * @param {?} commonParams
     * @return {?}
     */
    DataImportService.prototype.Import = /**
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        var _this = this;
        /** @type {?} */
        var repository = commonParams.repository;
        /** @type {?} */
        var importParam = commonParams.importParam;
        /** @type {?} */
        var befRestService = commonParams.befRestService;
        /** @type {?} */
        var methodType = commonParams.methodType;
        /** @type {?} */
        var subscriber = befRestService.request(befRestService.baseUri + "/service/dataimportvmaction", 'put', null, importParam);
        subscriber.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var su = DataIEUtils.getSu(befRestService.baseUri);
            /** @type {?} */
            var importResult = (/** @type {?} */ (data.returnValue));
            if (isNullOrUndefined(importResult)) {
                importResult = (/** @type {?} */ (data));
            }
            commonParams.su = su;
            commonParams.importResult = importResult;
            if (importResult.succeed === true) {
                try {
                    if (importResult.formData && importResult.formData.length > 0) {
                        importResult.isform = true;
                        if (methodType === MethodType.ImportSubTableDetail) {
                            //子表导入表单
                            /** @type {?} */
                            var newData = importResult.formData[0];
                            /** @type {?} */
                            var curEntity = repository.entityCollection.getEntityById(commonParams.mainObjId);
                            curEntity.load(newData);
                        }
                        else if (methodType === MethodType.CardFormDataImport) {
                            //卡片导入不走数据加载，导入命令完成后有更新命令
                        }
                        else {
                            //主从表导入表单
                            /** @type {?} */
                            var entities_1 = [];
                            importResult.formData.forEach((/**
                             * @param {?} rdata
                             * @return {?}
                             */
                            function (rdata) {
                                /** @type {?} */
                                var entity = repository.buildEntity(rdata);
                                entities_1.push(entity);
                            }));
                            repository.entityCollection.addEntities(entities_1);
                        }
                    }
                    if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                        _this.complete.emit('部分数据导入完成');
                    }
                    else {
                        if (importResult.isform == true) {
                            //此处为传递，无需国际化
                            _this.complete.emit('导入表单成功');
                        }
                        else {
                            _this.complete.emit('');
                        }
                    }
                    // this.complete.emit(true);
                    //this.complete.emit('');
                    //导入成功如果展示校验结果，只能是校验策略是忽略，所有校验结果都是error
                    _this.ShowValidatedResult(commonParams);
                    // this.notify.info('数据导入成功');
                    // this.needDestroy.emit();
                }
                catch (_a) {
                    // this.complete.emit(false);
                    _this.complete.emit(importResult.message);
                    _this.notify.error(_this.bind_form_error);
                }
            }
            else {
                console.log(importResult.exceptionSource);
                _this.errorlevel = importResult.errorLevel;
                _this.ShowValidatedResult(commonParams);
                // this.complete.emit(importResult.message);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.log(error);
            _this.errorlevel = 'error';
            _this.complete.emit(error.error.Message);
        }));
    };
    // 显示校验结果
    // 显示校验结果
    /**
     * @private
     * @param {?} commonParams
     * @return {?}
     */
    DataImportService.prototype.ShowValidatedResult = 
    // 显示校验结果
    /**
     * @private
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        var _this = this;
        /** @type {?} */
        var importResult = commonParams.importResult;
        /** @type {?} */
        var loadingParam = commonParams.loadingParam;
        /** @type {?} */
        var befRestService = commonParams.befRestService;
        if (importResult.validatedResults && importResult.validatedResults.length > 0) {
            loadingParam.loadingService.clearAll();
            /** @type {?} */
            var cmpRef = this.CreateValidatedComponent();
            cmpRef.instance.validateResult = importResult.validatedResults;
            cmpRef.instance.su = commonParams.su;
            cmpRef.instance.i18nResource = commonParams.i18nResource;
            cmpRef.instance.loadingParam = loadingParam;
            /** @type {?} */
            var validateModalConfig = {
                title: this.validate_result_show,
                width: 950,
                height: 550,
                buttons: cmpRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            var dialog_1 = this.modalService.show(cmpRef, validateModalConfig);
            //0代表按钮中止或X点击；1代表按钮继续
            /** @type {?} */
            var closed_1 = 0;
            dialog_1.dialog.instance.closed.subscribe((/**
             * @return {?}
             */
            function () {
                if (closed_1 === 0) {
                    _this.complete.emit('校验中止');
                }
            }));
            cmpRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                closed_1 = 0;
                dialog_1.close();
            }));
            cmpRef.instance.okModal.subscribe((/**
             * @param {?} validatedInfoList
             * @return {?}
             */
            function (validatedInfoList) {
                closed_1 = 1;
                dialog_1.close();
                loadingParam.loadingService.show(loadingParam.loadingConfig);
                commonParams.importParam.body.dataImportContext['validatedInfoList'] = validatedInfoList;
                _this.Import(commonParams);
            }));
        }
        else {
            this.complete.emit(importResult.message);
        }
    };
    /**
     * @private
     * @param {?} repository
     * @return {?}
     */
    DataImportService.prototype.getBefRestService = /**
     * @private
     * @param {?} repository
     * @return {?}
     */
    function (repository) {
        /** @type {?} */
        var befRepository = (/** @type {?} */ (repository));
        return befRepository.restService;
    };
    // 生成校验窗口组件
    // 生成校验窗口组件
    /**
     * @private
     * @return {?}
     */
    DataImportService.prototype.CreateValidatedComponent = 
    // 生成校验窗口组件
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ValidateFormComponent);
        /** @type {?} */
        var comRef = compFactory.create(this.injector);
        return comRef;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    DataImportService.prototype.JudgeIllegalChar = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ','];
        illegalChar.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (str.indexOf(item) !== -1) {
                return true;
            }
        }));
        return false;
    };
    // 下载模板
    // 下载模板
    /**
     * @param {?} ruleId
     * @param {?} repository
     * @param {?} importOption
     * @param {?} suffix
     * @return {?}
     */
    DataImportService.prototype.DowmloadTemplate = 
    // 下载模板
    /**
     * @param {?} ruleId
     * @param {?} repository
     * @param {?} importOption
     * @param {?} suffix
     * @return {?}
     */
    function (ruleId, repository, importOption, suffix) {
        var _this = this;
        /** @type {?} */
        var befRestService = this.getBefRestService(repository);
        /** @type {?} */
        var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var tempUrl = preUrl + "/import";
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        if (importOption['su'] !== undefined && importOption['su'] !== null) {
            su = importOption['su'];
        }
        /** @type {?} */
        var securityLevelName = '';
        if (!isNullOrUndefined(importOption.securityLevelName)) {
            securityLevelName = importOption.securityLevelName;
        }
        /** @type {?} */
        var model = '';
        if (importOption.Models !== undefined && importOption.Models !== null && importOption.Models.length > 0) {
            model = JSON.stringify(importOption.Models[0]);
        }
        /** @type {?} */
        var globalVar = '';
        if (!isNullOrUndefined(importOption['GlobalParam'])) {
            if (typeof (importOption['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(importOption['GlobalParam']);
            }
            else {
                globalVar = importOption['GlobalParam'];
            }
        }
        /** @type {?} */
        var templateParam = {
            body: {
                ruleId: ruleId,
                suffix: suffix,
                su: su,
                model: model,
                globalParam: globalVar,
                securityLevelName: securityLevelName
            }
        };
        /** @type {?} */
        var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport';
        /** @type {?} */
        var subscriber = befRestService.request(fixedUrl + "/TemplateDownload", 'post', { su: su }, templateParam);
        subscriber.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data['result'] === true) {
                /** @type {?} */
                var filename = '';
                if (importOption['templatefilename'] === '' || importOption['templatefilename'] === undefined) {
                    filename = data['fileName'];
                }
                else {
                    /** @type {?} */
                    var suffixIndex = data['fileName'].lastIndexOf('.');
                    /** @type {?} */
                    var tempsuffix = data['fileName'].substring(suffixIndex);
                    /** @type {?} */
                    var customName = importOption['templatefilename'];
                    if (!_this.JudgeIllegalChar(customName)) {
                        if (customName.indexOf('.') !== -1) {
                            filename = customName;
                        }
                        else {
                            filename = customName + tempsuffix;
                        }
                    }
                    else {
                        filename = data['fileName'];
                    }
                }
                _this.operateService.DownloadFile(data['docRelativePath'], filename, preUrl, importOption);
                /** @type {?} */
                var subscription_1 = _this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result === '') {
                        _this.complete.emit('');
                        subscription_1.unsubscribe();
                    }
                    else {
                        _this.complete.emit(result);
                        subscription_1.unsubscribe();
                    }
                }));
            }
            else {
                // this.notify.error('下载模板失败，失败信息：' + data['message']);
                _this.complete.emit(data['message']);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.log(error);
            _this.complete.emit('下载模板失败');
        }));
    };
    // 下载模板
    // 下载模板
    /**
     * @param {?} ruleId
     * @param {?} importOption
     * @param {?} suffix
     * @return {?}
     */
    DataImportService.prototype.DowmloadTemplate4HandCraft = 
    // 下载模板
    /**
     * @param {?} ruleId
     * @param {?} importOption
     * @param {?} suffix
     * @return {?}
     */
    function (ruleId, importOption, suffix) {
        var _this = this;
        /** @type {?} */
        var su = importOption.su;
        /** @type {?} */
        var globalVar = '';
        if (importOption['GlobalParam'] !== null && importOption['GlobalParam'] !== undefined) {
            if (typeof (importOption['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(importOption['GlobalParam']);
            }
            else {
                globalVar = importOption['GlobalParam'];
            }
        }
        /** @type {?} */
        var securityLevelName = '';
        if (!isNullOrUndefined(importOption.securityLevelName)) {
            securityLevelName = importOption.securityLevelName;
        }
        /** @type {?} */
        var templateParam = {
            ruleId: ruleId,
            suffix: suffix,
            su: su,
            globalParam: globalVar,
            securityLevelName: securityLevelName
        };
        /** @type {?} */
        var fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/TemplateDownload';
        this.http.post(fixedUrl, templateParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            console.log(res);
            /** @type {?} */
            var data = res.body;
            if (data.type == 'application/json') {
                /** @type {?} */
                var reader_1 = new FileReader();
                reader_1.onload = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var responseParam = JSON.parse((/** @type {?} */ (reader_1.result)));
                    if (!responseParam.result) {
                        _this.complete.emit(responseParam.message);
                    }
                });
                reader_1.readAsText(data, 'utf-8');
            }
            else {
                /** @type {?} */
                var fileName = '';
                /** @type {?} */
                var contentDisposition = res.headers.get("content-disposition");
                if (contentDisposition) {
                    // 正则获取filename的值
                    /** @type {?} */
                    var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                    /** @type {?} */
                    var matches = filenameRegex.exec(contentDisposition);
                    if (matches != null && matches[1]) {
                        fileName = matches[1].replace(/['"]/g, '');
                    }
                    // 通过 URLEncoder.encode(pFileName, StandardCharsets.UTF_8.name()) 加密编码的, 使用decodeURI(fileName) 解密
                    fileName = decodeURI(fileName);
                    // 通过 new String(pFileName.getBytes(), StandardCharsets.ISO_8859_1) 加密编码的, 使用decodeURI(escape(fileName)) 解密
                    // fileName = decodeURI(escape(fileName))
                }
                if (!isNullOrUndefined(importOption.templatefilename)) {
                    /** @type {?} */
                    var suffixIndex = fileName.lastIndexOf('.');
                    /** @type {?} */
                    var suffix_1 = fileName.substring(suffixIndex);
                    fileName = importOption.templatefilename + suffix_1;
                }
                /** @type {?} */
                var blob = new Blob([data]);
                if (!data || data.size == 0) {
                    _this.complete.emit('返回的数据为空');
                }
                else {
                    if (navigator.msSaveOrOpenBlob) {
                        navigator.msSaveOrOpenBlob(blob, fileName);
                    }
                    else {
                        /** @type {?} */
                        var link = document.createElement('a');
                        link.setAttribute('href', window.URL.createObjectURL(blob));
                        // 设置下载的文件名
                        link.setAttribute('download', fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                    _this.complete.emit('');
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.complete.error(error.error.Message);
        }));
    };
    DataImportService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataImportService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: FileOperateService },
        { type: NotifyService },
        { type: HttpClient },
        { type: Injector }
    ]; };
    return DataImportService;
}());
export { DataImportService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.origin;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.url;
    /** @type {?} */
    DataImportService.prototype.DataIeProgressParams;
    /** @type {?} */
    DataImportService.prototype.complete;
    /** @type {?} */
    DataImportService.prototype.errorlevel;
    /** @type {?} */
    DataImportService.prototype.master_table_noid;
    /** @type {?} */
    DataImportService.prototype.bind_form_error;
    /** @type {?} */
    DataImportService.prototype.validate_result_show;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.operateService;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DataImportService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,