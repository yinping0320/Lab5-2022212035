/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { DataExportService } from './data-export.service';
import { NotifyService } from '@farris/ui-notify';
import { Subject } from 'rxjs';
import { MethodType } from '../../model/DataIEType/MethodType';
import { BsModalService } from '@farris/ui-modal';
import { DataIEUtils, isNullOrEmpty, isNullOrUndefined } from '../Utils/DataIEUtils';
import { HttpClient } from '@angular/common/http';
import { CustomDataIEService } from './custom-data-ie.service';
import { ImportDialogHandcraftComponent } from '../../import-dialog-handcraft/import-dialog-handcraft.component';
import { LoadingService } from "@farris/ui-loading";
import { ExportCustomSelectHandcraftComponent } from "../../export-custom-select-handcraft/export-custom-select-handcraft.component";
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "./data-export.service";
import * as i3 from "@farris/ui-notify";
import * as i4 from "./custom-data-ie.service";
import * as i5 from "@angular/common/http";
import * as i6 from "@farris/ui-loading";
var DataieHandcraftService = /** @class */ (function () {
    function DataieHandcraftService(resolver, modalService, injector, dataExportService, notify, customIEService, http, loadingService) {
        var _this = this;
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.customIEService = customIEService;
        this.http = http;
        this.loadingService = loadingService;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.data_import = res['data_import'];
            _this.data_export = res['data_export'];
            _this.export_success = res['export_success'];
            _this.export_fail = res['export_fail'];
            _this.data_export_customfile = res['data_export_customfile'];
            _this.i18nResource = res;
        }));
    }
    /**
     * 通用导出方法
     * @param type
     * @param ruleID
     * @param option
     */
    /**
     * 通用导出方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.CommonDataExport = /**
     * 通用导出方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (type, ruleID, option) {
        if (type === 1) {
            console.log('执行方法：ExportCurrentListData');
            throw new Error('不支持配置该类型:1');
        }
        else if (type === 2) {
            console.log('执行方法：ExportByModel');
            throw new Error('不支持配置该类型:2');
        }
        else if (type === 3) {
            console.log('执行方法：ExportCurrentChildData');
            // return this.ExportCurrentChildData(ruleID, option);
            throw new Error('不支持配置该类型:3');
        }
        else if (type === 0) {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
    };
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.ExportByRule = /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.CommonExport).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.ExportCurrentChildData = /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentChildData).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    DataieHandcraftService.prototype.ExportCommonEntry = /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    function (ruleID, option, methodType) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var optionJson = this.ParseExportJson(option);
        console.log(optionJson);
        if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.voId)) {
            this.notify.warning("未配置规则id，且无法获取到表单对应的voId，请检查");
            /** @type {?} */
            var res = {
                type: 'close',
                data: null,
                other: null
            };
            subject.next(res);
            return subject;
        }
        if (methodType === MethodType.ExportCurrentChildData) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.exportChildNodeCode)) {
                //导出子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据Vo查找规则，导出子表必须配置子表节点");
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        if (isNullOrEmpty(ruleID) || optionJson.enableRuntimeCustom === true) {
            this.StartLoading();
            /** @type {?} */
            var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
            /** @type {?} */
            var postBody = {
                body: {
                    ruleId: ruleID,
                    ruleType: 1,
                    voId: optionJson.voId,
                    needModelConvert: optionJson.needModelConvert === true,
                    methodType: methodType,
                    exportChildNodeCode: optionJson.exportChildNodeCode,
                    enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                }
            };
            this.http.post(url, postBody.body).subscribe((/**
             * @param {?} recordRule
             * @return {?}
             */
            function (recordRule) {
                _this.CloseLoading();
                optionJson.voId = recordRule.voId;
                _this.ExportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
                 * @param {?} s
                 * @return {?}
                 */
                function (s) {
                    subject.next(s);
                    subject.complete();
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.CloseLoading();
                _this.notify.error(error.error.Message);
                console.log(error.error.Message);
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: error.error.Message
                };
                subject.next(res);
            }));
        }
        else {
            this.ExportByRuleImpl(ruleID, optionJson, methodType).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                subject.next(s);
                subject.complete();
            }));
        }
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} mType
     * @param {?=} recordRule
     * @return {?}
     */
    DataieHandcraftService.prototype.ExportByRuleImpl = /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} mType
     * @param {?=} recordRule
     * @return {?}
     */
    function (ruleID, optionJson, mType, recordRule) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            if (optionJson.customExportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customExportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        if (optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(ExportCustomSelectHandcraftComponent);
            /** @type {?} */
            var cmpRef = compFactory.create(this.injector);
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.exportOption = optionJson;
            cmpRef.instance.recordRule = recordRule;
            cmpRef.instance.subject = subject;
            cmpRef.instance.methodType = MethodType.CommonExport;
            /** @type {?} */
            var title = this.data_export;
            if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                title = optionJson.customExportTitle;
            }
            /** @type {?} */
            var exportModalConfig = {
                title: title,
                width: 530,
                height: 342,
                buttons: cmpRef.instance.modalFooter,
                showCloseButton: true,
                showMaxButton: false,
                showMinButton: false,
                showButtons: true,
                resizable: false
            };
            /** @type {?} */
            var dialog_1 = this.modalService.show(cmpRef, exportModalConfig);
            dialog_1.dialog.instance.closed.subscribe((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
            }));
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                dialog_1.close();
            }));
        }
        else {
            if (!isNullOrUndefined(recordRule) && !isNullOrEmpty(recordRule.ruleId)) {
                ruleID = recordRule.ruleId;
            }
            if (mType == MethodType.CommonExport) {
                this.dataExportService.ExportById4HandCraft(ruleID, optionJson);
            }
            else if (mType == MethodType.ExportCurrentTableData) {
                throw new Error('不支持该类型:ExportCurrentTableData');
            }
            else {
                throw new Error('不支持该类型:ExportCurrentChildData');
            }
            /** @type {?} */
            var unscriber_1 = this.dataExportService.export.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data === '') {
                    /** @type {?} */
                    var res = {
                        type: 'success',
                        data: null,
                        other: null
                    };
                    subject.next(res);
                    subject.complete();
                }
                else {
                    /** @type {?} */
                    var errorlevel = _this.dataExportService.errorlevel;
                    if (errorlevel === 'Info') {
                        _this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        _this.notify.warning(data);
                    }
                    else {
                        _this.notify.error(_this.export_fail + data);
                    }
                    /** @type {?} */
                    var res = {
                        type: 'fail',
                        data: null,
                        other: data
                    };
                    subject.next(res);
                    subject.complete();
                }
                unscriber_1.unsubscribe();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.notify.error(error.error.Message);
                /** @type {?} */
                var res = {
                    type: 'fail',
                    data: null,
                    other: error.error.Message
                };
                subject.next(res);
                subject.complete();
            }));
        }
        return subject;
    };
    /**
     * 通用导入方法
     * @param type
     * @param ruleID
     * @param option
     */
    /**
     * 通用导入方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.CommonDataImport = /**
     * 通用导入方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (type, ruleID, option) {
        if (type === 1) {
            console.log('执行方法：ImportSublistData');
            return this.ImportSublistData(ruleID, option);
        }
        else if (type === 2) {
            console.log('执行方法：ImportByModel');
            throw new Error('不支持配置该类型:2');
        }
        else if (type === 0) {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
    };
    // 普通导入
    // 普通导入
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.ImportByRule = 
    // 普通导入
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.CommonImport).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    // 子表导入
    // 子表导入
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.ImportSublistData = 
    // 子表导入
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    function (ruleID, option) {
        /** @type {?} */
        var subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.ImportSubTableDetail).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    DataieHandcraftService.prototype.ImportCommonEntry = /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    function (ruleID, option, methodType) {
        var _this = this;
        console.log(option);
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var optionJson = this.ParseImportJson(option);
        /** @type {?} */
        var su = optionJson.su;
        if (methodType === MethodType.ImportSubTableDetail) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.importChildNodeCode)) {
                //导入子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据模型查找规则，导入子表必须配置子表节点");
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        this.StartLoading();
        /** @type {?} */
        var url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
        /** @type {?} */
        var postBody = {
            body: {
                ruleId: ruleID,
                su: su,
                ruleType: 0,
                voId: optionJson.voId,
                needModelConvert: optionJson.needModelConvert === true,
                methodType: methodType,
                importChildNodeCode: optionJson.importChildNodeCode,
                enableRuntimeCustom: optionJson.enableRuntimeCustom === true
            }
        };
        this.http.post(url, postBody.body).subscribe((/**
         * @param {?} recordRule
         * @return {?}
         */
        function (recordRule) {
            _this.CloseLoading();
            optionJson.voId = recordRule.voId;
            _this.ImportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                subject.next(s);
                subject.complete();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.CloseLoading();
            _this.notify.error(error.error.Message);
            console.log(error.error.Message);
            /** @type {?} */
            var res = {
                type: 'close',
                data: null,
                other: error.error.Message
            };
            subject.next(res);
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} methodType
     * @param {?=} recordRule
     * @return {?}
     */
    DataieHandcraftService.prototype.ImportByRuleImpl = /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} methodType
     * @param {?=} recordRule
     * @return {?}
     */
    function (ruleID, optionJson, methodType, recordRule) {
        /** @type {?} */
        var subject = new Subject();
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            if (optionJson.customImportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                /** @type {?} */
                var res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ImportDialogHandcraftComponent);
        /** @type {?} */
        var cmpRef = compFactory.create(this.injector);
        cmpRef.instance.ruleId = ruleID;
        cmpRef.instance.recordRule = recordRule;
        cmpRef.instance.importOption = optionJson;
        if (methodType == MethodType.CommonImport) {
            cmpRef.instance.methodType = MethodType.CommonImport;
        }
        else {
            cmpRef.instance.methodType = MethodType.ImportSubTableDetail;
        }
        cmpRef.instance.subject = subject;
        /** @type {?} */
        var title = this.data_import;
        if (!isNullOrUndefined(optionJson.customImportTitle)) {
            title = optionJson.customImportTitle;
        }
        /** @type {?} */
        var importModalConfig = {
            title: title,
            width: 530,
            height: 342,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(cmpRef, importModalConfig);
        dialog.dialog.instance.closed.subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = {
                type: 'close',
                data: null,
                other: null
            };
            subject.next(res);
        }));
        cmpRef.instance.needDestroy.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            dialog.close();
            /** @type {?} */
            var importResult = (/** @type {?} */ (data));
            if (!isNullOrUndefined(importResult)) {
                /** @type {?} */
                var res = void 0;
                if (importResult.succeed) {
                    res = {
                        type: 'success',
                        data: importResult,
                        other: null
                    };
                }
                else {
                    res = {
                        type: 'fail',
                        data: importResult,
                        other: null
                    };
                }
                subject.next(res);
                subject.complete();
            }
        }));
        return subject;
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.ParseExportJson = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (typeof (option) === 'object') {
            return option;
        }
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return {};
        }
        /** @type {?} */
        var optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return {};
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        return optionJson;
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    DataieHandcraftService.prototype.ParseImportJson = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (typeof (option) === 'object') {
            return option;
        }
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return {};
        }
        /** @type {?} */
        var optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return {};
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        /** @type {?} */
        var globalParam = optionJson['globalParam'];
        if (globalParam !== undefined && globalParam !== null) {
            optionJson['GlobalParam'] = globalParam;
        }
        return optionJson;
    };
    /**
     * @return {?}
     */
    DataieHandcraftService.prototype.StartLoading = /**
     * @return {?}
     */
    function () {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.show();
        }
    };
    /**
     * @return {?}
     */
    DataieHandcraftService.prototype.CloseLoading = /**
     * @return {?}
     */
    function () {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.clearAll();
        }
    };
    DataieHandcraftService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DataieHandcraftService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: Injector },
        { type: DataExportService },
        { type: NotifyService },
        { type: CustomDataIEService },
        { type: HttpClient },
        { type: LoadingService }
    ]; };
    /** @nocollapse */ DataieHandcraftService.ngInjectableDef = i0.defineInjectable({ factory: function DataieHandcraftService_Factory() { return new DataieHandcraftService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i1.BsModalService), i0.inject(i0.INJECTOR), i0.inject(i2.DataExportService), i0.inject(i3.NotifyService), i0.inject(i4.CustomDataIEService), i0.inject(i5.HttpClient), i0.inject(i6.LoadingService)); }, token: DataieHandcraftService, providedIn: "root" });
    return DataieHandcraftService;
}());
export { DataieHandcraftService };
if (false) {
    /** @type {?} */
    DataieHandcraftService.prototype.data_import;
    /** @type {?} */
    DataieHandcraftService.prototype.data_export;
    /** @type {?} */
    DataieHandcraftService.prototype.data_export_customfile;
    /** @type {?} */
    DataieHandcraftService.prototype.export_success;
    /** @type {?} */
    DataieHandcraftService.prototype.export_fail;
    /** @type {?} */
    DataieHandcraftService.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.dataExportService;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.customIEService;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DataieHandcraftService.prototype.loadingService;
}
//# sourceMappingURL=data:application/json;base64,