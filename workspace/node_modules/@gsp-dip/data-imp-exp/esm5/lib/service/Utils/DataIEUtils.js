/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultLang } from '../../i18n/default-lang';
import { of, Subject } from 'rxjs';
import { FileConst } from '../../model/utils/FileConst';
/**
 * @param {?} obj
 * @return {?}
 */
export function isNullOrUndefined(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj === null) {
        return true;
    }
    return false;
}
/**
 * @param {?} obj
 * @return {?}
 */
export function isNullOrEmpty(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj === null) {
        return true;
    }
    if (obj.length == 0) {
        return true;
    }
    return false;
}
/**
 * @param {?} str
 * @return {?}
 */
export function isNullOrBlank(str) {
    if (str == null) {
        return true;
    }
    if (str.trim().length == 0) {
        return true;
    }
    return false;
}
/**
 * @param {?} paraName
 * @return {?}
 */
export function getQueryString(paraName) {
    /** @type {?} */
    var url = window.location.hash;
    /** @type {?} */
    var arrObj = url.split('?');
    if (arrObj.length > 1) {
        /** @type {?} */
        var arrPara = arrObj[1].split('&');
        /** @type {?} */
        var arr = void 0;
        // tslint:disable-next-line: prefer-for-of
        for (var i = 0; i < arrPara.length; i++) {
            arr = arrPara[i].split('=');
            if (arr != null && arr[0] === paraName) {
                return arr[1];
            }
        }
        return '';
    }
    else {
        return '';
    }
}
var FileTypeUtil = /** @class */ (function () {
    function FileTypeUtil() {
    }
    /**
     * @param {?} valueField
     * @return {?}
     */
    FileTypeUtil.getFileExtension = /**
     * @param {?} valueField
     * @return {?}
     */
    function (valueField) {
        /** @type {?} */
        var suffix = null;
        switch (valueField) {
            case FileConst.xls:
                suffix = '.xls';
                break;
            case FileConst.xlsx:
                suffix = '.xlsx';
                break;
            case FileConst.xlsm:
                suffix = '.xlsm';
                break;
            case FileConst.et:
                suffix = '.et';
                break;
            case FileConst.xml:
                suffix = '.xml';
                break;
            case FileConst.pdf:
                suffix = '.pdf';
                break;
            case FileConst.csv:
                suffix = '.csv';
                break;
            default:
                break;
        }
        return suffix;
    };
    /**
     * @param {?} fileType
     * @return {?}
     */
    FileTypeUtil.getFileTypeName = /**
     * @param {?} fileType
     * @return {?}
     */
    function (fileType) {
        /** @type {?} */
        var fileTypeName = '';
        switch (fileType) {
            case 'XLS':
                fileTypeName = FileConst.xls;
                break;
            case 'XLSX':
                fileTypeName = FileConst.xlsx;
                break;
            case 'XLSM':
                fileTypeName = FileConst.xlsm;
                break;
            case 'ET':
                fileTypeName = FileConst.et;
                break;
            case 'XML':
                fileTypeName = FileConst.xml;
                break;
            case 'PDF':
                fileTypeName = FileConst.pdf;
                break;
            case 'CSV':
                fileTypeName = FileConst.csv;
                break;
            default:
                break;
        }
        return fileTypeName;
    };
    return FileTypeUtil;
}());
export { FileTypeUtil };
var DataIEUtils = /** @class */ (function () {
    function DataIEUtils() {
    }
    /**
     * @param {?} repository
     * @param {?} option
     * @return {?}
     */
    DataIEUtils.ChooseSu = /**
     * @param {?} repository
     * @param {?} option
     * @return {?}
     */
    function (repository, option) {
        /** @type {?} */
        var su = '';
        // 通用导入导出仓库存在，使用下面分支
        if (repository !== null) {
            /** @type {?} */
            var befRestService = DataIEUtils.GetBefRestService(repository);
            su = DataIEUtils.getSu(befRestService.baseUri);
        }
        // 手工开发的仓库不存在，采用传入的su
        if (option['su'] !== undefined && option['su'] !== null) {
            su = option['su'];
        }
        return su;
    };
    /**
     * @param {?} preurl
     * @return {?}
     */
    DataIEUtils.getSu = /**
     * @param {?} preurl
     * @return {?}
     */
    function (preurl) {
        /** @type {?} */
        var str = preurl.substring(preurl.indexOf("//") + 2);
        /** @type {?} */
        var strs = str.split('/');
        /** @type {?} */
        var su = strs[3];
        return su;
    };
    /**
     * @param {?} preurl
     * @return {?}
     */
    DataIEUtils.getApp = /**
     * @param {?} preurl
     * @return {?}
     */
    function (preurl) {
        /** @type {?} */
        var str = preurl.substring(preurl.indexOf("//") + 2);
        /** @type {?} */
        var strs = str.split('/');
        /** @type {?} */
        var app = strs[2];
        return app;
    };
    /**
     * @param {?} preurl
     * @return {?}
     */
    DataIEUtils.getPort = /**
     * @param {?} preurl
     * @return {?}
     */
    function (preurl) {
        // "http://localhost:5000/api/scm/sd/v1.0"
        /** @type {?} */
        var str = preurl.substring(preurl.indexOf("//") + 2);
        // 只取前两位，51xx,50xx,52xx
        /** @type {?} */
        var port = str.substr(str.indexOf(':') + 1, 2);
        return port;
    };
    /**
     * @param {?} repository
     * @return {?}
     */
    DataIEUtils.GetBefRestService = /**
     * @param {?} repository
     * @return {?}
     */
    function (repository) {
        /** @type {?} */
        var befRepository = (/** @type {?} */ (repository));
        return befRepository.restService;
    };
    /**
     * @param {?} baseUrl
     * @return {?}
     */
    DataIEUtils.GetPreUrl = /**
     * @param {?} baseUrl
     * @return {?}
     */
    function (baseUrl) {
        /** @type {?} */
        var lastIndex = baseUrl.lastIndexOf('/');
        /** @type {?} */
        var preurl = baseUrl.substr(0, lastIndex);
        return preurl;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    DataIEUtils.JudgeIllegalChar = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ',', ' '];
        illegalChar.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (str.indexOf(item) !== -1) {
                return true;
            }
        }));
        return false;
    };
    /**
     * @param {?} http
     * @return {?}
     */
    DataIEUtils.getTranslateValue = /**
     * @param {?} http
     * @return {?}
     */
    function (http) {
        /** @type {?} */
        var lang;
        if (localStorage === undefined || localStorage === null) {
            return of(DefaultLang['zh-CHS']);
        }
        lang = localStorage.getItem('languageCode');
        if (lang === undefined || lang === null || lang === 'zh-CHS') {
            return of(DefaultLang['zh-CHS']);
        }
        if (http === undefined || http === null) {
            return of(DefaultLang['zh-CHS']);
        }
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var url = "/platform/common/web/@gsp-dip/i18n/" + lang + ".json";
        http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.log(data);
            subject.next(data);
        }));
        return subject;
    };
    return DataIEUtils;
}());
export { DataIEUtils };
//# sourceMappingURL=data:application/json;base64,