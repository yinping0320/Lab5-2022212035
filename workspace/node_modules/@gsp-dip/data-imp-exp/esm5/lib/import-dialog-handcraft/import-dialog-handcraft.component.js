/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { FileUploader } from '../service/UploaderService/FileUpload/file-uploader';
import { DataImportService } from '../service/DataIEService/data-import.service';
import { NotifyService } from '@farris/ui-notify';
import { LoadingService } from '@farris/ui-loading';
import { MethodType } from '../model/DataIEType/MethodType';
import { Subject } from 'rxjs';
import { DataIEUtils, FileTypeUtil, isNullOrEmpty, isNullOrUndefined } from '../service/Utils/DataIEUtils';
import { HttpClient } from '@angular/common/http';
import { BsModalService } from '@farris/ui-modal';
import { RuleSelectComponent } from '../rule-select/rule-select.component';
import { MessagerService } from '@farris/ui-messager';
import { FileConst } from '../model/utils/FileConst';
import { CommonParams } from "../service/Entity/CommonParams";
import { ValidateFormComponent } from "../validate-form/validate-form.component";
var ImportDialogHandcraftComponent = /** @class */ (function () {
    function ImportDialogHandcraftComponent(dataImportService, notify, loadingService, http, injector, modalService, msgService, resolver) {
        var _this = this;
        this.dataImportService = dataImportService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.http = http;
        this.injector = injector;
        this.modalService = modalService;
        this.msgService = msgService;
        this.resolver = resolver;
        // 规则ID 该id为表单上配置的规则id
        this.ruleId = '';
        // 过滤条件
        this.importOption = null;
        this.subject = null;
        this.selectrule = false;
        // 记录的规则
        this.recordRule = null;
        this.selectfiletype = null;
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.enableTemplate = true;
        this.closeXLSX = false;
        this.enableSecurityLevelSelect = false;
        this.securityLevelName = '';
        this.ImportSecretRemindInfo = '';
        this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.uploader = new FileUploader({
            url: '',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile'
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.showfiletype = true;
        this.enableRuntimeCustom = false;
        this.valueField = null;
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        this.securityLevelItems = [];
        this.uploader.onSuccessItem = this.Import.bind(this);
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        this.uploader.onAfterAddingFile = this.afterAddFile;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.import_file = res['import_file'];
            _this.choose_file = res['choose_file'];
            _this.file_type = res['file_type'];
            _this.import_placeholder = res['import_placeholder'];
            _this.download_template = res['download_template'];
            _this.ie_cancel = res['ie_cancel'];
            _this.ie_ok = res['ie_ok'];
            _this.choose_truefile = res['choose_truefile'];
            _this.download_template_ok = res['download_template_ok'];
            _this.download_template_fail = res['download_template_fail'];
            _this.upload_fail = res['upload_fail'];
            _this.import_success = res['import_success'];
            _this.import_form_success = res['import_form_success'];
            _this.import_fail = res['import_fail'];
            _this.rule_list = res['rule_list'];
            _this.select_xlsx_notify = res['select_xlsx_notify'];
            _this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.importOption.selectfiletype === true) {
            this.selectfiletype = this.importOption.selectfiletype;
            if (this.importOption.suffix !== undefined && this.importOption.suffix !== null) {
                this.valueField = FileTypeUtil.getFileTypeName(this.importOption.suffix.toUpperCase());
            }
        }
        /** @type {?} */
        var extendInfo = this.recordRule.extendInfo;
        if (!isNullOrUndefined(extendInfo)) {
            this.extendInfo = JSON.parse(extendInfo);
            this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
            this.closeXLSX = this.extendInfo['closeXLSX'];
            if (this.closeXLSX === true) {
                this.fileListItems = [
                    { id: FileConst.xls, label: FileConst.xls },
                    { id: FileConst.xlsm, label: FileConst.xlsm },
                    { id: FileConst.et, label: FileConst.et }
                ];
            }
        }
        /** @type {?} */
        var securityLevels = this.recordRule.securityLevels;
        if (!isNullOrEmpty(securityLevels)) {
            this.enableSecurityLevelSelect = true;
            securityLevels.forEach((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var level = {
                    value: e.name,
                    label: e.name
                };
                _this.securityLevelItems.push(level);
            }));
            this.securityLevelName = this.securityLevelItems[0].value;
        }
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        if (this.valueField === '') {
            //未在当前可选文件的类型时，不显示选文件类型控件
            this.showfiletype = false;
        }
        this.currentRuleFileType = this.valueField;
        this.controlFileType();
        if (this.importOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.openSelectRule = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        var body = {
            ruleId: this.ruleId,
            ruleType: 0,
            voId: this.importOption.voId,
            methodType: this.methodType,
            importChildNodeCode: this.importOption.importChildNodeCode,
            closeXlsx: this.closeXLSX
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        function (RuleMgrs) {
            _this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            var compRef = compFactory.create(_this.injector);
            compRef.instance.ruleId = _this.ruleId;
            compRef.instance.voId = _this.importOption.voId;
            compRef.instance.ruleType = 0;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            var modalConfig = {
                title: _this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            var dialog = _this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            function (RuleMgr) {
                _this.currentRuleId = RuleMgr.id;
                _this.currentRuleName = RuleMgr.name;
                _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                _this.currentRuleFileType = _this.valueField;
                _this.controlFileType();
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loadingService.clearAll();
            _this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    };
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.getFileExtension = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = null;
        switch (this.valueField) {
            case FileConst.xls:
                suffix = '.xls';
                break;
            case FileConst.xlsx:
                suffix = '.xlsx';
                break;
            case FileConst.xlsm:
                suffix = '.xlsm';
                break;
            case FileConst.et:
                suffix = '.et';
                break;
            case FileConst.xml:
                suffix = '.xml';
                break;
            case FileConst.pdf:
                suffix = '.pdf';
                break;
            case FileConst.csv:
                suffix = '.csv';
                break;
            default:
                break;
        }
        return suffix;
    };
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.canDownloadTemplate = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = this.getFileExtension();
        /** @type {?} */
        var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t === suffix; })) < 0) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    // 选择文件后事件
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.selectedFileOnChange = 
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        var index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
            this.uploader.queue = [];
            this.notify.info(this.choose_truefile);
            return;
        }
        // console.log('队列中的文件' + this.uploader.queue[0]);
    };
    // 关闭窗口
    // 关闭窗口
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.Close = 
    // 关闭窗口
    /**
     * @return {?}
     */
    function () {
        this.needDestroy.emit();
    };
    // 选择文件事件
    // 选择文件事件
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.SelectFile = 
    // 选择文件事件
    /**
     * @return {?}
     */
    function () {
        this.fileUpload.nativeElement.click();
    };
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.fileTypeValueChange = /**
     * @return {?}
     */
    function () {
        if (this.controlFileType() === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
    };
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.controlFileType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = FileTypeUtil.getFileExtension(this.valueField);
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '*';
        }
        return suffix;
    };
    // 下载模板
    // 下载模板
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.DownloadTemplate = 
    // 下载模板
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadingService.show();
        /** @type {?} */
        var suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        this.importOption['securityLevelName'] = this.securityLevelName;
        this.dataImportService.DowmloadTemplate4HandCraft(this.currentRuleId, this.importOption, suffix);
        // this.dataImportService.complete.unsubscribe();
        /** @type {?} */
        var unsubscriber = this.dataImportService.complete.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.loadingService.clearAll();
            if (data === '') {
                _this.notify.success(_this.download_template_ok);
                unsubscriber.unsubscribe();
            }
            else {
                _this.notify.error(_this.download_template_fail + data);
                unsubscriber.unsubscribe();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loadingService.clearAll();
            _this.notify.error(error.message);
        }));
    };
    // 添加文件后事件
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.afterAddFile = 
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    function (fileItem) {
    };
    // 开始导入
    // 开始导入
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.Ok = 
    // 开始导入
    /**
     * @return {?}
     */
    function () {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        var loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        /** @type {?} */
        var len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        var lastFileItem = this.uploader.queue[len - 1];
        /** @type {?} */
        var maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
        if (lastFileItem.file.size > maxFileSize) {
            this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        var su = this.importOption.su;
        /** @type {?} */
        var fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/dataimportvmaction?su=' + su;
        /** @type {?} */
        var headers = [{ name: 'su', value: su }];
        if (!isNullOrUndefined(this.extendInfo)) {
            /** @type {?} */
            var enableSecurityLevel = (/** @type {?} */ (this.extendInfo['enableSecurityLevel']));
            if (enableSecurityLevel) {
                headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                /** @type {?} */
                var securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                /** @type {?} */
                var securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
            }
        }
        /** @type {?} */
        var suffix = '';
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        /** @type {?} */
        var globalVar = '';
        if (!isNullOrUndefined(this.importOption['GlobalParam'])) {
            if (typeof (this.importOption['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(this.importOption['GlobalParam']);
            }
            else {
                globalVar = this.importOption['GlobalParam'];
            }
        }
        /** @type {?} */
        var funcId = '';
        if (!isNullOrUndefined(this.importOption.funcId)) {
            funcId = this.importOption.funcId;
        }
        headers.push({ name: 'ruleId', value: this.currentRuleId });
        headers.push({ name: 'globalParam', value: globalVar });
        headers.push({ name: 'suffix', value: suffix });
        headers.push({ name: 'funcId', value: funcId });
        headers.push({ name: 'securityLevelName', value: this.securityLevelName });
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            headers: headers
        });
        this.uploader.uploadItem(lastFileItem);
    };
    // 取消事件
    // 取消事件
    /**
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.Cancel = 
    // 取消事件
    /**
     * @return {?}
     */
    function () {
        this.needDestroy.emit();
    };
    // 上传失败后方法
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.ErrorLog = 
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        this.loadingService.clearAll();
        try {
            /** @type {?} */
            var temRes = JSON.parse(response);
            this.msgService.error(this.upload_fail + temRes.message);
        }
        catch (_a) {
            this.msgService.error(this.upload_fail + response);
        }
        this.Close();
        /** @type {?} */
        var len = this.uploader.queue.length;
        if (len > 0) {
            this.uploader.queue.splice(0, 1);
        }
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.Import = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        switch (this.methodType) {
            case MethodType.CommonImport:
                this.DataImportById(item, response, status, headers);
                break;
            case MethodType.ImportSubTableDetail:
                // this.ImportSubTable(item, response, status, headers, suffix);
                break;
        }
    };
    // 显示校验结果
    // 显示校验结果
    /**
     * @private
     * @param {?} commonParams
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.ShowValidatedResult = 
    // 显示校验结果
    /**
     * @private
     * @param {?} commonParams
     * @return {?}
     */
    function (commonParams) {
        var _this = this;
        /** @type {?} */
        var importResult = commonParams.importResult;
        /** @type {?} */
        var loadingParam = commonParams.loadingParam;
        if (importResult.validatedResults && importResult.validatedResults.length > 0) {
            loadingParam.loadingService.clearAll();
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(ValidateFormComponent);
            /** @type {?} */
            var cmpRef = compFactory.create(this.injector);
            cmpRef.instance.validateResult = importResult.validatedResults;
            cmpRef.instance.su = commonParams.su;
            cmpRef.instance.i18nResource = commonParams.i18nResource;
            cmpRef.instance.loadingParam = loadingParam;
            /** @type {?} */
            var validateModalConfig = {
                title: this.i18nResource['validate_result_show'],
                width: 950,
                height: 550,
                buttons: cmpRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            var dialog_1 = this.modalService.show(cmpRef, validateModalConfig);
            //0代表按钮中止或X点击；1代表按钮继续
            /** @type {?} */
            var closed_1 = 0;
            dialog_1.dialog.instance.closed.subscribe((/**
             * @return {?}
             */
            function () {
                if (closed_1 === 0) {
                    _this.notify.info(_this.i18nResource['after_validate_suspend']);
                    _this.needDestroy.emit();
                }
            }));
            cmpRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                closed_1 = 0;
                dialog_1.close();
            }));
            cmpRef.instance.okModal.subscribe((/**
             * @param {?} validatedInfoList
             * @return {?}
             */
            function (validatedInfoList) {
                closed_1 = 1;
                dialog_1.close();
                loadingParam.loadingService.show(loadingParam.loadingConfig);
                commonParams.importParam['validatedInfoList'] = validatedInfoList;
                //todo
                // this.Import4HandCraft(commonParams);
            }));
        }
    };
    // 上传成功后方法
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportDialogHandcraftComponent.prototype.DataImportById = 
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        console.log(status);
        this.loadingService.clearAll();
        /** @type {?} */
        var importResult = (/** @type {?} */ (JSON.parse(response)));
        /** @type {?} */
        var loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        /** @type {?} */
        var loadingParam = {
            loadingService: this.loadingService,
            loadingConfig: loadingConfig
        };
        /** @type {?} */
        var commonParams = new CommonParams();
        commonParams.loadingParam = loadingParam;
        commonParams.i18nResource = this.i18nResource;
        commonParams.su = this.importOption.su;
        commonParams.importResult = importResult;
        if (importResult.succeed === true) {
            if (importResult.formData && importResult.formData.length > 0) {
                if (typeof (importResult.formData[0]) !== 'object') {
                    /** @type {?} */
                    var formDataObjArray_1 = [];
                    importResult.formData.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        formDataObjArray_1.push(JSON.parse(e));
                    }));
                    importResult.formData = formDataObjArray_1;
                }
            }
            this.needDestroy.emit(importResult);
            //导入成功如果展示校验结果，只能是校验策略是忽略，所有校验结果都是error
            this.ShowValidatedResult(commonParams);
        }
        else {
            if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                this.ShowValidatedResult(commonParams);
            }
            else {
                /** @type {?} */
                var errorlevel = importResult.errorLevel;
                if (errorlevel === 'Info') {
                    this.notify.info(importResult.message);
                }
                else if (errorlevel === 'Warning') {
                    this.msgService.warning(importResult.message);
                }
                else {
                    this.msgService.error(this.import_fail + importResult.message);
                }
                this.needDestroy.emit(importResult);
            }
        }
    };
    ImportDialogHandcraftComponent.decorators = [
        { type: Component, args: [{
                    selector: 'hlo-import-dialog-handcraft',
                    template: "<!-- <div class=\"container\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n                <td>\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td>\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule === false\">\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td>\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label for=\"f_upload\">{{import_file}}</label>\n                </td>\n                <td>\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\n                        (change)=\"selectedFileOnChange($event)\" />\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n  <div class=\"col-12\" style=\"margin-top: 67px\">\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{rule_list}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\n                       [enableClear]=\"false\"\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n          </input-group>\n        </div>\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\n      </div>\n    </div>\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{file_type}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\n                             [textField]=\"'label'\"\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\n        </div>\n        <span>&nbsp;</span>\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n\n      </div>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{import_file}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\n                 [accept]=\"acceptFileType\"\n                 (change)=\"selectedFileOnChange($event)\"/>\n          <div class=\"input-group\">\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\n                   [(ngModel)]=\"fileName\"\n                   [placeholder]=\"import_placeholder\">\n            <span class=\"input-group-btn\">\n                            <button class=\"btn btn-primary\" type=\"button\"\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\n                        </span>\n          </div>\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\n        </div>\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\n      </div>\n    </div>\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\n        </div>\n      </div>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\n    </div>\n\n\n  </div>\n</form>\n\n\n<ng-template #selectFooter>\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\n\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>\n",
                    styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
                }] }
    ];
    /** @nocollapse */
    ImportDialogHandcraftComponent.ctorParameters = function () { return [
        { type: DataImportService },
        { type: NotifyService },
        { type: LoadingService },
        { type: HttpClient },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ComponentFactoryResolver }
    ]; };
    ImportDialogHandcraftComponent.propDecorators = {
        modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
        ruleId: [{ type: Input }],
        importOption: [{ type: Input }],
        methodType: [{ type: Input }],
        subject: [{ type: Input }],
        recordRule: [{ type: Input }],
        fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
        needDestroy: [{ type: Output }]
    };
    return ImportDialogHandcraftComponent;
}());
export { ImportDialogHandcraftComponent };
if (false) {
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.modalFooter;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.ruleId;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.importOption;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.methodType;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.subject;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.selectrule;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.recordRule;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.selectfiletype;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.extendInfo;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.currentRuleName;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.currentRuleId;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.currentRuleFileType;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.enableTemplate;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.closeXLSX;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.enableSecurityLevelSelect;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.securityLevelName;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.ImportSecretRemindInfo;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.acceptFileType;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.fileName;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.fileUpload;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.origin;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.uploader;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.needDestroy;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.showfiletype;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.enableRuntimeCustom;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.valueField;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.import_file;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.choose_file;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.import_placeholder;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.file_type;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.download_template;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.ie_cancel;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.ie_ok;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.choose_truefile;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.download_template_ok;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.download_template_fail;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.upload_fail;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.import_success;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.import_form_success;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.import_fail;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.rule_list;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.select_xlsx_notify;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.i18nResource;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.lookupIcon;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.fileListItems;
    /** @type {?} */
    ImportDialogHandcraftComponent.prototype.securityLevelItems;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.dataImportService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogHandcraftComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,