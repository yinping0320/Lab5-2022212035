/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DataExportService } from '../service/DataIEService/data-export.service';
import { NotifyService } from '@farris/ui-notify';
import { BindingData, FrameContext } from '@farris/devkit';
import { EntityListService } from '@farris/command-services';
import { HttpClient } from '@angular/common/http';
import { DataIEUtils, FileTypeUtil } from '../service/Utils/DataIEUtils';
import { LoadingService } from '@farris/ui-loading';
import { BsModalService } from '@farris/ui-modal';
import { RuleSelectComponent } from '../rule-select/rule-select.component';
import { FileConst } from '../model/utils/FileConst';
import { MethodType } from '../model/DataIEType/MethodType';
var ExportCustomSelectComponent = /** @class */ (function () {
    function ExportCustomSelectComponent(dataExportService, notify, entityService, http, loadingService, injector, modalService, resolver) {
        var _this = this;
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.entityService = entityService;
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.ruleId = '';
        this.frameContext = null;
        this.subject = null;
        this.exportOption = null;
        this.needDestroy = new EventEmitter();
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.loadingComp = null;
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.export_success = res['export_success'];
            _this.export_fail = res['export_fail'];
            _this.file_type = res['file_type'];
            _this.ie_cancel = res['ie_cancel'];
            _this.ie_ok = res['ie_ok'];
            _this.rule_list = res['rule_list'];
            _this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        this.currentRuleFileType = this.valueField;
        if (this.exportOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.openSelectRule = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.loadingComp = this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        var body = {
            ruleId: this.ruleId,
            ruleType: 1,
            voId: this.exportOption.voId,
            methodType: this.methodType,
            exportChildNodeCode: this.exportOption.exportChildNodeCode
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        function (RuleMgrs) {
            _this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            var compRef = compFactory.create(_this.injector);
            compRef.instance.ruleId = _this.ruleId;
            compRef.instance.voId = _this.exportOption.voId;
            compRef.instance.ruleType = 1;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            var modalConfig = {
                title: _this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            var dialog = _this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            function (RuleMgr) {
                _this.currentRuleId = RuleMgr.id;
                _this.currentRuleName = RuleMgr.name;
                _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                _this.currentRuleFileType = _this.valueField;
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loadingService.clearAll();
            _this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    };
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.Ok = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = null;
        if (this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        switch (this.methodType) {
            case MethodType.CommonExport:
                this.dataExportService.ExportById(this.currentRuleId, this.frameContext, this.exportOption, suffix);
                this.exportComplete();
                break;
            case MethodType.ExportCurrentTableData:
                this.dataExportService.ExportCurrentData(this.currentRuleId, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, this.exportOption, suffix);
                this.exportComplete();
                break;
            case MethodType.ExportCurrentChildData:
                this.dataExportService.ExportCurrentChildData(this.currentRuleId, this.frameContext, this.exportOption, suffix);
                this.exportComplete();
                break;
        }
    };
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.exportComplete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var exportUnscribe = this.dataExportService.export.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === '') {
                _this.notify.success(_this.export_success);
                exportUnscribe.unsubscribe();
                _this.subject.next(true);
                _this.subject.complete();
            }
            else {
                /** @type {?} */
                var errorlevel = _this.dataExportService.errorlevel;
                if (errorlevel === 'Info') {
                    _this.notify.info(data);
                }
                else if (errorlevel === 'Warning') {
                    _this.notify.warning(data);
                }
                else {
                    _this.notify.error(_this.export_fail + data);
                }
                exportUnscribe.unsubscribe();
                _this.subject.next(false);
                _this.subject.complete();
            }
            _this.needDestroy.emit();
        }));
    };
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.canSelectFileType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t === suffix; })) < 0) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.needDestroy.emit();
    };
    /**
     * @return {?}
     */
    ExportCustomSelectComponent.prototype.Cancel = /**
     * @return {?}
     */
    function () {
        this.needDestroy.emit(true);
    };
    ExportCustomSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-export-custom-select',
                    template: "<!-- <div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n    <div class=\"col-12\" style=\"margin-top: 72px\">\n        <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n            <div class=\"form-group farris-form-group\">\n                <label class=\" col-form-label\">\n                    <span class=\"farris-label-text\">{{rule_list}}</span>\n                </label>\n                <div class=\"farris-input-wrap\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n            <span>&nbsp;</span>\n        </div>\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\n            <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n                <label class=\"col-form-label\">\n                    <span class=\"farris-label-text\">{{file_type}}</span>\n                </label>\n                <div class=\"farris-input-wrap\">\n                    <farris-combo-list [readonly]=\"canSelectFileType() === false\" id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\"\n                        [idField]=\"'id'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"fileListItems\"></farris-combo-list>\n                </div>\n                <span>&nbsp;&nbsp;</span>\n                <!-- <span *ngIf=\"enableRuntimeCustom === true\" class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n                <span *ngIf=\"enableRuntimeCustom === false\" class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n                <span  class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n            </div>\n        </div>\n\n\n\n    </div>\n</form>\n\n<ng-template #selectFooter>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>",
                    providers: [NotifyService, DataExportService, EntityListService, BindingData],
                    styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longlen{width:400px}"]
                }] }
    ];
    /** @nocollapse */
    ExportCustomSelectComponent.ctorParameters = function () { return [
        { type: DataExportService },
        { type: NotifyService },
        { type: EntityListService },
        { type: HttpClient },
        { type: LoadingService },
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver }
    ]; };
    ExportCustomSelectComponent.propDecorators = {
        modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
        ruleId: [{ type: Input }],
        methodType: [{ type: Input }],
        frameContext: [{ type: Input }],
        exportOption: [{ type: Input }],
        needDestroy: [{ type: Output }]
    };
    return ExportCustomSelectComponent;
}());
export { ExportCustomSelectComponent };
if (false) {
    /** @type {?} */
    ExportCustomSelectComponent.prototype.modalFooter;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.ruleId;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.methodType;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.frameContext;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.subject;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.exportOption;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.needDestroy;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.valueField;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.enableRuntimeCustom;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.recordRule;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.currentRuleName;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.currentRuleId;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.currentRuleFileType;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.lookupIcon;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.loadingComp;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.fileListItems;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.file_type;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.export_success;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.export_fail;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.ie_cancel;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.ie_ok;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.rule_list;
    /** @type {?} */
    ExportCustomSelectComponent.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.dataExportService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.entityService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,