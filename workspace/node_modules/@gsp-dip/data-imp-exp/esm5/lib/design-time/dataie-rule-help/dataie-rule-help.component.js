/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Injector } from '@angular/core';
import { Subject } from "rxjs";
import { BsModalService } from "@farris/ui-modal";
import { RuleIdHelpComponent } from "../rule-id-help/rule-id-help.component";
var DataieRuleHelpComponent = /** @class */ (function () {
    function DataieRuleHelpComponent(injector, modalService, resolver) {
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
    }
    /**
     * @return {?}
     */
    DataieRuleHelpComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 打开导入导出规则id选择帮助
     * @param ruleType 规则类型，导入为0，导出为1
     * @param voId
     * @param beId
     */
    /**
     * 打开导入导出规则id选择帮助
     * @param {?} ruleType 规则类型，导入为0，导出为1
     * @param {?} voId
     * @param {?} beId
     * @return {?}
     */
    DataieRuleHelpComponent.prototype.showRuleIdHelp = /**
     * 打开导入导出规则id选择帮助
     * @param {?} ruleType 规则类型，导入为0，导出为1
     * @param {?} voId
     * @param {?} beId
     * @return {?}
     */
    function (ruleType, voId, beId) {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(RuleIdHelpComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.beId = beId;
        compRef.instance.ruleType = ruleType;
        compRef.instance.voId = voId;
        /** @type {?} */
        var modalConfig = {
            title: '规则选择',
            width: 920,
            height: 500,
            buttons: compRef.instance.modalFooter,
            showHeader: true,
            showMaxButton: false,
            showButtons: true
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModal.subscribe((/**
         * @param {?} ruleId
         * @return {?}
         */
        function (ruleId) {
            console.log(ruleId);
            dialog.close();
            subject.next(ruleId);
        }));
        return subject;
    };
    DataieRuleHelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dataie-rule-help',
                    template: "\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DataieRuleHelpComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver }
    ]; };
    return DataieRuleHelpComponent;
}());
export { DataieRuleHelpComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DataieRuleHelpComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DataieRuleHelpComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    DataieRuleHelpComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWllLXJ1bGUtaGVscC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWRpcC9kYXRhLWltcC1leHAvIiwic291cmNlcyI6WyJsaWIvZGVzaWduLXRpbWUvZGF0YWllLXJ1bGUtaGVscC9kYXRhaWUtcnVsZS1oZWxwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFhLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFFM0U7SUFPRSxpQ0FDVSxRQUFrQixFQUNsQixZQUE0QixFQUM1QixRQUFrQztRQUZsQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUM1QixhQUFRLEdBQVIsUUFBUSxDQUEwQjtJQUN4QyxDQUFDOzs7O0lBRUwsMENBQVE7OztJQUFSO0lBQ0EsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7OztJQUNJLGdEQUFjOzs7Ozs7O0lBQXJCLFVBQXNCLFFBQWUsRUFBQyxJQUFXLEVBQUMsSUFBVzs7WUFDckQsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFPOztZQUM1QixXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQzs7WUFDeEUsT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNqRCxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzs7WUFDdkIsV0FBVyxHQUFHO1lBQ2xCLEtBQUssRUFBRSxNQUFNO1lBQ2IsS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVc7WUFDckMsVUFBVSxFQUFFLElBQUk7WUFDaEIsYUFBYSxFQUFFLEtBQUs7WUFDcEIsV0FBVyxFQUFFLElBQUk7U0FDbEI7O1lBQ0ssTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7UUFDM0QsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsTUFBTTtZQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztnQkE3Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLGNBQWdEOztpQkFFakQ7Ozs7Z0JBVDRDLFFBQVE7Z0JBRTdDLGNBQWM7Z0JBRkgsd0JBQXdCOztJQW9EM0MsOEJBQUM7Q0FBQSxBQS9DRCxJQStDQztTQTFDWSx1QkFBdUI7Ozs7OztJQUdoQywyQ0FBMEI7Ozs7O0lBQzFCLCtDQUFvQzs7Ozs7SUFDcEMsMkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQge0JzTW9kYWxTZXJ2aWNlfSBmcm9tIFwiQGZhcnJpcy91aS1tb2RhbFwiO1xuaW1wb3J0IHtSdWxlSWRIZWxwQ29tcG9uZW50fSBmcm9tIFwiLi4vcnVsZS1pZC1oZWxwL3J1bGUtaWQtaGVscC5jb21wb25lbnRcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGF0YWllLXJ1bGUtaGVscCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRhaWUtcnVsZS1oZWxwLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZGF0YWllLXJ1bGUtaGVscC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRGF0YWllUnVsZUhlbHBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiDmiZPlvIDlr7zlhaXlr7zlh7rop4TliJlpZOmAieaLqeW4ruWKqVxuICAgKiBAcGFyYW0gcnVsZVR5cGUg6KeE5YiZ57G75Z6L77yM5a+85YWl5Li6MO+8jOWvvOWHuuS4ujFcbiAgICogQHBhcmFtIHZvSWRcbiAgICogQHBhcmFtIGJlSWRcbiAgICovXG4gIHB1YmxpYyBzaG93UnVsZUlkSGVscChydWxlVHlwZTpudW1iZXIsdm9JZDpzdHJpbmcsYmVJZDpzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT57XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgICBjb25zdCBjb21wRmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoUnVsZUlkSGVscENvbXBvbmVudCk7XG4gICAgY29uc3QgY29tcFJlZiA9IGNvbXBGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcbiAgICBjb21wUmVmLmluc3RhbmNlLmJlSWQgPSBiZUlkO1xuICAgIGNvbXBSZWYuaW5zdGFuY2UucnVsZVR5cGUgPSBydWxlVHlwZTtcbiAgICBjb21wUmVmLmluc3RhbmNlLnZvSWQgPSB2b0lkO1xuICAgIGNvbnN0IG1vZGFsQ29uZmlnID0ge1xuICAgICAgdGl0bGU6ICfop4TliJnpgInmi6knLFxuICAgICAgd2lkdGg6IDkyMCxcbiAgICAgIGhlaWdodDogNTAwLFxuICAgICAgYnV0dG9uczogY29tcFJlZi5pbnN0YW5jZS5tb2RhbEZvb3RlcixcbiAgICAgIHNob3dIZWFkZXI6IHRydWUsXG4gICAgICBzaG93TWF4QnV0dG9uOiBmYWxzZSxcbiAgICAgIHNob3dCdXR0b25zOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNvbXBSZWYsIG1vZGFsQ29uZmlnKTtcbiAgICBjb21wUmVmLmluc3RhbmNlLmNsb3NlTW9kYWwuc3Vic2NyaWJlKHJ1bGVJZCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhydWxlSWQpO1xuICAgICAgZGlhbG9nLmNsb3NlKCk7XG4gICAgICBzdWJqZWN0Lm5leHQocnVsZUlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3ViamVjdDtcbiAgfVxuXG59XG4iXX0=