/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IEStepType } from '../IEStepType';
import { Guid } from '../utils/Guid';
/**
 * 公共步骤实体
 */
var /**
 * 公共步骤实体
 */
CommonStep = /** @class */ (function () {
    function CommonStep() {
        /**
         * 内码
         */
        this.StepID = Guid.newGuid();
        /**
         *  步骤执行顺序
         */
        this.StortOrder = 1;
        /**
         * 步骤类型
         */
        this.StepType = IEStepType.Default;
        /**
         * 源模型Id
         */
        this.SrcModelId = '';
        /**
         * 目标模型Id
         */
        this.TarModelId = '';
        /**
         *  步骤名称
         */
        this.StepName = '';
        /**
         *  是否用户自定义
         */
        this.Custom = false;
        /**
         *  用户自定义构件标识
         */
        this.CustomComponent = '';
        /**
         *  步骤前事件列表
         */
        this.DoBefore = new Array();
        /**
         *  步骤后事件列表
         */
        this.DoAfter = new Array();
    }
    /**
     * copy
     */
    /**
     * copy
     * @param {?} step
     * @return {?}
     */
    CommonStep.copy = /**
     * copy
     * @param {?} step
     * @return {?}
     */
    function (step) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var commonStep = new CommonStep();
        commonStep.StepID = step.StepID;
        commonStep.StortOrder = step.StortOrder;
        commonStep.StepType = step.StepType;
        commonStep.SrcModelId = step.SrcModelId;
        commonStep.TarModelId = step.TarModelId;
        commonStep.StepName = step.StepName;
        commonStep.Custom = step.Custom;
        commonStep.CustomComponent = step.CustomComponent;
        commonStep.DoBefore = new Array();
        try {
            for (var _c = tslib_1.__values(step.DoBefore), _d = _c.next(); !_d.done; _d = _c.next()) {
                var beforeCom = _d.value;
                commonStep.DoBefore.push(beforeCom);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        commonStep.DoAfter = new Array();
        try {
            for (var _e = tslib_1.__values(step.DoAfter), _f = _e.next(); !_f.done; _f = _e.next()) {
                var afterCom = _f.value;
                commonStep.DoAfter.push(afterCom);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return commonStep;
    };
    return CommonStep;
}());
/**
 * 公共步骤实体
 */
export { CommonStep };
if (false) {
    /**
     * 内码
     * @type {?}
     */
    CommonStep.prototype.StepID;
    /**
     *  步骤执行顺序
     * @type {?}
     */
    CommonStep.prototype.StortOrder;
    /**
     * 步骤类型
     * @type {?}
     */
    CommonStep.prototype.StepType;
    /**
     * 源模型Id
     * @type {?}
     */
    CommonStep.prototype.SrcModelId;
    /**
     * 目标模型Id
     * @type {?}
     */
    CommonStep.prototype.TarModelId;
    /**
     *  步骤名称
     * @type {?}
     */
    CommonStep.prototype.StepName;
    /**
     *  是否用户自定义
     * @type {?}
     */
    CommonStep.prototype.Custom;
    /**
     *  用户自定义构件标识
     * @type {?}
     */
    CommonStep.prototype.CustomComponent;
    /**
     *  步骤前事件列表
     * @type {?}
     */
    CommonStep.prototype.DoBefore;
    /**
     *  步骤后事件列表
     * @type {?}
     */
    CommonStep.prototype.DoAfter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbW9uU3RlcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtZGlwL2RhdGEtaW1wLWV4cC8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9Db21tb25TdGVwL0NvbW1vblN0ZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFJckM7Ozs7SUFBQTs7OztRQUlXLFdBQU0sR0FBVyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Ozs7UUFJaEMsZUFBVSxHQUFXLENBQUMsQ0FBQzs7OztRQUl2QixhQUFRLEdBQWUsVUFBVSxDQUFDLE9BQU8sQ0FBQzs7OztRQUkxQyxlQUFVLEdBQVcsRUFBRSxDQUFDOzs7O1FBSXhCLGVBQVUsR0FBVyxFQUFFLENBQUM7Ozs7UUFJeEIsYUFBUSxHQUFXLEVBQUUsQ0FBQzs7OztRQUl0QixXQUFNLEdBQVksS0FBSyxDQUFDOzs7O1FBSXhCLG9CQUFlLEdBQVcsRUFBRSxDQUFDOzs7O1FBSTdCLGFBQVEsR0FBdUIsSUFBSSxLQUFLLEVBQW9CLENBQUM7Ozs7UUFJN0QsWUFBTyxHQUF1QixJQUFJLEtBQUssRUFBb0IsQ0FBQztJQXdCdkUsQ0FBQztJQXZCRzs7T0FFRzs7Ozs7O0lBQ1csZUFBSTs7Ozs7SUFBbEIsVUFBbUIsSUFBZ0I7OztZQUN6QixVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUU7UUFDbkMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2hDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN4QyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDcEMsVUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3hDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN4QyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDcEMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2hDLFVBQVUsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNsRCxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksS0FBSyxFQUFvQixDQUFDOztZQUNwRCxLQUF3QixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQSxnQkFBQSw0QkFBRTtnQkFBbEMsSUFBTSxTQUFTLFdBQUE7Z0JBQ2hCLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3ZDOzs7Ozs7Ozs7UUFDRCxVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxFQUFvQixDQUFDOztZQUNuRCxLQUF1QixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQSxnQkFBQSw0QkFBRTtnQkFBaEMsSUFBTSxRQUFRLFdBQUE7Z0JBQ2YsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDckM7Ozs7Ozs7OztRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFDTCxpQkFBQztBQUFELENBQUMsQUFoRUQsSUFnRUM7Ozs7Ozs7Ozs7SUE1REcsNEJBQXVDOzs7OztJQUl2QyxnQ0FBOEI7Ozs7O0lBSTlCLDhCQUFpRDs7Ozs7SUFJakQsZ0NBQStCOzs7OztJQUkvQixnQ0FBK0I7Ozs7O0lBSS9CLDhCQUE2Qjs7Ozs7SUFJN0IsNEJBQStCOzs7OztJQUkvQixxQ0FBb0M7Ozs7O0lBSXBDLDhCQUFvRTs7Ozs7SUFJcEUsNkJBQW1FIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IFNlcnZpY2VDb21wb25lbnQgfSBmcm9tICcuL1NlcnZpY2VDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBJRVN0ZXBUeXBlIH0gZnJvbSAnLi4vSUVTdGVwVHlwZSc7XHJcbmltcG9ydCB7IEd1aWQgfSBmcm9tICcuLi91dGlscy9HdWlkJztcclxuLyoqXHJcbiAqIOWFrOWFseatpemqpOWunuS9k1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbW1vblN0ZXAge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlhoXnoIFcclxuICAgICAqL1xyXG4gICAgcHVibGljIFN0ZXBJRDogU3RyaW5nID0gR3VpZC5uZXdHdWlkKCk7XHJcbiAgICAvKipcclxuICAgICAqICDmraXpqqTmiafooYzpobrluo9cclxuICAgICAqL1xyXG4gICAgcHVibGljIFN0b3J0T3JkZXI6IE51bWJlciA9IDE7XHJcbiAgICAvKipcclxuICAgICAqIOatpemqpOexu+Wei1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU3RlcFR5cGU6IElFU3RlcFR5cGUgPSBJRVN0ZXBUeXBlLkRlZmF1bHQ7XHJcbiAgICAvKipcclxuICAgICAqIOa6kOaooeWei0lkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBTcmNNb2RlbElkOiBTdHJpbmcgPSAnJztcclxuICAgIC8qKlxyXG4gICAgICog55uu5qCH5qih5Z6LSWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIFRhck1vZGVsSWQ6IFN0cmluZyA9ICcnO1xyXG4gICAgLyoqXHJcbiAgICAgKiAg5q2l6aqk5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBTdGVwTmFtZTogU3RyaW5nID0gJyc7XHJcbiAgICAvKipcclxuICAgICAqICDmmK/lkKbnlKjmiLfoh6rlrprkuYlcclxuICAgICAqL1xyXG4gICAgcHVibGljIEN1c3RvbTogQm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiAg55So5oi36Ieq5a6a5LmJ5p6E5Lu25qCH6K+GXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDdXN0b21Db21wb25lbnQ6IFN0cmluZyA9ICcnO1xyXG4gICAgLyoqXHJcbiAgICAgKiAg5q2l6aqk5YmN5LqL5Lu25YiX6KGoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBEb0JlZm9yZTogU2VydmljZUNvbXBvbmVudFtdID0gbmV3IEFycmF5PFNlcnZpY2VDb21wb25lbnQ+KCk7XHJcbiAgICAvKipcclxuICAgICAqICDmraXpqqTlkI7kuovku7bliJfooahcclxuICAgICAqL1xyXG4gICAgcHVibGljIERvQWZ0ZXI6IFNlcnZpY2VDb21wb25lbnRbXSA9IG5ldyBBcnJheTxTZXJ2aWNlQ29tcG9uZW50PigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBjb3B5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY29weShzdGVwOiBDb21tb25TdGVwKTogQ29tbW9uU3RlcCB7XHJcbiAgICAgICAgY29uc3QgY29tbW9uU3RlcCA9IG5ldyBDb21tb25TdGVwKCk7XHJcbiAgICAgICAgY29tbW9uU3RlcC5TdGVwSUQgPSBzdGVwLlN0ZXBJRDtcclxuICAgICAgICBjb21tb25TdGVwLlN0b3J0T3JkZXIgPSBzdGVwLlN0b3J0T3JkZXI7XHJcbiAgICAgICAgY29tbW9uU3RlcC5TdGVwVHlwZSA9IHN0ZXAuU3RlcFR5cGU7XHJcbiAgICAgICAgY29tbW9uU3RlcC5TcmNNb2RlbElkID0gc3RlcC5TcmNNb2RlbElkO1xyXG4gICAgICAgIGNvbW1vblN0ZXAuVGFyTW9kZWxJZCA9IHN0ZXAuVGFyTW9kZWxJZDtcclxuICAgICAgICBjb21tb25TdGVwLlN0ZXBOYW1lID0gc3RlcC5TdGVwTmFtZTtcclxuICAgICAgICBjb21tb25TdGVwLkN1c3RvbSA9IHN0ZXAuQ3VzdG9tO1xyXG4gICAgICAgIGNvbW1vblN0ZXAuQ3VzdG9tQ29tcG9uZW50ID0gc3RlcC5DdXN0b21Db21wb25lbnQ7XHJcbiAgICAgICAgY29tbW9uU3RlcC5Eb0JlZm9yZSA9IG5ldyBBcnJheTxTZXJ2aWNlQ29tcG9uZW50PigpO1xyXG4gICAgICAgIGZvciAoY29uc3QgYmVmb3JlQ29tIG9mIHN0ZXAuRG9CZWZvcmUpIHtcclxuICAgICAgICAgICAgY29tbW9uU3RlcC5Eb0JlZm9yZS5wdXNoKGJlZm9yZUNvbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbW1vblN0ZXAuRG9BZnRlciA9IG5ldyBBcnJheTxTZXJ2aWNlQ29tcG9uZW50PigpO1xyXG4gICAgICAgIGZvciAoY29uc3QgYWZ0ZXJDb20gb2Ygc3RlcC5Eb0FmdGVyKSB7XHJcbiAgICAgICAgICAgIGNvbW1vblN0ZXAuRG9BZnRlci5wdXNoKGFmdGVyQ29tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbW1vblN0ZXA7XHJcbiAgICB9XHJcbn1cclxuIl19