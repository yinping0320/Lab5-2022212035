/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { FileUploader } from '../service/UploaderService/FileUpload/file-uploader';
import { DataImportService } from '../service/DataIEService/data-import.service';
import { FrameContext } from '@farris/devkit';
import { NotifyService } from '@farris/ui-notify';
import { LoadingService } from '@farris/ui-loading';
import { MethodType } from '../model/DataIEType/MethodType';
import { Subject } from 'rxjs';
import { DataIEUtils, FileTypeUtil, isNullOrEmpty, isNullOrUndefined } from '../service/Utils/DataIEUtils';
import { HttpClient } from '@angular/common/http';
import { BsModalService } from '@farris/ui-modal';
import { RuleSelectComponent } from '../rule-select/rule-select.component';
import { MessagerService } from '@farris/ui-messager';
import { ListDataService } from '@farris/command-services';
import { FileConst } from '../model/utils/FileConst';
import { DataieProgressComponent } from '../bakcomponents/dataie-progress/dataie-progress.component';
import { CommonParams } from "../service/Entity/CommonParams";
var ImportDialogComponent = /** @class */ (function () {
    function ImportDialogComponent(dataImportService, notify, loadingService, http, injector, modalService, listDataSer, msgService, resolver) {
        var _this = this;
        this.dataImportService = dataImportService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.http = http;
        this.injector = injector;
        this.modalService = modalService;
        this.listDataSer = listDataSer;
        this.msgService = msgService;
        this.resolver = resolver;
        // 规则ID 该id为表单上配置的规则id
        this.ruleId = '';
        // 过滤条件
        this.importOption = null;
        this.frameContext = null;
        this.subject = null;
        this.showfiletype = true;
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        //当前选择规则的id、名称和文件类型
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.enableTemplate = true;
        this.closeXLSX = false;
        this.enableSecurityLevelSelect = false;
        this.securityLevelName = '';
        this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        this.ImportSecretRemindInfo = '';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.uploader = new FileUploader({
            url: '',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile'
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.valueField = null;
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        this.securityLevelItems = [];
        this.uploader.onSuccessItem = this.Import.bind(this);
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        this.uploader.onAfterAddingFile = this.afterAddFile;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.import_file = res['import_file'];
            _this.choose_file = res['choose_file'];
            _this.file_type = res['file_type'];
            _this.import_placeholder = res['import_placeholder'];
            _this.download_template = res['download_template'];
            _this.ie_cancel = res['ie_cancel'];
            _this.ie_ok = res['ie_ok'];
            _this.choose_truefile = res['choose_truefile'];
            _this.download_template_ok = res['download_template_ok'];
            _this.download_template_fail = res['download_template_fail'];
            _this.upload_fail = res['upload_fail'];
            _this.import_success = res['import_success'];
            _this.import_form_success = res['import_form_success'];
            _this.import_fail = res['import_fail'];
            _this.rule_list = res['rule_list'];
            _this.select_xlsx_notify = res['select_xlsx_notify'];
            _this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var extendInfo = this.recordRule.extendInfo;
        if (!isNullOrUndefined(extendInfo)) {
            this.extendInfo = JSON.parse(extendInfo);
            this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
            this.closeXLSX = this.extendInfo['closeXLSX'];
            if (this.closeXLSX === true) {
                this.fileListItems = [
                    { id: FileConst.xls, label: FileConst.xls },
                    { id: FileConst.xlsm, label: FileConst.xlsm },
                    { id: FileConst.et, label: FileConst.et }
                ];
            }
        }
        /** @type {?} */
        var securityLevels = this.recordRule.securityLevels;
        if (!isNullOrEmpty(securityLevels)) {
            this.enableSecurityLevelSelect = true;
            securityLevels.forEach((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var level = {
                    value: e.name,
                    label: e.name
                };
                _this.securityLevelItems.push(level);
            }));
            this.securityLevelName = this.securityLevelItems[0].value;
        }
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        if (this.valueField === '') {
            //未在当前可选文件的类型时，不显示选文件类型控件
            this.showfiletype = false;
        }
        this.currentRuleFileType = this.valueField;
        this.controlFileType();
        if (this.importOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ImportDialogComponent.prototype.openSelectRule = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        var url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        var body = {
            ruleId: this.ruleId,
            ruleType: 0,
            voId: this.importOption.voId,
            methodType: this.methodType,
            importChildNodeCode: this.importOption.importChildNodeCode,
            closeXlsx: this.closeXLSX
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        function (RuleMgrs) {
            _this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                _this.notify.info(_this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            var compFactory = _this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            var compRef = compFactory.create(_this.injector);
            compRef.instance.ruleId = _this.ruleId;
            compRef.instance.voId = _this.importOption.voId;
            compRef.instance.ruleType = 0;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            var modalConfig = {
                title: _this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            var dialog = _this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            function (RuleMgr) {
                _this.currentRuleId = RuleMgr.id;
                _this.currentRuleName = RuleMgr.name;
                _this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                _this.currentRuleFileType = _this.valueField;
                _this.controlFileType();
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loadingService.clearAll();
            _this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    };
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.canDownloadTemplate = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        var canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t === suffix; })) < 0) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    // 选择文件后事件
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    ImportDialogComponent.prototype.selectedFileOnChange = 
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        var index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
            this.uploader.queue = [];
            this.notify.info(this.choose_truefile);
            return;
        }
        // console.log('队列中的文件' + this.uploader.queue[0]);
    };
    // 关闭窗口
    // 关闭窗口
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.Close = 
    // 关闭窗口
    /**
     * @return {?}
     */
    function () {
        this.needDestroy.emit();
    };
    // 选择文件事件
    // 选择文件事件
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.SelectFile = 
    // 选择文件事件
    /**
     * @return {?}
     */
    function () {
        this.fileUpload.nativeElement.click();
    };
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.fileTypeValueChange = /**
     * @return {?}
     */
    function () {
        if (this.controlFileType() === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
    };
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.controlFileType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var suffix = FileTypeUtil.getFileExtension(this.valueField);
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '*';
        }
        return suffix;
    };
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.clickSetting = /**
     * @return {?}
     */
    function () {
        this.notify.info('设置一下');
    };
    // 下载模板
    // 下载模板
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.DownloadTemplate = 
    // 下载模板
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadingService.show();
        /** @type {?} */
        var suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        this.importOption['securityLevelName'] = this.securityLevelName;
        this.dataImportService.DowmloadTemplate(this.currentRuleId, this.frameContext.repository, this.importOption, suffix);
        /** @type {?} */
        var unsubscriber = this.dataImportService.complete.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.loadingService.clearAll();
            if (data === '') {
                _this.notify.success(_this.download_template_ok);
                unsubscriber.unsubscribe();
            }
            else {
                _this.notify.error(_this.download_template_fail + data);
                unsubscriber.unsubscribe();
            }
        }));
    };
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.showProgressDialog = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(DataieProgressComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.DataIeProgressParams = this.dataImportService.DataIeProgressParams;
        /** @type {?} */
        var modalConfig = {
            width: 530,
            height: 50,
            title: '',
            showHeader: false,
            showMaxButton: false,
            showMinButton: false,
            showButtons: false,
            showCloseButton: false,
            resizable: false
        };
        return this.modalService.show(compRef, modalConfig);
    };
    // 添加文件后事件
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    ImportDialogComponent.prototype.afterAddFile = 
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    function (fileItem) {
    };
    // 开始导入
    // 开始导入
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.Ok = 
    // 开始导入
    /**
     * @return {?}
     */
    function () {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        var loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        // this.DataIeProgressDialog = this.showProgressDialog();
        /** @type {?} */
        var len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        var lastFileItem = this.uploader.queue[len - 1];
        /** @type {?} */
        var maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
        if (lastFileItem.file.size > maxFileSize) {
            this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        var befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        var preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        var tempUrl = preUrl + "/import/Upload";
        /** @type {?} */
        var su = DataIEUtils.getSu(tempUrl);
        if (this.importOption['su'] !== null && this.importOption['su'] !== undefined) {
            su = this.importOption['su'];
        }
        /** @type {?} */
        var fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
        /** @type {?} */
        var headers = [{ name: 'su', value: su }];
        if (!isNullOrUndefined(this.extendInfo)) {
            /** @type {?} */
            var enableSecurityLevel = (/** @type {?} */ (this.extendInfo['enableSecurityLevel']));
            if (enableSecurityLevel) {
                headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                /** @type {?} */
                var securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                /** @type {?} */
                var securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
            }
        }
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            headers: headers
        });
        this.uploader.uploadItem(lastFileItem);
    };
    // 取消事件
    // 取消事件
    /**
     * @return {?}
     */
    ImportDialogComponent.prototype.Cancel = 
    // 取消事件
    /**
     * @return {?}
     */
    function () {
        this.needDestroy.emit();
    };
    // 上传失败后方法
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportDialogComponent.prototype.ErrorLog = 
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        console.log('上传失败');
        console.log('错误代码：' + status);
        console.log(response);
        console.log(headers);
        this.loadingService.clearAll();
        try {
            /** @type {?} */
            var temRes = JSON.parse(response);
            this.msgService.error(this.upload_fail + temRes.message);
        }
        catch (_a) {
            this.msgService.error(this.upload_fail + response);
        }
        this.Close();
        /** @type {?} */
        var len = this.uploader.queue.length;
        if (len > 0) {
            this.uploader.queue.splice(0, 1);
        }
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportDialogComponent.prototype.Import = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        /** @type {?} */
        var suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 45;
        switch (this.methodType) {
            case MethodType.CommonImport:
            case MethodType.CardFormDataImport:
                this.DataImportById(item, response, status, headers, suffix);
                break;
            case MethodType.ImportSubTableDetail:
                this.ImportSubTable(item, response, status, headers, suffix);
                break;
        }
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    ImportDialogComponent.prototype.ImportSubTable = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    function (item, response, status, headers, suffix) {
        var _this = this;
        if (status === 200) {
            /** @type {?} */
            var temRes = JSON.parse(response);
            /** @type {?} */
            var loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            var loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            var commonParams = new CommonParams();
            commonParams.methodType = this.methodType;
            commonParams.ruleId = this.currentRuleId;
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.frameContext = this.frameContext;
            commonParams.suffix = suffix;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            commonParams.securityLevelName = this.securityLevelName;
            this.dataImportService.ImportSubTable(commonParams);
            /** @type {?} */
            var subscriber_1 = this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.loadingService.clearAll();
                // this.DataIeProgressDialog.close();
                subscriber_1.unsubscribe();
                if (data === '') {
                    _this.notify.success(_this.import_success);
                    _this.subject.next(true);
                    _this.subject.complete();
                    _this.needDestroy.emit();
                }
                else if (data === '导入表单成功') {
                    _this.notify.success(_this.import_form_success);
                    _this.subject.next(true);
                    _this.subject.complete();
                    _this.needDestroy.emit();
                }
                else if (data === '部分数据导入完成') {
                    _this.notify.success(_this.i18nResource['partdata-import-success']);
                    _this.subject.next(true);
                    _this.subject.complete();
                    _this.needDestroy.emit();
                }
                else if (data === '校验中止') {
                    _this.notify.info(_this.i18nResource['after_validate_suspend']);
                    _this.needDestroy.emit();
                    _this.subject.next(false);
                    _this.subject.complete();
                }
                else {
                    /** @type {?} */
                    var errorlevel = _this.dataImportService.errorlevel;
                    if (errorlevel === 'Info') {
                        _this.messageShow('info', data);
                    }
                    else if (errorlevel === 'Warning') {
                        _this.messageShow('warning', data);
                    }
                    else {
                        _this.messageShow('error', _this.import_fail + data);
                    }
                    _this.needDestroy.emit();
                    _this.subject.next(false);
                    _this.subject.complete();
                }
            }));
        }
    };
    // 上传成功后方法
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    ImportDialogComponent.prototype.DataImportById = 
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    function (item, response, status, headers, suffix) {
        var _this = this;
        console.log(status);
        console.log('上传完成！');
        if (status === 200) {
            //上传成功后清空上传队列
            this.uploader.queue = [];
            /** @type {?} */
            var temRes = JSON.parse(response);
            console.log('上传成功');
            console.log(temRes);
            /** @type {?} */
            var loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            var loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            var commonParams = new CommonParams();
            commonParams.methodType = this.methodType;
            commonParams.ruleId = this.currentRuleId;
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.suffix = suffix;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            commonParams.securityLevelName = this.securityLevelName;
            this.dataImportService.ImportByRuleId(commonParams);
            /** @type {?} */
            var unsubscriber_1 = this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.loadingService.clearAll();
                // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 100;
                // this.DataIeProgressDialog.close();
                if (data === '') {
                    _this.notify.success(_this.import_success);
                    unsubscriber_1.unsubscribe();
                    //导入数据库后刷新界面数据
                    if (_this.importOption.importdbRefresh === true) {
                        if (_this.listDataSer !== null && _this.frameContext !== null) {
                            /** @type {?} */
                            var filterConditionList = _this.frameContext.uiState['filterConditionList'];
                            if (filterConditionList !== undefined && filterConditionList !== null && typeof (filterConditionList) === 'string') {
                                _this.listDataSer.load(filterConditionList).subscribe((/**
                                 * @return {?}
                                 */
                                function () {
                                    console.log('导入数据库后带过滤条件重新加载表单数据');
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                function (error) {
                                    console.log('导入数据库后带过滤条件重新加载表单数据异常');
                                }));
                            }
                            else {
                                _this.listDataSer.load().subscribe((/**
                                 * @return {?}
                                 */
                                function () {
                                    console.log('导入数据库后重新加载表单数据');
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                function (error) {
                                    console.log('导入数据库后重新加载表单数据异常');
                                }));
                            }
                        }
                    }
                    _this.needDestroy.emit();
                    _this.subject.next(true);
                    _this.subject.complete();
                }
                else if (data === '导入表单成功') {
                    _this.notify.success(_this.import_form_success);
                    unsubscriber_1.unsubscribe();
                    _this.needDestroy.emit();
                    _this.subject.next(true);
                    _this.subject.complete();
                }
                else if (data === '部分数据导入完成') {
                    _this.notify.success(_this.i18nResource['partdata-import-success']);
                    unsubscriber_1.unsubscribe();
                    _this.needDestroy.emit();
                    _this.subject.next(true);
                    _this.subject.complete();
                }
                else if (data === '校验中止') {
                    _this.notify.info(_this.i18nResource['after_validate_suspend']);
                    unsubscriber_1.unsubscribe();
                    _this.needDestroy.emit();
                    _this.subject.next(false);
                    _this.subject.complete();
                }
                else {
                    /** @type {?} */
                    var errorlevel = _this.dataImportService.errorlevel;
                    if (errorlevel === 'Info') {
                        _this.messageShow('info', data);
                    }
                    else if (errorlevel === 'Warning') {
                        _this.messageShow('warning', data);
                    }
                    else {
                        _this.messageShow('error', _this.import_fail + data);
                    }
                    unsubscriber_1.unsubscribe();
                    _this.needDestroy.emit();
                    _this.subject.next(false);
                    _this.subject.complete();
                }
            }));
        }
    };
    /**
     * @param {?} type
     * @param {?} message
     * @return {?}
     */
    ImportDialogComponent.prototype.messageShow = /**
     * @param {?} type
     * @param {?} message
     * @return {?}
     */
    function (type, message) {
        if (this.msgService) {
            if (type === 'info') {
                this.msgService.info(message);
            }
            else if (type === 'warning') {
                this.msgService.warning(message);
            }
            else {
                this.msgService.error(message);
            }
        }
        else {
            if (type === 'info') {
                this.notify.info(message);
            }
            else if (type === 'warning') {
                this.notify.warning(message);
            }
            else {
                this.notify.error(message);
            }
        }
    };
    ImportDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-import-dialog',
                    template: "<!-- <div class=\"container\">\r\n    <div region=\"south\" class=\"south mgleft\">\r\n        <table>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n                <td>\r\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\r\n                </td>\r\n                <td>\r\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\r\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n                    </input-group>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule === false\">\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectfiletype\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\r\n                </td>\r\n                <td>\r\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\r\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_upload\">{{import_file}}</label>\r\n                </td>\r\n                <td>\r\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n                        (change)=\"selectedFileOnChange($event)\" />\r\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div> -->\r\n\r\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\r\n  <div class=\"col-12\" style=\"margin-top: 67px\">\r\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{rule_list}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\r\n                       [enableClear]=\"false\"\r\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n          </input-group>\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{file_type}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\r\n                             [textField]=\"'label'\"\r\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\r\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n        </div>\r\n        <span>&nbsp;</span>\r\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\r\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\r\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\r\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\r\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\r\n\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{import_file}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\r\n                 [accept]=\"acceptFileType\"\r\n                 (change)=\"selectedFileOnChange($event)\"/>\r\n          <div class=\"input-group\">\r\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                   [(ngModel)]=\"fileName\"\r\n                   [placeholder]=\"import_placeholder\">\r\n            <span class=\"input-group-btn\">\r\n                            <button class=\"btn btn-primary\" type=\"button\"\r\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\r\n                        </span>\r\n          </div>\r\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\r\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n    </div>\r\n\r\n\r\n  </div>\r\n</form>\r\n\r\n\r\n<ng-template #selectFooter>\r\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\r\n\r\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>\r\n",
                    providers: [NotifyService, DataImportService
                    ],
                    styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
                }] }
    ];
    /** @nocollapse */
    ImportDialogComponent.ctorParameters = function () { return [
        { type: DataImportService },
        { type: NotifyService },
        { type: LoadingService },
        { type: HttpClient },
        { type: Injector },
        { type: BsModalService },
        { type: ListDataService },
        { type: MessagerService },
        { type: ComponentFactoryResolver }
    ]; };
    ImportDialogComponent.propDecorators = {
        modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
        ruleId: [{ type: Input }],
        importOption: [{ type: Input }],
        frameContext: [{ type: Input }],
        methodType: [{ type: Input }],
        subject: [{ type: Input }],
        fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
        needDestroy: [{ type: Output }]
    };
    return ImportDialogComponent;
}());
export { ImportDialogComponent };
if (false) {
    /** @type {?} */
    ImportDialogComponent.prototype.modalFooter;
    /** @type {?} */
    ImportDialogComponent.prototype.ruleId;
    /** @type {?} */
    ImportDialogComponent.prototype.importOption;
    /** @type {?} */
    ImportDialogComponent.prototype.frameContext;
    /** @type {?} */
    ImportDialogComponent.prototype.methodType;
    /** @type {?} */
    ImportDialogComponent.prototype.subject;
    /** @type {?} */
    ImportDialogComponent.prototype.DataIeProgressDialog;
    /** @type {?} */
    ImportDialogComponent.prototype.showfiletype;
    /** @type {?} */
    ImportDialogComponent.prototype.enableRuntimeCustom;
    /** @type {?} */
    ImportDialogComponent.prototype.recordRule;
    /** @type {?} */
    ImportDialogComponent.prototype.extendInfo;
    /** @type {?} */
    ImportDialogComponent.prototype.currentRuleName;
    /** @type {?} */
    ImportDialogComponent.prototype.currentRuleId;
    /** @type {?} */
    ImportDialogComponent.prototype.currentRuleFileType;
    /** @type {?} */
    ImportDialogComponent.prototype.enableTemplate;
    /** @type {?} */
    ImportDialogComponent.prototype.closeXLSX;
    /** @type {?} */
    ImportDialogComponent.prototype.enableSecurityLevelSelect;
    /** @type {?} */
    ImportDialogComponent.prototype.securityLevelName;
    /** @type {?} */
    ImportDialogComponent.prototype.acceptFileType;
    /** @type {?} */
    ImportDialogComponent.prototype.ImportSecretRemindInfo;
    /** @type {?} */
    ImportDialogComponent.prototype.fileName;
    /** @type {?} */
    ImportDialogComponent.prototype.fileUpload;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.origin;
    /** @type {?} */
    ImportDialogComponent.prototype.uploader;
    /** @type {?} */
    ImportDialogComponent.prototype.needDestroy;
    /** @type {?} */
    ImportDialogComponent.prototype.valueField;
    /** @type {?} */
    ImportDialogComponent.prototype.import_file;
    /** @type {?} */
    ImportDialogComponent.prototype.choose_file;
    /** @type {?} */
    ImportDialogComponent.prototype.import_placeholder;
    /** @type {?} */
    ImportDialogComponent.prototype.file_type;
    /** @type {?} */
    ImportDialogComponent.prototype.download_template;
    /** @type {?} */
    ImportDialogComponent.prototype.ie_cancel;
    /** @type {?} */
    ImportDialogComponent.prototype.ie_ok;
    /** @type {?} */
    ImportDialogComponent.prototype.choose_truefile;
    /** @type {?} */
    ImportDialogComponent.prototype.download_template_ok;
    /** @type {?} */
    ImportDialogComponent.prototype.download_template_fail;
    /** @type {?} */
    ImportDialogComponent.prototype.upload_fail;
    /** @type {?} */
    ImportDialogComponent.prototype.import_success;
    /** @type {?} */
    ImportDialogComponent.prototype.import_form_success;
    /** @type {?} */
    ImportDialogComponent.prototype.import_fail;
    /** @type {?} */
    ImportDialogComponent.prototype.rule_list;
    /** @type {?} */
    ImportDialogComponent.prototype.select_xlsx_notify;
    /** @type {?} */
    ImportDialogComponent.prototype.i18nResource;
    /** @type {?} */
    ImportDialogComponent.prototype.lookupIcon;
    /** @type {?} */
    ImportDialogComponent.prototype.fileListItems;
    /** @type {?} */
    ImportDialogComponent.prototype.securityLevelItems;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.dataImportService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.listDataSer;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWRpcC9kYXRhLWltcC1leHAvIiwic291cmNlcyI6WyJsaWIvaW1wb3J0LWRpYWxvZy9pbXBvcnQtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLFlBQVksRUFDWixRQUFRLEVBQ1IsS0FBSyxFQUVMLE1BQU0sRUFDTixXQUFXLEVBQ1gsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxxREFBcUQsQ0FBQztBQUlqRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDMUQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsV0FBVyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFhLGNBQWMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzVELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDekQs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MERBQWtDOztJQUNsQyxrREFBdUI7O0lBR3ZCLCtDQUF1RDs7SUFDdkQsdURBQTRCOztJQUU1Qix5Q0FBYzs7SUFFZCwyQ0FDdUI7Ozs7O0lBQ3ZCLHVDQUF3Qzs7SUFDeEMseUNBS0c7O0lBRUgsNENBQ2lDOztJQUNqQywyQ0FBdUI7O0lBR3ZCLDRDQUFvQjs7SUFDcEIsNENBQW9COztJQUNwQixtREFBMkI7O0lBQzNCLDBDQUFrQjs7SUFDbEIsa0RBQTBCOztJQUMxQiwwQ0FBa0I7O0lBQ2xCLHNDQUFjOztJQUNkLGdEQUF3Qjs7SUFDeEIscURBQTZCOztJQUM3Qix1REFBK0I7O0lBQy9CLDRDQUFvQjs7SUFDcEIsK0NBQXVCOztJQUN2QixvREFBNEI7O0lBQzVCLDRDQUFvQjs7SUFDcEIsMENBQWtCOztJQUNsQixtREFBMkI7O0lBQzNCLDZDQUFrQjs7SUFzQ2xCLDJDQUFxRDs7SUFHckQsOENBUUU7O0lBRUYsbURBQXdCOzs7OztJQWhEdEIsa0RBQTRDOzs7OztJQUM1Qyx1Q0FBNkI7Ozs7O0lBQzdCLCtDQUFzQzs7Ozs7SUFDdEMscUNBQXdCOzs7OztJQUN4Qix5Q0FBMEI7Ozs7O0lBQzFCLDZDQUFvQzs7Ozs7SUFDcEMsNENBQW9DOzs7OztJQUNwQywyQ0FBbUM7Ozs7O0lBQ25DLHlDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICBFbGVtZW50UmVmLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbmplY3RvcixcclxuICBJbnB1dCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgT3V0cHV0LFxyXG4gIFRlbXBsYXRlUmVmLFxyXG4gIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0ZpbGVVcGxvYWRlcn0gZnJvbSAnLi4vc2VydmljZS9VcGxvYWRlclNlcnZpY2UvRmlsZVVwbG9hZC9maWxlLXVwbG9hZGVyJztcclxuaW1wb3J0IHtGaWxlSXRlbX0gZnJvbSAnLi4vc2VydmljZS9VcGxvYWRlclNlcnZpY2UvRmlsZVVwbG9hZC9maWxlLWl0ZW0nO1xyXG5pbXBvcnQge1BhcnNlZFJlc3BvbnNlSGVhZGVyc30gZnJvbSAnLi4vc2VydmljZS9VcGxvYWRlclNlcnZpY2UvRmlsZVVwbG9hZC9wYXJzZWQtcmVzcG9uc2UtaGVhZGVycyc7XHJcblxyXG5pbXBvcnQge0RhdGFJbXBvcnRTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL0RhdGFJRVNlcnZpY2UvZGF0YS1pbXBvcnQuc2VydmljZSc7XHJcbmltcG9ydCB7RnJhbWVDb250ZXh0fSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7Tm90aWZ5U2VydmljZX0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQge0xvYWRpbmdTZXJ2aWNlfSBmcm9tICdAZmFycmlzL3VpLWxvYWRpbmcnO1xyXG5pbXBvcnQge01ldGhvZFR5cGV9IGZyb20gJy4uL21vZGVsL0RhdGFJRVR5cGUvTWV0aG9kVHlwZSc7XHJcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7RGF0YUlFVXRpbHMsIEZpbGVUeXBlVXRpbCwgaXNOdWxsT3JFbXB0eSwgaXNOdWxsT3JVbmRlZmluZWR9IGZyb20gJy4uL3NlcnZpY2UvVXRpbHMvRGF0YUlFVXRpbHMnO1xyXG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtCc01vZGFsUmVmLCBCc01vZGFsU2VydmljZX0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7UnVsZVNlbGVjdENvbXBvbmVudH0gZnJvbSAnLi4vcnVsZS1zZWxlY3QvcnVsZS1zZWxlY3QuY29tcG9uZW50JztcclxuaW1wb3J0IHtNZXNzYWdlclNlcnZpY2V9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQge0xpc3REYXRhU2VydmljZX0gZnJvbSAnQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzJztcclxuaW1wb3J0IHtGaWxlQ29uc3R9IGZyb20gJy4uL21vZGVsL3V0aWxzL0ZpbGVDb25zdCc7XHJcbmltcG9ydCB7RGF0YWllUHJvZ3Jlc3NDb21wb25lbnR9IGZyb20gJy4uL2Jha2NvbXBvbmVudHMvZGF0YWllLXByb2dyZXNzL2RhdGFpZS1wcm9ncmVzcy5jb21wb25lbnQnO1xyXG5pbXBvcnQge0NvbW1vblBhcmFtc30gZnJvbSBcIi4uL3NlcnZpY2UvRW50aXR5L0NvbW1vblBhcmFtc1wiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtaW1wb3J0LWRpYWxvZycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2ltcG9ydC1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2ltcG9ydC1kaWFsb2cuY29tcG9uZW50LmNzcyddLFxyXG4gIHByb3ZpZGVyczogW05vdGlmeVNlcnZpY2UsIERhdGFJbXBvcnRTZXJ2aWNlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW1wb3J0RGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICBAVmlld0NoaWxkKCdzZWxlY3RGb290ZXInKSBtb2RhbEZvb3RlcjogVGVtcGxhdGVSZWY8YW55PjtcclxuICAvLyDop4TliJlJRCDor6VpZOS4uuihqOWNleS4iumFjee9rueahOinhOWImWlkXHJcbiAgQElucHV0KClcclxuICBydWxlSWQgPSAnJztcclxuICAvLyDov4fmu6TmnaHku7ZcclxuICBASW5wdXQoKVxyXG4gIGltcG9ydE9wdGlvbjogYW55ID0gbnVsbDtcclxuICBASW5wdXQoKVxyXG4gIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gbnVsbDtcclxuICBASW5wdXQoKVxyXG4gIG1ldGhvZFR5cGU6IE1ldGhvZFR5cGU7XHJcbiAgQElucHV0KClcclxuICBzdWJqZWN0OiBTdWJqZWN0PEJvb2xlYW4+ID0gbnVsbDtcclxuXHJcbiAgRGF0YUllUHJvZ3Jlc3NEaWFsb2c6IEJzTW9kYWxSZWY7XHJcblxyXG4gIHNob3dmaWxldHlwZSA9IHRydWU7XHJcbiAgZW5hYmxlUnVudGltZUN1c3RvbSA9IGZhbHNlO1xyXG4gIC8vIOiusOW9leeahOinhOWImVxyXG4gIHJlY29yZFJ1bGUgPSBudWxsO1xyXG4gIGV4dGVuZEluZm86IGFueTtcclxuICAvL+W9k+WJjemAieaLqeinhOWImeeahGlk44CB5ZCN56ew5ZKM5paH5Lu257G75Z6LXHJcbiAgY3VycmVudFJ1bGVOYW1lID0gJyc7XHJcbiAgY3VycmVudFJ1bGVJZCA9ICcnO1xyXG4gIGN1cnJlbnRSdWxlRmlsZVR5cGUgPSAnJztcclxuICBlbmFibGVUZW1wbGF0ZSA9IHRydWU7XHJcbiAgY2xvc2VYTFNYID0gZmFsc2U7XHJcbiAgZW5hYmxlU2VjdXJpdHlMZXZlbFNlbGVjdCA9IGZhbHNlO1xyXG4gIHNlY3VyaXR5TGV2ZWxOYW1lID0gJyc7XHJcblxyXG5cclxuICBhY2NlcHRGaWxlVHlwZSA9ICcuY3N2LC54bHNtLC54bHN4LC54bHMsLnBkZiwueG1sLC5ldCc7XHJcbiAgSW1wb3J0U2VjcmV0UmVtaW5kSW5mbyA9ICcnO1xyXG4gIC8vIOaWh+S7tuWQjeensFxyXG4gIGZpbGVOYW1lID0gJyc7XHJcbiAgLy8gbG9hZGluZ0NvbXA6IExvYWRpbmdDb21wb25lbnQgPSBudWxsO1xyXG4gIEBWaWV3Q2hpbGQoJ2ZpbGVVcGxvYWQnKVxyXG4gIGZpbGVVcGxvYWQ6IEVsZW1lbnRSZWY7XHJcbiAgcHJpdmF0ZSBvcmlnaW4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xyXG4gIHVwbG9hZGVyID0gbmV3IEZpbGVVcGxvYWRlcih7XHJcbiAgICB1cmw6ICcnLFxyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBhdXRvVXBsb2FkOiBmYWxzZSxcclxuICAgIGl0ZW1BbGlhczogJ3VwbG9hZGVkZmlsZSdcclxuICB9KTtcclxuICAvLyDmjqfliLZEZXN0cm956KGo5Y2V5Lit55qE6L6T5YWl57uE5Lu2XHJcbiAgQE91dHB1dCgpXHJcbiAgbmVlZERlc3Ryb3kgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgdmFsdWVGaWVsZDogYW55ID0gbnVsbDtcclxuXHJcbiAgLy/lm73pmYXljJbnm7jlhbPlj5jph49cclxuICBpbXBvcnRfZmlsZTogc3RyaW5nO1xyXG4gIGNob29zZV9maWxlOiBzdHJpbmc7XHJcbiAgaW1wb3J0X3BsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgZmlsZV90eXBlOiBzdHJpbmc7XHJcbiAgZG93bmxvYWRfdGVtcGxhdGU6IHN0cmluZztcclxuICBpZV9jYW5jZWw6IHN0cmluZztcclxuICBpZV9vazogc3RyaW5nO1xyXG4gIGNob29zZV90cnVlZmlsZTogc3RyaW5nO1xyXG4gIGRvd25sb2FkX3RlbXBsYXRlX29rOiBzdHJpbmc7XHJcbiAgZG93bmxvYWRfdGVtcGxhdGVfZmFpbDogc3RyaW5nO1xyXG4gIHVwbG9hZF9mYWlsOiBzdHJpbmc7XHJcbiAgaW1wb3J0X3N1Y2Nlc3M6IHN0cmluZztcclxuICBpbXBvcnRfZm9ybV9zdWNjZXNzOiBzdHJpbmc7XHJcbiAgaW1wb3J0X2ZhaWw6IHN0cmluZztcclxuICBydWxlX2xpc3Q6IHN0cmluZztcclxuICBzZWxlY3RfeGxzeF9ub3RpZnk6IHN0cmluZztcclxuICBpMThuUmVzb3VyY2U6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGRhdGFJbXBvcnRTZXJ2aWNlOiBEYXRhSW1wb3J0U2VydmljZSxcclxuICAgIHByaXZhdGUgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgIHByaXZhdGUgbGlzdERhdGFTZXI6IExpc3REYXRhU2VydmljZSxcclxuICAgIHByaXZhdGUgbXNnU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLnVwbG9hZGVyLm9uU3VjY2Vzc0l0ZW0gPSB0aGlzLkltcG9ydC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy51cGxvYWRlci5vbkVycm9ySXRlbSA9IHRoaXMuRXJyb3JMb2cuYmluZCh0aGlzKTtcclxuICAgIHRoaXMudXBsb2FkZXIub25BZnRlckFkZGluZ0ZpbGUgPSB0aGlzLmFmdGVyQWRkRmlsZTtcclxuICAgIERhdGFJRVV0aWxzLmdldFRyYW5zbGF0ZVZhbHVlKGh0dHApLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICB0aGlzLmltcG9ydF9maWxlID0gcmVzWydpbXBvcnRfZmlsZSddO1xyXG4gICAgICB0aGlzLmNob29zZV9maWxlID0gcmVzWydjaG9vc2VfZmlsZSddO1xyXG4gICAgICB0aGlzLmZpbGVfdHlwZSA9IHJlc1snZmlsZV90eXBlJ107XHJcbiAgICAgIHRoaXMuaW1wb3J0X3BsYWNlaG9sZGVyID0gcmVzWydpbXBvcnRfcGxhY2Vob2xkZXInXTtcclxuICAgICAgdGhpcy5kb3dubG9hZF90ZW1wbGF0ZSA9IHJlc1snZG93bmxvYWRfdGVtcGxhdGUnXTtcclxuICAgICAgdGhpcy5pZV9jYW5jZWwgPSByZXNbJ2llX2NhbmNlbCddO1xyXG4gICAgICB0aGlzLmllX29rID0gcmVzWydpZV9vayddO1xyXG4gICAgICB0aGlzLmNob29zZV90cnVlZmlsZSA9IHJlc1snY2hvb3NlX3RydWVmaWxlJ107XHJcbiAgICAgIHRoaXMuZG93bmxvYWRfdGVtcGxhdGVfb2sgPSByZXNbJ2Rvd25sb2FkX3RlbXBsYXRlX29rJ107XHJcbiAgICAgIHRoaXMuZG93bmxvYWRfdGVtcGxhdGVfZmFpbCA9IHJlc1snZG93bmxvYWRfdGVtcGxhdGVfZmFpbCddO1xyXG4gICAgICB0aGlzLnVwbG9hZF9mYWlsID0gcmVzWyd1cGxvYWRfZmFpbCddO1xyXG4gICAgICB0aGlzLmltcG9ydF9zdWNjZXNzID0gcmVzWydpbXBvcnRfc3VjY2VzcyddO1xyXG4gICAgICB0aGlzLmltcG9ydF9mb3JtX3N1Y2Nlc3MgPSByZXNbJ2ltcG9ydF9mb3JtX3N1Y2Nlc3MnXTtcclxuICAgICAgdGhpcy5pbXBvcnRfZmFpbCA9IHJlc1snaW1wb3J0X2ZhaWwnXTtcclxuICAgICAgdGhpcy5ydWxlX2xpc3QgPSByZXNbJ3J1bGVfbGlzdCddO1xyXG4gICAgICB0aGlzLnNlbGVjdF94bHN4X25vdGlmeSA9IHJlc1snc2VsZWN0X3hsc3hfbm90aWZ5J107XHJcbiAgICAgIHRoaXMuaTE4blJlc291cmNlID0gcmVzO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgbG9va3VwSWNvbiA9ICc8aSBjbGFzcz1cImYtaWNvbiBmLWljb24td2luZG93c1wiPjwvaT4nO1xyXG5cclxuXHJcbiAgcHVibGljIGZpbGVMaXN0SXRlbXMgPSBbXHJcbiAgICB7aWQ6IEZpbGVDb25zdC54bHMsIGxhYmVsOiBGaWxlQ29uc3QueGxzfSxcclxuICAgIHtpZDogRmlsZUNvbnN0Lnhsc3gsIGxhYmVsOiBGaWxlQ29uc3QueGxzeH0sXHJcbiAgICB7aWQ6IEZpbGVDb25zdC54bHNtLCBsYWJlbDogRmlsZUNvbnN0Lnhsc219LFxyXG4gICAge2lkOiBGaWxlQ29uc3QuZXQsIGxhYmVsOiBGaWxlQ29uc3QuZXR9LFxyXG4gICAgLy8geyBpZDogRmlsZUNvbnN0LmNzdiwgbGFiZWw6IEZpbGVDb25zdC5jc3YgfSxcclxuICAgIC8vIHsgaWQ6IEZpbGVDb25zdC5wZGYsIGxhYmVsOiBGaWxlQ29uc3QucGRmIH0sXHJcbiAgICAvLyB7IGlkOiBGaWxlQ29uc3QueG1sLCBsYWJsZTogRmlsZUNvbnN0LnhtbCB9XHJcbiAgXTtcclxuXHJcbiAgc2VjdXJpdHlMZXZlbEl0ZW1zID0gW107XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgbGV0IGV4dGVuZEluZm8gPSB0aGlzLnJlY29yZFJ1bGUuZXh0ZW5kSW5mbztcclxuICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoZXh0ZW5kSW5mbykpIHtcclxuICAgICAgdGhpcy5leHRlbmRJbmZvID0gSlNPTi5wYXJzZShleHRlbmRJbmZvKTtcclxuICAgICAgdGhpcy5JbXBvcnRTZWNyZXRSZW1pbmRJbmZvID0gdGhpcy5leHRlbmRJbmZvWydJbXBvcnRTZWNyZXRSZW1pbmRJbmZvJ107XHJcbiAgICAgIHRoaXMuY2xvc2VYTFNYID0gdGhpcy5leHRlbmRJbmZvWydjbG9zZVhMU1gnXTtcclxuICAgICAgaWYgKHRoaXMuY2xvc2VYTFNYID09PSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5maWxlTGlzdEl0ZW1zID0gW1xyXG4gICAgICAgICAge2lkOiBGaWxlQ29uc3QueGxzLCBsYWJlbDogRmlsZUNvbnN0Lnhsc30sXHJcbiAgICAgICAgICB7aWQ6IEZpbGVDb25zdC54bHNtLCBsYWJlbDogRmlsZUNvbnN0Lnhsc219LFxyXG4gICAgICAgICAge2lkOiBGaWxlQ29uc3QuZXQsIGxhYmVsOiBGaWxlQ29uc3QuZXR9XHJcbiAgICAgICAgXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VjdXJpdHlMZXZlbHMgPSB0aGlzLnJlY29yZFJ1bGUuc2VjdXJpdHlMZXZlbHM7XHJcbiAgICBpZiAoIWlzTnVsbE9yRW1wdHkoc2VjdXJpdHlMZXZlbHMpKSB7XHJcbiAgICAgIHRoaXMuZW5hYmxlU2VjdXJpdHlMZXZlbFNlbGVjdCA9IHRydWU7XHJcbiAgICAgIHNlY3VyaXR5TGV2ZWxzLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgY29uc3QgbGV2ZWwgPSB7XHJcbiAgICAgICAgICB2YWx1ZTogZS5uYW1lLFxyXG4gICAgICAgICAgbGFiZWw6IGUubmFtZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zZWN1cml0eUxldmVsSXRlbXMucHVzaChsZXZlbCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnNlY3VyaXR5TGV2ZWxOYW1lID0gdGhpcy5zZWN1cml0eUxldmVsSXRlbXNbMF0udmFsdWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLmN1cnJlbnRSdWxlSWQgPSB0aGlzLnJlY29yZFJ1bGUucnVsZUlkO1xyXG4gICAgdGhpcy5jdXJyZW50UnVsZU5hbWUgPSB0aGlzLnJlY29yZFJ1bGUucnVsZU5hbWU7XHJcbiAgICB0aGlzLnZhbHVlRmllbGQgPSBGaWxlVHlwZVV0aWwuZ2V0RmlsZVR5cGVOYW1lKHRoaXMucmVjb3JkUnVsZS5maWxlVHlwZSk7XHJcbiAgICBpZiAodGhpcy52YWx1ZUZpZWxkID09PSAnJykge1xyXG4gICAgICAvL+acquWcqOW9k+WJjeWPr+mAieaWh+S7tueahOexu+Wei+aXtu+8jOS4jeaYvuekuumAieaWh+S7tuexu+Wei+aOp+S7tlxyXG4gICAgICB0aGlzLnNob3dmaWxldHlwZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJyZW50UnVsZUZpbGVUeXBlID0gdGhpcy52YWx1ZUZpZWxkO1xyXG4gICAgdGhpcy5jb250cm9sRmlsZVR5cGUoKTtcclxuICAgIGlmICh0aGlzLmltcG9ydE9wdGlvbi5lbmFibGVSdW50aW1lQ3VzdG9tID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZW5hYmxlUnVudGltZUN1c3RvbSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgb3BlblNlbGVjdFJ1bGUoJGV2ZW50KSB7XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgIC8v6L+H5ruk6KeE5YiZ5pe255So6KGo5Y2V5ZG95Luk5aSE6YWN572u55qE6KeE5YiZ5p2l6L+H5ruk77yM5Zug5q2k55SocnVsZUlk77yM6ICM5LiN5pivY3VycmVudFJ1bGVJZFxyXG4gICAgY29uc3QgdXJsID0gJy9hcGkvcnVudGltZS9kaXAvdjEuMC9kYXRhSWVSdWxlTWFuYWdlL2ZpbHRlclJ1bGVzQnlSdWxlSWRBbmRWb0lkJztcclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgIHJ1bGVJZDogdGhpcy5ydWxlSWQsXHJcbiAgICAgIHJ1bGVUeXBlOiAwLFxyXG4gICAgICB2b0lkOiB0aGlzLmltcG9ydE9wdGlvbi52b0lkLFxyXG4gICAgICBtZXRob2RUeXBlOiB0aGlzLm1ldGhvZFR5cGUsXHJcbiAgICAgIGltcG9ydENoaWxkTm9kZUNvZGU6IHRoaXMuaW1wb3J0T3B0aW9uLmltcG9ydENoaWxkTm9kZUNvZGUsXHJcbiAgICAgIGNsb3NlWGxzeDogdGhpcy5jbG9zZVhMU1hcclxuICAgIH07XHJcbiAgICB0aGlzLmh0dHAucG9zdCh1cmwsIGJvZHkpLnN1YnNjcmliZSgoUnVsZU1ncnM6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmNsZWFyQWxsKCk7XHJcbiAgICAgIGlmIChSdWxlTWdycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICB0aGlzLm5vdGlmeS5pbmZvKHRoaXMuaTE4blJlc291cmNlWydydWxlc2VsZWN0X2xpc3RlbXB0eSddKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgY29tcEZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFJ1bGVTZWxlY3RDb21wb25lbnQpO1xyXG4gICAgICBjb25zdCBjb21wUmVmID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICBjb21wUmVmLmluc3RhbmNlLnJ1bGVJZCA9IHRoaXMucnVsZUlkO1xyXG4gICAgICBjb21wUmVmLmluc3RhbmNlLnZvSWQgPSB0aGlzLmltcG9ydE9wdGlvbi52b0lkO1xyXG4gICAgICBjb21wUmVmLmluc3RhbmNlLnJ1bGVUeXBlID0gMDtcclxuICAgICAgY29tcFJlZi5pbnN0YW5jZS5SdWxlTWdyc0RhdGEgPSBSdWxlTWdycztcclxuICAgICAgY29uc3QgbW9kYWxDb25maWcgPSB7XHJcbiAgICAgICAgdGl0bGU6IHRoaXMucnVsZV9saXN0LFxyXG4gICAgICAgIHdpZHRoOiA5NTAsXHJcbiAgICAgICAgaGVpZ2h0OiA1MDAsXHJcbiAgICAgICAgYnV0dG9uczogY29tcFJlZi5pbnN0YW5jZS5tb2RhbEZvb3RlcixcclxuICAgICAgICBzaG93SGVhZGVyOiB0cnVlLFxyXG4gICAgICAgIHNob3dNYXhCdXR0b246IGZhbHNlLFxyXG4gICAgICAgIHNob3dCdXR0b25zOiB0cnVlXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY29tcFJlZiwgbW9kYWxDb25maWcpO1xyXG4gICAgICBjb21wUmVmLmluc3RhbmNlLmNsb3NlTW9kYWwuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICBkaWFsb2cuY2xvc2UoKTtcclxuICAgICAgfSlcclxuICAgICAgY29tcFJlZi5pbnN0YW5jZS5va01vZGFsLnN1YnNjcmliZShSdWxlTWdyID0+IHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSdWxlSWQgPSBSdWxlTWdyLmlkO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFJ1bGVOYW1lID0gUnVsZU1nci5uYW1lO1xyXG4gICAgICAgIHRoaXMudmFsdWVGaWVsZCA9IEZpbGVUeXBlVXRpbC5nZXRGaWxlVHlwZU5hbWUoUnVsZU1nci5maWxlVHlwZSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UnVsZUZpbGVUeXBlID0gdGhpcy52YWx1ZUZpZWxkO1xyXG4gICAgICAgIHRoaXMuY29udHJvbEZpbGVUeXBlKCk7XHJcbiAgICAgICAgZGlhbG9nLmNsb3NlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmNsZWFyQWxsKCk7XHJcbiAgICAgIHRoaXMubm90aWZ5LmVycm9yKGVycm9yLmVycm9yLk1lc3NhZ2UpO1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvci5lcnJvci5NZXNzYWdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2FuRG93bmxvYWRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IHN1ZmZpeCA9IEZpbGVUeXBlVXRpbC5nZXRGaWxlRXh0ZW5zaW9uKHRoaXMudmFsdWVGaWVsZCk7XHJcbiAgICBjb25zdCBjYW5MaXN0ID0gWycueGxzJywgJy54bHN4JywgJy54bHNtJywgJy5ldCddO1xyXG4gICAgaWYgKGNhbkxpc3QuZmluZEluZGV4KHQgPT4gdCA9PT0gc3VmZml4KSA8IDApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgfVxyXG5cclxuICAvLyDpgInmi6nmlofku7blkI7kuovku7ZcclxuICBzZWxlY3RlZEZpbGVPbkNoYW5nZShldmVudCkge1xyXG4gICAgY29uc3Qgc3RyOiBzdHJpbmcgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICBpZiAoc3RyID09PSAnJykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHN0ci5sYXN0SW5kZXhPZignXFxcXCcpO1xyXG4gICAgdGhpcy5maWxlTmFtZSA9IHN0ci5zdWJzdHJpbmcoaW5kZXggKyAxKTtcclxuICAgIGlmICh0aGlzLmZpbGVOYW1lLnNwbGl0KFwiLlwiKS5sZW5ndGggPT09IDIgJiYgdGhpcy5maWxlTmFtZS5zcGxpdChcIi5cIilbMV0gPT09IFwianBnXCIpIHtcclxuICAgICAgdGhpcy51cGxvYWRlci5xdWV1ZSA9IFtdO1xyXG4gICAgICB0aGlzLm5vdGlmeS5pbmZvKHRoaXMuY2hvb3NlX3RydWVmaWxlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coJ+mYn+WIl+S4reeahOaWh+S7ticgKyB0aGlzLnVwbG9hZGVyLnF1ZXVlWzBdKTtcclxuICB9XHJcblxyXG4gIC8vIOWFs+mXreeql+WPo1xyXG4gIHB1YmxpYyBDbG9zZSgpIHtcclxuICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLy8g6YCJ5oup5paH5Lu25LqL5Lu2XHJcbiAgcHVibGljIFNlbGVjdEZpbGUoKTogYW55IHtcclxuICAgIHRoaXMuZmlsZVVwbG9hZC5uYXRpdmVFbGVtZW50LmNsaWNrKCk7XHJcbiAgfVxyXG5cclxuICBmaWxlVHlwZVZhbHVlQ2hhbmdlKCkge1xyXG4gICAgaWYgKHRoaXMuY29udHJvbEZpbGVUeXBlKCkgPT09ICcueGxzeCcpIHtcclxuICAgICAgdGhpcy5ub3RpZnkuaW5mbyh0aGlzLnNlbGVjdF94bHN4X25vdGlmeSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb250cm9sRmlsZVR5cGUoKSB7XHJcbiAgICBjb25zdCBzdWZmaXggPSBGaWxlVHlwZVV0aWwuZ2V0RmlsZUV4dGVuc2lvbih0aGlzLnZhbHVlRmllbGQpO1xyXG4gICAgaWYgKHN1ZmZpeCAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLmFjY2VwdEZpbGVUeXBlID0gc3VmZml4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5hY2NlcHRGaWxlVHlwZSA9ICcqJztcclxuICAgIH1cclxuICAgIHJldHVybiBzdWZmaXg7XHJcbiAgfVxyXG5cclxuICBjbGlja1NldHRpbmcoKSB7XHJcbiAgICB0aGlzLm5vdGlmeS5pbmZvKCforr7nva7kuIDkuIsnKTtcclxuICB9XHJcblxyXG4gIC8vIOS4i+i9veaooeadv1xyXG4gIHB1YmxpYyBEb3dubG9hZFRlbXBsYXRlKCkge1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICBsZXQgc3VmZml4ID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmNhbkRvd25sb2FkVGVtcGxhdGUoKSAmJiB0aGlzLnZhbHVlRmllbGQgIT09IHRoaXMuY3VycmVudFJ1bGVGaWxlVHlwZSkge1xyXG4gICAgICBzdWZmaXggPSBGaWxlVHlwZVV0aWwuZ2V0RmlsZUV4dGVuc2lvbih0aGlzLnZhbHVlRmllbGQpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pbXBvcnRPcHRpb25bJ3NlY3VyaXR5TGV2ZWxOYW1lJ10gPSB0aGlzLnNlY3VyaXR5TGV2ZWxOYW1lO1xyXG4gICAgdGhpcy5kYXRhSW1wb3J0U2VydmljZS5Eb3dtbG9hZFRlbXBsYXRlKHRoaXMuY3VycmVudFJ1bGVJZCwgdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSwgdGhpcy5pbXBvcnRPcHRpb24sIHN1ZmZpeCk7XHJcbiAgICBjb25zdCB1bnN1YnNjcmliZXIgPSB0aGlzLmRhdGFJbXBvcnRTZXJ2aWNlLmNvbXBsZXRlLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgICBpZiAoZGF0YSA9PT0gJycpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHRoaXMuZG93bmxvYWRfdGVtcGxhdGVfb2spO1xyXG4gICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHRoaXMuZG93bmxvYWRfdGVtcGxhdGVfZmFpbCArIGRhdGEpO1xyXG4gICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNob3dQcm9ncmVzc0RpYWxvZygpIHtcclxuICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShEYXRhaWVQcm9ncmVzc0NvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjb21wUmVmID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5EYXRhSWVQcm9ncmVzc1BhcmFtcyA9IHRoaXMuZGF0YUltcG9ydFNlcnZpY2UuRGF0YUllUHJvZ3Jlc3NQYXJhbXM7XHJcbiAgICBjb25zdCBtb2RhbENvbmZpZyA9IHtcclxuICAgICAgd2lkdGg6IDUzMCxcclxuICAgICAgaGVpZ2h0OiA1MCxcclxuICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICBzaG93SGVhZGVyOiBmYWxzZSxcclxuICAgICAgc2hvd01heEJ1dHRvbjogZmFsc2UsXHJcbiAgICAgIHNob3dNaW5CdXR0b246IGZhbHNlLFxyXG4gICAgICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgICAgIHNob3dDbG9zZUJ1dHRvbjogZmFsc2UsXHJcbiAgICAgIHJlc2l6YWJsZTogZmFsc2VcclxuICAgIH07XHJcbiAgICByZXR1cm4gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wUmVmLCBtb2RhbENvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvLyDmt7vliqDmlofku7blkI7kuovku7ZcclxuICBhZnRlckFkZEZpbGUoZmlsZUl0ZW06IEZpbGVJdGVtKTogYW55IHtcclxuICB9XHJcblxyXG4gIC8vIOW8gOWni+WvvOWFpVxyXG4gIHB1YmxpYyBPaygpIHtcclxuICAgIGNvbnNvbGUubG9nKCflvIDlp4vkuIrkvKDvvIEnKTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMudXBsb2FkZXIucXVldWUpO1xyXG4gICAgY29uc3QgbG9hZGluZ0NvbmZpZyA9IHtcclxuICAgICAgbWVzc2FnZTogdGhpcy5pMThuUmVzb3VyY2VbJ2ltcG9ydF9sb2FkaW5nJ11cclxuICAgIH07XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3cobG9hZGluZ0NvbmZpZyk7XHJcbiAgICAvLyB0aGlzLkRhdGFJZVByb2dyZXNzRGlhbG9nID0gdGhpcy5zaG93UHJvZ3Jlc3NEaWFsb2coKTtcclxuICAgIGNvbnN0IGxlbiA9IHRoaXMudXBsb2FkZXIucXVldWUubGVuZ3RoO1xyXG4gICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICB0aGlzLm5vdGlmeS5pbmZvKHRoaXMuY2hvb3NlX3RydWVmaWxlKTtcclxuICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBsYXN0RmlsZUl0ZW0gPSB0aGlzLnVwbG9hZGVyLnF1ZXVlW2xlbiAtIDFdO1xyXG4gICAgY29uc3QgbWF4RmlsZVNpemUgPSB0aGlzLnJlY29yZFJ1bGUuaW1wb3J0RmlsZU1heFNpemUgKiAxMDI0ICogMTAyNDtcclxuICAgIGlmIChsYXN0RmlsZUl0ZW0uZmlsZS5zaXplID4gbWF4RmlsZVNpemUpIHtcclxuICAgICAgdGhpcy5ub3RpZnkud2FybmluZyh0aGlzLmkxOG5SZXNvdXJjZVsnaW1wb3J0ZmlsZV90b29iaWcnXSArIHRoaXMucmVjb3JkUnVsZS5pbXBvcnRGaWxlTWF4U2l6ZSArICdNQicpO1xyXG4gICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmNsZWFyQWxsKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJlZlJlc3RTZXJ2aWNlID0gRGF0YUlFVXRpbHMuR2V0QmVmUmVzdFNlcnZpY2UodGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSk7XHJcbiAgICBjb25zdCBwcmVVcmwgPSBEYXRhSUVVdGlscy5HZXRQcmVVcmwoYmVmUmVzdFNlcnZpY2UuYmFzZVVyaSk7XHJcbiAgICBsZXQgdGVtcFVybCA9IGAke3ByZVVybH0vaW1wb3J0L1VwbG9hZGA7XHJcbiAgICBsZXQgc3UgPSBEYXRhSUVVdGlscy5nZXRTdSh0ZW1wVXJsKTtcclxuICAgIGlmICh0aGlzLmltcG9ydE9wdGlvblsnc3UnXSAhPT0gbnVsbCAmJiB0aGlzLmltcG9ydE9wdGlvblsnc3UnXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHN1ID0gdGhpcy5pbXBvcnRPcHRpb25bJ3N1J107XHJcbiAgICB9XHJcbiAgICBjb25zdCBmaXhlZFVybCA9IHRoaXMub3JpZ2luICsgJy9hcGkvcnVudGltZS9kaXAvdjEuMC9ycGNpbXBvcnQvVXBsb2FkP3N1PScgKyBzdTtcclxuICAgIGxldCBoZWFkZXJzID0gW3tuYW1lOiAnc3UnLCB2YWx1ZTogc3V9XTtcclxuXHJcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHRoaXMuZXh0ZW5kSW5mbykpIHtcclxuICAgICAgY29uc3QgZW5hYmxlU2VjdXJpdHlMZXZlbCA9IHRoaXMuZXh0ZW5kSW5mb1snZW5hYmxlU2VjdXJpdHlMZXZlbCddIGFzIGJvb2xlYW47XHJcbiAgICAgIGlmIChlbmFibGVTZWN1cml0eUxldmVsKSB7XHJcbiAgICAgICAgaGVhZGVycy5wdXNoKHtuYW1lOiAnZW5hYmxlU2VjdXJpdHlMZXZlbCcsIHZhbHVlOiBlbmFibGVTZWN1cml0eUxldmVsfSk7XHJcbiAgICAgICAgY29uc3Qgc2VjdXJpdHlMZXZlbFByZWZpeCA9IHRoaXMuZXh0ZW5kSW5mb1snc2VjdXJpdHlMZXZlbFByZWZpeCddO1xyXG4gICAgICAgIGNvbnN0IHNlY3VyaXR5TGV2ZWxTdWZmaXggPSB0aGlzLmV4dGVuZEluZm9bJ3NlY3VyaXR5TGV2ZWxTdWZmaXgnXTtcclxuICAgICAgICBoZWFkZXJzLnB1c2goe25hbWU6ICdzZWN1cml0eUxldmVsUHJlZml4JywgdmFsdWU6IGVuY29kZVVSSUNvbXBvbmVudChzZWN1cml0eUxldmVsUHJlZml4KX0pO1xyXG4gICAgICAgIGhlYWRlcnMucHVzaCh7bmFtZTogJ3NlY3VyaXR5TGV2ZWxTdWZmaXgnLCB2YWx1ZTogZW5jb2RlVVJJQ29tcG9uZW50KHNlY3VyaXR5TGV2ZWxTdWZmaXgpfSk7XHJcbiAgICAgICAgaGVhZGVycy5wdXNoKHtuYW1lOiAnc2VjdXJpdHlMZXZlbE5hbWUnLCB2YWx1ZTogZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuc2VjdXJpdHlMZXZlbE5hbWUpfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMudXBsb2FkZXIuc2V0T3B0aW9ucyh7XHJcbiAgICAgIHVybDogZml4ZWRVcmwsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBhdXRvVXBsb2FkOiBmYWxzZSxcclxuICAgICAgaXRlbUFsaWFzOiAndXBsb2FkZWRmaWxlJyxcclxuICAgICAgaGVhZGVyczogaGVhZGVyc1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnVwbG9hZGVyLnVwbG9hZEl0ZW0obGFzdEZpbGVJdGVtKTtcclxuICB9XHJcblxyXG4gIC8vIOWPlua2iOS6i+S7tlxyXG4gIHB1YmxpYyBDYW5jZWwoKSB7XHJcbiAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICB9XHJcblxyXG4gIC8vIOS4iuS8oOWksei0peWQjuaWueazlVxyXG4gIEVycm9yTG9nKGl0ZW06IEZpbGVJdGVtLCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlciwgaGVhZGVyczogUGFyc2VkUmVzcG9uc2VIZWFkZXJzKTogYW55IHtcclxuICAgIGNvbnNvbGUubG9nKCfkuIrkvKDlpLHotKUnKTtcclxuICAgIGNvbnNvbGUubG9nKCfplJnor6/ku6PnoIHvvJonICsgc3RhdHVzKTtcclxuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgIGNvbnNvbGUubG9nKGhlYWRlcnMpO1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdGVtUmVzID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcbiAgICAgIHRoaXMubXNnU2VydmljZS5lcnJvcih0aGlzLnVwbG9hZF9mYWlsICsgdGVtUmVzLm1lc3NhZ2UpO1xyXG4gICAgfSBjYXRjaCB7XHJcbiAgICAgIHRoaXMubXNnU2VydmljZS5lcnJvcih0aGlzLnVwbG9hZF9mYWlsICsgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5DbG9zZSgpO1xyXG4gICAgY29uc3QgbGVuID0gdGhpcy51cGxvYWRlci5xdWV1ZS5sZW5ndGg7XHJcbiAgICBpZiAobGVuID4gMCkge1xyXG4gICAgICB0aGlzLnVwbG9hZGVyLnF1ZXVlLnNwbGljZSgwLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEltcG9ydChpdGVtOiBGaWxlSXRlbSwgcmVzcG9uc2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IFBhcnNlZFJlc3BvbnNlSGVhZGVycyk6IGFueSB7XHJcbiAgICBsZXQgc3VmZml4ID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmNhbkRvd25sb2FkVGVtcGxhdGUoKSAmJiB0aGlzLnZhbHVlRmllbGQgIT09IHRoaXMuY3VycmVudFJ1bGVGaWxlVHlwZSkge1xyXG4gICAgICBzdWZmaXggPSBGaWxlVHlwZVV0aWwuZ2V0RmlsZUV4dGVuc2lvbih0aGlzLnZhbHVlRmllbGQpO1xyXG4gICAgfVxyXG4gICAgLy8gdGhpcy5kYXRhSW1wb3J0U2VydmljZS5EYXRhSWVQcm9ncmVzc1BhcmFtc1snSW1wb3J0UHJvZ3Jlc3NWYWx1ZSddID0gNDU7XHJcbiAgICBzd2l0Y2ggKHRoaXMubWV0aG9kVHlwZSkge1xyXG4gICAgICBjYXNlIE1ldGhvZFR5cGUuQ29tbW9uSW1wb3J0OlxyXG4gICAgICBjYXNlIE1ldGhvZFR5cGUuQ2FyZEZvcm1EYXRhSW1wb3J0OlxyXG4gICAgICAgIHRoaXMuRGF0YUltcG9ydEJ5SWQoaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgc3VmZml4KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBNZXRob2RUeXBlLkltcG9ydFN1YlRhYmxlRGV0YWlsOlxyXG4gICAgICAgIHRoaXMuSW1wb3J0U3ViVGFibGUoaXRlbSwgcmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgc3VmZml4KTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEltcG9ydFN1YlRhYmxlKGl0ZW06IEZpbGVJdGVtLCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlciwgaGVhZGVyczogUGFyc2VkUmVzcG9uc2VIZWFkZXJzLCBzdWZmaXg6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgY29uc3QgdGVtUmVzID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcbiAgICAgIGNvbnN0IGxvYWRpbmdDb25maWcgPSB7XHJcbiAgICAgICAgbWVzc2FnZTogdGhpcy5pMThuUmVzb3VyY2VbJ2ltcG9ydF9sb2FkaW5nJ11cclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbG9hZGluZ1BhcmFtID0ge1xyXG4gICAgICAgIGxvYWRpbmdTZXJ2aWNlOiB0aGlzLmxvYWRpbmdTZXJ2aWNlLFxyXG4gICAgICAgIGxvYWRpbmdDb25maWc6IGxvYWRpbmdDb25maWdcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgY29tbW9uUGFyYW1zID0gbmV3IENvbW1vblBhcmFtcygpO1xyXG4gICAgICBjb21tb25QYXJhbXMubWV0aG9kVHlwZSA9IHRoaXMubWV0aG9kVHlwZTtcclxuICAgICAgY29tbW9uUGFyYW1zLnJ1bGVJZCA9IHRoaXMuY3VycmVudFJ1bGVJZDtcclxuICAgICAgY29tbW9uUGFyYW1zLm9wdGlvbiA9IHRoaXMuaW1wb3J0T3B0aW9uO1xyXG4gICAgICBjb21tb25QYXJhbXMuZmlsZU5hbWUgPSB0ZW1SZXNbJ2ZpbGVOYW1lJ107XHJcbiAgICAgIGNvbW1vblBhcmFtcy5mcmFtZUNvbnRleHQgPSB0aGlzLmZyYW1lQ29udGV4dDtcclxuICAgICAgY29tbW9uUGFyYW1zLnN1ZmZpeCA9IHN1ZmZpeDtcclxuICAgICAgY29tbW9uUGFyYW1zLmxvYWRpbmdQYXJhbSA9IGxvYWRpbmdQYXJhbTtcclxuICAgICAgY29tbW9uUGFyYW1zLmkxOG5SZXNvdXJjZSA9IHRoaXMuaTE4blJlc291cmNlO1xyXG4gICAgICBjb21tb25QYXJhbXMuc2VjdXJpdHlMZXZlbE5hbWUgPSB0aGlzLnNlY3VyaXR5TGV2ZWxOYW1lO1xyXG4gICAgICB0aGlzLmRhdGFJbXBvcnRTZXJ2aWNlLkltcG9ydFN1YlRhYmxlKGNvbW1vblBhcmFtcyk7XHJcbiAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSB0aGlzLmRhdGFJbXBvcnRTZXJ2aWNlLmNvbXBsZXRlLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmNsZWFyQWxsKCk7XHJcbiAgICAgICAgLy8gdGhpcy5EYXRhSWVQcm9ncmVzc0RpYWxvZy5jbG9zZSgpO1xyXG4gICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gJycpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3ModGhpcy5pbXBvcnRfc3VjY2Vzcyk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dCh0cnVlKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgdGhpcy5uZWVkRGVzdHJveS5lbWl0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSAn5a+85YWl6KGo5Y2V5oiQ5YqfJykge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkuc3VjY2Vzcyh0aGlzLmltcG9ydF9mb3JtX3N1Y2Nlc3MpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gJ+mDqOWIhuaVsOaNruWvvOWFpeWujOaIkCcpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3ModGhpcy5pMThuUmVzb3VyY2VbJ3BhcnRkYXRhLWltcG9ydC1zdWNjZXNzJ10pO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gJ+agoemqjOS4reatoicpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LmluZm8odGhpcy5pMThuUmVzb3VyY2VbJ2FmdGVyX3ZhbGlkYXRlX3N1c3BlbmQnXSk7XHJcbiAgICAgICAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBlcnJvcmxldmVsID0gdGhpcy5kYXRhSW1wb3J0U2VydmljZS5lcnJvcmxldmVsO1xyXG4gICAgICAgICAgaWYgKGVycm9ybGV2ZWwgPT09ICdJbmZvJykge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VTaG93KCdpbmZvJyxkYXRhKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JsZXZlbCA9PT0gJ1dhcm5pbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVNob3coJ3dhcm5pbmcnLGRhdGEpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlU2hvdygnZXJyb3InLHRoaXMuaW1wb3J0X2ZhaWwgKyBkYXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICAvLyDkuIrkvKDmiJDlip/lkI7mlrnms5VcclxuICBEYXRhSW1wb3J0QnlJZChpdGVtOiBGaWxlSXRlbSwgcmVzcG9uc2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IFBhcnNlZFJlc3BvbnNlSGVhZGVycywgc3VmZml4OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgY29uc29sZS5sb2coc3RhdHVzKTtcclxuICAgIGNvbnNvbGUubG9nKCfkuIrkvKDlrozmiJDvvIEnKTtcclxuICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAvL+S4iuS8oOaIkOWKn+WQjua4heepuuS4iuS8oOmYn+WIl1xyXG4gICAgICB0aGlzLnVwbG9hZGVyLnF1ZXVlID0gW107XHJcbiAgICAgIGNvbnN0IHRlbVJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICBjb25zb2xlLmxvZygn5LiK5Lyg5oiQ5YqfJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHRlbVJlcyk7XHJcbiAgICAgIGNvbnN0IGxvYWRpbmdDb25maWcgPSB7XHJcbiAgICAgICAgbWVzc2FnZTogdGhpcy5pMThuUmVzb3VyY2VbJ2ltcG9ydF9sb2FkaW5nJ11cclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbG9hZGluZ1BhcmFtID0ge1xyXG4gICAgICAgIGxvYWRpbmdTZXJ2aWNlOiB0aGlzLmxvYWRpbmdTZXJ2aWNlLFxyXG4gICAgICAgIGxvYWRpbmdDb25maWc6IGxvYWRpbmdDb25maWdcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgY29tbW9uUGFyYW1zID0gbmV3IENvbW1vblBhcmFtcygpO1xyXG4gICAgICBjb21tb25QYXJhbXMubWV0aG9kVHlwZSA9IHRoaXMubWV0aG9kVHlwZTtcclxuICAgICAgY29tbW9uUGFyYW1zLnJ1bGVJZCA9IHRoaXMuY3VycmVudFJ1bGVJZDtcclxuICAgICAgY29tbW9uUGFyYW1zLm9wdGlvbiA9IHRoaXMuaW1wb3J0T3B0aW9uO1xyXG4gICAgICBjb21tb25QYXJhbXMuZmlsZU5hbWUgPSB0ZW1SZXNbJ2ZpbGVOYW1lJ107XHJcbiAgICAgIGNvbW1vblBhcmFtcy5yZXBvc2l0b3J5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeTtcclxuICAgICAgY29tbW9uUGFyYW1zLnN1ZmZpeCA9IHN1ZmZpeDtcclxuICAgICAgY29tbW9uUGFyYW1zLmxvYWRpbmdQYXJhbSA9IGxvYWRpbmdQYXJhbTtcclxuICAgICAgY29tbW9uUGFyYW1zLmkxOG5SZXNvdXJjZSA9IHRoaXMuaTE4blJlc291cmNlO1xyXG4gICAgICBjb21tb25QYXJhbXMuc2VjdXJpdHlMZXZlbE5hbWUgPSB0aGlzLnNlY3VyaXR5TGV2ZWxOYW1lO1xyXG4gICAgICB0aGlzLmRhdGFJbXBvcnRTZXJ2aWNlLkltcG9ydEJ5UnVsZUlkKGNvbW1vblBhcmFtcyk7XHJcbiAgICAgIGNvbnN0IHVuc3Vic2NyaWJlciA9IHRoaXMuZGF0YUltcG9ydFNlcnZpY2UuY29tcGxldGUuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuY2xlYXJBbGwoKTtcclxuICAgICAgICAvLyB0aGlzLmRhdGFJbXBvcnRTZXJ2aWNlLkRhdGFJZVByb2dyZXNzUGFyYW1zWydJbXBvcnRQcm9ncmVzc1ZhbHVlJ10gPSAxMDA7XHJcbiAgICAgICAgLy8gdGhpcy5EYXRhSWVQcm9ncmVzc0RpYWxvZy5jbG9zZSgpO1xyXG4gICAgICAgIGlmIChkYXRhID09PSAnJykge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkuc3VjY2Vzcyh0aGlzLmltcG9ydF9zdWNjZXNzKTtcclxuICAgICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG5cclxuICAgICAgICAgIC8v5a+85YWl5pWw5o2u5bqT5ZCO5Yi35paw55WM6Z2i5pWw5o2uXHJcbiAgICAgICAgICBpZiAodGhpcy5pbXBvcnRPcHRpb24uaW1wb3J0ZGJSZWZyZXNoID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3REYXRhU2VyICE9PSBudWxsICYmIHRoaXMuZnJhbWVDb250ZXh0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZmlsdGVyQ29uZGl0aW9uTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGVbJ2ZpbHRlckNvbmRpdGlvbkxpc3QnXTtcclxuICAgICAgICAgICAgICBpZiAoZmlsdGVyQ29uZGl0aW9uTGlzdCAhPT0gdW5kZWZpbmVkICYmIGZpbHRlckNvbmRpdGlvbkxpc3QgIT09IG51bGwgJiYgdHlwZW9mIChmaWx0ZXJDb25kaXRpb25MaXN0KSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdERhdGFTZXIubG9hZChmaWx0ZXJDb25kaXRpb25MaXN0KS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn5a+85YWl5pWw5o2u5bqT5ZCO5bim6L+H5ruk5p2h5Lu26YeN5paw5Yqg6L296KGo5Y2V5pWw5o2uJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCflr7zlhaXmlbDmja7lupPlkI7luKbov4fmu6TmnaHku7bph43mlrDliqDovb3ooajljZXmlbDmja7lvILluLgnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU2VyLmxvYWQoKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn5a+85YWl5pWw5o2u5bqT5ZCO6YeN5paw5Yqg6L296KGo5Y2V5pWw5o2uJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCflr7zlhaXmlbDmja7lupPlkI7ph43mlrDliqDovb3ooajljZXmlbDmja7lvILluLgnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5uZWVkRGVzdHJveS5lbWl0KCk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dCh0cnVlKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gJ+WvvOWFpeihqOWNleaIkOWKnycpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3ModGhpcy5pbXBvcnRfZm9ybV9zdWNjZXNzKTtcclxuICAgICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgdGhpcy5uZWVkRGVzdHJveS5lbWl0KCk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dCh0cnVlKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gJ+mDqOWIhuaVsOaNruWvvOWFpeWujOaIkCcpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3ModGhpcy5pMThuUmVzb3VyY2VbJ3BhcnRkYXRhLWltcG9ydC1zdWNjZXNzJ10pO1xyXG4gICAgICAgICAgdW5zdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KHRydWUpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhID09PSAn5qCh6aqM5Lit5q2iJykge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkuaW5mbyh0aGlzLmkxOG5SZXNvdXJjZVsnYWZ0ZXJfdmFsaWRhdGVfc3VzcGVuZCddKTtcclxuICAgICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgdGhpcy5uZWVkRGVzdHJveS5lbWl0KCk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZXJyb3JsZXZlbCA9IHRoaXMuZGF0YUltcG9ydFNlcnZpY2UuZXJyb3JsZXZlbDtcclxuICAgICAgICAgIGlmIChlcnJvcmxldmVsID09PSAnSW5mbycpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlU2hvdygnaW5mbycsZGF0YSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGVycm9ybGV2ZWwgPT09ICdXYXJuaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VTaG93KCd3YXJuaW5nJyxkYXRhKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVNob3coJ2Vycm9yJyx0aGlzLmltcG9ydF9mYWlsICsgZGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB1bnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgbWVzc2FnZVNob3codHlwZTpzdHJpbmcsbWVzc2FnZTpzdHJpbmcpe1xyXG4gICAgaWYodGhpcy5tc2dTZXJ2aWNlKXtcclxuICAgICAgaWYodHlwZSA9PT0gJ2luZm8nKXtcclxuICAgICAgICB0aGlzLm1zZ1NlcnZpY2UuaW5mbyhtZXNzYWdlKTtcclxuICAgICAgfWVsc2UgaWYodHlwZSA9PT0gJ3dhcm5pbmcnKXtcclxuICAgICAgICB0aGlzLm1zZ1NlcnZpY2Uud2FybmluZyhtZXNzYWdlKTtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9ZWxzZXtcclxuICAgICAgaWYodHlwZSA9PT0gJ2luZm8nKXtcclxuICAgICAgICB0aGlzLm5vdGlmeS5pbmZvKG1lc3NhZ2UpO1xyXG4gICAgICB9ZWxzZSBpZih0eXBlID09PSAnd2FybmluZycpe1xyXG4gICAgICAgIHRoaXMubm90aWZ5Lndhcm5pbmcobWVzc2FnZSk7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxufVxyXG4iXX0=