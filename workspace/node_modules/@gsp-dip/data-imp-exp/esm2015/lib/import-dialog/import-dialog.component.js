/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { FileUploader } from '../service/UploaderService/FileUpload/file-uploader';
import { DataImportService } from '../service/DataIEService/data-import.service';
import { FrameContext } from '@farris/devkit';
import { NotifyService } from '@farris/ui-notify';
import { LoadingService } from '@farris/ui-loading';
import { MethodType } from '../model/DataIEType/MethodType';
import { Subject } from 'rxjs';
import { DataIEUtils, FileTypeUtil, isNullOrEmpty, isNullOrUndefined } from '../service/Utils/DataIEUtils';
import { HttpClient } from '@angular/common/http';
import { BsModalService } from '@farris/ui-modal';
import { RuleSelectComponent } from '../rule-select/rule-select.component';
import { MessagerService } from '@farris/ui-messager';
import { ListDataService } from '@farris/command-services';
import { FileConst } from '../model/utils/FileConst';
import { DataieProgressComponent } from '../bakcomponents/dataie-progress/dataie-progress.component';
import { CommonParams } from "../service/Entity/CommonParams";
export class ImportDialogComponent {
    /**
     * @param {?} dataImportService
     * @param {?} notify
     * @param {?} loadingService
     * @param {?} http
     * @param {?} injector
     * @param {?} modalService
     * @param {?} listDataSer
     * @param {?} msgService
     * @param {?} resolver
     */
    constructor(dataImportService, notify, loadingService, http, injector, modalService, listDataSer, msgService, resolver) {
        this.dataImportService = dataImportService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.http = http;
        this.injector = injector;
        this.modalService = modalService;
        this.listDataSer = listDataSer;
        this.msgService = msgService;
        this.resolver = resolver;
        // 规则ID 该id为表单上配置的规则id
        this.ruleId = '';
        // 过滤条件
        this.importOption = null;
        this.frameContext = null;
        this.subject = null;
        this.showfiletype = true;
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        //当前选择规则的id、名称和文件类型
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.enableTemplate = true;
        this.closeXLSX = false;
        this.enableSecurityLevelSelect = false;
        this.securityLevelName = '';
        this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        this.ImportSecretRemindInfo = '';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.uploader = new FileUploader({
            url: '',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile'
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.valueField = null;
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        this.securityLevelItems = [];
        this.uploader.onSuccessItem = this.Import.bind(this);
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        this.uploader.onAfterAddingFile = this.afterAddFile;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.import_file = res['import_file'];
            this.choose_file = res['choose_file'];
            this.file_type = res['file_type'];
            this.import_placeholder = res['import_placeholder'];
            this.download_template = res['download_template'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.choose_truefile = res['choose_truefile'];
            this.download_template_ok = res['download_template_ok'];
            this.download_template_fail = res['download_template_fail'];
            this.upload_fail = res['upload_fail'];
            this.import_success = res['import_success'];
            this.import_form_success = res['import_form_success'];
            this.import_fail = res['import_fail'];
            this.rule_list = res['rule_list'];
            this.select_xlsx_notify = res['select_xlsx_notify'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let extendInfo = this.recordRule.extendInfo;
        if (!isNullOrUndefined(extendInfo)) {
            this.extendInfo = JSON.parse(extendInfo);
            this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
            this.closeXLSX = this.extendInfo['closeXLSX'];
            if (this.closeXLSX === true) {
                this.fileListItems = [
                    { id: FileConst.xls, label: FileConst.xls },
                    { id: FileConst.xlsm, label: FileConst.xlsm },
                    { id: FileConst.et, label: FileConst.et }
                ];
            }
        }
        /** @type {?} */
        const securityLevels = this.recordRule.securityLevels;
        if (!isNullOrEmpty(securityLevels)) {
            this.enableSecurityLevelSelect = true;
            securityLevels.forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                /** @type {?} */
                const level = {
                    value: e.name,
                    label: e.name
                };
                this.securityLevelItems.push(level);
            }));
            this.securityLevelName = this.securityLevelItems[0].value;
        }
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        if (this.valueField === '') {
            //未在当前可选文件的类型时，不显示选文件类型控件
            this.showfiletype = false;
        }
        this.currentRuleFileType = this.valueField;
        this.controlFileType();
        if (this.importOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    openSelectRule($event) {
        this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            ruleType: 0,
            voId: this.importOption.voId,
            methodType: this.methodType,
            importChildNodeCode: this.importOption.importChildNodeCode,
            closeXlsx: this.closeXLSX
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        (RuleMgrs) => {
            this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                this.notify.info(this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.ruleId = this.ruleId;
            compRef.instance.voId = this.importOption.voId;
            compRef.instance.ruleType = 0;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            const modalConfig = {
                title: this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            RuleMgr => {
                this.currentRuleId = RuleMgr.id;
                this.currentRuleName = RuleMgr.name;
                this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                this.currentRuleFileType = this.valueField;
                this.controlFileType();
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    canDownloadTemplate() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        const canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        t => t === suffix)) < 0) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    selectedFileOnChange(event) {
        /** @type {?} */
        const str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        const index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
            this.uploader.queue = [];
            this.notify.info(this.choose_truefile);
            return;
        }
        // console.log('队列中的文件' + this.uploader.queue[0]);
    }
    // 关闭窗口
    /**
     * @return {?}
     */
    Close() {
        this.needDestroy.emit();
    }
    // 选择文件事件
    /**
     * @return {?}
     */
    SelectFile() {
        this.fileUpload.nativeElement.click();
    }
    /**
     * @return {?}
     */
    fileTypeValueChange() {
        if (this.controlFileType() === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
    }
    /**
     * @return {?}
     */
    controlFileType() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '*';
        }
        return suffix;
    }
    /**
     * @return {?}
     */
    clickSetting() {
        this.notify.info('设置一下');
    }
    // 下载模板
    /**
     * @return {?}
     */
    DownloadTemplate() {
        this.loadingService.show();
        /** @type {?} */
        let suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        this.importOption['securityLevelName'] = this.securityLevelName;
        this.dataImportService.DowmloadTemplate(this.currentRuleId, this.frameContext.repository, this.importOption, suffix);
        /** @type {?} */
        const unsubscriber = this.dataImportService.complete.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.loadingService.clearAll();
            if (data === '') {
                this.notify.success(this.download_template_ok);
                unsubscriber.unsubscribe();
            }
            else {
                this.notify.error(this.download_template_fail + data);
                unsubscriber.unsubscribe();
            }
        }));
    }
    /**
     * @return {?}
     */
    showProgressDialog() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(DataieProgressComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.DataIeProgressParams = this.dataImportService.DataIeProgressParams;
        /** @type {?} */
        const modalConfig = {
            width: 530,
            height: 50,
            title: '',
            showHeader: false,
            showMaxButton: false,
            showMinButton: false,
            showButtons: false,
            showCloseButton: false,
            resizable: false
        };
        return this.modalService.show(compRef, modalConfig);
    }
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    afterAddFile(fileItem) {
    }
    // 开始导入
    /**
     * @return {?}
     */
    Ok() {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        const loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        // this.DataIeProgressDialog = this.showProgressDialog();
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const lastFileItem = this.uploader.queue[len - 1];
        /** @type {?} */
        const maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
        if (lastFileItem.file.size > maxFileSize) {
            this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        let tempUrl = `${preUrl}/import/Upload`;
        /** @type {?} */
        let su = DataIEUtils.getSu(tempUrl);
        if (this.importOption['su'] !== null && this.importOption['su'] !== undefined) {
            su = this.importOption['su'];
        }
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
        /** @type {?} */
        let headers = [{ name: 'su', value: su }];
        if (!isNullOrUndefined(this.extendInfo)) {
            /** @type {?} */
            const enableSecurityLevel = (/** @type {?} */ (this.extendInfo['enableSecurityLevel']));
            if (enableSecurityLevel) {
                headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                /** @type {?} */
                const securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                /** @type {?} */
                const securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
            }
        }
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            headers: headers
        });
        this.uploader.uploadItem(lastFileItem);
    }
    // 取消事件
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit();
    }
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ErrorLog(item, response, status, headers) {
        console.log('上传失败');
        console.log('错误代码：' + status);
        console.log(response);
        console.log(headers);
        this.loadingService.clearAll();
        try {
            /** @type {?} */
            const temRes = JSON.parse(response);
            this.msgService.error(this.upload_fail + temRes.message);
        }
        catch (_a) {
            this.msgService.error(this.upload_fail + response);
        }
        this.Close();
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len > 0) {
            this.uploader.queue.splice(0, 1);
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Import(item, response, status, headers) {
        /** @type {?} */
        let suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 45;
        switch (this.methodType) {
            case MethodType.CommonImport:
            case MethodType.CardFormDataImport:
                this.DataImportById(item, response, status, headers, suffix);
                break;
            case MethodType.ImportSubTableDetail:
                this.ImportSubTable(item, response, status, headers, suffix);
                break;
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    ImportSubTable(item, response, status, headers, suffix) {
        if (status === 200) {
            /** @type {?} */
            const temRes = JSON.parse(response);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.methodType = this.methodType;
            commonParams.ruleId = this.currentRuleId;
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.frameContext = this.frameContext;
            commonParams.suffix = suffix;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            commonParams.securityLevelName = this.securityLevelName;
            this.dataImportService.ImportSubTable(commonParams);
            /** @type {?} */
            const subscriber = this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                // this.DataIeProgressDialog.close();
                subscriber.unsubscribe();
                if (data === '') {
                    this.notify.success(this.import_success);
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '部分数据导入完成') {
                    this.notify.success(this.i18nResource['partdata-import-success']);
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '校验中止') {
                    this.notify.info(this.i18nResource['after_validate_suspend']);
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.dataImportService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.messageShow('info', data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.messageShow('warning', data);
                    }
                    else {
                        this.messageShow('error', this.import_fail + data);
                    }
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
            }));
        }
    }
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    DataImportById(item, response, status, headers, suffix) {
        console.log(status);
        console.log('上传完成！');
        if (status === 200) {
            //上传成功后清空上传队列
            this.uploader.queue = [];
            /** @type {?} */
            const temRes = JSON.parse(response);
            console.log('上传成功');
            console.log(temRes);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.methodType = this.methodType;
            commonParams.ruleId = this.currentRuleId;
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.suffix = suffix;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            commonParams.securityLevelName = this.securityLevelName;
            this.dataImportService.ImportByRuleId(commonParams);
            /** @type {?} */
            const unsubscriber = this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 100;
                // this.DataIeProgressDialog.close();
                if (data === '') {
                    this.notify.success(this.import_success);
                    unsubscriber.unsubscribe();
                    //导入数据库后刷新界面数据
                    if (this.importOption.importdbRefresh === true) {
                        if (this.listDataSer !== null && this.frameContext !== null) {
                            /** @type {?} */
                            const filterConditionList = this.frameContext.uiState['filterConditionList'];
                            if (filterConditionList !== undefined && filterConditionList !== null && typeof (filterConditionList) === 'string') {
                                this.listDataSer.load(filterConditionList).subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    console.log('导入数据库后带过滤条件重新加载表单数据');
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                error => {
                                    console.log('导入数据库后带过滤条件重新加载表单数据异常');
                                }));
                            }
                            else {
                                this.listDataSer.load().subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    console.log('导入数据库后重新加载表单数据');
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                error => {
                                    console.log('导入数据库后重新加载表单数据异常');
                                }));
                            }
                        }
                    }
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '部分数据导入完成') {
                    this.notify.success(this.i18nResource['partdata-import-success']);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '校验中止') {
                    this.notify.info(this.i18nResource['after_validate_suspend']);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.dataImportService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.messageShow('info', data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.messageShow('warning', data);
                    }
                    else {
                        this.messageShow('error', this.import_fail + data);
                    }
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
            }));
        }
    }
    /**
     * @param {?} type
     * @param {?} message
     * @return {?}
     */
    messageShow(type, message) {
        if (this.msgService) {
            if (type === 'info') {
                this.msgService.info(message);
            }
            else if (type === 'warning') {
                this.msgService.warning(message);
            }
            else {
                this.msgService.error(message);
            }
        }
        else {
            if (type === 'info') {
                this.notify.info(message);
            }
            else if (type === 'warning') {
                this.notify.warning(message);
            }
            else {
                this.notify.error(message);
            }
        }
    }
}
ImportDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-import-dialog',
                template: "<!-- <div class=\"container\">\r\n    <div region=\"south\" class=\"south mgleft\">\r\n        <table>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n                <td>\r\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\r\n                </td>\r\n                <td>\r\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\r\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n                    </input-group>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule === false\">\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectfiletype\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\r\n                </td>\r\n                <td>\r\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\r\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_upload\">{{import_file}}</label>\r\n                </td>\r\n                <td>\r\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n                        (change)=\"selectedFileOnChange($event)\" />\r\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div> -->\r\n\r\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\r\n  <div class=\"col-12\" style=\"margin-top: 67px\">\r\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{rule_list}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\r\n                       [enableClear]=\"false\"\r\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n          </input-group>\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{file_type}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\r\n                             [textField]=\"'label'\"\r\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\r\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n        </div>\r\n        <span>&nbsp;</span>\r\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\r\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\r\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\r\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\r\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\r\n\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{import_file}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\r\n                 [accept]=\"acceptFileType\"\r\n                 (change)=\"selectedFileOnChange($event)\"/>\r\n          <div class=\"input-group\">\r\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                   [(ngModel)]=\"fileName\"\r\n                   [placeholder]=\"import_placeholder\">\r\n            <span class=\"input-group-btn\">\r\n                            <button class=\"btn btn-primary\" type=\"button\"\r\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\r\n                        </span>\r\n          </div>\r\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\r\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n    </div>\r\n\r\n\r\n  </div>\r\n</form>\r\n\r\n\r\n<ng-template #selectFooter>\r\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\r\n\r\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>\r\n",
                providers: [NotifyService, DataImportService
                ],
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
            }] }
];
/** @nocollapse */
ImportDialogComponent.ctorParameters = () => [
    { type: DataImportService },
    { type: NotifyService },
    { type: LoadingService },
    { type: HttpClient },
    { type: Injector },
    { type: BsModalService },
    { type: ListDataService },
    { type: MessagerService },
    { type: ComponentFactoryResolver }
];
ImportDialogComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    importOption: [{ type: Input }],
    frameContext: [{ type: Input }],
    methodType: [{ type: Input }],
    subject: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    needDestroy: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ImportDialogComponent.prototype.modalFooter;
    /** @type {?} */
    ImportDialogComponent.prototype.ruleId;
    /** @type {?} */
    ImportDialogComponent.prototype.importOption;
    /** @type {?} */
    ImportDialogComponent.prototype.frameContext;
    /** @type {?} */
    ImportDialogComponent.prototype.methodType;
    /** @type {?} */
    ImportDialogComponent.prototype.subject;
    /** @type {?} */
    ImportDialogComponent.prototype.DataIeProgressDialog;
    /** @type {?} */
    ImportDialogComponent.prototype.showfiletype;
    /** @type {?} */
    ImportDialogComponent.prototype.enableRuntimeCustom;
    /** @type {?} */
    ImportDialogComponent.prototype.recordRule;
    /** @type {?} */
    ImportDialogComponent.prototype.extendInfo;
    /** @type {?} */
    ImportDialogComponent.prototype.currentRuleName;
    /** @type {?} */
    ImportDialogComponent.prototype.currentRuleId;
    /** @type {?} */
    ImportDialogComponent.prototype.currentRuleFileType;
    /** @type {?} */
    ImportDialogComponent.prototype.enableTemplate;
    /** @type {?} */
    ImportDialogComponent.prototype.closeXLSX;
    /** @type {?} */
    ImportDialogComponent.prototype.enableSecurityLevelSelect;
    /** @type {?} */
    ImportDialogComponent.prototype.securityLevelName;
    /** @type {?} */
    ImportDialogComponent.prototype.acceptFileType;
    /** @type {?} */
    ImportDialogComponent.prototype.ImportSecretRemindInfo;
    /** @type {?} */
    ImportDialogComponent.prototype.fileName;
    /** @type {?} */
    ImportDialogComponent.prototype.fileUpload;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.origin;
    /** @type {?} */
    ImportDialogComponent.prototype.uploader;
    /** @type {?} */
    ImportDialogComponent.prototype.needDestroy;
    /** @type {?} */
    ImportDialogComponent.prototype.valueField;
    /** @type {?} */
    ImportDialogComponent.prototype.import_file;
    /** @type {?} */
    ImportDialogComponent.prototype.choose_file;
    /** @type {?} */
    ImportDialogComponent.prototype.import_placeholder;
    /** @type {?} */
    ImportDialogComponent.prototype.file_type;
    /** @type {?} */
    ImportDialogComponent.prototype.download_template;
    /** @type {?} */
    ImportDialogComponent.prototype.ie_cancel;
    /** @type {?} */
    ImportDialogComponent.prototype.ie_ok;
    /** @type {?} */
    ImportDialogComponent.prototype.choose_truefile;
    /** @type {?} */
    ImportDialogComponent.prototype.download_template_ok;
    /** @type {?} */
    ImportDialogComponent.prototype.download_template_fail;
    /** @type {?} */
    ImportDialogComponent.prototype.upload_fail;
    /** @type {?} */
    ImportDialogComponent.prototype.import_success;
    /** @type {?} */
    ImportDialogComponent.prototype.import_form_success;
    /** @type {?} */
    ImportDialogComponent.prototype.import_fail;
    /** @type {?} */
    ImportDialogComponent.prototype.rule_list;
    /** @type {?} */
    ImportDialogComponent.prototype.select_xlsx_notify;
    /** @type {?} */
    ImportDialogComponent.prototype.i18nResource;
    /** @type {?} */
    ImportDialogComponent.prototype.lookupIcon;
    /** @type {?} */
    ImportDialogComponent.prototype.fileListItems;
    /** @type {?} */
    ImportDialogComponent.prototype.securityLevelItems;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.dataImportService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.listDataSer;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    ImportDialogComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,