/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DataIEUtils } from '../service/Utils/DataIEUtils';
export class ElementSelectComponent {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.cols = [];
        this.selectedKeys = [];
        this.newSelectedKeys = [];
        // public isNewExpanded = true;
        this.keys = [];
        this.newKeys = [];
        this.Model = null;
        this.CustomModel = null;
        this.InnerModel = null;
        this.TreeData = null;
        this.NewData = null;
        this.isExpanded = (/**
         * @param {?} dataItem
         * @param {?} index
         * @return {?}
         */
        (dataItem, index) => {
            return this.keys.indexOf(index) > -1;
        });
        this.isNewExpanded = (/**
         * @param {?} dataItem
         * @param {?} index
         * @return {?}
         */
        (dataItem, index) => {
            return this.newKeys.indexOf(index) > -1;
        });
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.data_entity = res['data_entity'];
            this.selected_item = res['selected_item'];
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //暂时屏蔽
        // this.checkRightData();
        this.TreeData = this.OrganizeLeftTreeOriginal();
        this.NewData = this.OrganizeRightTreeOriginal();
    }
    /**
     * @return {?}
     */
    checkRightData() {
        if (this.CustomModel !== null) {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            /** @type {?} */
            const elements = mainObj['Elements'];
            /** @type {?} */
            const customMainObj = this.CustomModel['MainObject'];
            /** @type {?} */
            const customElements = customMainObj['Elements'];
            for (let i = 0; i < customElements.length; i++) {
                /** @type {?} */
                const ele = customElements[i];
                /** @type {?} */
                const idx = elements.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e['ID'] === ele['ID']));
                if (idx < 0) {
                    customElements.splice(i, 1);
                    i--;
                }
            }
        }
    }
    // 组织右侧树，将模型转换为可以展示的Json结构。
    /**
     * @private
     * @return {?}
     */
    OrganizeRightTreeOriginal() {
        /** @type {?} */
        const tree = [];
        if (this.CustomModel !== null) {
            /** @type {?} */
            const mainObj = this.CustomModel['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
        }
        else {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
        }
        return tree;
    }
    // 组织左侧树
    /**
     * @private
     * @return {?}
     */
    OrganizeLeftTreeOriginal() {
        /** @type {?} */
        const tree = [];
        if (this.CustomModel !== null) {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            /** @type {?} */
            const customMainObj = this.CustomModel['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OraganizeMinusObj(mainObj, customMainObj) });
        }
        else {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
        }
        return tree;
    }
    // 组织列，customObj：从数据库中获取的对象，obj：外面传入的对象。
    /**
     * @private
     * @param {?} obj
     * @param {?} customObj
     * @return {?}
     */
    OraganizeMinusObj(obj, customObj) {
        // const items = [];
        // obj['Elements'].forEach(ele => {
        //   const customEle = customObj['Elements'].find(t => t['ID'] === ele['ID']);
        //   if (customEle === null || customEle === undefined) {
        //     if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
        //       const udtItems = this.OrganizeUdtElements(ele['UdtElements'], customEle['UdtElements']);
        //     } else {
        //       items.push({id: ele['ID'], text: ele['Name'], code: ele['Code'], order: ele['Order']});
        //     }
        //   }
        // });
        /** @type {?} */
        const items = this.OrganizeElementsWithUdtMinus(obj['Elements'], customObj['Elements']);
        if (obj['ChildrenDeo'].length > 0) {
            obj['ChildrenDeo'].forEach((/**
             * @param {?} deo
             * @return {?}
             */
            deo => {
                /** @type {?} */
                const customChildDeo = customObj['ChildrenDeo'].find((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t['ID'] === deo['ID']));
                items.push({ id: deo['ID'], code: deo['Code'], text: deo['FileObjectName'], items: this.OraganizeMinusObj(deo, customChildDeo) });
            }));
        }
        return items;
    }
    // 获取左右树udt字段的差
    /**
     * @private
     * @param {?} newUdtEles
     * @param {?} udtEles
     * @return {?}
     */
    OrganizeElementsWithUdtMinus(newUdtEles, udtEles) {
        /** @type {?} */
        const items = [];
        newUdtEles.forEach((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            /** @type {?} */
            const customEle = udtEles.find((/**
             * @param {?} t
             * @return {?}
             */
            t => t['ID'] === ele['ID']));
            if (customEle === null || customEle === undefined) {
                if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                    /** @type {?} */
                    const udtItems = this.OrganizeElementsWithUdt(ele['UdtElements']);
                    if (udtItems.length > 0) {
                        items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                    }
                }
                else {
                    items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                }
            }
            else {
                if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                    /** @type {?} */
                    const udtItems = this.OrganizeElementsWithUdtMinus(ele['UdtElements'], customEle['UdtElements']);
                    if (udtItems.length > 0) {
                        items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                    }
                }
            }
        }));
        return items;
    }
    // 添加子对象Json串
    // private OrganizeChildObjJson(obj): any[] {
    //   const items = [];
    //   if (obj['ChildrenDeo'].length > 0) {
    //     obj['ChildrenDeo'].forEach(deo => items.push({id: deo['ID'], code: deo['Code'], text: deo['Name'],
    //     items: this.OrganizeChildObjJson(deo)}));
    //   }
    //   return items;
    // }
    // 添加对象Json串
    /**
     * @private
     * @param {?} obj
     * @param {?} addEle
     * @return {?}
     */
    OrganizeObjJson(obj, addEle) {
        /** @type {?} */
        let items = [];
        if (addEle) {
            items = this.OrganizeElementsWithUdt(obj['Elements']);
            // obj['Elements'].forEach(ele => items.push({id: ele['ID'], text: ele['Name'], code: ele['Code'], order: ele['Order']}));
        }
        if (obj['ChildrenDeo'].length > 0) {
            obj['ChildrenDeo'].forEach((/**
             * @param {?} deo
             * @return {?}
             */
            deo => items.push({
                id: deo['ID'], code: deo['Code'], text: deo['FileObjectName'],
                items: this.OrganizeObjJson(deo, addEle)
            })));
        }
        return items;
    }
    /**
     * @private
     * @param {?} eles
     * @return {?}
     */
    OrganizeElementsWithUdt(eles) {
        /** @type {?} */
        const items = [];
        eles.forEach((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            if (ele['UdtElements'].length > 0) {
                /** @type {?} */
                const udtItems = this.OrganizeElementsWithUdt(ele['UdtElements']);
                if (udtItems.length > 0) {
                    items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                }
                else {
                    items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                }
            }
            else {
                items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
            }
        }));
        return items;
    }
    // 右移
    /**
     * @return {?}
     */
    RightMove() {
        if (this.selectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.selectedKeys[0]);
        this.MoveData(indexes, this.TreeData, '', this.NewData);
    }
    // 左移
    /**
     * @return {?}
     */
    LeftMove() {
        if (this.newSelectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.newSelectedKeys[0]);
        this.MoveData(indexes, this.NewData, '', this.TreeData);
    }
    /**
     * @private
     * @param {?} sKeys
     * @return {?}
     */
    GetIndexes(sKeys) {
        /** @type {?} */
        const arr = sKeys.split('_');
        /** @type {?} */
        const indexes = [];
        arr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            indexes.push(Number(element));
        }));
        return arr;
    }
    /**
     * @private
     * @param {?} indexes
     * @param {?} data
     * @param {?} objId
     * @param {?} newData
     * @return {?}
     */
    MoveData(indexes, data, objId, newData) {
        /** @type {?} */
        const index = indexes.shift();
        if (indexes.length > 0) {
            this.MoveData(indexes, data[index].items, data[index].id, newData);
        }
        else {
            if (data[index].order !== undefined) {
                /** @type {?} */
                const result = this.AddData(objId, newData, data[index]);
                if (!result) {
                    return;
                }
                data.splice(index, 1);
            }
        }
    }
    /**
     * @private
     * @param {?} mainId
     * @param {?} newData
     * @param {?} data
     * @return {?}
     */
    AddData(mainId, newData, data) {
        // 先找到所属对象
        /** @type {?} */
        const obj = this.FindObjAndIndex(mainId, newData, '');
        if (obj === null) {
            return false;
        }
        // 找到要插入的位置
        /** @type {?} */
        const index = this.FindColIndex(obj.dataItem.items, data.order);
        obj.dataItem.items.splice(index, 0, data);
        this.handleNewExpand(obj);
        return true;
    }
    /**
     * @private
     * @param {?} mainId
     * @param {?} data
     * @param {?} parentIndex
     * @return {?}
     */
    FindObjAndIndex(mainId, data, parentIndex) {
        /** @type {?} */
        let result = null;
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < data.length; i++) {
            if (data[i].id === mainId) {
                if (parentIndex !== '') {
                    result = { index: parentIndex + '_' + i.toString(), dataItem: data[i] };
                }
                else {
                    result = { index: i.toString(), dataItem: data[i] };
                }
            }
            else if (data[i].items !== undefined && data[i].items.length > 0) {
                result = this.FindObjAndIndex(mainId, data[i].items, i.toString());
            }
            if (result == null) {
                continue;
            }
            else {
                return result;
            }
        }
        return result;
    }
    /**
     * @private
     * @param {?} items
     * @param {?} order
     * @return {?}
     */
    FindColIndex(items, order) {
        /** @type {?} */
        let index = -1;
        if (items.length === 0) {
            return 0;
        }
        for (let i = 0; i < items.length; i++) {
            if (items[i].order < order) {
                index = i;
            }
            else {
                break;
            }
        }
        return index + 1;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleCollapse(node) {
        this.keys = this.keys.filter((/**
         * @param {?} k
         * @return {?}
         */
        k => k !== node.index));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleExpand(node) {
        console.log(node);
        this.keys = this.keys.concat(node.index);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleNewCollapse(node) {
        this.newKeys = this.newKeys.filter((/**
         * @param {?} k
         * @return {?}
         */
        k => k !== node.index));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleNewExpand(node) {
        console.log(node);
        this.newKeys = this.newKeys.concat(node.index);
    }
    /**
     * @return {?}
     */
    RightMoveAll() {
        // this.ClearTree(this.TreeData);
        // this.FillTree(this.NewData);
        this.TreeData = [];
        /** @type {?} */
        const mainObj = this.Model['MainObject'];
        this.TreeData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
        // this.FillTree(this.TreeData);
        this.NewData = [];
        this.NewData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
    }
    /**
     * @param {?} t
     * @return {?}
     */
    FillTree(t) {
        t = [];
        /** @type {?} */
        const mainObj = this.Model['MainObject'];
        t.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
    }
    /**
     * @param {?} t
     * @return {?}
     */
    ClearTree(t) {
        // t = [];
        // const mainObj = this.Model['MainObject'];
        // t.push({id: mainObj['ID'], code: mainObj['Code'], text: mainObj['Name'], items: this.OrganizeObjJson(mainObj, false)});
        t = [];
    }
    /**
     * @return {?}
     */
    LeftMoveAll() {
        // this.ClearTree(this.NewData);
        this.NewData = [];
        /** @type {?} */
        const mainObj = this.Model['MainObject'];
        this.NewData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
        // this.FillTree(this.TreeData);
        this.TreeData = [];
        this.TreeData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
    }
    /**
     * @return {?}
     */
    MoveUp() {
        if (this.newSelectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.newSelectedKeys[0]);
        /** @type {?} */
        const lastIndex = indexes.pop();
        /** @type {?} */
        const items = this.GetItems(indexes, this.NewData);
        if (items[lastIndex].order === undefined || items[lastIndex].order === 0) {
            return;
        }
        /** @type {?} */
        const temp = items[lastIndex].order;
        items[lastIndex].order = items[lastIndex - 1].order;
        items[lastIndex - 1].order = temp;
        items.splice(lastIndex - 1, 0, items[lastIndex]);
        items.splice(Number(lastIndex) + 1, 1);
        /** @type {?} */
        const parentIndex = this.newSelectedKeys[0];
        this.newSelectedKeys[0] = parentIndex.substring(0, parentIndex.lastIndexOf('_') + 1) + (lastIndex - 1);
    }
    /**
     * @private
     * @param {?} indexes
     * @param {?} data
     * @return {?}
     */
    GetItems(indexes, data) {
        if (indexes.length === 0) {
            return data;
        }
        /** @type {?} */
        const index = indexes.shift();
        return this.GetItems(indexes, data[index].items);
    }
    /**
     * @return {?}
     */
    MoveDown() {
        if (this.newSelectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.newSelectedKeys[0]);
        /** @type {?} */
        const lastIndex = indexes.pop();
        /** @type {?} */
        const items = this.GetItems(indexes, this.NewData);
        if (items.length === lastIndex || items[Number(lastIndex) + 1] === undefined || items[Number(lastIndex) + 1].order === undefined
            || items[lastIndex].order === undefined) {
            return;
        }
        /** @type {?} */
        const temp = items[lastIndex].order;
        items[lastIndex].order = items[Number(lastIndex) + 1].order;
        items[Number(lastIndex) + 1].order = temp;
        items.splice(Number(lastIndex) + 2, 0, items[lastIndex]);
        items.splice(lastIndex, 1);
        /** @type {?} */
        const parentIndex = this.newSelectedKeys[0];
        this.newSelectedKeys[0] = parentIndex.substring(0, parentIndex.lastIndexOf('_') + 1) + (Number(lastIndex) + 1);
    }
    /**
     * @return {?}
     */
    Save() {
        // 传入的模型的主对象
        if (this.InnerModel == null) {
            this.InnerModel = this.Model;
        }
        /** @type {?} */
        const mainObj = this.InnerModel['MainObject'];
        /** @type {?} */
        const newMainObj = this.NewData[0];
        /** @type {?} */
        const preMainObj = this.Model['MainObject'];
        mainObj['Elements'] = this.OrganizeElements(preMainObj['Elements'], newMainObj);
        this.OrganizeChildrenDeo(mainObj, newMainObj, preMainObj);
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} newObj
     * @param {?} preMainObj
     * @return {?}
     */
    OrganizeChildrenDeo(obj, newObj, preMainObj) {
        if (obj['ChildrenDeo'] !== undefined && obj['ChildrenDeo'].length > 0) {
            /** @type {?} */
            const newChildrenDeo = [];
            obj['ChildrenDeo'].forEach((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                /** @type {?} */
                const childDeo = newObj['items'].find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item['id'] === t['ID']));
                /** @type {?} */
                const preChildObj = preMainObj['ChildrenDeo'].find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item['ID'] === t['ID']));
                if (childDeo !== null && childDeo !== undefined) {
                    t['Elements'] = this.OrganizeElements(preChildObj['Elements'], childDeo);
                    if (t['Elements'] !== undefined && t['Elements'] !== null) {
                        newChildrenDeo.push(t);
                    }
                }
                this.OrganizeChildrenDeo(t, childDeo, preChildObj);
            }));
            obj['ChildrenDeo'] = newChildrenDeo;
        }
    }
    // 保存时组织列, obj: 外部传入的列，newObj: 编辑后新的列
    /**
     * @private
     * @param {?} obj
     * @param {?} newObj
     * @return {?}
     */
    OrganizeElements(obj, newObj) {
        /** @type {?} */
        const newEles = newObj['items'];
        /** @type {?} */
        const eles = [];
        newEles.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const ele = obj.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e['ID'] === t['id']));
            if (ele !== undefined && ele !== null) {
                eles.push(ele);
            }
        }));
        return eles;
    }
}
ElementSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-element-select',
                template: "<div *ngIf=\"Model\" class=\"row inner\">\r\n  <div class=\"col-lg-5 col-md-5\">\r\n    <div>\r\n      <div>\r\n        {{data_entity}}\r\n      </div>\r\n      \r\n      <div class=\"hasborder\" style=\"height:330px;overflow-y:auto\">\r\n        <kendo-treeview\r\n          [nodes]=\"TreeData\"\r\n          textField=\"text\"\r\n          kendoTreeViewExpandable\r\n          kendoTreeViewSelectable\r\n          kendoTreeViewHierarchyBinding\r\n          childrenField=\"items\"\r\n          [(selectedKeys)]=\"selectedKeys\"\r\n          [isExpanded]=\"isExpanded\"\r\n          (collapse)=\"handleCollapse($event)\"\r\n          (expand)=\"handleExpand($event)\"\r\n        >\r\n        \r\n        </kendo-treeview>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"col-lg-2 col-md-2 btn-group-vertical\" role=\"group\" aria-label=\"...\">\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"RightMove()\">></button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"LeftMove()\"><</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"RightMoveAll()\">>></button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"LeftMoveAll()\"><<</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"MoveUp()\">^</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"MoveDown()\">v</button>\r\n  </div>\r\n  <div class=\"col-lg-5 col-md-5\">\r\n    <div>\r\n      <div>\r\n        {{selected_item}}\r\n      </div>\r\n      <div class=\"hasborder\" style=\"height:330px;overflow-y:auto\">\r\n        <kendo-treeview\r\n          [nodes]=\"NewData\"\r\n          textField=\"text\"\r\n          kendoTreeViewExpandable\r\n          kendoTreeViewSelectable\r\n          kendoTreeViewHierarchyBinding\r\n          childrenField=\"items\"\r\n          [(selectedKeys)]=\"newSelectedKeys\"\r\n          [isExpanded]=\"isNewExpanded\"\r\n          (collapse)=\"handleNewCollapse($event)\"\r\n          (expand)=\"handleNewExpand($event)\"\r\n        >\r\n          <ng-template kendoTreeViewNodeTemplate let-dataItem>\r\n            {{dataItem.text}}\r\n            <span></span>\r\n          </ng-template>\r\n        </kendo-treeview>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- <div *ngIf=\"Model\" class=\"row inner\">\r\n\r\n  <multi-select [dataSource]=\"leftTreeData\" [idField]=\"'name'\" [valueField]=\"'type'\" [textField]=\"'name'\" [displayType]=\"'Tree'\"\r\n    [(selectedId)]=\"treeSelectedId\">\r\n    <ng-template farrisTemplate=\"text\" let-data>\r\n      {{ data['name'] }} [ {{ data['type'] }}]\r\n    </ng-template>\r\n  </multi-select>\r\n</div> -->",
                providers: [],
                styles: ["kendo-grid-column{line-height:30px}.inner{margin:5px}.btn{width:80px;margin-bottom:5px}.hasborder{border:.5px solid #a9a9a9;height:330px}"]
            }] }
];
/** @nocollapse */
ElementSelectComponent.ctorParameters = () => [
    { type: HttpClient }
];
ElementSelectComponent.propDecorators = {
    Model: [{ type: Input }],
    CustomModel: [{ type: Input }],
    InnerModel: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ElementSelectComponent.prototype.cols;
    /** @type {?} */
    ElementSelectComponent.prototype.selectedKeys;
    /** @type {?} */
    ElementSelectComponent.prototype.newSelectedKeys;
    /** @type {?} */
    ElementSelectComponent.prototype.keys;
    /** @type {?} */
    ElementSelectComponent.prototype.newKeys;
    /** @type {?} */
    ElementSelectComponent.prototype.Model;
    /** @type {?} */
    ElementSelectComponent.prototype.CustomModel;
    /** @type {?} */
    ElementSelectComponent.prototype.InnerModel;
    /** @type {?} */
    ElementSelectComponent.prototype.TreeData;
    /** @type {?} */
    ElementSelectComponent.prototype.NewData;
    /** @type {?} */
    ElementSelectComponent.prototype.data_entity;
    /** @type {?} */
    ElementSelectComponent.prototype.selected_item;
    /** @type {?} */
    ElementSelectComponent.prototype.isExpanded;
    /** @type {?} */
    ElementSelectComponent.prototype.isNewExpanded;
    /**
     * @type {?}
     * @private
     */
    ElementSelectComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,