/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { MethodType } from "../model/DataIEType/MethodType";
import { FrameContext } from "@farris/devkit";
import { LoadingService } from "@farris/ui-loading";
import { FileConst } from "../model/utils/FileConst";
import { DataExportService } from "../service/DataIEService/data-export.service";
import { NotifyService } from "@farris/ui-notify";
import { HttpClient } from "@angular/common/http";
import { BsModalService } from "@farris/ui-modal";
import { DataIEUtils, FileTypeUtil } from "../service/Utils/DataIEUtils";
import { RuleSelectComponent } from "../rule-select/rule-select.component";
export class ExportCustomSelectHandcraftComponent {
    /**
     * @param {?} dataExportService
     * @param {?} notify
     * @param {?} http
     * @param {?} loadingService
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     */
    constructor(dataExportService, notify, http, loadingService, injector, modalService, resolver) {
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.ruleId = '';
        this.frameContext = null;
        this.subject = null;
        this.exportOption = null;
        this.needDestroy = new EventEmitter();
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.loadingComp = null;
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.export_success = res['export_success'];
            this.export_fail = res['export_fail'];
            this.file_type = res['file_type'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.rule_list = res['rule_list'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        this.currentRuleFileType = this.valueField;
        if (this.exportOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    openSelectRule($event) {
        this.loadingComp = this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            ruleType: 1,
            voId: this.exportOption.voId,
            methodType: this.methodType,
            exportChildNodeCode: this.exportOption.exportChildNodeCode
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        (RuleMgrs) => {
            this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                this.notify.info(this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.ruleId = this.ruleId;
            compRef.instance.voId = this.exportOption.voId;
            compRef.instance.ruleType = 1;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            const modalConfig = {
                title: this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            RuleMgr => {
                this.currentRuleId = RuleMgr.id;
                this.currentRuleName = RuleMgr.name;
                this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                this.currentRuleFileType = this.valueField;
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    Ok() {
        /** @type {?} */
        let suffix = null;
        if (this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        switch (this.methodType) {
            case MethodType.CommonExport:
                this.dataExportService.ExportById4HandCraft(this.currentRuleId, this.exportOption, suffix);
                this.exportComplete();
                break;
            case MethodType.ExportCurrentTableData:
                this.notify.warning('不支持导出当前页');
                this.exportComplete();
                break;
            case MethodType.ExportCurrentChildData:
                this.notify.warning('不支持导出子表数据');
                this.exportComplete();
                break;
        }
    }
    /**
     * @return {?}
     */
    exportComplete() {
        /** @type {?} */
        const exportUnscribe = this.dataExportService.export.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data === '') {
                this.notify.success(this.export_success);
                exportUnscribe.unsubscribe();
                /** @type {?} */
                const res = {
                    type: 'success',
                    data: null,
                    other: null
                };
                this.subject.next(res);
                this.subject.complete();
            }
            else {
                /** @type {?} */
                const errorlevel = this.dataExportService.errorlevel;
                if (errorlevel === 'Info') {
                    this.notify.info(data);
                }
                else if (errorlevel === 'Warning') {
                    this.notify.warning(data);
                }
                else {
                    this.notify.error(this.export_fail + data);
                }
                /** @type {?} */
                const res = {
                    type: 'fail',
                    data: null,
                    other: data
                };
                this.subject.next(res);
                this.subject.complete();
            }
            exportUnscribe.unsubscribe();
            this.needDestroy.emit();
        }));
    }
    /**
     * @return {?}
     */
    canSelectFileType() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        const canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        t => t === suffix)) < 0) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    close() {
        this.needDestroy.emit();
    }
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit(true);
    }
}
ExportCustomSelectHandcraftComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-export-custom-select-handcraft',
                template: "<!-- <div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n  <div class=\"col-12\" style=\"margin-top: 72px\">\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{rule_list}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n          </input-group>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{file_type}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list [readonly]=\"canSelectFileType() === false\" id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\"\n                             [idField]=\"'id'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"fileListItems\"></farris-combo-list>\n        </div>\n        <span>&nbsp;&nbsp;</span>\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\" class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n        <span *ngIf=\"enableRuntimeCustom === false\" class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n        <span  class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n      </div>\n    </div>\n\n\n\n  </div>\n</form>\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>\n",
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longlen{width:400px}"]
            }] }
];
/** @nocollapse */
ExportCustomSelectHandcraftComponent.ctorParameters = () => [
    { type: DataExportService },
    { type: NotifyService },
    { type: HttpClient },
    { type: LoadingService },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];
ExportCustomSelectHandcraftComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    methodType: [{ type: Input }],
    frameContext: [{ type: Input }],
    exportOption: [{ type: Input }],
    needDestroy: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.modalFooter;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.ruleId;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.methodType;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.frameContext;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.subject;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.exportOption;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.needDestroy;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.valueField;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.enableRuntimeCustom;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.recordRule;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.currentRuleName;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.currentRuleId;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.currentRuleFileType;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.lookupIcon;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.loadingComp;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.fileListItems;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.file_type;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.export_success;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.export_fail;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.ie_cancel;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.ie_ok;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.rule_list;
    /** @type {?} */
    ExportCustomSelectHandcraftComponent.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.dataExportService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ExportCustomSelectHandcraftComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,