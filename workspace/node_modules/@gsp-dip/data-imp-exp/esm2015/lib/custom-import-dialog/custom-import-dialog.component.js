/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { LoadingService } from '@farris/ui-loading';
import { FileUploader } from '../service/UploaderService/FileUpload/file-uploader';
import { Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { CustomDataIEService } from '../service/DataIEService/custom-data-ie.service';
import { ElementSelectComponent } from '../element-select/element-select.component';
import { DataImportService } from '../service/DataIEService/data-import.service';
import { DataIEUtils } from '../service/Utils/DataIEUtils';
import { HttpClient } from '@angular/common/http';
import { CommonParams } from "../service/Entity/CommonParams";
export class CustomImportDialogComponent {
    /**
     * @param {?} customDataIEService
     * @param {?} notify
     * @param {?} loadingService
     * @param {?} importService
     * @param {?} http
     */
    constructor(customDataIEService, notify, loadingService, importService, http) {
        this.customDataIEService = customDataIEService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.importService = importService;
        this.http = http;
        // 规则ID
        this.ruleId = '';
        this.i18nId = '';
        // 过滤条件
        this.importOption = null;
        this.frameContext = null;
        // @Input()
        // methodType: MethodType;
        this.subject = null;
        this.acceptFileType = '.xls';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.valueField = 'Office Excel97-2003(*.xls)';
        this.uploader = new FileUploader({
            url: this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            allowedFileType: ['xls', 'xml', 'pdf', 'wps', 'doc']
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.Model = null;
        this.InnerModel = null;
        this.components = null;
        this.CustomModel = null;
        this.IsImportForm = false;
        // public fileListItems = [
        //     {id:'Office Excel97-2003(*.xls)',label:'Office Excel97-2003(*.xls)'},
        //     {id:'Office Excel(*.xlsx)',label:'Office Excel(*.xlsx)'},
        //     {id:'Office Excel Macro(*.xlsm)',label:'Office Excel Macro(*.xlsm)'},
        //     {id:'WPS Table(*.et)',label:'WPS Table(*.et)'}
        //     // 'WPS Table(Template File)(*.ett)'
        // ];
        this.fileListItems = [
            'Office Excel97-2003(*.xls)',
            'Office Excel(*.xlsx)',
            'Office Excel Macro(*.xlsm)',
            'WPS Table(*.et)'
            // 'WPS Table(Template File)(*.ett)'
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.import_file = res['import_file'];
            this.choose_file = res['choose_file'];
            this.file_type = res['file_type'];
            this.import_placeholder = res['import_placeholder'];
            this.download_template = res['download_template'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.choose_truefile = res['choose_truefile'];
            this.download_template_ok = res['download_template_ok'];
            this.download_template_fail = res['download_template_fail'];
            this.upload_fail = res['upload_fail'];
            this.import_success = res['import_success'];
            this.import_form_success = res['import_form_success'];
            this.import_fail = res['import_fail'];
            this.upload_filetype_nomatch = res['upload_filetype_nomatch'];
            this.save_customrule_fail = res['save_customrule_fail'];
            this.customexport_no_column = res['customexport_no_column'];
            this.select_xlsx_notify = res['select_xlsx_notify'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 上传成功后执行的事件
        this.uploader.onSuccessItem = this.Import.bind(this);
        // 上传失败后执行的事件
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        // 添加文件后执行的事件
        this.uploader.onAfterAddingFile = this.afterAddFile;
        // 上传文件前执行的事件
        this.uploader.onBeforeUploadItem = this.SaveCustomImportRule;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectedFileOnChange(event) {
        /** @type {?} */
        const str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        const index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        // console.log('队列中的文件' + this.uploader.queue[0]);
    }
    // 关闭窗口
    /**
     * @return {?}
     */
    Close() {
        this.needDestroy.emit();
    }
    // 选择文件事件
    /**
     * @return {?}
     */
    SelectFile() {
        this.fileUpload.nativeElement.click();
    }
    /**
     * @return {?}
     */
    fileTypeValueChange() {
        /** @type {?} */
        const suffix = this.getFileExtension();
        if (suffix === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        }
    }
    //下载模板
    /**
     * @return {?}
     */
    DownloadTemplate() {
        //const temRes = JSON.parse(response);
        /** @type {?} */
        let suffix = '.xls';
        suffix = this.getFileExtension();
        if (this.InnerModel !== null) {
            this.eleSelectComp.Save();
            /** @type {?} */
            const elements = this.InnerModel.MainObject.Elements;
            /** @type {?} */
            const mainObjName = this.InnerModel.MainObject.FileObjectName;
            if (elements == null || elements === undefined || elements.length === 0) {
                this.notify.info(mainObjName + ' ' + this.customexport_no_column);
                return;
            }
            this.customDataIEService.SaveCustomImportRule(this.InnerModel, this.components, this.frameContext, suffix, false, this.i18nId, this.importOption.dimension).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data['success'] === true) {
                    this.customDataIEService.DowmloadTemplate(this.Model, this.frameContext, this.importOption);
                    /** @type {?} */
                    const unsubscriber = this.customDataIEService.complete.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data === '') {
                            this.notify.success(this.download_template_ok);
                            unsubscriber.unsubscribe();
                        }
                        else {
                            this.notify.error(this.download_template_fail + data);
                            unsubscriber.unsubscribe();
                        }
                    }));
                }
                else {
                    this.notify.error(this.save_customrule_fail + data['message']);
                }
            }));
        }
    }
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    afterAddFile(fileItem) {
    }
    // 开始导入
    /**
     * @return {?}
     */
    Ok() {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        const loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const lastFileItem = this.uploader.queue[len - 1];
        // this.uploader.uploadAll();
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        let tempUrl = `${preUrl}/import/Upload`;
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            allowedFileType: ['xls', 'xml', 'pdf', 'wps', 'doc'],
            headers: [{ name: 'su', value: su }]
        });
        if (this.fileName.split(".").length === 2) {
            if (this.getFileExtension() !== ("." + this.fileName.split(".")[1])) {
                this.notify.info(this.upload_filetype_nomatch);
                this.loadingService.clearAll();
                return;
            }
        }
        this.uploader.uploadItem(lastFileItem);
    }
    // 取消事件
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit();
    }
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ErrorLog(item, response, status, headers) {
        console.log('上传失败');
        console.log('错误代码：' + status);
        console.log(response);
        console.log(headers);
        if (response !== ' ') {
            /** @type {?} */
            const temRes = JSON.parse(response);
            this.notify.info(this.upload_fail + temRes);
            console.log('失败原因：' + temRes);
        }
    }
    /**
     * @return {?}
     */
    SaveCustomImportRule() {
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Import(item, response, status, headers) {
        /** @type {?} */
        const temRes = JSON.parse(response);
        /** @type {?} */
        let suffix = '.xls';
        suffix = this.getFileExtension();
        if (this.InnerModel !== null) {
            /** @type {?} */
            let isForm = false;
            if (this.importOption !== null && this.importOption['IsImportForm'] !== null && this.importOption['IsImportForm'] !== undefined) {
                if (this.importOption['IsImportForm'] === true) {
                    isForm = true;
                }
            }
            this.eleSelectComp.Save();
            this.customDataIEService.SaveCustomImportRule(this.InnerModel, this.components, this.frameContext, suffix, isForm, this.i18nId, this.importOption.dimension).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data['success'] === true) {
                    if (data['isImportSub'] == true) {
                        this.ImportSubTableByRule(item, response, status, headers);
                    }
                    else {
                        this.ImportByRule(item, response, status, headers);
                    }
                }
                else {
                    this.notify.error(this.save_customrule_fail + data['message']);
                    this.loadingService.clearAll();
                }
            }));
        }
        else {
            console.log('数据交换模型参数值为空');
            this.loadingService.clearAll();
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportByRule(item, response, status, headers) {
        console.log(status);
        console.log('上传完成！');
        if (status == 200) {
            /** @type {?} */
            const temRes = JSON.parse(response);
            console.log('上传成功');
            console.log(temRes);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.keys = ['DataImport', this.Model['MainObject']['Source']['SourceMetadataID'], this.importOption.dimension];
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            this.customDataIEService.ImportByRule(commonParams);
            /** @type {?} */
            const unsubscriber = this.importService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                if (data === '') {
                    this.notify.success(this.import_success);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.importService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.import_fail + data);
                    }
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
            }));
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportSubTableByRule(item, response, status, headers) {
        if (status === 200) {
            /** @type {?} */
            const temRes = JSON.parse(response);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.keys = ['DataImport', this.Model['MainObject']['Source']['SourceMetadataID'], this.importOption.dimension];
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.frameContext = this.frameContext;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            /** @type {?} */
            const flag = this.customDataIEService.ImportSubTableByRule(commonParams);
            if (flag === false) {
                this.loadingService.clearAll();
            }
            /** @type {?} */
            const unsubscriber = this.importService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                if (data === '') {
                    this.notify.success(this.import_success);
                    unsubscriber.unsubscribe();
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    unsubscriber.unsubscribe();
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.importService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.import_fail + data);
                    }
                    unsubscriber.unsubscribe();
                    this.subject.next(false);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                unsubscriber.unsubscribe();
            }));
        }
    }
    /**
     * @return {?}
     */
    getFileExtension() {
        /** @type {?} */
        let suffix = null;
        switch (this.valueField) {
            case 'Office Excel97-2003(*.xls)':
                suffix = '.xls';
                break;
            case 'Office Excel(*.xlsx)':
                suffix = '.xlsx';
                break;
            case 'Office Excel Macro(*.xlsm)':
                suffix = '.xlsm';
                break;
            case 'WPS Table(*.et)':
                suffix = '.et';
                break;
            case 'WPS Table(Template File)(*.ett)':
                suffix = '.ett';
                break;
            default:
                break;
        }
        return suffix;
    }
}
CustomImportDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-custom-import-dialog',
                template: "<div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\r\n  <div region=\"north\" class=\"north\">\r\n    <div style=\"margin-top: 12px;margin-left: 20px\">\r\n      <table>\r\n        <tr>\r\n          <td class=\"mkwidth\">\r\n            <label for=\"f_upload\">{{import_file}}</label>\r\n          </td>\r\n          <td>\r\n            <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n              (change)=\"selectedFileOnChange($event)\" />\r\n            <div class=\"input-group\" style=\"margin-left: 10px; width: 800px\">\r\n              <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n              <span class=\"input-group-btn\">\r\n                <button class=\"btn btn-primary\" type=\"button\" (click)=\"SelectFile()\">{{choose_file}}</button>\r\n              </span>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div region=\"center\" class=\"center flex-fill\">\r\n    <div>\r\n      <app-element-select [Model]=\"Model\" [InnerModel]=\"InnerModel\" [CustomModel]=\"CustomModel\"></app-element-select>\r\n    </div>\r\n  </div>\r\n  <div region=\"south\" class=\"south mgleft\">\r\n    <label>{{file_type}}</label>\r\n    <kendo-dropdownlist class=\"longleng\" id=\"fileType\" [data]=\"fileListItems\" [value]=\"'Office Excel97-2003(*.xls)'\"\r\n      [(ngModel)]=\"valueField\" (valueChange)=\"fileTypeValueChange()\">\r\n    </kendo-dropdownlist>\r\n  </div>\r\n  <!-- <farris-combo-list id=\"fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n    [data]=\"fileListItems\"></farris-combo-list> -->\r\n\r\n</div>\r\n<ng-template #selectFooter>\r\n  <!-- <div class=\"btns\">\r\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n    </div> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>",
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}*{padding:0;margin:0}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longleng{width:820px}"]
            }] }
];
/** @nocollapse */
CustomImportDialogComponent.ctorParameters = () => [
    { type: CustomDataIEService },
    { type: NotifyService },
    { type: LoadingService },
    { type: DataImportService },
    { type: HttpClient }
];
CustomImportDialogComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    i18nId: [{ type: Input }],
    importOption: [{ type: Input }],
    frameContext: [{ type: Input }],
    subject: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    eleSelectComp: [{ type: ViewChild, args: [ElementSelectComponent,] }],
    needDestroy: [{ type: Output }],
    Model: [{ type: Input }],
    InnerModel: [{ type: Input }],
    components: [{ type: Input }],
    CustomModel: [{ type: Input }],
    IsImportForm: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CustomImportDialogComponent.prototype.modalFooter;
    /** @type {?} */
    CustomImportDialogComponent.prototype.ruleId;
    /** @type {?} */
    CustomImportDialogComponent.prototype.i18nId;
    /** @type {?} */
    CustomImportDialogComponent.prototype.importOption;
    /** @type {?} */
    CustomImportDialogComponent.prototype.frameContext;
    /** @type {?} */
    CustomImportDialogComponent.prototype.subject;
    /** @type {?} */
    CustomImportDialogComponent.prototype.acceptFileType;
    /** @type {?} */
    CustomImportDialogComponent.prototype.fileName;
    /** @type {?} */
    CustomImportDialogComponent.prototype.fileUpload;
    /**
     * @type {?}
     * @private
     */
    CustomImportDialogComponent.prototype.origin;
    /** @type {?} */
    CustomImportDialogComponent.prototype.eleSelectComp;
    /** @type {?} */
    CustomImportDialogComponent.prototype.valueField;
    /** @type {?} */
    CustomImportDialogComponent.prototype.uploader;
    /** @type {?} */
    CustomImportDialogComponent.prototype.needDestroy;
    /** @type {?} */
    CustomImportDialogComponent.prototype.Model;
    /** @type {?} */
    CustomImportDialogComponent.prototype.InnerModel;
    /** @type {?} */
    CustomImportDialogComponent.prototype.components;
    /** @type {?} */
    CustomImportDialogComponent.prototype.CustomModel;
    /** @type {?} */
    CustomImportDialogComponent.prototype.IsImportForm;
    /** @type {?} */
    CustomImportDialogComponent.prototype.fileListItems;
    /** @type {?} */
    CustomImportDialogComponent.prototype.file_type;
    /** @type {?} */
    CustomImportDialogComponent.prototype.download_template;
    /** @type {?} */
    CustomImportDialogComponent.prototype.ie_cancel;
    /** @type {?} */
    CustomImportDialogComponent.prototype.ie_ok;
    /** @type {?} */
    CustomImportDialogComponent.prototype.choose_file;
    /** @type {?} */
    CustomImportDialogComponent.prototype.import_file;
    /** @type {?} */
    CustomImportDialogComponent.prototype.import_placeholder;
    /** @type {?} */
    CustomImportDialogComponent.prototype.download_template_ok;
    /** @type {?} */
    CustomImportDialogComponent.prototype.download_template_fail;
    /** @type {?} */
    CustomImportDialogComponent.prototype.choose_truefile;
    /** @type {?} */
    CustomImportDialogComponent.prototype.upload_filetype_nomatch;
    /** @type {?} */
    CustomImportDialogComponent.prototype.upload_fail;
    /** @type {?} */
    CustomImportDialogComponent.prototype.save_customrule_fail;
    /** @type {?} */
    CustomImportDialogComponent.prototype.import_success;
    /** @type {?} */
    CustomImportDialogComponent.prototype.import_fail;
    /** @type {?} */
    CustomImportDialogComponent.prototype.import_form_success;
    /** @type {?} */
    CustomImportDialogComponent.prototype.customexport_no_column;
    /** @type {?} */
    CustomImportDialogComponent.prototype.select_xlsx_notify;
    /** @type {?} */
    CustomImportDialogComponent.prototype.i18nResource;
    /**
     * @type {?}
     * @private
     */
    CustomImportDialogComponent.prototype.customDataIEService;
    /**
     * @type {?}
     * @private
     */
    CustomImportDialogComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    CustomImportDialogComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    CustomImportDialogComponent.prototype.importService;
    /**
     * @type {?}
     * @private
     */
    CustomImportDialogComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWltcG9ydC1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1kaXAvZGF0YS1pbXAtZXhwLyIsInNvdXJjZXMiOlsibGliL2N1c3RvbS1pbXBvcnQtZGlhbG9nL2N1c3RvbS1pbXBvcnQtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqSCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxxREFBcUQsQ0FBQztBQUNqRixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUdoRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxpREFBaUQsQ0FBQztBQUNwRixPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDekQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQU81RCxNQUFNLE9BQU8sMkJBQTJCOzs7Ozs7OztJQW1GdEMsWUFDVSxtQkFBd0MsRUFDeEMsTUFBcUIsRUFDckIsY0FBOEIsRUFDOUIsYUFBZ0MsRUFDaEMsSUFBZ0I7UUFKaEIsd0JBQW1CLEdBQW5CLG1CQUFtQixD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Qzs7SUFDakMsNENBQ2tCOztJQUNsQixpREFDdUI7O0lBQ3ZCLGlEQUN1Qjs7SUFDdkIsa0RBQ3dCOztJQUN4QixtREFDOEI7O0lBUTlCLG9EQU1FOztJQUVGLGdEQUFrQjs7SUFDbEIsd0RBQTBCOztJQUMxQixnREFBa0I7O0lBQ2xCLDRDQUFjOztJQUNkLGtEQUFvQjs7SUFDcEIsa0RBQW9COztJQUNwQix5REFBMkI7O0lBQzNCLDJEQUE2Qjs7SUFDN0IsNkRBQStCOztJQUMvQixzREFBd0I7O0lBQ3hCLDhEQUFnQzs7SUFDaEMsa0RBQW9COztJQUNwQiwyREFBNkI7O0lBQzdCLHFEQUF1Qjs7SUFDdkIsa0RBQW9COztJQUNwQiwwREFBNEI7O0lBQzVCLDZEQUErQjs7SUFDL0IseURBQTJCOztJQUMzQixtREFBa0I7Ozs7O0lBR2hCLDBEQUFnRDs7Ozs7SUFDaEQsNkNBQTZCOzs7OztJQUM3QixxREFBc0M7Ozs7O0lBQ3RDLG9EQUF3Qzs7Ozs7SUFDeEMsMkNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGcmFtZUNvbnRleHR9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHtMb2FkaW5nU2VydmljZX0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuaW1wb3J0IHtGaWxlVXBsb2FkZXJ9IGZyb20gJy4uL3NlcnZpY2UvVXBsb2FkZXJTZXJ2aWNlL0ZpbGVVcGxvYWQvZmlsZS11cGxvYWRlcic7XHJcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7Tm90aWZ5U2VydmljZX0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQge0ZpbGVJdGVtfSBmcm9tICcuLi9zZXJ2aWNlL1VwbG9hZGVyU2VydmljZS9GaWxlVXBsb2FkL2ZpbGUtaXRlbSc7XHJcbmltcG9ydCB7UGFyc2VkUmVzcG9uc2VIZWFkZXJzfSBmcm9tICcuLi9zZXJ2aWNlL1VwbG9hZGVyU2VydmljZS9GaWxlVXBsb2FkL3BhcnNlZC1yZXNwb25zZS1oZWFkZXJzJztcclxuaW1wb3J0IHtDdXN0b21EYXRhSUVTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL0RhdGFJRVNlcnZpY2UvY3VzdG9tLWRhdGEtaWUuc2VydmljZSc7XHJcbmltcG9ydCB7RWxlbWVudFNlbGVjdENvbXBvbmVudH0gZnJvbSAnLi4vZWxlbWVudC1zZWxlY3QvZWxlbWVudC1zZWxlY3QuY29tcG9uZW50JztcclxuaW1wb3J0IHtEYXRhSW1wb3J0U2VydmljZX0gZnJvbSAnLi4vc2VydmljZS9EYXRhSUVTZXJ2aWNlL2RhdGEtaW1wb3J0LnNlcnZpY2UnO1xyXG5pbXBvcnQge0RhdGFJRVV0aWxzfSBmcm9tICcuLi9zZXJ2aWNlL1V0aWxzL0RhdGFJRVV0aWxzJztcclxuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7Q29tbW9uUGFyYW1zfSBmcm9tIFwiLi4vc2VydmljZS9FbnRpdHkvQ29tbW9uUGFyYW1zXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1jdXN0b20taW1wb3J0LWRpYWxvZycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2N1c3RvbS1pbXBvcnQtZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jdXN0b20taW1wb3J0LWRpYWxvZy5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEN1c3RvbUltcG9ydERpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3NlbGVjdEZvb3RlcicpIG1vZGFsRm9vdGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIC8vIOinhOWImUlEXHJcbiAgQElucHV0KClcclxuICBydWxlSWQgPSAnJztcclxuICBASW5wdXQoKVxyXG4gIGkxOG5JZCA9ICcnO1xyXG4gIC8vIOi/h+a7pOadoeS7tlxyXG4gIEBJbnB1dCgpXHJcbiAgaW1wb3J0T3B0aW9uOiBhbnkgPSBudWxsO1xyXG4gIEBJbnB1dCgpXHJcbiAgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSBudWxsO1xyXG4gIC8vIEBJbnB1dCgpXHJcbiAgLy8gbWV0aG9kVHlwZTogTWV0aG9kVHlwZTtcclxuICBASW5wdXQoKVxyXG4gIHN1YmplY3Q6IFN1YmplY3Q8Qm9vbGVhbj4gPSBudWxsO1xyXG4gIGFjY2VwdEZpbGVUeXBlID0gJy54bHMnO1xyXG4gIC8vIOaWh+S7tuWQjeensFxyXG4gIGZpbGVOYW1lID0gJyc7XHJcbiAgLy8gbG9hZGluZ0NvbXA6IExvYWRpbmdDb21wb25lbnQgPSBudWxsO1xyXG4gIEBWaWV3Q2hpbGQoJ2ZpbGVVcGxvYWQnKVxyXG4gIGZpbGVVcGxvYWQ6IEVsZW1lbnRSZWY7XHJcbiAgcHJpdmF0ZSBvcmlnaW4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xyXG4gIC8vIOWIl+mAieaLqee7hOS7tlxyXG4gIEBWaWV3Q2hpbGQoRWxlbWVudFNlbGVjdENvbXBvbmVudClcclxuICBlbGVTZWxlY3RDb21wOiBFbGVtZW50U2VsZWN0Q29tcG9uZW50O1xyXG4gIHZhbHVlRmllbGQ6IHN0cmluZyA9ICdPZmZpY2UgRXhjZWw5Ny0yMDAzKCoueGxzKSc7XHJcbiAgdXBsb2FkZXIgPSBuZXcgRmlsZVVwbG9hZGVyKHtcclxuICAgIHVybDogdGhpcy5vcmlnaW4gKyAnL2FwaS9ydW50aW1lL2RpcC92MS4wL3JwY2ltcG9ydC9VcGxvYWQnLFxyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBhdXRvVXBsb2FkOiBmYWxzZSxcclxuICAgIGl0ZW1BbGlhczogJ3VwbG9hZGVkZmlsZScsXHJcbiAgICBhbGxvd2VkRmlsZVR5cGU6IFsneGxzJywgJ3htbCcsICdwZGYnLCAnd3BzJywgJ2RvYyddXHJcbiAgfSk7XHJcbiAgLy8g5o6n5Yi2RGVzdHJveeihqOWNleS4reeahOi+k+WFpee7hOS7tlxyXG4gIEBPdXRwdXQoKVxyXG4gIG5lZWREZXN0cm95ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBJbnB1dCgpXHJcbiAgTW9kZWw6IGFueSA9IG51bGw7XHJcbiAgQElucHV0KClcclxuICBJbm5lck1vZGVsOiBhbnkgPSBudWxsO1xyXG4gIEBJbnB1dCgpXHJcbiAgY29tcG9uZW50czogYW55ID0gbnVsbDtcclxuICBASW5wdXQoKVxyXG4gIEN1c3RvbU1vZGVsOiBhbnkgPSBudWxsO1xyXG4gIEBJbnB1dCgpXHJcbiAgSXNJbXBvcnRGb3JtOiBib29sZWFuID0gZmFsc2U7XHJcbiAgLy8gcHVibGljIGZpbGVMaXN0SXRlbXMgPSBbXHJcbiAgLy8gICAgIHtpZDonT2ZmaWNlIEV4Y2VsOTctMjAwMygqLnhscyknLGxhYmVsOidPZmZpY2UgRXhjZWw5Ny0yMDAzKCoueGxzKSd9LFxyXG4gIC8vICAgICB7aWQ6J09mZmljZSBFeGNlbCgqLnhsc3gpJyxsYWJlbDonT2ZmaWNlIEV4Y2VsKCoueGxzeCknfSxcclxuICAvLyAgICAge2lkOidPZmZpY2UgRXhjZWwgTWFjcm8oKi54bHNtKScsbGFiZWw6J09mZmljZSBFeGNlbCBNYWNybygqLnhsc20pJ30sXHJcbiAgLy8gICAgIHtpZDonV1BTIFRhYmxlKCouZXQpJyxsYWJlbDonV1BTIFRhYmxlKCouZXQpJ31cclxuICAvLyAgICAgLy8gJ1dQUyBUYWJsZShUZW1wbGF0ZSBGaWxlKSgqLmV0dCknXHJcbiAgLy8gXTtcclxuICBwdWJsaWMgZmlsZUxpc3RJdGVtcyA9IFtcclxuICAgICdPZmZpY2UgRXhjZWw5Ny0yMDAzKCoueGxzKScsXHJcbiAgICAnT2ZmaWNlIEV4Y2VsKCoueGxzeCknLFxyXG4gICAgJ09mZmljZSBFeGNlbCBNYWNybygqLnhsc20pJyxcclxuICAgICdXUFMgVGFibGUoKi5ldCknXHJcbiAgICAvLyAnV1BTIFRhYmxlKFRlbXBsYXRlIEZpbGUpKCouZXR0KSdcclxuICBdO1xyXG5cclxuICBmaWxlX3R5cGU6IHN0cmluZztcclxuICBkb3dubG9hZF90ZW1wbGF0ZTogc3RyaW5nO1xyXG4gIGllX2NhbmNlbDogc3RyaW5nO1xyXG4gIGllX29rOiBzdHJpbmc7XHJcbiAgY2hvb3NlX2ZpbGU6IHN0cmluZztcclxuICBpbXBvcnRfZmlsZTogc3RyaW5nO1xyXG4gIGltcG9ydF9wbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gIGRvd25sb2FkX3RlbXBsYXRlX29rOiBzdHJpbmc7XHJcbiAgZG93bmxvYWRfdGVtcGxhdGVfZmFpbDogc3RyaW5nO1xyXG4gIGNob29zZV90cnVlZmlsZTogc3RyaW5nO1xyXG4gIHVwbG9hZF9maWxldHlwZV9ub21hdGNoOiBzdHJpbmc7XHJcbiAgdXBsb2FkX2ZhaWw6IHN0cmluZztcclxuICBzYXZlX2N1c3RvbXJ1bGVfZmFpbDogc3RyaW5nO1xyXG4gIGltcG9ydF9zdWNjZXNzOiBzdHJpbmc7XHJcbiAgaW1wb3J0X2ZhaWw6IHN0cmluZztcclxuICBpbXBvcnRfZm9ybV9zdWNjZXNzOiBzdHJpbmc7XHJcbiAgY3VzdG9tZXhwb3J0X25vX2NvbHVtbjogc3RyaW5nO1xyXG4gIHNlbGVjdF94bHN4X25vdGlmeTogc3RyaW5nO1xyXG4gIGkxOG5SZXNvdXJjZTogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY3VzdG9tRGF0YUlFU2VydmljZTogQ3VzdG9tRGF0YUlFU2VydmljZSxcclxuICAgIHByaXZhdGUgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGltcG9ydFNlcnZpY2U6IERhdGFJbXBvcnRTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7XHJcbiAgICBEYXRhSUVVdGlscy5nZXRUcmFuc2xhdGVWYWx1ZShodHRwKS5zdWJzY3JpYmUocmVzID0+IHtcclxuICAgICAgdGhpcy5pbXBvcnRfZmlsZSA9IHJlc1snaW1wb3J0X2ZpbGUnXTtcclxuICAgICAgdGhpcy5jaG9vc2VfZmlsZSA9IHJlc1snY2hvb3NlX2ZpbGUnXTtcclxuICAgICAgdGhpcy5maWxlX3R5cGUgPSByZXNbJ2ZpbGVfdHlwZSddO1xyXG4gICAgICB0aGlzLmltcG9ydF9wbGFjZWhvbGRlciA9IHJlc1snaW1wb3J0X3BsYWNlaG9sZGVyJ107XHJcbiAgICAgIHRoaXMuZG93bmxvYWRfdGVtcGxhdGUgPSByZXNbJ2Rvd25sb2FkX3RlbXBsYXRlJ107XHJcbiAgICAgIHRoaXMuaWVfY2FuY2VsID0gcmVzWydpZV9jYW5jZWwnXTtcclxuICAgICAgdGhpcy5pZV9vayA9IHJlc1snaWVfb2snXTtcclxuICAgICAgdGhpcy5jaG9vc2VfdHJ1ZWZpbGUgPSByZXNbJ2Nob29zZV90cnVlZmlsZSddO1xyXG4gICAgICB0aGlzLmRvd25sb2FkX3RlbXBsYXRlX29rID0gcmVzWydkb3dubG9hZF90ZW1wbGF0ZV9vayddO1xyXG4gICAgICB0aGlzLmRvd25sb2FkX3RlbXBsYXRlX2ZhaWwgPSByZXNbJ2Rvd25sb2FkX3RlbXBsYXRlX2ZhaWwnXTtcclxuICAgICAgdGhpcy51cGxvYWRfZmFpbCA9IHJlc1sndXBsb2FkX2ZhaWwnXTtcclxuICAgICAgdGhpcy5pbXBvcnRfc3VjY2VzcyA9IHJlc1snaW1wb3J0X3N1Y2Nlc3MnXTtcclxuICAgICAgdGhpcy5pbXBvcnRfZm9ybV9zdWNjZXNzID0gcmVzWydpbXBvcnRfZm9ybV9zdWNjZXNzJ107XHJcbiAgICAgIHRoaXMuaW1wb3J0X2ZhaWwgPSByZXNbJ2ltcG9ydF9mYWlsJ107XHJcbiAgICAgIHRoaXMudXBsb2FkX2ZpbGV0eXBlX25vbWF0Y2ggPSByZXNbJ3VwbG9hZF9maWxldHlwZV9ub21hdGNoJ107XHJcbiAgICAgIHRoaXMuc2F2ZV9jdXN0b21ydWxlX2ZhaWwgPSByZXNbJ3NhdmVfY3VzdG9tcnVsZV9mYWlsJ107XHJcbiAgICAgIHRoaXMuY3VzdG9tZXhwb3J0X25vX2NvbHVtbiA9IHJlc1snY3VzdG9tZXhwb3J0X25vX2NvbHVtbiddO1xyXG4gICAgICB0aGlzLnNlbGVjdF94bHN4X25vdGlmeSA9IHJlc1snc2VsZWN0X3hsc3hfbm90aWZ5J107XHJcbiAgICAgIHRoaXMuaTE4blJlc291cmNlID0gcmVzO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIC8vIOS4iuS8oOaIkOWKn+WQjuaJp+ihjOeahOS6i+S7tlxyXG4gICAgdGhpcy51cGxvYWRlci5vblN1Y2Nlc3NJdGVtID0gdGhpcy5JbXBvcnQuYmluZCh0aGlzKTtcclxuICAgIC8vIOS4iuS8oOWksei0peWQjuaJp+ihjOeahOS6i+S7tlxyXG4gICAgdGhpcy51cGxvYWRlci5vbkVycm9ySXRlbSA9IHRoaXMuRXJyb3JMb2cuYmluZCh0aGlzKTtcclxuICAgIC8vIOa3u+WKoOaWh+S7tuWQjuaJp+ihjOeahOS6i+S7tlxyXG4gICAgdGhpcy51cGxvYWRlci5vbkFmdGVyQWRkaW5nRmlsZSA9IHRoaXMuYWZ0ZXJBZGRGaWxlO1xyXG4gICAgLy8g5LiK5Lyg5paH5Lu25YmN5omn6KGM55qE5LqL5Lu2XHJcbiAgICB0aGlzLnVwbG9hZGVyLm9uQmVmb3JlVXBsb2FkSXRlbSA9IHRoaXMuU2F2ZUN1c3RvbUltcG9ydFJ1bGU7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RlZEZpbGVPbkNoYW5nZShldmVudCkge1xyXG4gICAgY29uc3Qgc3RyOiBzdHJpbmcgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICBpZiAoc3RyID09PSAnJykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHN0ci5sYXN0SW5kZXhPZignXFxcXCcpO1xyXG4gICAgdGhpcy5maWxlTmFtZSA9IHN0ci5zdWJzdHJpbmcoaW5kZXggKyAxKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCfpmJ/liJfkuK3nmoTmlofku7YnICsgdGhpcy51cGxvYWRlci5xdWV1ZVswXSk7XHJcbiAgfVxyXG5cclxuICAvLyDlhbPpl63nqpflj6NcclxuICBwdWJsaWMgQ2xvc2UoKSB7XHJcbiAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICB9XHJcblxyXG4gIC8vIOmAieaLqeaWh+S7tuS6i+S7tlxyXG4gIHB1YmxpYyBTZWxlY3RGaWxlKCk6IGFueSB7XHJcbiAgICB0aGlzLmZpbGVVcGxvYWQubmF0aXZlRWxlbWVudC5jbGljaygpO1xyXG4gIH1cclxuXHJcbiAgZmlsZVR5cGVWYWx1ZUNoYW5nZSgpIHtcclxuICAgIGNvbnN0IHN1ZmZpeCA9IHRoaXMuZ2V0RmlsZUV4dGVuc2lvbigpO1xyXG4gICAgaWYgKHN1ZmZpeCA9PT0gJy54bHN4Jykge1xyXG4gICAgICB0aGlzLm5vdGlmeS5pbmZvKHRoaXMuc2VsZWN0X3hsc3hfbm90aWZ5KTtcclxuICAgIH1cclxuICAgIGlmIChzdWZmaXggIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5hY2NlcHRGaWxlVHlwZSA9IHN1ZmZpeDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuYWNjZXB0RmlsZVR5cGUgPSAnLmNzdiwueGxzbSwueGxzeCwueGxzLC5wZGYsLnhtbCwuZXQnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy/kuIvovb3mqKHmnb9cclxuICBwdWJsaWMgRG93bmxvYWRUZW1wbGF0ZSgpIHtcclxuICAgIC8vY29uc3QgdGVtUmVzID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcbiAgICBsZXQgc3VmZml4ID0gJy54bHMnO1xyXG4gICAgc3VmZml4ID0gdGhpcy5nZXRGaWxlRXh0ZW5zaW9uKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuSW5uZXJNb2RlbCAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLmVsZVNlbGVjdENvbXAuU2F2ZSgpO1xyXG4gICAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuSW5uZXJNb2RlbC5NYWluT2JqZWN0LkVsZW1lbnRzO1xyXG4gICAgICBjb25zdCBtYWluT2JqTmFtZSA9IHRoaXMuSW5uZXJNb2RlbC5NYWluT2JqZWN0LkZpbGVPYmplY3ROYW1lO1xyXG4gICAgICBpZiAoZWxlbWVudHMgPT0gbnVsbCB8fCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkIHx8IGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmluZm8obWFpbk9iak5hbWUgKyAnICcgKyB0aGlzLmN1c3RvbWV4cG9ydF9ub19jb2x1bW4pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmN1c3RvbURhdGFJRVNlcnZpY2UuU2F2ZUN1c3RvbUltcG9ydFJ1bGUodGhpcy5Jbm5lck1vZGVsLCB0aGlzLmNvbXBvbmVudHMsIHRoaXMuZnJhbWVDb250ZXh0LCBzdWZmaXgsIGZhbHNlLCB0aGlzLmkxOG5JZCwgdGhpcy5pbXBvcnRPcHRpb24uZGltZW5zaW9uKS5zdWJzY3JpYmUoXHJcbiAgICAgICAgZGF0YSA9PiB7XHJcbiAgICAgICAgICBpZiAoZGF0YVsnc3VjY2VzcyddID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YUlFU2VydmljZS5Eb3dtbG9hZFRlbXBsYXRlKHRoaXMuTW9kZWwsIHRoaXMuZnJhbWVDb250ZXh0LCB0aGlzLmltcG9ydE9wdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlciA9IHRoaXMuY3VzdG9tRGF0YUlFU2VydmljZS5jb21wbGV0ZS5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHRoaXMuZG93bmxvYWRfdGVtcGxhdGVfb2spO1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHRoaXMuZG93bmxvYWRfdGVtcGxhdGVfZmFpbCArIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHRoaXMuc2F2ZV9jdXN0b21ydWxlX2ZhaWwgKyBkYXRhWydtZXNzYWdlJ10pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOa3u+WKoOaWh+S7tuWQjuS6i+S7tlxyXG4gIGFmdGVyQWRkRmlsZShmaWxlSXRlbTogRmlsZUl0ZW0pOiBhbnkge1xyXG4gIH1cclxuXHJcbiAgLy8g5byA5aeL5a+85YWlXHJcbiAgcHVibGljIE9rKCkge1xyXG4gICAgY29uc29sZS5sb2coJ+W8gOWni+S4iuS8oO+8gScpO1xyXG4gICAgY29uc29sZS5sb2codGhpcy51cGxvYWRlci5xdWV1ZSk7XHJcbiAgICBjb25zdCBsb2FkaW5nQ29uZmlnID0ge1xyXG4gICAgICBtZXNzYWdlOiB0aGlzLmkxOG5SZXNvdXJjZVsnaW1wb3J0X2xvYWRpbmcnXVxyXG4gICAgfTtcclxuICAgIHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdyhsb2FkaW5nQ29uZmlnKTtcclxuICAgIGNvbnN0IGxlbiA9IHRoaXMudXBsb2FkZXIucXVldWUubGVuZ3RoO1xyXG4gICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICB0aGlzLm5vdGlmeS5pbmZvKHRoaXMuY2hvb3NlX3RydWVmaWxlKTtcclxuICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBsYXN0RmlsZUl0ZW0gPSB0aGlzLnVwbG9hZGVyLnF1ZXVlW2xlbiAtIDFdO1xyXG4gICAgLy8gdGhpcy51cGxvYWRlci51cGxvYWRBbGwoKTtcclxuICAgIGNvbnN0IGJlZlJlc3RTZXJ2aWNlID0gRGF0YUlFVXRpbHMuR2V0QmVmUmVzdFNlcnZpY2UodGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSk7XHJcbiAgICBjb25zdCBwcmVVcmwgPSBEYXRhSUVVdGlscy5HZXRQcmVVcmwoYmVmUmVzdFNlcnZpY2UuYmFzZVVyaSk7XHJcbiAgICBsZXQgdGVtcFVybCA9IGAke3ByZVVybH0vaW1wb3J0L1VwbG9hZGA7XHJcbiAgICBjb25zdCBzdSA9IERhdGFJRVV0aWxzLmdldFN1KHRlbXBVcmwpO1xyXG4gICAgY29uc3QgZml4ZWRVcmwgPSB0aGlzLm9yaWdpbiArICcvYXBpL3J1bnRpbWUvZGlwL3YxLjAvcnBjaW1wb3J0L1VwbG9hZD9zdT0nICsgc3U7XHJcbiAgICB0aGlzLnVwbG9hZGVyLnNldE9wdGlvbnMoe1xyXG4gICAgICB1cmw6IGZpeGVkVXJsLFxyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgYXV0b1VwbG9hZDogZmFsc2UsXHJcbiAgICAgIGl0ZW1BbGlhczogJ3VwbG9hZGVkZmlsZScsXHJcbiAgICAgIGFsbG93ZWRGaWxlVHlwZTogWyd4bHMnLCAneG1sJywgJ3BkZicsICd3cHMnLCAnZG9jJ10sXHJcbiAgICAgIGhlYWRlcnM6IFt7bmFtZTogJ3N1JywgdmFsdWU6IHN1fV1cclxuICAgIH0pO1xyXG4gICAgaWYgKHRoaXMuZmlsZU5hbWUuc3BsaXQoXCIuXCIpLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICBpZiAodGhpcy5nZXRGaWxlRXh0ZW5zaW9uKCkgIT09IChcIi5cIiArIHRoaXMuZmlsZU5hbWUuc3BsaXQoXCIuXCIpWzFdKSkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmluZm8odGhpcy51cGxvYWRfZmlsZXR5cGVfbm9tYXRjaCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHRoaXMudXBsb2FkZXIudXBsb2FkSXRlbShsYXN0RmlsZUl0ZW0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8vIOWPlua2iOS6i+S7tlxyXG4gIHB1YmxpYyBDYW5jZWwoKSB7XHJcbiAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICB9XHJcblxyXG4gIC8vIOS4iuS8oOWksei0peWQjuaWueazlVxyXG4gIEVycm9yTG9nKGl0ZW06IEZpbGVJdGVtLCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlciwgaGVhZGVyczogUGFyc2VkUmVzcG9uc2VIZWFkZXJzKTogYW55IHtcclxuICAgIGNvbnNvbGUubG9nKCfkuIrkvKDlpLHotKUnKTtcclxuICAgIGNvbnNvbGUubG9nKCfplJnor6/ku6PnoIHvvJonICsgc3RhdHVzKTtcclxuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgIGNvbnNvbGUubG9nKGhlYWRlcnMpO1xyXG4gICAgaWYgKHJlc3BvbnNlICE9PSAnICcpIHtcclxuICAgICAgY29uc3QgdGVtUmVzID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcbiAgICAgIHRoaXMubm90aWZ5LmluZm8odGhpcy51cGxvYWRfZmFpbCArIHRlbVJlcyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCflpLHotKXljp/lm6DvvJonICsgdGVtUmVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIFNhdmVDdXN0b21JbXBvcnRSdWxlKCkge1xyXG5cclxuICB9XHJcblxyXG4gIEltcG9ydChpdGVtOiBGaWxlSXRlbSwgcmVzcG9uc2U6IHN0cmluZywgc3RhdHVzOiBudW1iZXIsIGhlYWRlcnM6IFBhcnNlZFJlc3BvbnNlSGVhZGVycyk6IGFueSB7XHJcbiAgICBjb25zdCB0ZW1SZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgIGxldCBzdWZmaXggPSAnLnhscyc7XHJcbiAgICBzdWZmaXggPSB0aGlzLmdldEZpbGVFeHRlbnNpb24oKTtcclxuXHJcbiAgICBpZiAodGhpcy5Jbm5lck1vZGVsICE9PSBudWxsKSB7XHJcbiAgICAgIGxldCBpc0Zvcm0gPSBmYWxzZTtcclxuICAgICAgaWYgKHRoaXMuaW1wb3J0T3B0aW9uICE9PSBudWxsICYmIHRoaXMuaW1wb3J0T3B0aW9uWydJc0ltcG9ydEZvcm0nXSAhPT0gbnVsbCAmJiB0aGlzLmltcG9ydE9wdGlvblsnSXNJbXBvcnRGb3JtJ10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltcG9ydE9wdGlvblsnSXNJbXBvcnRGb3JtJ10gPT09IHRydWUpIHtcclxuICAgICAgICAgIGlzRm9ybSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZWxlU2VsZWN0Q29tcC5TYXZlKCk7XHJcbiAgICAgIHRoaXMuY3VzdG9tRGF0YUlFU2VydmljZS5TYXZlQ3VzdG9tSW1wb3J0UnVsZSh0aGlzLklubmVyTW9kZWwsIHRoaXMuY29tcG9uZW50cywgdGhpcy5mcmFtZUNvbnRleHQsIHN1ZmZpeCwgaXNGb3JtLCB0aGlzLmkxOG5JZCwgdGhpcy5pbXBvcnRPcHRpb24uZGltZW5zaW9uKS5zdWJzY3JpYmUoXHJcbiAgICAgICAgZGF0YSA9PiB7XHJcbiAgICAgICAgICBpZiAoZGF0YVsnc3VjY2VzcyddID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhWydpc0ltcG9ydFN1YiddID09IHRydWUpIHtcclxuICAgICAgICAgICAgICB0aGlzLkltcG9ydFN1YlRhYmxlQnlSdWxlKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuSW1wb3J0QnlSdWxlKGl0ZW0sIHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5lcnJvcih0aGlzLnNhdmVfY3VzdG9tcnVsZV9mYWlsICsgZGF0YVsnbWVzc2FnZSddKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfmlbDmja7kuqTmjaLmqKHlnovlj4LmlbDlgLzkuLrnqbonKTtcclxuICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgSW1wb3J0QnlSdWxlKGl0ZW06IEZpbGVJdGVtLCByZXNwb25zZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlciwgaGVhZGVyczogUGFyc2VkUmVzcG9uc2VIZWFkZXJzKTogYW55IHtcclxuICAgIGNvbnNvbGUubG9nKHN0YXR1cyk7XHJcbiAgICBjb25zb2xlLmxvZygn5LiK5Lyg5a6M5oiQ77yBJyk7XHJcbiAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICBjb25zdCB0ZW1SZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgY29uc29sZS5sb2coJ+S4iuS8oOaIkOWKnycpO1xyXG4gICAgICBjb25zb2xlLmxvZyh0ZW1SZXMpO1xyXG4gICAgICBjb25zdCBsb2FkaW5nQ29uZmlnID0ge1xyXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuaTE4blJlc291cmNlWydpbXBvcnRfbG9hZGluZyddXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGxvYWRpbmdQYXJhbSA9IHtcclxuICAgICAgICBsb2FkaW5nU2VydmljZTogdGhpcy5sb2FkaW5nU2VydmljZSxcclxuICAgICAgICBsb2FkaW5nQ29uZmlnOiBsb2FkaW5nQ29uZmlnXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGNvbW1vblBhcmFtcyA9IG5ldyBDb21tb25QYXJhbXMoKTtcclxuICAgICAgY29tbW9uUGFyYW1zLmtleXMgPSBbJ0RhdGFJbXBvcnQnLCB0aGlzLk1vZGVsWydNYWluT2JqZWN0J11bJ1NvdXJjZSddWydTb3VyY2VNZXRhZGF0YUlEJ10sIHRoaXMuaW1wb3J0T3B0aW9uLmRpbWVuc2lvbl07XHJcbiAgICAgIGNvbW1vblBhcmFtcy5vcHRpb24gPSB0aGlzLmltcG9ydE9wdGlvbjtcclxuICAgICAgY29tbW9uUGFyYW1zLmZpbGVOYW1lID0gdGVtUmVzWydmaWxlTmFtZSddO1xyXG4gICAgICBjb21tb25QYXJhbXMucmVwb3NpdG9yeSA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnk7XHJcbiAgICAgIGNvbW1vblBhcmFtcy5sb2FkaW5nUGFyYW0gPSBsb2FkaW5nUGFyYW07XHJcbiAgICAgIGNvbW1vblBhcmFtcy5pMThuUmVzb3VyY2UgPSB0aGlzLmkxOG5SZXNvdXJjZTtcclxuICAgICAgdGhpcy5jdXN0b21EYXRhSUVTZXJ2aWNlLkltcG9ydEJ5UnVsZShjb21tb25QYXJhbXMpO1xyXG4gICAgICBjb25zdCB1bnN1YnNjcmliZXIgPSB0aGlzLmltcG9ydFNlcnZpY2UuY29tcGxldGUuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuY2xlYXJBbGwoKTtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gJycpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3ModGhpcy5pbXBvcnRfc3VjY2Vzcyk7XHJcbiAgICAgICAgICB1bnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09ICflr7zlhaXooajljZXmiJDlip8nKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHRoaXMuaW1wb3J0X2Zvcm1fc3VjY2Vzcyk7XHJcbiAgICAgICAgICB1bnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIHRoaXMubmVlZERlc3Ryb3kuZW1pdCgpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZXJyb3JsZXZlbCA9IHRoaXMuaW1wb3J0U2VydmljZS5lcnJvcmxldmVsO1xyXG4gICAgICAgICAgaWYgKGVycm9ybGV2ZWwgPT09ICdJbmZvJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5pbmZvKGRhdGEpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChlcnJvcmxldmVsID09PSAnV2FybmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnkud2FybmluZyhkYXRhKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHRoaXMuaW1wb3J0X2ZhaWwgKyBkYXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgdGhpcy5uZWVkRGVzdHJveS5lbWl0KCk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICB0aGlzLnN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgSW1wb3J0U3ViVGFibGVCeVJ1bGUoaXRlbTogRmlsZUl0ZW0sIHJlc3BvbnNlOiBzdHJpbmcsIHN0YXR1czogbnVtYmVyLCBoZWFkZXJzOiBQYXJzZWRSZXNwb25zZUhlYWRlcnMpOiBhbnkge1xyXG4gICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgIGNvbnN0IHRlbVJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICBjb25zdCBsb2FkaW5nQ29uZmlnID0ge1xyXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuaTE4blJlc291cmNlWydpbXBvcnRfbG9hZGluZyddXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGxvYWRpbmdQYXJhbSA9IHtcclxuICAgICAgICBsb2FkaW5nU2VydmljZTogdGhpcy5sb2FkaW5nU2VydmljZSxcclxuICAgICAgICBsb2FkaW5nQ29uZmlnOiBsb2FkaW5nQ29uZmlnXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGNvbW1vblBhcmFtcyA9IG5ldyBDb21tb25QYXJhbXMoKTtcclxuICAgICAgY29tbW9uUGFyYW1zLmtleXMgPSBbJ0RhdGFJbXBvcnQnLCB0aGlzLk1vZGVsWydNYWluT2JqZWN0J11bJ1NvdXJjZSddWydTb3VyY2VNZXRhZGF0YUlEJ10sIHRoaXMuaW1wb3J0T3B0aW9uLmRpbWVuc2lvbl07XHJcbiAgICAgIGNvbW1vblBhcmFtcy5vcHRpb24gPSB0aGlzLmltcG9ydE9wdGlvbjtcclxuICAgICAgY29tbW9uUGFyYW1zLmZpbGVOYW1lID0gdGVtUmVzWydmaWxlTmFtZSddO1xyXG4gICAgICBjb21tb25QYXJhbXMucmVwb3NpdG9yeSA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnk7XHJcbiAgICAgIGNvbW1vblBhcmFtcy5mcmFtZUNvbnRleHQgPSB0aGlzLmZyYW1lQ29udGV4dDtcclxuICAgICAgY29tbW9uUGFyYW1zLmxvYWRpbmdQYXJhbSA9IGxvYWRpbmdQYXJhbTtcclxuICAgICAgY29tbW9uUGFyYW1zLmkxOG5SZXNvdXJjZSA9IHRoaXMuaTE4blJlc291cmNlO1xyXG4gICAgICBjb25zdCBmbGFnID0gdGhpcy5jdXN0b21EYXRhSUVTZXJ2aWNlLkltcG9ydFN1YlRhYmxlQnlSdWxlKGNvbW1vblBhcmFtcyk7XHJcbiAgICAgIGlmIChmbGFnID09PSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuY2xlYXJBbGwoKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB1bnN1YnNjcmliZXIgPSB0aGlzLmltcG9ydFNlcnZpY2UuY29tcGxldGUuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuY2xlYXJBbGwoKTtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gJycpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3ModGhpcy5pbXBvcnRfc3VjY2Vzcyk7XHJcbiAgICAgICAgICB1bnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KHRydWUpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgPT09ICflr7zlhaXooajljZXmiJDlip8nKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHRoaXMuaW1wb3J0X2Zvcm1fc3VjY2Vzcyk7XHJcbiAgICAgICAgICB1bnN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KHRydWUpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZXJyb3JsZXZlbCA9IHRoaXMuaW1wb3J0U2VydmljZS5lcnJvcmxldmVsO1xyXG4gICAgICAgICAgaWYgKGVycm9ybGV2ZWwgPT09ICdJbmZvJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5pbmZvKGRhdGEpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChlcnJvcmxldmVsID09PSAnV2FybmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnkud2FybmluZyhkYXRhKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHRoaXMuaW1wb3J0X2ZhaWwgKyBkYXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHVuc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB0aGlzLm5lZWREZXN0cm95LmVtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdW5zdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RmlsZUV4dGVuc2lvbigpOiBhbnkge1xyXG4gICAgbGV0IHN1ZmZpeCA9IG51bGw7XHJcbiAgICBzd2l0Y2ggKHRoaXMudmFsdWVGaWVsZCkge1xyXG4gICAgICBjYXNlICdPZmZpY2UgRXhjZWw5Ny0yMDAzKCoueGxzKSc6XHJcbiAgICAgICAgc3VmZml4ID0gJy54bHMnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdPZmZpY2UgRXhjZWwoKi54bHN4KSc6XHJcbiAgICAgICAgc3VmZml4ID0gJy54bHN4JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnT2ZmaWNlIEV4Y2VsIE1hY3JvKCoueGxzbSknOlxyXG4gICAgICAgIHN1ZmZpeCA9ICcueGxzbSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ1dQUyBUYWJsZSgqLmV0KSc6XHJcbiAgICAgICAgc3VmZml4ID0gJy5ldCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ1dQUyBUYWJsZShUZW1wbGF0ZSBGaWxlKSgqLmV0dCknOlxyXG4gICAgICAgIHN1ZmZpeCA9ICcuZXR0JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiBzdWZmaXg7XHJcbiAgfVxyXG59XHJcbiJdfQ==