/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class FileLikeObject {
    /**
     * @param {?} fileOrInput
     */
    constructor(fileOrInput) {
        this.rawFile = fileOrInput;
        /** @type {?} */
        const isInput = this.isElement(fileOrInput);
        /** @type {?} */
        const fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        /** @type {?} */
        const postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        /** @type {?} */
        const method = 'createFrom' + postfix;
        ((/** @type {?} */ (this)))[method](fakePathOrObject);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isElement(node) {
        return !!(node && (node.nodeName || node.prop && node.attr && node.find));
    }
    /**
     * @param {?} path
     * @return {?}
     */
    createFromFakePath(path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    createFromObject(object) {
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    }
}
if (false) {
    /** @type {?} */
    FileLikeObject.prototype.lastModifiedDate;
    /** @type {?} */
    FileLikeObject.prototype.size;
    /** @type {?} */
    FileLikeObject.prototype.type;
    /** @type {?} */
    FileLikeObject.prototype.name;
    /** @type {?} */
    FileLikeObject.prototype.rawFile;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1saWtlLW9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtZGlwL2RhdGEtaW1wLWV4cC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL1VwbG9hZGVyU2VydmljZS9GaWxlVXBsb2FkL2ZpbGUtbGlrZS1vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU0sT0FBTyxjQUFjOzs7O0lBT3ZCLFlBQW1CLFdBQWdCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDOztjQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7O2NBQ3JDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVzs7Y0FDNUQsT0FBTyxHQUFHLE9BQU8sZ0JBQWdCLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVE7O2NBQ3RFLE1BQU0sR0FBRyxZQUFZLEdBQUcsT0FBTztRQUNyQyxDQUFDLG1CQUFBLElBQUksRUFBTyxDQUFDLENBQUUsTUFBTSxDQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUNELFNBQVMsQ0FBQyxJQUFTO1FBQ2YsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDOzs7OztJQUNELGtCQUFrQixDQUFDLElBQVk7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQzs7Ozs7SUFDSCxnQkFBZ0IsQ0FBQyxNQUFvRDtRQUNqRSxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQixDQUFDO0NBQ047OztJQTVCRywwQ0FBNkI7O0lBQzdCLDhCQUFpQjs7SUFDakIsOEJBQW9COztJQUNwQiw4QkFBb0I7O0lBQ3BCLGlDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBGaWxlTGlrZU9iamVjdCB7XHJcbiAgICBwdWJsaWMgbGFzdE1vZGlmaWVkRGF0ZTogYW55O1xyXG4gICAgcHVibGljIHNpemU6IGFueTtcclxuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHJhd0ZpbGU6IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZmlsZU9ySW5wdXQ6IGFueSkge1xyXG4gICAgdGhpcy5yYXdGaWxlID0gZmlsZU9ySW5wdXQ7XHJcbiAgICBjb25zdCBpc0lucHV0ID0gdGhpcy5pc0VsZW1lbnQoZmlsZU9ySW5wdXQpO1xyXG4gICAgY29uc3QgZmFrZVBhdGhPck9iamVjdCA9IGlzSW5wdXQgPyBmaWxlT3JJbnB1dC52YWx1ZSA6IGZpbGVPcklucHV0O1xyXG4gICAgY29uc3QgcG9zdGZpeCA9IHR5cGVvZiBmYWtlUGF0aE9yT2JqZWN0ID09PSAnc3RyaW5nJyA/ICdGYWtlUGF0aCcgOiAnT2JqZWN0JztcclxuICAgIGNvbnN0IG1ldGhvZCA9ICdjcmVhdGVGcm9tJyArIHBvc3RmaXg7XHJcbiAgICAodGhpcyBhcyBhbnkpWyBtZXRob2QgXShmYWtlUGF0aE9yT2JqZWN0KTtcclxuICAgIH1cclxuICAgIGlzRWxlbWVudChub2RlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISEobm9kZSAmJiAobm9kZS5ub2RlTmFtZSB8fCBub2RlLnByb3AgJiYgbm9kZS5hdHRyICYmIG5vZGUuZmluZCkpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlRnJvbUZha2VQYXRoKHBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubGFzdE1vZGlmaWVkRGF0ZSA9IHZvaWQgMDtcclxuICAgICAgICB0aGlzLnNpemUgPSB2b2lkIDA7XHJcbiAgICAgICAgdGhpcy50eXBlID0gJ2xpa2UvJyArIHBhdGguc2xpY2UocGF0aC5sYXN0SW5kZXhPZignLicpICsgMSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBwYXRoLnNsaWNlKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIHBhdGgubGFzdEluZGV4T2YoJ1xcXFwnKSArIDIpO1xyXG4gICAgICB9XHJcbiAgICBjcmVhdGVGcm9tT2JqZWN0KG9iamVjdDogeyBzaXplOiBudW1iZXIsIHR5cGU6IHN0cmluZywgbmFtZTogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNpemUgPSBvYmplY3Quc2l6ZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBvYmplY3QudHlwZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBvYmplY3QubmFtZTtcclxuICAgICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiJdfQ==