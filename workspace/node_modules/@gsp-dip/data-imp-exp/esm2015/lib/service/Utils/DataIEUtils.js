/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultLang } from '../../i18n/default-lang';
import { of, Subject } from 'rxjs';
import { FileConst } from '../../model/utils/FileConst';
/**
 * @param {?} obj
 * @return {?}
 */
export function isNullOrUndefined(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj === null) {
        return true;
    }
    return false;
}
/**
 * @param {?} obj
 * @return {?}
 */
export function isNullOrEmpty(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj === null) {
        return true;
    }
    if (obj.length == 0) {
        return true;
    }
    return false;
}
/**
 * @param {?} str
 * @return {?}
 */
export function isNullOrBlank(str) {
    if (str == null) {
        return true;
    }
    if (str.trim().length == 0) {
        return true;
    }
    return false;
}
/**
 * @param {?} paraName
 * @return {?}
 */
export function getQueryString(paraName) {
    /** @type {?} */
    const url = window.location.hash;
    /** @type {?} */
    const arrObj = url.split('?');
    if (arrObj.length > 1) {
        /** @type {?} */
        const arrPara = arrObj[1].split('&');
        /** @type {?} */
        let arr;
        // tslint:disable-next-line: prefer-for-of
        for (let i = 0; i < arrPara.length; i++) {
            arr = arrPara[i].split('=');
            if (arr != null && arr[0] === paraName) {
                return arr[1];
            }
        }
        return '';
    }
    else {
        return '';
    }
}
export class FileTypeUtil {
    /**
     * @param {?} valueField
     * @return {?}
     */
    static getFileExtension(valueField) {
        /** @type {?} */
        let suffix = null;
        switch (valueField) {
            case FileConst.xls:
                suffix = '.xls';
                break;
            case FileConst.xlsx:
                suffix = '.xlsx';
                break;
            case FileConst.xlsm:
                suffix = '.xlsm';
                break;
            case FileConst.et:
                suffix = '.et';
                break;
            case FileConst.xml:
                suffix = '.xml';
                break;
            case FileConst.pdf:
                suffix = '.pdf';
                break;
            case FileConst.csv:
                suffix = '.csv';
                break;
            default:
                break;
        }
        return suffix;
    }
    /**
     * @param {?} fileType
     * @return {?}
     */
    static getFileTypeName(fileType) {
        /** @type {?} */
        let fileTypeName = '';
        switch (fileType) {
            case 'XLS':
                fileTypeName = FileConst.xls;
                break;
            case 'XLSX':
                fileTypeName = FileConst.xlsx;
                break;
            case 'XLSM':
                fileTypeName = FileConst.xlsm;
                break;
            case 'ET':
                fileTypeName = FileConst.et;
                break;
            case 'XML':
                fileTypeName = FileConst.xml;
                break;
            case 'PDF':
                fileTypeName = FileConst.pdf;
                break;
            case 'CSV':
                fileTypeName = FileConst.csv;
                break;
            default:
                break;
        }
        return fileTypeName;
    }
}
export class DataIEUtils {
    /**
     * @param {?} repository
     * @param {?} option
     * @return {?}
     */
    static ChooseSu(repository, option) {
        /** @type {?} */
        let su = '';
        // 通用导入导出仓库存在，使用下面分支
        if (repository !== null) {
            /** @type {?} */
            const befRestService = DataIEUtils.GetBefRestService(repository);
            su = DataIEUtils.getSu(befRestService.baseUri);
        }
        // 手工开发的仓库不存在，采用传入的su
        if (option['su'] !== undefined && option['su'] !== null) {
            su = option['su'];
        }
        return su;
    }
    /**
     * @param {?} preurl
     * @return {?}
     */
    static getSu(preurl) {
        /** @type {?} */
        const str = preurl.substring(preurl.indexOf("//") + 2);
        /** @type {?} */
        let strs = str.split('/');
        /** @type {?} */
        const su = strs[3];
        return su;
    }
    /**
     * @param {?} preurl
     * @return {?}
     */
    static getApp(preurl) {
        /** @type {?} */
        const str = preurl.substring(preurl.indexOf("//") + 2);
        /** @type {?} */
        let strs = str.split('/');
        /** @type {?} */
        const app = strs[2];
        return app;
    }
    /**
     * @param {?} preurl
     * @return {?}
     */
    static getPort(preurl) {
        // "http://localhost:5000/api/scm/sd/v1.0"
        /** @type {?} */
        const str = preurl.substring(preurl.indexOf("//") + 2);
        // 只取前两位，51xx,50xx,52xx
        /** @type {?} */
        const port = str.substr(str.indexOf(':') + 1, 2);
        return port;
    }
    /**
     * @param {?} repository
     * @return {?}
     */
    static GetBefRestService(repository) {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (repository));
        return befRepository.restService;
    }
    /**
     * @param {?} baseUrl
     * @return {?}
     */
    static GetPreUrl(baseUrl) {
        /** @type {?} */
        const lastIndex = baseUrl.lastIndexOf('/');
        /** @type {?} */
        const preurl = baseUrl.substr(0, lastIndex);
        return preurl;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static JudgeIllegalChar(str) {
        /** @type {?} */
        const illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ',', ' '];
        illegalChar.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (str.indexOf(item) !== -1) {
                return true;
            }
        }));
        return false;
    }
    /**
     * @param {?} http
     * @return {?}
     */
    static getTranslateValue(http) {
        /** @type {?} */
        let lang;
        if (localStorage === undefined || localStorage === null) {
            return of(DefaultLang['zh-CHS']);
        }
        lang = localStorage.getItem('languageCode');
        if (lang === undefined || lang === null || lang === 'zh-CHS') {
            return of(DefaultLang['zh-CHS']);
        }
        if (http === undefined || http === null) {
            return of(DefaultLang['zh-CHS']);
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let url = `/platform/common/web/@gsp-dip/i18n/${lang}.json`;
        http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            console.log(data);
            subject.next(data);
        }));
        return subject;
    }
}
//# sourceMappingURL=data:application/json;base64,