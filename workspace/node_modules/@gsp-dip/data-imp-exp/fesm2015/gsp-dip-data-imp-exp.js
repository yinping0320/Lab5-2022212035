import { FormsModule } from '@angular/forms';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { GridModule, PDFModule, ExcelModule } from '@progress/kendo-angular-grid';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { FilterModule } from '@farris/ui-filter-editor';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { PopoverModule } from '@farris/ui-popover';
import { CommonModule } from '@angular/common';
import { MessagerService } from '@farris/ui-messager';
import { InputGroupModule } from '@farris/ui-input-group';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisButtonModule } from '@farris/ui-button';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { ProgressModule } from '@farris/ui-progress';
import { FarrisFormsModule } from '@farris/ui-forms';
import { DatagridModule } from '@farris/ui-datagrid';
import { LayoutModule as LayoutModule$1 } from '@farris/ui-layout';
import { DatagridFilterRowModule } from '@farris/ui-datagrid-filter';
import { FarrisSectionModule } from '@farris/ui-section';
import { Component, Input, EventEmitter, Output, ViewChild, Injectable, ComponentFactoryResolver, Injector, ElementRef, HostListener, Directive, NgModule, defineInjectable, inject, INJECTOR } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { FrameContext, BindingData } from '@farris/devkit';
import { ListDataService, EntityListService } from '@farris/command-services';
import { NotifyService } from '@farris/ui-notify';
import { of, Subject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { LoadingService } from '@farris/ui-loading';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DefaultLang = {
    "zh-CHS": {
        "import_file": "导入文件",
        "choose_file": "选择文件",
        "import_placeholder": "请选择需要导入的文件",
        "file_type": "文件类型",
        "download_template": "下载模板",
        "ie_cancel": "取消",
        "ie_ok": "确定",
        "data_import": "数据导入",
        "data_export": "数据导出",
        "data_export_customfile": "自选文件类型数据导出",
        "choose_truefile": "请重新选择上传的文件",
        "download_template_ok": "下载模板成功",
        "download_template_fail": "下载模板失败！失败原因：",
        "upload_fail": "上传失败！原因：",
        "import_success": "文件导入成功！",
        "import_form_success": "数据导入表单成功！",
        "import_fail": "文件导入失败！失败原因：",
        "master_table_noid": "未获取到主表ID值，请确认主表是否有数据",
        "bind_form_error": "绑定数据错误，请检查数据是否有重复",
        "validate_result_show": "校验结果展示",
        "file_download_fail": "文件下载失败",
        "export_success": "导出成功，请等待文件下载完成",
        "export_fail": "导出失败！失败原因：",
        "download_vsto": "下载Excel组件",
        "export_pdf": "导出PDF",
        "order": "序号",
        "validate_type": "校验类型",
        "table_name": "对象名称",
        "illegal_data_location": "数据校验信息",
        "validate_result": "校验结果.pdf",
        "wps_table": "WPS 表格(*.et)",
        "wps_table_m": "WPS 表格（模板文件）(*.ett)",
        "customexport_no_column": "【选中信息项】未包含有效的字段，请选择！",
        "vsto_component": "数据导出组件.msi",
        "data_entity": "数据实体",
        "selected_item": "选中信息项",
        "upload_filetype_nomatch": "上传的文件与选择的文件类型不匹配",
        "save_customrule_fail": "保存自定义导入规则失败，失败原因：",
        "ruleselect_code": "编号",
        "ruleselect_name": "名称",
        "ruleselect_rulesource": "规则来源",
        "ruleselect_syspreset": "系统预置",
        "ruleselect_custom": "自定义",
        "ruleselect_billcategory": "单据种类",
        "ruleselect_creator": "创建人",
        "ruleselect_filetype": "文件类型",
        "ruleselect_selectrulenotify": "请选择一条规则",
        "rule_list": "规则选择",
        "select_data_export": "请先选择要导出的数据",
        "select_xlsx_notify": "该文件类型不支持宏设置，会导致部分下拉帮助失效，请知晓",
        "ruleselect_updatetime": "更新时间",
        "ruleselect_listempty": "可选规则列表为空",
        "import_loading": "正在导入...",
        "after_validate_suspend": "请修改文件重新进行导入",
        "MandatoryImport": "强制导入",
        "Ignore": "忽略",
        "AllMandatoryImport": "全部强制导入",
        "AllIgnore": "全部忽略",
        "export_validate_result": "导出校验结果",
        "continue": "继续",
        "cancel": "中止",
        "you_have": "您有",
        "warning_info": "条校验不符合项，如继续执行，被忽略的数据将不会被导入系统，强制导入可能会影响数据的质量",
        "error_info": "条校验不符合项，请参照校验信息修改导入模板",
        "security_level": "密级等级",
        "importfile_toobig": "当前导入文件太大，最大允许的文件大小：",
        "partdata-import-success": "部分数据导入完成",
        "operation": "操作",
        "product_preset": "产品预置",
        "project_define": "项目定义",
        "user_custom": "用户自定义"
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileConst {
}
FileConst.xls = 'Office Excel97-2003(*.xls)';
FileConst.xlsx = 'Office Excel(*.xlsx)';
FileConst.xlsm = 'Office Excel Macro(*.xlsm)';
FileConst.et = 'WPS Table(*.et)';
FileConst.xml = 'XML File(*.xml)';
FileConst.pdf = 'PDF File(*.pdf)';
FileConst.csv = 'CSV File(*.csv)';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isNullOrUndefined(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj === null) {
        return true;
    }
    return false;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isNullOrEmpty(obj) {
    if (obj === undefined) {
        return true;
    }
    if (obj === null) {
        return true;
    }
    if (obj.length == 0) {
        return true;
    }
    return false;
}
/**
 * @param {?} str
 * @return {?}
 */
function isNullOrBlank(str) {
    if (str == null) {
        return true;
    }
    if (str.trim().length == 0) {
        return true;
    }
    return false;
}
/**
 * @param {?} paraName
 * @return {?}
 */
function getQueryString(paraName) {
    /** @type {?} */
    const url = window.location.hash;
    /** @type {?} */
    const arrObj = url.split('?');
    if (arrObj.length > 1) {
        /** @type {?} */
        const arrPara = arrObj[1].split('&');
        /** @type {?} */
        let arr;
        // tslint:disable-next-line: prefer-for-of
        for (let i = 0; i < arrPara.length; i++) {
            arr = arrPara[i].split('=');
            if (arr != null && arr[0] === paraName) {
                return arr[1];
            }
        }
        return '';
    }
    else {
        return '';
    }
}
class FileTypeUtil {
    /**
     * @param {?} valueField
     * @return {?}
     */
    static getFileExtension(valueField) {
        /** @type {?} */
        let suffix = null;
        switch (valueField) {
            case FileConst.xls:
                suffix = '.xls';
                break;
            case FileConst.xlsx:
                suffix = '.xlsx';
                break;
            case FileConst.xlsm:
                suffix = '.xlsm';
                break;
            case FileConst.et:
                suffix = '.et';
                break;
            case FileConst.xml:
                suffix = '.xml';
                break;
            case FileConst.pdf:
                suffix = '.pdf';
                break;
            case FileConst.csv:
                suffix = '.csv';
                break;
            default:
                break;
        }
        return suffix;
    }
    /**
     * @param {?} fileType
     * @return {?}
     */
    static getFileTypeName(fileType) {
        /** @type {?} */
        let fileTypeName = '';
        switch (fileType) {
            case 'XLS':
                fileTypeName = FileConst.xls;
                break;
            case 'XLSX':
                fileTypeName = FileConst.xlsx;
                break;
            case 'XLSM':
                fileTypeName = FileConst.xlsm;
                break;
            case 'ET':
                fileTypeName = FileConst.et;
                break;
            case 'XML':
                fileTypeName = FileConst.xml;
                break;
            case 'PDF':
                fileTypeName = FileConst.pdf;
                break;
            case 'CSV':
                fileTypeName = FileConst.csv;
                break;
            default:
                break;
        }
        return fileTypeName;
    }
}
class DataIEUtils {
    /**
     * @param {?} repository
     * @param {?} option
     * @return {?}
     */
    static ChooseSu(repository, option) {
        /** @type {?} */
        let su = '';
        // 通用导入导出仓库存在，使用下面分支
        if (repository !== null) {
            /** @type {?} */
            const befRestService = DataIEUtils.GetBefRestService(repository);
            su = DataIEUtils.getSu(befRestService.baseUri);
        }
        // 手工开发的仓库不存在，采用传入的su
        if (option['su'] !== undefined && option['su'] !== null) {
            su = option['su'];
        }
        return su;
    }
    /**
     * @param {?} preurl
     * @return {?}
     */
    static getSu(preurl) {
        /** @type {?} */
        const str = preurl.substring(preurl.indexOf("//") + 2);
        /** @type {?} */
        let strs = str.split('/');
        /** @type {?} */
        const su = strs[3];
        return su;
    }
    /**
     * @param {?} preurl
     * @return {?}
     */
    static getApp(preurl) {
        /** @type {?} */
        const str = preurl.substring(preurl.indexOf("//") + 2);
        /** @type {?} */
        let strs = str.split('/');
        /** @type {?} */
        const app = strs[2];
        return app;
    }
    /**
     * @param {?} preurl
     * @return {?}
     */
    static getPort(preurl) {
        // "http://localhost:5000/api/scm/sd/v1.0"
        /** @type {?} */
        const str = preurl.substring(preurl.indexOf("//") + 2);
        // 只取前两位，51xx,50xx,52xx
        /** @type {?} */
        const port = str.substr(str.indexOf(':') + 1, 2);
        return port;
    }
    /**
     * @param {?} repository
     * @return {?}
     */
    static GetBefRestService(repository) {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (repository));
        return befRepository.restService;
    }
    /**
     * @param {?} baseUrl
     * @return {?}
     */
    static GetPreUrl(baseUrl) {
        /** @type {?} */
        const lastIndex = baseUrl.lastIndexOf('/');
        /** @type {?} */
        const preurl = baseUrl.substr(0, lastIndex);
        return preurl;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static JudgeIllegalChar(str) {
        /** @type {?} */
        const illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ',', ' '];
        illegalChar.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (str.indexOf(item) !== -1) {
                return true;
            }
        }));
        return false;
    }
    /**
     * @param {?} http
     * @return {?}
     */
    static getTranslateValue(http) {
        /** @type {?} */
        let lang;
        if (localStorage === undefined || localStorage === null) {
            return of(DefaultLang['zh-CHS']);
        }
        lang = localStorage.getItem('languageCode');
        if (lang === undefined || lang === null || lang === 'zh-CHS') {
            return of(DefaultLang['zh-CHS']);
        }
        if (http === undefined || http === null) {
            return of(DefaultLang['zh-CHS']);
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let url = `/platform/common/web/@gsp-dip/i18n/${lang}.json`;
        http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            console.log(data);
            subject.next(data);
        }));
        return subject;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ElementSelectComponent {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.cols = [];
        this.selectedKeys = [];
        this.newSelectedKeys = [];
        // public isNewExpanded = true;
        this.keys = [];
        this.newKeys = [];
        this.Model = null;
        this.CustomModel = null;
        this.InnerModel = null;
        this.TreeData = null;
        this.NewData = null;
        this.isExpanded = (/**
         * @param {?} dataItem
         * @param {?} index
         * @return {?}
         */
        (dataItem, index) => {
            return this.keys.indexOf(index) > -1;
        });
        this.isNewExpanded = (/**
         * @param {?} dataItem
         * @param {?} index
         * @return {?}
         */
        (dataItem, index) => {
            return this.newKeys.indexOf(index) > -1;
        });
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.data_entity = res['data_entity'];
            this.selected_item = res['selected_item'];
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //暂时屏蔽
        // this.checkRightData();
        this.TreeData = this.OrganizeLeftTreeOriginal();
        this.NewData = this.OrganizeRightTreeOriginal();
    }
    /**
     * @return {?}
     */
    checkRightData() {
        if (this.CustomModel !== null) {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            /** @type {?} */
            const elements = mainObj['Elements'];
            /** @type {?} */
            const customMainObj = this.CustomModel['MainObject'];
            /** @type {?} */
            const customElements = customMainObj['Elements'];
            for (let i = 0; i < customElements.length; i++) {
                /** @type {?} */
                const ele = customElements[i];
                /** @type {?} */
                const idx = elements.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e['ID'] === ele['ID']));
                if (idx < 0) {
                    customElements.splice(i, 1);
                    i--;
                }
            }
        }
    }
    // 组织右侧树，将模型转换为可以展示的Json结构。
    /**
     * @private
     * @return {?}
     */
    OrganizeRightTreeOriginal() {
        /** @type {?} */
        const tree = [];
        if (this.CustomModel !== null) {
            /** @type {?} */
            const mainObj = this.CustomModel['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
        }
        else {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
        }
        return tree;
    }
    // 组织左侧树
    /**
     * @private
     * @return {?}
     */
    OrganizeLeftTreeOriginal() {
        /** @type {?} */
        const tree = [];
        if (this.CustomModel !== null) {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            /** @type {?} */
            const customMainObj = this.CustomModel['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OraganizeMinusObj(mainObj, customMainObj) });
        }
        else {
            /** @type {?} */
            const mainObj = this.Model['MainObject'];
            tree.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
        }
        return tree;
    }
    // 组织列，customObj：从数据库中获取的对象，obj：外面传入的对象。
    /**
     * @private
     * @param {?} obj
     * @param {?} customObj
     * @return {?}
     */
    OraganizeMinusObj(obj, customObj) {
        // const items = [];
        // obj['Elements'].forEach(ele => {
        //   const customEle = customObj['Elements'].find(t => t['ID'] === ele['ID']);
        //   if (customEle === null || customEle === undefined) {
        //     if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
        //       const udtItems = this.OrganizeUdtElements(ele['UdtElements'], customEle['UdtElements']);
        //     } else {
        //       items.push({id: ele['ID'], text: ele['Name'], code: ele['Code'], order: ele['Order']});
        //     }
        //   }
        // });
        /** @type {?} */
        const items = this.OrganizeElementsWithUdtMinus(obj['Elements'], customObj['Elements']);
        if (obj['ChildrenDeo'].length > 0) {
            obj['ChildrenDeo'].forEach((/**
             * @param {?} deo
             * @return {?}
             */
            deo => {
                /** @type {?} */
                const customChildDeo = customObj['ChildrenDeo'].find((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t['ID'] === deo['ID']));
                items.push({ id: deo['ID'], code: deo['Code'], text: deo['FileObjectName'], items: this.OraganizeMinusObj(deo, customChildDeo) });
            }));
        }
        return items;
    }
    // 获取左右树udt字段的差
    /**
     * @private
     * @param {?} newUdtEles
     * @param {?} udtEles
     * @return {?}
     */
    OrganizeElementsWithUdtMinus(newUdtEles, udtEles) {
        /** @type {?} */
        const items = [];
        newUdtEles.forEach((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            /** @type {?} */
            const customEle = udtEles.find((/**
             * @param {?} t
             * @return {?}
             */
            t => t['ID'] === ele['ID']));
            if (customEle === null || customEle === undefined) {
                if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                    /** @type {?} */
                    const udtItems = this.OrganizeElementsWithUdt(ele['UdtElements']);
                    if (udtItems.length > 0) {
                        items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                    }
                }
                else {
                    items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                }
            }
            else {
                if (ele['UdtElements'] !== null && ele['UdtElements'] !== undefined && ele['UdtElements'].length > 0) {
                    /** @type {?} */
                    const udtItems = this.OrganizeElementsWithUdtMinus(ele['UdtElements'], customEle['UdtElements']);
                    if (udtItems.length > 0) {
                        items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                    }
                }
            }
        }));
        return items;
    }
    // 添加子对象Json串
    // private OrganizeChildObjJson(obj): any[] {
    //   const items = [];
    //   if (obj['ChildrenDeo'].length > 0) {
    //     obj['ChildrenDeo'].forEach(deo => items.push({id: deo['ID'], code: deo['Code'], text: deo['Name'],
    //     items: this.OrganizeChildObjJson(deo)}));
    //   }
    //   return items;
    // }
    // 添加对象Json串
    /**
     * @private
     * @param {?} obj
     * @param {?} addEle
     * @return {?}
     */
    OrganizeObjJson(obj, addEle) {
        /** @type {?} */
        let items = [];
        if (addEle) {
            items = this.OrganizeElementsWithUdt(obj['Elements']);
            // obj['Elements'].forEach(ele => items.push({id: ele['ID'], text: ele['Name'], code: ele['Code'], order: ele['Order']}));
        }
        if (obj['ChildrenDeo'].length > 0) {
            obj['ChildrenDeo'].forEach((/**
             * @param {?} deo
             * @return {?}
             */
            deo => items.push({
                id: deo['ID'], code: deo['Code'], text: deo['FileObjectName'],
                items: this.OrganizeObjJson(deo, addEle)
            })));
        }
        return items;
    }
    /**
     * @private
     * @param {?} eles
     * @return {?}
     */
    OrganizeElementsWithUdt(eles) {
        /** @type {?} */
        const items = [];
        eles.forEach((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            if (ele['UdtElements'].length > 0) {
                /** @type {?} */
                const udtItems = this.OrganizeElementsWithUdt(ele['UdtElements']);
                if (udtItems.length > 0) {
                    items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'], items: udtItems });
                }
                else {
                    items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
                }
            }
            else {
                items.push({ id: ele['ID'], text: ele['FileElementName'], code: ele['Code'], order: ele['Order'] });
            }
        }));
        return items;
    }
    // 右移
    /**
     * @return {?}
     */
    RightMove() {
        if (this.selectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.selectedKeys[0]);
        this.MoveData(indexes, this.TreeData, '', this.NewData);
    }
    // 左移
    /**
     * @return {?}
     */
    LeftMove() {
        if (this.newSelectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.newSelectedKeys[0]);
        this.MoveData(indexes, this.NewData, '', this.TreeData);
    }
    /**
     * @private
     * @param {?} sKeys
     * @return {?}
     */
    GetIndexes(sKeys) {
        /** @type {?} */
        const arr = sKeys.split('_');
        arr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
        }));
        return arr;
    }
    /**
     * @private
     * @param {?} indexes
     * @param {?} data
     * @param {?} objId
     * @param {?} newData
     * @return {?}
     */
    MoveData(indexes, data, objId, newData) {
        /** @type {?} */
        const index = indexes.shift();
        if (indexes.length > 0) {
            this.MoveData(indexes, data[index].items, data[index].id, newData);
        }
        else {
            if (data[index].order !== undefined) {
                /** @type {?} */
                const result = this.AddData(objId, newData, data[index]);
                if (!result) {
                    return;
                }
                data.splice(index, 1);
            }
        }
    }
    /**
     * @private
     * @param {?} mainId
     * @param {?} newData
     * @param {?} data
     * @return {?}
     */
    AddData(mainId, newData, data) {
        // 先找到所属对象
        /** @type {?} */
        const obj = this.FindObjAndIndex(mainId, newData, '');
        if (obj === null) {
            return false;
        }
        // 找到要插入的位置
        /** @type {?} */
        const index = this.FindColIndex(obj.dataItem.items, data.order);
        obj.dataItem.items.splice(index, 0, data);
        this.handleNewExpand(obj);
        return true;
    }
    /**
     * @private
     * @param {?} mainId
     * @param {?} data
     * @param {?} parentIndex
     * @return {?}
     */
    FindObjAndIndex(mainId, data, parentIndex) {
        /** @type {?} */
        let result = null;
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < data.length; i++) {
            if (data[i].id === mainId) {
                if (parentIndex !== '') {
                    result = { index: parentIndex + '_' + i.toString(), dataItem: data[i] };
                }
                else {
                    result = { index: i.toString(), dataItem: data[i] };
                }
            }
            else if (data[i].items !== undefined && data[i].items.length > 0) {
                result = this.FindObjAndIndex(mainId, data[i].items, i.toString());
            }
            if (result == null) {
                continue;
            }
            else {
                return result;
            }
        }
        return result;
    }
    /**
     * @private
     * @param {?} items
     * @param {?} order
     * @return {?}
     */
    FindColIndex(items, order) {
        /** @type {?} */
        let index = -1;
        if (items.length === 0) {
            return 0;
        }
        for (let i = 0; i < items.length; i++) {
            if (items[i].order < order) {
                index = i;
            }
            else {
                break;
            }
        }
        return index + 1;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleCollapse(node) {
        this.keys = this.keys.filter((/**
         * @param {?} k
         * @return {?}
         */
        k => k !== node.index));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleExpand(node) {
        console.log(node);
        this.keys = this.keys.concat(node.index);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleNewCollapse(node) {
        this.newKeys = this.newKeys.filter((/**
         * @param {?} k
         * @return {?}
         */
        k => k !== node.index));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    handleNewExpand(node) {
        console.log(node);
        this.newKeys = this.newKeys.concat(node.index);
    }
    /**
     * @return {?}
     */
    RightMoveAll() {
        // this.ClearTree(this.TreeData);
        // this.FillTree(this.NewData);
        this.TreeData = [];
        /** @type {?} */
        const mainObj = this.Model['MainObject'];
        this.TreeData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
        // this.FillTree(this.TreeData);
        this.NewData = [];
        this.NewData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
    }
    /**
     * @param {?} t
     * @return {?}
     */
    FillTree(t) {
        t = [];
        /** @type {?} */
        const mainObj = this.Model['MainObject'];
        t.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
    }
    /**
     * @param {?} t
     * @return {?}
     */
    ClearTree(t) {
        // t = [];
        // const mainObj = this.Model['MainObject'];
        // t.push({id: mainObj['ID'], code: mainObj['Code'], text: mainObj['Name'], items: this.OrganizeObjJson(mainObj, false)});
        t = [];
    }
    /**
     * @return {?}
     */
    LeftMoveAll() {
        // this.ClearTree(this.NewData);
        this.NewData = [];
        /** @type {?} */
        const mainObj = this.Model['MainObject'];
        this.NewData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, false) });
        // this.FillTree(this.TreeData);
        this.TreeData = [];
        this.TreeData.push({ id: mainObj['ID'], code: mainObj['Code'], text: mainObj['FileObjectName'], items: this.OrganizeObjJson(mainObj, true) });
    }
    /**
     * @return {?}
     */
    MoveUp() {
        if (this.newSelectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.newSelectedKeys[0]);
        /** @type {?} */
        const lastIndex = indexes.pop();
        /** @type {?} */
        const items = this.GetItems(indexes, this.NewData);
        if (items[lastIndex].order === undefined || items[lastIndex].order === 0) {
            return;
        }
        /** @type {?} */
        const temp = items[lastIndex].order;
        items[lastIndex].order = items[lastIndex - 1].order;
        items[lastIndex - 1].order = temp;
        items.splice(lastIndex - 1, 0, items[lastIndex]);
        items.splice(Number(lastIndex) + 1, 1);
        /** @type {?} */
        const parentIndex = this.newSelectedKeys[0];
        this.newSelectedKeys[0] = parentIndex.substring(0, parentIndex.lastIndexOf('_') + 1) + (lastIndex - 1);
    }
    /**
     * @private
     * @param {?} indexes
     * @param {?} data
     * @return {?}
     */
    GetItems(indexes, data) {
        if (indexes.length === 0) {
            return data;
        }
        /** @type {?} */
        const index = indexes.shift();
        return this.GetItems(indexes, data[index].items);
    }
    /**
     * @return {?}
     */
    MoveDown() {
        if (this.newSelectedKeys.length === 0) {
            return;
        }
        /** @type {?} */
        const indexes = this.GetIndexes(this.newSelectedKeys[0]);
        /** @type {?} */
        const lastIndex = indexes.pop();
        /** @type {?} */
        const items = this.GetItems(indexes, this.NewData);
        if (items.length === lastIndex || items[Number(lastIndex) + 1] === undefined || items[Number(lastIndex) + 1].order === undefined
            || items[lastIndex].order === undefined) {
            return;
        }
        /** @type {?} */
        const temp = items[lastIndex].order;
        items[lastIndex].order = items[Number(lastIndex) + 1].order;
        items[Number(lastIndex) + 1].order = temp;
        items.splice(Number(lastIndex) + 2, 0, items[lastIndex]);
        items.splice(lastIndex, 1);
        /** @type {?} */
        const parentIndex = this.newSelectedKeys[0];
        this.newSelectedKeys[0] = parentIndex.substring(0, parentIndex.lastIndexOf('_') + 1) + (Number(lastIndex) + 1);
    }
    /**
     * @return {?}
     */
    Save() {
        // 传入的模型的主对象
        if (this.InnerModel == null) {
            this.InnerModel = this.Model;
        }
        /** @type {?} */
        const mainObj = this.InnerModel['MainObject'];
        /** @type {?} */
        const newMainObj = this.NewData[0];
        /** @type {?} */
        const preMainObj = this.Model['MainObject'];
        mainObj['Elements'] = this.OrganizeElements(preMainObj['Elements'], newMainObj);
        this.OrganizeChildrenDeo(mainObj, newMainObj, preMainObj);
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} newObj
     * @param {?} preMainObj
     * @return {?}
     */
    OrganizeChildrenDeo(obj, newObj, preMainObj) {
        if (obj['ChildrenDeo'] !== undefined && obj['ChildrenDeo'].length > 0) {
            /** @type {?} */
            const newChildrenDeo = [];
            obj['ChildrenDeo'].forEach((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                /** @type {?} */
                const childDeo = newObj['items'].find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item['id'] === t['ID']));
                /** @type {?} */
                const preChildObj = preMainObj['ChildrenDeo'].find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item['ID'] === t['ID']));
                if (childDeo !== null && childDeo !== undefined) {
                    t['Elements'] = this.OrganizeElements(preChildObj['Elements'], childDeo);
                    if (t['Elements'] !== undefined && t['Elements'] !== null) {
                        newChildrenDeo.push(t);
                    }
                }
                this.OrganizeChildrenDeo(t, childDeo, preChildObj);
            }));
            obj['ChildrenDeo'] = newChildrenDeo;
        }
    }
    // 保存时组织列, obj: 外部传入的列，newObj: 编辑后新的列
    /**
     * @private
     * @param {?} obj
     * @param {?} newObj
     * @return {?}
     */
    OrganizeElements(obj, newObj) {
        /** @type {?} */
        const newEles = newObj['items'];
        /** @type {?} */
        const eles = [];
        newEles.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const ele = obj.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e['ID'] === t['id']));
            if (ele !== undefined && ele !== null) {
                eles.push(ele);
            }
        }));
        return eles;
    }
}
ElementSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-element-select',
                template: "<div *ngIf=\"Model\" class=\"row inner\">\r\n  <div class=\"col-lg-5 col-md-5\">\r\n    <div>\r\n      <div>\r\n        {{data_entity}}\r\n      </div>\r\n      \r\n      <div class=\"hasborder\" style=\"height:330px;overflow-y:auto\">\r\n        <kendo-treeview\r\n          [nodes]=\"TreeData\"\r\n          textField=\"text\"\r\n          kendoTreeViewExpandable\r\n          kendoTreeViewSelectable\r\n          kendoTreeViewHierarchyBinding\r\n          childrenField=\"items\"\r\n          [(selectedKeys)]=\"selectedKeys\"\r\n          [isExpanded]=\"isExpanded\"\r\n          (collapse)=\"handleCollapse($event)\"\r\n          (expand)=\"handleExpand($event)\"\r\n        >\r\n        \r\n        </kendo-treeview>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"col-lg-2 col-md-2 btn-group-vertical\" role=\"group\" aria-label=\"...\">\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"RightMove()\">></button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"LeftMove()\"><</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"RightMoveAll()\">>></button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"LeftMoveAll()\"><<</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"MoveUp()\">^</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"MoveDown()\">v</button>\r\n  </div>\r\n  <div class=\"col-lg-5 col-md-5\">\r\n    <div>\r\n      <div>\r\n        {{selected_item}}\r\n      </div>\r\n      <div class=\"hasborder\" style=\"height:330px;overflow-y:auto\">\r\n        <kendo-treeview\r\n          [nodes]=\"NewData\"\r\n          textField=\"text\"\r\n          kendoTreeViewExpandable\r\n          kendoTreeViewSelectable\r\n          kendoTreeViewHierarchyBinding\r\n          childrenField=\"items\"\r\n          [(selectedKeys)]=\"newSelectedKeys\"\r\n          [isExpanded]=\"isNewExpanded\"\r\n          (collapse)=\"handleNewCollapse($event)\"\r\n          (expand)=\"handleNewExpand($event)\"\r\n        >\r\n          <ng-template kendoTreeViewNodeTemplate let-dataItem>\r\n            {{dataItem.text}}\r\n            <span></span>\r\n          </ng-template>\r\n        </kendo-treeview>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- <div *ngIf=\"Model\" class=\"row inner\">\r\n\r\n  <multi-select [dataSource]=\"leftTreeData\" [idField]=\"'name'\" [valueField]=\"'type'\" [textField]=\"'name'\" [displayType]=\"'Tree'\"\r\n    [(selectedId)]=\"treeSelectedId\">\r\n    <ng-template farrisTemplate=\"text\" let-data>\r\n      {{ data['name'] }} [ {{ data['type'] }}]\r\n    </ng-template>\r\n  </multi-select>\r\n</div> -->",
                providers: [],
                styles: ["kendo-grid-column{line-height:30px}.inner{margin:5px}.btn{width:80px;margin-bottom:5px}.hasborder{border:.5px solid #a9a9a9;height:330px}"]
            }] }
];
/** @nocollapse */
ElementSelectComponent.ctorParameters = () => [
    { type: HttpClient }
];
ElementSelectComponent.propDecorators = {
    Model: [{ type: Input }],
    CustomModel: [{ type: Input }],
    InnerModel: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileLikeObject {
    /**
     * @param {?} fileOrInput
     */
    constructor(fileOrInput) {
        this.rawFile = fileOrInput;
        /** @type {?} */
        const isInput = this.isElement(fileOrInput);
        /** @type {?} */
        const fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        /** @type {?} */
        const postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        /** @type {?} */
        const method = 'createFrom' + postfix;
        ((/** @type {?} */ (this)))[method](fakePathOrObject);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isElement(node) {
        return !!(node && (node.nodeName || node.prop && node.attr && node.find));
    }
    /**
     * @param {?} path
     * @return {?}
     */
    createFromFakePath(path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    createFromObject(object) {
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileItem {
    /**
     * @param {?} uploader
     * @param {?} some
     * @param {?} options
     */
    constructor(uploader, some, options) {
        this.url = '/';
        this.headers = [];
        this.withCredentials = true;
        this.formData = [];
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        this.uploader = uploader;
        this.some = some;
        this.options = options;
        this.file = new FileLikeObject(some);
        this.lfile = some;
        if (uploader.options) {
            this.method = uploader.options.method || 'POST';
            this.alias = uploader.options.itemAlias || 'file';
        }
        this.url = uploader.options.url;
    }
    /**
     * @return {?}
     */
    upload() {
        try {
            this.uploader.uploadItem(this);
        }
        catch (e) {
            this.uploader._onCompleteItem(this, '', 0, {});
            this.uploader._onErrorItem(this, '', 0, {});
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.uploader.cancelItem(this);
    }
    /**
     * @return {?}
     */
    remove() {
        this.uploader.removeFromQueue(this);
    }
    /**
     * @return {?}
     */
    onBeforeUpload() {
        return void 0;
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onBuildForm(form) {
        return { form };
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    onProgress(progress) {
        return { progress };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onSuccess(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onError(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onCancel(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onComplete(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @return {?}
     */
    _onBeforeUpload() {
        this.isReady = true;
        this.isUploading = true;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this.onBeforeUpload();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    _onBuildForm(form) {
        this.onBuildForm(form);
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    _onProgress(progress) {
        this.progress = progress;
        this.onProgress(progress);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onSuccess(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        this.index = void 0;
        this.onSuccess(response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onError(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        this.index = void 0;
        this.onError(response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCancel(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        this.onCancel(response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onComplete(response, status, headers) {
        this.onComplete(response, status, headers);
        if (this.uploader.options.removeAfterUpload) {
            this.remove();
        }
    }
    /**
     * @return {?}
     */
    _prepareToUploading() {
        this.index = this.index || ++this.uploader.nextIndex;
        this.isReady = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileUploader {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.isUploading = false;
        this.queue = [];
        this.progress = 0;
        this.nextIndex = 0;
        this.options = {
            autoUpload: false,
            isHTML5: true,
            filters: [],
            removeAfterUpload: false,
            disableMultipart: false,
            formatDataFunction: (/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.lfile),
            formatDataFunctionIsAsync: false
        };
        this.setOptions(options);
        this.response = new EventEmitter();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        this.options = Object.assign(this.options, options);
        this.authToken = this.options.authToken;
        this.authTokenHeader = this.options.authTokenHeader || 'Authorization';
        this.autoUpload = this.options.autoUpload;
        this.options.filters.unshift({ name: 'queueLimit', fn: this.queueLimitFilter });
        if (this.options.maxFileSize) {
            this.options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });
        }
        if (this.options.allowedFileType) {
            this.options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });
        }
        if (this.options.allowedMimeType) {
            this.options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });
        }
        for (const item of this.queue) {
            item.url = this.options.url;
        }
    }
    /**
     * @param {?} files
     * @param {?=} options
     * @param {?=} filters
     * @return {?}
     */
    addToQueue(files, options, filters) {
        /** @type {?} */
        const list = [];
        for (const file of files) {
            list.push(file);
        }
        /** @type {?} */
        const arrayOfFilters = this._getFilters(filters);
        /** @type {?} */
        const count = this.queue.length;
        /** @type {?} */
        const addedFileItems = [];
        list.map((/**
         * @param {?} some
         * @return {?}
         */
        (some) => {
            if (!options) {
                options = this.options;
            }
            /** @type {?} */
            const temp = new FileLikeObject(some);
            if (this._isValidFile(temp, arrayOfFilters, options)) {
                /** @type {?} */
                const fileItem = new FileItem(this, some, options);
                addedFileItems.push(fileItem);
                this.queue.push(fileItem);
                this._onAfterAddingFile(fileItem);
            }
            else {
                /** @type {?} */
                const filter = arrayOfFilters[this.failFilterIndex];
                this._onWhenAddingFileFailed(temp, filter, options);
            }
        }));
        if (this.queue.length !== count) {
            this._onAfterAddingAll(addedFileItems);
            this.progress = this._getTotalProgress();
        }
        this._render();
        if (this.options.autoUpload) {
            this.uploadAll();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    removeFromQueue(value) {
        /** @type {?} */
        const index = this.getIndexOfItem(value);
        /** @type {?} */
        const item = this.queue[index];
        if (item.isUploading) {
            item.cancel();
        }
        this.queue.splice(index, 1);
        this.progress = this._getTotalProgress();
    }
    /**
     * @return {?}
     */
    clearQueue() {
        while (this.queue.length) {
            this.queue[0].remove();
        }
        this.progress = 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    uploadItem(value) {
        /** @type {?} */
        const index = this.getIndexOfItem(value);
        /** @type {?} */
        const item = this.queue[index];
        /** @type {?} */
        const transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';
        item._prepareToUploading();
        if (this.isUploading) {
            return;
        }
        this.isUploading = true;
        ((/** @type {?} */ (this)))[transport](item);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    cancelItem(value) {
        /** @type {?} */
        const index = this.getIndexOfItem(value);
        /** @type {?} */
        const item = this.queue[index];
        /** @type {?} */
        const prop = this.options.isHTML5 ? item.xhr : item.form;
        if (item && item.isUploading) {
            prop.abort();
        }
    }
    /**
     * @return {?}
     */
    uploadAll() {
        /** @type {?} */
        const items = this.getNotUploadedItems().filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => !item.isUploading));
        if (!items.length) {
            return;
        }
        items.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item._prepareToUploading()));
        items[0].upload();
    }
    /**
     * @return {?}
     */
    cancelAll() {
        /** @type {?} */
        const items = this.getNotUploadedItems();
        items.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.cancel()));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isFile(value) {
        return this.isFile(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isFileLikeObject(value) {
        return value instanceof FileLikeObject;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getIndexOfItem(value) {
        return typeof value === 'number' ? value : this.queue.indexOf(value);
    }
    /**
     * @return {?}
     */
    getNotUploadedItems() {
        // 修改 by 邹承元：此处是只上传没有上传过的文件，不适合导入导出场景，故修改为可以都上传。
        // return this.queue.filter((item: FileItem) => !item.isUploaded);
        return this.queue.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => true));
    }
    /**
     * @return {?}
     */
    getReadyItems() {
        return this.queue
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => (item.isReady && !item.isUploading)))
            .sort((/**
         * @param {?} item1
         * @param {?} item2
         * @return {?}
         */
        (item1, item2) => item1.index - item2.index));
    }
    /**
     * @return {?}
     */
    destroy() {
        return void 0;
    }
    /**
     * @param {?} fileItems
     * @return {?}
     */
    onAfterAddingAll(fileItems) {
        return { fileItems };
    }
    /**
     * @param {?} fileItem
     * @param {?} form
     * @return {?}
     */
    onBuildItemForm(fileItem, form) {
        return { fileItem, form };
    }
    /**
     * @param {?} fileItem
     * @return {?}
     */
    onAfterAddingFile(fileItem) {
        return { fileItem };
    }
    /**
     * @param {?} item
     * @param {?} filter
     * @param {?} options
     * @return {?}
     */
    onWhenAddingFileFailed(item, filter, options) {
        return { item, filter, options };
    }
    /**
     * @param {?} fileItem
     * @return {?}
     */
    onBeforeUploadItem(fileItem) {
        return { fileItem };
    }
    /**
     * @param {?} fileItem
     * @param {?} progress
     * @return {?}
     */
    onProgressItem(fileItem, progress) {
        return { fileItem, progress };
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    onProgressAll(progress) {
        return { progress };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onSuccessItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onErrorItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onCancelItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onCompleteItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @return {?}
     */
    onCompleteAll() {
        return void 0;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _mimeTypeFilter(item) {
        return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _fileSizeFilter(item) {
        return !(this.options.maxFileSize && item.size > this.options.maxFileSize);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _fileTypeFilter(item) {
        // return !(this.options.allowedFileType &&
        //   this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);
        //by miao  这个地方不过滤文件类型了，后端有白名单限制
        return true;
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onErrorItem(item, response, status, headers) {
        item._onError(response, status, headers);
        this.onErrorItem(item, response, status, headers);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCompleteItem(item, response, status, headers) {
        item._onComplete(response, status, headers);
        this.onCompleteItem(item, response, status, headers);
        /** @type {?} */
        const nextItem = this.getReadyItems()[0];
        this.isUploading = false;
        if (nextItem) {
            nextItem.upload();
            return;
        }
        this.onCompleteAll();
        this.progress = this._getTotalProgress();
        this._render();
    }
    /**
     * @protected
     * @param {?} parsedHeaders
     * @return {?}
     */
    _headersGetter(parsedHeaders) {
        return (/**
         * @param {?} name
         * @return {?}
         */
        (name) => {
            if (name) {
                return parsedHeaders[name.toLowerCase()] || void 0;
            }
            return parsedHeaders;
        });
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    _xhrTransport(item) {
        /** @type {?} */
        const that = this;
        /** @type {?} */
        const xhr = item.xhr = new XMLHttpRequest();
        /** @type {?} */
        let sendable;
        this._onBeforeUploadItem(item);
        if (typeof item.lfile.size !== 'number') {
            throw new TypeError('The file specified is no longer valid');
        }
        if (!this.options.disableMultipart) {
            sendable = new FormData();
            this._onBuildItemForm(item, sendable);
            /** @type {?} */
            const appendFile = (/**
             * @return {?}
             */
            () => sendable.append(item.alias, item.lfile, item.file.name));
            if (!this.options.parametersBeforeFiles) {
                appendFile();
            }
            // For AWS, Additional Parameters must come BEFORE Files
            if (this.options.additionalParameter !== undefined) {
                Object.keys(this.options.additionalParameter).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    /** @type {?} */
                    let paramVal = this.options.additionalParameter[key];
                    // Allow an additional parameter to include the filename
                    if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {
                        paramVal = paramVal.replace('{{file_name}}', item.file.name);
                    }
                    sendable.append(key, paramVal);
                }));
            }
            if (this.options.parametersBeforeFiles) {
                appendFile();
            }
        }
        else {
            sendable = this.options.formatDataFunction(item);
        }
        xhr.upload.onprogress = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
            this._onProgressItem(item, progress);
        });
        xhr.onload = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const headers = this._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */
            const response = this._transformResponse(xhr.response, headers);
            /** @type {?} */
            const gist = this._isSuccessCode(xhr.status) ? 'Success' : 'Error';
            /** @type {?} */
            const method = '_on' + gist + 'Item';
            ((/** @type {?} */ (this)))[method](item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        });
        xhr.onerror = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const headers = this._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */
            const response = this._transformResponse(xhr.response, headers);
            this._onErrorItem(item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        });
        xhr.onabort = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const headers = this._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */
            const response = this._transformResponse(xhr.response, headers);
            this._onCancelItem(item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        });
        xhr.open(item.method, item.url, true);
        xhr.withCredentials = item.withCredentials;
        if (this.options.headers) {
            for (const header of this.options.headers) {
                xhr.setRequestHeader(header.name, header.value);
            }
        }
        if (item.headers.length) {
            for (const header of item.headers) {
                xhr.setRequestHeader(header.name, header.value);
            }
        }
        if (this.authToken) {
            xhr.setRequestHeader(this.authTokenHeader, this.authToken);
        }
        // xhr.onreadystatechange = function () {
        //   if (xhr.readyState == XMLHttpRequest.DONE) {
        //     that.response.emit(xhr.responseText);
        //   }
        // }
        xhr.onreadystatechange = (/**
         * @return {?}
         */
        () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                that.response.emit(xhr.responseText);
            }
        });
        if (this.options.formatDataFunctionIsAsync) {
            sendable.then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => xhr.send(JSON.stringify(result))));
        }
        else {
            xhr.send(sendable);
        }
        this._render();
    }
    /**
     * @protected
     * @param {?=} value
     * @return {?}
     */
    _getTotalProgress(value = 0) {
        if (this.options.removeAfterUpload) {
            return value;
        }
        /** @type {?} */
        const notUploaded = this.getNotUploadedItems().length;
        /** @type {?} */
        const uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;
        /** @type {?} */
        const ratio = 100 / this.queue.length;
        /** @type {?} */
        const current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    }
    /**
     * @protected
     * @param {?} filters
     * @return {?}
     */
    _getFilters(filters) {
        if (!filters) {
            return this.options.filters;
        }
        if (Array.isArray(filters)) {
            return filters;
        }
        if (typeof filters === 'string') {
            /** @type {?} */
            const names = filters.match(/[^\s,]+/g);
            return this.options.filters
                .filter((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => names.indexOf(filter.name) !== -1));
        }
        return this.options.filters;
    }
    /**
     * @protected
     * @return {?}
     */
    _render() {
        return void 0;
    }
    /**
     * @protected
     * @return {?}
     */
    _queueLimitFilter() {
        return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;
    }
    /**
     * @protected
     * @param {?} file
     * @param {?} filters
     * @param {?} options
     * @return {?}
     */
    _isValidFile(file, filters, options) {
        this.failFilterIndex = -1;
        return !filters.length ? true : filters.every((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => {
            this.failFilterIndex++;
            return filter.fn.call(this, file, options);
        }));
    }
    /**
     * @protected
     * @param {?} status
     * @return {?}
     */
    _isSuccessCode(status) {
        return (status >= 200 && status < 300) || status === 304;
    }
    /**
     * @protected
     * @param {?} response
     * @param {?} headers
     * @return {?}
     */
    _transformResponse(response, headers) {
        return response;
    }
    /**
     * @protected
     * @param {?} headers
     * @return {?}
     */
    _parseHeaders(headers) {
        /** @type {?} */
        const parsed = {};
        /** @type {?} */
        let key;
        /** @type {?} */
        let val;
        /** @type {?} */
        let i;
        if (!headers) {
            return parsed;
        }
        headers.split('\n').map((/**
         * @param {?} line
         * @return {?}
         */
        (line) => {
            i = line.indexOf(':');
            key = line.slice(0, i).trim().toLowerCase();
            val = line.slice(i + 1).trim();
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
        }));
        return parsed;
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} filter
     * @param {?} options
     * @return {?}
     */
    _onWhenAddingFileFailed(item, filter, options) {
        this.onWhenAddingFileFailed(item, filter, options);
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    _onAfterAddingFile(item) {
        this.onAfterAddingFile(item);
    }
    /**
     * @protected
     * @param {?} items
     * @return {?}
     */
    _onAfterAddingAll(items) {
        this.onAfterAddingAll(items);
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    _onBeforeUploadItem(item) {
        item._onBeforeUpload();
        this.onBeforeUploadItem(item);
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} form
     * @return {?}
     */
    _onBuildItemForm(item, form) {
        item._onBuildForm(form);
        this.onBuildItemForm(item, form);
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} progress
     * @return {?}
     */
    _onProgressItem(item, progress) {
        /** @type {?} */
        const total = this._getTotalProgress(progress);
        this.progress = total;
        item._onProgress(progress);
        this.onProgressItem(item, progress);
        this.onProgressAll(total);
        this._render();
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onSuccessItem(item, response, status, headers) {
        item._onSuccess(response, status, headers);
        this.onSuccessItem(item, response, status, headers);
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCancelItem(item, response, status, headers) {
        item._onCancel(response, status, headers);
        this.onCancelItem(item, response, status, headers);
    }
    /**
     * @protected
     * @return {?}
     */
    queueLimitFilter() {
        return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DataValidateStrategy = {
    Ignore: 0,
    MandatoryImport: 1,
};
DataValidateStrategy[DataValidateStrategy.Ignore] = 'Ignore';
DataValidateStrategy[DataValidateStrategy.MandatoryImport] = 'MandatoryImport';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValidateFormComponent {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.closeModal = new EventEmitter();
        this.okModal = new EventEmitter();
        this.validateInfoAllWarning = false;
        this.onlyOneObject = false;
        this.showInfo = '';
        this.ValidateInfoColumns = [];
        this.radioData = [];
        this.checkboxData1 = [];
        this.checkboxData2 = [];
        this.checkBoxValue1 = DataValidateStrategy[0];
        this.checkBoxValue2 = '';
        this.validatedInfoList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const res = this.i18nResource;
        this.order = res['order'];
        this.validate_type = res['validate_type'];
        this.table_name = res['table_name'];
        this.illegal_data_location = res['illegal_data_location'];
        this.validate_result = res['validate_result'];
        this.export_validate_result = res['export_validate_result'];
        this.continue = res['continue'];
        this.checkboxData1 = [
            { value: DataValidateStrategy[0], name: this.i18nResource['AllIgnore'] }
        ];
        this.checkboxData2 = [
            { value: DataValidateStrategy[1], name: this.i18nResource['AllMandatoryImport'] }
        ];
        this.radioData = [
            { value: DataValidateStrategy[0], name: this.i18nResource['Ignore'] },
            { value: DataValidateStrategy[1], name: this.i18nResource['MandatoryImport'] }
        ];
        this.validateResult.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.validateInfoAllWarning) {
                this.validateInfoAllWarning = true;
            }
            if (element.onlyOneObject) {
                this.onlyOneObject = true;
            }
            if (element.newValidatedInfoList !== null && element.newValidatedInfoList !== undefined) {
                this.validatedInfoList = this.validatedInfoList.concat(element.newValidatedInfoList);
            }
            if (element.validateShowInfo) {
                this.customShowInfo = element.validateShowInfo;
            }
        }));
        if (this.validateInfoAllWarning) {
            this.cancel = res['cancel'];
        }
        else {
            this.cancel = res['ie_ok'];
        }
        if (this.validateInfoAllWarning) {
            this.showInfo = this.customShowInfo ? this.customShowInfo : this.i18nResource['you_have'] + this.validatedInfoList.length + this.i18nResource['warning_info'];
            if (this.onlyOneObject) {
                this.ValidateInfoColumns = [
                    { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true },
                    {
                        field: 'operation', width: 80, title: '操作', headerTemplate: this.headerTemplate,
                        template: this.columnOperation, sortable: false, showTips: true
                    }
                ];
            }
            else {
                this.ValidateInfoColumns = [
                    { field: 'dataObjectName', width: 40, title: this.table_name, sortable: false, showTips: true },
                    { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true },
                    {
                        field: 'operation', width: 80, title: '操作', headerTemplate: this.headerTemplate,
                        template: this.columnOperation, sortable: false, showTips: true
                    }
                ];
            }
        }
        else {
            this.showInfo = this.customShowInfo ? this.customShowInfo : this.i18nResource['you_have'] + this.validatedInfoList.length + this.i18nResource['error_info'];
            if (this.onlyOneObject) {
                this.ValidateInfoColumns = [
                    { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true }
                ];
            }
            else {
                this.ValidateInfoColumns = [
                    { field: 'dataObjectName', width: 40, title: this.table_name, sortable: false, showTips: true },
                    { field: 'validateShowInfo', width: 140, title: this.illegal_data_location, sortable: false, showTips: true }
                ];
            }
        }
    }
    /**
     * @return {?}
     */
    checkBoxChange1() {
        if (this.checkBoxValue1) {
            this.checkBoxValue2 = '';
            if (this.validatedInfoList) {
                this.validatedInfoList.forEach((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t.dataValidateStrategy = DataValidateStrategy[0]));
            }
        }
    }
    /**
     * @return {?}
     */
    checkBoxChange2() {
        if (this.checkBoxValue2) {
            this.checkBoxValue1 = '';
            if (this.validatedInfoList) {
                this.validatedInfoList.forEach((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t.dataValidateStrategy = DataValidateStrategy[1]));
            }
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    radioChange(ctx) {
        /** @type {?} */
        const ignoreList = this.validatedInfoList.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.dataValidateStrategy == DataValidateStrategy[0]));
        if (ignoreList.length == this.validatedInfoList.length) {
            this.checkBoxValue1 = DataValidateStrategy[0];
            this.checkBoxValue2 = '';
        }
        else if (ignoreList.length == 0) {
            this.checkBoxValue1 = '';
            this.checkBoxValue2 = DataValidateStrategy[1];
        }
        else {
            this.checkBoxValue1 = '';
            this.checkBoxValue2 = '';
        }
    }
    /**
     * @return {?}
     */
    continueHandler() {
        this.okModal.emit(this.validatedInfoList);
    }
    /**
     * @return {?}
     */
    cancelHandler() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    exportPdf() {
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/rpcfileoper/DownloadValidateFile';
        /** @type {?} */
        const body = {
            su: this.su,
            validateTitles: [this.order, this.table_name, this.illegal_data_location],
            validatedInfos: this.validatedInfoList
        };
        this.loadingParam.loadingService.show();
        this.http.post(url, body, {
            responseType: 'blob',
            observe: 'response',
            params: { su: this.su }
        }).subscribe((/**
         * @param {?} filedata
         * @return {?}
         */
        filedata => {
            this.loadingParam.loadingService.clearAll();
            if (!filedata || filedata.body.size == 0) {
                return;
            }
            else {
                /** @type {?} */
                const blob = new Blob([filedata.body]);
                if (navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, this.validate_result);
                }
                else {
                    /** @type {?} */
                    const link = document.createElement('a');
                    link.setAttribute('href', window.URL.createObjectURL(blob));
                    // 设置下载的文件名
                    link.setAttribute('download', this.validate_result);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                /** @type {?} */
                const delUrl = '/api/runtime/dip/v1.0/rpcfileoper/DeleteFile';
                /** @type {?} */
                const delParam = {
                    relativePath: "VALIDATEPDFFILE/test.pdf",
                    su: this.su
                };
                this.http.post(delUrl, delParam, { params: { su: this.su } }).subscribe();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingParam.loadingService.clearAll();
            console.log(error);
        }));
    }
}
ValidateFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-validate-form',
                template: "<!-- <div>\r\n  <div>\r\n    <kendo-tabstrip (tabSelect)=\"OnTableSelect($event)\">\r\n      <kendo-tabstrip-tab *ngFor=\"let result of validateResult; let i = index\" [title]=\"result.componentName\" [selected]=\"i === 0?true: false\">\r\n        <ng-template kendoTabContent>\r\n          <kendo-grid [height]=\"350\" [data]=\"result.validatedInfoList\">\r\n            <kendo-grid-column field=\"order\" title=\"\u5E8F\u53F7\" [width]=\"40\"></kendo-grid-column>\r\n            <kendo-grid-column field=\"message\" title=\"\u6821\u9A8C\u7ED3\u679C\" [width]=\"100\"></kendo-grid-column>\r\n            <kendo-grid-column field=\"tableName\" title=\"\u5BF9\u8C61\u540D\u79F0\" [width]=\"80\"></kendo-grid-column>\r\n            <kendo-grid-column field=\"illegalDataLocation\" title=\"\u975E\u6CD5\u6570\u636E\u4F4D\u7F6E\" [width]=\"300\"></kendo-grid-column>\r\n          </kendo-grid>\r\n        </ng-template>\r\n      </kendo-tabstrip-tab>\r\n    </kendo-tabstrip>\r\n  </div>\r\n  <div>\r\n    <kendo-excelexport class=\"excelExport\" *ngFor=\"let result of validateResult; let i = index\" [data]=\"result.validatedInfoList\" fileName=\"\u6821\u9A8C\u7ED3\u679C.xlsx\">\r\n      <kendo-excelexport-column field=\"order\" title=\"\u5E8F\u53F7\" [width]=\"80\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"message\" title=\"\u6821\u9A8C\u7ED3\u679C\" [width]=\"300\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"tableName\" title=\"\u5BF9\u8C61\u540D\u79F0\" [width]=\"160\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"illegalDataLocation\" title=\"\u975E\u6CD5\u6570\u636E\u4F4D\u7F6E\" [width]=\"160\"></kendo-excelexport-column>\r\n    </kendo-excelexport>\r\n  </div>\r\n  <ng-template #selectFooter>\r\n    <div class=\"btns\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">\u53D6\u6D88</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Export()\">\u5BFC\u51FA</button>\r\n    </div>\r\n  </ng-template>\r\n</div> -->\r\n\r\n<!-- <kendo-grid [kendoGridBinding]=\"validatedInfoList\" [pageable]=\"true\" [pageSize]=\"20\" [height]=\"450\" [reorderable]=\"true\"\r\n  [resizable]=\"true\">\r\n  <ng-template kendoGridToolbarTemplate>\r\n    <button kendoGridPDFCommand icon=\"file-pdf\">{{export_pdf}}</button>\r\n  </ng-template>\r\n  <kendo-grid-column field=\"order\" [title]=\"order\" [width]=\"35\">\r\n  </kendo-grid-column>\r\n  <kendo-grid-column field=\"message\" [title]=\"validate_type\" [width]=\"60\">\r\n  </kendo-grid-column>\r\n  <kendo-grid-column field=\"tableName\" [title]=\"table_name\" [width]=\"60\">\r\n  </kendo-grid-column>\r\n  <kendo-grid-column field=\"illegalDataLocation\" [title]=\"illegal_data_location\" [width]=\"350\">\r\n  </kendo-grid-column>\r\n\r\n  <kendo-grid-pdf [fileName]=\"validate_result\" [allPages]=\"true\">\r\n    <kendo-grid-pdf-margin top=\"1cm\" left=\"1cm\" right=\"1cm\" bottom=\"1cm\"></kendo-grid-pdf-margin>\r\n  </kendo-grid-pdf>\r\n</kendo-grid> -->\r\n<!-- <div>\r\n    <kendo-excelexport class=\"excelExport\" *ngFor=\"let result of validateResult; let i = index\" [data]=\"result.validatedInfoList\"  fileName=\"ValidateResult.xlsx\">\r\n      <kendo-excelexport-column field=\"order\" title=\"\u5E8F\u53F7\" [width]=\"40\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"message\" title=\"\u6821\u9A8C\u7C7B\u578B\" [width]=\"80\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"tableName\" title=\"\u5BF9\u8C61\u540D\u79F0\" [width]=\"80\"></kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"illegalDataLocation\" title=\"\u975E\u6CD5\u6570\u636E\u4F4D\u7F6E\" [width]=\"350\"></kendo-excelexport-column>\r\n    </kendo-excelexport>\r\n  </div> -->\r\n<!-- <kendo-grid-excel fileName=\"ValidateResult.xlsx\"></kendo-grid-excel> -->\r\n<div class=\"d-flex flex-fill\" style=\"height: 100px;\">\r\n  <div style=\"\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 100px;\r\n    border: 6px solid cornflowerblue;\r\n    margin-left: 80px;\r\n    margin-top: 10px;\r\n    font-size: 30px;\r\n    color: inherit;\r\n\">{{validatedInfoList.length}}\r\n  </div>\r\n  <div style=\"margin-top: 40px;margin-left: 30px;\">{{showInfo}}</div>\r\n</div>\r\n<div class=\"d-flex flex-fill\" style=\"height: 350px;\">\r\n  <farris-datagrid #ValidateInfoGrid id=\"validate-info-grid\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n                   [columns]=\"ValidateInfoColumns\" [showLineNumber]=\"true\" [pagination]=\"false\" [showBorder]=\"true\"\r\n                   [striped]=\"true\" [sizeType]=\"'sm'\" [data]=\"validatedInfoList\">\r\n  </farris-datagrid>\r\n  <ng-template #headerTemplate let-ctx>\r\n    <farris-checkboxgroup [(ngModel)]=\"checkBoxValue1\" [disable]=\"checkBoxValue1.length != 0\" [horizontal]=\"true\" [data]=\"checkboxData1\"\r\n                          (changeValue)=\"checkBoxChange1()\">\r\n    </farris-checkboxgroup>\r\n    <farris-checkboxgroup [(ngModel)]=\"checkBoxValue2\" [disable]=\"checkBoxValue2.length != 0\" [horizontal]=\"true\" [data]=\"checkboxData2\"\r\n                          (changeValue)=\"checkBoxChange2()\">\r\n    </farris-checkboxgroup>\r\n  </ng-template>\r\n  <ng-template #columnOperation let-ctx>\r\n    <farris-radiogroup  [(ngModel)]=\"validatedInfoList[ctx.rowIndex].dataValidateStrategy\" [horizontal]=\"true\" [data]=\"radioData\"\r\n                       (changeValue)=\"radioChange(ctx)\">\r\n    </farris-radiogroup>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #selectFooter>\r\n  <button type=\"button\" class=\"btn btn-outline-secondary \" (click)=\"exportPdf()\">{{export_validate_result}}</button>\r\n  <button *ngIf=\"validateInfoAllWarning\" type=\"button\" class=\"btn btn-outline-secondary \" (click)=\"continueHandler()\">{{continue}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary \" (click)=\"cancelHandler()\">{{cancel}}</button>\r\n</ng-template>\r\n",
                styles: [".barmanager{position:absolute;bottom:0;height:30px;right:30px;padding-left:50px}@font-face{font-family:\"DejaVu Sans\";src:url(/platform/common/web/@gsp-dip/fonts/microsoft-yahei.ttf) format(\"truetype\")}.k-grid{font-family:\"DejaVu Sans\",Arial,sans-serif}"]
            }] }
];
/** @nocollapse */
ValidateFormComponent.ctorParameters = () => [
    { type: HttpClient }
];
ValidateFormComponent.propDecorators = {
    ValidateInfoGrid: [{ type: ViewChild, args: ['ValidateInfoGrid',] }],
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    columnOperation: [{ type: ViewChild, args: ['columnOperation',] }],
    headerTemplate: [{ type: ViewChild, args: ['headerTemplate',] }],
    closeModal: [{ type: Output }],
    okModal: [{ type: Output }],
    validateResult: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileOperateService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.origin = window.location.origin;
        this.fileUrl = this.origin + '/api/runtime/rtcommon/v1.0/fileoper';
        this.downloadComplete = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.file_download_fail = res['file_download_fail'];
        }));
    }
    // 下载文件
    /**
     * @param {?} relativePath
     * @param {?} fileName
     * @param {?} preurl
     * @param {?} option
     * @param {?=} needDelete
     * @return {?}
     */
    DownloadFile(relativePath, fileName, preurl, option, needDelete = true) {
        /** @type {?} */
        let tempUrl = '';
        if (preurl === '') {
            tempUrl = this.fileUrl;
        }
        else {
            tempUrl = `${preurl}/fileoper`;
        }
        /** @type {?} */
        const app = DataIEUtils.getApp(tempUrl);
        /** @type {?} */
        let su = DataIEUtils.getSu(tempUrl);
        if (option !== null && option['su'] !== null && option['su'] !== undefined) {
            su = option['su'];
        }
        /** @type {?} */
        const fileParam = {
            relativePath: relativePath,
            app: app,
            su: su
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
        this.http.post(`${fixedUrl}/DownloadFile`, fileParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} filedata
         * @return {?}
         */
        filedata => {
            if (!filedata || filedata.body.size == 0) {
                this.downloadComplete.emit(this.file_download_fail);
            }
            else {
                //const blob = new Blob([filedata.body], {type: 'application/vnd.ms-excel'});
                /** @type {?} */
                const blob = new Blob([filedata.body]);
                if (navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, fileName);
                }
                else {
                    /** @type {?} */
                    const link = document.createElement('a');
                    link.setAttribute('href', window.URL.createObjectURL(blob));
                    // 设置下载的文件名
                    link.setAttribute('download', fileName);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                this.downloadComplete.emit('');
                if (needDelete) {
                    this.DeleteFile(relativePath, preurl, su);
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.downloadComplete.error(error);
        }));
        // 添加error异常处理
    }
    // 打包文件下载文件
    /**
     * @param {?} relativePaths
     * @param {?} itemsFileName
     * @param {?} packageName
     * @param {?} preurl
     * @param {?} packtype
     * @param {?=} needDelete
     * @return {?}
     */
    DownloadPackageFile(relativePaths, itemsFileName, packageName, preurl, packtype, needDelete = true) {
        /** @type {?} */
        let tempUrl = '';
        if (preurl === '') {
            tempUrl = this.fileUrl;
        }
        else {
            tempUrl = `${preurl}/fileoper`;
        }
        /** @type {?} */
        const app = DataIEUtils.getApp(tempUrl);
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        const fileParam = {
            relativePaths: relativePaths,
            itemsFileName: itemsFileName,
            packType: packtype,
            packageName: packageName,
            su: su
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
        this.http.post(`${fixedUrl}/DownloadPackageFile`, fileParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} filedata
         * @return {?}
         */
        filedata => {
            if (!filedata || filedata.body.size == 0) {
                this.downloadComplete.emit(this.file_download_fail);
            }
            else {
                /** @type {?} */
                const blob = new Blob([filedata.body]);
                // 设置下载的文件名
                /** @type {?} */
                const downloadFileName = packageName + '.' + packtype;
                if (navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, downloadFileName);
                }
                else {
                    /** @type {?} */
                    const link = document.createElement('a');
                    link.setAttribute('href', window.URL.createObjectURL(blob));
                    link.setAttribute('download', downloadFileName);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                this.downloadComplete.emit('');
                if (needDelete) {
                    this.DeleteFile(downloadFileName, preurl);
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.downloadComplete.error(error);
        }));
        // 添加error异常处理
    }
    /**
     * 手工表单下载
     * @param {?} relativePath
     * @param {?} fileName
     * @param {?} su
     * @param {?=} needDelete
     * @return {?}
     */
    DownloadFile4HandCraft(relativePath, fileName, su, needDelete = true) {
        /** @type {?} */
        const fileParam = {
            relativePath: relativePath,
            app: '',
            su: su
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
        this.http.post(`${fixedUrl}/DownloadFile`, fileParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} filedata
         * @return {?}
         */
        filedata => {
            if (!filedata || filedata.body.size == 0) {
                this.downloadComplete.emit(this.file_download_fail);
            }
            else {
                /** @type {?} */
                const blob = new Blob([filedata.body]);
                if (navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, fileName);
                }
                else {
                    /** @type {?} */
                    const link = document.createElement('a');
                    link.setAttribute('href', window.URL.createObjectURL(blob));
                    // 设置下载的文件名
                    link.setAttribute('download', fileName);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                this.downloadComplete.emit('');
                if (needDelete) {
                    this.DeleteFile4HandCraft(relativePath, su);
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.downloadComplete.error(error);
        }));
        // 添加error异常处理
    }
    // 删除文件
    /**
     * @param {?} relativePath
     * @param {?} preurl
     * @param {?=} customSu
     * @return {?}
     */
    DeleteFile(relativePath, preurl, customSu = '') {
        /** @type {?} */
        let tempUrl = '';
        if (preurl === '') {
            tempUrl = this.fileUrl;
        }
        else {
            tempUrl = `${preurl}/fileoper`;
        }
        /** @type {?} */
        let su = '';
        if (customSu !== '') {
            su = customSu;
        }
        else {
            su = DataIEUtils.getSu(tempUrl);
        }
        /** @type {?} */
        const delParam = {
            relativePath: relativePath,
            su: su
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
        this.http.post(`${fixedUrl}/DeleteFile`, delParam, {
            params: { su: su }
        }).subscribe();
    }
    /**
     * @param {?} relativePath
     * @param {?} su
     * @return {?}
     */
    DeleteFile4HandCraft(relativePath, su) {
        /** @type {?} */
        const delParam = {
            relativePath: relativePath,
            su: su
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcfileoper';
        this.http.post(`${fixedUrl}/DeleteFile`, delParam, {
            params: { su: su }
        }).subscribe();
    }
}
FileOperateService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileOperateService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const MethodType = {
    CommonImport: 0,
    ImportSubTableDetail: 1,
    CommonExport: 2,
    ExportCurrentTableData: 3,
    ExportCurrentChildData: 4,
    CardFormDataImport: 5,
    DownloadImportTemplate: 6,
};
MethodType[MethodType.CommonImport] = 'CommonImport';
MethodType[MethodType.ImportSubTableDetail] = 'ImportSubTableDetail';
MethodType[MethodType.CommonExport] = 'CommonExport';
MethodType[MethodType.ExportCurrentTableData] = 'ExportCurrentTableData';
MethodType[MethodType.ExportCurrentChildData] = 'ExportCurrentChildData';
MethodType[MethodType.CardFormDataImport] = 'CardFormDataImport';
MethodType[MethodType.DownloadImportTemplate] = 'DownloadImportTemplate';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataImportService {
    /**
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} operateService
     * @param {?} notify
     * @param {?} http
     * @param {?} injector
     */
    constructor(modalService, resolver, operateService, notify, http, injector) {
        this.modalService = modalService;
        this.resolver = resolver;
        this.operateService = operateService;
        this.notify = notify;
        this.http = http;
        this.injector = injector;
        this.origin = window.location.origin;
        this.url = this.origin + '/api/runtime/rtcommon/v1.0/import';
        this.DataIeProgressParams = {
            "ImportProgressValue": 13
        };
        this.complete = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.master_table_noid = res['master_table_noid'];
            this.bind_form_error = res['bind_form_error'];
            this.validate_result_show = res['validate_result_show'];
        }));
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    ImportSubTable(commonParams) {
        /** @type {?} */
        const ruleId = commonParams.ruleId;
        /** @type {?} */
        const option = commonParams.option;
        /** @type {?} */
        const frameContext = commonParams.frameContext;
        /** @type {?} */
        const methodType = commonParams.methodType;
        /** @type {?} */
        const suffix = commonParams.suffix;
        /** @type {?} */
        const fileName = commonParams.fileName;
        /** @type {?} */
        const befRestService = this.getBefRestService(frameContext.repository);
        commonParams.befRestService = befRestService;
        commonParams.repository = frameContext.repository;
        /** @type {?} */
        let globalVar = '';
        if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            if (typeof (option['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(option['GlobalParam']);
            }
            else {
                globalVar = option['GlobalParam'];
            }
        }
        /** @type {?} */
        let model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        /** @type {?} */
        const mainObjId = frameContext.bindingData.list.currentId;
        if (isNullOrEmpty(mainObjId)) {
            this.notify.info(this.master_table_noid);
            return false;
            // this.errorlevel = 'Info';
            // this.complete.emit('未获取到主表ID值，请确认主表是否有数据');
        }
        else {
            /** @type {?} */
            const funcId = getQueryString('funcId');
            /** @type {?} */
            const importParam = {
                body: {
                    dataImportContext: {
                        RuleId: ruleId,
                        FileName: fileName,
                        MainObjId: mainObjId,
                        GlobalParam: globalVar,
                        Suffix: suffix,
                        Model: model,
                        funcId: funcId,
                        securityLevelName: commonParams.securityLevelName,
                        methodType: methodType
                    },
                    requestInfo: befRestService.buildRequestInfo()
                }
            };
            commonParams.importParam = importParam;
            commonParams.mainObjId = mainObjId;
            this.Import(commonParams);
        }
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    ImportSubTable4HandCraft(commonParams) {
        /** @type {?} */
        const ruleId = commonParams.ruleId;
        /** @type {?} */
        const option = commonParams.option;
        /** @type {?} */
        const frameContext = commonParams.frameContext;
        /** @type {?} */
        const suffix = commonParams.suffix;
        /** @type {?} */
        const fileName = commonParams.fileName;
        /** @type {?} */
        let globalVar = '';
        if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            if (typeof (option['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(option['GlobalParam']);
            }
            else {
                globalVar = option['GlobalParam'];
            }
        }
        /** @type {?} */
        const repository = frameContext === null ? null : frameContext.repository;
        /** @type {?} */
        let mainObjId = '';
        //手工表单仓库为null
        if (repository === null) {
            if (option['mainId'] === undefined || option['mainId'] === null || option['mainId'] === '') {
                this.notify.info(this.master_table_noid);
                return false;
            }
            else {
                mainObjId = option['mainId'];
            }
        }
        else { //通用导入
            if (frameContext.bindingData.list.currentId === '' || frameContext.bindingData.list.currentId === null) {
                this.notify.info(this.master_table_noid);
                return false;
            }
            else {
                mainObjId = frameContext.bindingData.list.currentId;
            }
        }
        /** @type {?} */
        const funcId = getQueryString('funcId');
        /** @type {?} */
        const importParam = {
            ruleId: ruleId,
            fileName: fileName,
            mainObjId: mainObjId,
            globalParam: globalVar,
            suffix: suffix,
            funcId: funcId,
            securityLevelName: commonParams.securityLevelName
        };
        commonParams.importParam = importParam;
        commonParams.mainObjId = mainObjId;
        // this.Import4HandCraft(commonParams);
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    ImportByRuleId(commonParams) {
        /** @type {?} */
        const ruleId = commonParams.ruleId;
        /** @type {?} */
        const option = commonParams.option;
        /** @type {?} */
        const repository = commonParams.repository;
        /** @type {?} */
        const suffix = commonParams.suffix;
        /** @type {?} */
        const fileName = commonParams.fileName;
        /** @type {?} */
        const methodType = commonParams.methodType;
        /** @type {?} */
        const befRestService = this.getBefRestService(repository);
        commonParams.befRestService = befRestService;
        /** @type {?} */
        let globalVar = '';
        if (option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            if (typeof (option['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(option['GlobalParam']);
            }
            else {
                globalVar = option['GlobalParam'];
            }
        }
        /** @type {?} */
        let model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        console.log('baseUri: ' + befRestService.baseUri);
        /** @type {?} */
        const funcId = getQueryString('funcId');
        if (methodType === MethodType.CardFormDataImport) {
            commonParams.mainObjId = option.mainObjId;
        }
        else {
            commonParams.mainObjId = '';
        }
        /** @type {?} */
        const importParam = {
            body: {
                dataImportContext: {
                    RuleId: ruleId,
                    FileName: fileName,
                    GlobalParam: globalVar,
                    Suffix: suffix,
                    Model: model,
                    funcId: funcId,
                    securityLevelName: commonParams.securityLevelName,
                    mainObjId: commonParams.mainObjId,
                    methodType: methodType
                }
            }
        };
        commonParams.importParam = importParam;
        this.Import(commonParams);
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    Import(commonParams) {
        /** @type {?} */
        const repository = commonParams.repository;
        /** @type {?} */
        const importParam = commonParams.importParam;
        /** @type {?} */
        const befRestService = commonParams.befRestService;
        /** @type {?} */
        const methodType = commonParams.methodType;
        /** @type {?} */
        const subscriber = befRestService.request(`${befRestService.baseUri}/service/dataimportvmaction`, 'put', null, importParam);
        subscriber.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            const su = DataIEUtils.getSu(befRestService.baseUri);
            /** @type {?} */
            let importResult = (/** @type {?} */ (data.returnValue));
            if (isNullOrUndefined(importResult)) {
                importResult = (/** @type {?} */ (data));
            }
            commonParams.su = su;
            commonParams.importResult = importResult;
            if (importResult.succeed === true) {
                try {
                    if (importResult.formData && importResult.formData.length > 0) {
                        importResult.isform = true;
                        if (methodType === MethodType.ImportSubTableDetail) {
                            //子表导入表单
                            /** @type {?} */
                            const newData = importResult.formData[0];
                            /** @type {?} */
                            const curEntity = repository.entityCollection.getEntityById(commonParams.mainObjId);
                            curEntity.load(newData);
                        }
                        else if (methodType === MethodType.CardFormDataImport) ;
                        else {
                            //主从表导入表单
                            /** @type {?} */
                            const entities = [];
                            importResult.formData.forEach((/**
                             * @param {?} rdata
                             * @return {?}
                             */
                            (rdata) => {
                                /** @type {?} */
                                const entity = repository.buildEntity(rdata);
                                entities.push(entity);
                            }));
                            repository.entityCollection.addEntities(entities);
                        }
                    }
                    if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                        this.complete.emit('部分数据导入完成');
                    }
                    else {
                        if (importResult.isform == true) {
                            //此处为传递，无需国际化
                            this.complete.emit('导入表单成功');
                        }
                        else {
                            this.complete.emit('');
                        }
                    }
                    // this.complete.emit(true);
                    //this.complete.emit('');
                    //导入成功如果展示校验结果，只能是校验策略是忽略，所有校验结果都是error
                    this.ShowValidatedResult(commonParams);
                    // this.notify.info('数据导入成功');
                    // this.needDestroy.emit();
                }
                catch (_a) {
                    // this.complete.emit(false);
                    this.complete.emit(importResult.message);
                    this.notify.error(this.bind_form_error);
                }
            }
            else {
                console.log(importResult.exceptionSource);
                this.errorlevel = importResult.errorLevel;
                this.ShowValidatedResult(commonParams);
                // this.complete.emit(importResult.message);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.log(error);
            this.errorlevel = 'error';
            this.complete.emit(error.error.Message);
        }));
    }
    // 显示校验结果
    /**
     * @private
     * @param {?} commonParams
     * @return {?}
     */
    ShowValidatedResult(commonParams) {
        /** @type {?} */
        const importResult = commonParams.importResult;
        /** @type {?} */
        const loadingParam = commonParams.loadingParam;
        /** @type {?} */
        const befRestService = commonParams.befRestService;
        if (importResult.validatedResults && importResult.validatedResults.length > 0) {
            loadingParam.loadingService.clearAll();
            /** @type {?} */
            const cmpRef = this.CreateValidatedComponent();
            cmpRef.instance.validateResult = importResult.validatedResults;
            cmpRef.instance.su = commonParams.su;
            cmpRef.instance.i18nResource = commonParams.i18nResource;
            cmpRef.instance.loadingParam = loadingParam;
            /** @type {?} */
            const validateModalConfig = {
                title: this.validate_result_show,
                width: 950,
                height: 550,
                buttons: cmpRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, validateModalConfig);
            //0代表按钮中止或X点击；1代表按钮继续
            /** @type {?} */
            let closed = 0;
            dialog.dialog.instance.closed.subscribe((/**
             * @return {?}
             */
            () => {
                if (closed === 0) {
                    this.complete.emit('校验中止');
                }
            }));
            cmpRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                closed = 0;
                dialog.close();
            }));
            cmpRef.instance.okModal.subscribe((/**
             * @param {?} validatedInfoList
             * @return {?}
             */
            (validatedInfoList) => {
                closed = 1;
                dialog.close();
                loadingParam.loadingService.show(loadingParam.loadingConfig);
                commonParams.importParam.body.dataImportContext['validatedInfoList'] = validatedInfoList;
                this.Import(commonParams);
            }));
        }
        else {
            this.complete.emit(importResult.message);
        }
    }
    /**
     * @private
     * @param {?} repository
     * @return {?}
     */
    getBefRestService(repository) {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (repository));
        return befRepository.restService;
    }
    // 生成校验窗口组件
    /**
     * @private
     * @return {?}
     */
    CreateValidatedComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ValidateFormComponent);
        /** @type {?} */
        const comRef = compFactory.create(this.injector);
        return comRef;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    JudgeIllegalChar(str) {
        /** @type {?} */
        const illegalChar = ['?', '、', '\\', '/', '*', '\'', '"', '“', '”', '<', '>', '|', ','];
        illegalChar.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (str.indexOf(item) !== -1) {
                return true;
            }
        }));
        return false;
    }
    // 下载模板
    /**
     * @param {?} ruleId
     * @param {?} repository
     * @param {?} importOption
     * @param {?} suffix
     * @return {?}
     */
    DowmloadTemplate(ruleId, repository, importOption, suffix) {
        /** @type {?} */
        const befRestService = this.getBefRestService(repository);
        /** @type {?} */
        const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        const tempUrl = `${preUrl}/import`;
        /** @type {?} */
        let su = DataIEUtils.getSu(tempUrl);
        if (importOption['su'] !== undefined && importOption['su'] !== null) {
            su = importOption['su'];
        }
        /** @type {?} */
        let securityLevelName = '';
        if (!isNullOrUndefined(importOption.securityLevelName)) {
            securityLevelName = importOption.securityLevelName;
        }
        /** @type {?} */
        let model = '';
        if (importOption.Models !== undefined && importOption.Models !== null && importOption.Models.length > 0) {
            model = JSON.stringify(importOption.Models[0]);
        }
        /** @type {?} */
        let globalVar = '';
        if (!isNullOrUndefined(importOption['GlobalParam'])) {
            if (typeof (importOption['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(importOption['GlobalParam']);
            }
            else {
                globalVar = importOption['GlobalParam'];
            }
        }
        /** @type {?} */
        const templateParam = {
            body: {
                ruleId: ruleId,
                suffix: suffix,
                su: su,
                model: model,
                globalParam: globalVar,
                securityLevelName: securityLevelName
            }
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport';
        /** @type {?} */
        const subscriber = befRestService.request(`${fixedUrl}/TemplateDownload`, 'post', { su: su }, templateParam);
        subscriber.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data['result'] === true) {
                /** @type {?} */
                let filename = '';
                if (importOption['templatefilename'] === '' || importOption['templatefilename'] === undefined) {
                    filename = data['fileName'];
                }
                else {
                    /** @type {?} */
                    const suffixIndex = data['fileName'].lastIndexOf('.');
                    /** @type {?} */
                    const tempsuffix = data['fileName'].substring(suffixIndex);
                    /** @type {?} */
                    let customName = importOption['templatefilename'];
                    if (!this.JudgeIllegalChar(customName)) {
                        if (customName.indexOf('.') !== -1) {
                            filename = customName;
                        }
                        else {
                            filename = customName + tempsuffix;
                        }
                    }
                    else {
                        filename = data['fileName'];
                    }
                }
                this.operateService.DownloadFile(data['docRelativePath'], filename, preUrl, importOption);
                /** @type {?} */
                const subscription = this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result === '') {
                        this.complete.emit('');
                        subscription.unsubscribe();
                    }
                    else {
                        this.complete.emit(result);
                        subscription.unsubscribe();
                    }
                }));
            }
            else {
                // this.notify.error('下载模板失败，失败信息：' + data['message']);
                this.complete.emit(data['message']);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.log(error);
            this.complete.emit('下载模板失败');
        }));
    }
    // 下载模板
    /**
     * @param {?} ruleId
     * @param {?} importOption
     * @param {?} suffix
     * @return {?}
     */
    DowmloadTemplate4HandCraft(ruleId, importOption, suffix) {
        /** @type {?} */
        const su = importOption.su;
        /** @type {?} */
        let globalVar = '';
        if (importOption['GlobalParam'] !== null && importOption['GlobalParam'] !== undefined) {
            if (typeof (importOption['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(importOption['GlobalParam']);
            }
            else {
                globalVar = importOption['GlobalParam'];
            }
        }
        /** @type {?} */
        let securityLevelName = '';
        if (!isNullOrUndefined(importOption.securityLevelName)) {
            securityLevelName = importOption.securityLevelName;
        }
        /** @type {?} */
        const templateParam = {
            ruleId: ruleId,
            suffix: suffix,
            su: su,
            globalParam: globalVar,
            securityLevelName: securityLevelName
        };
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/TemplateDownload';
        this.http.post(fixedUrl, templateParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            console.log(res);
            /** @type {?} */
            const data = res.body;
            if (data.type == 'application/json') {
                /** @type {?} */
                const reader = new FileReader();
                reader.onload = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const responseParam = JSON.parse((/** @type {?} */ (reader.result)));
                    if (!responseParam.result) {
                        this.complete.emit(responseParam.message);
                    }
                });
                reader.readAsText(data, 'utf-8');
            }
            else {
                /** @type {?} */
                let fileName = '';
                /** @type {?} */
                let contentDisposition = res.headers.get("content-disposition");
                if (contentDisposition) {
                    // 正则获取filename的值
                    /** @type {?} */
                    let filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                    /** @type {?} */
                    let matches = filenameRegex.exec(contentDisposition);
                    if (matches != null && matches[1]) {
                        fileName = matches[1].replace(/['"]/g, '');
                    }
                    // 通过 URLEncoder.encode(pFileName, StandardCharsets.UTF_8.name()) 加密编码的, 使用decodeURI(fileName) 解密
                    fileName = decodeURI(fileName);
                    // 通过 new String(pFileName.getBytes(), StandardCharsets.ISO_8859_1) 加密编码的, 使用decodeURI(escape(fileName)) 解密
                    // fileName = decodeURI(escape(fileName))
                }
                if (!isNullOrUndefined(importOption.templatefilename)) {
                    /** @type {?} */
                    const suffixIndex = fileName.lastIndexOf('.');
                    /** @type {?} */
                    const suffix = fileName.substring(suffixIndex);
                    fileName = importOption.templatefilename + suffix;
                }
                /** @type {?} */
                const blob = new Blob([data]);
                if (!data || data.size == 0) {
                    this.complete.emit('返回的数据为空');
                }
                else {
                    if (navigator.msSaveOrOpenBlob) {
                        navigator.msSaveOrOpenBlob(blob, fileName);
                    }
                    else {
                        /** @type {?} */
                        const link = document.createElement('a');
                        link.setAttribute('href', window.URL.createObjectURL(blob));
                        // 设置下载的文件名
                        link.setAttribute('download', fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                    this.complete.emit('');
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.complete.error(error.error.Message);
        }));
    }
}
DataImportService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataImportService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: FileOperateService },
    { type: NotifyService },
    { type: HttpClient },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RuleFileType = {
    /**
     * Excel 2003文件格式
     */
    XLS: 0,
    /**
     * Excel 2007文件格式（启用宏）
     */
    XLSM: 1,
    /**
     * Excel 2007文件格式
     */
    XLSX: 2,
    /**
     * WPS表格
     */
    ET: 3,
    /**
     * WPS表格 模板文件
     */
    ETT: 4,
    /**
     * xml文件
     */
    XML: 5,
    /**
     * pdf文件
     */
    PDF: 6,
    /**
     * csv文件
     */
    CSV: 7,
};
RuleFileType[RuleFileType.XLS] = 'XLS';
RuleFileType[RuleFileType.XLSM] = 'XLSM';
RuleFileType[RuleFileType.XLSX] = 'XLSX';
RuleFileType[RuleFileType.ET] = 'ET';
RuleFileType[RuleFileType.ETT] = 'ETT';
RuleFileType[RuleFileType.XML] = 'XML';
RuleFileType[RuleFileType.PDF] = 'PDF';
RuleFileType[RuleFileType.CSV] = 'CSV';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 预留扩展组件1
 * 此组件目前被用于作为规则选择扩展模板配置界面
 */
class ExtendComponent1Component {
    /**
     * @param {?} http
     * @param {?} notify
     */
    constructor(http, notify) {
        this.http = http;
        this.notify = notify;
        this.closeModal = new EventEmitter();
        this.okModal = new EventEmitter();
        this.ObjInfoColumns = [];
        this.ObjInfoData = [];
        this.FieldsColumns = [];
        this.FieldsData = [];
        this.canNotCheckedRow = (/**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        (row, index) => {
            return row.require;
        });
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.i18nResouce = res;
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ObjInfoColumns = [
            { field: 'fileObjectName', width: 100, title: '对象名称', sortable: false, showTips: true }
        ];
        this.dataIeRuleExtend = JSON.parse(JSON.stringify(this.dataIeRuleExtendOriginal));
        this.extendRuleInfo = JSON.parse(this.dataIeRuleExtend.extendRuleInfo);
        this.ObjInfoData = this.extendRuleInfo.objInfos;
        this.FieldsColumns = [
            { field: 'fileElementName', width: 100, title: '列名', sortable: false, showTips: true, filter: true }
        ];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // this.objSelectChanged({data:this.ObjInfoData[0]});
        this.ObjsGrid.selectRow(this.ObjInfoData[0].id);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    moveUp(e) {
        /** @type {?} */
        const selectedRow = this.FieldsGrid.selectedRow;
        if (!selectedRow || !selectedRow.data) {
            return;
        }
        /** @type {?} */
        const id = selectedRow.data.id;
        /** @type {?} */
        const idx = this.FieldsData.findIndex((/**
         * @param {?} e
         * @return {?}
         */
        e => e.id === id));
        if (idx <= 0) {
            return;
        }
        /** @type {?} */
        const temp = this.FieldsData.splice(idx, 1);
        this.FieldsData.splice(idx - 1, 0, ...temp);
        this.FieldsData = JSON.parse(JSON.stringify(this.FieldsData));
        this.FieldsGrid.selectRow(id);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    moveDown(e) {
        /** @type {?} */
        const selectedRow = this.FieldsGrid.selectedRow;
        if (!selectedRow || !selectedRow.data) {
            return;
        }
        /** @type {?} */
        const id = selectedRow.data.id;
        /** @type {?} */
        const idx = this.FieldsData.findIndex((/**
         * @param {?} e
         * @return {?}
         */
        e => e.id === id));
        if (idx >= this.FieldsData.length - 1) {
            return;
        }
        /** @type {?} */
        const temp = this.FieldsData.splice(idx, 1);
        this.FieldsData.splice(idx + 1, 0, ...temp);
        this.FieldsData = JSON.parse(JSON.stringify(this.FieldsData));
        this.FieldsGrid.selectRow(id);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFilterChanged(e) {
        if (!e.fileElementName) {
            /** @type {?} */
            const selectedRow = this.ObjsGrid.selectedRow;
            if (!selectedRow || !selectedRow.data) {
                return;
            }
            this.objSelectChanged(selectedRow);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    objSelectChanged(e) {
        /** @type {?} */
        const rowDataId = e.data.id;
        /** @type {?} */
        const idx = this.ObjInfoData.findIndex((/**
         * @param {?} e
         * @return {?}
         */
        e => e.id === rowDataId));
        if (idx >= 0) {
            this.FieldsData = this.ObjInfoData[idx].fieldsInfo;
            this.FieldsGrid.loadData(this.FieldsData);
            // this.FieldsGrid = JSON.parse(JSON.stringify(fieldsData));
            this.FieldsData.forEach((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                if (d.checked) {
                    this.FieldsGrid.checkRow(d.id, false);
                }
            }));
            /** @type {?} */
            const selectedRow = this.FieldsGrid.selectedRow;
            if (selectedRow) {
                this.FieldsGrid.clearSelections();
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ElementCheckedRow(e) {
        /** @type {?} */
        const rowData = e.data;
        /** @type {?} */
        const idx = this.FieldsData.findIndex((/**
         * @param {?} e
         * @return {?}
         */
        e => e.id === rowData.id));
        if (idx >= 0) {
            this.FieldsData[idx].checked = true;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ElementUnCheckedRow(e) {
        /** @type {?} */
        const rowData = e.data;
        /** @type {?} */
        const idx = this.FieldsData.findIndex((/**
         * @param {?} e
         * @return {?}
         */
        e => e.id === rowData.id));
        if (idx >= 0) {
            this.FieldsData[idx].checked = false;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ElementCheckedAll(e) {
        this.FieldsData.forEach((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            d.checked = true;
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ElementUnCheckedAll(e) {
        if (isNullOrEmpty(e)) {
            return;
        }
        this.FieldsData.forEach((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            d.checked = false;
        }));
    }
    /**
     * @return {?}
     */
    okHandler() {
        if (isNullOrBlank(this.dataIeRuleExtend.code)) {
            this.notify.warning('模板编号不能为空');
            return;
        }
        if (isNullOrBlank(this.dataIeRuleExtend.name)) {
            this.notify.warning('模板名称不能为空');
            return;
        }
        this.extendRuleInfo.objInfos = this.ObjInfoData;
        this.dataIeRuleExtend.extendRuleInfo = JSON.stringify(this.extendRuleInfo);
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/checkUpdateRuleExtend';
        this.http.post(url, this.dataIeRuleExtend).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.success) {
                this.okModal.emit(this.dataIeRuleExtend);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    cancelHandler() {
        this.closeModal.emit();
    }
}
ExtendComponent1Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component1',
                template: "<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\" style=\"margin-top: 13px;\">\n\n  <div class=\"farris-group-wrap form-inline farris-form-inline item-label\">\n    <div class=\"form-group farris-form-group\">\n      <label class=\" col-form-label\">\n        <span class=\"farris-label-info text-danger\">*</span>\n        <span class=\"farris-label-text\">\u6A21\u677F\u7F16\u53F7</span>\n      </label>\n      <div class=\"farris-input-wrap\" style=\"width:240px;\">\n        <input-group name=\"templateCode\" [(ngModel)]=\"dataIeRuleExtend.code\"></input-group>\n        <div class=\"farris-feedback valid-feedback\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"farris-group-wrap form-inline farris-form-inline item-label\">\n    <div class=\"form-group farris-form-group\">\n      <label class=\" col-form-label\">\n        <span class=\"farris-label-info text-danger\">*</span>\n        <span class=\"farris-label-text\">\u6A21\u677F\u540D\u79F0</span>\n      </label>\n      <div class=\"farris-input-wrap\" style=\"width:240px;\">\n        <input-group name=\"templateName\" [(ngModel)]=\"dataIeRuleExtend.name\"></input-group>\n        <div class=\"farris-feedback valid-feedback\"></div>\n      </div>\n    </div>\n  </div>\n\n\n</form>\n<farris-section style=\"height: 500px;\">\n  <div class=\"f-page f-page-is-wizard\">\n    <div class=\"position-relative flex-fill farris-split-section m-2 farris-overflow-hidden\">\n\n      <layout id=\"manage-layout\" direction=\"h\" fill=\"true\" class=\"d-flex flex-row layout-fill\">\n        <layout-panel id=\"adptor-layout-panel-left\" class=\"col-2 d-flex flex-column farris-lsection p-0\" region=\"west\"\n                      minWidth=\"150\"\n                      showBorder=\"false\"\n                      style=\"flex: 0 0 auto; max-width: none; width: 260px;margin-top: 14px;overflow-y: auto;overflow-x: hidden\">\n          <div class=\"flex-fill farris-overflow-y-auto\" style=\"background-color: white;height: 468px;\">\n            <farris-datagrid #ObjsGrid id=\"objs-grid\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\n                             [columns]=\"ObjInfoColumns\"\n                             [pagination]=\"false\" [showBorder]=\"true\" [striped]=\"true\" [showLineNumber]=\"true\"\n                             [sizeType]=\"'sm'\"\n                             [data]=\"ObjInfoData\" [editable]=\"false\" (selectChanged)=\"objSelectChanged($event)\">\n            </farris-datagrid>\n          </div>\n        </layout-panel>\n\n        <layout-panel id=\"adptor-layout-panel-right\" class=\"farris-rsection f-overflow-y-auto d-flex flex-fill\"\n                      region=\"center\" minWidth=\"280\"\n                      showBorder=\"false\">\n          <div class=\"f-struct-wrapper f-utils-fill-flex-column\" style=\"width: 445px;height: 460px;\">\n            <div class=\"row\" style=\"margin-left:5px;\">\n              <farris-button [type]=\"'link'\" (click)=\"moveUp($event)\">\u4E0A\u79FB</farris-button>\n              <farris-button [type]=\"'link'\" (click)=\"moveDown($event)\">\u4E0B\u79FB</farris-button>\n            </div>\n            <farris-datagrid #FieldsGrid id=\"fields-grid\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\n                             [columns]=\"FieldsColumns\"\n                             [showAllCheckbox]=\"false\" [selectOnCheck]=\"true\" [onlySelectSelf]=\"true\"\n                             [showCheckbox]=\"true\"\n                             [multiSelect]=\"true\" [keepSelect]=\"true\" [pagination]=\"false\" [showBorder]=\"true\"\n                             [showLineNumber]=\"true\"\n                             [striped]=\"true\" [sizeType]=\"'sm'\" [data]=\"FieldsData\" [enableFilterRow]=\"true\"\n                             (filterChanged)=\"onFilterChanged($event)\" [disableRow]=\"canNotCheckedRow\"\n                             (checked)=\"ElementCheckedRow($event)\" (unChecked)=\"ElementUnCheckedRow($event)\"\n                             >\n            </farris-datagrid>\n          </div>\n        </layout-panel>\n      </layout>\n\n    </div>\n  </div>\n</farris-section>\n\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"cancelHandler()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"okHandler()\">{{ie_ok}}</button>\n</ng-template>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent1Component.ctorParameters = () => [
    { type: HttpClient },
    { type: NotifyService }
];
ExtendComponent1Component.propDecorators = {
    ObjsGrid: [{ type: ViewChild, args: ['ObjsGrid',] }],
    FieldsGrid: [{ type: ViewChild, args: ['FieldsGrid',] }],
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    closeModal: [{ type: Output }],
    okModal: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RuleSelectComponent {
    /**
     * @param {?} http
     * @param {?} notify
     * @param {?} injector
     * @param {?} modalService
     * @param {?} msgService
     * @param {?} resolver
     */
    constructor(http, notify, injector, modalService, msgService, resolver) {
        this.http = http;
        this.notify = notify;
        this.injector = injector;
        this.modalService = modalService;
        this.msgService = msgService;
        this.resolver = resolver;
        this.closeModal = new EventEmitter();
        this.okModal = new EventEmitter();
        // 规则ID 该id为表单上配置的规则id
        this.ruleId = '';
        this.voId = '';
        this.RuleMgrsData = [];
        this.fileTypes = [
            { label: 'Office Excel97-2003(*.xls)', value: RuleFileType[0] },
            { label: 'Office Excel Macro(*.xlsm)', value: RuleFileType[1] },
            { label: 'Office Excel(*.xlsx)', value: RuleFileType[2] },
            { label: 'WPS Table(*.et)', value: RuleFileType[3] },
            { label: 'WPS Table(Template File)(*.ett)', value: RuleFileType[4] },
            { label: 'XML Table(*.xml)', value: RuleFileType[5] },
            { label: 'PDF File(*.pdf)', value: RuleFileType[6] },
            { label: 'CSV File(*.csv)', value: RuleFileType[7] }
        ];
        this.RuleMgrsColumns = [];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.i18nResouce = res;
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.ruleselect_code = res['ruleselect_code'];
            this.ruleselect_name = res['ruleselect_name'];
            this.ruleselect_rulesource = res['ruleselect_rulesource'];
            this.ruleselect_custom = res['ruleselect_custom'];
            this.ruleselect_syspreset = res['ruleselect_syspreset'];
            this.ruleselect_billcategory = res['ruleselect_billcategory'];
            this.ruleselect_creator = res['ruleselect_creator'];
            this.ruleselect_filetype = res['ruleselect_filetype'];
            this.ruleselect_selectrulenotify = res['ruleselect_selectrulenotify'];
            this.ruleselect_updatetime = res['ruleselect_updatetime'];
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const ruleSourceType = [
            { label: this.i18nResouce['product_preset'], value: 'ProductPreset' },
            { label: this.i18nResouce['project_define'], value: 'ProjectDefine' },
            { label: this.i18nResouce['user_custom'], value: 'UserCustom' }
        ];
        this.RuleMgrsColumns = [
            { field: 'code', width: 180, title: this.ruleselect_code, showTips: true, halign: 'center', align: 'center', sortable: true },
            { field: 'name', width: 180, title: this.ruleselect_name, showTips: true, halign: 'center', align: 'center', sortable: true },
            // {
            //   field: 'ruleSourceType', width: 100, title: this.ruleselect_rulesource, showTips: true, halign: 'center', align: 'center', sortable: true,
            //   formatter: { type: 'enum', options: { valueField: 'value', textField: 'label', data: ruleSourceType } }
            // },
            {
                field: 'sysPreset', width: 100, title: this.ruleselect_rulesource, halign: 'center', align: 'center', sortable: true,
                formatter: { type: 'boolean', options: { trueText: this.ruleselect_syspreset, falseText: this.ruleselect_custom } }
            },
            // { field: 'bizEntityName', width: 150, title: '数据实体', halign: 'center', align: 'center', sortable: true },
            {
                field: 'fileType', width: 180, title: this.ruleselect_filetype, showTips: true, halign: 'center', align: 'center', sortable: true,
                formatter: { type: 'enum', options: { valueField: 'value', textField: 'label', data: this.fileTypes } }
            },
            { field: 'lastModifiedTime', width: 150, title: this.ruleselect_updatetime, showTips: true, halign: 'center', align: 'center', sortable: true }
            // {
            //   field: 'operation',
            //   width: 130,
            //   halign: 'center',
            //   align: 'center',
            //   title: this.i18nResouce['operation'],
            //   template: this.columnOperation
            // }
            // { field: 'creator', width: 150, title: this.ruleselect_creator, halign: 'center', align: 'center', sortable: true }
        ];
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    createRuleExtend(ctx) {
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/createRuleExtendInfo/' + ctx.rowData.id;
        this.http.get(url).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(ExtendComponent1Component);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.dataIeRuleExtendOriginal = res;
            /** @type {?} */
            const modalConfig = {
                title: '导入模板配置',
                width: 750,
                height: 650,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} dataIeRuleExtend
             * @return {?}
             */
            dataIeRuleExtend => {
                /** @type {?} */
                const idx = this.RuleMgrsData.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.id === dataIeRuleExtend.id));
                if (idx >= 0) {
                    this.RuleMgrsData[idx] = dataIeRuleExtend;
                    this.RuleMgrsGrid.refresh();
                }
                else {
                    this.RuleMgrsData.push(dataIeRuleExtend);
                }
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    updateRule(ctx) {
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    deleteRule(ctx) {
    }
    /**
     * @return {?}
     */
    okHandler() {
        /** @type {?} */
        const selectedRow = this.RuleMgrsGrid.selectedRow;
        if (selectedRow === null) {
            this.notify.info(this.ruleselect_selectrulenotify);
            return;
        }
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/updateConfigRule';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            voId: this.voId,
            ruleType: this.ruleType,
            currentRuleId: selectedRow.id
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            console.log(res.message);
            this.okModal.emit(selectedRow.data);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    cancelHandler() {
        this.closeModal.emit();
    }
}
RuleSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'thd-rule-select',
                template: "<div class=\"d-flex flex-fill\" style=\"height:100%;\">\n  <farris-datagrid #RuleMgrsGrid id=\"rule-mgrs-data\" [fit]=\"true\" [fitColumns]=\"true\" [columns]=\"RuleMgrsColumns\"\n                   [pagination]=\"false\"\n                   [showLineNumber]=\"true\" [keepSelect]=\"true\" [sizeType]=\"'sm'\" [data]=\"RuleMgrsData\">\n  </farris-datagrid>\n  <ng-template #columnOperation let-ctx>\n    <a *ngIf=\"ctx.rowData.ruleSourceType !== 'UserCustom'\" href=\"javascript: void(0);\" (click)=\"createRuleExtend(ctx)\">\u521B\u5EFA\u6269\u5C55</a>\n    <div *ngIf=\"ctx.rowData.ruleSourceType === 'UserCustom'\">\n      <a href=\"javascript: void(0);\" (click)=\"updateRule(ctx)\">\u4FEE\u6539</a>\n      &nbsp;&nbsp;\n      <a href=\"javascript: void(0);\" (click)=\"deleteRule(ctx)\">\u5220\u9664</a>\n    </div>\n\n  </ng-template>\n</div>\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"cancelHandler()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"okHandler()\">{{ie_ok}}</button>\n</ng-template>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
RuleSelectComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: NotifyService },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ComponentFactoryResolver }
];
RuleSelectComponent.propDecorators = {
    RuleMgrsGrid: [{ type: ViewChild, args: ['RuleMgrsGrid',] }],
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    columnOperation: [{ type: ViewChild, args: ['columnOperation',] }],
    closeModal: [{ type: Output }],
    okModal: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataieProgressComponent {
    constructor() {
        this.closeModal = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
DataieProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dataie-progress',
                template: "<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\r\n    <div class=\"col-12\">\r\n\r\n\r\n        <farris-progress [percent]=\"DataIeProgressParams.ImportProgressValue\" [status]=\"'active'\"></farris-progress>\r\n        <p>\u6570\u636E\u5BFC\u5165\u4E2D</p>\r\n\r\n    </div>\r\n</form>",
                styles: [""]
            }] }
];
/** @nocollapse */
DataieProgressComponent.ctorParameters = () => [];
DataieProgressComponent.propDecorators = {
    closeModal: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonParams {
    constructor() {
        this.ruleId = '';
        this.keys = [];
        this.option = {};
        this.fileName = '';
        this.frameContext = null;
        this.repository = null;
        this.befRestService = null;
        this.suffix = '';
        this.loadingParam = {};
        this.i18nResource = {};
        this.importParam = {};
        this.mainObjId = '';
        this.su = '';
        this.importResult = {};
        this.securityLevelName = '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImportDialogComponent {
    /**
     * @param {?} dataImportService
     * @param {?} notify
     * @param {?} loadingService
     * @param {?} http
     * @param {?} injector
     * @param {?} modalService
     * @param {?} listDataSer
     * @param {?} msgService
     * @param {?} resolver
     */
    constructor(dataImportService, notify, loadingService, http, injector, modalService, listDataSer, msgService, resolver) {
        this.dataImportService = dataImportService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.http = http;
        this.injector = injector;
        this.modalService = modalService;
        this.listDataSer = listDataSer;
        this.msgService = msgService;
        this.resolver = resolver;
        // 规则ID 该id为表单上配置的规则id
        this.ruleId = '';
        // 过滤条件
        this.importOption = null;
        this.frameContext = null;
        this.subject = null;
        this.showfiletype = true;
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        //当前选择规则的id、名称和文件类型
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.enableTemplate = true;
        this.closeXLSX = false;
        this.enableSecurityLevelSelect = false;
        this.securityLevelName = '';
        this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        this.ImportSecretRemindInfo = '';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.uploader = new FileUploader({
            url: '',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile'
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.valueField = null;
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        this.securityLevelItems = [];
        this.uploader.onSuccessItem = this.Import.bind(this);
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        this.uploader.onAfterAddingFile = this.afterAddFile;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.import_file = res['import_file'];
            this.choose_file = res['choose_file'];
            this.file_type = res['file_type'];
            this.import_placeholder = res['import_placeholder'];
            this.download_template = res['download_template'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.choose_truefile = res['choose_truefile'];
            this.download_template_ok = res['download_template_ok'];
            this.download_template_fail = res['download_template_fail'];
            this.upload_fail = res['upload_fail'];
            this.import_success = res['import_success'];
            this.import_form_success = res['import_form_success'];
            this.import_fail = res['import_fail'];
            this.rule_list = res['rule_list'];
            this.select_xlsx_notify = res['select_xlsx_notify'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let extendInfo = this.recordRule.extendInfo;
        if (!isNullOrUndefined(extendInfo)) {
            this.extendInfo = JSON.parse(extendInfo);
            this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
            this.closeXLSX = this.extendInfo['closeXLSX'];
            if (this.closeXLSX === true) {
                this.fileListItems = [
                    { id: FileConst.xls, label: FileConst.xls },
                    { id: FileConst.xlsm, label: FileConst.xlsm },
                    { id: FileConst.et, label: FileConst.et }
                ];
            }
        }
        /** @type {?} */
        const securityLevels = this.recordRule.securityLevels;
        if (!isNullOrEmpty(securityLevels)) {
            this.enableSecurityLevelSelect = true;
            securityLevels.forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                /** @type {?} */
                const level = {
                    value: e.name,
                    label: e.name
                };
                this.securityLevelItems.push(level);
            }));
            this.securityLevelName = this.securityLevelItems[0].value;
        }
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        if (this.valueField === '') {
            //未在当前可选文件的类型时，不显示选文件类型控件
            this.showfiletype = false;
        }
        this.currentRuleFileType = this.valueField;
        this.controlFileType();
        if (this.importOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    openSelectRule($event) {
        this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            ruleType: 0,
            voId: this.importOption.voId,
            methodType: this.methodType,
            importChildNodeCode: this.importOption.importChildNodeCode,
            closeXlsx: this.closeXLSX
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        (RuleMgrs) => {
            this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                this.notify.info(this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.ruleId = this.ruleId;
            compRef.instance.voId = this.importOption.voId;
            compRef.instance.ruleType = 0;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            const modalConfig = {
                title: this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            RuleMgr => {
                this.currentRuleId = RuleMgr.id;
                this.currentRuleName = RuleMgr.name;
                this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                this.currentRuleFileType = this.valueField;
                this.controlFileType();
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    canDownloadTemplate() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        const canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        t => t === suffix)) < 0) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    selectedFileOnChange(event) {
        /** @type {?} */
        const str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        const index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
            this.uploader.queue = [];
            this.notify.info(this.choose_truefile);
            return;
        }
        // console.log('队列中的文件' + this.uploader.queue[0]);
    }
    // 关闭窗口
    /**
     * @return {?}
     */
    Close() {
        this.needDestroy.emit();
    }
    // 选择文件事件
    /**
     * @return {?}
     */
    SelectFile() {
        this.fileUpload.nativeElement.click();
    }
    /**
     * @return {?}
     */
    fileTypeValueChange() {
        if (this.controlFileType() === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
    }
    /**
     * @return {?}
     */
    controlFileType() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '*';
        }
        return suffix;
    }
    /**
     * @return {?}
     */
    clickSetting() {
        this.notify.info('设置一下');
    }
    // 下载模板
    /**
     * @return {?}
     */
    DownloadTemplate() {
        this.loadingService.show();
        /** @type {?} */
        let suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        this.importOption['securityLevelName'] = this.securityLevelName;
        this.dataImportService.DowmloadTemplate(this.currentRuleId, this.frameContext.repository, this.importOption, suffix);
        /** @type {?} */
        const unsubscriber = this.dataImportService.complete.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.loadingService.clearAll();
            if (data === '') {
                this.notify.success(this.download_template_ok);
                unsubscriber.unsubscribe();
            }
            else {
                this.notify.error(this.download_template_fail + data);
                unsubscriber.unsubscribe();
            }
        }));
    }
    /**
     * @return {?}
     */
    showProgressDialog() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(DataieProgressComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.DataIeProgressParams = this.dataImportService.DataIeProgressParams;
        /** @type {?} */
        const modalConfig = {
            width: 530,
            height: 50,
            title: '',
            showHeader: false,
            showMaxButton: false,
            showMinButton: false,
            showButtons: false,
            showCloseButton: false,
            resizable: false
        };
        return this.modalService.show(compRef, modalConfig);
    }
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    afterAddFile(fileItem) {
    }
    // 开始导入
    /**
     * @return {?}
     */
    Ok() {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        const loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        // this.DataIeProgressDialog = this.showProgressDialog();
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const lastFileItem = this.uploader.queue[len - 1];
        /** @type {?} */
        const maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
        if (lastFileItem.file.size > maxFileSize) {
            this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        let tempUrl = `${preUrl}/import/Upload`;
        /** @type {?} */
        let su = DataIEUtils.getSu(tempUrl);
        if (this.importOption['su'] !== null && this.importOption['su'] !== undefined) {
            su = this.importOption['su'];
        }
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
        /** @type {?} */
        let headers = [{ name: 'su', value: su }];
        if (!isNullOrUndefined(this.extendInfo)) {
            /** @type {?} */
            const enableSecurityLevel = (/** @type {?} */ (this.extendInfo['enableSecurityLevel']));
            if (enableSecurityLevel) {
                headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                /** @type {?} */
                const securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                /** @type {?} */
                const securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
            }
        }
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            headers: headers
        });
        this.uploader.uploadItem(lastFileItem);
    }
    // 取消事件
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit();
    }
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ErrorLog(item, response, status, headers) {
        console.log('上传失败');
        console.log('错误代码：' + status);
        console.log(response);
        console.log(headers);
        this.loadingService.clearAll();
        try {
            /** @type {?} */
            const temRes = JSON.parse(response);
            this.msgService.error(this.upload_fail + temRes.message);
        }
        catch (_a) {
            this.msgService.error(this.upload_fail + response);
        }
        this.Close();
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len > 0) {
            this.uploader.queue.splice(0, 1);
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Import(item, response, status, headers) {
        /** @type {?} */
        let suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 45;
        switch (this.methodType) {
            case MethodType.CommonImport:
            case MethodType.CardFormDataImport:
                this.DataImportById(item, response, status, headers, suffix);
                break;
            case MethodType.ImportSubTableDetail:
                this.ImportSubTable(item, response, status, headers, suffix);
                break;
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    ImportSubTable(item, response, status, headers, suffix) {
        if (status === 200) {
            /** @type {?} */
            const temRes = JSON.parse(response);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.methodType = this.methodType;
            commonParams.ruleId = this.currentRuleId;
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.frameContext = this.frameContext;
            commonParams.suffix = suffix;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            commonParams.securityLevelName = this.securityLevelName;
            this.dataImportService.ImportSubTable(commonParams);
            /** @type {?} */
            const subscriber = this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                // this.DataIeProgressDialog.close();
                subscriber.unsubscribe();
                if (data === '') {
                    this.notify.success(this.import_success);
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '部分数据导入完成') {
                    this.notify.success(this.i18nResource['partdata-import-success']);
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '校验中止') {
                    this.notify.info(this.i18nResource['after_validate_suspend']);
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.dataImportService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.messageShow('info', data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.messageShow('warning', data);
                    }
                    else {
                        this.messageShow('error', this.import_fail + data);
                    }
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
            }));
        }
    }
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @param {?} suffix
     * @return {?}
     */
    DataImportById(item, response, status, headers, suffix) {
        console.log(status);
        console.log('上传完成！');
        if (status === 200) {
            //上传成功后清空上传队列
            this.uploader.queue = [];
            /** @type {?} */
            const temRes = JSON.parse(response);
            console.log('上传成功');
            console.log(temRes);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.methodType = this.methodType;
            commonParams.ruleId = this.currentRuleId;
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.suffix = suffix;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            commonParams.securityLevelName = this.securityLevelName;
            this.dataImportService.ImportByRuleId(commonParams);
            /** @type {?} */
            const unsubscriber = this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                // this.dataImportService.DataIeProgressParams['ImportProgressValue'] = 100;
                // this.DataIeProgressDialog.close();
                if (data === '') {
                    this.notify.success(this.import_success);
                    unsubscriber.unsubscribe();
                    //导入数据库后刷新界面数据
                    if (this.importOption.importdbRefresh === true) {
                        if (this.listDataSer !== null && this.frameContext !== null) {
                            /** @type {?} */
                            const filterConditionList = this.frameContext.uiState['filterConditionList'];
                            if (filterConditionList !== undefined && filterConditionList !== null && typeof (filterConditionList) === 'string') {
                                this.listDataSer.load(filterConditionList).subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    console.log('导入数据库后带过滤条件重新加载表单数据');
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                error => {
                                    console.log('导入数据库后带过滤条件重新加载表单数据异常');
                                }));
                            }
                            else {
                                this.listDataSer.load().subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    console.log('导入数据库后重新加载表单数据');
                                }), (/**
                                 * @param {?} error
                                 * @return {?}
                                 */
                                error => {
                                    console.log('导入数据库后重新加载表单数据异常');
                                }));
                            }
                        }
                    }
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '部分数据导入完成') {
                    this.notify.success(this.i18nResource['partdata-import-success']);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '校验中止') {
                    this.notify.info(this.i18nResource['after_validate_suspend']);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.dataImportService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.messageShow('info', data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.messageShow('warning', data);
                    }
                    else {
                        this.messageShow('error', this.import_fail + data);
                    }
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
            }));
        }
    }
    /**
     * @param {?} type
     * @param {?} message
     * @return {?}
     */
    messageShow(type, message) {
        if (this.msgService) {
            if (type === 'info') {
                this.msgService.info(message);
            }
            else if (type === 'warning') {
                this.msgService.warning(message);
            }
            else {
                this.msgService.error(message);
            }
        }
        else {
            if (type === 'info') {
                this.notify.info(message);
            }
            else if (type === 'warning') {
                this.notify.warning(message);
            }
            else {
                this.notify.error(message);
            }
        }
    }
}
ImportDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-import-dialog',
                template: "<!-- <div class=\"container\">\r\n    <div region=\"south\" class=\"south mgleft\">\r\n        <table>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n                <td>\r\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\r\n                </td>\r\n                <td>\r\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\r\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n                    </input-group>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectrule === false\">\r\n                <td class=\"mkwidth\">\r\n                    <label> </label>\r\n                </td>\r\n            </tr>\r\n            <tr *ngIf=\"selectfiletype\">\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\r\n                </td>\r\n                <td>\r\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\r\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"mkwidth\">\r\n                    <label for=\"f_upload\">{{import_file}}</label>\r\n                </td>\r\n                <td>\r\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n                        (change)=\"selectedFileOnChange($event)\" />\r\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div> -->\r\n\r\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\r\n  <div class=\"col-12\" style=\"margin-top: 67px\">\r\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{rule_list}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\r\n                       [enableClear]=\"false\"\r\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\r\n          </input-group>\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <span>&nbsp;</span>\r\n    </div>\r\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{file_type}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\r\n                             [textField]=\"'label'\"\r\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\r\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\r\n        </div>\r\n        <span>&nbsp;</span>\r\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\r\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\r\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\r\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\r\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\r\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\r\n\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\" col-form-label\">\r\n          <span class=\"farris-label-text\">{{import_file}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\r\n                 [accept]=\"acceptFileType\"\r\n                 (change)=\"selectedFileOnChange($event)\"/>\r\n          <div class=\"input-group\">\r\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                   [(ngModel)]=\"fileName\"\r\n                   [placeholder]=\"import_placeholder\">\r\n            <span class=\"input-group-btn\">\r\n                            <button class=\"btn btn-primary\" type=\"button\"\r\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\r\n                        </span>\r\n          </div>\r\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\r\n        </div>\r\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\r\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\r\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\r\n    </div>\r\n\r\n\r\n  </div>\r\n</form>\r\n\r\n\r\n<ng-template #selectFooter>\r\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\r\n\r\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>\r\n",
                providers: [NotifyService, DataImportService
                ],
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
            }] }
];
/** @nocollapse */
ImportDialogComponent.ctorParameters = () => [
    { type: DataImportService },
    { type: NotifyService },
    { type: LoadingService },
    { type: HttpClient },
    { type: Injector },
    { type: BsModalService },
    { type: ListDataService },
    { type: MessagerService },
    { type: ComponentFactoryResolver }
];
ImportDialogComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    importOption: [{ type: Input }],
    frameContext: [{ type: Input }],
    methodType: [{ type: Input }],
    subject: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    needDestroy: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataExportService {
    /**
     * @param {?} operateService
     * @param {?} notify
     * @param {?} http
     * @param {?} loadingService
     */
    constructor(operateService, notify, http, loadingService) {
        this.operateService = operateService;
        this.notify = notify;
        this.http = http;
        this.loadingService = loadingService;
        this.origin = window.location.origin;
        this.export = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.i18nResource = res;
        }));
    }
    /**
     * 数据导出服务
     * @param {?} repository
     * @param {?} exportParam
     * @param {?} option
     * @return {?}
     */
    Export(repository, exportParam, option) {
        this.StartLoading();
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        const subject = befRestService.request(`${befRestService.baseUri}/service/dataexportvmaction`, 'put', null, exportParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            let exportResult = (/** @type {?} */ (data.returnValue));
            if (isNullOrUndefined(exportResult)) {
                exportResult = (/** @type {?} */ (data));
            }
            if (exportResult.succeed === true) {
                /** @type {?} */
                let fileName = '';
                if (option === '' || option['customfilename'] === '' || option['customfilename'] === undefined) {
                    fileName = exportResult.fileName;
                }
                else {
                    /** @type {?} */
                    const suffixIndex = exportResult.fileName.lastIndexOf('.');
                    /** @type {?} */
                    const suffix = exportResult.fileName.substring(suffixIndex);
                    if (!DataIEUtils.JudgeIllegalChar(option['customfilename'])) {
                        fileName = option['customfilename'] + suffix;
                    }
                    else {
                        fileName = exportResult.fileName;
                    }
                }
                /** @type {?} */
                const preurl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                this.operateService.DownloadFile(exportResult.docRelativePath, fileName, preurl, option);
                /** @type {?} */
                const subscriber = this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    this.CloseLoading();
                    if (result === '') {
                        this.export.emit('');
                        subscriber.unsubscribe();
                    }
                    else {
                        this.export.emit(result);
                        subscriber.unsubscribe();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.CloseLoading();
                    this.notify.error(error.message);
                }));
            }
            else {
                this.CloseLoading();
                this.errorlevel = exportResult.errorLevel;
                this.export.emit(exportResult.message);
                // this.notify.error('数据导出失败！\n 失败原因：' + exportResult.message);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.CloseLoading();
            this.notify.error(error.error.Message);
        }));
    }
    /**
     * 打包导出
     * @param {?} repository
     * @param {?} optionJson
     * @return {?}
     */
    ExportByPackage(repository, optionJson) {
        /** @type {?} */
        let packitems = optionJson.package.packitems;
        if (packitems === undefined || packitems === null || packitems.length === 0) {
            this.notify.error('请传入需要打包导出的规则信息');
            return;
        }
        this.StartLoading();
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        let relativePaths = [];
        /** @type {?} */
        let itemsFileName = [];
        this.ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson);
    }
    /**
     * @param {?} packitems
     * @param {?} befRestService
     * @param {?} relativePaths
     * @param {?} itemsFileName
     * @param {?} optionJson
     * @return {?}
     */
    ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson) {
        if (packitems.length <= 0) {
            return;
        }
        /** @type {?} */
        const item = packitems.pop();
        /** @type {?} */
        let customfilename = '';
        /** @type {?} */
        const ruleId = item['ruleid'];
        if (ruleId === undefined || ruleId === '') {
            this.notify.error('请传入需要打包导出的规则id');
            this.CloseLoading();
            return;
        }
        /** @type {?} */
        let globalVar = '';
        if (item['globalParam'] !== null && item['globalParam'] !== undefined) {
            if (typeof (item['globalParam']) === 'object') {
                globalVar = JSON.stringify(item['globalParam']);
            }
            else {
                globalVar = item['globalParam'];
            }
        }
        /** @type {?} */
        let itemfilename = item['itemfilename'];
        if (itemfilename !== null && itemfilename !== undefined) {
            itemsFileName.push(itemfilename);
        }
        /** @type {?} */
        const funcId = getQueryString('funcId');
        /** @type {?} */
        let exportParam = null;
        /** @type {?} */
        const filter = item['filter'];
        if (filter !== undefined && filter !== null && JSON.stringify(filter) !== '{}') {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Filter: filter,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        else {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        /** @type {?} */
        const subject = befRestService.request(`${befRestService.baseUri}/service/dataexportvmaction`, 'put', null, exportParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            let exportResult;
            if (isNullOrUndefined(data.returnValue)) {
                exportResult = (/** @type {?} */ (data));
            }
            else {
                exportResult = (/** @type {?} */ (data.returnValue));
            }
            if (exportResult.succeed === true) {
                relativePaths.push(exportResult.docRelativePath);
                customfilename = exportResult.fileName.split('.')[0];
                console.log('导出执行完毕，relativePath：' + JSON.stringify(exportResult.relativePath));
                if (packitems.length === 0) {
                    /** @type {?} */
                    const preurl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                    if (optionJson.package.customfilename !== undefined && optionJson.package.customfilename !== '') {
                        customfilename = optionJson.package.customfilename;
                    }
                    /** @type {?} */
                    let packtype = 'zip';
                    if (optionJson.package.packtype !== undefined) {
                        packtype = optionJson.package.packtype;
                    }
                    if (itemsFileName.length === 0) {
                        itemsFileName = null;
                    }
                    this.operateService.DownloadPackageFile(relativePaths, itemsFileName, customfilename, preurl, packtype);
                    /** @type {?} */
                    const subscriber = this.operateService.downloadComplete.subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        this.CloseLoading();
                        if (result === '') {
                            this.export.emit('');
                            subscriber.unsubscribe();
                        }
                        else {
                            this.export.emit(result);
                            subscriber.unsubscribe();
                        }
                    }));
                }
                else {
                    this.ExecuteMutiRequest(packitems, befRestService, relativePaths, itemsFileName, optionJson);
                }
            }
            else {
                this.CloseLoading();
                this.errorlevel = exportResult.errorLevel;
                this.export.emit(exportResult.message);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.CloseLoading();
            this.notify.error(error.error.Message);
        }));
    }
    /**
     * 手工表单导出
     * @param {?} exportParam
     * @param {?} option
     * @return {?}
     */
    Export4HandCraft(exportParam, option) {
        this.StartLoading();
        /** @type {?} */
        const su = option.su;
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/dataexportvmaction';
        this.http.put(fixedUrl, exportParam, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            responseType: 'blob',
            observe: 'response',
            params: { su: su }
        }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.CloseLoading();
            console.log(res);
            /** @type {?} */
            const data = res.body;
            if (data.type == 'application/json') {
                /** @type {?} */
                const reader = new FileReader();
                reader.onload = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const dataIeResult = (/** @type {?} */ (JSON.parse((/** @type {?} */ (reader.result)))));
                    if (!dataIeResult.succeed) {
                        this.errorlevel = dataIeResult.errorLevel;
                        this.export.emit(dataIeResult.message);
                    }
                });
                reader.readAsText(data, 'utf-8');
            }
            else {
                /** @type {?} */
                let fileName = '';
                /** @type {?} */
                let contentDisposition = res.headers.get("content-disposition");
                if (contentDisposition) {
                    // 正则获取filename的值
                    /** @type {?} */
                    let filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                    /** @type {?} */
                    let matches = filenameRegex.exec(contentDisposition);
                    if (matches != null && matches[1]) {
                        fileName = matches[1].replace(/['"]/g, '');
                    }
                    // 通过 URLEncoder.encode(pFileName, StandardCharsets.UTF_8.name()) 加密编码的, 使用decodeURI(fileName) 解密
                    fileName = decodeURI(fileName);
                    // 通过 new String(pFileName.getBytes(), StandardCharsets.ISO_8859_1) 加密编码的, 使用decodeURI(escape(fileName)) 解密
                    // fileName = decodeURI(escape(fileName))
                }
                if (!isNullOrUndefined(option.customfilename)) {
                    /** @type {?} */
                    const suffixIndex = fileName.lastIndexOf('.');
                    /** @type {?} */
                    const suffix = fileName.substring(suffixIndex);
                    fileName = option.customfilename + suffix;
                }
                /** @type {?} */
                const blob = new Blob([data]);
                if (!data || data.size == 0) {
                    this.export.emit('返回的数据为空');
                }
                else {
                    if (navigator.msSaveOrOpenBlob) {
                        navigator.msSaveOrOpenBlob(blob, fileName);
                    }
                    else {
                        /** @type {?} */
                        const link = document.createElement('a');
                        link.setAttribute('href', window.URL.createObjectURL(blob));
                        // 设置下载的文件名
                        link.setAttribute('download', fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                    this.export.emit('');
                }
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.CloseLoading();
            this.notify.error(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    StartLoading() {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.show();
        }
    }
    /**
     * @return {?}
     */
    CloseLoading() {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.clearAll();
        }
    }
    /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    ExportCurrentData(ruleId, frameContext, pageIndex, pageSize, option, suffix) {
        /** @type {?} */
        let exportParam = null;
        /** @type {?} */
        let model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        /** @type {?} */
        let globalVar = '';
        if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (suffix === null || suffix === undefined) {
            suffix = '';
        }
        /** @type {?} */
        const funcId = getQueryString('funcId');
        /** @type {?} */
        let filterParem = option['filter'];
        /** @type {?} */
        const newFilters = [];
        /** @type {?} */
        const selectFilterGridComponent = option['selectFilterGridComponent'];
        if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
            /** @type {?} */
            const ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
            if (!isNullOrUndefined(ids) && ids.length > 0) {
                /** @type {?} */
                let idsStr = '';
                for (let i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    const id = ids[i];
                    if (i === ids.length - 1) {
                        idsStr += id;
                    }
                    else {
                        idsStr += id + '\r\n';
                    }
                }
                /** @type {?} */
                const selectIdFilterCondition = {
                    FilterField: "ID",
                    Compare: 14,
                    Value: idsStr,
                    Relation: 1,
                    Expresstype: 0
                };
                newFilters.push(selectIdFilterCondition);
            }
            else {
                this.notify.info(this.i18nResource['select_data_export']);
                return;
            }
        }
        /** @type {?} */
        const filterConditionList = frameContext.uiState['filterConditionList'];
        if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
            /** @type {?} */
            let filterConditionListJson;
            if (typeof (filterConditionList) === 'string') {
                filterConditionListJson = JSON.parse(filterConditionList);
            }
            else {
                filterConditionListJson = filterConditionList;
            }
            for (let index = 0; index < filterConditionListJson.length; index++) {
                /** @type {?} */
                const element = filterConditionListJson[index];
                /** @type {?} */
                const value = decodeURIComponent(element.Value);
                element.Value = value;
                newFilters.push(element);
            }
        }
        if (newFilters.length > 0) {
            if (!isNullOrUndefined(filterParem) && filterParem.FilterConditions !== null) {
                filterParem.FilterConditions = newFilters.concat(filterParem.FilterConditions);
            }
            else {
                if (isNullOrUndefined(filterParem)) {
                    filterParem = {};
                }
                filterParem['FilterConditions'] = newFilters;
            }
        }
        if (isNullOrUndefined(filterParem)) {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Suffix: suffix,
                        PaginationInfo: {
                            PageIndex: pageIndex,
                            PageSize: pageSize
                        },
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        else {
            //确保最后一个关系为空
            if (!isNullOrUndefined(filterParem.FilterConditions) && filterParem.FilterConditions.length > 0) {
                filterParem.FilterConditions[filterParem.FilterConditions.length - 1].Relation = 0;
            }
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Filter: filterParem,
                        Suffix: suffix,
                        PaginationInfo: {
                            PageIndex: pageIndex,
                            PageSize: pageSize
                        },
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        this.Export(frameContext.repository, exportParam, option);
    }
    /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    ExportById(ruleId, frameContext, option, suffix) {
        /** @type {?} */
        let exportParam = null;
        /** @type {?} */
        let model = '';
        if (option.Models !== undefined && option.Models !== null && option.Models.length > 0) {
            model = JSON.stringify(option.Models[0]);
        }
        /** @type {?} */
        let globalVar = '';
        if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (suffix === null || suffix === undefined) {
            suffix = '';
        }
        /** @type {?} */
        const funcId = getQueryString('funcId');
        /** @type {?} */
        let filterParam = option['filter'];
        /** @type {?} */
        const newFilters = [];
        /** @type {?} */
        const selectFilterGridComponent = option['selectFilterGridComponent'];
        if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
            /** @type {?} */
            const ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
            if (!isNullOrUndefined(ids) && ids.length > 0) {
                /** @type {?} */
                let idsStr = '';
                for (let i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    const id = ids[i];
                    if (i === ids.length - 1) {
                        idsStr += id;
                    }
                    else {
                        idsStr += id + '\r\n';
                    }
                }
                /** @type {?} */
                const selectIdFilterCondition = {
                    FilterField: "ID",
                    Compare: 14,
                    Value: idsStr,
                    Relation: 1,
                    Expresstype: 0
                };
                newFilters.push(selectIdFilterCondition);
            }
            else {
                this.notify.info(this.i18nResource['select_data_export']);
                return;
            }
        }
        if (option['enableScreeningScheme'] === true) {
            /** @type {?} */
            const filterConditionList = frameContext.uiState['filterConditionList'];
            if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                /** @type {?} */
                let filterConditionListJson;
                if (typeof (filterConditionList) === 'string') {
                    filterConditionListJson = JSON.parse(filterConditionList);
                }
                else {
                    filterConditionListJson = filterConditionList;
                }
                for (let index = 0; index < filterConditionListJson.length; index++) {
                    /** @type {?} */
                    const element = filterConditionListJson[index];
                    /** @type {?} */
                    const value = decodeURIComponent(element.Value);
                    // if (typeof (value) === 'string' && value.includes('\r\n')) {
                    //     element.Value = value.replace('\r\n', '\\r\\n');
                    // } else {
                    // }
                    element.Value = value;
                    newFilters.push(element);
                }
            }
        }
        if (newFilters.length > 0) {
            if (!isNullOrUndefined(filterParam) && filterParam.FilterConditions !== null) {
                filterParam.FilterConditions = newFilters.concat(filterParam.FilterConditions);
            }
            else {
                if (isNullOrUndefined(filterParam)) {
                    filterParam = {};
                }
                filterParam['FilterConditions'] = newFilters;
            }
        }
        if (isNullOrUndefined(filterParam)) {
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Suffix: suffix,
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        else {
            //确保最后一个关系为空
            if (!isNullOrUndefined(filterParam.FilterConditions) && filterParam.FilterConditions.length > 0) {
                filterParam.FilterConditions[filterParam.FilterConditions.length - 1].Relation = 0;
            }
            exportParam = {
                body: {
                    exportContext: {
                        RuleId: ruleId,
                        Filter: filterParam,
                        Suffix: suffix,
                        Model: model,
                        GlobalParam: globalVar,
                        funcId: funcId
                    }
                }
            };
        }
        this.Export(frameContext.repository, exportParam, option);
    }
    /**
     * @param {?} ruleId
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    ExportById4HandCraft(ruleId, option, suffix) {
        /** @type {?} */
        let globalVar = '';
        if (!isNullOrUndefined(option['globalParam'])) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (isNullOrUndefined(suffix)) {
            suffix = '';
        }
        /** @type {?} */
        let funcId = '';
        if (!isNullOrUndefined(option.funcId)) {
            funcId = option.funcId;
        }
        /** @type {?} */
        const exportParam = {
            ruleId: ruleId,
            filter: option['filter'],
            suffix: suffix,
            globalParam: globalVar,
            funcId: funcId
        };
        this.Export4HandCraft(exportParam, option);
    }
    /**
     * @param {?} ruleId
     * @param {?} frameContext
     * @param {?} option
     * @param {?=} suffix
     * @return {?}
     */
    ExportCurrentChildData(ruleId, frameContext, option, suffix) {
        /** @type {?} */
        let exportParam = null;
        /** @type {?} */
        let globalVar = '';
        if (option['globalParam'] !== null && option['globalParam'] !== undefined) {
            if (typeof (option['globalParam']) === 'object') {
                globalVar = JSON.stringify(option['globalParam']);
            }
            else {
                globalVar = option['globalParam'];
            }
        }
        if (suffix === null || suffix === undefined) {
            suffix = '';
        }
        /** @type {?} */
        const funcId = getQueryString('funcId');
        exportParam = {
            body: {
                exportContext: {
                    RuleId: ruleId,
                    Suffix: suffix,
                    MainObjId: frameContext.bindingData.list.currentId,
                    GlobalParam: globalVar,
                    funcId: funcId
                }
            }
        };
        this.Export(frameContext.repository, exportParam, option);
    }
}
DataExportService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataExportService.ctorParameters = () => [
    { type: FileOperateService },
    { type: NotifyService },
    { type: HttpClient },
    { type: LoadingService }
];
DataExportService.propDecorators = {
    export: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomDataIEService {
    /**
     * @param {?} notify
     * @param {?} operateService
     * @param {?} loadingService
     * @param {?} importService
     * @param {?} http
     */
    constructor(notify, operateService, loadingService, importService, http) {
        this.notify = notify;
        this.operateService = operateService;
        this.loadingService = loadingService;
        this.importService = importService;
        this.http = http;
        this.origin = window.location.origin;
        this.customExportUrl = this.origin + '/api/runtime/dip/v1.0/customexport';
        this.customImportUrl = this.origin + '/api/runtime/dip/v1.0/customimport';
        this.export = new EventEmitter();
        this.complete = new EventEmitter();
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.i18nResource = res;
        }));
    }
    /**
     * @param {?} model
     * @param {?} components
     * @param {?} frameContext
     * @param {?} suffix
     * @param {?} isImportForm
     * @param {?} i18nId
     * @param {?} dimension
     * @return {?}
     */
    SaveCustomImportRule(model, components, frameContext, suffix, isImportForm, i18nId, dimension) {
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        const tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        let importParam = null;
        if (isNullOrUndefined(dimension)) {
            importParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataImport', model['MainObject']['Source']['SourceMetadataID']],
                    importForm: isImportForm,
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        else {
            importParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataImport', model['MainObject']['Source']['SourceMetadataID'], dimension],
                    importForm: isImportForm,
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        /** @type {?} */
        let subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(`${this.customImportUrl}/AddImportRule`, importParam.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(`${this.customImportUrl}/AddImportRule`, 'post', { su: su }, importParam);
        }
        return subject;
    }
    /**
     * @param {?} model
     * @param {?} components
     * @param {?} frameContext
     * @param {?} suffix
     * @param {?} i18nId
     * @param {?} dimension
     * @return {?}
     */
    SaveCustomExportRule(model, components, frameContext, suffix, i18nId, dimension) {
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        const tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        let exportParam = null;
        if (isNullOrUndefined(dimension)) {
            exportParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataExport', model['MainObject']['Source']['SourceMetadataID']],
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        else {
            exportParam = {
                body: {
                    dataExchangeModel: JSON.stringify(model),
                    components: components,
                    suffix: suffix,
                    keys: ['DataExport', model['MainObject']['Source']['SourceMetadataID'], dimension],
                    su: su,
                    i18nId: i18nId
                }
            };
        }
        /** @type {?} */
        let subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(`${this.customExportUrl}/AddExportRule`, exportParam.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(`${this.customExportUrl}/AddExportRule`, 'post', { su: su }, exportParam);
        }
        return subject;
    }
    // 下载模板
    /**
     * @param {?} model
     * @param {?} frameContext
     * @param {?} importOption
     * @return {?}
     */
    DowmloadTemplate(model, frameContext, importOption) {
        /** @type {?} */
        const keys = ['DataImport', model['MainObject']['Source']['SourceMetadataID'], importOption.dimension];
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        const tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        const templateParam = {
            body: {
                keys: keys,
                su: su
            }
        };
        /** @type {?} */
        const subject = befRestService.request(`${this.customImportUrl}/TemplateDownload`, 'post', { su: su }, templateParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data['success'] === true) {
                /** @type {?} */
                let filename = data['fileName'];
                if (importOption !== null && importOption['templatefilename'] !== null && importOption['templatefilename'] !== undefined) {
                    /** @type {?} */
                    const suffixIndex = filename.lastIndexOf('.');
                    /** @type {?} */
                    const suffix = filename.substring(suffixIndex);
                    filename = importOption['templatefilename'] + suffix;
                }
                /** @type {?} */
                const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                this.operateService.DownloadFile(data['relativePath'], filename, preUrl, importOption);
                /** @type {?} */
                const subscription = this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result === '') {
                        this.complete.emit('');
                        subscription.unsubscribe();
                    }
                    else {
                        this.complete.emit(result);
                        subscription.unsubscribe();
                    }
                }));
            }
            else {
                this.complete.emit(data['message']);
            }
        }));
    }
    /**
     * @param {?} keys
     * @param {?} repository
     * @param {?} i18nId
     * @param {?} model
     * @return {?}
     */
    GetImportRuleModel(keys, repository, i18nId, model) {
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        const tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        const params = {
            body: {
                keys: keys,
                su: su,
                i18nId: i18nId,
                needI18nModel: JSON.stringify(model)
            }
        };
        /** @type {?} */
        let subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(`${this.customImportUrl}/GetImportModel`, params.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(`${this.customImportUrl}/GetImportModel`, 'post', { su: su }, params);
        }
        return subject;
    }
    /**
     * @param {?} keys
     * @param {?} repository
     * @param {?} i18nId
     * @param {?} model
     * @return {?}
     */
    GetExportRuleModel(keys, repository, i18nId, model) {
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        const tempUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        const params = {
            body: {
                keys: keys,
                su: su,
                i18nId: i18nId,
                needI18nModel: JSON.stringify(model)
            }
        };
        /** @type {?} */
        let subject;
        if (!isNullOrUndefined(this.http)) {
            subject = this.http.post(`${this.customExportUrl}/GetExportModel`, params.body, { params: { su: su } });
        }
        else {
            subject = befRestService.request(`${this.customExportUrl}/GetExportModel`, 'post', { su: su }, params);
        }
        return subject;
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    ImportByRule(commonParams) {
        /** @type {?} */
        const repository = commonParams.repository;
        /** @type {?} */
        const option = commonParams.option;
        /** @type {?} */
        const keys = commonParams.keys;
        /** @type {?} */
        const fileName = commonParams.fileName;
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        let globalVar = '';
        if (option !== null && option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            globalVar = JSON.stringify(option['GlobalParam']);
        }
        /** @type {?} */
        const funcId = getQueryString('funcId');
        /** @type {?} */
        const importParam = {
            body: {
                dataImportContext: {
                    Keys: keys,
                    FileName: fileName,
                    GlobalParam: globalVar,
                    funcId: funcId
                }
            }
        };
        commonParams.befRestService = befRestService;
        commonParams.importParam = importParam;
        commonParams.mainObjId = '';
        this.importService.Import(commonParams);
    }
    /**
     * @param {?} commonParams
     * @return {?}
     */
    ImportSubTableByRule(commonParams) {
        /** @type {?} */
        const repository = commonParams.repository;
        /** @type {?} */
        const option = commonParams.option;
        /** @type {?} */
        const keys = commonParams.keys;
        /** @type {?} */
        const fileName = commonParams.fileName;
        /** @type {?} */
        const frameContext = commonParams.frameContext;
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(repository);
        /** @type {?} */
        let globalVar = '';
        if (option !== null && option['GlobalParam'] !== null && option['GlobalParam'] !== undefined) {
            globalVar = JSON.stringify(option['GlobalParam']);
        }
        if (frameContext.bindingData.list.currentId === '' || frameContext.bindingData.list.currentId === null) {
            this.notify.info(this.i18nResource['master_table_noid']);
            return false;
        }
        else {
            /** @type {?} */
            const funcId = getQueryString('funcId');
            /** @type {?} */
            const importParam = {
                body: {
                    dataImportContext: {
                        Keys: keys,
                        FileName: fileName,
                        MainObjId: frameContext.bindingData.list.currentId,
                        GlobalParam: globalVar,
                        funcId: funcId
                    },
                    requestInfo: befRestService.buildRequestInfo()
                }
            };
            commonParams.befRestService = befRestService;
            commonParams.importParam = importParam;
            commonParams.mainObjId = frameContext.bindingData.list.currentId;
            this.importService.Import(commonParams);
        }
    }
    /**
     * @param {?} keys
     * @param {?} filter
     * @param {?} option
     * @param {?} frameContext
     * @return {?}
     */
    ExportByRule(keys, filter, option, frameContext) {
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(frameContext.repository);
        /** @type {?} */
        const funcId = getQueryString('funcId');
        /** @type {?} */
        const newFilters = [];
        /** @type {?} */
        const selectFilterGridComponent = option['selectFilterGridComponent'];
        if (!isNullOrUndefined(selectFilterGridComponent) && !isNullOrEmpty(selectFilterGridComponent)) {
            /** @type {?} */
            const ids = frameContext.appContext.frameContextManager.getFrameContextById(selectFilterGridComponent).uiState['ids'];
            if (!isNullOrUndefined(ids) && ids.length > 0) {
                /** @type {?} */
                let idsStr = '';
                for (let i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    const id = ids[i];
                    if (i === ids.length - 1) {
                        idsStr += id;
                    }
                    else {
                        idsStr += id + '\r\n';
                    }
                }
                /** @type {?} */
                const selectIdFilterCondition = {
                    FilterField: "ID",
                    Compare: 14,
                    Value: idsStr,
                    Relation: 1,
                    Expresstype: 0
                };
                newFilters.push(selectIdFilterCondition);
            }
            else {
                this.notify.info(this.i18nResource['select-data-export']);
                return;
            }
        }
        if (option['enableScreeningScheme'] === true) {
            /** @type {?} */
            const filterConditionList = frameContext.uiState['filterConditionList'];
            if (filterConditionList !== undefined && filterConditionList !== null && filterConditionList !== '' && filterConditionList !== '[]') {
                /** @type {?} */
                let filterConditionListJson;
                if (typeof (filterConditionList) === 'string') {
                    filterConditionListJson = JSON.parse(filterConditionList);
                }
                else {
                    filterConditionListJson = filterConditionList;
                }
                for (let index = 0; index < filterConditionListJson.length; index++) {
                    /** @type {?} */
                    const element = filterConditionListJson[index];
                    /** @type {?} */
                    const value = decodeURIComponent(element.Value);
                    element.Value = value;
                    newFilters.push(element);
                }
            }
        }
        if (newFilters.length > 0) {
            if (!isNullOrUndefined(filter) && filter.FilterConditions !== null) {
                filter.FilterConditions = newFilters.concat(filter.FilterConditions);
            }
            else {
                if (isNullOrUndefined(filter)) {
                    filter = {};
                }
                filter['FilterConditions'] = newFilters;
            }
        }
        if (!isNullOrUndefined(filter) && !isNullOrUndefined(filter.FilterConditions)) {
            //确保最后一个关系为空
            filter.FilterConditions[filter.FilterConditions.length - 1].Relation = 0;
        }
        /** @type {?} */
        const exportParam = {
            body: {
                exportContext: {
                    Filter: filter,
                    Keys: keys,
                    GlobalParam: '',
                    funcId: funcId
                }
            }
        };
        this.loadingService.show();
        /** @type {?} */
        const subject = befRestService.request(`${befRestService.baseUri}/service/dataexportvmaction`, 'put', null, exportParam);
        subject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data === null) {
                // this.export.emit(false);
                this.notify.info('数据导出失败！\n 失败原因：服务端响应异常，请检查');
            }
            /** @type {?} */
            let exportResult = (/** @type {?} */ (data.returnValue));
            if (isNullOrUndefined(exportResult)) {
                exportResult = (/** @type {?} */ (data));
            }
            /** @type {?} */
            let fileName = exportResult.fileName;
            if (option !== null && option['customfilename'] !== null && option['customfilename'] !== undefined) {
                /** @type {?} */
                const suffixIndex = fileName.lastIndexOf('.');
                /** @type {?} */
                const suffix = fileName.substring(suffixIndex);
                fileName = option['customfilename'] + suffix;
            }
            if (exportResult.succeed === true) {
                /** @type {?} */
                const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
                this.operateService.DownloadFile(exportResult.relativePath, fileName, preUrl, option);
                /** @type {?} */
                const subscriber = this.operateService.downloadComplete.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    this.loadingService.clearAll();
                    if (result === '') {
                        this.export.emit('');
                        subscriber.unsubscribe();
                    }
                    else {
                        this.export.emit(result);
                        subscriber.unsubscribe();
                    }
                }));
            }
            else {
                this.loadingService.clearAll();
                this.errorlevel = exportResult.errorLevel;
                this.export.emit(exportResult.message);
                // this.notify.error('数据导出失败！\n 失败原因：' + exportResult.message);
            }
        }));
    }
}
CustomDataIEService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CustomDataIEService.ctorParameters = () => [
    { type: NotifyService },
    { type: FileOperateService },
    { type: LoadingService },
    { type: DataImportService },
    { type: HttpClient }
];
CustomDataIEService.propDecorators = {
    export: [{ type: Output }]
};
/** @nocollapse */ CustomDataIEService.ngInjectableDef = defineInjectable({ factory: function CustomDataIEService_Factory() { return new CustomDataIEService(inject(NotifyService), inject(FileOperateService), inject(LoadingService), inject(DataImportService), inject(HttpClient)); }, token: CustomDataIEService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//自定义导出
class ExportDialogComponent {
    /**
     * @param {?} dataExportService
     * @param {?} notify
     * @param {?} fileService
     * @param {?} entityService
     * @param {?} customIEService
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} http
     */
    constructor(dataExportService, notify, fileService, entityService, customIEService, resolver, modalService, http) {
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.fileService = fileService;
        this.entityService = entityService;
        this.customIEService = customIEService;
        this.resolver = resolver;
        this.modalService = modalService;
        this.http = http;
        // 规则ID
        this.ruleId = '';
        this.i18nId = '';
        this.exportOption = null;
        this.isHandCraft = false;
        this.subject = null;
        // repository = null;
        this.frameContext = null;
        this.show = false;
        this.needDestroy = new EventEmitter();
        this.valueField = 'Office Excel97-2003(*.xls)';
        this.Model = null;
        this.components = null;
        this.filter = null;
        this.InnerModel = null;
        this.CustomModel = null;
        this.isCustomExport = null;
        // public fileListItems = [
        //     {id:'Office Excel97-2003(*.xls)',label:'Office Excel97-2003(*.xls)'},
        //     {id:'Office Excel(*.xlsx)',label:'Office Excel(*.xlsx)'},
        //     {id:'Office Excel Macro(*.xlsm)',label:'Office Excel Macro(*.xlsm)'},
        //     {id:'WPS Table(*.et)',label:'WPS Table(*.et)'}
        //     // 'WPS Table(Template File)(*.ett)'
        // ];
        this.fileListItems = [
            'Office Excel97-2003(*.xls)',
            'Office Excel(*.xlsx)',
            'Office Excel Macro(*.xlsm)',
            'WPS Table(*.et)'
            // 'WPS Table(Template File)(*.ett)'
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.export_success = res['export_success'];
            this.export_fail = res['export_fail'];
            this.file_type = res['file_type'];
            this.download_vsto = res['download_vsto'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.customexport_no_column = res['customexport_no_column'];
            this.vsto_component = res['vsto_component'];
        }));
    }
    /**
     * @return {?}
     */
    DownloadVSTO() {
        /** @type {?} */
        const repository = this.frameContext === null ? null : this.frameContext.repository;
        if (this.isHandCraft === true) {
            /** @type {?} */
            const su = DataIEUtils.ChooseSu(repository, this.exportOption);
            this.fileService.DownloadFile4HandCraft('数据导出组件.msi', this.vsto_component, su, false);
        }
        else {
            /** @type {?} */
            const befService = DataIEUtils.GetBefRestService(repository);
            this.fileService.DownloadFile('数据导出组件.msi', this.vsto_component, befService.baseUri, false);
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.needDestroy.emit();
    }
    /**
     * @return {?}
     */
    Ok() {
        if (this.ruleId === '' && this.InnerModel === null) {
            return;
        }
        /** @type {?} */
        let suffix = '.xls';
        switch (this.valueField) {
            case 'Office Excel97-2003(*.xls)':
                suffix = '.xls';
                break;
            case 'Office Excel(*.xlsx)':
                suffix = '.xlsx';
                break;
            case 'Office Excel Macro(*.xlsm)':
                suffix = '.xlsm';
                break;
            case 'WPS Table(*.et)':
                suffix = '.et';
                break;
            case 'WPS Table(Template File)(*.ett)':
                suffix = '.ett';
                break;
            default:
                break;
        }
        if (this.isCustomExport === false) {
            suffix = null;
        }
        //自定义导出分支
        if (this.InnerModel !== null) {
            this.eleSelectComp.Save();
            /** @type {?} */
            const elements = this.InnerModel.MainObject.Elements;
            /** @type {?} */
            const mainObjName = this.InnerModel.MainObject.FileObjectName;
            if (elements == null || elements === undefined || elements.length === 0) {
                this.notify.info(mainObjName + ' ' + this.customexport_no_column);
                return;
            }
            this.customIEService.SaveCustomExportRule(this.InnerModel, this.components, this.frameContext, suffix, this.i18nId, this.exportOption.dimension).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data['success'] === true) {
                    this.customIEService.ExportByRule(['DataExport', this.Model['MainObject']['Source']['SourceMetadataID'], this.exportOption.dimension], this.filter, this.exportOption, this.frameContext);
                }
                else {
                    this.notify.error(this.export_fail + data['message']);
                }
            }));
            /** @type {?} */
            const unscriber = this.customIEService.export.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data === '') {
                    this.notify.success(this.export_success);
                    unscriber.unsubscribe();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.customIEService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.export_fail + data);
                    }
                    // this.notify.error('导出失败！');
                    unscriber.unsubscribe();
                    this.subject.next(false);
                    this.subject.complete();
                }
                this.needDestroy.emit();
            }));
        }
        //选VSTO特性下的普通导出分支
        if (this.ruleId !== '') {
            switch (this.methodType) {
                case MethodType.CommonExport:
                    this.dataExportService.ExportById(this.ruleId, this.frameContext, this.exportOption, suffix);
                    /** @type {?} */
                    const unscriber = this.dataExportService.export.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data === '') {
                            this.notify.success(this.export_success);
                            unscriber.unsubscribe();
                            this.subject.next(true);
                            this.subject.complete();
                        }
                        else {
                            /** @type {?} */
                            const errorlevel = this.dataExportService.errorlevel;
                            if (errorlevel === 'Info') {
                                this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                this.notify.warning(data);
                            }
                            else {
                                this.notify.error(this.export_fail + data);
                            }
                            // this.notify.error('导出失败！');
                            unscriber.unsubscribe();
                            this.subject.next(false);
                            this.subject.complete();
                        }
                        this.needDestroy.emit();
                    }));
                    break;
                case MethodType.ExportCurrentTableData:
                    this.dataExportService.ExportCurrentData(this.ruleId, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, this.exportOption, suffix);
                    /** @type {?} */
                    const exportUnscribe = this.dataExportService.export.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data === '') {
                            this.notify.success(this.export_success);
                            exportUnscribe.unsubscribe();
                            this.subject.next(true);
                            this.subject.complete();
                        }
                        else {
                            /** @type {?} */
                            const errorlevel = this.dataExportService.errorlevel;
                            if (errorlevel === 'Info') {
                                this.notify.info(data);
                            }
                            else if (errorlevel === 'Warning') {
                                this.notify.warning(data);
                            }
                            else {
                                this.notify.error(this.export_fail + data);
                            }
                            exportUnscribe.unsubscribe();
                            this.subject.next(false);
                            this.subject.complete();
                        }
                        this.needDestroy.emit();
                    }));
                    break;
            }
            // this.needDestroy.emit();
        }
    }
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit(true);
    }
}
ExportDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-export-dialog',
                template: "<div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\r\n    <div region=\"north\" class=\"north\">\r\n        <div class=\"row\" style=\"margin-top: 12px\">\r\n            <!--\r\n            <div class=\"div-inline\">\r\n                <input type=\"text\" style=\"text-align: center;width: 100px; border: 0px\" name=\"expfiltercond\" id=\"expfiltercond\" value=\"\u8FC7\u6EE4\u6392\u5E8F\u6761\u4EF6\">\r\n            </div>\r\n            <div class=\"div-inline\">\r\n                <input style=\"width:680px\" type=\"text\" id=\"filterExpression\" name=\"filterExpression\" placeholder=\"\u8BBE\u7F6E\u8FC7\u6EE4\u4E0E\u6392\u5E8F\u6761\u4EF6\" />\r\n            </div>\r\n            <div class=\"div-inline\">\r\n                <button class=\" btn btn-primary\" style=\"width:60px\" type=\"button\" (click)=\"SetFilter()\">\u8BBE\u7F6E</button>\r\n            </div>\r\n            -->\r\n            \r\n            <!--<label>\u8FC7\u6EE4</label>\r\n            <filter [columns]=\"columns\", [(ngModel)]=\"filterConditions\"></filter>-->\r\n            <!--\r\n            <label>\u6392\u5E8F</label>\r\n            <sorter [columns]=\"columns\" [(ngModel)]=\"conditions\"></sorter>\r\n            -->\r\n        </div>\r\n        <div style=\"margin-top: 12px\">\r\n            <div class=\"div-inline\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div region=\"center\" class=\"center flex-fill\">\r\n      <div *ngIf=\"isCustomExport\">\r\n          <app-element-select [Model]=\"Model\" [InnerModel]=\"InnerModel\" [CustomModel]=\"CustomModel\"></app-element-select>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"isCustomExport\" region=\"south\" class=\"south mgleft\">\r\n        <!-- \u81EA\u5B9A\u4E49\u5BFC\u51FA -->\r\n      <label>{{file_type}}</label>\r\n      <kendo-dropdownlist class=\"longleng\" id=\"fileType\" [data]=\"fileListItems\" [(ngModel)] = \"valueField\">\r\n      </kendo-dropdownlist>\r\n      <!-- <farris-combo-list id=\"fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list> -->\r\n    </div>\r\n</div>\r\n<ng-template #selectFooter>\r\n    <!-- <div class=\"btns\">\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"DownloadVSTO()\" *ngIf=\"show\">{{download_vsto}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n    </div> -->\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadVSTO()\" *ngIf=\"show\">{{download_vsto}}</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>",
                providers: [NotifyService],
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}*{padding:0;margin:0}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longleng{width:820px}"]
            }] }
];
/** @nocollapse */
ExportDialogComponent.ctorParameters = () => [
    { type: DataExportService },
    { type: NotifyService },
    { type: FileOperateService },
    { type: EntityListService },
    { type: CustomDataIEService },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: HttpClient }
];
ExportDialogComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    i18nId: [{ type: Input }],
    exportOption: [{ type: Input }],
    isHandCraft: [{ type: Input }],
    frameContext: [{ type: Input }],
    methodType: [{ type: Input }],
    show: [{ type: Input }],
    needDestroy: [{ type: Output }],
    eleSelectComp: [{ type: ViewChild, args: [ElementSelectComponent,] }],
    Model: [{ type: Input }],
    components: [{ type: Input }],
    filter: [{ type: Input }],
    InnerModel: [{ type: Input }],
    CustomModel: [{ type: Input }],
    isCustomExport: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileDropDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.fileOver = new EventEmitter();
        this.FileDrop = new EventEmitter();
        this.element = element;
    }
    /**
     * @return {?}
     */
    getOptions() {
        return this.uploader.options;
    }
    /**
     * @return {?}
     */
    getFilters() {
        return {};
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        /** @type {?} */
        const transfer = this._getTransfer(event);
        if (!transfer) {
            return;
        }
        /** @type {?} */
        const options = this.getOptions();
        /** @type {?} */
        const filters = this.getFilters();
        this._preventAndStop(event);
        this.uploader.addToQueue(transfer.files, options, filters);
        this.fileOver.emit(false);
        this.FileDrop.emit(transfer.files);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        /** @type {?} */
        const transfer = this._getTransfer(event);
        if (!this._haveFiles(transfer.types)) {
            return;
        }
        transfer.dropEffect = 'copy';
        this._preventAndStop(event);
        this.fileOver.emit(true);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        if (((/** @type {?} */ (this))).element) {
            if (event.currentTarget === ((/** @type {?} */ (this))).element[0]) {
                return;
            }
        }
        this._preventAndStop(event);
        this.fileOver.emit(false);
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    _getTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    _preventAndStop(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    /**
     * @protected
     * @param {?} types
     * @return {?}
     */
    _haveFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        else if (types.contains) {
            return types.contains('Files');
        }
        else {
            return false;
        }
    }
}
FileDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[libFileDrop]'
            },] }
];
/** @nocollapse */
FileDropDirective.ctorParameters = () => [
    { type: ElementRef }
];
FileDropDirective.propDecorators = {
    uploader: [{ type: Input }],
    fileOver: [{ type: Output }],
    FileDrop: [{ type: Output }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],
    onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
    onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileSelectDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.FileSelected = new EventEmitter();
        this.element = element;
    }
    /**
     * @return {?}
     */
    getOptions() {
        return this.uploader.options;
    }
    /**
     * @return {?}
     */
    getFilters() {
        return {};
    }
    /**
     * @return {?}
     */
    isEmptyAfterSelection() {
        return !!this.element.nativeElement.attributes.multiple;
    }
    /**
     * @return {?}
     */
    onChange() {
        /** @type {?} */
        const files = this.element.nativeElement.files;
        /** @type {?} */
        const options = this.getOptions();
        /** @type {?} */
        const filters = this.getFilters();
        this.uploader.addToQueue(files, options, filters);
        this.FileSelected.emit(files);
        if (this.isEmptyAfterSelection()) {
            this.element.nativeElement.value = '';
        }
    }
}
FileSelectDirective.decorators = [
    { type: Directive, args: [{ selector: '[libFileSelect]' },] }
];
/** @nocollapse */
FileSelectDirective.ctorParameters = () => [
    { type: ElementRef }
];
FileSelectDirective.propDecorators = {
    uploader: [{ type: Input }],
    FileSelected: [{ type: Output }],
    onChange: [{ type: HostListener, args: ['change',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomImportDialogComponent {
    /**
     * @param {?} customDataIEService
     * @param {?} notify
     * @param {?} loadingService
     * @param {?} importService
     * @param {?} http
     */
    constructor(customDataIEService, notify, loadingService, importService, http) {
        this.customDataIEService = customDataIEService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.importService = importService;
        this.http = http;
        // 规则ID
        this.ruleId = '';
        this.i18nId = '';
        // 过滤条件
        this.importOption = null;
        this.frameContext = null;
        // @Input()
        // methodType: MethodType;
        this.subject = null;
        this.acceptFileType = '.xls';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.valueField = 'Office Excel97-2003(*.xls)';
        this.uploader = new FileUploader({
            url: this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            allowedFileType: ['xls', 'xml', 'pdf', 'wps', 'doc']
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.Model = null;
        this.InnerModel = null;
        this.components = null;
        this.CustomModel = null;
        this.IsImportForm = false;
        // public fileListItems = [
        //     {id:'Office Excel97-2003(*.xls)',label:'Office Excel97-2003(*.xls)'},
        //     {id:'Office Excel(*.xlsx)',label:'Office Excel(*.xlsx)'},
        //     {id:'Office Excel Macro(*.xlsm)',label:'Office Excel Macro(*.xlsm)'},
        //     {id:'WPS Table(*.et)',label:'WPS Table(*.et)'}
        //     // 'WPS Table(Template File)(*.ett)'
        // ];
        this.fileListItems = [
            'Office Excel97-2003(*.xls)',
            'Office Excel(*.xlsx)',
            'Office Excel Macro(*.xlsm)',
            'WPS Table(*.et)'
            // 'WPS Table(Template File)(*.ett)'
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.import_file = res['import_file'];
            this.choose_file = res['choose_file'];
            this.file_type = res['file_type'];
            this.import_placeholder = res['import_placeholder'];
            this.download_template = res['download_template'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.choose_truefile = res['choose_truefile'];
            this.download_template_ok = res['download_template_ok'];
            this.download_template_fail = res['download_template_fail'];
            this.upload_fail = res['upload_fail'];
            this.import_success = res['import_success'];
            this.import_form_success = res['import_form_success'];
            this.import_fail = res['import_fail'];
            this.upload_filetype_nomatch = res['upload_filetype_nomatch'];
            this.save_customrule_fail = res['save_customrule_fail'];
            this.customexport_no_column = res['customexport_no_column'];
            this.select_xlsx_notify = res['select_xlsx_notify'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 上传成功后执行的事件
        this.uploader.onSuccessItem = this.Import.bind(this);
        // 上传失败后执行的事件
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        // 添加文件后执行的事件
        this.uploader.onAfterAddingFile = this.afterAddFile;
        // 上传文件前执行的事件
        this.uploader.onBeforeUploadItem = this.SaveCustomImportRule;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectedFileOnChange(event) {
        /** @type {?} */
        const str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        const index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        // console.log('队列中的文件' + this.uploader.queue[0]);
    }
    // 关闭窗口
    /**
     * @return {?}
     */
    Close() {
        this.needDestroy.emit();
    }
    // 选择文件事件
    /**
     * @return {?}
     */
    SelectFile() {
        this.fileUpload.nativeElement.click();
    }
    /**
     * @return {?}
     */
    fileTypeValueChange() {
        /** @type {?} */
        const suffix = this.getFileExtension();
        if (suffix === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        }
    }
    //下载模板
    /**
     * @return {?}
     */
    DownloadTemplate() {
        //const temRes = JSON.parse(response);
        /** @type {?} */
        let suffix = '.xls';
        suffix = this.getFileExtension();
        if (this.InnerModel !== null) {
            this.eleSelectComp.Save();
            /** @type {?} */
            const elements = this.InnerModel.MainObject.Elements;
            /** @type {?} */
            const mainObjName = this.InnerModel.MainObject.FileObjectName;
            if (elements == null || elements === undefined || elements.length === 0) {
                this.notify.info(mainObjName + ' ' + this.customexport_no_column);
                return;
            }
            this.customDataIEService.SaveCustomImportRule(this.InnerModel, this.components, this.frameContext, suffix, false, this.i18nId, this.importOption.dimension).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data['success'] === true) {
                    this.customDataIEService.DowmloadTemplate(this.Model, this.frameContext, this.importOption);
                    /** @type {?} */
                    const unsubscriber = this.customDataIEService.complete.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data === '') {
                            this.notify.success(this.download_template_ok);
                            unsubscriber.unsubscribe();
                        }
                        else {
                            this.notify.error(this.download_template_fail + data);
                            unsubscriber.unsubscribe();
                        }
                    }));
                }
                else {
                    this.notify.error(this.save_customrule_fail + data['message']);
                }
            }));
        }
    }
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    afterAddFile(fileItem) {
    }
    // 开始导入
    /**
     * @return {?}
     */
    Ok() {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        const loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const lastFileItem = this.uploader.queue[len - 1];
        // this.uploader.uploadAll();
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        const preUrl = DataIEUtils.GetPreUrl(befRestService.baseUri);
        /** @type {?} */
        let tempUrl = `${preUrl}/import/Upload`;
        /** @type {?} */
        const su = DataIEUtils.getSu(tempUrl);
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/rpcimport/Upload?su=' + su;
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            allowedFileType: ['xls', 'xml', 'pdf', 'wps', 'doc'],
            headers: [{ name: 'su', value: su }]
        });
        if (this.fileName.split(".").length === 2) {
            if (this.getFileExtension() !== ("." + this.fileName.split(".")[1])) {
                this.notify.info(this.upload_filetype_nomatch);
                this.loadingService.clearAll();
                return;
            }
        }
        this.uploader.uploadItem(lastFileItem);
    }
    // 取消事件
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit();
    }
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ErrorLog(item, response, status, headers) {
        console.log('上传失败');
        console.log('错误代码：' + status);
        console.log(response);
        console.log(headers);
        if (response !== ' ') {
            /** @type {?} */
            const temRes = JSON.parse(response);
            this.notify.info(this.upload_fail + temRes);
            console.log('失败原因：' + temRes);
        }
    }
    /**
     * @return {?}
     */
    SaveCustomImportRule() {
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Import(item, response, status, headers) {
        /** @type {?} */
        const temRes = JSON.parse(response);
        /** @type {?} */
        let suffix = '.xls';
        suffix = this.getFileExtension();
        if (this.InnerModel !== null) {
            /** @type {?} */
            let isForm = false;
            if (this.importOption !== null && this.importOption['IsImportForm'] !== null && this.importOption['IsImportForm'] !== undefined) {
                if (this.importOption['IsImportForm'] === true) {
                    isForm = true;
                }
            }
            this.eleSelectComp.Save();
            this.customDataIEService.SaveCustomImportRule(this.InnerModel, this.components, this.frameContext, suffix, isForm, this.i18nId, this.importOption.dimension).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data['success'] === true) {
                    if (data['isImportSub'] == true) {
                        this.ImportSubTableByRule(item, response, status, headers);
                    }
                    else {
                        this.ImportByRule(item, response, status, headers);
                    }
                }
                else {
                    this.notify.error(this.save_customrule_fail + data['message']);
                    this.loadingService.clearAll();
                }
            }));
        }
        else {
            console.log('数据交换模型参数值为空');
            this.loadingService.clearAll();
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportByRule(item, response, status, headers) {
        console.log(status);
        console.log('上传完成！');
        if (status == 200) {
            /** @type {?} */
            const temRes = JSON.parse(response);
            console.log('上传成功');
            console.log(temRes);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.keys = ['DataImport', this.Model['MainObject']['Source']['SourceMetadataID'], this.importOption.dimension];
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            this.customDataIEService.ImportByRule(commonParams);
            /** @type {?} */
            const unsubscriber = this.importService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                if (data === '') {
                    this.notify.success(this.import_success);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(true);
                    this.subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.importService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.import_fail + data);
                    }
                    unsubscriber.unsubscribe();
                    this.needDestroy.emit();
                    this.subject.next(false);
                    this.subject.complete();
                }
            }));
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ImportSubTableByRule(item, response, status, headers) {
        if (status === 200) {
            /** @type {?} */
            const temRes = JSON.parse(response);
            /** @type {?} */
            const loadingConfig = {
                message: this.i18nResource['import_loading']
            };
            /** @type {?} */
            const loadingParam = {
                loadingService: this.loadingService,
                loadingConfig: loadingConfig
            };
            /** @type {?} */
            const commonParams = new CommonParams();
            commonParams.keys = ['DataImport', this.Model['MainObject']['Source']['SourceMetadataID'], this.importOption.dimension];
            commonParams.option = this.importOption;
            commonParams.fileName = temRes['fileName'];
            commonParams.repository = this.frameContext.repository;
            commonParams.frameContext = this.frameContext;
            commonParams.loadingParam = loadingParam;
            commonParams.i18nResource = this.i18nResource;
            /** @type {?} */
            const flag = this.customDataIEService.ImportSubTableByRule(commonParams);
            if (flag === false) {
                this.loadingService.clearAll();
            }
            /** @type {?} */
            const unsubscriber = this.importService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                if (data === '') {
                    this.notify.success(this.import_success);
                    unsubscriber.unsubscribe();
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else if (data === '导入表单成功') {
                    this.notify.success(this.import_form_success);
                    unsubscriber.unsubscribe();
                    this.subject.next(true);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.importService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.import_fail + data);
                    }
                    unsubscriber.unsubscribe();
                    this.subject.next(false);
                    this.subject.complete();
                    this.needDestroy.emit();
                }
                unsubscriber.unsubscribe();
            }));
        }
    }
    /**
     * @return {?}
     */
    getFileExtension() {
        /** @type {?} */
        let suffix = null;
        switch (this.valueField) {
            case 'Office Excel97-2003(*.xls)':
                suffix = '.xls';
                break;
            case 'Office Excel(*.xlsx)':
                suffix = '.xlsx';
                break;
            case 'Office Excel Macro(*.xlsm)':
                suffix = '.xlsm';
                break;
            case 'WPS Table(*.et)':
                suffix = '.et';
                break;
            case 'WPS Table(Template File)(*.ett)':
                suffix = '.ett';
                break;
            default:
                break;
        }
        return suffix;
    }
}
CustomImportDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-custom-import-dialog',
                template: "<div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\r\n  <div region=\"north\" class=\"north\">\r\n    <div style=\"margin-top: 12px;margin-left: 20px\">\r\n      <table>\r\n        <tr>\r\n          <td class=\"mkwidth\">\r\n            <label for=\"f_upload\">{{import_file}}</label>\r\n          </td>\r\n          <td>\r\n            <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\r\n              (change)=\"selectedFileOnChange($event)\" />\r\n            <div class=\"input-group\" style=\"margin-left: 10px; width: 800px\">\r\n              <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\r\n                [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\r\n              <span class=\"input-group-btn\">\r\n                <button class=\"btn btn-primary\" type=\"button\" (click)=\"SelectFile()\">{{choose_file}}</button>\r\n              </span>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div region=\"center\" class=\"center flex-fill\">\r\n    <div>\r\n      <app-element-select [Model]=\"Model\" [InnerModel]=\"InnerModel\" [CustomModel]=\"CustomModel\"></app-element-select>\r\n    </div>\r\n  </div>\r\n  <div region=\"south\" class=\"south mgleft\">\r\n    <label>{{file_type}}</label>\r\n    <kendo-dropdownlist class=\"longleng\" id=\"fileType\" [data]=\"fileListItems\" [value]=\"'Office Excel97-2003(*.xls)'\"\r\n      [(ngModel)]=\"valueField\" (valueChange)=\"fileTypeValueChange()\">\r\n    </kendo-dropdownlist>\r\n  </div>\r\n  <!-- <farris-combo-list id=\"fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\"\r\n    [data]=\"fileListItems\"></farris-combo-list> -->\r\n\r\n</div>\r\n<ng-template #selectFooter>\r\n  <!-- <div class=\"btns\">\r\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n    </div> -->\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button>\r\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\r\n</ng-template>",
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}*{padding:0;margin:0}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longleng{width:820px}"]
            }] }
];
/** @nocollapse */
CustomImportDialogComponent.ctorParameters = () => [
    { type: CustomDataIEService },
    { type: NotifyService },
    { type: LoadingService },
    { type: DataImportService },
    { type: HttpClient }
];
CustomImportDialogComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    i18nId: [{ type: Input }],
    importOption: [{ type: Input }],
    frameContext: [{ type: Input }],
    subject: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    eleSelectComp: [{ type: ViewChild, args: [ElementSelectComponent,] }],
    needDestroy: [{ type: Output }],
    Model: [{ type: Input }],
    InnerModel: [{ type: Input }],
    components: [{ type: Input }],
    CustomModel: [{ type: Input }],
    IsImportForm: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//自选文件类型导出
class ExportCustomSelectComponent {
    /**
     * @param {?} dataExportService
     * @param {?} notify
     * @param {?} entityService
     * @param {?} http
     * @param {?} loadingService
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     */
    constructor(dataExportService, notify, entityService, http, loadingService, injector, modalService, resolver) {
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.entityService = entityService;
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.ruleId = '';
        this.frameContext = null;
        this.subject = null;
        this.exportOption = null;
        this.needDestroy = new EventEmitter();
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.loadingComp = null;
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.export_success = res['export_success'];
            this.export_fail = res['export_fail'];
            this.file_type = res['file_type'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.rule_list = res['rule_list'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        this.currentRuleFileType = this.valueField;
        if (this.exportOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    openSelectRule($event) {
        this.loadingComp = this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            ruleType: 1,
            voId: this.exportOption.voId,
            methodType: this.methodType,
            exportChildNodeCode: this.exportOption.exportChildNodeCode
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        (RuleMgrs) => {
            this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                this.notify.info(this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.ruleId = this.ruleId;
            compRef.instance.voId = this.exportOption.voId;
            compRef.instance.ruleType = 1;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            const modalConfig = {
                title: this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            RuleMgr => {
                this.currentRuleId = RuleMgr.id;
                this.currentRuleName = RuleMgr.name;
                this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                this.currentRuleFileType = this.valueField;
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    Ok() {
        /** @type {?} */
        let suffix = null;
        if (this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        switch (this.methodType) {
            case MethodType.CommonExport:
                this.dataExportService.ExportById(this.currentRuleId, this.frameContext, this.exportOption, suffix);
                this.exportComplete();
                break;
            case MethodType.ExportCurrentTableData:
                this.dataExportService.ExportCurrentData(this.currentRuleId, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, this.exportOption, suffix);
                this.exportComplete();
                break;
            case MethodType.ExportCurrentChildData:
                this.dataExportService.ExportCurrentChildData(this.currentRuleId, this.frameContext, this.exportOption, suffix);
                this.exportComplete();
                break;
        }
    }
    /**
     * @return {?}
     */
    exportComplete() {
        /** @type {?} */
        const exportUnscribe = this.dataExportService.export.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data === '') {
                this.notify.success(this.export_success);
                exportUnscribe.unsubscribe();
                this.subject.next(true);
                this.subject.complete();
            }
            else {
                /** @type {?} */
                const errorlevel = this.dataExportService.errorlevel;
                if (errorlevel === 'Info') {
                    this.notify.info(data);
                }
                else if (errorlevel === 'Warning') {
                    this.notify.warning(data);
                }
                else {
                    this.notify.error(this.export_fail + data);
                }
                exportUnscribe.unsubscribe();
                this.subject.next(false);
                this.subject.complete();
            }
            this.needDestroy.emit();
        }));
    }
    /**
     * @return {?}
     */
    canSelectFileType() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        const canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        t => t === suffix)) < 0) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    close() {
        this.needDestroy.emit();
    }
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit(true);
    }
}
ExportCustomSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-export-custom-select',
                template: "<!-- <div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n    <div class=\"col-12\" style=\"margin-top: 72px\">\n        <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n            <div class=\"form-group farris-form-group\">\n                <label class=\" col-form-label\">\n                    <span class=\"farris-label-text\">{{rule_list}}</span>\n                </label>\n                <div class=\"farris-input-wrap\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n            <span>&nbsp;</span>\n        </div>\n        <div class=\"farris-group-wrap form-inline farris-form-inline\">\n            <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n                <label class=\"col-form-label\">\n                    <span class=\"farris-label-text\">{{file_type}}</span>\n                </label>\n                <div class=\"farris-input-wrap\">\n                    <farris-combo-list [readonly]=\"canSelectFileType() === false\" id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\"\n                        [idField]=\"'id'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"fileListItems\"></farris-combo-list>\n                </div>\n                <span>&nbsp;&nbsp;</span>\n                <!-- <span *ngIf=\"enableRuntimeCustom === true\" class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n                <span *ngIf=\"enableRuntimeCustom === false\" class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n                <span  class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n            </div>\n        </div>\n\n\n\n    </div>\n</form>\n\n<ng-template #selectFooter>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>",
                providers: [NotifyService, DataExportService, EntityListService, BindingData],
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longlen{width:400px}"]
            }] }
];
/** @nocollapse */
ExportCustomSelectComponent.ctorParameters = () => [
    { type: DataExportService },
    { type: NotifyService },
    { type: EntityListService },
    { type: HttpClient },
    { type: LoadingService },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];
ExportCustomSelectComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    methodType: [{ type: Input }],
    frameContext: [{ type: Input }],
    exportOption: [{ type: Input }],
    needDestroy: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImportDialogHandcraftComponent {
    /**
     * @param {?} dataImportService
     * @param {?} notify
     * @param {?} loadingService
     * @param {?} http
     * @param {?} injector
     * @param {?} modalService
     * @param {?} msgService
     * @param {?} resolver
     */
    constructor(dataImportService, notify, loadingService, http, injector, modalService, msgService, resolver) {
        this.dataImportService = dataImportService;
        this.notify = notify;
        this.loadingService = loadingService;
        this.http = http;
        this.injector = injector;
        this.modalService = modalService;
        this.msgService = msgService;
        this.resolver = resolver;
        // 规则ID 该id为表单上配置的规则id
        this.ruleId = '';
        // 过滤条件
        this.importOption = null;
        this.subject = null;
        this.selectrule = false;
        // 记录的规则
        this.recordRule = null;
        this.selectfiletype = null;
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.enableTemplate = true;
        this.closeXLSX = false;
        this.enableSecurityLevelSelect = false;
        this.securityLevelName = '';
        this.ImportSecretRemindInfo = '';
        this.acceptFileType = '.csv,.xlsm,.xlsx,.xls,.pdf,.xml,.et';
        // 文件名称
        this.fileName = '';
        this.origin = window.location.origin;
        this.uploader = new FileUploader({
            url: '',
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile'
        });
        // 控制Destroy表单中的输入组件
        this.needDestroy = new EventEmitter();
        this.showfiletype = true;
        this.enableRuntimeCustom = false;
        this.valueField = null;
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        this.securityLevelItems = [];
        this.uploader.onSuccessItem = this.Import.bind(this);
        this.uploader.onErrorItem = this.ErrorLog.bind(this);
        this.uploader.onAfterAddingFile = this.afterAddFile;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.import_file = res['import_file'];
            this.choose_file = res['choose_file'];
            this.file_type = res['file_type'];
            this.import_placeholder = res['import_placeholder'];
            this.download_template = res['download_template'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.choose_truefile = res['choose_truefile'];
            this.download_template_ok = res['download_template_ok'];
            this.download_template_fail = res['download_template_fail'];
            this.upload_fail = res['upload_fail'];
            this.import_success = res['import_success'];
            this.import_form_success = res['import_form_success'];
            this.import_fail = res['import_fail'];
            this.rule_list = res['rule_list'];
            this.select_xlsx_notify = res['select_xlsx_notify'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.importOption.selectfiletype === true) {
            this.selectfiletype = this.importOption.selectfiletype;
            if (this.importOption.suffix !== undefined && this.importOption.suffix !== null) {
                this.valueField = FileTypeUtil.getFileTypeName(this.importOption.suffix.toUpperCase());
            }
        }
        /** @type {?} */
        let extendInfo = this.recordRule.extendInfo;
        if (!isNullOrUndefined(extendInfo)) {
            this.extendInfo = JSON.parse(extendInfo);
            this.ImportSecretRemindInfo = this.extendInfo['ImportSecretRemindInfo'];
            this.closeXLSX = this.extendInfo['closeXLSX'];
            if (this.closeXLSX === true) {
                this.fileListItems = [
                    { id: FileConst.xls, label: FileConst.xls },
                    { id: FileConst.xlsm, label: FileConst.xlsm },
                    { id: FileConst.et, label: FileConst.et }
                ];
            }
        }
        /** @type {?} */
        const securityLevels = this.recordRule.securityLevels;
        if (!isNullOrEmpty(securityLevels)) {
            this.enableSecurityLevelSelect = true;
            securityLevels.forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                /** @type {?} */
                const level = {
                    value: e.name,
                    label: e.name
                };
                this.securityLevelItems.push(level);
            }));
            this.securityLevelName = this.securityLevelItems[0].value;
        }
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        if (this.valueField === '') {
            //未在当前可选文件的类型时，不显示选文件类型控件
            this.showfiletype = false;
        }
        this.currentRuleFileType = this.valueField;
        this.controlFileType();
        if (this.importOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    openSelectRule($event) {
        this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            ruleType: 0,
            voId: this.importOption.voId,
            methodType: this.methodType,
            importChildNodeCode: this.importOption.importChildNodeCode,
            closeXlsx: this.closeXLSX
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        (RuleMgrs) => {
            this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                this.notify.info(this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.ruleId = this.ruleId;
            compRef.instance.voId = this.importOption.voId;
            compRef.instance.ruleType = 0;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            const modalConfig = {
                title: this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            RuleMgr => {
                this.currentRuleId = RuleMgr.id;
                this.currentRuleName = RuleMgr.name;
                this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                this.currentRuleFileType = this.valueField;
                this.controlFileType();
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    getFileExtension() {
        /** @type {?} */
        let suffix = null;
        switch (this.valueField) {
            case FileConst.xls:
                suffix = '.xls';
                break;
            case FileConst.xlsx:
                suffix = '.xlsx';
                break;
            case FileConst.xlsm:
                suffix = '.xlsm';
                break;
            case FileConst.et:
                suffix = '.et';
                break;
            case FileConst.xml:
                suffix = '.xml';
                break;
            case FileConst.pdf:
                suffix = '.pdf';
                break;
            case FileConst.csv:
                suffix = '.csv';
                break;
            default:
                break;
        }
        return suffix;
    }
    /**
     * @return {?}
     */
    canDownloadTemplate() {
        /** @type {?} */
        const suffix = this.getFileExtension();
        /** @type {?} */
        const canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        t => t === suffix)) < 0) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    // 选择文件后事件
    /**
     * @param {?} event
     * @return {?}
     */
    selectedFileOnChange(event) {
        /** @type {?} */
        const str = event.target.value;
        if (str === '') {
            return;
        }
        /** @type {?} */
        const index = str.lastIndexOf('\\');
        this.fileName = str.substring(index + 1);
        if (this.fileName.split(".").length === 2 && this.fileName.split(".")[1] === "jpg") {
            this.uploader.queue = [];
            this.notify.info(this.choose_truefile);
            return;
        }
        // console.log('队列中的文件' + this.uploader.queue[0]);
    }
    // 关闭窗口
    /**
     * @return {?}
     */
    Close() {
        this.needDestroy.emit();
    }
    // 选择文件事件
    /**
     * @return {?}
     */
    SelectFile() {
        this.fileUpload.nativeElement.click();
    }
    /**
     * @return {?}
     */
    fileTypeValueChange() {
        if (this.controlFileType() === '.xlsx') {
            this.notify.info(this.select_xlsx_notify);
        }
    }
    /**
     * @return {?}
     */
    controlFileType() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        if (suffix !== null) {
            this.acceptFileType = suffix;
        }
        else {
            this.acceptFileType = '*';
        }
        return suffix;
    }
    // 下载模板
    /**
     * @return {?}
     */
    DownloadTemplate() {
        this.loadingService.show();
        /** @type {?} */
        let suffix = null;
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        this.importOption['securityLevelName'] = this.securityLevelName;
        this.dataImportService.DowmloadTemplate4HandCraft(this.currentRuleId, this.importOption, suffix);
        // this.dataImportService.complete.unsubscribe();
        /** @type {?} */
        const unsubscriber = this.dataImportService.complete.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.loadingService.clearAll();
            if (data === '') {
                this.notify.success(this.download_template_ok);
                unsubscriber.unsubscribe();
            }
            else {
                this.notify.error(this.download_template_fail + data);
                unsubscriber.unsubscribe();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.message);
        }));
    }
    // 添加文件后事件
    /**
     * @param {?} fileItem
     * @return {?}
     */
    afterAddFile(fileItem) {
    }
    // 开始导入
    /**
     * @return {?}
     */
    Ok() {
        console.log('开始上传！');
        console.log(this.uploader.queue);
        /** @type {?} */
        const loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        this.loadingService.show(loadingConfig);
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len === 0) {
            this.notify.info(this.choose_truefile);
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const lastFileItem = this.uploader.queue[len - 1];
        /** @type {?} */
        const maxFileSize = this.recordRule.importFileMaxSize * 1024 * 1024;
        if (lastFileItem.file.size > maxFileSize) {
            this.notify.warning(this.i18nResource['importfile_toobig'] + this.recordRule.importFileMaxSize + 'MB');
            this.loadingService.clearAll();
            return;
        }
        /** @type {?} */
        const su = this.importOption.su;
        /** @type {?} */
        const fixedUrl = this.origin + '/api/runtime/dip/v1.0/AllSteps/dataimportvmaction?su=' + su;
        /** @type {?} */
        let headers = [{ name: 'su', value: su }];
        if (!isNullOrUndefined(this.extendInfo)) {
            /** @type {?} */
            const enableSecurityLevel = (/** @type {?} */ (this.extendInfo['enableSecurityLevel']));
            if (enableSecurityLevel) {
                headers.push({ name: 'enableSecurityLevel', value: enableSecurityLevel });
                /** @type {?} */
                const securityLevelPrefix = this.extendInfo['securityLevelPrefix'];
                /** @type {?} */
                const securityLevelSuffix = this.extendInfo['securityLevelSuffix'];
                headers.push({ name: 'securityLevelPrefix', value: encodeURIComponent(securityLevelPrefix) });
                headers.push({ name: 'securityLevelSuffix', value: encodeURIComponent(securityLevelSuffix) });
                headers.push({ name: 'securityLevelName', value: encodeURIComponent(this.securityLevelName) });
            }
        }
        /** @type {?} */
        let suffix = '';
        if (this.canDownloadTemplate() && this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        /** @type {?} */
        let globalVar = '';
        if (!isNullOrUndefined(this.importOption['GlobalParam'])) {
            if (typeof (this.importOption['GlobalParam']) === 'object') {
                globalVar = JSON.stringify(this.importOption['GlobalParam']);
            }
            else {
                globalVar = this.importOption['GlobalParam'];
            }
        }
        /** @type {?} */
        let funcId = '';
        if (!isNullOrUndefined(this.importOption.funcId)) {
            funcId = this.importOption.funcId;
        }
        headers.push({ name: 'ruleId', value: this.currentRuleId });
        headers.push({ name: 'globalParam', value: globalVar });
        headers.push({ name: 'suffix', value: suffix });
        headers.push({ name: 'funcId', value: funcId });
        headers.push({ name: 'securityLevelName', value: this.securityLevelName });
        this.uploader.setOptions({
            url: fixedUrl,
            method: 'POST',
            autoUpload: false,
            itemAlias: 'uploadedfile',
            headers: headers
        });
        this.uploader.uploadItem(lastFileItem);
    }
    // 取消事件
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit();
    }
    // 上传失败后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    ErrorLog(item, response, status, headers) {
        this.loadingService.clearAll();
        try {
            /** @type {?} */
            const temRes = JSON.parse(response);
            this.msgService.error(this.upload_fail + temRes.message);
        }
        catch (_a) {
            this.msgService.error(this.upload_fail + response);
        }
        this.Close();
        /** @type {?} */
        const len = this.uploader.queue.length;
        if (len > 0) {
            this.uploader.queue.splice(0, 1);
        }
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Import(item, response, status, headers) {
        switch (this.methodType) {
            case MethodType.CommonImport:
                this.DataImportById(item, response, status, headers);
                break;
            case MethodType.ImportSubTableDetail:
                // this.ImportSubTable(item, response, status, headers, suffix);
                break;
        }
    }
    // 显示校验结果
    /**
     * @private
     * @param {?} commonParams
     * @return {?}
     */
    ShowValidatedResult(commonParams) {
        /** @type {?} */
        const importResult = commonParams.importResult;
        /** @type {?} */
        const loadingParam = commonParams.loadingParam;
        if (importResult.validatedResults && importResult.validatedResults.length > 0) {
            loadingParam.loadingService.clearAll();
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(ValidateFormComponent);
            /** @type {?} */
            const cmpRef = compFactory.create(this.injector);
            cmpRef.instance.validateResult = importResult.validatedResults;
            cmpRef.instance.su = commonParams.su;
            cmpRef.instance.i18nResource = commonParams.i18nResource;
            cmpRef.instance.loadingParam = loadingParam;
            /** @type {?} */
            const validateModalConfig = {
                title: this.i18nResource['validate_result_show'],
                width: 950,
                height: 550,
                buttons: cmpRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, validateModalConfig);
            //0代表按钮中止或X点击；1代表按钮继续
            /** @type {?} */
            let closed = 0;
            dialog.dialog.instance.closed.subscribe((/**
             * @return {?}
             */
            () => {
                if (closed === 0) {
                    this.notify.info(this.i18nResource['after_validate_suspend']);
                    this.needDestroy.emit();
                }
            }));
            cmpRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                closed = 0;
                dialog.close();
            }));
            cmpRef.instance.okModal.subscribe((/**
             * @param {?} validatedInfoList
             * @return {?}
             */
            (validatedInfoList) => {
                closed = 1;
                dialog.close();
                loadingParam.loadingService.show(loadingParam.loadingConfig);
                commonParams.importParam['validatedInfoList'] = validatedInfoList;
                //todo
                // this.Import4HandCraft(commonParams);
            }));
        }
    }
    // 上传成功后方法
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    DataImportById(item, response, status, headers) {
        console.log(status);
        this.loadingService.clearAll();
        /** @type {?} */
        let importResult = (/** @type {?} */ (JSON.parse(response)));
        /** @type {?} */
        const loadingConfig = {
            message: this.i18nResource['import_loading']
        };
        /** @type {?} */
        const loadingParam = {
            loadingService: this.loadingService,
            loadingConfig: loadingConfig
        };
        /** @type {?} */
        const commonParams = new CommonParams();
        commonParams.loadingParam = loadingParam;
        commonParams.i18nResource = this.i18nResource;
        commonParams.su = this.importOption.su;
        commonParams.importResult = importResult;
        if (importResult.succeed === true) {
            if (importResult.formData && importResult.formData.length > 0) {
                if (typeof (importResult.formData[0]) !== 'object') {
                    /** @type {?} */
                    const formDataObjArray = [];
                    importResult.formData.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        formDataObjArray.push(JSON.parse(e));
                    }));
                    importResult.formData = formDataObjArray;
                }
            }
            this.needDestroy.emit(importResult);
            //导入成功如果展示校验结果，只能是校验策略是忽略，所有校验结果都是error
            this.ShowValidatedResult(commonParams);
        }
        else {
            if (importResult.validatedResults && importResult.validatedResults.length > 0) {
                this.ShowValidatedResult(commonParams);
            }
            else {
                /** @type {?} */
                const errorlevel = importResult.errorLevel;
                if (errorlevel === 'Info') {
                    this.notify.info(importResult.message);
                }
                else if (errorlevel === 'Warning') {
                    this.msgService.warning(importResult.message);
                }
                else {
                    this.msgService.error(this.import_fail + importResult.message);
                }
                this.needDestroy.emit(importResult);
            }
        }
    }
}
ImportDialogHandcraftComponent.decorators = [
    { type: Component, args: [{
                selector: 'hlo-import-dialog-handcraft',
                template: "<!-- <div class=\"container\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n                <td>\n                    <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td>\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule === false\">\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td>\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"\n                        (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\n                    <i class=\"material-icons\" style=\"color: lightblue;\">file_download</i>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label for=\"f_upload\">{{import_file}}</label>\n                </td>\n                <td>\n                    <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\" [accept]=\"acceptFileType\"\n                        (change)=\"selectedFileOnChange($event)\" />\n                    <input type=\"text\" id=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\">\n                    <i class=\"material-icons\" style=\"color: lightblue;\">create_new_folder</i>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n  <div class=\"col-12\" style=\"margin-top: 67px\">\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{rule_list}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\"\n                       [enableClear]=\"false\"\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n          </input-group>\n        </div>\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"openSelectRule($event)\">filter_none</i> -->\n      </div>\n    </div>\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div *ngIf=\"showfiletype === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div *ngIf=\"showfiletype === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{file_type}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\"\n                             [textField]=\"'label'\"\n                             [readonly]=\"canDownloadTemplate() === false\" [editable]=\"false\" [enableClear]=\"false\"\n                             [data]=\"fileListItems\" (valueChange)=\"fileTypeValueChange()\"></farris-combo-list>\n        </div>\n        <span>&nbsp;</span>\n        <button [disabled]=\"canDownloadTemplate() === false\" class=\"btn btn-secondary mr-2\" type=\"button\"\n                (click)=\"DownloadTemplate()\">{{download_template}}</button>\n        <!-- <i *ngIf=\"canDownloadTemplate() === true\" class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"DownloadTemplate()\">file_download</i> -->\n        <!-- <i *ngIf=\"canDownloadTemplate() === false\" class=\"material-icons\" style=\"color: white;\">file_download</i> -->\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\"  class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n        <span *ngIf=\"enableRuntimeCustom === false\"  class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n        <span class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n\n      </div>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{import_file}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input #fileUpload name=\"fileinput\" hidden=true type=\"file\" libFileSelect [uploader]=\"uploader\"\n                 [accept]=\"acceptFileType\"\n                 (change)=\"selectedFileOnChange($event)\"/>\n          <div class=\"input-group\">\n            <input type=\"text\" id=\"f_upload\" name=\"f_upload\" readonly=\"readonly\" class=\"form-control flie-loading\"\n                   [(ngModel)]=\"fileName\"\n                   [placeholder]=\"import_placeholder\">\n            <span class=\"input-group-btn\">\n                            <button class=\"btn btn-primary\" type=\"button\"\n                                    (click)=\"SelectFile()\">{{choose_file}}</button>\n                        </span>\n          </div>\n          <!-- <input-group id=\"f_upload\" name=\"f_upload\" [editable]=\"false\" [enableClear]=\"false\" [(ngModel)]=\"fileName\" [placeholder]=\"import_placeholder\"></input-group> -->\n        </div>\n        <!-- <i class=\"material-icons\" style=\"color: rosybrown; cursor: pointer;\" (click)=\"SelectFile()\">attachment</i> -->\n      </div>\n    </div>\n    <div *ngIf=\"enableSecurityLevelSelect\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 340px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{i18nResource.security_level}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list name=\"f_select_securitylevel\"  [(ngModel)]=\"securityLevelName\" [idField]=\"'value'\"\n                             [valueField]=\"'value'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"securityLevelItems\"></farris-combo-list>\n        </div>\n      </div>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <label style=\"color: red; font-size: 18px;\">{{ImportSecretRemindInfo}}</label>\n    </div>\n\n\n  </div>\n</form>\n\n\n<ng-template #selectFooter>\n  <!-- <img class=\"setting\" src=\"/platform/common/web/@gsp-dip/img/setting.svg\" alt=\"\u8BBE\u7F6E\" (click)=\"clickSetting()\" /> -->\n\n  <!-- <button *ngIf=\"enableTemplate\" type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"DownloadTemplate()\">{{download_template}}</button> -->\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>\n",
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}.top{top:100px;position:relative}table{width:100%}.mkwidth{width:75px;line-height:28px}.longlen{width:400px}.setting{position:absolute;top:286px;right:550px;width:16px;height:16px;-webkit-transition:.3s;transition:.3s;cursor:pointer;opacity:.2;z-index:2}.setting:hover{-webkit-transform:rotate(100deg);transform:rotate(100deg)}.downloadicon,.fileicon{position:absolute;width:26px;height:26px}"]
            }] }
];
/** @nocollapse */
ImportDialogHandcraftComponent.ctorParameters = () => [
    { type: DataImportService },
    { type: NotifyService },
    { type: LoadingService },
    { type: HttpClient },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ComponentFactoryResolver }
];
ImportDialogHandcraftComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    importOption: [{ type: Input }],
    methodType: [{ type: Input }],
    subject: [{ type: Input }],
    recordRule: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }],
    needDestroy: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExportCustomSelectHandcraftComponent {
    /**
     * @param {?} dataExportService
     * @param {?} notify
     * @param {?} http
     * @param {?} loadingService
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     */
    constructor(dataExportService, notify, http, loadingService, injector, modalService, resolver) {
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.ruleId = '';
        this.frameContext = null;
        this.subject = null;
        this.exportOption = null;
        this.needDestroy = new EventEmitter();
        this.enableRuntimeCustom = false;
        // 记录的规则
        this.recordRule = null;
        this.currentRuleName = '';
        this.currentRuleId = '';
        this.currentRuleFileType = '';
        this.lookupIcon = '<i class="f-icon f-icon-windows"></i>';
        this.loadingComp = null;
        this.fileListItems = [
            { id: FileConst.xls, label: FileConst.xls },
            { id: FileConst.xlsx, label: FileConst.xlsx },
            { id: FileConst.xlsm, label: FileConst.xlsm },
            { id: FileConst.et, label: FileConst.et },
        ];
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.export_success = res['export_success'];
            this.export_fail = res['export_fail'];
            this.file_type = res['file_type'];
            this.ie_cancel = res['ie_cancel'];
            this.ie_ok = res['ie_ok'];
            this.rule_list = res['rule_list'];
            this.i18nResource = res;
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentRuleId = this.recordRule.ruleId;
        this.currentRuleName = this.recordRule.ruleName;
        this.valueField = FileTypeUtil.getFileTypeName(this.recordRule.fileType);
        this.currentRuleFileType = this.valueField;
        if (this.exportOption.enableRuntimeCustom === true) {
            this.enableRuntimeCustom = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    openSelectRule($event) {
        this.loadingComp = this.loadingService.show();
        //过滤规则时用表单命令处配置的规则来过滤，因此用ruleId，而不是currentRuleId
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/filterRulesByRuleIdAndVoId';
        /** @type {?} */
        const body = {
            ruleId: this.ruleId,
            ruleType: 1,
            voId: this.exportOption.voId,
            methodType: this.methodType,
            exportChildNodeCode: this.exportOption.exportChildNodeCode
        };
        this.http.post(url, body).subscribe((/**
         * @param {?} RuleMgrs
         * @return {?}
         */
        (RuleMgrs) => {
            this.loadingService.clearAll();
            if (RuleMgrs.length === 0) {
                this.notify.info(this.i18nResource['ruleselect_listempty']);
                return;
            }
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(RuleSelectComponent);
            /** @type {?} */
            const compRef = compFactory.create(this.injector);
            compRef.instance.ruleId = this.ruleId;
            compRef.instance.voId = this.exportOption.voId;
            compRef.instance.ruleType = 1;
            compRef.instance.RuleMgrsData = RuleMgrs;
            /** @type {?} */
            const modalConfig = {
                title: this.rule_list,
                width: 950,
                height: 500,
                buttons: compRef.instance.modalFooter,
                showHeader: true,
                showMaxButton: false,
                showButtons: true
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            compRef.instance.closeModal.subscribe((/**
             * @return {?}
             */
            () => {
                dialog.close();
            }));
            compRef.instance.okModal.subscribe((/**
             * @param {?} RuleMgr
             * @return {?}
             */
            RuleMgr => {
                this.currentRuleId = RuleMgr.id;
                this.currentRuleName = RuleMgr.name;
                this.valueField = FileTypeUtil.getFileTypeName(RuleMgr.fileType);
                this.currentRuleFileType = this.valueField;
                dialog.close();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    Ok() {
        /** @type {?} */
        let suffix = null;
        if (this.valueField !== this.currentRuleFileType) {
            suffix = FileTypeUtil.getFileExtension(this.valueField);
        }
        switch (this.methodType) {
            case MethodType.CommonExport:
                this.dataExportService.ExportById4HandCraft(this.currentRuleId, this.exportOption, suffix);
                this.exportComplete();
                break;
            case MethodType.ExportCurrentTableData:
                this.notify.warning('不支持导出当前页');
                this.exportComplete();
                break;
            case MethodType.ExportCurrentChildData:
                this.notify.warning('不支持导出子表数据');
                this.exportComplete();
                break;
        }
    }
    /**
     * @return {?}
     */
    exportComplete() {
        /** @type {?} */
        const exportUnscribe = this.dataExportService.export.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data === '') {
                this.notify.success(this.export_success);
                exportUnscribe.unsubscribe();
                /** @type {?} */
                const res = {
                    type: 'success',
                    data: null,
                    other: null
                };
                this.subject.next(res);
                this.subject.complete();
            }
            else {
                /** @type {?} */
                const errorlevel = this.dataExportService.errorlevel;
                if (errorlevel === 'Info') {
                    this.notify.info(data);
                }
                else if (errorlevel === 'Warning') {
                    this.notify.warning(data);
                }
                else {
                    this.notify.error(this.export_fail + data);
                }
                /** @type {?} */
                const res = {
                    type: 'fail',
                    data: null,
                    other: data
                };
                this.subject.next(res);
                this.subject.complete();
            }
            exportUnscribe.unsubscribe();
            this.needDestroy.emit();
        }));
    }
    /**
     * @return {?}
     */
    canSelectFileType() {
        /** @type {?} */
        const suffix = FileTypeUtil.getFileExtension(this.valueField);
        /** @type {?} */
        const canList = ['.xls', '.xlsx', '.xlsm', '.et'];
        if (canList.findIndex((/**
         * @param {?} t
         * @return {?}
         */
        t => t === suffix)) < 0) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    close() {
        this.needDestroy.emit();
    }
    /**
     * @return {?}
     */
    Cancel() {
        this.needDestroy.emit(true);
    }
}
ExportCustomSelectHandcraftComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-export-custom-select-handcraft',
                template: "<!-- <div class=\"d-flex flex-column\" style=\"width: 100%; height: 100%;\">\n    <div region=\"south\" class=\"south mgleft\">\n        <table>\n            <tr>\n                <td class=\"mkwidth\">\n                    <label> </label>\n                </td>\n            </tr>\n            <tr *ngIf=\"selectrule\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_rule\">{{rule_list}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                        [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n                    </input-group>\n                </td>\n            </tr>\n\n            <tr *ngIf=\"selectfiletype\">\n                <td class=\"mkwidth\">\n                    <label for=\"f_select_fileType\">{{file_type}}</label>\n                </td>\n                <td style=\"width: 430px;\">\n                    <farris-combo-list id=\"f_select_fileType\" [(ngModel)]=\"valueField\" [idField]=\"'id'\" [textField]=\"'label'\" [data]=\"fileListItems\"></farris-combo-list>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div> -->\n\n<form class=\"px-3 px-md-4 farris-form d-flex flex-wrap\">\n  <div class=\"col-12\" style=\"margin-top: 72px\">\n    <div *ngIf=\"enableRuntimeCustom === true\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\" col-form-label\">\n          <span class=\"farris-label-text\">{{rule_list}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <input-group class=\"ng-untouched ng-pristine ng-valid\" [editable]=\"false\" [groupText]=\"lookupIcon\" [enableClear]=\"false\"\n                       [value]=\"currentRuleName\" (clickHandle)=\"openSelectRule($event)\">\n          </input-group>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"enableRuntimeCustom === false\" class=\"farris-group-wrap form-inline farris-form-inline\">\n      <span>&nbsp;</span>\n    </div>\n    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n      <div class=\"form-group farris-form-group\" style=\"width: 450px\">\n        <label class=\"col-form-label\">\n          <span class=\"farris-label-text\">{{file_type}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-combo-list [readonly]=\"canSelectFileType() === false\" id=\"f_select_fileType\" name=\"f_select_fileType\" [(ngModel)]=\"valueField\"\n                             [idField]=\"'id'\" [textField]=\"'label'\" [editable]=\"false\" [enableClear]=\"false\" [data]=\"fileListItems\"></farris-combo-list>\n        </div>\n        <span>&nbsp;&nbsp;</span>\n        <!-- <span *ngIf=\"enableRuntimeCustom === true\" class=\"f-icon f-icon-custom\" style=\"color: #388FFF;cursor: pointer;\"></span>\n        <span *ngIf=\"enableRuntimeCustom === false\" class=\"f-icon f-icon-custom\" style=\"color:white\"></span> -->\n        <span  class=\"f-icon f-icon-custom\" style=\"color:white\"></span>\n      </div>\n    </div>\n\n\n\n  </div>\n</form>\n\n<ng-template #selectFooter>\n  <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"Cancel()\">{{ie_cancel}}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"Ok()\">{{ie_ok}}</button>\n</ng-template>\n",
                styles: [".barmanager{position:absolute;bottom:0;height:50px;right:30px;padding-left:50px}#filePath,#fileType,#filterExpression{margin-left:7px}.input-group{margin-bottom:12px}.btngroup{margin-top:12px}.exchange{margin-top:30px}#IsSave{margin:6px}.pos{position:relative}.left{float:right}.mkwidth{width:75px;line-height:28px}.div-inline{display:inline}.mgleft{margin-left:20px;margin-top:10px}.longlen{width:400px}"]
            }] }
];
/** @nocollapse */
ExportCustomSelectHandcraftComponent.ctorParameters = () => [
    { type: DataExportService },
    { type: NotifyService },
    { type: HttpClient },
    { type: LoadingService },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];
ExportCustomSelectHandcraftComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    ruleId: [{ type: Input }],
    methodType: [{ type: Input }],
    frameContext: [{ type: Input }],
    exportOption: [{ type: Input }],
    needDestroy: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataieHandcraftService {
    /**
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     * @param {?} dataExportService
     * @param {?} notify
     * @param {?} customIEService
     * @param {?} http
     * @param {?} loadingService
     */
    constructor(resolver, modalService, injector, dataExportService, notify, customIEService, http, loadingService) {
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.customIEService = customIEService;
        this.http = http;
        this.loadingService = loadingService;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.data_import = res['data_import'];
            this.data_export = res['data_export'];
            this.export_success = res['export_success'];
            this.export_fail = res['export_fail'];
            this.data_export_customfile = res['data_export_customfile'];
            this.i18nResource = res;
        }));
    }
    /**
     * 通用导出方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    CommonDataExport(type, ruleID, option) {
        if (type === 1) {
            console.log('执行方法：ExportCurrentListData');
            throw new Error('不支持配置该类型:1');
        }
        else if (type === 2) {
            console.log('执行方法：ExportByModel');
            throw new Error('不支持配置该类型:2');
        }
        else if (type === 3) {
            console.log('执行方法：ExportCurrentChildData');
            // return this.ExportCurrentChildData(ruleID, option);
            throw new Error('不支持配置该类型:3');
        }
        else if (type === 0) {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
    }
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ExportByRule(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.CommonExport).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ExportCurrentChildData(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentChildData).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    ExportCommonEntry(ruleID, option, methodType) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const optionJson = this.ParseExportJson(option);
        console.log(optionJson);
        if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.voId)) {
            this.notify.warning("未配置规则id，且无法获取到表单对应的voId，请检查");
            /** @type {?} */
            const res = {
                type: 'close',
                data: null,
                other: null
            };
            subject.next(res);
            return subject;
        }
        if (methodType === MethodType.ExportCurrentChildData) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.exportChildNodeCode)) {
                //导出子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据Vo查找规则，导出子表必须配置子表节点");
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        if (isNullOrEmpty(ruleID) || optionJson.enableRuntimeCustom === true) {
            this.StartLoading();
            /** @type {?} */
            const url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
            /** @type {?} */
            const postBody = {
                body: {
                    ruleId: ruleID,
                    ruleType: 1,
                    voId: optionJson.voId,
                    needModelConvert: optionJson.needModelConvert === true,
                    methodType: methodType,
                    exportChildNodeCode: optionJson.exportChildNodeCode,
                    enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                }
            };
            this.http.post(url, postBody.body).subscribe((/**
             * @param {?} recordRule
             * @return {?}
             */
            (recordRule) => {
                this.CloseLoading();
                optionJson.voId = recordRule.voId;
                this.ExportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => {
                    subject.next(s);
                    subject.complete();
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.CloseLoading();
                this.notify.error(error.error.Message);
                console.log(error.error.Message);
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: error.error.Message
                };
                subject.next(res);
            }));
        }
        else {
            this.ExportByRuleImpl(ruleID, optionJson, methodType).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                subject.next(s);
                subject.complete();
            }));
        }
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} mType
     * @param {?=} recordRule
     * @return {?}
     */
    ExportByRuleImpl(ruleID, optionJson, mType, recordRule) {
        /** @type {?} */
        const subject = new Subject();
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            if (optionJson.customExportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customExportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        if (optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(ExportCustomSelectHandcraftComponent);
            /** @type {?} */
            const cmpRef = compFactory.create(this.injector);
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.exportOption = optionJson;
            cmpRef.instance.recordRule = recordRule;
            cmpRef.instance.subject = subject;
            cmpRef.instance.methodType = MethodType.CommonExport;
            /** @type {?} */
            let title = this.data_export;
            if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
                title = optionJson.customExportTitle;
            }
            /** @type {?} */
            const exportModalConfig = {
                title: title,
                width: 530,
                height: 342,
                buttons: cmpRef.instance.modalFooter,
                showCloseButton: true,
                showMaxButton: false,
                showMinButton: false,
                showButtons: true,
                resizable: false
            };
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, exportModalConfig);
            dialog.dialog.instance.closed.subscribe((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
            }));
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => {
                dialog.close();
            }));
        }
        else {
            if (!isNullOrUndefined(recordRule) && !isNullOrEmpty(recordRule.ruleId)) {
                ruleID = recordRule.ruleId;
            }
            if (mType == MethodType.CommonExport) {
                this.dataExportService.ExportById4HandCraft(ruleID, optionJson);
            }
            else if (mType == MethodType.ExportCurrentTableData) {
                throw new Error('不支持该类型:ExportCurrentTableData');
            }
            else {
                throw new Error('不支持该类型:ExportCurrentChildData');
            }
            /** @type {?} */
            const unscriber = this.dataExportService.export.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data === '') {
                    /** @type {?} */
                    const res = {
                        type: 'success',
                        data: null,
                        other: null
                    };
                    subject.next(res);
                    subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.dataExportService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.export_fail + data);
                    }
                    /** @type {?} */
                    const res = {
                        type: 'fail',
                        data: null,
                        other: data
                    };
                    subject.next(res);
                    subject.complete();
                }
                unscriber.unsubscribe();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.notify.error(error.error.Message);
                /** @type {?} */
                const res = {
                    type: 'fail',
                    data: null,
                    other: error.error.Message
                };
                subject.next(res);
                subject.complete();
            }));
        }
        return subject;
    }
    /**
     * 通用导入方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    CommonDataImport(type, ruleID, option) {
        if (type === 1) {
            console.log('执行方法：ImportSublistData');
            return this.ImportSublistData(ruleID, option);
        }
        else if (type === 2) {
            console.log('执行方法：ImportByModel');
            throw new Error('不支持配置该类型:2');
        }
        else if (type === 0) {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
    }
    // 普通导入
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ImportByRule(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.CommonImport).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    // 子表导入
    /**
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ImportSublistData(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.ImportSubTableDetail).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    ImportCommonEntry(ruleID, option, methodType) {
        console.log(option);
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const optionJson = this.ParseImportJson(option);
        /** @type {?} */
        const su = optionJson.su;
        if (methodType === MethodType.ImportSubTableDetail) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.importChildNodeCode)) {
                //导入子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据模型查找规则，导入子表必须配置子表节点");
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        this.StartLoading();
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
        /** @type {?} */
        const postBody = {
            body: {
                ruleId: ruleID,
                su: su,
                ruleType: 0,
                voId: optionJson.voId,
                needModelConvert: optionJson.needModelConvert === true,
                methodType: methodType,
                importChildNodeCode: optionJson.importChildNodeCode,
                enableRuntimeCustom: optionJson.enableRuntimeCustom === true
            }
        };
        this.http.post(url, postBody.body).subscribe((/**
         * @param {?} recordRule
         * @return {?}
         */
        (recordRule) => {
            this.CloseLoading();
            optionJson.voId = recordRule.voId;
            this.ImportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                subject.next(s);
                subject.complete();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.CloseLoading();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
            /** @type {?} */
            const res = {
                type: 'close',
                data: null,
                other: error.error.Message
            };
            subject.next(res);
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} methodType
     * @param {?=} recordRule
     * @return {?}
     */
    ImportByRuleImpl(ruleID, optionJson, methodType, recordRule) {
        /** @type {?} */
        const subject = new Subject();
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            if (optionJson.customImportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                /** @type {?} */
                const res = {
                    type: 'close',
                    data: null,
                    other: null
                };
                subject.next(res);
                return subject;
            }
        }
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ImportDialogHandcraftComponent);
        /** @type {?} */
        const cmpRef = compFactory.create(this.injector);
        cmpRef.instance.ruleId = ruleID;
        cmpRef.instance.recordRule = recordRule;
        cmpRef.instance.importOption = optionJson;
        if (methodType == MethodType.CommonImport) {
            cmpRef.instance.methodType = MethodType.CommonImport;
        }
        else {
            cmpRef.instance.methodType = MethodType.ImportSubTableDetail;
        }
        cmpRef.instance.subject = subject;
        /** @type {?} */
        let title = this.data_import;
        if (!isNullOrUndefined(optionJson.customImportTitle)) {
            title = optionJson.customImportTitle;
        }
        /** @type {?} */
        const importModalConfig = {
            title: title,
            width: 530,
            height: 342,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(cmpRef, importModalConfig);
        dialog.dialog.instance.closed.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const res = {
                type: 'close',
                data: null,
                other: null
            };
            subject.next(res);
        }));
        cmpRef.instance.needDestroy.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            dialog.close();
            /** @type {?} */
            const importResult = (/** @type {?} */ (data));
            if (!isNullOrUndefined(importResult)) {
                /** @type {?} */
                let res;
                if (importResult.succeed) {
                    res = {
                        type: 'success',
                        data: importResult,
                        other: null
                    };
                }
                else {
                    res = {
                        type: 'fail',
                        data: importResult,
                        other: null
                    };
                }
                subject.next(res);
                subject.complete();
            }
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    ParseExportJson(option) {
        if (typeof (option) === 'object') {
            return option;
        }
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return {};
        }
        /** @type {?} */
        let optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return {};
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        return optionJson;
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    ParseImportJson(option) {
        if (typeof (option) === 'object') {
            return option;
        }
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return {};
        }
        /** @type {?} */
        let optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return {};
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        /** @type {?} */
        let globalParam = optionJson['globalParam'];
        if (globalParam !== undefined && globalParam !== null) {
            optionJson['GlobalParam'] = globalParam;
        }
        return optionJson;
    }
    /**
     * @return {?}
     */
    StartLoading() {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.show();
        }
    }
    /**
     * @return {?}
     */
    CloseLoading() {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.clearAll();
        }
    }
}
DataieHandcraftService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DataieHandcraftService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector },
    { type: DataExportService },
    { type: NotifyService },
    { type: CustomDataIEService },
    { type: HttpClient },
    { type: LoadingService }
];
/** @nocollapse */ DataieHandcraftService.ngInjectableDef = defineInjectable({ factory: function DataieHandcraftService_Factory() { return new DataieHandcraftService(inject(ComponentFactoryResolver), inject(BsModalService), inject(INJECTOR), inject(DataExportService), inject(NotifyService), inject(CustomDataIEService), inject(HttpClient), inject(LoadingService)); }, token: DataieHandcraftService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent9Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent9Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component9',
                template: "<p>\n  extend-component9 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent9Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent8Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent8Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component8',
                template: "<p>\n  extend-component8 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent8Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent7Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent7Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component7',
                template: "<p>\n  extend-component7 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent7Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent6Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent6Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component6',
                template: "<p>\n  extend-component6 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent6Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent5Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent5Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component5',
                template: "<p>\n  extend-component5 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent5Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent4Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent4Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component4',
                template: "<p>\n  extend-component4 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent4Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent3Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent3Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component3',
                template: "<p>\n  extend-component3 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent3Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendComponent2Component {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ExtendComponent2Component.decorators = [
    { type: Component, args: [{
                selector: 'hlo-extend-component2',
                template: "<p>\n  extend-component2 works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendComponent2Component.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RuleCustomSettingComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
RuleCustomSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'hlo-rule-custom-setting',
                template: "<p>\n  rule-custom-setting works!\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
RuleCustomSettingComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RuleIdHelpComponent {
    /**
     * @param {?} notify
     * @param {?} http
     * @param {?} loadingService
     */
    constructor(notify, http, loadingService) {
        this.notify = notify;
        this.http = http;
        this.loadingService = loadingService;
        this.closeModal = new EventEmitter();
        this.afterHelpConfirm = new EventEmitter();
        this.fileTypes = [
            { label: 'Office Excel97-2003(*.xls)', value: RuleFileType[0] },
            { label: 'Office Excel Macro(*.xlsm)', value: RuleFileType[1] },
            { label: 'Office Excel(*.xlsx)', value: RuleFileType[2] },
            { label: 'WPS Table(*.et)', value: RuleFileType[3] },
            { label: 'WPS Table(Template File)(*.ett)', value: RuleFileType[4] },
            { label: 'XML Table(*.xml)', value: RuleFileType[5] },
            { label: 'PDF File(*.pdf)', value: RuleFileType[6] },
            { label: 'CSV File(*.csv)', value: RuleFileType[7] }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.RuleIdHelpColumn = [
            { field: 'code', width: 180, title: '编号', halign: 'center', align: 'center', sortable: true },
            { field: 'name', width: 180, title: '名称', halign: 'center', align: 'center', sortable: true },
            // { field: 'bizEntityName', width: 150, title: '数据实体', halign: 'center', align: 'center', sortable: true },
            {
                field: 'fileType', width: 180, title: '文件类型', halign: 'center', align: 'center', sortable: true,
                formatter: { type: 'enum', options: { valueField: 'value', textField: 'label', data: this.fileTypes } }
            },
            { field: 'lastModifiedTime', width: 150, title: '最后修改时间', halign: 'center', align: 'center', sortable: true }
            // { field: 'creator', width: 150, title: this.ruleselect_creator, halign: 'center', align: 'center', sortable: true }
        ];
        this.loadingService.show();
        /** @type {?} */
        const url = "/api/runtime/dip/v1.0/dataIeRuleManage/getImpExpHelpRules";
        /** @type {?} */
        const requestBody = {
            "ruleType": this.ruleType,
            //导入为0，导出为1
            "beId": this.beId,
            "voId": this.voId
        };
        this.http.post(url, requestBody).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.loadingService.clearAll();
            this.RuleIdHelpData = res;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.loadingService.clearAll();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
    }
    /**
     * @return {?}
     */
    okHandler() {
        /** @type {?} */
        const selectedRow = this.RuleIdHelpGrid.selectedRow;
        if (selectedRow === null) {
            this.notify.info('请选择一条规则');
            return;
        }
        this.ruleId = selectedRow.data.id;
        this.closeModal.emit(this.ruleId);
    }
    /**
     * @return {?}
     */
    cancelHandler() {
        this.closeModal.emit();
    }
}
RuleIdHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'rule-id-help',
                template: "\n  <div class=\"d-flex flex-fill\" style=\"height:100%;\">\n    <farris-datagrid #RuleIdHelpGrid id=\"rule-mgrs-data\" [fit]=\"true\" [fitColumns]=\"true\" [columns]=\"RuleIdHelpColumn\"\n                     [pagination]=\"false\"\n                     [showLineNumber]=\"true\" [keepSelect]=\"true\" [sizeType]=\"'sm'\" [data]=\"RuleIdHelpData\">\n    </farris-datagrid>\n  </div>\n\n  <ng-template #selectFooter>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"cancelHandler()\">\u53D6\u6D88</button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"okHandler()\">\u786E\u5B9A</button>\n  </ng-template>\n\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
RuleIdHelpComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: HttpClient },
    { type: LoadingService }
];
RuleIdHelpComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['selectFooter',] }],
    RuleIdHelpGrid: [{ type: ViewChild, args: ['RuleIdHelpGrid',] }],
    ruleId: [{ type: Output }],
    closeModal: [{ type: Output }],
    afterHelpConfirm: [{ type: Output }],
    ruleType: [{ type: Input }],
    beId: [{ type: Input }],
    voId: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataieRuleHelpComponent {
    /**
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     */
    constructor(injector, modalService, resolver) {
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 打开导入导出规则id选择帮助
     * @param {?} ruleType 规则类型，导入为0，导出为1
     * @param {?} voId
     * @param {?} beId
     * @return {?}
     */
    showRuleIdHelp(ruleType, voId, beId) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(RuleIdHelpComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.beId = beId;
        compRef.instance.ruleType = ruleType;
        compRef.instance.voId = voId;
        /** @type {?} */
        const modalConfig = {
            title: '规则选择',
            width: 920,
            height: 500,
            buttons: compRef.instance.modalFooter,
            showHeader: true,
            showMaxButton: false,
            showButtons: true
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModal.subscribe((/**
         * @param {?} ruleId
         * @return {?}
         */
        ruleId => {
            console.log(ruleId);
            dialog.close();
            subject.next(ruleId);
        }));
        return subject;
    }
}
DataieRuleHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'dataie-rule-help',
                template: "\n",
                styles: [""]
            }] }
];
/** @nocollapse */
DataieRuleHelpComponent.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataImpExpModule {
}
DataImpExpModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ElementSelectComponent,
                    ImportDialogComponent,
                    ExportDialogComponent,
                    ValidateFormComponent,
                    FileDropDirective,
                    FileSelectDirective,
                    CustomImportDialogComponent,
                    ExportCustomSelectComponent,
                    RuleSelectComponent,
                    ImportDialogHandcraftComponent,
                    ExportCustomSelectHandcraftComponent,
                    //extendcomponent
                    DataieProgressComponent,
                    RuleCustomSettingComponent,
                    ExtendComponent1Component,
                    ExtendComponent2Component,
                    ExtendComponent3Component,
                    ExtendComponent4Component,
                    ExtendComponent5Component,
                    ExtendComponent6Component,
                    ExtendComponent7Component,
                    ExtendComponent8Component,
                    ExtendComponent9Component,
                    RuleIdHelpComponent,
                    DataieRuleHelpComponent,
                ],
                exports: [
                    ElementSelectComponent,
                    ImportDialogComponent,
                    ExportDialogComponent,
                    ValidateFormComponent,
                    CustomImportDialogComponent,
                    ExportCustomSelectComponent,
                    ImportDialogHandcraftComponent,
                    FileDropDirective,
                    FileSelectDirective,
                    RuleIdHelpComponent,
                    DataieRuleHelpComponent
                ],
                entryComponents: [ImportDialogComponent, ImportDialogHandcraftComponent,
                    ExportDialogComponent, ValidateFormComponent, RuleSelectComponent,
                    CustomImportDialogComponent, ExportCustomSelectComponent,
                    RuleIdHelpComponent, DataieRuleHelpComponent, ExportCustomSelectHandcraftComponent,
                    //extendcomponent
                    DataieProgressComponent,
                    RuleCustomSettingComponent,
                    ExtendComponent1Component,
                    ExtendComponent2Component,
                    ExtendComponent3Component,
                    ExtendComponent4Component,
                    ExtendComponent5Component,
                    ExtendComponent6Component,
                    ExtendComponent7Component,
                    ExtendComponent8Component,
                    ExtendComponent9Component
                ],
                imports: [
                    CommonModule,
                    DropDownsModule,
                    GridModule,
                    ModalModule.forRoot(),
                    FormsModule,
                    FarrisFormsModule,
                    FarrisDialogModule,
                    LayoutModule,
                    ExcelModule,
                    TreeViewModule,
                    FilterModule,
                    FarrisTabsModule,
                    PDFModule,
                    DatagridModule,
                    DatagridFilterRowModule.forRoot(),
                    InputGroupModule,
                    MultiSelectModule,
                    ComboListModule,
                    FarrisButtonModule,
                    PopoverModule,
                    FarrisTooltipModule,
                    ProgressModule,
                    LayoutModule$1,
                    FarrisSectionModule
                ],
                providers: [DataExportService, FileOperateService, DataImportService, CustomDataIEService, DataieHandcraftService
                ],
                bootstrap: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataImportExportService {
    /**
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     * @param {?} frameContext
     * @param {?} dataExportService
     * @param {?} notify
     * @param {?} entityService
     * @param {?} customIEService
     * @param {?} handcraftSer
     * @param {?} http
     * @param {?} loadingService
     * @param {?} dataImportService
     */
    constructor(modalService, resolver, injector, frameContext, dataExportService, notify, entityService, customIEService, handcraftSer, http, loadingService, dataImportService) {
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.frameContext = frameContext;
        this.dataExportService = dataExportService;
        this.notify = notify;
        this.entityService = entityService;
        this.customIEService = customIEService;
        this.handcraftSer = handcraftSer;
        this.http = http;
        this.loadingService = loadingService;
        this.dataImportService = dataImportService;
        DataIEUtils.getTranslateValue(http).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.i18nResource = res;
            this.data_import = res['data_import'];
            this.data_export = res['data_export'];
            this.export_success = res['export_success'];
            this.export_fail = res['export_fail'];
            this.data_export_customfile = res['data_export_customfile'];
            this.rule_list = res['rule_list'];
        }));
    }
    /**
     * 根据规则导出
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ExportByRule(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const optionJson = this.ParseExportJson(option);
        if (optionJson.packSize) {
            //获取总共有多少条数据
            /** @type {?} */
            const totalData = this.frameContext.bindingData.pagingInfo.total;
            if (isNullOrUndefined(totalData) || totalData <= 0) {
                this.notify.warning('未获取到总数据量或数据量为0，无法进行分批打包导出，请检查');
                subject.next(false);
                subject.complete();
            }
            else {
                /** @type {?} */
                let filterConditions = [];
                if (optionJson.enableScreeningScheme === true) {
                    /** @type {?} */
                    const filterConditionList = this.frameContext.uiState['filterConditionList'];
                    if (!isNullOrUndefined(filterConditionList) && filterConditionList !== '' && filterConditionList !== '[]') {
                        /** @type {?} */
                        let filterConditionListJson = [];
                        if (typeof (filterConditionList) === 'string') {
                            filterConditionListJson = JSON.parse(filterConditionList);
                        }
                        else {
                            filterConditionListJson = filterConditionList;
                        }
                        for (let index = 0; index < filterConditionListJson.length; index++) {
                            /** @type {?} */
                            const element = filterConditionListJson[index];
                            element.Value = decodeURIComponent(element.Value);
                            if (index === filterConditionListJson.length - 1) {
                                element.Relation = 0;
                            }
                            filterConditions.push(element);
                        }
                    }
                }
                //分页大小，对应的每个Excel文件的数据量
                /** @type {?} */
                const pageSize = Number.parseInt(optionJson.packSize);
                /** @type {?} */
                const num = Math.ceil(totalData / pageSize);
                /** @type {?} */
                const packitems = [];
                for (let i = 0; i < num; i++) {
                    /** @type {?} */
                    const packitem = {
                        ruleid: ruleID,
                        globalParam: optionJson.globalParam,
                        filter: {
                            filterConditions: filterConditions,
                            isUsePagination: true,
                            pagination: {
                                pageIndex: i + 1,
                                pageSize: pageSize
                            }
                        }
                    };
                    packitems.push(packitem);
                }
                /** @type {?} */
                let customfilename = '打包导出' + new Date();
                if (!isNullOrEmpty(optionJson.customfilename)) {
                    customfilename = optionJson.customfilename;
                }
                /** @type {?} */
                const option = {
                    package: {
                        customfilename: customfilename,
                        packitems: packitems
                    }
                };
                this.ExportByPackage(JSON.stringify(option)).subscribe((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => {
                    subject.next(s);
                    subject.complete();
                }));
            }
        }
        else {
            this.ExportCommonEntry(ruleID, option, MethodType.CommonExport).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                subject.next(s);
                subject.complete();
            }));
        }
        return subject;
    }
    /**
     * 根据规则导出
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ExportCurrentChildData(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentChildData).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * 导出当前列表数据（分页）
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ExportCurrentListData(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ExportCommonEntry(ruleID, option, MethodType.ExportCurrentTableData).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * 批量打包导出
     * @param {?} option 配置打包信息
     * @return {?}
     */
    ExportByPackage(option) {
        console.log(option);
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const optionJson = this.ParseExportJson(option);
        this.dataExportService.ExportByPackage(this.frameContext.repository, optionJson);
        /** @type {?} */
        const unscriber = this.dataExportService.export.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data === '') {
                this.notify.success(this.export_success);
                unscriber.unsubscribe();
                subject.next(true);
                subject.complete();
            }
            else {
                /** @type {?} */
                const errorlevel = this.dataExportService.errorlevel;
                if (errorlevel === 'Info') {
                    this.notify.info(data);
                }
                else if (errorlevel === 'Warning') {
                    this.notify.warning(data);
                }
                else {
                    this.notify.error(this.export_fail + data);
                }
                unscriber.unsubscribe();
                subject.next(false);
                subject.complete();
            }
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    ExportCommonEntry(ruleID, option, methodType) {
        /** @type {?} */
        const subject = new Subject();
        console.log(option);
        /** @type {?} */
        const optionJson = this.ParseExportJson(option);
        if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.voId)) {
            this.notify.warning("未配置规则id，且无法获取到表单对应的voId，请检查");
            return subject;
        }
        if (methodType === MethodType.ExportCurrentChildData) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.exportChildNodeCode)) {
                //导出子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据Vo查找规则，导出子表必须配置子表节点");
                return subject;
            }
        }
        if (isNullOrEmpty(ruleID) || optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
            /** @type {?} */
            const befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
            this.StartLoading();
            /** @type {?} */
            const url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
            /** @type {?} */
            const postBody = {
                body: {
                    ruleId: ruleID,
                    ruleType: 1,
                    voId: optionJson.voId,
                    methodType: methodType,
                    exportChildNodeCode: optionJson.exportChildNodeCode,
                    enableRuntimeCustom: optionJson.enableRuntimeCustom === true
                }
            };
            /** @type {?} */
            let subscriber;
            if (!isNullOrUndefined(this.http)) {
                subscriber = this.http.post(url, postBody.body);
            }
            else {
                subscriber = befRestService.request(url, 'post', null, postBody);
            }
            subscriber.subscribe((/**
             * @param {?} recordRule
             * @return {?}
             */
            recordRule => {
                this.CloseLoading();
                this.ExportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => {
                    subject.next(s);
                    subject.complete();
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.CloseLoading();
                this.notify.error(error.error.Message);
                console.log(error.error.Message);
            }));
        }
        else {
            this.ExportByRuleImpl(ruleID, optionJson, methodType).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                subject.next(s);
                subject.complete();
            }));
        }
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} mType
     * @param {?=} recordRule
     * @return {?}
     */
    ExportByRuleImpl(ruleID, optionJson, mType, recordRule) {
        /** @type {?} */
        const subject = new Subject();
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            if (optionJson.customExportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customExportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                return subject;
            }
        }
        if (optionJson.applyui === true) {
            /** @type {?} */
            const cmpRef = this.CreateExportComponent();
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.exportOption = optionJson;
            cmpRef.instance.frameContext = this.frameContext;
            cmpRef.instance.methodType = mType;
            cmpRef.instance.subject = subject;
            cmpRef.instance.show = optionJson.vsto;
            cmpRef.instance.isCustomExport = false;
            /** @type {?} */
            const exportModalConfig = this.GetExportDialogConfig(cmpRef, optionJson);
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, exportModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => {
                dialog.close();
            }));
        }
        else if (optionJson.enableRuntimeCustom === true || optionJson.selectfiletype === true) {
            /** @type {?} */
            const cmpRef = this.CreateSelectExportComponent();
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.exportOption = optionJson;
            cmpRef.instance.recordRule = recordRule;
            cmpRef.instance.frameContext = this.frameContext;
            cmpRef.instance.methodType = mType;
            cmpRef.instance.subject = subject;
            /** @type {?} */
            const exportModalConfig = this.GetSelectExportDialogConfig(cmpRef, optionJson);
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, exportModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => {
                dialog.close();
            }));
        }
        else {
            if (!isNullOrUndefined(recordRule) && !isNullOrEmpty(recordRule.ruleId)) {
                ruleID = recordRule.ruleId;
            }
            if (mType == MethodType.CommonExport) {
                this.dataExportService.ExportById(ruleID, this.frameContext, optionJson);
            }
            else if (mType == MethodType.ExportCurrentTableData) {
                this.dataExportService.ExportCurrentData(ruleID, this.frameContext, this.entityService.pageIndex, this.entityService.pageSize, optionJson);
            }
            else {
                this.dataExportService.ExportCurrentChildData(ruleID, this.frameContext, optionJson);
            }
            /** @type {?} */
            const unscriber = this.dataExportService.export.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data === '') {
                    // 有人需求导出去掉成功提示，因为文件还没下载下来提示提前了
                    if (optionJson.cancelnotify === undefined || optionJson.cancelnotify === null || optionJson.cancelnotify === false) {
                        this.notify.success(this.export_success);
                    }
                    subject.next(true);
                    subject.complete();
                }
                else {
                    /** @type {?} */
                    const errorlevel = this.dataExportService.errorlevel;
                    if (errorlevel === 'Info') {
                        this.notify.info(data);
                    }
                    else if (errorlevel === 'Warning') {
                        this.notify.warning(data);
                    }
                    else {
                        this.notify.error(this.export_fail + data);
                    }
                    subject.next(false);
                    subject.complete();
                }
                unscriber.unsubscribe();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.notify.error(error.error.Message);
                subject.next(false);
                subject.complete();
            }));
        }
        return subject;
    }
    /**
     * 通用导入方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    CommonDataImport(type, ruleID, option) {
        // if (type !== 2 && (ruleID === undefined || ruleID === null || ruleID === '')) {
        //     this.notify.error('请在表单导入命令动作处配置导入规则ID');
        //     return;
        // }
        if (type === 1) {
            console.log('执行方法：ImportSublistData');
            return this.ImportSublistData(ruleID, option);
        }
        else if (type === 2) {
            console.log('执行方法：ImportByModel');
            return this.ImportByModel(option);
        }
        else if (type === 0) {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ImportByRule');
            return this.ImportByRule(ruleID, option);
        }
    }
    /**
     * 卡片表单数据导入（主从表，子表，统一只导入到表单）
     * @param {?} dataId
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    CardDataImport(dataId, ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        console.log(dataId);
        if (!dataId) {
            this.notify.warning('未读取到主表数据id，不允许导入');
            subject.next(false);
            return subject;
        }
        /** @type {?} */
        const optionJson = this.ParseImportJson(option);
        optionJson['mainObjId'] = dataId;
        this.frameContext.repository.updateAllChanges().subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.ImportCommonEntry(ruleID, JSON.stringify(optionJson), MethodType.CardFormDataImport).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                subject.next(s);
                subject.complete();
            }));
        }));
        return subject;
    }
    /**
     * 通用导出方法
     * @param {?} type
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    CommonDataExport(type, ruleID, option) {
        // if (type !== 2 && (ruleID === undefined || ruleID === null || ruleID === '')) {
        //     this.notify.error('请在表单导出命令动作处配置导出规则ID');
        //     return;
        // }
        if (type === 1) {
            console.log('执行方法：ExportCurrentListData');
            // const pageInfo = new PageInfo();
            // pageInfo.pageIndex = this.entityService.pageIndex;
            // pageInfo.pageSize = this.entityService.pageSize;
            return this.ExportCurrentListData(ruleID, option);
        }
        else if (type === 2) {
            console.log('执行方法：ExportByModel');
            return this.ExportByModel(option);
        }
        else if (type === 3) {
            console.log('执行方法：ExportCurrentChildData');
            return this.ExportCurrentChildData(ruleID, option);
        }
        else if (type === 0) {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
        else {
            console.log('执行方法：ExportByRule');
            return this.ExportByRule(ruleID, option);
        }
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    ParseExportJson(option) {
        /** @type {?} */
        const voId = this.frameContext.appContext.formId;
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return { filter: null, voId: voId, customfilename: '', applyui: false, vsto: false };
        }
        /** @type {?} */
        let optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return { filter: null, voId: voId, customfilename: '', applyui: false, vsto: false };
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        optionJson['voId'] = voId;
        return optionJson;
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    ParseImportJson(option) {
        /** @type {?} */
        const voId = this.frameContext.appContext.formId;
        if (isNullOrUndefined(option) || isNullOrEmpty(option)) {
            return { templatefilename: '', GlobalParam: '', voId: voId };
        }
        /** @type {?} */
        let optionJson = null;
        try {
            optionJson = JSON.parse(option);
        }
        catch (_a) {
            this.notify.warning('传入的参数转换JSON对象异常，已使用默认参数');
            return { templatefilename: '', GlobalParam: '', voId: voId };
        }
        if (typeof (optionJson) !== 'object') {
            optionJson = {};
        }
        /** @type {?} */
        let globalParam = optionJson['globalParam'];
        if (globalParam !== undefined && globalParam !== null) {
            optionJson['GlobalParam'] = globalParam;
        }
        optionJson['voId'] = voId;
        return optionJson;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    ExportByModel(option) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const optionJson = JSON.parse(option);
        /** @type {?} */
        const model = optionJson.dataExchangeModel;
        /** @type {?} */
        const components = [];
        if (optionJson.components !== undefined && optionJson.components !== null && optionJson.components.length > 0) {
            optionJson.components.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => components.push(JSON.stringify(c))));
        }
        /** @type {?} */
        let i18nId = '';
        if (optionJson.I18nMetadataID !== undefined && optionJson.I18nMetadataID !== null) {
            i18nId = optionJson.I18nMetadataID;
        }
        /** @type {?} */
        let filter = null;
        if (optionJson.filter !== undefined && optionJson.filter !== null) {
            filter = optionJson.filter;
        }
        /** @type {?} */
        const cmpRef = this.CreateExportComponent();
        cmpRef.instance.frameContext = this.frameContext;
        cmpRef.instance.methodType = MethodType.CommonExport;
        cmpRef.instance.isCustomExport = true;
        cmpRef.instance.Model = model;
        cmpRef.instance.subject = subject;
        cmpRef.instance.components = components;
        cmpRef.instance.i18nId = i18nId;
        cmpRef.instance.filter = filter;
        cmpRef.instance.exportOption = optionJson;
        /** @type {?} */
        const modelStr = JSON.stringify(model);
        cmpRef.instance.InnerModel = JSON.parse(modelStr);
        /** @type {?} */
        const exportModalConfig = this.GetExportDialogConfig(cmpRef, optionJson);
        /** @type {?} */
        const keys = ['DataExport', model['MainObject']['Source']['SourceMetadataID'], optionJson.dimension];
        this.customIEService.GetExportRuleModel(keys, this.frameContext.repository, i18nId, model).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data['success'] === true) {
                cmpRef.instance.CustomModel = JSON.parse(data['modelStr']);
            }
            if (i18nId !== '' && data['i18nModel'] !== undefined && data['i18nModel'] !== null) {
                /** @type {?} */
                const i18nModel = JSON.parse(data['i18nModel']);
                cmpRef.instance.Model = i18nModel;
                /** @type {?} */
                const modelStr = JSON.stringify(i18nModel);
                cmpRef.instance.InnerModel = JSON.parse(modelStr);
            }
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, exportModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => {
                dialog.close();
            }));
        }));
        return subject;
        // const dialog = this.modalService.show(cmpRef, exportModalConfig);
        // cmpRef.instance.needDestroy.subscribe($event => { dialog.close(); });
    }
    /**
     * @param {?} option
     * @return {?}
     */
    ImportByModel(option) {
        /** @type {?} */
        const optionJson = JSON.parse(option);
        /** @type {?} */
        const model = optionJson.dataExchangeModel;
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const components = [];
        if (optionJson.components !== undefined && optionJson.components !== null && optionJson.components.length > 0) {
            optionJson.components.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => components.push(JSON.stringify(c))));
        }
        /** @type {?} */
        let i18nId = '';
        if (optionJson.I18nMetadataID !== undefined && optionJson.I18nMetadataID !== null) {
            i18nId = optionJson.I18nMetadataID;
        }
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            if (optionJson.customImportTitle.length > 20) {
                this.notify.warning('自定义标题名称的长度太长');
                return subject;
            }
            if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                this.notify.warning('自定义标题名称存在不合法字符');
                return subject;
            }
        }
        /** @type {?} */
        const cmpRef = this.CreateCustomImportComponent();
        cmpRef.instance.frameContext = this.frameContext;
        cmpRef.instance.importOption = optionJson;
        // cmpRef.instance.methodType = MethodType.ImportSubTableDetail;
        cmpRef.instance.subject = subject;
        cmpRef.instance.i18nId = i18nId;
        cmpRef.instance.Model = model;
        /** @type {?} */
        const modelStr = JSON.stringify(model);
        cmpRef.instance.InnerModel = JSON.parse(modelStr);
        cmpRef.instance.components = components;
        /** @type {?} */
        const importModalConfig = this.GetCustomImportDialogConfig(cmpRef, optionJson);
        /** @type {?} */
        const keys = ['DataImport', model['MainObject']['Source']['SourceMetadataID'], optionJson.dimension];
        this.customIEService.GetImportRuleModel(keys, this.frameContext.repository, i18nId, model).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data['success'] === true) {
                cmpRef.instance.CustomModel = JSON.parse(data['modelStr']);
            }
            if (i18nId !== '' && data['i18nModel'] !== undefined && data['i18nModel'] !== null) {
                /** @type {?} */
                const i18nModel = JSON.parse(data['i18nModel']);
                cmpRef.instance.Model = i18nModel;
                /** @type {?} */
                const modelStr = JSON.stringify(i18nModel);
                cmpRef.instance.InnerModel = JSON.parse(modelStr);
            }
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, importModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => {
                dialog.close();
            }));
        }));
        return subject;
    }
    /**
     * 下载导入模板
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    DownloadTemplate(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.DownloadImportTemplate).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * 根据规则导入
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ImportByRule(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.CommonImport).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * 导入子表数据
     * @param {?} ruleID
     * @param {?} option
     * @return {?}
     */
    ImportSublistData(ruleID, option) {
        /** @type {?} */
        const subject = new Subject();
        this.ImportCommonEntry(ruleID, option, MethodType.ImportSubTableDetail).subscribe((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            subject.next(s);
            subject.complete();
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} option
     * @param {?} methodType
     * @return {?}
     */
    ImportCommonEntry(ruleID, option, methodType) {
        console.log(option);
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const befRestService = DataIEUtils.GetBefRestService(this.frameContext.repository);
        /** @type {?} */
        const su = DataIEUtils.getSu(befRestService.baseUri);
        /** @type {?} */
        const optionJson = this.ParseImportJson(option);
        if (methodType === MethodType.ImportSubTableDetail) {
            if (isNullOrEmpty(ruleID) && isNullOrEmpty(optionJson.importChildNodeCode)) {
                //导入子表当规则id为空时，根据vo找规则，必须要求有配置子表节点
                this.notify.warning("规则id为空时，根据Vo查找规则，导入子表必须配置子表节点");
                return subject;
            }
        }
        this.StartLoading();
        /** @type {?} */
        const url = '/api/runtime/dip/v1.0/dataIeRuleManage/getRecordRuleInfo';
        /** @type {?} */
        const postBody = {
            body: {
                ruleId: ruleID,
                su: su,
                ruleType: 0,
                voId: optionJson.voId,
                methodType: methodType,
                importChildNodeCode: optionJson.importChildNodeCode,
                enableRuntimeCustom: optionJson.enableRuntimeCustom === true
            }
        };
        /** @type {?} */
        let subscriber;
        if (!isNullOrUndefined(this.http)) {
            subscriber = this.http.post(url, postBody.body);
        }
        else {
            subscriber = befRestService.request(url, 'post', null, postBody);
        }
        subscriber.subscribe((/**
         * @param {?} recordRule
         * @return {?}
         */
        recordRule => {
            this.CloseLoading();
            this.ImportByRuleImpl(ruleID, optionJson, methodType, recordRule).subscribe((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                subject.next(s);
                subject.complete();
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.CloseLoading();
            this.notify.error(error.error.Message);
            console.log(error.error.Message);
        }));
        return subject;
    }
    /**
     * @private
     * @param {?} ruleID
     * @param {?} optionJson
     * @param {?} methodType
     * @param {?=} recordRule
     * @return {?}
     */
    ImportByRuleImpl(ruleID, optionJson, methodType, recordRule) {
        /** @type {?} */
        const subject = new Subject();
        if (methodType === MethodType.DownloadImportTemplate) {
            this.loadingService.show();
            /** @type {?} */
            const ruleId = recordRule.ruleId ? recordRule.ruleId : ruleID;
            this.dataImportService.DowmloadTemplate(ruleId, this.frameContext.repository, optionJson, null);
            this.dataImportService.complete.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.loadingService.clearAll();
                if (data === '') {
                    this.notify.success(this.i18nResource.download_template_ok);
                    subject.next(true);
                    subject.complete();
                }
                else {
                    this.notify.error(this.i18nResource.download_template_fail + data);
                    subject.next(false);
                    subject.complete();
                }
            }));
        }
        else {
            if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
                if (optionJson.customImportTitle.length > 20) {
                    this.notify.warning('自定义标题名称的长度太长');
                    return subject;
                }
                if (DataIEUtils.JudgeIllegalChar(optionJson.customImportTitle)) {
                    this.notify.warning('自定义标题名称存在不合法字符');
                    return subject;
                }
            }
            /** @type {?} */
            const cmpRef = this.CreateImportComponent();
            cmpRef.instance.ruleId = ruleID;
            cmpRef.instance.importOption = optionJson;
            cmpRef.instance.recordRule = recordRule;
            cmpRef.instance.frameContext = this.frameContext;
            cmpRef.instance.methodType = methodType;
            cmpRef.instance.subject = subject;
            /** @type {?} */
            const importModalConfig = this.GetImportDialogConfig(cmpRef, optionJson);
            /** @type {?} */
            const dialog = this.modalService.show(cmpRef, importModalConfig);
            cmpRef.instance.needDestroy.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => {
                dialog.close();
            }));
        }
        return subject;
    }
    /**
     * @return {?}
     */
    StartLoading() {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.show();
        }
    }
    /**
     * @return {?}
     */
    CloseLoading() {
        if (this.loadingService !== undefined && this.loadingService !== null) {
            this.loadingService.clearAll();
        }
    }
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    GetImportDialogConfig(cmpRef, optionJson) {
        /** @type {?} */
        let title = this.data_import;
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            title = optionJson.customImportTitle;
        }
        /** @type {?} */
        const importModalConfig = {
            title: title,
            width: 530,
            height: 342,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return importModalConfig;
    }
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    GetCustomImportDialogConfig(cmpRef, optionJson) {
        /** @type {?} */
        let title = this.data_import;
        if (optionJson.customImportTitle !== undefined && optionJson.customImportTitle !== null) {
            title = optionJson.customImportTitle;
        }
        /** @type {?} */
        const importModalConfig = {
            title: title,
            width: 950,
            height: 570,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return importModalConfig;
    }
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    GetExportDialogConfig(cmpRef, optionJson) {
        /** @type {?} */
        let title = this.data_export;
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            title = optionJson.customExportTitle;
        }
        /** @type {?} */
        const exportModalConfig = {
            title: title,
            width: 922,
            height: 530,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return exportModalConfig;
    }
    /**
     * @private
     * @param {?} cmpRef
     * @param {?} optionJson
     * @return {?}
     */
    GetSelectExportDialogConfig(cmpRef, optionJson) {
        /** @type {?} */
        let title = this.data_export;
        if (optionJson.customExportTitle !== undefined && optionJson.customExportTitle !== null) {
            title = optionJson.customExportTitle;
        }
        /** @type {?} */
        const exportModalConfig = {
            title: title,
            width: 530,
            height: 342,
            buttons: cmpRef.instance.modalFooter,
            showCloseButton: true,
            showMaxButton: false,
            showMinButton: false,
            showButtons: true,
            resizable: false
        };
        return exportModalConfig;
    }
    // 创建输入组件实例
    /**
     * @private
     * @return {?}
     */
    CreateImportComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ImportDialogComponent);
        /** @type {?} */
        const cmpRef = compFactory.create(this.injector);
        return cmpRef;
    }
    // 创建输出组件实例
    /**
     * @private
     * @return {?}
     */
    CreateExportComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ExportDialogComponent);
        /** @type {?} */
        const cmpRef = compFactory.create(this.injector);
        return cmpRef;
    }
    /**
     * @private
     * @return {?}
     */
    CreateSelectExportComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ExportCustomSelectComponent);
        /** @type {?} */
        const cmpRef = compFactory.create(this.injector);
        return cmpRef;
    }
    /**
     * @private
     * @return {?}
     */
    CreateCustomImportComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(CustomImportDialogComponent);
        /** @type {?} */
        const cmpRef = compFactory.create(this.injector);
        return cmpRef;
    }
}
DataImportExportService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataImportExportService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: FrameContext },
    { type: DataExportService },
    { type: NotifyService },
    { type: EntityListService },
    { type: CustomDataIEService },
    { type: DataieHandcraftService },
    { type: HttpClient },
    { type: LoadingService },
    { type: DataImportService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DIP_DATAIE_SERVICE = [
    DataImportExportService
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DataImpExpModule, DataImportExportService, DIP_DATAIE_SERVICE, DataieHandcraftService, RuleIdHelpComponent, DataieRuleHelpComponent, DataieProgressComponent as ɵp, ExtendComponent1Component as ɵr, ExtendComponent2Component as ɵs, ExtendComponent3Component as ɵt, ExtendComponent4Component as ɵu, ExtendComponent5Component as ɵv, ExtendComponent6Component as ɵw, ExtendComponent7Component as ɵx, ExtendComponent8Component as ɵy, ExtendComponent9Component as ɵz, RuleCustomSettingComponent as ɵq, ExportDialogComponent as ɵe, CustomImportDialogComponent as ɵk, ElementSelectComponent as ɵa, ExportCustomSelectHandcraftComponent as ɵo, ExportCustomSelectComponent as ɵl, ImportDialogHandcraftComponent as ɵn, ImportDialogComponent as ɵb, RuleSelectComponent as ɵm, CustomDataIEService as ɵg, DataExportService as ɵf, DataImportService as ɵc, FileOperateService as ɵd, FileDropDirective as ɵi, FileSelectDirective as ɵj, ValidateFormComponent as ɵh };

//# sourceMappingURL=gsp-dip-data-imp-exp.js.map