/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { GSPCommonModel } from '../ref';
/**
* BE元数据实体类
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE元数据实体类
 */
export class GSPBusinessEntity extends GSPCommonModel {
    /**
     * 扩展类型
     * @return {?}
     */
    get ExtendType() {
        return 'GSPBusinessEntity';
    }
}
if (false) {
    /**
     * 依赖包名
     * @type {?}
     */
    GSPBusinessEntity.prototype.DependentEntityPackageName;
    /**
     * 构件生成时使用的程序集名
     * @type {?}
     */
    GSPBusinessEntity.prototype.ComponentAssemblyName;
    /** @type {?} */
    GSPBusinessEntity.prototype.AssemblyName;
    /**
     * BE实体类型
     * @type {?}
     */
    GSPBusinessEntity.prototype.Category;
    /**
     * 派生，扩展关系的来源BE实体
     * @type {?}
     */
    GSPBusinessEntity.prototype.SourceEntity;
    /**
     * BE根节点
     * @type {?}
     */
    GSPBusinessEntity.prototype.MainObject;
    /**
     * 实体数据加锁类型
     * 此属性影响到实体使用乐观锁或者悲观锁控制数据并发
     *  默认为悲观锁，保证更好的数据一致性，同时可以提升用户体验。必须显式加锁才能编辑数据
     * @type {?}
     */
    GSPBusinessEntity.prototype.DataLockType;
    /**
     * 被依赖实体的id
     * @type {?}
     */
    GSPBusinessEntity.prototype.DependentEntityId;
    /** @type {?} */
    GSPBusinessEntity.prototype.DependentEntityName;
    /**
     * 是否启用缓存
     * @type {?}
     */
    GSPBusinessEntity.prototype.EnableCaching;
    /**
     * 是否启用树内置动作
     * @type {?}
     */
    GSPBusinessEntity.prototype.EnableTreeDtm;
    /**
     * 缓存配置
     * @type {?}
     */
    GSPBusinessEntity.prototype.CacheConfiguration;
    /**
     * 是否生成时间戳字段（仅主对象）
     * @type {?}
     */
    GSPBusinessEntity.prototype.IsUsingTimeStamp;
    /**
     * BEManagerAction
     * @type {?}
     */
    GSPBusinessEntity.prototype.BizMgrActions;
    /**
     * BE关联的权限对象ID集合
     * @type {?}
     */
    GSPBusinessEntity.prototype.Authorizations;
}
//# sourceMappingURL=data:application/json;base64,