/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class BeOperationUtil {
    /**
     * @param {?} be
     * @return {?}
     */
    getAllMgrActions(be) {
        return be.BizMgrActions;
    }
    /**
     * bizActions
     * @param {?} be
     * @return {?}
     */
    getAllBizEntityActions(be) {
        return this.getChidrenObjectsActions(be.MainObject);
    }
    /**
     * @param {?} bizObject
     * @return {?}
     */
    getChidrenObjectsActions(bizObject) {
        /** @type {?} */
        const result = new Array();
        if (!(bizObject)) {
            return result;
        }
        if (bizObject.BizActions && bizObject.BizActions.length > 0) {
            result.push(...bizObject.BizActions);
        }
        if (bizObject.ContainChildObjects && bizObject.ContainChildObjects.length > 0) {
            for (let i = 0; i < bizObject.ContainChildObjects.length; i++) {
                result.push(...this.getChidrenObjectsActions((/** @type {?} */ (bizObject.ContainChildObjects[i]))));
            }
        }
        return result;
    }
    /**
     * determination
     * @param {?} be
     * @return {?}
     */
    getAllDeterminations(be) {
        return this.getChidrenObjectsDeterminations(be.MainObject);
    }
    /**
     * @param {?} bizObject
     * @return {?}
     */
    getChidrenObjectsDeterminations(bizObject) {
        /** @type {?} */
        const result = new Array();
        if (!(bizObject)) {
            return result;
        }
        if (bizObject.Determinations && bizObject.Determinations.length > 0) {
            result.push(...bizObject.Determinations);
        }
        if (bizObject.ContainChildObjects && bizObject.ContainChildObjects.length > 0) {
            for (let i = 0; i < bizObject.ContainChildObjects.length; i++) {
                result.push(...this.getChidrenObjectsDeterminations((/** @type {?} */ (bizObject.ContainChildObjects[i]))));
            }
        }
        return result;
    }
    /**
     * validation
     * @param {?} be
     * @return {?}
     */
    getAllValidations(be) {
        return this.getChidrenObjectsValidations(be.MainObject);
    }
    /**
     * @param {?} bizObject
     * @return {?}
     */
    getChidrenObjectsValidations(bizObject) {
        /** @type {?} */
        const result = new Array();
        if (!(bizObject)) {
            return result;
        }
        if (bizObject.Validations && bizObject.Validations.length > 0) {
            result.push(...bizObject.Validations);
        }
        if (bizObject.ContainChildObjects && bizObject.ContainChildObjects.length > 0) {
            for (let i = 0; i < bizObject.ContainChildObjects.length; i++) {
                result.push(...this.getChidrenObjectsValidations((/** @type {?} */ (bizObject.ContainChildObjects[i]))));
            }
        }
        return result;
    }
    /**
     * 获取所有操作
     * @param {?} be
     * @return {?}
     */
    getAllOperations(be) {
        /** @type {?} */
        const result = new Array();
        result.push(...this.getAllBizEntityActions(be));
        result.push(...this.getAllMgrActions(be));
        result.push(...this.getAllDeterminations(be));
        result.push(...this.getAllValidations(be));
        return result;
    }
    /**
     * validation触发字段中是否包含某字段
     * @param {?} be
     * @param {?} eleId 字段ID
     * @return {?}
     */
    countainValidationRequestElement(be, eleId) {
        /** @type {?} */
        const validations = this.getAllValidations(be);
        if (!!(validations) && validations.length > 0) {
            for (let i = 0; i < validations.length; i++) {
                /** @type {?} */
                const b = this.validationCountainRequestElement(validations[i], eleId);
                if (b) {
                    /** @type {?} */
                    const result = validations[i].Name;
                    return result;
                }
            }
        }
        return null;
    }
    /**
     * determination触发字段中是否包含某字段
     * @param {?} be
     * @param {?} eleId 字段ID
     * @return {?}
     */
    countainDeterminationRequestElement(be, eleId) {
        /** @type {?} */
        const dtms = this.getAllDeterminations(be);
        if (!!(dtms) && dtms.length > 0) {
            for (let i = 0; i < dtms.length; i++) {
                /** @type {?} */
                const b = this.determinationCountainRequestElement(dtms[i], eleId);
                if (b) {
                    /** @type {?} */
                    const result = dtms[i].Name;
                    return result;
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} id
     * @param {?} requestEles
     * @return {?}
     */
    countainEle(id, requestEles) {
        if (!!(id) && !!(requestEles) && requestEles.length > 0) {
            return requestEles.indexOf(id) >= 0;
        }
        return false;
    }
    /**
     * 触发字段中是否包含某字段
     * @param {?} dtm
     * @param {?} id
     * @return {?}
     */
    determinationCountainRequestElement(dtm, id) {
        if (this.countainEle(id, dtm.RequestElements)) {
            return true;
        }
        if (!!(dtm.RequestChildElements) && dtm.RequestChildElements.length > 0) {
            return this.countainEle(id, dtm.RequestChildElements[0].RequestChildElementValue);
        }
        return false;
    }
    /**
     * 触发字段中是否包含某字段
     * @param {?} validation
     * @param {?} id
     * @return {?}
     */
    validationCountainRequestElement(validation, id) {
        if (this.countainEle(id, validation.RequestElements)) {
            return true;
        }
        if (!!(validation.RequestChildElements) && validation.RequestChildElements.length > 0) {
            return this.countainEle(id, validation.RequestChildElements[0].RequestChildElementValue);
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,