import { GSPCommonElement, GSPCommonObject, GSPCommonModel } from '@gsp-bef/gsp-cm-metadata';
import '@gsp-bef/gsp-udt-metadata';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE节点实体类
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE节点实体类
 */
class GSPBizEntityElement extends GSPCommonElement {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE节点实体类
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE节点实体类
 */
class GSPBizEntityObject extends GSPCommonObject {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE元数据实体类
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE元数据实体类
 */
class GSPBusinessEntity extends GSPCommonModel {
    /**
     * 扩展类型
     * @return {?}
     */
    get ExtendType() {
        return 'GSPBusinessEntity';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 权限控制类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const AuthType = {
    /**
     * 使用传递的权限，不限制权限，Action没有绑定的业务操作
     */
    TransAuth: 0,
    /**
     * 使用传递的权限，并且限制在Action所绑定的业务操作内
     */
    TransAndInsideAuth: 1,
    /**
     * 不使用传递的权限，使用Action绑定的业务操作（只绑定一个业务操作）
     */
    MustHasAuth: 2,
};
AuthType[AuthType.TransAuth] = 'TransAuth';
AuthType[AuthType.TransAndInsideAuth] = 'TransAndInsideAuth';
AuthType[AuthType.MustHasAuth] = 'MustHasAuth';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE 实体类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const BECategory = {
    /**
     * 标准BE
     */
    Standard: 0,
    /**
     * DBO,用于元数据重用的嵌入式BE,需要依赖HO存在
     */
    DependentBusinessObject: 1,
    /**
     * 若干BE的公共部分抽象的大集合
     */
    MaxBusinessObject: 2,
};
BECategory[BECategory.Standard] = 'Standard';
BECategory[BECategory.DependentBusinessObject] = 'DependentBusinessObject';
BECategory[BECategory.MaxBusinessObject] = 'MaxBusinessObject';
/** @type {?} */
const BECategories = [
    { text: '标准BE', value: BECategory.Standard },
    { text: '模板BE', value: BECategory.DependentBusinessObject },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE Determination的类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const BEDeterminationType = {
    /**
     * 非持久化: 所对应的计算结果字段是虚拟列，不需要持久化。 此时只需要读取和修改后进行计算
     */
    Transient: 0,
    /**
     * 持久化: 所对应的计算结果字段是持久化的。数据保存前需要计算
     */
    Persistent: 1,
};
BEDeterminationType[BEDeterminationType.Transient] = 'Transient';
BEDeterminationType[BEDeterminationType.Persistent] = 'Persistent';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE 操作类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const BEOperationType = {
    /**
     * 自定义操作
     */
    BizMgrAction: 0,
    /**
     * 业务实体操作
     */
    BizAction: 1,
    /**
     * 数据完整性检查
     */
    Validation: 2,
    /**
     * 自动计算
     */
    Determination: 3,
    /**
     * 查询
     */
    Query: 4,
    /**
     * 事件订阅
     */
    Subscription: 5,
    /**
     * 初始化
     */
    Initiation: 6,
    /**
     * 系统服务
     */
    BasicService: 7,
};
BEOperationType[BEOperationType.BizMgrAction] = 'BizMgrAction';
BEOperationType[BEOperationType.BizAction] = 'BizAction';
BEOperationType[BEOperationType.Validation] = 'Validation';
BEOperationType[BEOperationType.Determination] = 'Determination';
BEOperationType[BEOperationType.Query] = 'Query';
BEOperationType[BEOperationType.Subscription] = 'Subscription';
BEOperationType[BEOperationType.Initiation] = 'Initiation';
BEOperationType[BEOperationType.BasicService] = 'BasicService';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* Determination触发时机
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const BETriggerTimePointType = {
    /**
     * 不执行,用于判断时机比较结果
     */
    None: 0,
    /**
     * 数据加载后, 目前来说是retrieve和query时触发
     * 此事件只针对 BODeterminationType.Transient类型的Determination 也就是说不能够操作持久化成员
     * 用于计算虚拟字段值,动作联动等操作
     */
    AfterLoading: 1,
    /**
     * 数据更新后
     * 可以操作持久化或非持久化属性和Node
     */
    AfterModify: 2,
    /**
     * 校验执行时
     * ValidateAndDetermine 方法中执行
     */
    Determine: 4,
    /**
     * 一致性检查前，保存中进行Validation之前进行，是修改数据的最后时机
     */
    BeforeCheck: 8,
    /**
     * 生成编码后
     * 用于同步更新根据编号生成规则产生的编号
     */
    AfterNumbersAdjusted: 16,
    /**
     * 保存失败后，现阶段可以不加
     * Finalize,Validation执行失败后执行,用于清理缓存垃圾数据等操作
     */
    AfterFailedSaveAttempt: 32,
    /**
     * 调用RetrieveDefault时触发
     */
    RetrieveDefault: 64,
    /**
     * 调用Query前触发, 仅主节点有效.
     */
    BeforeQuery: 128,
    /**
     * 调用Query后触发, 仅主节点有效.
     */
    AfterQuery: 256,
    /**
     * 取消
     */
    Cancel: 512,
    /**
     * 检索前
     */
    BeforeRetrieve: 1024,
    /**
     * 保存后
     */
    AfterSave: 2048,
};
BETriggerTimePointType[BETriggerTimePointType.None] = 'None';
BETriggerTimePointType[BETriggerTimePointType.AfterLoading] = 'AfterLoading';
BETriggerTimePointType[BETriggerTimePointType.AfterModify] = 'AfterModify';
BETriggerTimePointType[BETriggerTimePointType.Determine] = 'Determine';
BETriggerTimePointType[BETriggerTimePointType.BeforeCheck] = 'BeforeCheck';
BETriggerTimePointType[BETriggerTimePointType.AfterNumbersAdjusted] = 'AfterNumbersAdjusted';
BETriggerTimePointType[BETriggerTimePointType.AfterFailedSaveAttempt] = 'AfterFailedSaveAttempt';
BETriggerTimePointType[BETriggerTimePointType.RetrieveDefault] = 'RetrieveDefault';
BETriggerTimePointType[BETriggerTimePointType.BeforeQuery] = 'BeforeQuery';
BETriggerTimePointType[BETriggerTimePointType.AfterQuery] = 'AfterQuery';
BETriggerTimePointType[BETriggerTimePointType.Cancel] = 'Cancel';
BETriggerTimePointType[BETriggerTimePointType.BeforeRetrieve] = 'BeforeRetrieve';
BETriggerTimePointType[BETriggerTimePointType.AfterSave] = 'AfterSave';
/** @type {?} */
const BETriggerTimePointTypes = [
    { index: 1, value: BETriggerTimePointType.AfterLoading },
    { index: 2, value: BETriggerTimePointType.RetrieveDefault },
    { index: 3, value: BETriggerTimePointType.AfterModify },
    { index: 4, value: BETriggerTimePointType.Determine },
    { index: 5, value: BETriggerTimePointType.BeforeCheck },
    { index: 6, value: BETriggerTimePointType.AfterNumbersAdjusted },
    { index: 7, value: BETriggerTimePointType.BeforeQuery },
    { index: 8, value: BETriggerTimePointType.AfterQuery },
    { index: 9, value: BETriggerTimePointType.Cancel },
    { index: 10, value: BETriggerTimePointType.BeforeRetrieve },
    { index: 11, value: BETriggerTimePointType.AfterSave },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 权限控制类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const BEValidationType = {
    /**
     * 数据一致性校验
     */
    Consistency: 0,
    /**
     * 操作许可校验
     */
    Operation: 1,
};
BEValidationType[BEValidationType.Consistency] = 'Consistency';
BEValidationType[BEValidationType.Operation] = 'Operation';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 实体加锁类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const GSPDataLockType = {
    /**
     * 悲观锁：需要显式加锁成功后才能编辑数据
     */
    PessimisticLocking: 0,
    /**
     * 乐观锁：提交数据时比较数据版本，如果不一致，数据作废
     */
    OptimisticLocking: 1,
    /**
     * 不加锁：不保证实体数据并发一致性
     */
    None: 2,
};
GSPDataLockType[GSPDataLockType.PessimisticLocking] = 'PessimisticLocking';
GSPDataLockType[GSPDataLockType.OptimisticLocking] = 'OptimisticLocking';
GSPDataLockType[GSPDataLockType.None] = 'None';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 触发时机，供Validation、Determination共用。
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const RequestNodeTriggerType = {
    /**
     * 不执行
     */
    None: 0,
    /**
     * 实例创建时执行
     */
    Created: 1,
    /**
     * 实例更新时执行
     */
    Updated: 2,
    /**
     * 实例删除时执行
     */
    Deleted: 4,
    /**
     * 校验或者自动计算时(分别用于Validation、Determination)
     */
    ValidateOrDetermine: 8,
    /**
     * 数据加载时，Determination专用。
     */
    Load: 16,
};
RequestNodeTriggerType[RequestNodeTriggerType.None] = 'None';
RequestNodeTriggerType[RequestNodeTriggerType.Created] = 'Created';
RequestNodeTriggerType[RequestNodeTriggerType.Updated] = 'Updated';
RequestNodeTriggerType[RequestNodeTriggerType.Deleted] = 'Deleted';
RequestNodeTriggerType[RequestNodeTriggerType.ValidateOrDetermine] = 'ValidateOrDetermine';
RequestNodeTriggerType[RequestNodeTriggerType.Load] = 'Load';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 实体加锁类型
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const RequiredCheckOccasion = {
    /**
     * 仅保存时
     */
    Save: 'Save',
    /**
     * 此选项在设计器上不暴露, 不应该存在修改时验证保存时不执行的情况
     */
    Modify: 'Modify',
    /**
     * 所有时机
     * 二进制为全1
     */
    All: 'All',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE操作基类.
* BE操作，是基于服务端业务逻辑构件的，每个操作都是其中的一个方法。
* 但BE对用户隐藏了该层关系，即让用户感觉不到后台构件的存在。
* 应该确保BE操作的Code、Name与Method的Code、Name的一致。
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE操作基类.
 * BE操作，是基于服务端业务逻辑构件的，每个操作都是其中的一个方法。
 * 但BE对用户隐藏了该层关系，即让用户感觉不到后台构件的存在。
 * 应该确保BE操作的Code、Name与Method的Code、Name的一致。
 */
class BizOperation {
    constructor() {
        /**
         * 是否生成构件
         */
        this.IsGenerateComponent = true;
        // this.ID = Guid.newGuid().toString();
        this.IsRef = false;
        this.IsGenerateComponent = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE基本操作
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE基本操作
 * @abstract
 */
class BizActionBase extends BizOperation {
    constructor() {
        super();
    }
    /**
     * 操作类型
     * @return {?}
     */
    get OpType() {
        return BEOperationType.BizAction;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizParameterBase {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const BizParameterMode = {
    IN: 0,
    OUT: 1,
    INOUT: 2,
};
BizParameterMode[BizParameterMode.IN] = 'IN';
BizParameterMode[BizParameterMode.OUT] = 'OUT';
BizParameterMode[BizParameterMode.INOUT] = 'INOUT';
/** @type {?} */
const BizParameterModes = [
    { text: 'IN', value: BizParameterMode.IN },
    { text: 'OUT', value: BizParameterMode.OUT },
    { text: 'INOUT', value: BizParameterMode.INOUT }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizReturnValue extends BizParameterBase {
    constructor() {
        super(...arguments);
        this.ParamName = undefined;
        this.Mode = BizParameterMode.OUT;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizVoidReturnType extends BizReturnValue {
    constructor() {
        super(...arguments);
        this.Assembly = 'mscorlib.dll';
        this.ClassName = 'Void';
        // ParameterType = BizParameterType.Custom;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizAction extends BizActionBase {
    constructor() {
        super();
        this.ReturnValue = new BizVoidReturnType();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 联动规则元数据定义
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 联动规则元数据定义
 *
 */
class Determination extends BizOperation {
    constructor() {
        super();
    }
    /**
     * 操作类型
     * @return {?}
     */
    get OpType() {
        return BEOperationType.Determination;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 验证操作
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 验证操作
 */
class Validation extends BizOperation {
    constructor() {
        super();
    }
    /**
     * 操作类型
     * @return {?}
     */
    get OpType() {
        return BEOperationType.Validation;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizMgrAction extends BizActionBase {
    constructor() {
        super();
        this.ReturnValue = new BizVoidReturnType();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RequestChildElement {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizActionParameter extends BizParameterBase {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizMgrActionParameter extends BizParameterBase {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const BizParameterType = {
    /**
     * 字符型
     */
    String: 0,
    /**
     * 布尔型
     */
    Boolean: 1,
    /**
     * 整数
     */
    Int32: 2,
    /**
     * 浮点数
     */
    Decimal: 3,
    /**
     * 双浮点
     */
    Double: 4,
    /**
     * 时间
     */
    DateTime: 5,
    /**
     * 对象类型
     */
    Object: 6,
    /**
     * 自定义
     */
    Custom: 7,
};
BizParameterType[BizParameterType.String] = 'String';
BizParameterType[BizParameterType.Boolean] = 'Boolean';
BizParameterType[BizParameterType.Int32] = 'Int32';
BizParameterType[BizParameterType.Decimal] = 'Decimal';
BizParameterType[BizParameterType.Double] = 'Double';
BizParameterType[BizParameterType.DateTime] = 'DateTime';
BizParameterType[BizParameterType.Object] = 'Object';
BizParameterType[BizParameterType.Custom] = 'Custom';
// export const BizParameterTypes: Array<{ index: number, text: string, value: BizParameterType, assembly: string, className: string }> = [
//     { index: 0, text: '字符串', value: BizParameterType.String, assembly: '', className: '' },
//     { index: 1, text: '布尔型', value: BizParameterType.Boolean, assembly: '', className: '' },
//     { index: 2, text: '整数', value: BizParameterType.Integer, assembly: '', className: '' },
//     { index: 3, text: '浮点数', value: BizParameterType.Float, assembly: '', className: '' },
//     { index: 4, text: '双浮点数', value: BizParameterType.Double, assembly: '', className: '' },
//     { index: 5, text: '时间类型', value: BizParameterType.DateTime, assembly: '', className: '' },
//     { index: 6, text: '对象类型', value: BizParameterType.Object, assembly: '', className: '' },
//     { index: 7, text: '自定义类型', value: BizParameterType.Custom, assembly: '', className: '' },
// ];
/** @type {?} */
const BizParameterTypes = [
    { index: 0, text: '字符串', value: BizParameterType.String, assembly: 'mscorlib.dll', className: 'System.String', javaClassName: 'java.lang.String' },
    { index: 1, text: '布尔型', value: BizParameterType.Boolean, assembly: 'mscorlib.dll', className: 'System.Boolean', javaClassName: 'java.lang.Boolean' },
    { index: 2, text: '整数', value: BizParameterType.Int32, assembly: 'mscorlib.dll', className: 'System.Int32', javaClassName: 'java.lang.Integer' },
    { index: 3, text: '浮点数', value: BizParameterType.Decimal, assembly: 'mscorlib.dll', className: 'System.Single', javaClassName: 'java.math.BigDecimal' },
    { index: 4, text: '双浮点数', value: BizParameterType.Double, assembly: 'mscorlib.dll', className: 'System.Double', javaClassName: 'java.lang.Double' },
    { index: 5, text: '时间类型', value: BizParameterType.DateTime, assembly: 'mscorlib.dll', className: 'System.DateTime', javaClassName: 'java.util.Date' },
    { index: 6, text: '对象类型', value: BizParameterType.Object, assembly: 'mscorlib.dll', className: 'System.Object', javaClassName: 'java.lang.Object' },
    { index: 7, text: '自定义类型', value: BizParameterType.Custom, assembly: '', className: '', javaClassName: '' },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const BizCollectionParameterType = {
    /**
     * 未使用集合形式
     */
    None: 0,
    /**
     * 列表
     */
    List: 1,
    /**
     * 数组
     */
    Array: 2,
};
BizCollectionParameterType[BizCollectionParameterType.None] = 'None';
BizCollectionParameterType[BizCollectionParameterType.List] = 'List';
BizCollectionParameterType[BizCollectionParameterType.Array] = 'Array';
/** @type {?} */
const BizCollectionParameterTypes = [
    { text: '无', value: BizCollectionParameterType.None },
    { text: '列表', value: BizCollectionParameterType.List },
    { text: '数组', value: BizCollectionParameterType.Array }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ValidationTriggerPoint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 数据授权对象与be动作关联关系
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 数据授权对象与be动作关联关系
 */
class AuthFieldActionInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 数据授权对象关联信息
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 数据授权对象关联信息
 */
class AuthFieldInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE元数据关联的权限对象
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE元数据关联的权限对象
 */
class AuthorizationInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BeOperationUtil {
    /**
     * @param {?} be
     * @return {?}
     */
    getAllMgrActions(be) {
        return be.BizMgrActions;
    }
    /**
     * bizActions
     * @param {?} be
     * @return {?}
     */
    getAllBizEntityActions(be) {
        return this.getChidrenObjectsActions(be.MainObject);
    }
    /**
     * @param {?} bizObject
     * @return {?}
     */
    getChidrenObjectsActions(bizObject) {
        /** @type {?} */
        const result = new Array();
        if (!(bizObject)) {
            return result;
        }
        if (bizObject.BizActions && bizObject.BizActions.length > 0) {
            result.push(...bizObject.BizActions);
        }
        if (bizObject.ContainChildObjects && bizObject.ContainChildObjects.length > 0) {
            for (let i = 0; i < bizObject.ContainChildObjects.length; i++) {
                result.push(...this.getChidrenObjectsActions((/** @type {?} */ (bizObject.ContainChildObjects[i]))));
            }
        }
        return result;
    }
    /**
     * determination
     * @param {?} be
     * @return {?}
     */
    getAllDeterminations(be) {
        return this.getChidrenObjectsDeterminations(be.MainObject);
    }
    /**
     * @param {?} bizObject
     * @return {?}
     */
    getChidrenObjectsDeterminations(bizObject) {
        /** @type {?} */
        const result = new Array();
        if (!(bizObject)) {
            return result;
        }
        if (bizObject.Determinations && bizObject.Determinations.length > 0) {
            result.push(...bizObject.Determinations);
        }
        if (bizObject.ContainChildObjects && bizObject.ContainChildObjects.length > 0) {
            for (let i = 0; i < bizObject.ContainChildObjects.length; i++) {
                result.push(...this.getChidrenObjectsDeterminations((/** @type {?} */ (bizObject.ContainChildObjects[i]))));
            }
        }
        return result;
    }
    /**
     * validation
     * @param {?} be
     * @return {?}
     */
    getAllValidations(be) {
        return this.getChidrenObjectsValidations(be.MainObject);
    }
    /**
     * @param {?} bizObject
     * @return {?}
     */
    getChidrenObjectsValidations(bizObject) {
        /** @type {?} */
        const result = new Array();
        if (!(bizObject)) {
            return result;
        }
        if (bizObject.Validations && bizObject.Validations.length > 0) {
            result.push(...bizObject.Validations);
        }
        if (bizObject.ContainChildObjects && bizObject.ContainChildObjects.length > 0) {
            for (let i = 0; i < bizObject.ContainChildObjects.length; i++) {
                result.push(...this.getChidrenObjectsValidations((/** @type {?} */ (bizObject.ContainChildObjects[i]))));
            }
        }
        return result;
    }
    /**
     * 获取所有操作
     * @param {?} be
     * @return {?}
     */
    getAllOperations(be) {
        /** @type {?} */
        const result = new Array();
        result.push(...this.getAllBizEntityActions(be));
        result.push(...this.getAllMgrActions(be));
        result.push(...this.getAllDeterminations(be));
        result.push(...this.getAllValidations(be));
        return result;
    }
    /**
     * validation触发字段中是否包含某字段
     * @param {?} be
     * @param {?} eleId 字段ID
     * @return {?}
     */
    countainValidationRequestElement(be, eleId) {
        /** @type {?} */
        const validations = this.getAllValidations(be);
        if (!!(validations) && validations.length > 0) {
            for (let i = 0; i < validations.length; i++) {
                /** @type {?} */
                const b = this.validationCountainRequestElement(validations[i], eleId);
                if (b) {
                    /** @type {?} */
                    const result = validations[i].Name;
                    return result;
                }
            }
        }
        return null;
    }
    /**
     * determination触发字段中是否包含某字段
     * @param {?} be
     * @param {?} eleId 字段ID
     * @return {?}
     */
    countainDeterminationRequestElement(be, eleId) {
        /** @type {?} */
        const dtms = this.getAllDeterminations(be);
        if (!!(dtms) && dtms.length > 0) {
            for (let i = 0; i < dtms.length; i++) {
                /** @type {?} */
                const b = this.determinationCountainRequestElement(dtms[i], eleId);
                if (b) {
                    /** @type {?} */
                    const result = dtms[i].Name;
                    return result;
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} id
     * @param {?} requestEles
     * @return {?}
     */
    countainEle(id, requestEles) {
        if (!!(id) && !!(requestEles) && requestEles.length > 0) {
            return requestEles.indexOf(id) >= 0;
        }
        return false;
    }
    /**
     * 触发字段中是否包含某字段
     * @param {?} dtm
     * @param {?} id
     * @return {?}
     */
    determinationCountainRequestElement(dtm, id) {
        if (this.countainEle(id, dtm.RequestElements)) {
            return true;
        }
        if (!!(dtm.RequestChildElements) && dtm.RequestChildElements.length > 0) {
            return this.countainEle(id, dtm.RequestChildElements[0].RequestChildElementValue);
        }
        return false;
    }
    /**
     * 触发字段中是否包含某字段
     * @param {?} validation
     * @param {?} id
     * @return {?}
     */
    validationCountainRequestElement(validation, id) {
        if (this.countainEle(id, validation.RequestElements)) {
            return true;
        }
        if (!!(validation.RequestChildElements) && validation.RequestChildElements.length > 0) {
            return this.countainEle(id, validation.RequestChildElements[0].RequestChildElementValue);
        }
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LogicDeleteControlInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { GSPBizEntityElement, GSPBizEntityObject, GSPBusinessEntity, AuthType, BECategories, BECategory, BEDeterminationType, BEOperationType, BETriggerTimePointType, BETriggerTimePointTypes, BEValidationType, GSPDataLockType, RequestNodeTriggerType, RequiredCheckOccasion, BizAction, BizOperation, Determination, Validation, BizMgrAction, BizActionBase, RequestChildElement, BizParameterBase, BizActionParameter, BizMgrActionParameter, BizParameterMode, BizParameterModes, BizParameterType, BizParameterTypes, BizReturnValue, BizVoidReturnType, BizCollectionParameterType, BizCollectionParameterTypes, ValidationTriggerPoint, AuthFieldActionInfo, AuthFieldInfo, AuthorizationInfo, BeOperationUtil, LogicDeleteControlInfo };

//# sourceMappingURL=gsp-bef-gsp-be-metadata.js.map