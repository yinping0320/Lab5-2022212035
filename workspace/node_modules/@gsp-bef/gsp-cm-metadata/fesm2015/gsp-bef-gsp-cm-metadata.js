/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonModelUtil {
    /**
     * @param {?} cm
     * @return {?}
     */
    static GetGeneratedConfigID(cm) {
        if (cm.IsUseNamespaceConfig) {
            return cm.GeneratingAssembly + '.' + cm.Code;
        }
        return cm.Code;
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} objId
     * @return {?}
     */
    static findObjectFromObjectByID(obj, objId) {
        /** @type {?} */
        let result = null;
        if (!obj) {
            return null;
        }
        if (obj.ID === objId) {
            return obj;
        }
        if (!obj.ContainChildObjects) {
            return null;
        }
        // 递归查找子节点
        if (obj.ContainChildObjects.length > 0) {
            for (let i = 0; i < obj.ContainChildObjects.length; i++) {
                if (obj.ContainChildObjects[i].ID === objId) {
                    result = obj.ContainChildObjects[i];
                    return result;
                }
                result = this.findObjectFromObjectByID(obj.ContainChildObjects[i], objId);
                if (result != null) {
                    return result;
                }
            }
        }
        return result;
    }
    /**
     * 根据objId查找对象
     * @param {?} cm
     * @param {?} objId
     * @return {?}
     */
    findObjectById(cm, objId) {
        /** @type {?} */
        let result = null;
        result = CommonModelUtil.findObjectFromObjectByID(cm.MainObject, objId);
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseConst {
}
BaseConst.ID = 'ID';
BaseConst.Name = 'Name';
BaseConst.Code = 'Code';
// 标签
BaseConst.BeLabel = 'BeLabel';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmElementConst extends BaseConst {
}
// 字段
CmElementConst.LabelID = 'LabelID';
CmElementConst.IsMultiLanguage = 'IsMultiLanguage';
CmElementConst.DefaultValue = 'DefaultValue';
CmElementConst.DefaultValueType = 'DefaultValueType';
CmElementConst.IsRequire = 'IsRequire';
CmElementConst.Readonly = 'Readonly';
CmElementConst.IsVirtual = 'IsVirtual';
// 数据类型
CmElementConst.MDataType = 'MDataType';
CmElementConst.Length = 'Length';
CmElementConst.Precision = 'Precision';
// 对象类型
CmElementConst.ObjectType = 'ObjectType';
CmElementConst.ContainEnumValues = 'ContainEnumValues';
CmElementConst.EnumIndexType = 'EnumIndexType';
CmElementConst.ChildAssociations = 'ChildAssociations';
// 业务字段
CmElementConst.IsUdt = 'IsUdt';
CmElementConst.UdtPkgName = 'UdtPkgName';
CmElementConst.UdtID = 'UdtID';
CmElementConst.UnifiedDataType = 'UnifiedDataType';
// static BelongObject = 'BelongObject';
// 关联
CmElementConst.KeyCollection = 'KeyCollection';
CmElementConst.RefElementCollection = 'RefElementCollection';
CmElementConst.BelongElement = 'BelongElement';
CmElementConst.RefModelID = 'RefModelID';
CmElementConst.RefModelName = 'RefModelName';
CmElementConst.RefModelCode = 'RefModelCode';
CmElementConst.RefModelPkgName = 'RefModelPkgName';
// 关联外键
CmElementConst.TargetElement = 'TargetElement';
CmElementConst.SourceElement = 'SourceElement';
CmElementConst.TargetElementDisplay = 'TargetElementDisplay';
CmElementConst.SourceElementDisplay = 'SourceElementDisplay';
CmElementConst.RefdataModelName = 'RefdataModelName';
// 编号规则
CmElementConst.BillCodeConfig = 'BillCodeConfig';
// 动态属性集合
CmElementConst.DynamicPropSetInfo = 'DynamicPropSetInfo';
// static EnableDynamicProp = 'EnableDynamicProp';
CmElementConst.DynamicPropRepositoryComp = 'DynamicPropRepositoryComp';
CmElementConst.DynamicPropSerializerComp = 'DynamicPropSerializerComp';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmConst extends BaseConst {
}
// 模型
CmConst.MainObject = 'MainObject';
CmConst.ComponentAssemblyName = 'ComponentAssemblyName';
CmConst.AssemblyName = 'AssemblyName';
CmConst.GeneratingAssembly = 'GeneratingAssembly';
// 权限
CmConst.Authorizations = 'Authorizations';
// 依赖be
CmConst.Category = 'Category';
CmConst.DependentEntityId = 'DependentEntityId';
CmConst.DependentEntityName = 'DependentEntityName';
CmConst.DependentEntityPackageName = 'DependentEntityPackageName';
// 生成时间戳字段
CmConst.IsUsingTimeStamp = 'IsUsingTimeStamp';
// 变量
CmConst.Variables = 'Variables';
// 操作
CmConst.Description = 'Description';
CmConst.RequestElements = 'RequestElements';
CmConst.IsGenerateComponent = 'IsGenerateComponent';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmObjectConst extends BaseConst {
}
// 对象
// static ParentObject = 'ParentObject';
CmObjectConst.ContainChildObjects = 'ContainChildObjects';
CmObjectConst.ContainElements = 'ContainElements';
CmObjectConst.ParentObjectID = 'ParentObjectID';
CmObjectConst.ObjectType = 'ObjectType';
CmObjectConst.IsVirtual = 'IsVirtual';
// 唯一性约束
CmObjectConst.ContainConstraints = 'ContainConstraints';
CmObjectConst.ConstraintMessage = 'ConstraintMessage';
CmObjectConst.Type = 'Type';
CmObjectConst.ElementList = 'ElementList';
// 权限
CmObjectConst.AuthFieldInfos = 'AuthFieldInfos';
CmObjectConst.MdRefInfo_ID = 'ID';
CmObjectConst.MdRefInfo_Name = 'Name';
// 操作
CmObjectConst.DtmBeforeSave = 'DtmBeforeSave';
CmObjectConst.DtmAfterModify = 'DtmAfterModify';
CmObjectConst.DtmAfterCreate = 'DtmAfterCreate';
/**
 * 持久化构件
 */
CmObjectConst.RepositoryComps = 'RepositoryComps';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 节点元数据
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 节点元数据
 */
class GspCommonDataType {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段数据类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const GSPElementDataType = {
    /**
     * 文本
     */
    String: 'String',
    /**
     * 备注
     */
    Text: 'Text',
    /**
     * 整数
     */
    Integer: 'Integer',
    /**
     * 浮点数
     */
    Decimal: 'Decimal',
    /**
     * 布尔型
     */
    Boolean: 'Boolean',
    /**
     * 日期型
     */
    Date: 'Date',
    /**
     * 日期时间型
     */
    DateTime: 'DateTime',
    /**
     * 二进制
     */
    Binary: 'Binary',
};
/** @type {?} */
const GSPElementDataTypes = [
    {
        index: 0, text: '文本', value: GSPElementDataType.String, canChangeLength: true,
        canChangePresicion: false, length: 36, precision: 0
    },
    {
        index: 1, text: '备注', value: GSPElementDataType.Text, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 2, text: '整数', value: GSPElementDataType.Integer, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 3, text: '浮点数字', value: GSPElementDataType.Decimal, canChangeLength: true,
        canChangePresicion: true, length: 18, precision: 2
    },
    {
        index: 4, text: '布尔型', value: GSPElementDataType.Boolean, canChangeLength: false,
        canChangePresicion: false, length: 1, precision: 0
    },
    {
        index: 5, text: '日期', value: GSPElementDataType.Date, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 6, text: '日期时间', value: GSPElementDataType.DateTime, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 7, text: '二进制', value: GSPElementDataType.Binary, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    }, {
        index: 8, text: '业务字段', value: 'UnifiedDataType', canChangeLength: false,
        canChangePresicion: false, length: 36, precision: 0
    }
];
class GetDataTypesUtil {
    /**
     * @return {?}
     */
    static GSPElementDataTypesWithouUdt() {
        /** @type {?} */
        let types = new Array();
        Object.assign(types, GSPElementDataTypes);
        types = types.slice(0, 8);
        return types;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const GSPElementObjectType = {
    /**
     * 未设置
     */
    None: 'None',
    /**
     * 关联
     */
    Association: 'Association',
    /**
     * 枚举
     */
    Enum: 'Enum',
    /**
     * 动态属性
     */
    DynamicProp: 'DynamicProp',
};
/** @type {?} */
const GSPElementObjectTypes = [
    { index: 0, text: '无', value: GSPElementObjectType.None },
    { index: 1, text: '关联', value: GSPElementObjectType.Association },
    { index: 2, text: '枚举', value: GSPElementObjectType.Enum },
    { index: 3, text: '动态属性', value: GSPElementObjectType.DynamicProp },
];
class GetElementObjTypesUtil {
    /**
     * @return {?}
     */
    static GSPElementObjectTypesWithouDynamic() {
        /** @type {?} */
        let types = new Array();
        Object.assign(types, GSPElementObjectTypes);
        types = types.slice(0, 3);
        return types;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段定义
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 字段定义
 */
class GspCommonField {
    constructor() {
        /**
         * 字段数据类型(默认string)
         */
        this.MDataType = GSPElementDataType.String;
        /**
         * 字段对象类型(默认None)
         */
        this.ObjectType = GSPElementObjectType.None;
    }
    // private _childAssociations: GSPAssociation[];
    // get ChildAssociations() { if (!this._childAssociations)
    // { this._childAssociations = Array<GSPAssociation>() } return this._childAssociations; }
    // set ChildAssociations(value: GSPAssociation[]) { this._childAssociations = value; }
    /**
     * 包含的关联列表中是否存在关联
     * @return {?}
     */
    get HasAssociation() {
        if (this.ChildAssociations) {
            return this.ChildAssociations.length > 0;
        }
        else {
            return false;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 外键约束类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const ForeignKeyConstraintType = {
    /**
     * 禁用
     */
    Forbid: 0,
    /**
     * 启用
     */
    Permit: 1,
};
ForeignKeyConstraintType[ForeignKeyConstraintType.Forbid] = 'Forbid';
ForeignKeyConstraintType[ForeignKeyConstraintType.Permit] = 'Permit';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 关联关系
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 关联关系
 */
class CefGSPAssociation {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 关联外键
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 关联外键
 */
class GSPAssociationKey {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 删除规则类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const GSPDeleteRuleType = {
    /**
     * 拒绝删除
     */
    Refuse: 0,
    /**
     * 允许删除
     */
    Allow: 1,
};
GSPDeleteRuleType[GSPDeleteRuleType.Refuse] = 'Refuse';
GSPDeleteRuleType[GSPDeleteRuleType.Allow] = 'Allow';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量字段数据类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const GSPVmVarDataType = {
    /**
     * 文本
     */
    String: 'String',
    /**
     * 备注
     */
    Text: 'Text',
    /**
     * 整数
     */
    Integer: 'Integer',
    /**
     * 浮点数
     */
    Decimal: 'Decimal',
    /**
     * 布尔型
     */
    Boolean: 'Boolean',
    /**
     * 日期型
     */
    Date: 'Date',
    /**
     * 日期时间型
     */
    DateTime: 'DateTime',
    /**
     * 二进制
     */
    Binary: 'Binary',
};
/** @type {?} */
const GSPVmVarDataTypes = [
    {
        index: 0, text: '文本', value: GSPVmVarDataType.String, canChangeLength: true,
        canChangePresicion: false, length: 36, precision: 0
    },
    {
        index: 1, text: '备注', value: GSPVmVarDataType.Text, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 2, text: '整数', value: GSPVmVarDataType.Integer, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 3, text: '浮点数字', value: GSPVmVarDataType.Decimal, canChangeLength: true,
        canChangePresicion: true, length: 18, precision: 2
    },
    {
        index: 4, text: '布尔型', value: GSPVmVarDataType.Boolean, canChangeLength: false,
        canChangePresicion: false, length: 1, precision: 0
    },
    {
        index: 5, text: '日期', value: GSPVmVarDataType.Date, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 6, text: '日期时间', value: GSPVmVarDataType.DateTime, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    },
    {
        index: 7, text: '二进制', value: GSPVmVarDataType.Binary, canChangeLength: false,
        canChangePresicion: false, length: 0, precision: 0
    }
    // , {
    //     index: 8, text: '业务字段', value: 'UnifiedDataType', canChangeLength: false,
    //     canChangePresicion: false, length: 36, precision: 0
    // }
];
class GetVariableDataTypesUtil {
    /**
     * @return {?}
     */
    static GSPElementDataTypesWithouUdt() {
        /** @type {?} */
        let types = new Array();
        Object.assign(types, GSPVmVarDataTypes);
        types = types.slice(0, 8);
        return types;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 枚举
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 枚举
 */
class GSPEnumValue {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 联接方式
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const JoinMode = {
    /**
     * 内联接
     */
    InnerJoin: 0,
    /**
     * 外联接
     */
    OuterJoin: 1,
};
JoinMode[JoinMode.InnerJoin] = 'InnerJoin';
JoinMode[JoinMode.OuterJoin] = 'OuterJoin';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 动态属性集合构件
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 动态属性集合构件
 */
class MdRefInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 动态属性信息
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 动态属性信息
 */
class DynamicPropSetInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* BE操作基类.
* BE操作，是基于服务端业务逻辑构件的，每个操作都是其中的一个方法。
* 但BE对用户隐藏了该层关系，即让用户感觉不到后台构件的存在。
* 应该确保BE操作的Code、Name与Method的Code、Name的一致。
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * BE操作基类.
 * BE操作，是基于服务端业务逻辑构件的，每个操作都是其中的一个方法。
 * 但BE对用户隐藏了该层关系，即让用户感觉不到后台构件的存在。
 * 应该确保BE操作的Code、Name与Method的Code、Name的一致。
 */
class CommonOperation {
    constructor() {
        // /**
        //  * 是否可见
        //  */
        // public IsVisible: boolean;
        // /**
        //  * 操作类型
        //  */
        // public OpType: BEOperationType;
        /**
             * 所属的Node节点
             */
        // public Owner: GSPCommonObject;
        // /**
        //  * 所属扩展模型元数据ID
        //  */
        // public BelongModelID: string;
        // /**
        //  * 是否引用
        //  */
        // public IsRef: boolean;
        /**
         * 是否生成构件
         */
        this.IsGenerateComponent = true;
        // this.ID = Guid.newGuid().toString();
        // this.IsRef = false;
        // this.IsGenerateComponent = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 联动规则元数据定义
* @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 联动规则元数据定义
 *
 */
class CommonDetermination extends CommonOperation {
    constructor() {
        super();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
* 触发时机，供Validation、Determination共用。
* @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const ExecutingDataStatus = {
    /**
     * 不执行
     */
    None: 0,
    /**
     * 实例创建时执行
     */
    Created: 1,
    /**
     * 实例更新时执行
     */
    Updated: 2,
    /**
     * 实例删除时执行
     */
    Deleted: 4,
};
ExecutingDataStatus[ExecutingDataStatus.None] = 'None';
ExecutingDataStatus[ExecutingDataStatus.Created] = 'Created';
ExecutingDataStatus[ExecutingDataStatus.Updated] = 'Updated';
ExecutingDataStatus[ExecutingDataStatus.Deleted] = 'Deleted';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段定义
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 字段定义
 */
class GSPCommonElement extends GspCommonField {
    constructor() {
        super();
        /**
         * 字段对象类型(默认None)
         */
        this.ObjectType = GSPElementObjectType.None;
        // this.ID = Guid.newGuid();
        this.Length = 36;
        this.Precision = 0;
        this.MDataType = GSPElementDataType.String;
        this.ObjectType = GSPElementObjectType.None;
        this.IsMultiLanguage = false;
        this.IsRequire = false;
        this.IsRef = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 通用模型，作为业务实体，视图模型和数据模型的总接口，用于规划实体数据结构
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 通用模型，作为业务实体，视图模型和数据模型的总接口，用于规划实体数据结构
 */
class GSPCommonModel {
    // /**
    //  * 根据elementId查找字段
    //  * @param id
    //  */
    // public findElementById(elementId: string): IGSPCommonElement {
    //     let result: IGSPCommonElement = null;
    //     result = this.findElementFromObjectByID(this.MainObject, elementId);
    //     return result;
    // }
    /**
     * 根据objId查找对象
     * @param {?} objId
     * @return {?}
     */
    findObjectById(objId) {
        /** @type {?} */
        let result = null;
        result = this.findObjectFromObjectByID(this.MainObject, objId);
        return result;
    }
    // // public getAllObjectList(): IGSPCommonObject[] {
    // //     throw new Error('Method not implemented.');
    // // }
    // public getAllElementList(): IGSPCommonElement[] {
    //     return this.MainObject.getAllObjectElement();
    // }
    // private findElementFromObjectByID(obj: IGSPCommonObject, id: string): IGSPCommonElement {
    //     let result: IGSPCommonElement = null;
    //     //查找当前节点字段集合
    //     for (let i = 0; i < obj.ContainElements.length; i++) {
    //         if (obj.ContainElements[i].ID == id) {
    //             result = obj.ContainElements[i];
    //             return result;
    //         }
    //     }
    //     //递归查找子节点
    //     if (obj.ContainChildObjects.length > 0) {
    //         for (let i = 0; i < obj.ContainChildObjects.length; i++) {
    //             result = this.findElementFromObjectByID(obj.ContainChildObjects[i], id);
    //             if (result != null) {
    //                 return result;
    //             }
    //         }
    //     }
    //     return result;
    // }
    // private findElementFromElementByID(ele: IGSPCommonElement, eleId: string): IGSPCommonElement {
    //     let result: IGSPCommonElement = null;
    //     if (ele.ID == eleId) {
    //         result = ele;
    //     }
    //     else {
    //         //查找所有关联字段及关联的关联字段……
    //         if (ele.HasAssociation) {
    //             for (let i = 0; i < ele.ChildAssociations.length; i++) {
    //                 let asscociation = ele.ChildAssociations[i];
    //                 for (let j = 0; j < asscociation.RefElementCollection.length; j++) {
    //                     let element = this.findElementFromElementByID(asscociation.RefElementCollection[i], eleId);
    //                     if (element != null) {
    //                         result = element;
    //                         return result;
    //                     }
    //                 }
    //             }
    //         }
    //     }
    //     return result;
    // }
    /**
     * @private
     * @param {?} obj
     * @param {?} objId
     * @return {?}
     */
    findObjectFromObjectByID(obj, objId) {
        /** @type {?} */
        let result = null;
        if (!obj) {
            return null;
        }
        if (obj.ID === objId) {
            return obj;
        }
        if (!obj.ContainChildObjects) {
            return null;
        }
        // 递归查找子节点
        if (obj.ContainChildObjects.length > 0) {
            for (let i = 0; i < obj.ContainChildObjects.length; i++) {
                if (obj.ContainChildObjects[i].ID === objId) {
                    result = obj.ContainChildObjects[i];
                    return result;
                }
                result = this.findObjectFromObjectByID(obj.ContainChildObjects[i], objId);
                if (result != null) {
                    return result;
                }
            }
        }
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 节点元数据
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 节点元数据
 */
class GSPCommonObject extends GspCommonDataType {
    /**
     * 当前节点主键字段
     * @return {?}
     */
    get IDElement() {
        if (this.ColumnGenerateID != null) {
            return this.ContainElements.find((/**
             * @param {?} ele
             * @return {?}
             */
            ele => ele.ID === this.ColumnGenerateID.ElementID));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 外键约束关系
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 外键约束关系
 * @abstract
 */
class Constraint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 外键约束关系
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 外键约束关系
 * @template FKeyResourceType, RefResourceType
 */
class ForeignKeyConstraint extends Constraint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 关联外键约束
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 关联外键约束
 */
class RelationForeignKeyConstraint extends ForeignKeyConstraint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 约束信息
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 约束信息
 * @abstract
 */
class Resource {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 关联约束信息
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 关联约束信息
 */
class RelationResource extends Resource {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 代码生成类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const GSPBillCodeGenerateType = {
    /**
     * 未设置
     */
    none: 0,
    /**
     * 系统生成
     */
    genersoft: 1,
    /**
     * 手工生成
     */
    hand: 2,
    /**
     * 自增
     */
    increment: 3,
};
GSPBillCodeGenerateType[GSPBillCodeGenerateType.none] = 'none';
GSPBillCodeGenerateType[GSPBillCodeGenerateType.genersoft] = 'genersoft';
GSPBillCodeGenerateType[GSPBillCodeGenerateType.hand] = 'hand';
GSPBillCodeGenerateType[GSPBillCodeGenerateType.increment] = 'increment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 代码生成规则执行时机
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const GSPBillCodeGenerateOccasion = {
    /**
     * 系统定义
     */
    SystemProcess: 'SystemProcess',
    /**
     * 创建时
     */
    CreatingTime: 'CreatingTime',
    /**
     * 保存时
     */
    SavingTime: 'SavingTime',
    /**
     * 创建和保存时
     */
    BothCreatingAndSaving: 'BothCreatingAndSaving',
};
/** @type {?} */
const GSPBillCodeGenerateOccasions = [
    { text: '系统处理', value: GSPBillCodeGenerateOccasion.SystemProcess },
    { text: '创建时', value: GSPBillCodeGenerateOccasion.CreatingTime },
    { text: '保存时', value: GSPBillCodeGenerateOccasion.SavingTime },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 编码规则配置
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 编码规则配置
 */
class ElementCodeRuleConfig {
    constructor() {
        this.CanBillCode = false;
        this.BillCodeID = '';
        this.BillCodeName = '';
        this.CodeGenerateType = GSPBillCodeGenerateType.none;
        this.CodeGenerateOccasion = GSPBillCodeGenerateOccasion.SystemProcess;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段默认值类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const ElementDefaultVauleType = {
    /**
     * 值类型
     */
    Value: 0,
    /**
     * 表达式类型
     */
    Expression: 1,
};
ElementDefaultVauleType[ElementDefaultVauleType.Value] = 'Value';
ElementDefaultVauleType[ElementDefaultVauleType.Expression] = 'Expression';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段分级码生成时机
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const ElementPathGenerateType = {
    /**
     * 创建时
     */
    CreateNode: 'CreateNode',
    /**
     * 保存时
     */
    SaveNode: 'SaveNode',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 关联关系
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 关联关系
 */
class GSPAssociation extends CefGSPAssociation {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 约束类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const ConstraintType = {
    /**
     * 唯一约束
     */
    Unique: 0,
};
ConstraintType[ConstraintType.Unique] = 'Unique';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段生成规则
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 字段生成规则
 */
class GSPColumnGenerate {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 节点类型
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {number} */
const GSPCommonObjectType = {
    /**
     * 主节点
     */
    MainObject: 0,
    /**
     * 非主节点
     */
    ChildObject: 1,
};
GSPCommonObjectType[GSPCommonObjectType.MainObject] = 'MainObject';
GSPCommonObjectType[GSPCommonObjectType.ChildObject] = 'ChildObject';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 分级信息
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 分级信息
 */
class GSPHirarchyInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 唯一约束
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 唯一约束
 */
class GSPUniqueConstraint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量来源
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/** @enum {string} */
const VariableSourceType = {
    /**
     * BE
     */
    BE: 'BE',
    /**
     * VO
     */
    VO: 'VO',
    /**
     * 上下文
     */
    Context: 'Context',
};
/** @type {?} */
const VariableSourceTypes = [
    { index: 0, text: 'BE', value: VariableSourceType.BE },
    { index: 1, text: 'VO', value: VariableSourceType.VO },
    { index: 2, text: 'Context', value: VariableSourceType.Context }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量定义
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 变量定义
 */
class CommonVariable extends GspCommonField {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量实体定义
 * @author wangjiegj<wangjiegj@inspur.com>
 */
/**
 * 变量实体定义
 */
class CommonVariableEntity extends GspCommonDataType {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VersionControlInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const EnumIndexType = {
    /**
     * 整型
     */
    Integer: 0,
    /**
     * 字符串
     */
    String: 1,
};
EnumIndexType[EnumIndexType.Integer] = 'Integer';
EnumIndexType[EnumIndexType.String] = 'String';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CommonModelUtil, BaseConst, CmElementConst, CmConst, CmObjectConst, GSPCommonElement, GSPCommonModel, GSPCommonObject, Constraint, ForeignKeyConstraint, RelationForeignKeyConstraint, RelationResource, Resource, ElementCodeRuleConfig, ElementDefaultVauleType, ElementPathGenerateType, GSPBillCodeGenerateOccasion, GSPBillCodeGenerateOccasions, GSPBillCodeGenerateType, GSPAssociation, ConstraintType, GSPColumnGenerate, GSPCommonObjectType, GSPHirarchyInfo, GSPUniqueConstraint, VariableSourceType, VariableSourceTypes, CommonVariable, CommonVariableEntity, VersionControlInfo, GspCommonDataType, GspCommonField, ForeignKeyConstraintType, CefGSPAssociation, GSPAssociationKey, GSPDeleteRuleType, GSPElementDataType, GSPElementDataTypes, GetDataTypesUtil, GSPVmVarDataType, GSPVmVarDataTypes, GetVariableDataTypesUtil, GetElementObjTypesUtil, GSPElementObjectType, GSPElementObjectTypes, GSPEnumValue, EnumIndexType, JoinMode, MdRefInfo, DynamicPropSetInfo, CommonDetermination, CommonOperation, ExecutingDataStatus };

//# sourceMappingURL=gsp-bef-gsp-cm-metadata.js.map