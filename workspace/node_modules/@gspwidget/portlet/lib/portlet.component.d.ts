import { HttpClient } from '@angular/common/http';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DatasetRepo, EppPortlet, LinkMap, PortletRepo } from '@gspwidget/util';
import { GetDataOptions, WidgetComponent } from '@gspwidget/widget-core';
import { Observable } from 'rxjs';
export declare class PortletComponent implements OnInit, OnChanges {
    private portletRepo;
    private dataResultsetRepo;
    private http;
    private cd;
    /**
     * 下面两者任意一个必选
     * 哪个变化后有值，就用哪个
     */
    portletId: string;
    portlet: EppPortlet;
    /** 筛选条件 */
    queryConditions: QueryCondition[];
    portletNamesUsingDemoData: string[];
    getCustomizedData: () => Observable<any>;
    instanceId: string;
    linkMap: LinkMap;
    init: EventEmitter<{}>;
    /** 获取到 portlet 元数据事件，将 portlet 传出 */
    gotPortlet: EventEmitter<EppPortlet>;
    widget: WidgetComponent;
    /** 通过外部输入计算得到的真正渲染的 portlet */
    innerPortlet: EppPortlet;
    constructor(portletRepo: PortletRepo, dataResultsetRepo: DatasetRepo, http: HttpClient, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getData: (getDataOpts: GetDataOptions) => Observable<any>;
    getDataWithDims: () => void;
    handleWidgetInit(): void;
    /** 获取演示数据 */
    getDemoData(): Observable<any>;
    getHomeConfig(): Observable<any>;
}
export declare class QueryCondition {
    id: string;
    leftBrackets: string;
    fieldCode: string;
    fieldName: string;
    name: string;
    compareType: CompareType;
    valueType: ValueType;
    /**
     * 值
     * 该属性为IValue接口，根据不同的控件类型有不同的实现类：具体如下：
     * 1. 文本类型：TextValue
     * 2. 下拉列表：DropDownListValue
     * 3. 日期区间：DateRangeValue
     * 4. 数字区间：NumberRangeValue
     * 5. 帮助类型：SmartHelpValue
     */
    value: IValue;
    rightBrackets: string;
    relationType: RelationType;
    /**
     * 控件类型，目前包括文本类型，下拉列表，日期区间，数字区间，帮助类型
     * 控件类型为IControl接口，根据不同的控件类型对应不同的实现类，具体如下：
     * 1. 文本类型：TextControl
     * 2. 下拉列表：DropDownListControl
     * 3. 日期区间：DateRangeControl
     * 4. 数字区间：NumberRangeControl
     * 5. 帮助类型：SmartHelpContol
     */
    control: IControl;
}
export declare enum CompareType {
    Equal = 0,
    GreaterThan = 2,
    GreaterThanOrEqual = 3,
    LessThan = 4,
    LessThanOrEqual = 5,
    BetWeen = 6
}
export declare enum ValueType {
    Value = 0,
    SmartHelp = 1,
    Enum = 2,
    Express = 3
}
export interface IValue {
    getControlType(): ControlType;
    getOriginalValue(): any;
    setOriginalValue(value: any): void;
    clearValue(): void;
    isEmpty(): boolean;
}
export declare enum RelationType {
    And = 0,
    Or = 1
}
export interface IControl {
    /**
     * 是否是展示在扩展区域内的
     */
    isExtend: boolean;
    required: boolean;
    /** 日期需要增加类型比较 */
    compareType?: CompareType;
    /**
     * 获取控件类型
     */
    getControlType(): ControlType;
}
export declare enum ControlType {
    Text = 0,
    Help = 1,
    DropDown = 2,
    DateRange = 3,
    NumberRange = 4,
    Search = 5,
    Date = 6,
    CheckboxGroup = 7,
    DateRangeTime = 8
}
