/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { WidgetContainerMode } from '@gspwidget/util';
import { appendScript } from '@gspwidget/util';
import { WidgetPropertyService, WidgetRegistry } from '@gspwidget/widget-devkit';
import * as AngularCommon from '@angular/common';
import * as AngularCommonHttp from '@angular/common/http';
import * as AngularCore from '@angular/core';
import * as AngularForms from '@angular/forms';
import * as AngularPlatformBrowser from '@angular/platform-browser';
import * as AngularPlatformBrowserAnimations from '@angular/platform-browser/animations';
import * as AngularPlatformBrowserDynamic from '@angular/platform-browser-dynamic';
import * as AngularRouter from '@angular/router';
import * as AngularAnimations from '@angular/animations';
import * as AngularAnimationsBrowser from '@angular/animations/browser';
import * as NgxTranslateCore from '@ngx-translate/core';
import * as NgxTranslateHttpLoader from '@ngx-translate/http-loader';
// import * as PortletModule from '@gspwidget/portlet';
import * as WidgetCoreModule from '../public-api';
import * as WidgetDevkitModule from '@gspwidget/widget-devkit';
import * as UtilModule from '@gspwidget/util';
import { IGIX_HOME_PATH } from '@gspwidget/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@gspwidget/widget-devkit";
// import * as UtilModule from '@gspwidget/util';
// import * as GridsterModule from '@gspwidget/gridster';
// declare var System
/* iGIX 内 systemjs 暂时是 3.x */
if (!window.define) {
    appendScript(`${IGIX_HOME_PATH}assets/amd.6.js`);
}
/** @type {?} */
let sys;
export class DynamicLoaderService {
    /**
     * @param {?} injector
     * @param {?} http
     * @param {?} componentFactoryResolver
     * @param {?} widgetProperty
     */
    constructor(injector, http, componentFactoryResolver, widgetProperty) {
        this.injector = injector;
        this.http = http;
        this.componentFactoryResolver = componentFactoryResolver;
        this.widgetProperty = widgetProperty;
        /**
         * 为了避免 ng serve 时，webpack 会把 system.import
         * 拦截为自身的实现，无法满足现在的绝对地址加载
         */
        sys = window['System'];
        this.initSystemjsPromise = this.initSystemjs();
    }
    /**
     * @return {?}
     */
    initSystemjs() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            sys.set('lib:@angular/common', AngularCommon);
            sys.set('lib:@angular/common/http', AngularCommonHttp);
            sys.set('lib:@angular/core', AngularCore);
            sys.set('lib:@angular/forms', AngularForms);
            sys.set('lib:@angular/platform-browser', AngularPlatformBrowser);
            sys.set('lib:@angular/platform-browser/animations', AngularPlatformBrowserAnimations);
            sys.set('lib:@angular/platform-browser-dynamic', AngularPlatformBrowserDynamic);
            sys.set('lib:@angular/router', AngularRouter);
            sys.set('lib:@angular/animations', AngularAnimations);
            sys.set('lib:@angular/animations/browser', AngularAnimationsBrowser);
            sys.set('lib:@ngx-translate/core', NgxTranslateCore);
            sys.set('lib:@ngx-translate/http-loader', NgxTranslateHttpLoader);
            // sys.set('lib:@gspwidget/portlet', PortletModule)
            sys.set('lib:@gspwidget/widget-core', WidgetCoreModule);
            sys.set('lib:@gspwidget/widget-devkit', WidgetDevkitModule);
            sys.set('lib:@gspwidget/util', UtilModule);
            // sys.set('lib:@gspwidget/gridster', GridsterModule)
        });
    }
    /**
     * 加载元部件文件，并获取 widget 的详细信息供外面用
     * @param {?} widgetInfo
     * @param {?} rawPropValues
     * @param {?} mode
     * @return {?}
     */
    loadWidget(widgetInfo, rawPropValues, mode) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { name: widgetName } = widgetInfo;
            /** @type {?} */
            let widgetCompFactory;
            /** @type {?} */
            let widgetModuleFactory;
            switch (mode) {
                case WidgetContainerMode.AOT:
                    // 加载 widget js 文件
                    yield this.initSystemjsPromise;
                    /** @type {?} */
                    const systemModule = yield sys.import(`${((/** @type {?} */ (widgetInfo))).href}?v=${widgetInfo.version}`);
                    this.fixCompFacError(systemModule);
                    // 加载完成后，获取 widget 的详细信息供外面用
                    widgetCompFactory = getWidgetComponentFactory(widgetName, systemModule);
                    widgetModuleFactory = getModuleFactoryAot(systemModule);
                    break;
                case WidgetContainerMode.DEV:
                    widgetCompFactory = this.componentFactoryResolver.resolveComponentFactory(((/** @type {?} */ (widgetInfo))).widgetComponent);
                    break;
            }
            /** @type {?} */
            const widgetConfig = WidgetRegistry.getWidgetByName(widgetName);
            /** @type {?} */
            const properties = this.widgetProperty.getWidgetProps(widgetName, widgetConfig);
            /** @type {?} */
            const propValues = this.widgetProperty.mixinWidgetPropValues(properties, rawPropValues);
            return {
                widgetCompFactory,
                widgetModuleFactory,
                properties,
                propValues,
                widgetConfig,
            };
        });
    }
    /**
     * TODO:
     * 白萌提的问题，去掉试试，拿他的元部件试试。怀疑是之前一直没传入 module 的原因。
     * 修复元部件依赖的第三方组件中 this.componentFactoryResolver.resolveComponentFactory
     * 找不到第三方组件的 ComponentFactory 的问题，
     * 如 nz RateComponent 找不到 toolTipComponent
     * @param {?} systemModule
     * @return {?}
     */
    fixCompFacError(systemModule) {
        Object.keys(systemModule)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        key => key.endsWith('ModuleNgFactory')))
            .forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            try {
                const { _factories } = systemModule[key].create(this.injector).componentFactoryResolver;
                _factories.forEach((/**
                 * @param {?} iFactory
                 * @return {?}
                 */
                iFactory => {
                    // @ts-ignore
                    this.componentFactoryResolver._factories.set(iFactory.componentType, iFactory);
                }));
            }
            catch (err) { }
        }));
    }
}
DynamicLoaderService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DynamicLoaderService.ctorParameters = () => [
    { type: Injector },
    { type: HttpClient },
    { type: ComponentFactoryResolver },
    { type: WidgetPropertyService }
];
/** @nocollapse */ DynamicLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function DynamicLoaderService_Factory() { return new DynamicLoaderService(i0.inject(i0.INJECTOR), i0.inject(i1.HttpClient), i0.inject(i0.ComponentFactoryResolver), i0.inject(i2.WidgetPropertyService)); }, token: DynamicLoaderService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicLoaderService.prototype.initSystemjsPromise;
    /**
     * @type {?}
     * @private
     */
    DynamicLoaderService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DynamicLoaderService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DynamicLoaderService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    DynamicLoaderService.prototype.widgetProperty;
}
/**
 * @param {?} widgetName
 * @param {?} systemModule
 * @return {?}
 */
function getWidgetComponentFactory(widgetName, systemModule) {
    /** @type {?} */
    const componentType = WidgetRegistry.getWidgetByName(widgetName).ctor;
    if (componentType) {
        return Object.values(systemModule)
            .find((/**
         * @param {?} fac
         * @return {?}
         */
        (fac) => fac.componentType === componentType));
    }
}
/**
 * @param {?} systemModule
 * @return {?}
 */
function getModuleFactoryAot(systemModule) {
    /** @type {?} */
    const key = Object
        .keys(systemModule)
        .find((/**
     * @param {?} k
     * @return {?}
     */
    k => k.endsWith('ModuleNgFactory')));
    return (/** @type {?} */ (systemModule[key]));
}
//# sourceMappingURL=data:application/json;base64,