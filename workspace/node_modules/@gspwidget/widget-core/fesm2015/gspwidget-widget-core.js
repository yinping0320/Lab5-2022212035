import { NzAutocompleteModule } from 'ng-zorro-antd/auto-complete';
import { AccordionModule } from 'ngx-bootstrap/accordion';
import { ColorPickerModule } from 'ngx-color-picker';
import { NzModalService, NzModalModule } from 'ng-zorro-antd/modal';
import ResizeObserver from 'resize-observer-polyfill';
import { delay } from 'rxjs/operators';
import { __awaiter } from 'tslib';
import * as AngularCommonHttp from '@angular/common/http';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import * as AngularPlatformBrowser from '@angular/platform-browser';
import * as AngularPlatformBrowserAnimations from '@angular/platform-browser/animations';
import * as AngularPlatformBrowserDynamic from '@angular/platform-browser-dynamic';
import * as AngularRouter from '@angular/router';
import * as AngularAnimations from '@angular/animations';
import * as AngularAnimationsBrowser from '@angular/animations/browser';
import * as NgxTranslateHttpLoader from '@ngx-translate/http-loader';
import * as UtilModule$1 from '@gspwidget/util';
import { WidgetContainerMode, appendScript, PlThemeColors, UtilModule, loadCommonStyleNTheme, EppPortlet, IGIX_HOME_PATH, FILTERS_WIDGET_PROP_NAME, FILTERS_WIDGET_NAME, RuntimeAggOption, deepClone, Indicator, ArrUtil, objectLiteralEqual } from '@gspwidget/util';
import * as WidgetDevkitModule$1 from '@gspwidget/widget-devkit';
import { WidgetPropertyService, WidgetRegistry, WidgetDevkitModule, FILTER_PROP_NAME, FilterSchema, WidgetInstanceInfo, WidgetDataService, WidgetEventService, JumpTypes, isFsFlat, ifFsDateRange, WidgetDevkitService, FSEnum } from '@gspwidget/widget-devkit';
import * as NgxTranslateCore from '@ngx-translate/core';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import * as AngularForms from '@angular/forms';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { NzDatePickerModule } from 'ng-zorro-antd/date-picker';
import * as AngularCommon from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { ComponentFactoryResolver, Injectable, Injector, NgModule, Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, Pipe, defineInjectable, ChangeDetectorRef, ViewChild, ViewContainerRef, inject, INJECTOR } from '@angular/core';
import { NzDropDownModule } from 'ng-zorro-antd/dropdown';
import { NzSelectModule } from 'ng-zorro-antd/select';
import { NzInputModule } from 'ng-zorro-antd/input';

var WidgetCoreModule$1 = /*#__PURE__*/Object.freeze({
    get WidgetCoreModule () { return WidgetCoreModule; },
    get WCStatus () { return WCStatus; },
    get WidgetComponent () { return WidgetComponent; },
    get DynamicLoaderService () { return DynamicLoaderService$$1; },
    get FilterModule () { return FilterModule; },
    get FilterComponent () { return FilterComponent; },
    get ColValuesPipe () { return ColValuesPipe; },
    get isWidgetRuntimeAggActive () { return isWidgetRuntimeAggActive; },
    get chartAggFieldMap () { return chartAggFieldMap; },
    get FlatSelectComponent () { return FlatSelectComponent; },
    get FlatSelectModule () { return FlatSelectModule; },
    get TitleBarComponent () { return TitleBarComponent; },
    get InstanceService () { return InstanceService; }
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import * as UtilModule from '@gspwidget/util';
// import * as GridsterModule from '@gspwidget/gridster';
// declare var System
/* iGIX 内 systemjs 暂时是 3.x */
if (!window.define) {
    appendScript(`${IGIX_HOME_PATH}assets/amd.6.js`);
}
/** @type {?} */
let sys;
class DynamicLoaderService$$1 {
    /**
     * @param {?} injector
     * @param {?} http
     * @param {?} componentFactoryResolver
     * @param {?} widgetProperty
     */
    constructor(injector, http, componentFactoryResolver, widgetProperty) {
        this.injector = injector;
        this.http = http;
        this.componentFactoryResolver = componentFactoryResolver;
        this.widgetProperty = widgetProperty;
        /**
         * 为了避免 ng serve 时，webpack 会把 system.import
         * 拦截为自身的实现，无法满足现在的绝对地址加载
         */
        sys = window['System'];
        this.initSystemjsPromise = this.initSystemjs();
    }
    /**
     * @return {?}
     */
    initSystemjs() {
        return __awaiter(this, void 0, void 0, function* () {
            sys.set('lib:@angular/common', AngularCommon);
            sys.set('lib:@angular/common/http', AngularCommonHttp);
            sys.set('lib:@angular/core', i0);
            sys.set('lib:@angular/forms', AngularForms);
            sys.set('lib:@angular/platform-browser', AngularPlatformBrowser);
            sys.set('lib:@angular/platform-browser/animations', AngularPlatformBrowserAnimations);
            sys.set('lib:@angular/platform-browser-dynamic', AngularPlatformBrowserDynamic);
            sys.set('lib:@angular/router', AngularRouter);
            sys.set('lib:@angular/animations', AngularAnimations);
            sys.set('lib:@angular/animations/browser', AngularAnimationsBrowser);
            sys.set('lib:@ngx-translate/core', NgxTranslateCore);
            sys.set('lib:@ngx-translate/http-loader', NgxTranslateHttpLoader);
            // sys.set('lib:@gspwidget/portlet', PortletModule)
            sys.set('lib:@gspwidget/widget-core', WidgetCoreModule$1);
            sys.set('lib:@gspwidget/widget-devkit', WidgetDevkitModule$1);
            sys.set('lib:@gspwidget/util', UtilModule$1);
            // sys.set('lib:@gspwidget/gridster', GridsterModule)
        });
    }
    /**
     * 加载元部件文件，并获取 widget 的详细信息供外面用
     * @param {?} widgetInfo
     * @param {?} rawPropValues
     * @param {?} mode
     * @return {?}
     */
    loadWidget(widgetInfo, rawPropValues, mode) {
        return __awaiter(this, void 0, void 0, function* () {
            const { name: widgetName } = widgetInfo;
            /** @type {?} */
            let widgetCompFactory;
            /** @type {?} */
            let widgetModuleFactory;
            switch (mode) {
                case WidgetContainerMode.AOT:
                    // 加载 widget js 文件
                    yield this.initSystemjsPromise;
                    /** @type {?} */
                    const systemModule = yield sys.import(`${((/** @type {?} */ (widgetInfo))).href}?v=${widgetInfo.version}`);
                    this.fixCompFacError(systemModule);
                    // 加载完成后，获取 widget 的详细信息供外面用
                    widgetCompFactory = getWidgetComponentFactory(widgetName, systemModule);
                    widgetModuleFactory = getModuleFactoryAot(systemModule);
                    break;
                case WidgetContainerMode.DEV:
                    widgetCompFactory = this.componentFactoryResolver.resolveComponentFactory(((/** @type {?} */ (widgetInfo))).widgetComponent);
                    break;
            }
            /** @type {?} */
            const widgetConfig = WidgetRegistry.getWidgetByName(widgetName);
            /** @type {?} */
            const properties = this.widgetProperty.getWidgetProps(widgetName, widgetConfig);
            /** @type {?} */
            const propValues = this.widgetProperty.mixinWidgetPropValues(properties, rawPropValues);
            return {
                widgetCompFactory,
                widgetModuleFactory,
                properties,
                propValues,
                widgetConfig,
            };
        });
    }
    /**
     * TODO:
     * 白萌提的问题，去掉试试，拿他的元部件试试。怀疑是之前一直没传入 module 的原因。
     * 修复元部件依赖的第三方组件中 this.componentFactoryResolver.resolveComponentFactory
     * 找不到第三方组件的 ComponentFactory 的问题，
     * 如 nz RateComponent 找不到 toolTipComponent
     * @param {?} systemModule
     * @return {?}
     */
    fixCompFacError(systemModule) {
        Object.keys(systemModule)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        key => key.endsWith('ModuleNgFactory')))
            .forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            try {
                const { _factories } = systemModule[key].create(this.injector).componentFactoryResolver;
                _factories.forEach((/**
                 * @param {?} iFactory
                 * @return {?}
                 */
                iFactory => {
                    // @ts-ignore
                    this.componentFactoryResolver._factories.set(iFactory.componentType, iFactory);
                }));
            }
            catch (err) { }
        }));
    }
}
DynamicLoaderService$$1.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DynamicLoaderService$$1.ctorParameters = () => [
    { type: Injector },
    { type: HttpClient },
    { type: ComponentFactoryResolver },
    { type: WidgetPropertyService }
];
/** @nocollapse */ DynamicLoaderService$$1.ngInjectableDef = defineInjectable({ factory: function DynamicLoaderService_Factory() { return new DynamicLoaderService$$1(inject(INJECTOR), inject(HttpClient), inject(ComponentFactoryResolver), inject(WidgetPropertyService)); }, token: DynamicLoaderService$$1, providedIn: "root" });
/**
 * @param {?} widgetName
 * @param {?} systemModule
 * @return {?}
 */
function getWidgetComponentFactory(widgetName, systemModule) {
    /** @type {?} */
    const componentType = WidgetRegistry.getWidgetByName(widgetName).ctor;
    if (componentType) {
        return Object.values(systemModule)
            .find((/**
         * @param {?} fac
         * @return {?}
         */
        (fac) => fac.componentType === componentType));
    }
}
/**
 * @param {?} systemModule
 * @return {?}
 */
function getModuleFactoryAot(systemModule) {
    /** @type {?} */
    const key = Object
        .keys(systemModule)
        .find((/**
     * @param {?} k
     * @return {?}
     */
    k => k.endsWith('ModuleNgFactory')));
    return (/** @type {?} */ (systemModule[key]));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * instance 指运行时，在某处运行的一个部件。
 * 此服务被动收集、输出实例id与实例引用信息，
 * 主动调用者为 widgetComponent 或 portletComponent
 */
class InstanceService {
    constructor() {
        /**
         * 部件实例引用信息
         */
        this.instances = {};
    }
    /**
     * @param {?} insId
     * @return {?}
     */
    getInsByPInsId(insId) {
        return this.instances[insId];
    }
    /**
     * @param {?} insId
     * @param {?} widgetComp
     * @param {?} type
     * @return {?}
     */
    addInsInfo(insId, widgetComp, type) {
        if (!insId)
            console.warn('ins id 为空');
        if (!this.instances[insId])
            this.instances[insId] = {};
        this.instances[insId][type] = widgetComp;
    }
}
InstanceService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
InstanceService.ctorParameters = () => [];
/** @nocollapse */ InstanceService.ngInjectableDef = defineInjectable({ factory: function InstanceService_Factory() { return new InstanceService(); }, token: InstanceService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TitleBarComponent {
    /**
     * @param {?} devkitSvc
     * @param {?} translate
     */
    constructor(devkitSvc, translate) {
        this.devkitSvc = devkitSvc;
        this.translate = translate;
        this.icon = '';
        /**
         * 标题
         */
        this.showTitle = true;
        this.title = '';
        /**
         * 数字
         */
        this.showNumber = false;
        this.number = 0;
        /**
         * 设置按钮
         */
        this.showSetting = false;
        this.clickSetting = new EventEmitter();
        /**
         * 刷新按钮
         */
        this.showRefresh = false;
        this.clickRefresh = new EventEmitter();
        /**
         * 维度，用于运行时聚合
         */
        this.dims = [];
        /**
         * 是否显示运行时聚合
         */
        this.showRuntimeAgg = false;
        this.filterChange = new EventEmitter();
        this.runtimeAggChange = new EventEmitter();
        this.init = new EventEmitter();
        this.JumpTypes = JumpTypes;
        /**
         * 聚合
         */
        this.editingRuntimeAgg = new RuntimeAggOption();
        this.runtimeAggDropdownOpen = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init.emit(this);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.filterConfigs) {
            this.outerFC = null;
            this.innerFCs = null;
            /** @type {?} */
            const notFlatFCs = this.filterConfigs.filter((/**
             * @param {?} fc
             * @return {?}
             */
            fc => !isFsFlat(fc.fs)));
            if (notFlatFCs && notFlatFCs[0])
                this.outerFC = notFlatFCs[0];
            if (notFlatFCs && notFlatFCs.length > 1)
                this.innerFCs = notFlatFCs.slice(1);
            this.flatFCs = this.filterConfigs.filter((/**
             * @param {?} fc
             * @return {?}
             */
            fc => isFsFlat(fc.fs)));
        }
    }
    /**
     * 用于外部手动设置 runtime agg。因为每次都需要 deep clone，所以封装为手动调用的函数，而非模板绑定，以减少次数。
     * @param {?} runtimeAgg
     * @return {?}
     */
    setRuntimeAgg(runtimeAgg) {
        if (!runtimeAgg)
            return;
        this.editingRuntimeAgg = deepClone(runtimeAgg);
        this.confirmedRuntimeAgg = deepClone(runtimeAgg);
    }
    /**
     * @return {?}
     */
    handleClickJump() {
        this.devkitSvc.jumpWithoutData(this.jumpConfig);
    }
    /**
     * 把 filter 发来的结果值，加上 dpId 一起包装为 dpValues 发出去
     * @param {?} value
     * @param {?} fc
     * @return {?}
     */
    handleFilterSingleChange(value, fc) {
        // 1. 普通：发出对应 1 个 dp 的单个值
        this.filterChange.emit([{
                value,
                dpId: fc.dpId,
            }]);
    }
    /**
     * @param {?} values
     * @param {?} fc
     * @return {?}
     */
    handleFilterMultiChange(values, fc) {
        /** @type {?} */
        let dpValues
        // 2. 日期范围：发出对应 2 个 dp 的 2 个值
        ;
        // 2. 日期范围：发出对应 2 个 dp 的 2 个值
        if (ifFsDateRange(fc.fs)) {
            dpValues = [
                { value: values[0], dpId: fc.dpId },
                { value: values[1], dpId: fc.dpId2 },
            ];
        }
        else {
            // 3. 枚举多选：发出对应 1 个 dp 的多个值
            dpValues = [{
                    // TODO: 多值的连接方式是否可配？
                    value: values.join(','), dpId: fc.dpId
                }];
        }
        this.filterChange.emit(dpValues);
    }
    /**
     * 聚合
     * @return {?}
     */
    handleAddInd() {
        this.editingRuntimeAgg.indicators.push(new Indicator());
    }
    /**
     * @param {?} ind
     * @return {?}
     */
    handleRemoveInd(ind) {
        ArrUtil.Remove(this.editingRuntimeAgg.indicators, ind);
    }
    /**
     * @return {?}
     */
    handleConfirmAgg() {
        this.runtimeAggDropdownOpen = false;
        if (objectLiteralEqual(this.editingRuntimeAgg, this.confirmedRuntimeAgg))
            return;
        this.confirmedRuntimeAgg = deepClone(this.editingRuntimeAgg);
        this.runtimeAggChange.emit(this.confirmedRuntimeAgg);
    }
}
TitleBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-title-bar',
                template: "<!-- --{{filterSchemas | json}}-- -->\n<!-- TODO: \u6240\u6709\u5176\u4ED6 filter \u6536\u8D77\u5230 dropdown \u91CC -->\n<!-- <div class=\"d-flex\">\n  <filter\n    *ngFor=\"let fc of filterConfigs\"\n    [filterSchema]=\"fc.fs\"\n    (singleValueChange)=\"handleFilterSingleChange($event, fc)\"\n    (multiValueChange)=\"handleFilterMultiChange($event, fc)\"\n    ></filter>\n</div> -->\n<div class=\"title-bar\">\n  <div class=\"d-flex\">\n    <!-- left -->\n    <div class=\"left align-items-center\">\n      <i *ngIf=\"icon!=''\" class=\"material-icons\">{{icon}}</i>\n      <div *ngIf=\"showTitle\" class=\"title\">{{title}}</div>\n      <div *ngIf=\"showNumber\" class=\"number\">{{number}}</div>\n      <ng-container *ngTemplateOutlet=\"leftTemplate\"></ng-container>\n    </div>\n    <!-- right -->\n    <div class=\"right\">\n      <ng-container *ngTemplateOutlet=\"rightTemplate\"></ng-container>\n      <filter\n        *ngIf=\"outerFC\"\n        [filterSchema]=\"outerFC.fs\"\n        (singleValueChange)=\"handleFilterSingleChange($event, outerFC)\"\n        (multiValueChange)=\"handleFilterMultiChange($event, outerFC)\"\n        ></filter>\n      <div *ngIf=\"innerFCs\"\n        class=\"tool-wrap d-flex\">\n        <nz-dropdown nzTrigger=\"click\">\n          <i nz-dropdown class=\"material-icons\">more_horiz</i>\n          <ul nz-menu class=\"p-2\">\n            <li\n              *ngFor=\"let fc of innerFCs\"\n              class=\"mt-1 d-flex align-items-center\">\n              <span class=\"text-truncate\" style=\"width: 50px\">{{fc?.fs?.i18nName[translate.currentLang]}}</span>\n              <filter\n                [filterSchema]=\"fc.fs\"\n                (singleValueChange)=\"handleFilterSingleChange($event, fc)\"\n                (multiValueChange)=\"handleFilterMultiChange($event, fc)\"\n                ></filter>\n            </li>\n          </ul>\n        </nz-dropdown>\n      </div>\n      <!-- \u805A\u5408\u914D\u7F6E -->\n      <div *ngIf=\"showRuntimeAgg\"\n        class=\"tool-wrap d-flex\">\n        <nz-dropdown nzTrigger=\"click\" [(nzVisible)]=\"runtimeAggDropdownOpen\">\n          <i nz-dropdown class=\"material-icons\">show_chart</i>\n          <div nz-menu class=\"p-2\" style=\"width:200px;box-sizing:content-box;\">\n            <h5>\u805A\u5408\u914D\u7F6E</h5>\n            <div class=\"tip p-2\">\n              \u805A\u5408\u914D\u7F6E\u4EC5\u5BF9 QDP \u6570\u636E\u96C6\u751F\u6548\u3002\n            </div>\n            <div class=\"sm-title\">\u7EF4\u5EA6</div>\n            <nz-select\n              [(ngModel)]=\"editingRuntimeAgg.dimensions[0]\"\n              nzPlaceHolder=\"\u9009\u62E9\u7EF4\u5EA6\u5B57\u6BB5\"\n              style=\"width:200px\">\n              <nz-option\n                *ngFor=\"let dim of dims\"\n                [nzLabel]=\"dim.label || dim.name\"\n                [nzValue]=\"dim.name\"></nz-option>\n            </nz-select>\n            <div class=\"sm-title mt-2\">\u6C47\u603B\u65B9\u5F0F\u53CA\u6307\u6807</div>\n            <ul>\n              <li\n                class=\"mb-1 d-flex align-items-center\"\n                *ngFor=\"let ind of editingRuntimeAgg.indicators\">\n                <nz-input-group nzCompact>\n                  <nz-select [(ngModel)]=\"ind.aggFn\" style=\"width:70px\">\n                    <nz-option nzLabel=\"\u5408\u8BA1\" [nzValue]=\"1\"></nz-option>\n                    <nz-option nzLabel=\"\u6700\u5927\u503C\" [nzValue]=\"2\"></nz-option>\n                    <nz-option nzLabel=\"\u6700\u5C0F\u503C\" [nzValue]=\"3\"></nz-option>\n                    <nz-option nzLabel=\"\u8BA1\u6570\" [nzValue]=\"4\"></nz-option>\n                    <nz-option nzLabel=\"\u5E73\u5747\u503C\" [nzValue]=\"5\"></nz-option>\n                  </nz-select>\n                  <nz-select\n                    nzPlaceHolder=\"\u9009\u62E9\u6307\u6807\u5B57\u6BB5\"\n                    [(ngModel)]=\"ind.dimName\"\n                    style=\"width:110px\">\n                    <nz-option\n                      *ngFor=\"let dim of dims\"\n                      [nzLabel]=\"dim.label || dim.name\"\n                      [nzValue]=\"dim.name\"></nz-option>\n                  </nz-select>\n                </nz-input-group>\n                <i\n                  class=\"material-icons cursor-pointer fs-15 text-gray-200 hover:text-red-600 transition-colors\"\n                  (click)=\"handleRemoveInd(ind)\"\n                  >remove_circle</i>\n              </li>\n            </ul>\n\n            <div class=\"text-right mt-2\">\n              <button class=\"btn btn-secondary mr-1\" (click)=\"handleAddInd()\">\u589E\u52A0\u6307\u6807</button>\n              <button class=\"btn btn-primary\" (click)=\"handleConfirmAgg()\">{{'confirm' | translate}}</button>\n            </div>\n          </div>\n\n          <!-- <ul nz-menu class=\"p-2\">\n            <li\n              *ngFor=\"let fc of innerFCs\"\n              class=\"mt-1 d-flex align-items-center\">\n              <span class=\"text-truncate\" style=\"width: 50px\">{{fc?.fs?.i18nName[translate.currentLang]}}</span>\n              <filter\n                [filterSchema]=\"fc.fs\"\n                (singleValueChange)=\"handleFilterSingleChange($event, fc)\"\n                (multiValueChange)=\"handleFilterMultiChange($event, fc)\"\n                ></filter>\n            </li>\n          </ul> -->\n        </nz-dropdown>\n      </div>\n      <div\n        class=\"tool-wrap d-flex\"\n        [title]=\"(settingTitle || '') | translate\"\n        *ngIf=\"showSetting\">\n        <img\n          class=\"setting\"\n          (click)=\"clickSetting.emit()\"\n          src=\"assets/img/setting.svg\"\n          [alt]=\"settingTitle\">\n      </div>\n      <div\n        class=\"tool-wrap d-flex\"\n        *ngIf=\"showRefresh\"\n        (click)=\"clickRefresh.emit()\">\n        <i class=\"icon-refresh material-icons\" style=\"font-size: 20px;\">refresh</i>\n      </div>\n      <!-- -{{jumpConfig.jumpType}}-{{jumpConfig|json}}- -->\n      <div\n        *ngIf=\"jumpConfig && jumpConfig.jumpType!==JumpTypes.None\"\n        (click)=\"handleClickJump()\"\n        class=\"tool-wrap d-flex\">\n        <i class=\"material-icons\">chevron_right</i>\n      </div>\n    </div>\n  </div>\n  <ul>\n    <li *ngFor=\"let flatFC of flatFCs\" class=\"mt-1\">\n      <filter\n        [filterSchema]=\"flatFC.fs\"\n        (singleValueChange)=\"handleFilterSingleChange($event, flatFC)\"\n        (multiValueChange)=\"handleFilterMultiChange($event, flatFC)\"\n        ></filter>\n    </li>\n  </ul>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["@charset \"UTF-8\";.title-bar{padding:12px 20px 10px}.title-bar .left{flex:1 1 auto;display:flex}.title-bar .left .material-icons{font-size:18px;margin-right:8px;color:#3794ff;padding-top:1px}.title-bar .left .title{font-weight:700;font-size:15px}.title-bar .left .number{font-size:15px;margin-left:10px}.title-bar .right{flex:1 1 auto;display:flex;justify-content:flex-end;align-items:center}.title-bar .right .widget-select{margin-left:5px}.title-bar .right .setting{width:16px;height:16px;transition:.3s;opacity:1!important}.title-bar .right .setting:hover{transform:rotate(60deg)}.title-bar .right .tool-wrap{width:20px;margin-left:10px;font-size:14px;color:#000;transition:.3s;cursor:pointer;opacity:.2}.title-bar .right .tool-wrap:hover{opacity:.4}"]
            }] }
];
/** @nocollapse */
TitleBarComponent.ctorParameters = () => [
    { type: WidgetDevkitService },
    { type: TranslateService }
];
TitleBarComponent.propDecorators = {
    icon: [{ type: Input }],
    showTitle: [{ type: Input }],
    title: [{ type: Input }],
    showNumber: [{ type: Input }],
    number: [{ type: Input }],
    showSetting: [{ type: Input }],
    settingTitle: [{ type: Input }],
    clickSetting: [{ type: Output }],
    showRefresh: [{ type: Input }],
    clickRefresh: [{ type: Output }],
    jumpConfig: [{ type: Input }],
    jumpProperty: [{ type: Input }],
    data: [{ type: Input }],
    filterConfigs: [{ type: Input }],
    dims: [{ type: Input }],
    showRuntimeAgg: [{ type: Input }],
    filterChange: [{ type: Output }],
    runtimeAggChange: [{ type: Output }],
    init: [{ type: Output }],
    leftTemplate: [{ type: ContentChild, args: ['leftTemplate',] }],
    rightTemplate: [{ type: ContentChild, args: ['rightTemplate',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const aggFirstDim2Field = (/**
 * @param {?} runtimeAgg
 * @param {?} allDims
 * @return {?}
 */
(runtimeAgg, allDims) => getFieldByName(allDims, runtimeAgg.dimensions[0]));
/** @type {?} */
const aggFirstInd2Field = (/**
 * @param {?} runtimeAgg
 * @param {?} allDims
 * @return {?}
 */
(runtimeAgg, allDims) => getFieldByName(allDims, runtimeAgg.indicators[0].dimName));
/** @type {?} */
const stackAggFields = (/**
 * @param {?=} pure
 * @return {?}
 */
(pure = false) => [{
        name: 'yFieldObjs',
        valueFactory: (/**
         * @param {?} __0
         * @param {?} allDims
         * @return {?}
         */
        ({ indicators }, allDims) => {
            return indicators.map((/**
             * @param {?} ind
             * @param {?} i
             * @return {?}
             */
            (ind, i) => ({
                valueField: getFieldByName(allDims, ind.dimName),
                color: pure
                    ? PlThemeColors.pure[i % indicators.length]
                    : PlThemeColors.gradient[i % indicators.length]
            })));
        })
    }, {
        name: 'categoryFieldName',
        valueFactory: aggFirstDim2Field
    }]);
/** @type {?} */
const barAggFields = [
    { name: 'categoryFieldName', valueFactory: aggFirstDim2Field },
    { name: 'valueFieldName', valueFactory: aggFirstInd2Field }
];
/** @type {?} */
const chartAggFieldMap = {
    stack: stackAggFields(),
    area: stackAggFields(true),
    'bar-group': stackAggFields(),
    'widget-line': stackAggFields(true),
    bar: barAggFields,
    pie: barAggFields,
    pie2: barAggFields,
    'bar-horizontal': barAggFields,
    'simple-line': barAggFields,
    'bar-multiple': [{
            categoryFieldName: aggFirstDim2Field,
            valueFieldNameOne: aggFirstInd2Field,
            valueFieldNameTwo: (/**
             * @param {?} runtimeAgg
             * @param {?} allDims
             * @return {?}
             */
            (runtimeAgg, allDims) => getFieldByName(allDims, runtimeAgg.indicators[1].dimName)),
        }]
};
/**
 * @param {?} dims
 * @param {?} dimName
 * @return {?}
 */
function getFieldByName(dims, dimName) {
    const { name, label } = dims.find((/**
     * @param {?} dim
     * @return {?}
     */
    dim => dim.name === dimName));
    return { name, label };
}
/**
 * @param {?} widgetName
 * @return {?}
 */
function isWidgetRuntimeAggActive(widgetName) {
    return Object
        .keys(chartAggFieldMap)
        .includes(widgetName);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// private langsSet: { [widgetName: string]: string[] } = {}
/**
 * 已被 set 翻译的 lang，下次不再请求此 lang
 * @type {?}
 */
const loadedI18nUrls = [];
/** @enum {number} */
const WCStatus = {
    LoadingWidget: 0,
    LoadingData: 1,
    DataEmpty: 2,
    Normal: 3,
    DataError: 4,
    WidgetLoadError: 5,
};
WCStatus[WCStatus.LoadingWidget] = 'LoadingWidget';
WCStatus[WCStatus.LoadingData] = 'LoadingData';
WCStatus[WCStatus.DataEmpty] = 'DataEmpty';
WCStatus[WCStatus.Normal] = 'Normal';
WCStatus[WCStatus.DataError] = 'DataError';
WCStatus[WCStatus.WidgetLoadError] = 'WidgetLoadError';
loadCommonStyleNTheme();
/**
 * 兼容阶段数据加载逻辑
 * 1. 若元部件 useDataEngine === true, 说明是老写法、且需要数据的元部件，但其内部未调用加载数据，所以初始化完成后加载一下；
 *    新数据加载请求处理永远启用，因为仅有新写法元部件会触发；
 * 2. 若 getData 有值，则用它获得数据，不用真数据
 * 3. 若名中带有 '演示'，则用演示数据
 * 4. 都不满足再用真数据
 */
class WidgetComponent {
    /**
     * 公共头上是否显示运行时聚合配置
     * @param {?} loader
     * @param {?} cd
     * @param {?} injector
     * @param {?} modal
     * @param {?} http
     * @param {?} translate
     * @param {?} widgetPropertyService
     * @param {?} widgetEventService
     * @param {?} insSerivce
     */
    constructor(loader, cd, injector, modal, http, translate, widgetPropertyService, widgetEventService, insSerivce) {
        this.loader = loader;
        this.cd = cd;
        this.injector = injector;
        this.modal = modal;
        this.http = http;
        this.translate = translate;
        this.widgetPropertyService = widgetPropertyService;
        this.widgetEventService = widgetEventService;
        this.insSerivce = insSerivce;
        /**
         * 可选
         */
        this.mode = WidgetContainerMode.AOT;
        // TODO: 解耦 portlet
        /**
         * 可选，部件信息，需要注入到元部件
         */
        this.portlet = new EppPortlet(null);
        this.status = WCStatus.LoadingWidget;
        /**
         * widget 加载完成，发出当前 widget 的信息
         */
        this.widgetLoaded = new EventEmitter();
        /**
         * widget component create 完成，发出当前 widget 的信息
         */
        this.widgetInit = new EventEmitter();
        this.runtimeAggChange = new EventEmitter();
        // public isLoading = true
        // public status = WCStatus.Normal
        this.WCStatus = WCStatus;
        this.IGIX_HOME_PATH = IGIX_HOME_PATH;
        this.FILTER_PROP_NAME = FILTER_PROP_NAME;
        // public feFilterValues: FrontendFilter[]
        /**
         * 存在此层的数据。可用于前端筛选、数据获取状态判断
         */
        this.data = null;
        this.showRuntimeAgg = false;
        /**
         * pv 中包含 {fs,dp}[]（筛选控件+取数参数=筛选）
         * 部件实例中保存 {fs,dp}: filterValue
         */
        this.dpValues = [];
        this.handleDataError = (/**
         * @return {?}
         */
        () => {
            // 数据加载失败
            this.status = WCStatus.DataError;
            this.cd.markForCheck();
        });
        this._initWidgetEnv();
    }
    /**
     * 全局初始化
     * @private
     * @return {?}
     */
    _initWidgetEnv() {
        // i18n
        if (!this.translate.defaultLang)
            this.translate.setDefaultLang('zh-CHS');
        if (!this.translate.currentLang) {
            /** @type {?} */
            const lang = localStorage.getItem('languageCode') || 'zh-CHS';
            this.translate.use(lang || 'zh-CHS');
        }
        if (!window.widgetI18nResLoaded) {
            const { currentLang } = this.translate;
            this.http.get(`${IGIX_HOME_PATH}assets/i18n/${currentLang}.json`).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                this.translate.setTranslation(currentLang, res, true);
            }));
            window.widgetI18nResLoaded = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.insSerivce.addInsInfo(this.instanceId, this, 'widgetComp');
        // 监听 resizeTarget 的大小变化，变化时调用元部件.onResized()，传入 DomRectReadonly
        if (this.resizeTarget) {
            new ResizeObserver((/**
             * @param {?} entries
             * @return {?}
             */
            entries => {
                const { width, height } = entries[0].contentRect;
                if (this.widgetInstance)
                    this.widgetInstance.onResized(width, height);
                this.width = width;
                this.height = height;
                this.cd.markForCheck();
            })).observe(this.resizeTarget.nativeElement);
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    ngOnChanges(c) {
        const { basicWidgetInfo } = c;
        if (basicWidgetInfo && basicWidgetInfo.currentValue && basicWidgetInfo.currentValue !== basicWidgetInfo.previousValue) {
            // widget 变了，渲染新元部件
            this.renderWidget();
        }
    }
    /**
     * 此 container 被 gridster 渲染出正确的大小事件
     * @return {?}
     */
    triggerWidgetResize() {
        if (this.widgetInstance && this.widgetInstance.onResized) {
            const { clientWidth, clientHeight } = this.resizeTarget.nativeElement;
            this.widgetInstance.onResized(clientWidth, clientHeight);
        }
    }
    // TODO: 这些都改造成，参数为一个对象，里面可以一次塞多个属性-值，全部更新后再触发 onPropertyChange，
    // 否则像初始化完要赋多个值的情况，通知触发太频繁了，也会导致频繁触发元部件渲染、数据加载
    /**
     * 外部更新元部件 propValues 的某属性后，需要调用此方法，否则我们不知道 propValues 发生了变化。
     * 不太好精简掉这个方法。尝试过用 keyValueDiffer 在 ngDoCheck 中检测 propValues 变化，但仅能检测一层。
     * @param {?} propName
     * @param {?} pValue
     * @return {?}
     */
    setPropertyValue(propName, pValue) {
        // TODO: portlet 结构改变后，可以省去这一步：__extra 应该根本不会传进来
        if (propName === '__extra')
            return;
        // 如果不是 object，则判断值如果 pValue 与当前元部件实例中相同，就不传给部件了
        if (typeof pValue !== 'object' && this.widgetInstance[propName] === pValue)
            return;
        // TODO: 部件配置时，运行时更改语言的处理
        /** @type {?} */
        const value = this.processPV(pValue)
        // 改值
        ;
        // 改值
        this.widgetInstance[propName] = value;
        // 通知，因为元部件可能需要这个时机
        // 防止没有这个方法的老元部件报错，后面都会升级掉
        if (this.widgetInstance.onPropertyChange) {
            this.widgetInstance.onPropertyChange(propName, value);
        }
        if (propName === FILTER_PROP_NAME) {
            this.dpValues = ((/** @type {?} */ (pValue)))
                .filter((/**
             * @param {?} dv
             * @return {?}
             */
            dv => dv.dpId))
                .map((/**
             * @param {?} fc
             * @return {?}
             */
            fc => ({
                value: FilterSchema.getDefaultValue(fc.fs),
                dpId: fc.dpId
            })));
            // TODO:
            // if (pValue && pValue.slice) this.propValues[FILTER_PROP_NAME] = pValue.slice()
            // this.cd.markForCheck()
        }
        if (!this.propValues)
            this.propValues = {};
        this.propValues[propName] = pValue;
        this.cd.markForCheck();
    }
    /* 递归检查 pv，做特殊处理，比如国际化、帮助 */
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    processPV(value) {
        const { currentLang } = this.translate;
        try {
            value = JSON.parse(JSON.stringify(value));
        }
        catch (e) { }
        return _processPVRecursively(value);
        /**
         * @param {?} pValue
         * @return {?}
         */
        function _processPVRecursively(pValue) {
            if (Array.isArray(pValue)) {
                pValue.forEach((/**
                 * @param {?} v
                 * @param {?} i
                 * @return {?}
                 */
                (v, i) => {
                    pValue[i] = _processPVRecursively(v);
                }));
                return pValue;
                // i18n: 如果 value 中包含 en 或 zh-CHS 或 当前语言的key，则是 i18n 字段
            }
            else if (pValue && !pValue._notProcess && typeof (pValue.en + pValue['zh-CHS'] + pValue[currentLang]) === 'string') {
                return pValue[currentLang];
                // help
            }
            else if (pValue && pValue.__type === 'help') {
                return pValue.value;
            }
            else if (pValue && ['Object'].includes(pValue.constructor.name)) {
                Object.keys(pValue).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                key => {
                    pValue[key] = _processPVRecursively(pValue[key]);
                }));
                return pValue;
            }
            else {
                return pValue;
            }
        }
    }
    /**
     * @return {?}
     */
    renderWidget() {
        return __awaiter(this, void 0, void 0, function* () {
            // 加载渲染这个 widget 需要的一切元数据
            const { baseUrl } = this.basicWidgetInfo;
            /** @type {?} */
            const curWidgetData = yield this.loader.loadWidget(this.basicWidgetInfo, this.propValues, this.mode)
            // TODO: propValues 是不是不用经过 loader，直接调 widgetPropService 获取就行？
            ;
            // TODO: propValues 是不是不用经过 loader，直接调 widgetPropService 获取就行？
            const { widgetCompFactory, widgetModuleFactory, propValues, widgetConfig } = curWidgetData;
            this.curWidgetConfig = widgetConfig;
            this.initRuntimeAgg();
            if (this.curWidgetConfig.enableLoadingI18n)
                this.loadI18nRes();
            // 元部件加载完成事件
            this.widgetLoaded.emit(curWidgetData);
            // 删老元部件
            this.widgetContainer.remove();
            // 创建注入器
            /** @type {?} */
            const injector = Injector.create({
                providers: [{
                        provide: WidgetInstanceInfo,
                        /**
                         * 元部件实例信息
                         */
                        useValue: new WidgetInstanceInfo(this.portlet.id, this.instanceId, this.assetsBaseUrl || this.basicWidgetInfo.baseUrl + '/assets/')
                    }, {
                        provide: WidgetDataService,
                        /**
                         * 元部件数据服务
                         */
                        useFactory: (/**
                         * @return {?}
                         */
                        () => {
                            this.widgetDataService = new WidgetDataService();
                            this.widgetDataService.onLoadData
                                .pipe(delay(0)) // 为避免用 of(data) 会同步返回数据，导致 data service 中的 onGetData 还没返回到元部件手里就触发完了
                                .subscribe(this.loadNSetData.bind(this));
                            return this.widgetDataService;
                        }),
                        deps: []
                    }],
                parent: this.injector
            })
            // 创建、挂载 widget 组件
            ;
            // 创建、挂载 widget 组件
            this.widgetInstance = (/** @type {?} */ (this.widgetContainer.createComponent(widgetCompFactory, 0, injector, undefined, widgetModuleFactory && widgetModuleFactory.create(this.injector)).instance));
            // 设置 widget 的 properties 的 values
            // TODO: 改为一次配多个
            Object.keys(propValues).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                this.setPropertyValue(prop, propValues[prop]);
            }));
            // TODO: 已废弃方案, 以下为过渡方案以兼容老写法元部件, 后期将移除
            this.widgetInstance.id = this.instanceId;
            this.widgetInstance.portletId = this.portlet.id;
            this.widgetInstance.assetsBaseUrl = this.assetsBaseUrl || baseUrl + '/assets/';
            if (this.widgetInstance.useDataEngine)
                this.loadNSetData({});
            // TODO: 它完成之后才算作 widget 初始化完成，可以显示出来。否则会显示 code。
            // this.setWidgetTranslation()
            // event
            this.initWidgetEventListener();
            // 元部件初始化完成事件
            this.widgetInit.emit(curWidgetData);
            // this.isLoading = false
            this.status = WCStatus.Normal;
            this.cd.markForCheck();
        });
    }
    /**
     * @private
     * @return {?}
     */
    loadI18nRes() {
        const { currentLang } = this.translate;
        const { name, baseUrl } = this.basicWidgetInfo;
        const { customI18nResourceUrl } = this.curWidgetConfig;
        /** @type {?} */
        const i18nResUrl = customI18nResourceUrl || `${baseUrl}/assets/i18n/${currentLang}.json`
        // 缓存曾加载过的资源文件名，下次相同文件不再请求。缓存资源文件名，是因为可能多个元部件指定相同的资源文件。
        ;
        // 缓存曾加载过的资源文件名，下次相同文件不再请求。缓存资源文件名，是因为可能多个元部件指定相同的资源文件。
        if (loadedI18nUrls.includes(i18nResUrl))
            return;
        loadedI18nUrls.push(i18nResUrl);
        return this.http.get(i18nResUrl).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.translate.setTranslation(currentLang, res, true);
        }), (/**
         * @return {?}
         */
        () => {
            console.log(`元部件 ${name} 无 ${currentLang} 的资源文件`);
        })).finally((/**
         * @return {?}
         */
        () => {
            return Promise.resolve();
        }));
    }
    /**
     * 塞数据入口 1/2: 加载数据并塞给部件
     * @param {?=} param
     * @return {?}
     */
    // TODO: loadNSetData 可能是不带参数的。取数参数可能存在当前 widget 实例里，直接取。
    // loadNSetData 有没有可能带着来自部件的额外参数？
    loadNSetData(param = {}) {
        /** @type {?} */
        const ob = this.getData({
            dpValues: mergeDpValuesForNew(this.dpValues, param.dpValues),
            runtimeAgg: this.runtimeAgg
        });
        if (!ob)
            return;
        ob.subscribe((/**
         * @param {?} dataWithDims
         * @return {?}
         */
        dataWithDims => {
            this.setData(dataWithDims);
        }), this.handleDataError.bind(this));
    }
    /**
     * 给元部件重新设置数据结果，外部可调用此方法给部件设置数据。
     * @param {?} pDataWithDims
     * @return {?}
     */
    setData(pDataWithDims) {
        /** @type {?} */
        let dataWithDims = pDataWithDims
        // set if empty status
        ;
        // set if empty status
        if (!pDataWithDims || !pDataWithDims.tableData || pDataWithDims.tableData.length === 0)
            this.status = WCStatus.DataEmpty;
        // 如果外面没有给 DataWithDims 而是简单数据列表，就简单转一把。以兼容 config 里的假数据等。
        if (!pDataWithDims.dimensions && pDataWithDims['length']) {
            dataWithDims = {
                dimensions: Object
                    .keys(pDataWithDims[0])
                    .map((/**
                 * @param {?} key
                 * @return {?}
                 */
                key => ({ name: key, label: key }))),
                tableData: ((/** @type {?} */ ((/** @type {?} */ (pDataWithDims)))))
            };
        }
        this.status = WCStatus.Normal;
        this.data = dataWithDims.tableData;
        this.dims = dataWithDims.dimensions;
        if (this.widgetDataService)
            this.widgetDataService.setData(dataWithDims);
        if (this.widgetInstance && this.widgetInstance.useDataEngine)
            this.widgetInstance.onGetData(dataWithDims.tableData); // 兼容用途
        // 给元部件设置完数据，若有运行时聚合，还需要重新绑定字段
        this.setRuntimeAggDims();
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    handleClickStatusMore() {
        this.modal.error({
            nzTitle: '小部件错误',
            nzContent: '此小部件的数据配置无效，需要管理员重新配置或删除。'
        });
    }
    /**
     * @param {?} dpValues
     * @return {?}
     */
    handleFilterChange(dpValues) {
        mergeDpValues(this.dpValues, dpValues);
        this.loadNSetData();
    }
    /**
     * @param {?} runtimeAgg
     * @return {?}
     */
    handleRuntimeAggChange(runtimeAgg) {
        // if (objectLiteralEqual(runtimeAgg, this.runtimeAgg)) return
        this.runtimeAgg = runtimeAgg;
        // 下面两行顺序严格，因为外部加载数据时可能要依赖当前最新的 runtimeAgg
        this.runtimeAggChange.emit(runtimeAgg);
        this.loadNSetData();
    }
    /**
     * 当前写法需要保证 renderWidget() 已完成
     * @param {?} titleBar
     * @return {?}
     */
    handleTitleBarInit(titleBar) {
        if (this.showRuntimeAgg) {
            titleBar.setRuntimeAgg(this.runtimeAgg);
        }
    }
    /**
     * @return {?}
     */
    initRuntimeAgg() {
        // runtime agg
        this.showRuntimeAgg = isWidgetRuntimeAggActive(this.basicWidgetInfo.name);
        if (this.showRuntimeAgg) {
            this.runtimeAgg = this.propValues.__extra ? this.propValues.__extra.runtimeAgg : null;
        }
    }
    // TODO: 以后把 su 放 basic... 里
    /**
     * 初始化部件事件监听
     * @private
     * @return {?}
     */
    initWidgetEventListener() {
        if (!this.linkMap)
            return;
        if (this.amIFilterWidget()) {
            this.initOneEventListener(FILTERS_WIDGET_PROP_NAME);
        }
        else {
            this.widgetEventService
                .getEventsByWidgetName(this.basicWidgetInfo.name, this.propValues)
                .forEach((/**
             * @param {?} eventConfig
             * @return {?}
             */
            eventConfig => {
                this.initOneEventListener(eventConfig.propName);
            }));
        }
    }
    /**
     * eventPropName 是事件对应的实际属性名，
     * eventKey 配置在 link 里的事件名。
     * 一般他俩是一样的，后者可以不传。
     * 若是筛选部件，则两者不同，一个是 'filter'，一个是实际的事件（筛选）名称。
     * @private
     * @param {?} eventPropName
     * @return {?}
     */
    initOneEventListener(eventPropName) {
        /** @type {?} */
        const eventEmitter = this.widgetInstance[eventPropName];
        if (eventEmitter)
            eventEmitter.subscribe((/**
             * @param {?} widgetEventParam
             * @return {?}
             */
            widgetEventParam => {
                console.log('联动事件触发，参数：' + widgetEventParam);
                /** @type {?} */
                const linkEventKey = this.amIFilterWidget()
                    ? ((/** @type {?} */ (widgetEventParam))).eventKey
                    : eventPropName
                // 根据 link map 调用其他 ins 根据 重新加载数据
                ;
                // 根据 link map 调用其他 ins 根据 重新加载数据
                /** @type {?} */
                const pInsLink = this.linkMap[linkEventKey];
                Object.keys(pInsLink).forEach((/**
                 * @param {?} pInsId
                 * @return {?}
                 */
                pInsId => {
                    if (!pInsLink[pInsId] || !pInsLink[pInsId].active || !pInsLink[pInsId].dpId)
                        return;
                    /** @type {?} */
                    const targetWIns = this.insSerivce.getInsByPInsId(pInsId).widgetComp;
                    if (targetWIns)
                        targetWIns.loadNSetData({
                            dpValues: [{
                                    dpId: pInsLink[pInsId].dpId,
                                    // TODO: 联动参数值的处理加在这
                                    value: String(widgetEventParam['dataIndex']),
                                }]
                        });
                }));
            }));
    }
    /**
     * @return {?}
     */
    setRuntimeAggDims() {
        if (!this.runtimeAgg)
            return;
        chartAggFieldMap[this.basicWidgetInfo.name].forEach((/**
         * @param {?} aggField
         * @return {?}
         */
        aggField => {
            this.setPropertyValue(aggField.name, aggField.valueFactory(this.runtimeAgg, this.dims));
        }));
    }
    /**
     * @return {?}
     */
    amIFilterWidget() {
        return this.basicWidgetInfo.name === FILTERS_WIDGET_NAME
            && this.basicWidgetInfo.baseUrl.includes('/epp/');
    }
}
WidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-widget',
                template: "<div\n  #resizeTarget\n  class=\"wc-wrapper h-100 overflow-hidden position-relative\">\n  <!-- TODO: \u589E\u52A0\u516C\u5171\u7684\u52A0\u8F7D\u906E\u7F69\u5C42\uFF0C\u6570\u636E\u670D\u52A1\u52A0\u8F7D\u65F6\u3001\u90E8\u4EF6\u5185\u8C03\u7528\u65F6\u3001\u90E8\u4EF6\u672C\u8EAB\u52A0\u8F7D\u90FD\u7528\u5B83 -->\n  <!-- loading -->\n  <div\n    *ngIf=\"[WCStatus.LoadingWidget, WCStatus.LoadingData].includes(status)\"\n    class=\"h-100 d-flex justify-content-center align-items-center\">\n    <div class=\"text-center\">\n      <i class=\"spin-ball loading-color material-icons\">public</i>\n      <div class=\"fs-12 loading-color\">{{'\u90E8\u4EF6\u52A0\u8F7D\u4E2D' | trans}}</div>\n    </div>\n  </div>\n\n  <!-- TODO: \u90E8\u4EF6\u52A0\u8F7D\u5931\u8D25\u3002\u600E\u4E48\u7EDF\u4E00\u5904\u7406\u8FD9\u51E0\u79CD\u5F02\u5E38\u72B6\u6001\uFF1F -->\n  <!-- <div\n    *ngIf=\"status === WCStatus.WidgetLoadError\">\n  </div> -->\n\n  <!-- \u65E0\u6570\u636E -->\n  <div\n    *ngIf=\"status === WCStatus.DataEmpty\"\n    class=\"flex-fill no-data h-100 w-100 d-flex flex-column\">\n    <lib-title-bar\n      *ngIf=\"curWidgetConfig?.enableCommonTitleBar\n        && widgetInstance\n        && !widgetInstance['titleBarHide']\"\n      [title]=\"portlet.name\"\n      [showRefresh]=\"widgetInstance['titleBarShowRefresh']\"\n      [jumpConfig]=\"widgetInstance['titleBarJump']\"\n      ></lib-title-bar>\n    <div class=\"flex-fill d-flex flex-column justify-content-center align-items-center\">\n      <img src=\"{{IGIX_HOME_PATH}}assets/img/data-empty.svg\" style=\"transform:translateY(-5px)\" alt=\"\">\n      <div class=\"fs-13\" style=\"color:gray\">{{'noDataAvailable'|translate}}</div>\n    </div>\n  </div>\n\n  <!-- abnormal -->\n  <div class=\"d-flex flex-column overflow-hidden h-100\"\n    *ngIf=\"status === WCStatus.DataError\">\n    <div class=\"portlet-title text-truncate flex-shrink-0\">{{this.portlet.name}}</div>\n    <div class=\"status-layer cursor-pointer flex-fill\"\n      (click)=\"handleClickStatusMore()\">\n      <ng-container *ngIf=\"status === WCStatus.DataError\">\n        <img src=\"{{IGIX_HOME_PATH}}assets/img/data-error.svg\" alt=\"\">\n        <div class=\"error-tip fs-12 text-truncate\">\n          \u90E8\u4EF6\u6570\u636E\u52A0\u8F7D\u5931\u8D25\uFF0C\n          <span class=\"theme-color more\">\u67E5\u770B\u8BE6\u60C5</span>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <!-- normal -->\n  <!-- *ngIf=\"status === WCStatus.Normal\" -->\n  <div\n    class=\"h-100 d-flex flex-column\">\n    <!-- TODO: \u91CD\u6784 DOM \u7ED3\u6784\uFF0C\u628A title bar \u653E\u5728\u516C\u5171\u4F4D\u7F6E -->\n    <!-- \u516C\u5171 title bar -->\n    <lib-title-bar\n      #titleBar\n      *ngIf=\"curWidgetConfig?.enableCommonTitleBar\n        && widgetInstance\n        && !widgetInstance['titleBarHide']\"\n      [title]=\"portlet.name\"\n      [showRefresh]=\"widgetInstance['titleBarShowRefresh']\"\n      [jumpConfig]=\"widgetInstance['titleBarJump']\"\n      [filterConfigs]=\"propValues[FILTER_PROP_NAME] || []\"\n      [dims]=\"dims\"\n      (clickRefresh)=\"loadNSetData()\"\n      (filterChange)=\"handleFilterChange($event)\"\n      (init)=\"handleTitleBarInit($event)\"\n      [showRuntimeAgg]=\"showRuntimeAgg\"\n      (runtimeAggChange)=\"handleRuntimeAggChange($event)\"\n      >\n    </lib-title-bar>\n    <div class=\"flex-fill overflow-hidden\" >\n      <ng-container #wc></ng-container>\n    </div>\n  </div>\n</div>\n",
                styles: [".portlet-title{font-weight:700;padding:12px 20px 10px}.status-layer{width:100%;display:flex;align-items:center;justify-content:center;z-index:1;flex-direction:column}.status-layer img{width:75%;max-width:200px}.status-layer .error-tip{color:#666;margin:5px 0}.status-layer .error-tip .more{text-decoration:underline}.no-data{position:absolute;top:0;background:#fff}::ng-deep .widget-title-bar .left{overflow:hidden}::ng-deep .widget-title-bar .left .title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.loading-color{color:#b2bac4}.spin-ball{font-size:30px}"]
            }] }
];
/** @nocollapse */
WidgetComponent.ctorParameters = () => [
    { type: DynamicLoaderService$$1 },
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: NzModalService },
    { type: HttpClient },
    { type: TranslateService },
    { type: WidgetPropertyService },
    { type: WidgetEventService },
    { type: InstanceService }
];
WidgetComponent.propDecorators = {
    basicWidgetInfo: [{ type: Input }],
    propValues: [{ type: Input }],
    linkMap: [{ type: Input }],
    mode: [{ type: Input }],
    assetsBaseUrl: [{ type: Input }],
    portlet: [{ type: Input }],
    instanceId: [{ type: Input }],
    getData: [{ type: Input }],
    status: [{ type: Input }],
    widgetLoaded: [{ type: Output }],
    widgetInit: [{ type: Output }],
    runtimeAggChange: [{ type: Output }],
    resizeTarget: [{ type: ViewChild, args: ['resizeTarget',] }],
    widgetContainer: [{ type: ViewChild, args: ['wc', { read: ViewContainerRef },] }],
    titleBar: [{ type: ViewChild, args: ['titleBar',] }]
};
/**
 * newDpValues 合并到 this.dpValues，同 dpId 覆盖。
 * 此方法会改变 oldDpValues。
 * @param {?} oldDpValues
 * @param {?} newDpValues
 * @return {?}
 */
function mergeDpValues(oldDpValues, newDpValues) {
    for (const newDV of newDpValues.filter((/**
     * @param {?} dv
     * @return {?}
     */
    dv => dv.dpId))) {
        /** @type {?} */
        const targetOldDV = oldDpValues.find((/**
         * @param {?} oldDV
         * @return {?}
         */
        oldDV => oldDV.dpId === newDV.dpId));
        if (targetOldDV) {
            targetOldDV.value = newDV.value;
        }
        else {
            oldDpValues.push(newDV);
        }
    }
}
/**
 * @param {?=} oldDpValues
 * @param {?=} newDpValues
 * @return {?}
 */
function mergeDpValuesForNew(oldDpValues = [], newDpValues = []) {
    /** @type {?} */
    const result = oldDpValues.slice();
    mergeDpValues(result, newDpValues);
    return result;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterComponent {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
        this.singleValueChange = new EventEmitter();
        this.multiValueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.fs && changes.fs.currentValue != changes.fs.previousValue) {
            this.value = FilterSchema.getDefaultValue(this.fs);
        }
    }
    /**
     * @return {?}
     */
    getEnumItems() {
        return FSEnum.GetItems(this.fs.enum);
    }
    /**
     * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
     * 仅把多个值的数组发出去
     * @param {?} value
     * @return {?}
     */
    handleChange(value) {
        this.singleValueChange.emit(value);
    }
    /**
     * @param {?} values
     * @return {?}
     */
    handleChangeMulti(values) {
        this.multiValueChange.emit(values);
    }
}
FilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter',
                template: "<!-- {{fs.type|json}} -->\n<div class=\"d-flex align-items-center\" *ngIf=\"fs\">\n  <span *ngIf=\"fs.showName\"\n    class=\"text-truncate mr-1\">{{fs.i18nName[translate.currentLang]}}</span>\n  <ng-container *ngIf=\"fs.type==='date'\">\n    <ng-container *ngIf=\"fs.date.type==='single'\">\n      <nz-year-picker\n        *ngIf=\"fs.date.singleUnit==='year'\"\n        [(ngModel)]=\"value\"\n        nzFormat=\"YYYY\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-year-picker>\n      <nz-month-picker\n        *ngIf=\"fs.date.singleUnit==='month'\"\n        [(ngModel)]=\"value\"\n        nzFormat=\"YYYY-MM\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-month-picker>\n      <nz-date-picker\n        *ngIf=\"fs.date.singleUnit==='day'\"\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-date-picker>\n    </ng-container>\n\n    <nz-range-picker\n      *ngIf=\"fs.date.type==='range'\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChangeMulti($event)\"\n      ></nz-range-picker>\n\n    <ng-container *ngIf=\"fs.date.type=='lastTimeEnum'\">\n      <nz-select\n        class=\"\"\n        nzAllowClear\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"handleChange($event)\">\n        <nz-option\n          *ngFor=\"let lastTimeItem of fs.date.lastTimeItems\"\n          [nzValue]=\"lastTimeItem.num\"\n          [nzLabel]=\"\">last{{lastTimeItem.num}}{{lastTimeItem.unit}}</nz-option>\n      </nz-select>\n    </ng-container>\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='enum'\">\n    <!-- -{{getEnumItems()}}- -->\n    <!-- single -->\n    <nz-select\n      *ngIf=\"fs.enum.displayType==='select'\"\n      [nzMode]=\"fs.enum.multi ? 'multiple' : 'default'\"\n      class=\"col-sm-5\"\n      nzAllowClear\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"fs.enum.multi ? handleChangeMulti($event) : handleChange($event)\">\n      <nz-option\n        *ngFor=\"let item of getEnumItems()\"\n        [nzValue]=\"item.value\"\n        [nzLabel]=\"item.label || item.value\"></nz-option>\n    </nz-select>\n    <flat-select\n      *ngIf=\"!fs.enum.multi && fs.enum.displayType==='flat'\"\n      [options]=\"getEnumItems()\"\n      [(value)]=\"value\"\n      (valueChange)=\"handleChange($event)\"\n      ></flat-select>\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='number'\">\n    <input\n      type=\"number\"\n      class=\"form-control form-control-sm\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChange($event)\"\n      required />\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='text'\">\n    <input\n      type=\"text\"\n      class=\"form-control form-control-sm\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChange($event)\"\n      required />\n  </ng-container>\n</div>\n<ng-template #tagPlaceHolder let-selectedList> \u5DF2\u9009 {{selectedList.length}} \u9879</ng-template>\n",
                styles: ["nz-select{min-width:60px}"]
            }] }
];
/** @nocollapse */
FilterComponent.ctorParameters = () => [
    { type: TranslateService }
];
FilterComponent.propDecorators = {
    fs: [{ type: Input, args: ['filterSchema',] }],
    singleValueChange: [{ type: Output }],
    multiValueChange: [{ type: Output }]
};
class ColValuesPipe {
    /**
     * @param {?} data
     * @param {?} col
     * @return {?}
     */
    transform(data, col) {
        if (data && data.map)
            return Array.from(new Set(data.map((/**
             * @param {?} i
             * @return {?}
             */
            i => i[col]))));
    }
}
ColValuesPipe.decorators = [
    { type: Pipe, args: [{ name: 'colValues' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FlatSelectComponent {
    constructor() {
        this.options = [];
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
FlatSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'flat-select',
                template: "\n<ul class=\"d-flex\">\n  <li\n    *ngFor=\"let option of options\"\n    class=\"cursor-pointer transition\"\n    [class.active]=\"option.value === value\"\n    (click)=\"valueChange.emit(option.value)\"\n    >{{option.label || option.value}}</li>\n</ul>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["ul{margin-right:5px}ul li{padding:3px 10px;border-radius:100px}ul li.active,ul li:hover{background:#ecf0f3}"]
            }] }
];
/** @nocollapse */
FlatSelectComponent.ctorParameters = () => [];
FlatSelectComponent.propDecorators = {
    options: [{ type: Input }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FlatSelectModule {
}
FlatSelectModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FlatSelectComponent,
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    FlatSelectComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterModule {
}
FilterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FilterComponent,
                    ColValuesPipe,
                ],
                imports: [
                    CommonModule,
                    NzSelectModule,
                    NzDatePickerModule,
                    FormsModule,
                    FlatSelectModule,
                ],
                exports: [
                    FilterComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { FilterComponent } from './filter/filter.component';
// import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
// import { GridDesignerComponent } from '../../../designer/src/app/components/grid-designer/grid-designer.component';
// import {GridsterModule as Gridster2} from '@widget/gridster';
// TODO: 引用方式
// import { WidgetDevkitModule } from '@gspwidget/widget-devkit';
class WidgetCoreModule {
}
WidgetCoreModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    WidgetComponent,
                    TitleBarComponent,
                ],
                entryComponents: [],
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    ReactiveFormsModule,
                    AccordionModule.forRoot(),
                    ColorPickerModule,
                    // Gridster2
                    // TranslateModule.forRoot(),
                    TranslateModule,
                    NzAutocompleteModule,
                    NzModalModule,
                    NzDatePickerModule,
                    // NzSelectModule,
                    // 保证元部件在这层能获取到这里面的服务。
                    // 不能仅注册在 root，因为服务的服务不保证在 root 上；
                    // 不能都注册在 widget 里，因为会每个部件一个服务实例；
                    // 注册在这保证元部件在此层找到同一个服务实例、并且服务的服务也在 module 里提供了。
                    WidgetDevkitModule,
                    UtilModule,
                    FilterModule,
                    NzDropDownModule,
                    NzSelectModule,
                    NzInputModule,
                ],
                exports: [
                    WidgetComponent,
                ],
                providers: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WidgetCoreModule, WCStatus, WidgetComponent, DynamicLoaderService$$1 as DynamicLoaderService, FilterModule, FilterComponent, ColValuesPipe, isWidgetRuntimeAggActive, chartAggFieldMap, FlatSelectComponent, FlatSelectModule, TitleBarComponent, InstanceService };

//# sourceMappingURL=gspwidget-widget-core.js.map