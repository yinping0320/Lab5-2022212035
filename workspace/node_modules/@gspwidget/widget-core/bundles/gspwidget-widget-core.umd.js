(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ng-zorro-antd/auto-complete'), require('ngx-bootstrap/accordion'), require('ngx-color-picker'), require('ng-zorro-antd/modal'), require('resize-observer-polyfill'), require('rxjs/operators'), require('@angular/common/http'), require('@angular/platform-browser'), require('@angular/platform-browser/animations'), require('@angular/platform-browser-dynamic'), require('@angular/router'), require('@angular/animations'), require('@angular/animations/browser'), require('@ngx-translate/http-loader'), require('@gspwidget/util'), require('@gspwidget/widget-devkit'), require('@ngx-translate/core'), require('@angular/forms'), require('ng-zorro-antd/date-picker'), require('@angular/common'), require('@angular/core'), require('ng-zorro-antd/dropdown'), require('ng-zorro-antd/select'), require('ng-zorro-antd/input')) :
    typeof define === 'function' && define.amd ? define('@gspwidget/widget-core', ['exports', 'ng-zorro-antd/auto-complete', 'ngx-bootstrap/accordion', 'ngx-color-picker', 'ng-zorro-antd/modal', 'resize-observer-polyfill', 'rxjs/operators', '@angular/common/http', '@angular/platform-browser', '@angular/platform-browser/animations', '@angular/platform-browser-dynamic', '@angular/router', '@angular/animations', '@angular/animations/browser', '@ngx-translate/http-loader', '@gspwidget/util', '@gspwidget/widget-devkit', '@ngx-translate/core', '@angular/forms', 'ng-zorro-antd/date-picker', '@angular/common', '@angular/core', 'ng-zorro-antd/dropdown', 'ng-zorro-antd/select', 'ng-zorro-antd/input'], factory) :
    (factory((global.gspwidget = global.gspwidget || {}, global.gspwidget['widget-core'] = {}),global.autoComplete,global.accordion,global.ngxColorPicker,global.modal,global.ResizeObserver,global.rxjs.operators,global.ng.common.http,global.ng.platformBrowser,global.ng.platformBrowser.animations,global.ng.platformBrowserDynamic,global.ng.router,global.ng.animations,global.ng.animations.browser,global.NgxTranslateHttpLoader,global.UtilModule,global.WidgetDevkitModule,global.NgxTranslateCore,global.ng.forms,global.datePicker,global.ng.common,global.ng.core,global.dropdown,global.select,global.input));
}(this, (function (exports,autoComplete,accordion,ngxColorPicker,modal,ResizeObserver,operators,AngularCommonHttp,AngularPlatformBrowser,AngularPlatformBrowserAnimations,AngularPlatformBrowserDynamic,AngularRouter,AngularAnimations,AngularAnimationsBrowser,NgxTranslateHttpLoader,UtilModule,WidgetDevkitModule,NgxTranslateCore,AngularForms,datePicker,AngularCommon,i0,dropdown,select,input) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    var WidgetCoreModule$1 = /*#__PURE__*/Object.freeze({
        get WidgetCoreModule () { return WidgetCoreModule; },
        get WCStatus () { return WCStatus; },
        get WidgetComponent () { return WidgetComponent; },
        get DynamicLoaderService () { return DynamicLoaderService$$1; },
        get FilterModule () { return FilterModule; },
        get FilterComponent () { return FilterComponent; },
        get ColValuesPipe () { return ColValuesPipe; },
        get isWidgetRuntimeAggActive () { return isWidgetRuntimeAggActive; },
        get chartAggFieldMap () { return chartAggFieldMap; },
        get FlatSelectComponent () { return FlatSelectComponent; },
        get FlatSelectModule () { return FlatSelectModule; },
        get TitleBarComponent () { return TitleBarComponent; },
        get InstanceService () { return InstanceService; }
    });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import * as UtilModule from '@gspwidget/util';
    // import * as GridsterModule from '@gspwidget/gridster';
    // declare var System
    /* iGIX 内 systemjs 暂时是 3.x */
    if (!window.define) {
        UtilModule.appendScript(UtilModule.IGIX_HOME_PATH + "assets/amd.6.js");
    }
    /** @type {?} */
    var sys;
    var DynamicLoaderService$$1 = /** @class */ (function () {
        function DynamicLoaderService$$1(injector, http, componentFactoryResolver, widgetProperty) {
            this.injector = injector;
            this.http = http;
            this.componentFactoryResolver = componentFactoryResolver;
            this.widgetProperty = widgetProperty;
            /**
             * 为了避免 ng serve 时，webpack 会把 system.import
             * 拦截为自身的实现，无法满足现在的绝对地址加载
             */
            sys = window['System'];
            this.initSystemjsPromise = this.initSystemjs();
        }
        /**
         * @return {?}
         */
        DynamicLoaderService$$1.prototype.initSystemjs = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        sys.set('lib:@angular/common', AngularCommon);
                        sys.set('lib:@angular/common/http', AngularCommonHttp);
                        sys.set('lib:@angular/core', i0);
                        sys.set('lib:@angular/forms', AngularForms);
                        sys.set('lib:@angular/platform-browser', AngularPlatformBrowser);
                        sys.set('lib:@angular/platform-browser/animations', AngularPlatformBrowserAnimations);
                        sys.set('lib:@angular/platform-browser-dynamic', AngularPlatformBrowserDynamic);
                        sys.set('lib:@angular/router', AngularRouter);
                        sys.set('lib:@angular/animations', AngularAnimations);
                        sys.set('lib:@angular/animations/browser', AngularAnimationsBrowser);
                        sys.set('lib:@ngx-translate/core', NgxTranslateCore);
                        sys.set('lib:@ngx-translate/http-loader', NgxTranslateHttpLoader);
                        // sys.set('lib:@gspwidget/portlet', PortletModule)
                        sys.set('lib:@gspwidget/widget-core', WidgetCoreModule$1);
                        sys.set('lib:@gspwidget/widget-devkit', WidgetDevkitModule);
                        sys.set('lib:@gspwidget/util', UtilModule);
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * 加载元部件文件，并获取 widget 的详细信息供外面用
         */
        /**
         * 加载元部件文件，并获取 widget 的详细信息供外面用
         * @param {?} widgetInfo
         * @param {?} rawPropValues
         * @param {?} mode
         * @return {?}
         */
        DynamicLoaderService$$1.prototype.loadWidget = /**
         * 加载元部件文件，并获取 widget 的详细信息供外面用
         * @param {?} widgetInfo
         * @param {?} rawPropValues
         * @param {?} mode
         * @return {?}
         */
            function (widgetInfo, rawPropValues, mode) {
                return __awaiter(this, void 0, void 0, function () {
                    var widgetName, widgetCompFactory, widgetModuleFactory, _a, systemModule, widgetConfig, properties, propValues;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                widgetName = widgetInfo.name;
                                _a = mode;
                                switch (_a) {
                                    case UtilModule.WidgetContainerMode.AOT: return [3 /*break*/, 1];
                                    case UtilModule.WidgetContainerMode.DEV: return [3 /*break*/, 4];
                                }
                                return [3 /*break*/, 5];
                            case 1:
                                // 加载 widget js 文件
                                return [4 /*yield*/, this.initSystemjsPromise];
                            case 2:
                                // 加载 widget js 文件
                                _b.sent();
                                return [4 /*yield*/, sys.import((( /** @type {?} */(widgetInfo))).href + "?v=" + widgetInfo.version)];
                            case 3:
                                systemModule = _b.sent();
                                this.fixCompFacError(systemModule);
                                // 加载完成后，获取 widget 的详细信息供外面用
                                widgetCompFactory = getWidgetComponentFactory(widgetName, systemModule);
                                widgetModuleFactory = getModuleFactoryAot(systemModule);
                                return [3 /*break*/, 5];
                            case 4:
                                widgetCompFactory = this.componentFactoryResolver.resolveComponentFactory((( /** @type {?} */(widgetInfo))).widgetComponent);
                                return [3 /*break*/, 5];
                            case 5:
                                widgetConfig = WidgetDevkitModule.WidgetRegistry.getWidgetByName(widgetName);
                                properties = this.widgetProperty.getWidgetProps(widgetName, widgetConfig);
                                propValues = this.widgetProperty.mixinWidgetPropValues(properties, rawPropValues);
                                return [2 /*return*/, {
                                        widgetCompFactory: widgetCompFactory,
                                        widgetModuleFactory: widgetModuleFactory,
                                        properties: properties,
                                        propValues: propValues,
                                        widgetConfig: widgetConfig,
                                    }];
                        }
                    });
                });
            };
        /**
         * TODO:
         * 白萌提的问题，去掉试试，拿他的元部件试试。怀疑是之前一直没传入 module 的原因。
         * 修复元部件依赖的第三方组件中 this.componentFactoryResolver.resolveComponentFactory
         * 找不到第三方组件的 ComponentFactory 的问题，
         * 如 nz RateComponent 找不到 toolTipComponent
         */
        /**
         * TODO:
         * 白萌提的问题，去掉试试，拿他的元部件试试。怀疑是之前一直没传入 module 的原因。
         * 修复元部件依赖的第三方组件中 this.componentFactoryResolver.resolveComponentFactory
         * 找不到第三方组件的 ComponentFactory 的问题，
         * 如 nz RateComponent 找不到 toolTipComponent
         * @param {?} systemModule
         * @return {?}
         */
        DynamicLoaderService$$1.prototype.fixCompFacError = /**
         * TODO:
         * 白萌提的问题，去掉试试，拿他的元部件试试。怀疑是之前一直没传入 module 的原因。
         * 修复元部件依赖的第三方组件中 this.componentFactoryResolver.resolveComponentFactory
         * 找不到第三方组件的 ComponentFactory 的问题，
         * 如 nz RateComponent 找不到 toolTipComponent
         * @param {?} systemModule
         * @return {?}
         */
            function (systemModule) {
                var _this = this;
                Object.keys(systemModule)
                    .filter(( /**
             * @param {?} key
             * @return {?}
             */function (key) { return key.endsWith('ModuleNgFactory'); }))
                    .forEach(( /**
             * @param {?} key
             * @return {?}
             */function (key) {
                    try {
                        var _factories = systemModule[key].create(_this.injector).componentFactoryResolver._factories;
                        _factories.forEach(( /**
                         * @param {?} iFactory
                         * @return {?}
                         */function (iFactory) {
                            // @ts-ignore
                            _this.componentFactoryResolver._factories.set(iFactory.componentType, iFactory);
                        }));
                    }
                    catch (err) { }
                }));
            };
        DynamicLoaderService$$1.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        DynamicLoaderService$$1.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: AngularCommonHttp.HttpClient },
                { type: i0.ComponentFactoryResolver },
                { type: WidgetDevkitModule.WidgetPropertyService }
            ];
        };
        /** @nocollapse */ DynamicLoaderService$$1.ngInjectableDef = i0.defineInjectable({ factory: function DynamicLoaderService_Factory() { return new DynamicLoaderService$$1(i0.inject(i0.INJECTOR), i0.inject(AngularCommonHttp.HttpClient), i0.inject(i0.ComponentFactoryResolver), i0.inject(WidgetDevkitModule.WidgetPropertyService)); }, token: DynamicLoaderService$$1, providedIn: "root" });
        return DynamicLoaderService$$1;
    }());
    /**
     * @param {?} widgetName
     * @param {?} systemModule
     * @return {?}
     */
    function getWidgetComponentFactory(widgetName, systemModule) {
        /** @type {?} */
        var componentType = WidgetDevkitModule.WidgetRegistry.getWidgetByName(widgetName).ctor;
        if (componentType) {
            return Object.values(systemModule)
                .find(( /**
         * @param {?} fac
         * @return {?}
         */function (fac) { return fac.componentType === componentType; }));
        }
    }
    /**
     * @param {?} systemModule
     * @return {?}
     */
    function getModuleFactoryAot(systemModule) {
        /** @type {?} */
        var key = Object
            .keys(systemModule)
            .find(( /**
     * @param {?} k
     * @return {?}
     */function (k) { return k.endsWith('ModuleNgFactory'); }));
        return ( /** @type {?} */(systemModule[key]));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * instance 指运行时，在某处运行的一个部件。
     * 此服务被动收集、输出实例id与实例引用信息，
     * 主动调用者为 widgetComponent 或 portletComponent
     */
    var InstanceService = /** @class */ (function () {
        function InstanceService() {
            /**
             * 部件实例引用信息
             */
            this.instances = {};
        }
        /**
         * @param {?} insId
         * @return {?}
         */
        InstanceService.prototype.getInsByPInsId = /**
         * @param {?} insId
         * @return {?}
         */
            function (insId) {
                return this.instances[insId];
            };
        /**
         * @param {?} insId
         * @param {?} widgetComp
         * @param {?} type
         * @return {?}
         */
        InstanceService.prototype.addInsInfo = /**
         * @param {?} insId
         * @param {?} widgetComp
         * @param {?} type
         * @return {?}
         */
            function (insId, widgetComp, type) {
                if (!insId)
                    console.warn('ins id 为空');
                if (!this.instances[insId])
                    this.instances[insId] = {};
                this.instances[insId][type] = widgetComp;
            };
        InstanceService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        InstanceService.ctorParameters = function () { return []; };
        /** @nocollapse */ InstanceService.ngInjectableDef = i0.defineInjectable({ factory: function InstanceService_Factory() { return new InstanceService(); }, token: InstanceService, providedIn: "root" });
        return InstanceService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var aggFirstDim2Field = ( /**
     * @param {?} runtimeAgg
     * @param {?} allDims
     * @return {?}
     */function (runtimeAgg, allDims) { return getFieldByName(allDims, runtimeAgg.dimensions[0]); });
    /** @type {?} */
    var aggFirstInd2Field = ( /**
     * @param {?} runtimeAgg
     * @param {?} allDims
     * @return {?}
     */function (runtimeAgg, allDims) { return getFieldByName(allDims, runtimeAgg.indicators[0].dimName); });
    /** @type {?} */
    var stackAggFields = ( /**
     * @param {?=} pure
     * @return {?}
     */function (pure) {
        if (pure === void 0) {
            pure = false;
        }
        return [{
                name: 'yFieldObjs',
                valueFactory: ( /**
                 * @param {?} __0
                 * @param {?} allDims
                 * @return {?}
                 */function (_a, allDims) {
                    var indicators = _a.indicators;
                    return indicators.map(( /**
                     * @param {?} ind
                     * @param {?} i
                     * @return {?}
                     */function (ind, i) {
                        return ({
                            valueField: getFieldByName(allDims, ind.dimName),
                            color: pure
                                ? UtilModule.PlThemeColors.pure[i % indicators.length]
                                : UtilModule.PlThemeColors.gradient[i % indicators.length]
                        });
                    }));
                })
            }, {
                name: 'categoryFieldName',
                valueFactory: aggFirstDim2Field
            }];
    });
    /** @type {?} */
    var barAggFields = [
        { name: 'categoryFieldName', valueFactory: aggFirstDim2Field },
        { name: 'valueFieldName', valueFactory: aggFirstInd2Field }
    ];
    /** @type {?} */
    var chartAggFieldMap = {
        stack: stackAggFields(),
        area: stackAggFields(true),
        'bar-group': stackAggFields(),
        'widget-line': stackAggFields(true),
        bar: barAggFields,
        pie: barAggFields,
        pie2: barAggFields,
        'bar-horizontal': barAggFields,
        'simple-line': barAggFields,
        'bar-multiple': [{
                categoryFieldName: aggFirstDim2Field,
                valueFieldNameOne: aggFirstInd2Field,
                valueFieldNameTwo: ( /**
                 * @param {?} runtimeAgg
                 * @param {?} allDims
                 * @return {?}
                 */function (runtimeAgg, allDims) { return getFieldByName(allDims, runtimeAgg.indicators[1].dimName); }),
            }]
    };
    /**
     * @param {?} dims
     * @param {?} dimName
     * @return {?}
     */
    function getFieldByName(dims, dimName) {
        var _a = dims.find(( /**
         * @param {?} dim
         * @return {?}
         */function (dim) { return dim.name === dimName; })), name = _a.name, label = _a.label;
        return { name: name, label: label };
    }
    /**
     * @param {?} widgetName
     * @return {?}
     */
    function isWidgetRuntimeAggActive(widgetName) {
        return Object
            .keys(chartAggFieldMap)
            .includes(widgetName);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // private langsSet: { [widgetName: string]: string[] } = {}
    /**
     * 已被 set 翻译的 lang，下次不再请求此 lang
     * @type {?}
     */
    var loadedI18nUrls = [];
    /** @enum {number} */
    var WCStatus = {
        LoadingWidget: 0,
        LoadingData: 1,
        DataEmpty: 2,
        Normal: 3,
        DataError: 4,
        WidgetLoadError: 5,
    };
    WCStatus[WCStatus.LoadingWidget] = 'LoadingWidget';
    WCStatus[WCStatus.LoadingData] = 'LoadingData';
    WCStatus[WCStatus.DataEmpty] = 'DataEmpty';
    WCStatus[WCStatus.Normal] = 'Normal';
    WCStatus[WCStatus.DataError] = 'DataError';
    WCStatus[WCStatus.WidgetLoadError] = 'WidgetLoadError';
    UtilModule.loadCommonStyleNTheme();
    /**
     * 兼容阶段数据加载逻辑
     * 1. 若元部件 useDataEngine === true, 说明是老写法、且需要数据的元部件，但其内部未调用加载数据，所以初始化完成后加载一下；
     *    新数据加载请求处理永远启用，因为仅有新写法元部件会触发；
     * 2. 若 getData 有值，则用它获得数据，不用真数据
     * 3. 若名中带有 '演示'，则用演示数据
     * 4. 都不满足再用真数据
     */
    var WidgetComponent = /** @class */ (function () {
        /** 公共头上是否显示运行时聚合配置 */
        function WidgetComponent(loader, cd, injector, modal$$1, http, translate, widgetPropertyService, widgetEventService, insSerivce) {
            var _this = this;
            this.loader = loader;
            this.cd = cd;
            this.injector = injector;
            this.modal = modal$$1;
            this.http = http;
            this.translate = translate;
            this.widgetPropertyService = widgetPropertyService;
            this.widgetEventService = widgetEventService;
            this.insSerivce = insSerivce;
            /**
             * 可选
             */
            this.mode = UtilModule.WidgetContainerMode.AOT;
            // TODO: 解耦 portlet
            /**
             * 可选，部件信息，需要注入到元部件
             */
            this.portlet = new UtilModule.EppPortlet(null);
            this.status = WCStatus.LoadingWidget;
            /**
             * widget 加载完成，发出当前 widget 的信息
             */
            this.widgetLoaded = new i0.EventEmitter();
            /**
             * widget component create 完成，发出当前 widget 的信息
             */
            this.widgetInit = new i0.EventEmitter();
            this.runtimeAggChange = new i0.EventEmitter();
            // public isLoading = true
            // public status = WCStatus.Normal
            this.WCStatus = WCStatus;
            this.IGIX_HOME_PATH = UtilModule.IGIX_HOME_PATH;
            this.FILTER_PROP_NAME = WidgetDevkitModule.FILTER_PROP_NAME;
            // public feFilterValues: FrontendFilter[]
            /**
             * 存在此层的数据。可用于前端筛选、数据获取状态判断
             */
            this.data = null;
            this.showRuntimeAgg = false;
            /**
             * pv 中包含 {fs,dp}[]（筛选控件+取数参数=筛选）
             * 部件实例中保存 {fs,dp}: filterValue
             */
            this.dpValues = [];
            this.handleDataError = ( /**
             * @return {?}
             */function () {
                // 数据加载失败
                _this.status = WCStatus.DataError;
                _this.cd.markForCheck();
            });
            this._initWidgetEnv();
        }
        /**
         * 全局初始化
         */
        /**
         * 全局初始化
         * @private
         * @return {?}
         */
        WidgetComponent.prototype._initWidgetEnv = /**
         * 全局初始化
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                // i18n
                if (!this.translate.defaultLang)
                    this.translate.setDefaultLang('zh-CHS');
                if (!this.translate.currentLang) {
                    /** @type {?} */
                    var lang = localStorage.getItem('languageCode') || 'zh-CHS';
                    this.translate.use(lang || 'zh-CHS');
                }
                if (!window.widgetI18nResLoaded) {
                    var currentLang_1 = this.translate.currentLang;
                    this.http.get(UtilModule.IGIX_HOME_PATH + "assets/i18n/" + currentLang_1 + ".json").subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.translate.setTranslation(currentLang_1, res, true);
                    }));
                    window.widgetI18nResLoaded = true;
                }
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.insSerivce.addInsInfo(this.instanceId, this, 'widgetComp');
                // 监听 resizeTarget 的大小变化，变化时调用元部件.onResized()，传入 DomRectReadonly
                if (this.resizeTarget) {
                    new ResizeObserver(( /**
                     * @param {?} entries
                     * @return {?}
                     */function (entries) {
                        var _a = entries[0].contentRect, width = _a.width, height = _a.height;
                        if (_this.widgetInstance)
                            _this.widgetInstance.onResized(width, height);
                        _this.width = width;
                        _this.height = height;
                        _this.cd.markForCheck();
                    })).observe(this.resizeTarget.nativeElement);
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        WidgetComponent.prototype.ngOnChanges = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                var basicWidgetInfo = c.basicWidgetInfo;
                if (basicWidgetInfo && basicWidgetInfo.currentValue && basicWidgetInfo.currentValue !== basicWidgetInfo.previousValue) {
                    // widget 变了，渲染新元部件
                    this.renderWidget();
                }
            };
        /**
         * 此 container 被 gridster 渲染出正确的大小事件
         */
        /**
         * 此 container 被 gridster 渲染出正确的大小事件
         * @return {?}
         */
        WidgetComponent.prototype.triggerWidgetResize = /**
         * 此 container 被 gridster 渲染出正确的大小事件
         * @return {?}
         */
            function () {
                if (this.widgetInstance && this.widgetInstance.onResized) {
                    var _a = this.resizeTarget.nativeElement, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
                    this.widgetInstance.onResized(clientWidth, clientHeight);
                }
            };
        // TODO: 这些都改造成，参数为一个对象，里面可以一次塞多个属性-值，全部更新后再触发 onPropertyChange，
        // 否则像初始化完要赋多个值的情况，通知触发太频繁了，也会导致频繁触发元部件渲染、数据加载
        /**
         * 外部更新元部件 propValues 的某属性后，需要调用此方法，否则我们不知道 propValues 发生了变化。
         * 不太好精简掉这个方法。尝试过用 keyValueDiffer 在 ngDoCheck 中检测 propValues 变化，但仅能检测一层。
         */
        // TODO: 这些都改造成，参数为一个对象，里面可以一次塞多个属性-值，全部更新后再触发 onPropertyChange，
        // 否则像初始化完要赋多个值的情况，通知触发太频繁了，也会导致频繁触发元部件渲染、数据加载
        /**
         * 外部更新元部件 propValues 的某属性后，需要调用此方法，否则我们不知道 propValues 发生了变化。
         * 不太好精简掉这个方法。尝试过用 keyValueDiffer 在 ngDoCheck 中检测 propValues 变化，但仅能检测一层。
         * @param {?} propName
         * @param {?} pValue
         * @return {?}
         */
        WidgetComponent.prototype.setPropertyValue =
            // TODO: 这些都改造成，参数为一个对象，里面可以一次塞多个属性-值，全部更新后再触发 onPropertyChange，
            // 否则像初始化完要赋多个值的情况，通知触发太频繁了，也会导致频繁触发元部件渲染、数据加载
            /**
             * 外部更新元部件 propValues 的某属性后，需要调用此方法，否则我们不知道 propValues 发生了变化。
             * 不太好精简掉这个方法。尝试过用 keyValueDiffer 在 ngDoCheck 中检测 propValues 变化，但仅能检测一层。
             * @param {?} propName
             * @param {?} pValue
             * @return {?}
             */
            function (propName, pValue) {
                // TODO: portlet 结构改变后，可以省去这一步：__extra 应该根本不会传进来
                if (propName === '__extra')
                    return;
                // 如果不是 object，则判断值如果 pValue 与当前元部件实例中相同，就不传给部件了
                if (typeof pValue !== 'object' && this.widgetInstance[propName] === pValue)
                    return;
                // TODO: 部件配置时，运行时更改语言的处理
                /** @type {?} */
                var value = this.processPV(pValue);
                // 改值
                this.widgetInstance[propName] = value;
                // 通知，因为元部件可能需要这个时机
                // 防止没有这个方法的老元部件报错，后面都会升级掉
                if (this.widgetInstance.onPropertyChange) {
                    this.widgetInstance.onPropertyChange(propName, value);
                }
                if (propName === WidgetDevkitModule.FILTER_PROP_NAME) {
                    this.dpValues = (( /** @type {?} */(pValue)))
                        .filter(( /**
                 * @param {?} dv
                 * @return {?}
                 */function (dv) { return dv.dpId; }))
                        .map(( /**
                 * @param {?} fc
                 * @return {?}
                 */function (fc) {
                        return ({
                            value: WidgetDevkitModule.FilterSchema.getDefaultValue(fc.fs),
                            dpId: fc.dpId
                        });
                    }));
                    // TODO:
                    // if (pValue && pValue.slice) this.propValues[FILTER_PROP_NAME] = pValue.slice()
                    // this.cd.markForCheck()
                }
                if (!this.propValues)
                    this.propValues = {};
                this.propValues[propName] = pValue;
                this.cd.markForCheck();
            };
        /* 递归检查 pv，做特殊处理，比如国际化、帮助 */
        /* 递归检查 pv，做特殊处理，比如国际化、帮助 */
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        WidgetComponent.prototype.processPV = /* 递归检查 pv，做特殊处理，比如国际化、帮助 */
            /**
             * @private
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var currentLang = this.translate.currentLang;
                try {
                    value = JSON.parse(JSON.stringify(value));
                }
                catch (e) { }
                return _processPVRecursively(value);
                /**
                 * @param {?} pValue
                 * @return {?}
                 */
                function _processPVRecursively(pValue) {
                    if (Array.isArray(pValue)) {
                        pValue.forEach(( /**
                         * @param {?} v
                         * @param {?} i
                         * @return {?}
                         */function (v, i) {
                            pValue[i] = _processPVRecursively(v);
                        }));
                        return pValue;
                        // i18n: 如果 value 中包含 en 或 zh-CHS 或 当前语言的key，则是 i18n 字段
                    }
                    else if (pValue && !pValue._notProcess && typeof (pValue.en + pValue['zh-CHS'] + pValue[currentLang]) === 'string') {
                        return pValue[currentLang];
                        // help
                    }
                    else if (pValue && pValue.__type === 'help') {
                        return pValue.value;
                    }
                    else if (pValue && ['Object'].includes(pValue.constructor.name)) {
                        Object.keys(pValue).forEach(( /**
                         * @param {?} key
                         * @return {?}
                         */function (key) {
                            pValue[key] = _processPVRecursively(pValue[key]);
                        }));
                        return pValue;
                    }
                    else {
                        return pValue;
                    }
                }
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.renderWidget = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var baseUrl, curWidgetData, widgetCompFactory, widgetModuleFactory, propValues, widgetConfig, injector;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                // 加载渲染这个 widget 需要的一切元数据
                                baseUrl = this.basicWidgetInfo.baseUrl;
                                return [4 /*yield*/, this.loader.loadWidget(this.basicWidgetInfo, this.propValues, this.mode)
                                    // TODO: propValues 是不是不用经过 loader，直接调 widgetPropService 获取就行？
                                ];
                            case 1:
                                curWidgetData = _a.sent();
                                // TODO: propValues 是不是不用经过 loader，直接调 widgetPropService 获取就行？
                                widgetCompFactory = curWidgetData.widgetCompFactory, widgetModuleFactory = curWidgetData.widgetModuleFactory, propValues = curWidgetData.propValues, widgetConfig = curWidgetData.widgetConfig;
                                this.curWidgetConfig = widgetConfig;
                                this.initRuntimeAgg();
                                if (this.curWidgetConfig.enableLoadingI18n)
                                    this.loadI18nRes();
                                // 元部件加载完成事件
                                this.widgetLoaded.emit(curWidgetData);
                                // 删老元部件
                                this.widgetContainer.remove();
                                // 创建注入器
                                injector = i0.Injector.create({
                                    providers: [{
                                            provide: WidgetDevkitModule.WidgetInstanceInfo,
                                            /**
                                             * 元部件实例信息
                                             */
                                            useValue: new WidgetDevkitModule.WidgetInstanceInfo(this.portlet.id, this.instanceId, this.assetsBaseUrl || this.basicWidgetInfo.baseUrl + '/assets/')
                                        }, {
                                            provide: WidgetDevkitModule.WidgetDataService,
                                            /**
                                             * 元部件数据服务
                                             */
                                            useFactory: ( /**
                                             * @return {?}
                                             */function () {
                                                _this.widgetDataService = new WidgetDevkitModule.WidgetDataService();
                                                _this.widgetDataService.onLoadData
                                                    .pipe(operators.delay(0)) // 为避免用 of(data) 会同步返回数据，导致 data service 中的 onGetData 还没返回到元部件手里就触发完了
                                                    .subscribe(_this.loadNSetData.bind(_this));
                                                return _this.widgetDataService;
                                            }),
                                            deps: []
                                        }],
                                    parent: this.injector
                                });
                                // 创建、挂载 widget 组件
                                this.widgetInstance = ( /** @type {?} */(this.widgetContainer.createComponent(widgetCompFactory, 0, injector, undefined, widgetModuleFactory && widgetModuleFactory.create(this.injector)).instance));
                                // 设置 widget 的 properties 的 values
                                // TODO: 改为一次配多个
                                Object.keys(propValues).forEach(( /**
                                 * @param {?} prop
                                 * @return {?}
                                 */function (prop) {
                                    _this.setPropertyValue(prop, propValues[prop]);
                                }));
                                // TODO: 已废弃方案, 以下为过渡方案以兼容老写法元部件, 后期将移除
                                this.widgetInstance.id = this.instanceId;
                                this.widgetInstance.portletId = this.portlet.id;
                                this.widgetInstance.assetsBaseUrl = this.assetsBaseUrl || baseUrl + '/assets/';
                                if (this.widgetInstance.useDataEngine)
                                    this.loadNSetData({});
                                // TODO: 它完成之后才算作 widget 初始化完成，可以显示出来。否则会显示 code。
                                // this.setWidgetTranslation()
                                // event
                                this.initWidgetEventListener();
                                // 元部件初始化完成事件
                                this.widgetInit.emit(curWidgetData);
                                // this.isLoading = false
                                this.status = WCStatus.Normal;
                                this.cd.markForCheck();
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @private
         * @return {?}
         */
        WidgetComponent.prototype.loadI18nRes = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                var currentLang = this.translate.currentLang;
                var _a = this.basicWidgetInfo, name = _a.name, baseUrl = _a.baseUrl;
                var customI18nResourceUrl = this.curWidgetConfig.customI18nResourceUrl;
                /** @type {?} */
                var i18nResUrl = customI18nResourceUrl || baseUrl + "/assets/i18n/" + currentLang + ".json";
                // 缓存曾加载过的资源文件名，下次相同文件不再请求。缓存资源文件名，是因为可能多个元部件指定相同的资源文件。
                if (loadedI18nUrls.includes(i18nResUrl))
                    return;
                loadedI18nUrls.push(i18nResUrl);
                return this.http.get(i18nResUrl).toPromise().then(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.translate.setTranslation(currentLang, res, true);
                }), ( /**
                 * @return {?}
                 */function () {
                    console.log("\u5143\u90E8\u4EF6 " + name + " \u65E0 " + currentLang + " \u7684\u8D44\u6E90\u6587\u4EF6");
                })).finally(( /**
                 * @return {?}
                 */function () {
                    return Promise.resolve();
                }));
            };
        /**
         * 塞数据入口 1/2: 加载数据并塞给部件
         */
        // TODO: loadNSetData 可能是不带参数的。取数参数可能存在当前 widget 实例里，直接取。
        // loadNSetData 有没有可能带着来自部件的额外参数？
        /**
         * 塞数据入口 1/2: 加载数据并塞给部件
         * @param {?=} param
         * @return {?}
         */
        // TODO: loadNSetData 可能是不带参数的。取数参数可能存在当前 widget 实例里，直接取。
        // loadNSetData 有没有可能带着来自部件的额外参数？
        WidgetComponent.prototype.loadNSetData = /**
         * 塞数据入口 1/2: 加载数据并塞给部件
         * @param {?=} param
         * @return {?}
         */
            // TODO: loadNSetData 可能是不带参数的。取数参数可能存在当前 widget 实例里，直接取。
            // loadNSetData 有没有可能带着来自部件的额外参数？
            function (param) {
                var _this = this;
                if (param === void 0) {
                    param = {};
                }
                /** @type {?} */
                var ob = this.getData({
                    dpValues: mergeDpValuesForNew(this.dpValues, param.dpValues),
                    runtimeAgg: this.runtimeAgg
                });
                if (!ob)
                    return;
                ob.subscribe(( /**
                 * @param {?} dataWithDims
                 * @return {?}
                 */function (dataWithDims) {
                    _this.setData(dataWithDims);
                }), this.handleDataError.bind(this));
            };
        /**
         * 给元部件重新设置数据结果，外部可调用此方法给部件设置数据。
         */
        /**
         * 给元部件重新设置数据结果，外部可调用此方法给部件设置数据。
         * @param {?} pDataWithDims
         * @return {?}
         */
        WidgetComponent.prototype.setData = /**
         * 给元部件重新设置数据结果，外部可调用此方法给部件设置数据。
         * @param {?} pDataWithDims
         * @return {?}
         */
            function (pDataWithDims) {
                /** @type {?} */
                var dataWithDims = pDataWithDims;
                // set if empty status
                if (!pDataWithDims || !pDataWithDims.tableData || pDataWithDims.tableData.length === 0)
                    this.status = WCStatus.DataEmpty;
                // 如果外面没有给 DataWithDims 而是简单数据列表，就简单转一把。以兼容 config 里的假数据等。
                if (!pDataWithDims.dimensions && pDataWithDims['length']) {
                    dataWithDims = {
                        dimensions: Object
                            .keys(pDataWithDims[0])
                            .map(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) { return ({ name: key, label: key }); })),
                        tableData: (( /** @type {?} */(( /** @type {?} */(pDataWithDims)))))
                    };
                }
                this.status = WCStatus.Normal;
                this.data = dataWithDims.tableData;
                this.dims = dataWithDims.dimensions;
                if (this.widgetDataService)
                    this.widgetDataService.setData(dataWithDims);
                if (this.widgetInstance && this.widgetInstance.useDataEngine)
                    this.widgetInstance.onGetData(dataWithDims.tableData); // 兼容用途
                // 给元部件设置完数据，若有运行时聚合，还需要重新绑定字段
                this.setRuntimeAggDims();
                this.cd.markForCheck();
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.handleClickStatusMore = /**
         * @return {?}
         */
            function () {
                this.modal.error({
                    nzTitle: '小部件错误',
                    nzContent: '此小部件的数据配置无效，需要管理员重新配置或删除。'
                });
            };
        /**
         * @param {?} dpValues
         * @return {?}
         */
        WidgetComponent.prototype.handleFilterChange = /**
         * @param {?} dpValues
         * @return {?}
         */
            function (dpValues) {
                mergeDpValues(this.dpValues, dpValues);
                this.loadNSetData();
            };
        /**
         * @param {?} runtimeAgg
         * @return {?}
         */
        WidgetComponent.prototype.handleRuntimeAggChange = /**
         * @param {?} runtimeAgg
         * @return {?}
         */
            function (runtimeAgg) {
                // if (objectLiteralEqual(runtimeAgg, this.runtimeAgg)) return
                this.runtimeAgg = runtimeAgg;
                // 下面两行顺序严格，因为外部加载数据时可能要依赖当前最新的 runtimeAgg
                this.runtimeAggChange.emit(runtimeAgg);
                this.loadNSetData();
            };
        /** 当前写法需要保证 renderWidget() 已完成 */
        /**
         * 当前写法需要保证 renderWidget() 已完成
         * @param {?} titleBar
         * @return {?}
         */
        WidgetComponent.prototype.handleTitleBarInit = /**
         * 当前写法需要保证 renderWidget() 已完成
         * @param {?} titleBar
         * @return {?}
         */
            function (titleBar) {
                if (this.showRuntimeAgg) {
                    titleBar.setRuntimeAgg(this.runtimeAgg);
                }
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.initRuntimeAgg = /**
         * @return {?}
         */
            function () {
                // runtime agg
                this.showRuntimeAgg = isWidgetRuntimeAggActive(this.basicWidgetInfo.name);
                if (this.showRuntimeAgg) {
                    this.runtimeAgg = this.propValues.__extra ? this.propValues.__extra.runtimeAgg : null;
                }
            };
        // TODO: 以后把 su 放 basic... 里
        /**
         * 初始化部件事件监听
         */
        // TODO: 以后把 su 放 basic... 里
        /**
         * 初始化部件事件监听
         * @private
         * @return {?}
         */
        WidgetComponent.prototype.initWidgetEventListener =
            // TODO: 以后把 su 放 basic... 里
            /**
             * 初始化部件事件监听
             * @private
             * @return {?}
             */
            function () {
                var _this = this;
                if (!this.linkMap)
                    return;
                if (this.amIFilterWidget()) {
                    this.initOneEventListener(UtilModule.FILTERS_WIDGET_PROP_NAME);
                }
                else {
                    this.widgetEventService
                        .getEventsByWidgetName(this.basicWidgetInfo.name, this.propValues)
                        .forEach(( /**
                 * @param {?} eventConfig
                 * @return {?}
                 */function (eventConfig) {
                        _this.initOneEventListener(eventConfig.propName);
                    }));
                }
            };
        /**
         * eventPropName 是事件对应的实际属性名，
         * eventKey 配置在 link 里的事件名。
         * 一般他俩是一样的，后者可以不传。
         * 若是筛选部件，则两者不同，一个是 'filter'，一个是实际的事件（筛选）名称。
         */
        /**
         * eventPropName 是事件对应的实际属性名，
         * eventKey 配置在 link 里的事件名。
         * 一般他俩是一样的，后者可以不传。
         * 若是筛选部件，则两者不同，一个是 'filter'，一个是实际的事件（筛选）名称。
         * @private
         * @param {?} eventPropName
         * @return {?}
         */
        WidgetComponent.prototype.initOneEventListener = /**
         * eventPropName 是事件对应的实际属性名，
         * eventKey 配置在 link 里的事件名。
         * 一般他俩是一样的，后者可以不传。
         * 若是筛选部件，则两者不同，一个是 'filter'，一个是实际的事件（筛选）名称。
         * @private
         * @param {?} eventPropName
         * @return {?}
         */
            function (eventPropName) {
                var _this = this;
                /** @type {?} */
                var eventEmitter = this.widgetInstance[eventPropName];
                if (eventEmitter)
                    eventEmitter.subscribe(( /**
                     * @param {?} widgetEventParam
                     * @return {?}
                     */function (widgetEventParam) {
                        console.log('联动事件触发，参数：' + widgetEventParam);
                        /** @type {?} */
                        var linkEventKey = _this.amIFilterWidget()
                            ? (( /** @type {?} */(widgetEventParam))).eventKey
                            : eventPropName;
                        // 根据 link map 调用其他 ins 根据 重新加载数据
                        /** @type {?} */
                        var pInsLink = _this.linkMap[linkEventKey];
                        Object.keys(pInsLink).forEach(( /**
                         * @param {?} pInsId
                         * @return {?}
                         */function (pInsId) {
                            if (!pInsLink[pInsId] || !pInsLink[pInsId].active || !pInsLink[pInsId].dpId)
                                return;
                            /** @type {?} */
                            var targetWIns = _this.insSerivce.getInsByPInsId(pInsId).widgetComp;
                            if (targetWIns)
                                targetWIns.loadNSetData({
                                    dpValues: [{
                                            dpId: pInsLink[pInsId].dpId,
                                            // TODO: 联动参数值的处理加在这
                                            value: String(widgetEventParam['dataIndex']),
                                        }]
                                });
                        }));
                    }));
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.setRuntimeAggDims = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.runtimeAgg)
                    return;
                chartAggFieldMap[this.basicWidgetInfo.name].forEach(( /**
                 * @param {?} aggField
                 * @return {?}
                 */function (aggField) {
                    _this.setPropertyValue(aggField.name, aggField.valueFactory(_this.runtimeAgg, _this.dims));
                }));
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.amIFilterWidget = /**
         * @return {?}
         */
            function () {
                return this.basicWidgetInfo.name === UtilModule.FILTERS_WIDGET_NAME
                    && this.basicWidgetInfo.baseUrl.includes('/epp/');
            };
        WidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-widget',
                        template: "<div\n  #resizeTarget\n  class=\"wc-wrapper h-100 overflow-hidden position-relative\">\n  <!-- TODO: \u589E\u52A0\u516C\u5171\u7684\u52A0\u8F7D\u906E\u7F69\u5C42\uFF0C\u6570\u636E\u670D\u52A1\u52A0\u8F7D\u65F6\u3001\u90E8\u4EF6\u5185\u8C03\u7528\u65F6\u3001\u90E8\u4EF6\u672C\u8EAB\u52A0\u8F7D\u90FD\u7528\u5B83 -->\n  <!-- loading -->\n  <div\n    *ngIf=\"[WCStatus.LoadingWidget, WCStatus.LoadingData].includes(status)\"\n    class=\"h-100 d-flex justify-content-center align-items-center\">\n    <div class=\"text-center\">\n      <i class=\"spin-ball loading-color material-icons\">public</i>\n      <div class=\"fs-12 loading-color\">{{'\u90E8\u4EF6\u52A0\u8F7D\u4E2D' | trans}}</div>\n    </div>\n  </div>\n\n  <!-- TODO: \u90E8\u4EF6\u52A0\u8F7D\u5931\u8D25\u3002\u600E\u4E48\u7EDF\u4E00\u5904\u7406\u8FD9\u51E0\u79CD\u5F02\u5E38\u72B6\u6001\uFF1F -->\n  <!-- <div\n    *ngIf=\"status === WCStatus.WidgetLoadError\">\n  </div> -->\n\n  <!-- \u65E0\u6570\u636E -->\n  <div\n    *ngIf=\"status === WCStatus.DataEmpty\"\n    class=\"flex-fill no-data h-100 w-100 d-flex flex-column\">\n    <lib-title-bar\n      *ngIf=\"curWidgetConfig?.enableCommonTitleBar\n        && widgetInstance\n        && !widgetInstance['titleBarHide']\"\n      [title]=\"portlet.name\"\n      [showRefresh]=\"widgetInstance['titleBarShowRefresh']\"\n      [jumpConfig]=\"widgetInstance['titleBarJump']\"\n      ></lib-title-bar>\n    <div class=\"flex-fill d-flex flex-column justify-content-center align-items-center\">\n      <img src=\"{{IGIX_HOME_PATH}}assets/img/data-empty.svg\" style=\"transform:translateY(-5px)\" alt=\"\">\n      <div class=\"fs-13\" style=\"color:gray\">{{'noDataAvailable'|translate}}</div>\n    </div>\n  </div>\n\n  <!-- abnormal -->\n  <div class=\"d-flex flex-column overflow-hidden h-100\"\n    *ngIf=\"status === WCStatus.DataError\">\n    <div class=\"portlet-title text-truncate flex-shrink-0\">{{this.portlet.name}}</div>\n    <div class=\"status-layer cursor-pointer flex-fill\"\n      (click)=\"handleClickStatusMore()\">\n      <ng-container *ngIf=\"status === WCStatus.DataError\">\n        <img src=\"{{IGIX_HOME_PATH}}assets/img/data-error.svg\" alt=\"\">\n        <div class=\"error-tip fs-12 text-truncate\">\n          \u90E8\u4EF6\u6570\u636E\u52A0\u8F7D\u5931\u8D25\uFF0C\n          <span class=\"theme-color more\">\u67E5\u770B\u8BE6\u60C5</span>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <!-- normal -->\n  <!-- *ngIf=\"status === WCStatus.Normal\" -->\n  <div\n    class=\"h-100 d-flex flex-column\">\n    <!-- TODO: \u91CD\u6784 DOM \u7ED3\u6784\uFF0C\u628A title bar \u653E\u5728\u516C\u5171\u4F4D\u7F6E -->\n    <!-- \u516C\u5171 title bar -->\n    <lib-title-bar\n      #titleBar\n      *ngIf=\"curWidgetConfig?.enableCommonTitleBar\n        && widgetInstance\n        && !widgetInstance['titleBarHide']\"\n      [title]=\"portlet.name\"\n      [showRefresh]=\"widgetInstance['titleBarShowRefresh']\"\n      [jumpConfig]=\"widgetInstance['titleBarJump']\"\n      [filterConfigs]=\"propValues[FILTER_PROP_NAME] || []\"\n      [dims]=\"dims\"\n      (clickRefresh)=\"loadNSetData()\"\n      (filterChange)=\"handleFilterChange($event)\"\n      (init)=\"handleTitleBarInit($event)\"\n      [showRuntimeAgg]=\"showRuntimeAgg\"\n      (runtimeAggChange)=\"handleRuntimeAggChange($event)\"\n      >\n    </lib-title-bar>\n    <div class=\"flex-fill overflow-hidden\" >\n      <ng-container #wc></ng-container>\n    </div>\n  </div>\n</div>\n",
                        styles: [".portlet-title{font-weight:700;padding:12px 20px 10px}.status-layer{width:100%;display:flex;align-items:center;justify-content:center;z-index:1;flex-direction:column}.status-layer img{width:75%;max-width:200px}.status-layer .error-tip{color:#666;margin:5px 0}.status-layer .error-tip .more{text-decoration:underline}.no-data{position:absolute;top:0;background:#fff}::ng-deep .widget-title-bar .left{overflow:hidden}::ng-deep .widget-title-bar .left .title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.loading-color{color:#b2bac4}.spin-ball{font-size:30px}"]
                    }] }
        ];
        /** @nocollapse */
        WidgetComponent.ctorParameters = function () {
            return [
                { type: DynamicLoaderService$$1 },
                { type: i0.ChangeDetectorRef },
                { type: i0.Injector },
                { type: modal.NzModalService },
                { type: AngularCommonHttp.HttpClient },
                { type: NgxTranslateCore.TranslateService },
                { type: WidgetDevkitModule.WidgetPropertyService },
                { type: WidgetDevkitModule.WidgetEventService },
                { type: InstanceService }
            ];
        };
        WidgetComponent.propDecorators = {
            basicWidgetInfo: [{ type: i0.Input }],
            propValues: [{ type: i0.Input }],
            linkMap: [{ type: i0.Input }],
            mode: [{ type: i0.Input }],
            assetsBaseUrl: [{ type: i0.Input }],
            portlet: [{ type: i0.Input }],
            instanceId: [{ type: i0.Input }],
            getData: [{ type: i0.Input }],
            status: [{ type: i0.Input }],
            widgetLoaded: [{ type: i0.Output }],
            widgetInit: [{ type: i0.Output }],
            runtimeAggChange: [{ type: i0.Output }],
            resizeTarget: [{ type: i0.ViewChild, args: ['resizeTarget',] }],
            widgetContainer: [{ type: i0.ViewChild, args: ['wc', { read: i0.ViewContainerRef },] }],
            titleBar: [{ type: i0.ViewChild, args: ['titleBar',] }]
        };
        return WidgetComponent;
    }());
    /**
     * newDpValues 合并到 this.dpValues，同 dpId 覆盖。
     * 此方法会改变 oldDpValues。
     * @param {?} oldDpValues
     * @param {?} newDpValues
     * @return {?}
     */
    function mergeDpValues(oldDpValues, newDpValues) {
        var e_1, _a;
        var _loop_1 = function (newDV) {
            /** @type {?} */
            var targetOldDV = oldDpValues.find(( /**
             * @param {?} oldDV
             * @return {?}
             */function (oldDV) { return oldDV.dpId === newDV.dpId; }));
            if (targetOldDV) {
                targetOldDV.value = newDV.value;
            }
            else {
                oldDpValues.push(newDV);
            }
        };
        try {
            for (var _b = __values(newDpValues.filter(( /**
             * @param {?} dv
             * @return {?}
             */function (dv) { return dv.dpId; }))), _c = _b.next(); !_c.done; _c = _b.next()) {
                var newDV = _c.value;
                _loop_1(newDV);
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    }
    /**
     * @param {?=} oldDpValues
     * @param {?=} newDpValues
     * @return {?}
     */
    function mergeDpValuesForNew(oldDpValues, newDpValues) {
        if (oldDpValues === void 0) {
            oldDpValues = [];
        }
        if (newDpValues === void 0) {
            newDpValues = [];
        }
        /** @type {?} */
        var result = oldDpValues.slice();
        mergeDpValues(result, newDpValues);
        return result;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TitleBarComponent = /** @class */ (function () {
        function TitleBarComponent(devkitSvc, translate) {
            this.devkitSvc = devkitSvc;
            this.translate = translate;
            this.icon = '';
            /**
             * 标题
             */
            this.showTitle = true;
            this.title = '';
            /**
             * 数字
             */
            this.showNumber = false;
            this.number = 0;
            /**
             * 设置按钮
             */
            this.showSetting = false;
            this.clickSetting = new i0.EventEmitter();
            /**
             * 刷新按钮
             */
            this.showRefresh = false;
            this.clickRefresh = new i0.EventEmitter();
            /**
             * 维度，用于运行时聚合
             */
            this.dims = [];
            /**
             * 是否显示运行时聚合
             */
            this.showRuntimeAgg = false;
            this.filterChange = new i0.EventEmitter();
            this.runtimeAggChange = new i0.EventEmitter();
            this.init = new i0.EventEmitter();
            this.JumpTypes = WidgetDevkitModule.JumpTypes;
            /**
             * 聚合
             */
            this.editingRuntimeAgg = new UtilModule.RuntimeAggOption();
            this.runtimeAggDropdownOpen = false;
        }
        /**
         * @return {?}
         */
        TitleBarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.init.emit(this);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TitleBarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.filterConfigs) {
                    this.outerFC = null;
                    this.innerFCs = null;
                    /** @type {?} */
                    var notFlatFCs = this.filterConfigs.filter(( /**
                     * @param {?} fc
                     * @return {?}
                     */function (fc) { return !WidgetDevkitModule.isFsFlat(fc.fs); }));
                    if (notFlatFCs && notFlatFCs[0])
                        this.outerFC = notFlatFCs[0];
                    if (notFlatFCs && notFlatFCs.length > 1)
                        this.innerFCs = notFlatFCs.slice(1);
                    this.flatFCs = this.filterConfigs.filter(( /**
                     * @param {?} fc
                     * @return {?}
                     */function (fc) { return WidgetDevkitModule.isFsFlat(fc.fs); }));
                }
            };
        /** 用于外部手动设置 runtime agg。因为每次都需要 deep clone，所以封装为手动调用的函数，而非模板绑定，以减少次数。 */
        /**
         * 用于外部手动设置 runtime agg。因为每次都需要 deep clone，所以封装为手动调用的函数，而非模板绑定，以减少次数。
         * @param {?} runtimeAgg
         * @return {?}
         */
        TitleBarComponent.prototype.setRuntimeAgg = /**
         * 用于外部手动设置 runtime agg。因为每次都需要 deep clone，所以封装为手动调用的函数，而非模板绑定，以减少次数。
         * @param {?} runtimeAgg
         * @return {?}
         */
            function (runtimeAgg) {
                if (!runtimeAgg)
                    return;
                this.editingRuntimeAgg = UtilModule.deepClone(runtimeAgg);
                this.confirmedRuntimeAgg = UtilModule.deepClone(runtimeAgg);
            };
        /**
         * @return {?}
         */
        TitleBarComponent.prototype.handleClickJump = /**
         * @return {?}
         */
            function () {
                this.devkitSvc.jumpWithoutData(this.jumpConfig);
            };
        /** 把 filter 发来的结果值，加上 dpId 一起包装为 dpValues 发出去 */
        /**
         * 把 filter 发来的结果值，加上 dpId 一起包装为 dpValues 发出去
         * @param {?} value
         * @param {?} fc
         * @return {?}
         */
        TitleBarComponent.prototype.handleFilterSingleChange = /**
         * 把 filter 发来的结果值，加上 dpId 一起包装为 dpValues 发出去
         * @param {?} value
         * @param {?} fc
         * @return {?}
         */
            function (value, fc) {
                // 1. 普通：发出对应 1 个 dp 的单个值
                this.filterChange.emit([{
                        value: value,
                        dpId: fc.dpId,
                    }]);
            };
        /**
         * @param {?} values
         * @param {?} fc
         * @return {?}
         */
        TitleBarComponent.prototype.handleFilterMultiChange = /**
         * @param {?} values
         * @param {?} fc
         * @return {?}
         */
            function (values, fc) {
                /** @type {?} */
                var dpValues;
                // 2. 日期范围：发出对应 2 个 dp 的 2 个值
                if (WidgetDevkitModule.ifFsDateRange(fc.fs)) {
                    dpValues = [
                        { value: values[0], dpId: fc.dpId },
                        { value: values[1], dpId: fc.dpId2 },
                    ];
                }
                else {
                    // 3. 枚举多选：发出对应 1 个 dp 的多个值
                    dpValues = [{
                            // TODO: 多值的连接方式是否可配？
                            value: values.join(','), dpId: fc.dpId
                        }];
                }
                this.filterChange.emit(dpValues);
            };
        /** 聚合 */
        /**
         * 聚合
         * @return {?}
         */
        TitleBarComponent.prototype.handleAddInd = /**
         * 聚合
         * @return {?}
         */
            function () {
                this.editingRuntimeAgg.indicators.push(new UtilModule.Indicator());
            };
        /**
         * @param {?} ind
         * @return {?}
         */
        TitleBarComponent.prototype.handleRemoveInd = /**
         * @param {?} ind
         * @return {?}
         */
            function (ind) {
                UtilModule.ArrUtil.Remove(this.editingRuntimeAgg.indicators, ind);
            };
        /**
         * @return {?}
         */
        TitleBarComponent.prototype.handleConfirmAgg = /**
         * @return {?}
         */
            function () {
                this.runtimeAggDropdownOpen = false;
                if (UtilModule.objectLiteralEqual(this.editingRuntimeAgg, this.confirmedRuntimeAgg))
                    return;
                this.confirmedRuntimeAgg = UtilModule.deepClone(this.editingRuntimeAgg);
                this.runtimeAggChange.emit(this.confirmedRuntimeAgg);
            };
        TitleBarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-title-bar',
                        template: "<!-- --{{filterSchemas | json}}-- -->\n<!-- TODO: \u6240\u6709\u5176\u4ED6 filter \u6536\u8D77\u5230 dropdown \u91CC -->\n<!-- <div class=\"d-flex\">\n  <filter\n    *ngFor=\"let fc of filterConfigs\"\n    [filterSchema]=\"fc.fs\"\n    (singleValueChange)=\"handleFilterSingleChange($event, fc)\"\n    (multiValueChange)=\"handleFilterMultiChange($event, fc)\"\n    ></filter>\n</div> -->\n<div class=\"title-bar\">\n  <div class=\"d-flex\">\n    <!-- left -->\n    <div class=\"left align-items-center\">\n      <i *ngIf=\"icon!=''\" class=\"material-icons\">{{icon}}</i>\n      <div *ngIf=\"showTitle\" class=\"title\">{{title}}</div>\n      <div *ngIf=\"showNumber\" class=\"number\">{{number}}</div>\n      <ng-container *ngTemplateOutlet=\"leftTemplate\"></ng-container>\n    </div>\n    <!-- right -->\n    <div class=\"right\">\n      <ng-container *ngTemplateOutlet=\"rightTemplate\"></ng-container>\n      <filter\n        *ngIf=\"outerFC\"\n        [filterSchema]=\"outerFC.fs\"\n        (singleValueChange)=\"handleFilterSingleChange($event, outerFC)\"\n        (multiValueChange)=\"handleFilterMultiChange($event, outerFC)\"\n        ></filter>\n      <div *ngIf=\"innerFCs\"\n        class=\"tool-wrap d-flex\">\n        <nz-dropdown nzTrigger=\"click\">\n          <i nz-dropdown class=\"material-icons\">more_horiz</i>\n          <ul nz-menu class=\"p-2\">\n            <li\n              *ngFor=\"let fc of innerFCs\"\n              class=\"mt-1 d-flex align-items-center\">\n              <span class=\"text-truncate\" style=\"width: 50px\">{{fc?.fs?.i18nName[translate.currentLang]}}</span>\n              <filter\n                [filterSchema]=\"fc.fs\"\n                (singleValueChange)=\"handleFilterSingleChange($event, fc)\"\n                (multiValueChange)=\"handleFilterMultiChange($event, fc)\"\n                ></filter>\n            </li>\n          </ul>\n        </nz-dropdown>\n      </div>\n      <!-- \u805A\u5408\u914D\u7F6E -->\n      <div *ngIf=\"showRuntimeAgg\"\n        class=\"tool-wrap d-flex\">\n        <nz-dropdown nzTrigger=\"click\" [(nzVisible)]=\"runtimeAggDropdownOpen\">\n          <i nz-dropdown class=\"material-icons\">show_chart</i>\n          <div nz-menu class=\"p-2\" style=\"width:200px;box-sizing:content-box;\">\n            <h5>\u805A\u5408\u914D\u7F6E</h5>\n            <div class=\"tip p-2\">\n              \u805A\u5408\u914D\u7F6E\u4EC5\u5BF9 QDP \u6570\u636E\u96C6\u751F\u6548\u3002\n            </div>\n            <div class=\"sm-title\">\u7EF4\u5EA6</div>\n            <nz-select\n              [(ngModel)]=\"editingRuntimeAgg.dimensions[0]\"\n              nzPlaceHolder=\"\u9009\u62E9\u7EF4\u5EA6\u5B57\u6BB5\"\n              style=\"width:200px\">\n              <nz-option\n                *ngFor=\"let dim of dims\"\n                [nzLabel]=\"dim.label || dim.name\"\n                [nzValue]=\"dim.name\"></nz-option>\n            </nz-select>\n            <div class=\"sm-title mt-2\">\u6C47\u603B\u65B9\u5F0F\u53CA\u6307\u6807</div>\n            <ul>\n              <li\n                class=\"mb-1 d-flex align-items-center\"\n                *ngFor=\"let ind of editingRuntimeAgg.indicators\">\n                <nz-input-group nzCompact>\n                  <nz-select [(ngModel)]=\"ind.aggFn\" style=\"width:70px\">\n                    <nz-option nzLabel=\"\u5408\u8BA1\" [nzValue]=\"1\"></nz-option>\n                    <nz-option nzLabel=\"\u6700\u5927\u503C\" [nzValue]=\"2\"></nz-option>\n                    <nz-option nzLabel=\"\u6700\u5C0F\u503C\" [nzValue]=\"3\"></nz-option>\n                    <nz-option nzLabel=\"\u8BA1\u6570\" [nzValue]=\"4\"></nz-option>\n                    <nz-option nzLabel=\"\u5E73\u5747\u503C\" [nzValue]=\"5\"></nz-option>\n                  </nz-select>\n                  <nz-select\n                    nzPlaceHolder=\"\u9009\u62E9\u6307\u6807\u5B57\u6BB5\"\n                    [(ngModel)]=\"ind.dimName\"\n                    style=\"width:110px\">\n                    <nz-option\n                      *ngFor=\"let dim of dims\"\n                      [nzLabel]=\"dim.label || dim.name\"\n                      [nzValue]=\"dim.name\"></nz-option>\n                  </nz-select>\n                </nz-input-group>\n                <i\n                  class=\"material-icons cursor-pointer fs-15 text-gray-200 hover:text-red-600 transition-colors\"\n                  (click)=\"handleRemoveInd(ind)\"\n                  >remove_circle</i>\n              </li>\n            </ul>\n\n            <div class=\"text-right mt-2\">\n              <button class=\"btn btn-secondary mr-1\" (click)=\"handleAddInd()\">\u589E\u52A0\u6307\u6807</button>\n              <button class=\"btn btn-primary\" (click)=\"handleConfirmAgg()\">{{'confirm' | translate}}</button>\n            </div>\n          </div>\n\n          <!-- <ul nz-menu class=\"p-2\">\n            <li\n              *ngFor=\"let fc of innerFCs\"\n              class=\"mt-1 d-flex align-items-center\">\n              <span class=\"text-truncate\" style=\"width: 50px\">{{fc?.fs?.i18nName[translate.currentLang]}}</span>\n              <filter\n                [filterSchema]=\"fc.fs\"\n                (singleValueChange)=\"handleFilterSingleChange($event, fc)\"\n                (multiValueChange)=\"handleFilterMultiChange($event, fc)\"\n                ></filter>\n            </li>\n          </ul> -->\n        </nz-dropdown>\n      </div>\n      <div\n        class=\"tool-wrap d-flex\"\n        [title]=\"(settingTitle || '') | translate\"\n        *ngIf=\"showSetting\">\n        <img\n          class=\"setting\"\n          (click)=\"clickSetting.emit()\"\n          src=\"assets/img/setting.svg\"\n          [alt]=\"settingTitle\">\n      </div>\n      <div\n        class=\"tool-wrap d-flex\"\n        *ngIf=\"showRefresh\"\n        (click)=\"clickRefresh.emit()\">\n        <i class=\"icon-refresh material-icons\" style=\"font-size: 20px;\">refresh</i>\n      </div>\n      <!-- -{{jumpConfig.jumpType}}-{{jumpConfig|json}}- -->\n      <div\n        *ngIf=\"jumpConfig && jumpConfig.jumpType!==JumpTypes.None\"\n        (click)=\"handleClickJump()\"\n        class=\"tool-wrap d-flex\">\n        <i class=\"material-icons\">chevron_right</i>\n      </div>\n    </div>\n  </div>\n  <ul>\n    <li *ngFor=\"let flatFC of flatFCs\" class=\"mt-1\">\n      <filter\n        [filterSchema]=\"flatFC.fs\"\n        (singleValueChange)=\"handleFilterSingleChange($event, flatFC)\"\n        (multiValueChange)=\"handleFilterMultiChange($event, flatFC)\"\n        ></filter>\n    </li>\n  </ul>\n</div>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["@charset \"UTF-8\";.title-bar{padding:12px 20px 10px}.title-bar .left{flex:1 1 auto;display:flex}.title-bar .left .material-icons{font-size:18px;margin-right:8px;color:#3794ff;padding-top:1px}.title-bar .left .title{font-weight:700;font-size:15px}.title-bar .left .number{font-size:15px;margin-left:10px}.title-bar .right{flex:1 1 auto;display:flex;justify-content:flex-end;align-items:center}.title-bar .right .widget-select{margin-left:5px}.title-bar .right .setting{width:16px;height:16px;transition:.3s;opacity:1!important}.title-bar .right .setting:hover{transform:rotate(60deg)}.title-bar .right .tool-wrap{width:20px;margin-left:10px;font-size:14px;color:#000;transition:.3s;cursor:pointer;opacity:.2}.title-bar .right .tool-wrap:hover{opacity:.4}"]
                    }] }
        ];
        /** @nocollapse */
        TitleBarComponent.ctorParameters = function () {
            return [
                { type: WidgetDevkitModule.WidgetDevkitService },
                { type: NgxTranslateCore.TranslateService }
            ];
        };
        TitleBarComponent.propDecorators = {
            icon: [{ type: i0.Input }],
            showTitle: [{ type: i0.Input }],
            title: [{ type: i0.Input }],
            showNumber: [{ type: i0.Input }],
            number: [{ type: i0.Input }],
            showSetting: [{ type: i0.Input }],
            settingTitle: [{ type: i0.Input }],
            clickSetting: [{ type: i0.Output }],
            showRefresh: [{ type: i0.Input }],
            clickRefresh: [{ type: i0.Output }],
            jumpConfig: [{ type: i0.Input }],
            jumpProperty: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            filterConfigs: [{ type: i0.Input }],
            dims: [{ type: i0.Input }],
            showRuntimeAgg: [{ type: i0.Input }],
            filterChange: [{ type: i0.Output }],
            runtimeAggChange: [{ type: i0.Output }],
            init: [{ type: i0.Output }],
            leftTemplate: [{ type: i0.ContentChild, args: ['leftTemplate',] }],
            rightTemplate: [{ type: i0.ContentChild, args: ['rightTemplate',] }]
        };
        return TitleBarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterComponent = /** @class */ (function () {
        function FilterComponent(translate) {
            this.translate = translate;
            this.singleValueChange = new i0.EventEmitter();
            this.multiValueChange = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        FilterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FilterComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.fs && changes.fs.currentValue != changes.fs.previousValue) {
                    this.value = WidgetDevkitModule.FilterSchema.getDefaultValue(this.fs);
                }
            };
        /**
         * @return {?}
         */
        FilterComponent.prototype.getEnumItems = /**
         * @return {?}
         */
            function () {
                return WidgetDevkitModule.FSEnum.GetItems(this.fs.enum);
            };
        /**
         * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
         * 仅把多个值的数组发出去
         */
        /**
         * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
         * 仅把多个值的数组发出去
         * @param {?} value
         * @return {?}
         */
        FilterComponent.prototype.handleChange = /**
         * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
         * 仅把多个值的数组发出去
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.singleValueChange.emit(value);
            };
        /**
         * @param {?} values
         * @return {?}
         */
        FilterComponent.prototype.handleChangeMulti = /**
         * @param {?} values
         * @return {?}
         */
            function (values) {
                this.multiValueChange.emit(values);
            };
        FilterComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'filter',
                        template: "<!-- {{fs.type|json}} -->\n<div class=\"d-flex align-items-center\" *ngIf=\"fs\">\n  <span *ngIf=\"fs.showName\"\n    class=\"text-truncate mr-1\">{{fs.i18nName[translate.currentLang]}}</span>\n  <ng-container *ngIf=\"fs.type==='date'\">\n    <ng-container *ngIf=\"fs.date.type==='single'\">\n      <nz-year-picker\n        *ngIf=\"fs.date.singleUnit==='year'\"\n        [(ngModel)]=\"value\"\n        nzFormat=\"YYYY\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-year-picker>\n      <nz-month-picker\n        *ngIf=\"fs.date.singleUnit==='month'\"\n        [(ngModel)]=\"value\"\n        nzFormat=\"YYYY-MM\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-month-picker>\n      <nz-date-picker\n        *ngIf=\"fs.date.singleUnit==='day'\"\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-date-picker>\n    </ng-container>\n\n    <nz-range-picker\n      *ngIf=\"fs.date.type==='range'\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChangeMulti($event)\"\n      ></nz-range-picker>\n\n    <ng-container *ngIf=\"fs.date.type=='lastTimeEnum'\">\n      <nz-select\n        class=\"\"\n        nzAllowClear\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"handleChange($event)\">\n        <nz-option\n          *ngFor=\"let lastTimeItem of fs.date.lastTimeItems\"\n          [nzValue]=\"lastTimeItem.num\"\n          [nzLabel]=\"\">last{{lastTimeItem.num}}{{lastTimeItem.unit}}</nz-option>\n      </nz-select>\n    </ng-container>\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='enum'\">\n    <!-- -{{getEnumItems()}}- -->\n    <!-- single -->\n    <nz-select\n      *ngIf=\"fs.enum.displayType==='select'\"\n      [nzMode]=\"fs.enum.multi ? 'multiple' : 'default'\"\n      class=\"col-sm-5\"\n      nzAllowClear\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"fs.enum.multi ? handleChangeMulti($event) : handleChange($event)\">\n      <nz-option\n        *ngFor=\"let item of getEnumItems()\"\n        [nzValue]=\"item.value\"\n        [nzLabel]=\"item.label || item.value\"></nz-option>\n    </nz-select>\n    <flat-select\n      *ngIf=\"!fs.enum.multi && fs.enum.displayType==='flat'\"\n      [options]=\"getEnumItems()\"\n      [(value)]=\"value\"\n      (valueChange)=\"handleChange($event)\"\n      ></flat-select>\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='number'\">\n    <input\n      type=\"number\"\n      class=\"form-control form-control-sm\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChange($event)\"\n      required />\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='text'\">\n    <input\n      type=\"text\"\n      class=\"form-control form-control-sm\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChange($event)\"\n      required />\n  </ng-container>\n</div>\n<ng-template #tagPlaceHolder let-selectedList> \u5DF2\u9009 {{selectedList.length}} \u9879</ng-template>\n",
                        styles: ["nz-select{min-width:60px}"]
                    }] }
        ];
        /** @nocollapse */
        FilterComponent.ctorParameters = function () {
            return [
                { type: NgxTranslateCore.TranslateService }
            ];
        };
        FilterComponent.propDecorators = {
            fs: [{ type: i0.Input, args: ['filterSchema',] }],
            singleValueChange: [{ type: i0.Output }],
            multiValueChange: [{ type: i0.Output }]
        };
        return FilterComponent;
    }());
    var ColValuesPipe = /** @class */ (function () {
        function ColValuesPipe() {
        }
        /**
         * @param {?} data
         * @param {?} col
         * @return {?}
         */
        ColValuesPipe.prototype.transform = /**
         * @param {?} data
         * @param {?} col
         * @return {?}
         */
            function (data, col) {
                if (data && data.map)
                    return Array.from(new Set(data.map(( /**
                     * @param {?} i
                     * @return {?}
                     */function (i) { return i[col]; }))));
            };
        ColValuesPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'colValues' },] }
        ];
        return ColValuesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FlatSelectComponent = /** @class */ (function () {
        function FlatSelectComponent() {
            this.options = [];
            this.valueChange = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        FlatSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        FlatSelectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'flat-select',
                        template: "\n<ul class=\"d-flex\">\n  <li\n    *ngFor=\"let option of options\"\n    class=\"cursor-pointer transition\"\n    [class.active]=\"option.value === value\"\n    (click)=\"valueChange.emit(option.value)\"\n    >{{option.label || option.value}}</li>\n</ul>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["ul{margin-right:5px}ul li{padding:3px 10px;border-radius:100px}ul li.active,ul li:hover{background:#ecf0f3}"]
                    }] }
        ];
        /** @nocollapse */
        FlatSelectComponent.ctorParameters = function () { return []; };
        FlatSelectComponent.propDecorators = {
            options: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }]
        };
        return FlatSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FlatSelectModule = /** @class */ (function () {
        function FlatSelectModule() {
        }
        FlatSelectModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            FlatSelectComponent,
                        ],
                        imports: [
                            AngularCommon.CommonModule
                        ],
                        exports: [
                            FlatSelectComponent,
                        ]
                    },] }
        ];
        return FlatSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterModule = /** @class */ (function () {
        function FilterModule() {
        }
        FilterModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            FilterComponent,
                            ColValuesPipe,
                        ],
                        imports: [
                            AngularCommon.CommonModule,
                            select.NzSelectModule,
                            datePicker.NzDatePickerModule,
                            AngularForms.FormsModule,
                            FlatSelectModule,
                        ],
                        exports: [
                            FilterComponent
                        ]
                    },] }
        ];
        return FilterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { FilterComponent } from './filter/filter.component';
    // import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
    // import { GridDesignerComponent } from '../../../designer/src/app/components/grid-designer/grid-designer.component';
    // import {GridsterModule as Gridster2} from '@widget/gridster';
    // TODO: 引用方式
    // import { WidgetDevkitModule } from '@gspwidget/widget-devkit';
    var WidgetCoreModule = /** @class */ (function () {
        function WidgetCoreModule() {
        }
        WidgetCoreModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            WidgetComponent,
                            TitleBarComponent,
                        ],
                        entryComponents: [],
                        imports: [
                            AngularCommon.CommonModule,
                            AngularForms.FormsModule,
                            AngularCommonHttp.HttpClientModule,
                            AngularForms.ReactiveFormsModule,
                            accordion.AccordionModule.forRoot(),
                            ngxColorPicker.ColorPickerModule,
                            // Gridster2
                            // TranslateModule.forRoot(),
                            NgxTranslateCore.TranslateModule,
                            autoComplete.NzAutocompleteModule,
                            modal.NzModalModule,
                            datePicker.NzDatePickerModule,
                            // NzSelectModule,
                            // 保证元部件在这层能获取到这里面的服务。
                            // 不能仅注册在 root，因为服务的服务不保证在 root 上；
                            // 不能都注册在 widget 里，因为会每个部件一个服务实例；
                            // 注册在这保证元部件在此层找到同一个服务实例、并且服务的服务也在 module 里提供了。
                            WidgetDevkitModule.WidgetDevkitModule,
                            UtilModule.UtilModule,
                            FilterModule,
                            dropdown.NzDropDownModule,
                            select.NzSelectModule,
                            input.NzInputModule,
                        ],
                        exports: [
                            WidgetComponent,
                        ],
                        providers: []
                    },] }
        ];
        return WidgetCoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.WidgetCoreModule = WidgetCoreModule;
    exports.WCStatus = WCStatus;
    exports.WidgetComponent = WidgetComponent;
    exports.DynamicLoaderService = DynamicLoaderService$$1;
    exports.FilterModule = FilterModule;
    exports.FilterComponent = FilterComponent;
    exports.ColValuesPipe = ColValuesPipe;
    exports.isWidgetRuntimeAggActive = isWidgetRuntimeAggActive;
    exports.chartAggFieldMap = chartAggFieldMap;
    exports.FlatSelectComponent = FlatSelectComponent;
    exports.FlatSelectModule = FlatSelectModule;
    exports.TitleBarComponent = TitleBarComponent;
    exports.InstanceService = InstanceService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gspwidget-widget-core.umd.js.map