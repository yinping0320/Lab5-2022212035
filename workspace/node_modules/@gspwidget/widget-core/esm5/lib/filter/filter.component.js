/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Pipe } from '@angular/core';
import { FilterSchema, FSEnum } from '@gspwidget/widget-devkit';
import { TranslateService } from '@ngx-translate/core';
var FilterComponent = /** @class */ (function () {
    function FilterComponent(translate) {
        this.translate = translate;
        this.singleValueChange = new EventEmitter();
        this.multiValueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FilterComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fs && changes.fs.currentValue != changes.fs.previousValue) {
            this.value = FilterSchema.getDefaultValue(this.fs);
        }
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.getEnumItems = /**
     * @return {?}
     */
    function () {
        return FSEnum.GetItems(this.fs.enum);
    };
    /**
     * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
     * 仅把多个值的数组发出去
     */
    /**
     * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
     * 仅把多个值的数组发出去
     * @param {?} value
     * @return {?}
     */
    FilterComponent.prototype.handleChange = /**
     * filter 不关心外界如何看待、处理多个值（多个值对应一个还是多个 dp），
     * 仅把多个值的数组发出去
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.singleValueChange.emit(value);
    };
    /**
     * @param {?} values
     * @return {?}
     */
    FilterComponent.prototype.handleChangeMulti = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this.multiValueChange.emit(values);
    };
    FilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter',
                    template: "<!-- {{fs.type|json}} -->\n<div class=\"d-flex align-items-center\" *ngIf=\"fs\">\n  <span *ngIf=\"fs.showName\"\n    class=\"text-truncate mr-1\">{{fs.i18nName[translate.currentLang]}}</span>\n  <ng-container *ngIf=\"fs.type==='date'\">\n    <ng-container *ngIf=\"fs.date.type==='single'\">\n      <nz-year-picker\n        *ngIf=\"fs.date.singleUnit==='year'\"\n        [(ngModel)]=\"value\"\n        nzFormat=\"YYYY\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-year-picker>\n      <nz-month-picker\n        *ngIf=\"fs.date.singleUnit==='month'\"\n        [(ngModel)]=\"value\"\n        nzFormat=\"YYYY-MM\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-month-picker>\n      <nz-date-picker\n        *ngIf=\"fs.date.singleUnit==='day'\"\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"handleChange($event)\"\n        ></nz-date-picker>\n    </ng-container>\n\n    <nz-range-picker\n      *ngIf=\"fs.date.type==='range'\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChangeMulti($event)\"\n      ></nz-range-picker>\n\n    <ng-container *ngIf=\"fs.date.type=='lastTimeEnum'\">\n      <nz-select\n        class=\"\"\n        nzAllowClear\n        [(ngModel)]=\"value\"\n        (ngModelChange)=\"handleChange($event)\">\n        <nz-option\n          *ngFor=\"let lastTimeItem of fs.date.lastTimeItems\"\n          [nzValue]=\"lastTimeItem.num\"\n          [nzLabel]=\"\">last{{lastTimeItem.num}}{{lastTimeItem.unit}}</nz-option>\n      </nz-select>\n    </ng-container>\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='enum'\">\n    <!-- -{{getEnumItems()}}- -->\n    <!-- single -->\n    <nz-select\n      *ngIf=\"fs.enum.displayType==='select'\"\n      [nzMode]=\"fs.enum.multi ? 'multiple' : 'default'\"\n      class=\"col-sm-5\"\n      nzAllowClear\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"fs.enum.multi ? handleChangeMulti($event) : handleChange($event)\">\n      <nz-option\n        *ngFor=\"let item of getEnumItems()\"\n        [nzValue]=\"item.value\"\n        [nzLabel]=\"item.label || item.value\"></nz-option>\n    </nz-select>\n    <flat-select\n      *ngIf=\"!fs.enum.multi && fs.enum.displayType==='flat'\"\n      [options]=\"getEnumItems()\"\n      [(value)]=\"value\"\n      (valueChange)=\"handleChange($event)\"\n      ></flat-select>\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='number'\">\n    <input\n      type=\"number\"\n      class=\"form-control form-control-sm\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChange($event)\"\n      required />\n  </ng-container>\n\n\n  <ng-container *ngIf=\"fs.type==='text'\">\n    <input\n      type=\"text\"\n      class=\"form-control form-control-sm\"\n      [(ngModel)]=\"value\"\n      (ngModelChange)=\"handleChange($event)\"\n      required />\n  </ng-container>\n</div>\n<ng-template #tagPlaceHolder let-selectedList> \u5DF2\u9009 {{selectedList.length}} \u9879</ng-template>\n",
                    styles: ["nz-select{min-width:60px}"]
                }] }
    ];
    /** @nocollapse */
    FilterComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    FilterComponent.propDecorators = {
        fs: [{ type: Input, args: ['filterSchema',] }],
        singleValueChange: [{ type: Output }],
        multiValueChange: [{ type: Output }]
    };
    return FilterComponent;
}());
export { FilterComponent };
if (false) {
    /**
     * filter 里绝不应该需要完整数据，否则参与查询的筛选还有啥意义？
     * @type {?}
     */
    FilterComponent.prototype.fs;
    /** @type {?} */
    FilterComponent.prototype.singleValueChange;
    /** @type {?} */
    FilterComponent.prototype.multiValueChange;
    /** @type {?} */
    FilterComponent.prototype.value;
    /** @type {?} */
    FilterComponent.prototype.translate;
}
var ColValuesPipe = /** @class */ (function () {
    function ColValuesPipe() {
    }
    /**
     * @param {?} data
     * @param {?} col
     * @return {?}
     */
    ColValuesPipe.prototype.transform = /**
     * @param {?} data
     * @param {?} col
     * @return {?}
     */
    function (data, col) {
        if (data && data.map)
            return Array.from(new Set(data.map((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i[col]; }))));
    };
    ColValuesPipe.decorators = [
        { type: Pipe, args: [{ name: 'colValues' },] }
    ];
    return ColValuesPipe;
}());
export { ColValuesPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvd2lkZ2V0LWNvcmUvIiwic291cmNlcyI6WyJsaWIvZmlsdGVyL2ZpbHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLElBQUksRUFBZ0MsTUFBTSxlQUFlLENBQUM7QUFDOUgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQWMsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd2RDtJQWVFLHlCQUNTLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBTjFCLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7UUFDdEMscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtJQU0zQyxDQUFDOzs7O0lBRUwsa0NBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7Ozs7SUFFRCxxQ0FBVzs7OztJQUFYLFVBQWEsT0FBc0I7UUFDakMsSUFBSSxPQUFPLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO1lBQ3JFLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDbkQ7SUFDSCxDQUFDOzs7O0lBRUQsc0NBQVk7OztJQUFaO1FBQ0UsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUNEOzs7T0FHRzs7Ozs7OztJQUNILHNDQUFZOzs7Ozs7SUFBWixVQUFjLEtBQUs7UUFDakIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNwQyxDQUFDOzs7OztJQUNELDJDQUFpQjs7OztJQUFqQixVQUFtQixNQUFhO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEMsQ0FBQzs7Z0JBeENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsUUFBUTtvQkFDbEIsbTZGQUFzQzs7aUJBRXZDOzs7O2dCQVBRLGdCQUFnQjs7O3FCQVl0QixLQUFLLFNBQUMsY0FBYztvQ0FDcEIsTUFBTTttQ0FDTixNQUFNOztJQThCVCxzQkFBQztDQUFBLEFBekNELElBeUNDO1NBcENZLGVBQWU7Ozs7OztJQUkxQiw2QkFBdUM7O0lBQ3ZDLDRDQUFnRDs7SUFDaEQsMkNBQStDOztJQUUvQyxnQ0FBSzs7SUFHSCxvQ0FBa0M7O0FBMkJ0QztJQUFBO0lBS0EsQ0FBQzs7Ozs7O0lBSEMsaUNBQVM7Ozs7O0lBQVQsVUFBVyxJQUFXLEVBQUUsR0FBVztRQUNqQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRztZQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFOLENBQU0sRUFBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxDQUFDOztnQkFKRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFOztJQUszQixvQkFBQztDQUFBLEFBTEQsSUFLQztTQUpZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFBpcGUsIFBpcGVUcmFuc2Zvcm0sIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbHRlclNjaGVtYSwgRlNFbnVtLCBGU0VudW1JdGVtIH0gZnJvbSAnQGdzcHdpZGdldC93aWRnZXQtZGV2a2l0JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IHN1YkRheXMsIHN1Yk1vbnRocyB9IGZyb20gJ2RhdGUtZm5zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZmlsdGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2ZpbHRlci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAvKiog55So5LqO6I635b6XIGVudW0g5YiX55qE5YC8ICovXG4gIC8qKiBmaWx0ZXIg6YeM57ud5LiN5bqU6K+l6ZyA6KaB5a6M5pW05pWw5o2u77yM5ZCm5YiZ5Y+C5LiO5p+l6K+i55qE562b6YCJ6L+Y5pyJ5ZWl5oSP5LmJ77yfICovXG4gIC8vIEBJbnB1dCgpIGludGFjdERhdGE6IGFueVtdID0gW11cbiAgQElucHV0KCdmaWx0ZXJTY2hlbWEnKSBmczogRmlsdGVyU2NoZW1hXG4gIEBPdXRwdXQoKSBzaW5nbGVWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICBAT3V0cHV0KCkgbXVsdGlWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIHZhbHVlXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZVxuICApIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMgKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5mcyAmJiBjaGFuZ2VzLmZzLmN1cnJlbnRWYWx1ZSAhPSBjaGFuZ2VzLmZzLnByZXZpb3VzVmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBGaWx0ZXJTY2hlbWEuZ2V0RGVmYXVsdFZhbHVlKHRoaXMuZnMpXG4gICAgfVxuICB9XG5cbiAgZ2V0RW51bUl0ZW1zICgpOiBGU0VudW1JdGVtW10ge1xuICAgIHJldHVybiBGU0VudW0uR2V0SXRlbXModGhpcy5mcy5lbnVtKVxuICB9XG4gIC8qKlxuICAgKiBmaWx0ZXIg5LiN5YWz5b+D5aSW55WM5aaC5L2V55yL5b6F44CB5aSE55CG5aSa5Liq5YC877yI5aSa5Liq5YC85a+55bqU5LiA5Liq6L+Y5piv5aSa5LiqIGRw77yJ77yMXG4gICAqIOS7heaKiuWkmuS4quWAvOeahOaVsOe7hOWPkeWHuuWOu1xuICAgKi9cbiAgaGFuZGxlQ2hhbmdlICh2YWx1ZSkge1xuICAgIHRoaXMuc2luZ2xlVmFsdWVDaGFuZ2UuZW1pdCh2YWx1ZSlcbiAgfVxuICBoYW5kbGVDaGFuZ2VNdWx0aSAodmFsdWVzOiBhbnlbXSkge1xuICAgIHRoaXMubXVsdGlWYWx1ZUNoYW5nZS5lbWl0KHZhbHVlcylcbiAgfVxufVxuXG5AUGlwZSh7IG5hbWU6ICdjb2xWYWx1ZXMnIH0pXG5leHBvcnQgY2xhc3MgQ29sVmFsdWVzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0gKGRhdGE6IGFueVtdLCBjb2w6IHN0cmluZyApOiBhbnkge1xuICAgIGlmIChkYXRhICYmIGRhdGEubWFwKSByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGRhdGEubWFwKGkgPT4gaVtjb2xdKSkpXG4gIH1cbn1cbiJdfQ==