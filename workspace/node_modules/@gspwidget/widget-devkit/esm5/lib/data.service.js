/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
/**
 * @record
 */
export function LoadDataOptions() { }
if (false) {
    /** @type {?|undefined} */
    LoadDataOptions.prototype.param;
}
/**
 * 部件系统、数据服务内部使用
 * @record
 */
export function LoadDataPayload() { }
/**
 * 数据加载不应该让此 service 直接发出，因为外部框架并不随时都支持取数，
 * 比如新增部件后的部件配置，此时没有配置过数据，便会服务端报错。
 * 应该交由元部件容器加载数据。
 */
var WidgetDataService = /** @class */ (function () {
    function WidgetDataService() {
        /**
         * loadData() / reloadData() 时触发，外部元部件容器接收、加载数据，并通过 setData 设置回数据
         */
        this.onLoadData = new EventEmitter();
        this.onGetData = new EventEmitter();
        this.onGetDataWithDims = new EventEmitter();
    }
    /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     */
    /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     * @param {?=} options
     * @return {?}
     */
    WidgetDataService.prototype.loadData = /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        this.onLoadData.emit(options);
        return this.onGetData;
    };
    /**
     * 获取全数据信息，包含 dimensions
     */
    /**
     * 获取全数据信息，包含 dimensions
     * @param {?=} options
     * @return {?}
     */
    WidgetDataService.prototype.loadDataWithDims = /**
     * 获取全数据信息，包含 dimensions
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        this.onLoadData.emit(options);
        return this.onGetDataWithDims;
    };
    /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     */
    /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     * @param {?=} param
     * @return {?}
     */
    WidgetDataService.prototype.reloadData = /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.onLoadData.emit(param);
    };
    /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param dataWithDims 要设置的数据
     */
    /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param {?} dataWithDims 要设置的数据
     * @return {?}
     */
    WidgetDataService.prototype.setData = /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param {?} dataWithDims 要设置的数据
     * @return {?}
     */
    function (dataWithDims) {
        this.onGetData.emit(dataWithDims.tableData);
        this.onGetDataWithDims.emit(dataWithDims);
    };
    WidgetDataService.decorators = [
        { type: Injectable }
    ];
    return WidgetDataService;
}());
export { WidgetDataService };
if (false) {
    /**
     * loadData() / reloadData() 时触发，外部元部件容器接收、加载数据，并通过 setData 设置回数据
     * @type {?}
     */
    WidgetDataService.prototype.onLoadData;
    /**
     * @type {?}
     * @private
     */
    WidgetDataService.prototype.onGetData;
    /**
     * @type {?}
     * @private
     */
    WidgetDataService.prototype.onGetDataWithDims;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcHdpZGdldC93aWRnZXQtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2RhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFJekQscUNBRUM7OztJQURDLGdDQUE4Qjs7Ozs7O0FBR2hDLHFDQUVDOzs7Ozs7QUFNRDtJQUFBOzs7O1FBR1MsZUFBVSxHQUFHLElBQUksWUFBWSxFQUEwQixDQUFBO1FBQ3RELGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFBO1FBQ3JDLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFnQixDQUFBO0lBd0M5RCxDQUFDO0lBdENDOzs7Ozs7O09BT0c7Ozs7Ozs7Ozs7O0lBQ0gsb0NBQVE7Ozs7Ozs7Ozs7SUFBUixVQUFVLE9BQXlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtJQUN2QixDQUFDO0lBQ0Q7O09BRUc7Ozs7OztJQUNILDRDQUFnQjs7Ozs7SUFBaEIsVUFBa0IsT0FBeUI7UUFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDN0IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUE7SUFDL0IsQ0FBQztJQUNEOzs7OztPQUtHOzs7Ozs7Ozs7SUFDSCxzQ0FBVTs7Ozs7Ozs7SUFBVixVQUFZLEtBQThCO1FBQ3hDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILG1DQUFPOzs7OztJQUFQLFVBQVMsWUFBMEI7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzNDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDM0MsQ0FBQzs7Z0JBM0NGLFVBQVU7O0lBNkNYLHdCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0E1Q1ksaUJBQWlCOzs7Ozs7SUFFNUIsdUNBQThEOzs7OztJQUM5RCxzQ0FBNkM7Ozs7O0lBQzdDLDhDQUE0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YVdpdGhEaW1zLCBEaW1lbnNpb24gfSBmcm9tICdAZ3Nwd2lkZ2V0L3V0aWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWREYXRhT3B0aW9ucyB7XG4gIHBhcmFtPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfVxufVxuLyoqIOmDqOS7tuezu+e7n+OAgeaVsOaNruacjeWKoeWGhemDqOS9v+eUqCAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2FkRGF0YVBheWxvYWQge1xuXG59XG4vKipcbiAqIOaVsOaNruWKoOi9veS4jeW6lOivpeiuqeatpCBzZXJ2aWNlIOebtOaOpeWPkeWHuu+8jOWboOS4uuWklumDqOahhuaetuW5tuS4jemaj+aXtumDveaUr+aMgeWPluaVsO+8jFxuICog5q+U5aaC5paw5aKe6YOo5Lu25ZCO55qE6YOo5Lu26YWN572u77yM5q2k5pe25rKh5pyJ6YWN572u6L+H5pWw5o2u77yM5L6/5Lya5pyN5Yqh56uv5oql6ZSZ44CCXG4gKiDlupTor6XkuqTnlLHlhYPpg6jku7blrrnlmajliqDovb3mlbDmja7jgIJcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdpZGdldERhdGFTZXJ2aWNlIHtcbiAgLyoqIGxvYWREYXRhKCkgLyByZWxvYWREYXRhKCkg5pe26Kem5Y+R77yM5aSW6YOo5YWD6YOo5Lu25a655Zmo5o6l5pS244CB5Yqg6L295pWw5o2u77yM5bm26YCa6L+HIHNldERhdGEg6K6+572u5Zue5pWw5o2uICovXG4gIHB1YmxpYyBvbkxvYWREYXRhID0gbmV3IEV2ZW50RW1pdHRlcjx7IFtrZXk6IHN0cmluZ106IGFueSB9PigpXG4gIHByaXZhdGUgb25HZXREYXRhID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKVxuICBwcml2YXRlIG9uR2V0RGF0YVdpdGhEaW1zID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRhV2l0aERpbXM+KClcblxuICAvKipcbiAgICog5YWD6YOo5Lu26LCD55So5q2k5pa55rOV6I635Y+W5pWw5o2u44CC56S65L6L77yaXG4gICAqIGBgYHRzXG4gICAqIHRoaXMuZGF0YVNlcnZpY2UubG9hZERhdGEoKS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAqICB0aGlzLmRhdGEgPSBkYXRhIC8vIOS9v+eUqOaVsOaNrlxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIGxvYWREYXRhIChvcHRpb25zPzogTG9hZERhdGFPcHRpb25zKSB7XG4gICAgdGhpcy5vbkxvYWREYXRhLmVtaXQob3B0aW9ucylcbiAgICByZXR1cm4gdGhpcy5vbkdldERhdGFcbiAgfVxuICAvKipcbiAgICog6I635Y+W5YWo5pWw5o2u5L+h5oGv77yM5YyF5ZCrIGRpbWVuc2lvbnNcbiAgICovXG4gIGxvYWREYXRhV2l0aERpbXMgKG9wdGlvbnM/OiBMb2FkRGF0YU9wdGlvbnMpOiBPYnNlcnZhYmxlPERhdGFXaXRoRGltcz4ge1xuICAgIHRoaXMub25Mb2FkRGF0YS5lbWl0KG9wdGlvbnMpXG4gICAgcmV0dXJuIHRoaXMub25HZXREYXRhV2l0aERpbXNcbiAgfVxuICAvKipcbiAgICog5YWD6YOo5Lu26LCD55So5q2k5pa55rOV5Lul6YeN5paw6I635Y+W5pWw5o2u77yM5pWw5o2u5Yqg6L295a6M5oiQ5ZCO5YaN5qyh6LCD55So5ZyoIGxvYWREYXRhKCkg5rOo5YaM55qE5LqL5Lu25aSE55CG5Zmo44CC56S65L6L77yaXG4gICAqIGBgYHRzXG4gICAqIHRoaXMuZGF0YVNlcnZpY2UucmVmcmVzaERhdGEoKVxuICAgKiBgYGBcbiAgICovXG4gIHJlbG9hZERhdGEgKHBhcmFtPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xuICAgIHRoaXMub25Mb2FkRGF0YS5lbWl0KHBhcmFtKVxuICB9XG5cbiAgLyoqXG4gICAqIOWklumDqOmAmui/h+atpOaWueazlee7meWFg+mDqOS7tuiuvue9ruaVsOaNru+8jOWFg+mDqOS7tuaXoOmcgOiwg+eUqFxuICAgKiBAcGFyYW0gZGF0YVdpdGhEaW1zIOimgeiuvue9rueahOaVsOaNrlxuICAgKi9cbiAgc2V0RGF0YSAoZGF0YVdpdGhEaW1zOiBEYXRhV2l0aERpbXMpIHtcbiAgICB0aGlzLm9uR2V0RGF0YS5lbWl0KGRhdGFXaXRoRGltcy50YWJsZURhdGEpXG4gICAgdGhpcy5vbkdldERhdGFXaXRoRGltcy5lbWl0KGRhdGFXaXRoRGltcylcbiAgfVxuXG59XG4iXX0=