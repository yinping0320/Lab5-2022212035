/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import Gradient from "./zrender.gradient";
/**
 * @record
 */
export function LinearGradientObject() { }
if (false) {
    /** @type {?} */
    LinearGradientObject.prototype.type;
    /** @type {?} */
    LinearGradientObject.prototype.x;
    /** @type {?} */
    LinearGradientObject.prototype.y;
    /** @type {?} */
    LinearGradientObject.prototype.x2;
    /** @type {?} */
    LinearGradientObject.prototype.y2;
    /** @type {?} */
    LinearGradientObject.prototype.global;
}
/**
 * x, y, x2, y2 are all percent from 0 to 1 when globalCoord is false
 */
var /**
 * x, y, x2, y2 are all percent from 0 to 1 when globalCoord is false
 */
LinearGradient = /** @class */ (function (_super) {
    tslib_1.__extends(LinearGradient, _super);
    function LinearGradient(x, y, x2, y2, colorStops, globalCoord) {
        var _this = _super.call(this, colorStops) || this;
        // Should do nothing more in this constructor. Because gradient can be
        // declard by `color: {type: 'linear', colorStops: ...}`, where
        // this constructor will not be called.
        _this.x = x == null ? 0 : x;
        _this.y = y == null ? 0 : y;
        _this.x2 = x2 == null ? 1 : x2;
        _this.y2 = y2 == null ? 0 : y2;
        // Can be cloned
        _this.type = "linear";
        // If use global coord
        _this.global = globalCoord || false;
        return _this;
    }
    return LinearGradient;
}(Gradient));
/**
 * x, y, x2, y2 are all percent from 0 to 1 when globalCoord is false
 */
export default LinearGradient;
if (false) {
    /** @type {?} */
    LinearGradient.prototype.type;
    /** @type {?} */
    LinearGradient.prototype.x;
    /** @type {?} */
    LinearGradient.prototype.y;
    /** @type {?} */
    LinearGradient.prototype.x2;
    /** @type {?} */
    LinearGradient.prototype.y2;
    /** @type {?} */
    LinearGradient.prototype.global;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoienJlbmRlci5saW5lYXItZ3JhZGllbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3Nwd2lkZ2V0L3dpZGdldC1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcHJlc2V0L3pyZW5kZXIubGluZWFyLWdyYWRpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxRQUErQyxNQUFNLG9CQUFvQixDQUFDOzs7O0FBRWpGLDBDQVNDOzs7SUFSQyxvQ0FBZTs7SUFFZixpQ0FBVTs7SUFDVixpQ0FBVTs7SUFDVixrQ0FBVzs7SUFDWCxrQ0FBVzs7SUFFWCxzQ0FBZ0I7Ozs7O0FBTWxCOzs7O0lBQTRDLDBDQUFRO0lBVWxELHdCQUNFLENBQVMsRUFDVCxDQUFTLEVBQ1QsRUFBVSxFQUNWLEVBQVUsRUFDVixVQUFnQyxFQUNoQyxXQUFxQjtRQU52QixZQVFFLGtCQUFNLFVBQVUsQ0FBQyxTQW1CbEI7UUFqQkMsc0VBQXNFO1FBQ3RFLCtEQUErRDtRQUMvRCx1Q0FBdUM7UUFFdkMsS0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQixLQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNCLEtBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFOUIsS0FBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUU5QixnQkFBZ0I7UUFDaEIsS0FBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFFckIsc0JBQXNCO1FBQ3RCLEtBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxJQUFJLEtBQUssQ0FBQzs7SUFDckMsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQXRDRCxDQUE0QyxRQUFRLEdBc0NuRDs7Ozs7OztJQXJDQyw4QkFBZTs7SUFFZiwyQkFBVTs7SUFDViwyQkFBVTs7SUFDViw0QkFBVzs7SUFDWCw0QkFBVzs7SUFFWCxnQ0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR3JhZGllbnQsIHsgR3JhZGllbnRPYmplY3QsIEdyYWRpZW50Q29sb3JTdG9wIH0gZnJvbSBcIi4venJlbmRlci5ncmFkaWVudFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpbmVhckdyYWRpZW50T2JqZWN0IGV4dGVuZHMgR3JhZGllbnRPYmplY3Qge1xuICB0eXBlOiBcImxpbmVhclwiO1xuXG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB4MjogbnVtYmVyO1xuICB5MjogbnVtYmVyO1xuXG4gIGdsb2JhbDogYm9vbGVhbjtcbn1cbi8qKlxuICogeCwgeSwgeDIsIHkyIGFyZSBhbGwgcGVyY2VudCBmcm9tIDAgdG8gMSB3aGVuIGdsb2JhbENvb3JkIGlzIGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZWFyR3JhZGllbnQgZXh0ZW5kcyBHcmFkaWVudCB7XG4gIHR5cGU6IFwibGluZWFyXCI7XG5cbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHgyOiBudW1iZXI7XG4gIHkyOiBudW1iZXI7XG5cbiAgZ2xvYmFsOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgeDI6IG51bWJlcixcbiAgICB5MjogbnVtYmVyLFxuICAgIGNvbG9yU3RvcHM/OiBHcmFkaWVudENvbG9yU3RvcFtdLFxuICAgIGdsb2JhbENvb3JkPzogYm9vbGVhblxuICApIHtcbiAgICBzdXBlcihjb2xvclN0b3BzKTtcblxuICAgIC8vIFNob3VsZCBkbyBub3RoaW5nIG1vcmUgaW4gdGhpcyBjb25zdHJ1Y3Rvci4gQmVjYXVzZSBncmFkaWVudCBjYW4gYmVcbiAgICAvLyBkZWNsYXJkIGJ5IGBjb2xvcjoge3R5cGU6ICdsaW5lYXInLCBjb2xvclN0b3BzOiAuLi59YCwgd2hlcmVcbiAgICAvLyB0aGlzIGNvbnN0cnVjdG9yIHdpbGwgbm90IGJlIGNhbGxlZC5cblxuICAgIHRoaXMueCA9IHggPT0gbnVsbCA/IDAgOiB4O1xuXG4gICAgdGhpcy55ID0geSA9PSBudWxsID8gMCA6IHk7XG5cbiAgICB0aGlzLngyID0geDIgPT0gbnVsbCA/IDEgOiB4MjtcblxuICAgIHRoaXMueTIgPSB5MiA9PSBudWxsID8gMCA6IHkyO1xuXG4gICAgLy8gQ2FuIGJlIGNsb25lZFxuICAgIHRoaXMudHlwZSA9IFwibGluZWFyXCI7XG5cbiAgICAvLyBJZiB1c2UgZ2xvYmFsIGNvb3JkXG4gICAgdGhpcy5nbG9iYWwgPSBnbG9iYWxDb29yZCB8fCBmYWxzZTtcbiAgfVxufVxuIl19