/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { PropertyTypes } from '../../types';
/**
 * 元部件属性注册表，形如
 * { constructorName: { propertyName: propertyOption }
 * @type {?}
 */
export var WidgetPropertyMap = new Map()
/**
 * TODO: 加入检查，编译时报错（name不应该写；）
 * @param option 可选，默认为 { type: PropertyTypes.String }
 */
;
/**
 * TODO: 加入检查，编译时报错（name不应该写；）
 * @param {?=} option 可选，默认为 { type: PropertyTypes.String }
 * @return {?}
 */
export function Property(option) {
    if (option === void 0) { option = {}; }
    // 这里统一处理：没有设置 type 的一律设置为 Text。没用递归，仅多考虑了 Obj 内一层。
    option.type = option.type || PropertyTypes.Text;
    if (option.objectOption && option.objectOption.objPropertyOptions) {
        option.objectOption.objPropertyOptions.forEach((/**
         * @param {?} subOption
         * @return {?}
         */
        function (subOption) {
            subOption.type = subOption.type || PropertyTypes.Text;
        }));
    }
    option.isArray = !!option.isArray;
    return (/**
     * @param {?} widgetPrototype
     * @param {?} propName
     * @return {?}
     */
    function (widgetPrototype, propName) {
        // TODO: 想办法把 su 加进所有运行时注册表里的 keys 里
        /** @type {?} */
        var ctorName = widgetPrototype.constructor.name;
        if (!WidgetPropertyMap.get(ctorName))
            WidgetPropertyMap.set(ctorName, []);
        WidgetPropertyMap.get(ctorName).push(tslib_1.__assign({ name: propName }, option));
        // 调 angular Input decorator
        Input()(widgetPrototype, propName);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LXByb3BlcnR5LmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvd2lkZ2V0LWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi93aWRnZXQtcmVnaXN0cnkvd2lkZ2V0LXByb3BlcnR5LmRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFrQixhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7Ozs7OztBQUs1RCxNQUFNLEtBQU8saUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQTRCO0FBQ3BFOzs7R0FHRzs7Ozs7OztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUUsTUFBMkI7SUFBM0IsdUJBQUEsRUFBQSxXQUEyQjtJQUNuRCxtREFBbUQ7SUFDbkQsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUE7SUFDL0MsSUFBSSxNQUFNLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQUU7UUFDakUsTUFBTSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxTQUFTO1lBQ3RELFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFBO1FBQ3ZELENBQUMsRUFBQyxDQUFBO0tBQ0g7SUFDRCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO0lBQ2pDOzs7OztJQUFPLFVBQUMsZUFBZSxFQUFFLFFBQVE7OztZQUV6QixRQUFRLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJO1FBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO1lBQUUsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUN6RSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxvQkFBRyxJQUFJLEVBQUUsUUFBUSxJQUFLLE1BQU0sRUFBRyxDQUFBO1FBQ25FLDRCQUE0QjtRQUM1QixLQUFLLEVBQUUsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDcEMsQ0FBQyxFQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9wZXJ0eU9wdGlvbiwgUHJvcGVydHlUeXBlcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbi8qKlxuICog5YWD6YOo5Lu25bGe5oCn5rOo5YaM6KGo77yM5b2i5aaCXG4gKiB7IGNvbnN0cnVjdG9yTmFtZTogeyBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5T3B0aW9uIH1cbiAqL1xuZXhwb3J0IGNvbnN0IFdpZGdldFByb3BlcnR5TWFwID0gbmV3IE1hcDxzdHJpbmcsIFByb3BlcnR5T3B0aW9uW10+KClcbi8qKlxuICogVE9ETzog5Yqg5YWl5qOA5p+l77yM57yW6K+R5pe25oql6ZSZ77yIbmFtZeS4jeW6lOivpeWGme+8m++8iVxuICogQHBhcmFtIG9wdGlvbiDlj6/pgInvvIzpu5jorqTkuLogeyB0eXBlOiBQcm9wZXJ0eVR5cGVzLlN0cmluZyB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm9wZXJ0eSAob3B0aW9uOiBQcm9wZXJ0eU9wdGlvbiA9IHt9KSB7XG4gIC8vIOi/memHjOe7n+S4gOWkhOeQhu+8muayoeacieiuvue9riB0eXBlIOeahOS4gOW+i+iuvue9ruS4uiBUZXh044CC5rKh55So6YCS5b2S77yM5LuF5aSa6ICD6JmR5LqGIE9iaiDlhoXkuIDlsYLjgIJcbiAgb3B0aW9uLnR5cGUgPSBvcHRpb24udHlwZSB8fCBQcm9wZXJ0eVR5cGVzLlRleHRcbiAgaWYgKG9wdGlvbi5vYmplY3RPcHRpb24gJiYgb3B0aW9uLm9iamVjdE9wdGlvbi5vYmpQcm9wZXJ0eU9wdGlvbnMpIHtcbiAgICBvcHRpb24ub2JqZWN0T3B0aW9uLm9ialByb3BlcnR5T3B0aW9ucy5mb3JFYWNoKHN1Yk9wdGlvbiA9PiB7XG4gICAgICBzdWJPcHRpb24udHlwZSA9IHN1Yk9wdGlvbi50eXBlIHx8IFByb3BlcnR5VHlwZXMuVGV4dFxuICAgIH0pXG4gIH1cbiAgb3B0aW9uLmlzQXJyYXkgPSAhIW9wdGlvbi5pc0FycmF5XG4gIHJldHVybiAod2lkZ2V0UHJvdG90eXBlLCBwcm9wTmFtZSkgPT4ge1xuICAgIC8vIFRPRE86IOaDs+WKnuazleaKiiBzdSDliqDov5vmiYDmnInov5DooYzml7bms6jlhozooajph4znmoQga2V5cyDph4xcbiAgICBjb25zdCBjdG9yTmFtZSA9IHdpZGdldFByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgaWYgKCFXaWRnZXRQcm9wZXJ0eU1hcC5nZXQoY3Rvck5hbWUpKSBXaWRnZXRQcm9wZXJ0eU1hcC5zZXQoY3Rvck5hbWUsIFtdKVxuICAgIFdpZGdldFByb3BlcnR5TWFwLmdldChjdG9yTmFtZSkucHVzaCh7IG5hbWU6IHByb3BOYW1lLCAuLi5vcHRpb24gfSlcbiAgICAvLyDosIMgYW5ndWxhciBJbnB1dCBkZWNvcmF0b3JcbiAgICBJbnB1dCgpKHdpZGdldFByb3RvdHlwZSwgcHJvcE5hbWUpXG4gIH1cbn1cbiJdfQ==