import * as tslib_1 from "tslib";
var _a;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PlThemeColors } from '@gspwidget/util';
import { PropertyTypes } from '../../types';
import { FilterSchema, frontendFilterProp } from '../filter';
import { datalessJumpOption } from '../preset/preset.jump';
// import { WidgetPropertyMap } from './widget-event.decorator';
import { WidgetRegistry } from './widget-registry';
import { WidgetBase } from '../WidgetBase';
import { WidgetPropertyMap } from './widget-property.decorator';
import * as i0 from "@angular/core";
/** @type {?} */
var PropertyTypeDefaultValues = (_a = {},
    _a[PropertyTypes.Text] = '',
    _a[PropertyTypes.Bool] = false,
    _a[PropertyTypes.Number] = 0,
    _a[PropertyTypes.DataField] = {},
    _a)
// const frontendFilterProp: PropertyOption = {
//   name: 'filter',
//   displayName: '筛选',
//   isArray: true,
//   type: PropertyTypes.Filter,
// }
// TODO: filters
;
// const frontendFilterProp: PropertyOption = {
//   name: 'filter',
//   displayName: '筛选',
//   isArray: true,
//   type: PropertyTypes.Filter,
// }
// TODO: filters
/** @type {?} */
var titleBarProps = [{
        category: 'titleBar',
        name: 'titleBarHide',
        type: PropertyTypes.Bool,
        boolOption: {
            default: false
        }
    }, {
        category: 'titleBar',
        name: 'titleBarShowRefresh',
        displayName: 'showRefreshBtn',
        type: PropertyTypes.Bool,
        boolOption: {
            default: true
        }
    }, tslib_1.__assign({}, datalessJumpOption, { category: 'titleBar', name: 'titleBarJump' })];
var WidgetPropertyService = /** @class */ (function () {
    function WidgetPropertyService() {
    }
    /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param prop
     * @param arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     */
    /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param {?} prop
     * @param {?=} arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     * @return {?}
     */
    WidgetPropertyService.prototype.getPropertyDefaultValue = /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param {?} prop
     * @param {?=} arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     * @return {?}
     */
    function (prop, arrayItem) {
        var _this = this;
        if (arrayItem === void 0) { arrayItem = false; }
        if (!arrayItem && prop.isArray)
            return [];
        // object: 递归生成具有所有 key 的对象，每个 key 的 value 是默认值
        if (prop.type === PropertyTypes.Object) {
            /** @type {?} */
            var newObj_1 = {};
            prop.objectOption.objPropertyOptions.forEach((/**
             * @param {?} childProp
             * @return {?}
             */
            function (childProp) {
                newObj_1[childProp.name] = (childProp[childProp.type]
                    && childProp[childProp.type].default)
                    || _this.getPropertyDefaultValue(childProp);
            }));
            return newObj_1;
        }
        else if (prop.type === PropertyTypes.Enum) {
            /** @type {?} */
            var firstItem = prop.enumOption.items[0];
            return typeof firstItem === 'string'
                ? firstItem
                : firstItem['value'];
        }
        else if (prop.type === PropertyTypes.Color) {
            /** @type {?} */
            var colors = this.getColorsByColorOption(prop.colorOption);
            /** @type {?} */
            var i = Math.random();
            return colors[Math.floor(i * colors.length)];
        }
        else if (prop.type === PropertyTypes.Filter) {
            return new FilterSchema();
        }
        else {
            return PropertyTypeDefaultValues[prop.type];
        }
    };
    /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     */
    /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     * @param {?} widgetName
     * @param {?} widgetConfig
     * @return {?}
     */
    WidgetPropertyService.prototype.getWidgetProps = /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     * @param {?} widgetName
     * @param {?} widgetConfig
     * @return {?}
     */
    function (widgetName, widgetConfig) {
        /** @type {?} */
        var ctorName = WidgetRegistry.getWidgetByName(widgetName).ctor.name
        // widget 子类中的 property
        ;
        // widget 子类中的 property
        /** @type {?} */
        var widgetProps = WidgetPropertyMap.get(ctorName) || []
        // 筛选出 widget 子类中没重写过的 property，否则可能会有俩一样的
        ;
        // 筛选出 widget 子类中没重写过的 property，否则可能会有俩一样的
        /** @type {?} */
        var baseProps = WidgetPropertyMap.get(WidgetBase.name)
            .filter((/**
         * @param {?} baseProp
         * @return {?}
         */
        function (baseProp) { return !widgetProps.some((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) { return baseProp.name === prop.name; })); }))
        // 组装
        ;
        // 组装
        return tslib_1.__spread(baseProps, (widgetConfig.enableCommonTitleBar
            ? titleBarProps
            : []), (widgetConfig.enableDataConfig && widgetConfig.enableCommonTitleBar
            ? [frontendFilterProp]
            : []), widgetProps
        // ...testProps,
        );
    };
    /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     */
    /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     * @param {?} props
     * @param {?} propValues
     * @return {?}
     */
    WidgetPropertyService.prototype.mixinWidgetPropValues = /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     * @param {?} props
     * @param {?} propValues
     * @return {?}
     */
    function (props, propValues) {
        var _this = this;
        /** @type {?} */
        var mixinedPropValues = tslib_1.__assign({}, propValues)
        // 检查所有 properties，哪个没有值，就赋上默认推荐值
        ;
        // 检查所有 properties，哪个没有值，就赋上默认推荐值
        props.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) {
            // 这里必须是判断 undefined，否则 bool 类型的 false 也可能判定为无值
            if (mixinedPropValues[prop.name] === undefined) {
                mixinedPropValues[prop.name] = prop[prop.type] && prop[prop.type].default
                    // 如果元部件无默认值，就加入全局的当前类型默认值
                    || _this.getPropertyDefaultValue(prop);
            }
        }));
        return mixinedPropValues;
    };
    /**
     * @param {?} colorOption
     * @return {?}
     */
    WidgetPropertyService.prototype.getColorsByColorOption = /**
     * @param {?} colorOption
     * @return {?}
     */
    function (colorOption) {
        if (colorOption && colorOption.palette)
            return colorOption.palette;
        /** @type {?} */
        var colorType = colorOption ? colorOption.type : 'pure';
        /** @type {?} */
        var colors;
        switch (colorType) {
            case 'gradient':
                colors = PlThemeColors.gradient;
                break;
            case 'pureOrGradient':
                colors = tslib_1.__spread(PlThemeColors.pure, PlThemeColors.gradient);
                break;
            case 'pure':
            default:
                colors = PlThemeColors.pure;
                break;
        }
        return colors;
    };
    WidgetPropertyService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WidgetPropertyService.ctorParameters = function () { return []; };
    /** @nocollapse */ WidgetPropertyService.ngInjectableDef = i0.defineInjectable({ factory: function WidgetPropertyService_Factory() { return new WidgetPropertyService(); }, token: WidgetPropertyService, providedIn: "root" });
    return WidgetPropertyService;
}());
export { WidgetPropertyService };
//# sourceMappingURL=data:application/json;base64,