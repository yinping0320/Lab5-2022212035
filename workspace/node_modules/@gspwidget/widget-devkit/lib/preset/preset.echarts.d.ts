import { DataField, PropertyTypes } from "../../types";
import LinearGradient from "./zrender.linear-gradient";
export declare const EchartsOptions: {
    grid: {
        top: number;
        right: number;
        bottom: number;
        left: number;
        containLabel: boolean;
    };
    xAxis: {
        type: string;
        axisLine: {
            lineStyle: {
                color: string;
            };
        };
        axisTick: {
            lineStyle: {
                color: string;
            };
        };
        axisLabel: {
            color: string;
            margin: number;
            fontSize: number;
        };
    };
    yAxis: {
        axisLine: {
            show: boolean;
        };
        axisTick: {
            show: boolean;
        };
        splitLine: {
            lineStyle: {
                color: string;
            };
        };
        axisLabel: {
            fontSize: number;
        };
    };
    legend: {
        x: string;
        y: string;
        itemWidth: number;
        itemHeight: number;
        borderRadius: number;
        icon: string;
        padding: number[];
        textStyle: {
            color: string;
        };
    };
    tooltip: {
        backgroundColor: string;
        textStyle: {
            color: string;
        };
        extraCssText: string;
        appendToBody: boolean;
        confine: boolean;
    };
};
export declare const chartsConsts: {
    /** series label 字体大小 */
    seriesLabelFontSize: number;
};
export declare const getChartColorsPure: (params: any) => string;
export declare const getChartColorsGradient: (params: any) => LinearGradient;
export declare const getChartColorsGradientOne: (params: any) => LinearGradient;
/**
 * 对于有 “y 轴自定义范围” 的 charts 元部件，data 都要用它过滤后再用
 * @param obj 元部件实例
 */
export declare function filterYData(obj: {
    filterYFlag: any;
    yFieldObjs: {
        valueField: DataField;
        color: string;
    }[];
    minY: any;
    maxY: any;
}, data: any): any;
export declare const EchartsPropertyOptions: {
    showRefresh: {
        category: string;
        displayName: string;
        type: PropertyTypes;
        boolOption: {
            default: boolean;
        };
    };
    filterYFlag: {
        type: PropertyTypes;
        category: string;
        displayName: string;
    };
    minY: {
        type: PropertyTypes;
        category: string;
        displayName: string;
        numberOption: {
            default: number;
        };
        ifShow(values: any): any;
    };
    maxY: {
        type: PropertyTypes;
        category: string;
        displayName: string;
        numberOption: {
            default: number;
        };
        ifShow(values: any): any;
    };
    showLabel: {
        category: string;
        type: PropertyTypes;
        displayName: string;
    };
    showTooltip: {
        category: string;
        type: PropertyTypes;
        boolOption: {
            default: boolean;
        };
        displayName: string;
    };
    legendStyleOption: {
        type: PropertyTypes;
        displayName: string;
        category: string;
        enumOption: {
            default: string;
            items: {
                value: string;
                displayName: string;
            }[];
        };
    };
    valueStyleOption: {
        type: PropertyTypes;
        displayName: string;
        category: string;
        enumOption: {
            default: string;
            items: {
                value: string;
                displayName: string;
            }[];
        };
    };
};
/**
 * 三种传参方式：
 * 1. '#000', '#fff'
 * 2. '#000,#fff'
 * 3. '#000'
 */
export declare function echartsGradient(c1: string, c2?: string): string | LinearGradient;
export declare const tempMap: {
    '金额': {
        'en': string;
        'zh-CHS': string;
    };
    '数量': {
        'en': string;
        'zh-CHS': string;
    };
};
export declare function tempLabel(dataField: DataField, currentLang: string): any;
