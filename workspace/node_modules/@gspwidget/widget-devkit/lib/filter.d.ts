import { PropertyOption } from "../types";
/**
 * 没发直接用 [] 作 key 直接建 literal 对象，aot 编译会报错
 */
export declare function getObj(key: string, value: number): {};
export declare type FSDateUnit = 'year' | 'month' | 'day';
/** 筛选描述 */
export declare class FSLastTimeItem {
    num: number;
    unit?: FSDateUnit;
    isDefault?: boolean;
    /**
     * 传入一个 '最近n某'，返回对应的时间范围数组
     */
    static GetDates(lastTimeItem: FSLastTimeItem): Date[];
}
export declare class FSRangeDefault {
    beforeNum: number;
    beforeUnit: FSDateUnit;
    afterNum: number;
    afterUnit: FSDateUnit;
    static GetDates(rangeDefault: FSRangeDefault): Date[];
}
export declare class FSDate {
    type?: 'single' | 'range' | 'lastTimeEnum';
    singleUnit?: FSDateUnit;
    singleDefaultType?: 'current' | 'specified';
    singleDefaultSpecified: Date;
    rangeDefault: FSRangeDefault;
    lastTimeItems?: FSLastTimeItem[];
    lastTimeDisplayType?: 'select' | 'flat';
}
export declare type FSEnumSource = 'dataField' | 'manual' | 'dataset';
export declare class FSEnum {
    multi: boolean;
    /** 暂时定为，仅有 single 时可以选择 flat */
    displayType?: 'select' | 'flat';
    source?: FSEnumSource;
    /** 是否可清空不选。仅有 select 且 single 才有此选项 */
    allowEmpty: boolean;
    itemsLabelField?: string;
    itemsValueField?: string;
    /** 通过上面两个字段取出 items 存在下面 */
    itemsFromData?: FSEnumItem[];
    itemsManual?: FSEnumItem[];
    multiDefault: string[];
    singleDefault: string;
    static GetItems(fsEnum: FSEnum): FSEnumItem[];
    static GetItemValues(fsEnum: FSEnum): any[];
}
export declare class FSEnumItem {
    label: string;
    value: string;
}
export declare class FilterSchema {
    /** 过滤名称，在筛选控件上显示，可选 */
    i18nName: any;
    showName: boolean;
    /** 过滤大类 */
    type?: 'date' | 'enum' | 'number' | 'text' | 'help';
    /** 每种类型的过滤配置 */
    date: FSDate;
    enum: FSEnum;
    help?: {};
    number: {
        default: number;
    };
    text: {
        default: string;
    };
    /**
     * 获取 FS 的默认值
     * 🙅 不可以依赖 data：部件第一次根据默认值筛选时，还没有 data 呢。
     */
    static getDefaultValue(fs: FilterSchema): string | number | string[] | Date | Date[];
}
export declare function ifFsDateRange(fs: FilterSchema): boolean;
export declare function isFsFlat(fs: FilterSchema): boolean;
/**
 * 官方预制的筛选 property
 */
export declare const FILTER_PROP_NAME = "filter";
export declare const frontendFilterProp: PropertyOption;
export interface FilterConfig {
    fs: FilterSchema;
    dpId: string;
    dpId2: string;
}
