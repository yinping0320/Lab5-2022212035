import { EventEmitter } from '@angular/core';
import { DataWithDims } from '@gspwidget/util';
import { Observable } from 'rxjs';
export interface LoadDataOptions {
    param?: {
        [key: string]: any;
    };
}
/** 部件系统、数据服务内部使用 */
export interface LoadDataPayload {
}
/**
 * 数据加载不应该让此 service 直接发出，因为外部框架并不随时都支持取数，
 * 比如新增部件后的部件配置，此时没有配置过数据，便会服务端报错。
 * 应该交由元部件容器加载数据。
 */
export declare class WidgetDataService {
    /** loadData() / reloadData() 时触发，外部元部件容器接收、加载数据，并通过 setData 设置回数据 */
    onLoadData: EventEmitter<{
        [key: string]: any;
    }>;
    private onGetData;
    private onGetDataWithDims;
    /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     */
    loadData(options?: LoadDataOptions): EventEmitter<any[]>;
    /**
     * 获取全数据信息，包含 dimensions
     */
    loadDataWithDims(options?: LoadDataOptions): Observable<DataWithDims>;
    /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     */
    reloadData(param?: {
        [key: string]: any;
    }): void;
    /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param dataWithDims 要设置的数据
     */
    setData(dataWithDims: DataWithDims): void;
}
