import add from 'date-fns/add';
import sub from 'date-fns/sub';
import { map } from 'rxjs/operators';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { curLang, FILTERS_WIDGET_FILTERS_PROP_NAME, FILTERS_WIDGET_NAME, list2Tree, PlThemeColors } from '@gspwidget/util';
import { __decorate, __metadata, __assign, __spread, __read, __extends } from 'tslib';
import { Injectable, EventEmitter, NgModule, Component, ContentChild, Input, Output, ViewEncapsulation, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BsModalService, ModalModule } from 'ngx-bootstrap/modal';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// if (!window.widgetBaseProperies) window.widgetBaseProperies = []
if (!window.registry)
    window.registry = {};
/**
 * 元部件注册表
 * @type {?}
 */
var WidgetRegistry = {
    setWidget: /**
     * @param {?} name
     * @param {?} config
     * @return {?}
     */
    function (name, config) {
        if (!window.registry[name])
            window.registry[name] = {};
        window.registry[name] = __assign({}, window.registry[name], config);
    },
    getWidgetByName: /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return window.registry[name];
    },
    getWidgetByCtorName: /**
     * @param {?} ctorName
     * @return {?}
     */
    function (ctorName) {
        return Object.values(window.registry)
            .find((/**
         * @param {?} widgetConfig
         * @return {?}
         */
        function (widgetConfig) {
            return widgetConfig.ctor.name === ctorName;
        }));
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} widgetConfig
 * @return {?}
 */
function Widget(widgetConfig) {
    return (/**
     * @param {?} constructor
     * @return {?}
     */
    function (constructor) {
        WidgetRegistry.setWidget(widgetConfig.name, __assign({ ctor: constructor }, widgetConfig));
        // 父类 WidgetBase
        constructor.prototype.widgetName = widgetConfig.name;
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var WidgetEventMap = new Map()
/** 用于把 EventEmitter 属性注册为元部件事件 */
;
/**
 * 用于把 EventEmitter 属性注册为元部件事件
 * @param {?=} eventConfig
 * @return {?}
 */
function WidgetEvent(eventConfig) {
    if (eventConfig === void 0) { eventConfig = {}; }
    return (/**
     * @param {?} widgetPrototype
     * @param {?} eventPropName
     * @return {?}
     */
    function (widgetPrototype, eventPropName) {
        // TODO: 想办法把 su 加进所有运行时注册表里的 keys 里
        /** @type {?} */
        var ctorName = widgetPrototype.constructor.name;
        if (!WidgetEventMap.get(ctorName))
            WidgetEventMap.set(ctorName, []);
        WidgetEventMap.get(ctorName).push(__assign({ propName: eventPropName }, eventConfig));
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WidgetEventService = /** @class */ (function () {
    function WidgetEventService() {
    }
    /**
     * @param {?} widgetName
     * @param {?} pvs
     * @return {?}
     */
    WidgetEventService.prototype.getEventsByWidgetName = /**
     * @param {?} widgetName
     * @param {?} pvs
     * @return {?}
     */
    function (widgetName, pvs) {
        /** @type {?} */
        var ctorName = WidgetRegistry.getWidgetByName(widgetName).ctor.name;
        /** @type {?} */
        var widgetEvents = WidgetEventMap.get(ctorName) || [];
        if (widgetName === FILTERS_WIDGET_NAME) {
            return pvs[FILTERS_WIDGET_FILTERS_PROP_NAME].map((/**
             * @param {?} fc
             * @return {?}
             */
            function (fc) { return ({
                name: fc.i18nName[curLang],
                propName: fc.i18nName[curLang],
            }); }));
        }
        // 组装
        return __spread(widgetEvents, test);
    };
    WidgetEventService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WidgetEventService.ctorParameters = function () { return []; };
    /** @nocollapse */ WidgetEventService.ngInjectableDef = defineInjectable({ factory: function WidgetEventService_Factory() { return new WidgetEventService(); }, token: WidgetEventService, providedIn: "root" });
    return WidgetEventService;
}());
/** @type {?} */
var test = [{
        name: 'click bar'
    }, {
        name: 'event 2'
    }, {
        name: 'event 3'
    }];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PropertyTypes = {
    Text: 'textOption',
    Bool: 'boolOption',
    Number: 'numberOption',
    Enum: 'enumOption',
    Color: 'colorOption',
    // Date = 'dateOption',
    Object: 'objectOption',
    Custom: 'customOption',
    SelectHelp: 'selectHelpOption',
    /** Help 得到的值的结构，取决于配置 HelpOption 后，最终得到的数据结构 */
    Help: 'helpOption',
    /** DataField 得到的值的值的类型为 DataField */
    DataField: 'dataFieldOption',
    Filter: 'filterOption',
    Html: 'htmlOption',
    DataParam: 'dataParamOption',
};
/** @enum {number} */
var HelpStructure = {
    table: 0,
    treeTable: 1,
    transfer: 2,
    treeTransfer: 3,
};
HelpStructure[HelpStructure.table] = 'table';
HelpStructure[HelpStructure.treeTable] = 'treeTable';
HelpStructure[HelpStructure.transfer] = 'transfer';
HelpStructure[HelpStructure.treeTransfer] = 'treeTransfer';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 没发直接用 [] 作 key 直接建 literal 对象，aot 编译会报错
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function getObj(key, value) {
    /** @type {?} */
    var obj = {};
    obj[key] = value;
    return obj;
}
/**
 * 筛选描述
 */
var  /**
 * 筛选描述
 */
FSLastTimeItem = /** @class */ (function () {
    function FSLastTimeItem() {
        this.num = 1;
        this.unit = 'day';
    }
    /**
     * 传入一个 '最近n某'，返回对应的时间范围数组
     */
    /**
     * 传入一个 '最近n某'，返回对应的时间范围数组
     * @param {?} lastTimeItem
     * @return {?}
     */
    FSLastTimeItem.GetDates = /**
     * 传入一个 '最近n某'，返回对应的时间范围数组
     * @param {?} lastTimeItem
     * @return {?}
     */
    function (lastTimeItem) {
        return [
            sub(new Date(), getObj(lastTimeItem.unit + 's', lastTimeItem.num)),
            new Date()
        ];
    };
    return FSLastTimeItem;
}());
var FSRangeDefault = /** @class */ (function () {
    function FSRangeDefault() {
        this.beforeNum = 1;
        this.beforeUnit = 'month';
        this.afterNum = 0;
        this.afterUnit = 'day';
    }
    /**
     * @param {?} rangeDefault
     * @return {?}
     */
    FSRangeDefault.GetDates = /**
     * @param {?} rangeDefault
     * @return {?}
     */
    function (rangeDefault) {
        return [
            sub(new Date(), getObj(rangeDefault.beforeUnit + 's', rangeDefault.afterNum)),
            add(new Date(), getObj(rangeDefault.beforeUnit + 's', rangeDefault.afterNum)),
        ];
    };
    return FSRangeDefault;
}());
var FSDate = /** @class */ (function () {
    function FSDate() {
        this.type = 'single';
        this.singleUnit = 'day';
        this.singleDefaultType = 'current';
        this.singleDefaultSpecified = new Date();
        this.rangeDefault = new FSRangeDefault();
        this.lastTimeItems = [];
        this.lastTimeDisplayType = 'flat';
    }
    return FSDate;
}());
var FSEnum = /** @class */ (function () {
    function FSEnum() {
        this.multi = false;
        /**
         * 暂时定为，仅有 single 时可以选择 flat
         */
        this.displayType = 'select';
        this.source = 'manual';
        /**
         * 是否可清空不选。仅有 select 且 single 才有此选项
         */
        this.allowEmpty = false;
        /**
         * 通过上面两个字段取出 items 存在下面
         */
        this.itemsFromData = [];
        this.itemsManual = [];
        this.multiDefault = [];
    }
    // 暂时不做
    // sourceDatasetId: string
    // sourceDatasetLabelField?: DataField
    // sourceDatasetValueField?: DataField
    // 暂时不做
    // sourceDatasetId: string
    // sourceDatasetLabelField?: DataField
    // sourceDatasetValueField?: DataField
    /**
     * @param {?} fsEnum
     * @return {?}
     */
    FSEnum.GetItems = 
    // 暂时不做
    // sourceDatasetId: string
    // sourceDatasetLabelField?: DataField
    // sourceDatasetValueField?: DataField
    /**
     * @param {?} fsEnum
     * @return {?}
     */
    function (fsEnum) {
        var source = fsEnum.source, itemsFromData = fsEnum.itemsFromData, itemsManual = fsEnum.itemsManual;
        if (source === 'dataField') {
            // if (!itemsValueField || !intactData) return []
            // const tempItems = intactData.map(dataItem => ({
            //   label: dataItem[itemsLabelField || itemsValueField],
            //   value: dataItem[itemsValueField]
            // }))
            // return ArrUtil.Unique(tempItems)
            return itemsFromData;
        }
        else if (source === 'manual') {
            return itemsManual;
        }
    };
    /**
     * @param {?} fsEnum
     * @return {?}
     */
    FSEnum.GetItemValues = /**
     * @param {?} fsEnum
     * @return {?}
     */
    function (fsEnum) {
        /**
         * @param {?} item
         * @return {?}
         */
        function mapCb(item) { return item.value; }
        return FSEnum.GetItems(fsEnum).map(mapCb);
    };
    return FSEnum;
}());
var FSEnumItem = /** @class */ (function () {
    function FSEnumItem() {
    }
    return FSEnumItem;
}());
var FilterSchema = /** @class */ (function () {
    function FilterSchema() {
        /**
         * 过滤名称，在筛选控件上显示，可选
         */
        this.i18nName = {};
        this.showName = false;
        /**
         * 过滤大类
         */
        this.type = 'date';
        /**
         * 每种类型的过滤配置
         */
        this.date = new FSDate();
        this.enum = new FSEnum();
        this.number = {
            default: 0
        };
        this.text = {
            default: ''
        };
    }
    /**
     * 获取 FS 的默认值
     * 🙅 不可以依赖 data：部件第一次根据默认值筛选时，还没有 data 呢。
     */
    /**
     * 获取 FS 的默认值
     * 🙅 不可以依赖 data：部件第一次根据默认值筛选时，还没有 data 呢。
     * @param {?} fs
     * @return {?}
     */
    FilterSchema.getDefaultValue = /**
     * 获取 FS 的默认值
     * 🙅 不可以依赖 data：部件第一次根据默认值筛选时，还没有 data 呢。
     * @param {?} fs
     * @return {?}
     */
    function (fs) {
        switch (fs.type) {
            case 'date':
                if (fs.date.type === 'single') {
                    if (fs.date.singleDefaultType === 'current') {
                        return new Date();
                    }
                    else {
                        return fs.date.singleDefaultSpecified;
                    }
                }
                else if (fs.date.type === 'range') {
                    return FSRangeDefault.GetDates(fs.date.rangeDefault);
                }
                else if (fs.date.type === 'lastTimeEnum') {
                    return FSLastTimeItem.GetDates(fs.date.lastTimeItems[0]);
                }
                break;
            case 'enum':
                var _a = fs.enum, multi = _a.multi, singleDefault = _a.singleDefault, multiDefault = _a.multiDefault;
                return multi ? multiDefault : singleDefault;
            case 'number':
                return fs.number.default;
                break;
            case 'text':
                return fs.text.default;
                break;
        }
    };
    return FilterSchema;
}());
/**
 * @param {?} fs
 * @return {?}
 */
function ifFsDateRange(fs) {
    if (!fs)
        return;
    return fs.type === 'date' && fs.date.type === 'range';
}
/**
 * @param {?} fs
 * @return {?}
 */
function isFsFlat(fs) {
    if (!fs)
        return;
    return fs.type === 'date' && fs.date.type === 'lastTimeEnum' && fs.date.lastTimeDisplayType === 'flat'
        || fs.type === 'enum' && !fs.enum.multi && fs.enum.displayType === 'flat';
}
/**
 * 官方预制的筛选 property
 * @type {?}
 */
var FILTER_PROP_NAME = 'filter';
/** @type {?} */
var frontendFilterProp = {
    name: FILTER_PROP_NAME,
    displayName: '筛选',
    isArray: true,
    type: PropertyTypes.Object,
    objectOption: {
        objPropertyOptions: [{
                name: 'fs',
                type: PropertyTypes.Filter,
            }, {
                name: 'dpId',
                type: PropertyTypes.DataParam,
            }, {
                name: 'dpId2',
                type: PropertyTypes.DataParam,
                ifShow: (/**
                 * @param {?} pv
                 * @return {?}
                 */
                function (pv) {
                    return pv.fs && ifFsDateRange(pv.fs);
                })
            }]
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var JumpTypes = {
    None: '0',
    Func: '1',
    ChartTable: '2',
    NewBrowserTab: '3',
};
/**
 * 选择联查类型
 * @type {?}
 */
var jumpTypeOption = {
    type: PropertyTypes.Enum,
    enumOption: {
        default: JumpTypes.None,
        items: [
            { value: JumpTypes.None, displayName: 'none' },
            { value: JumpTypes.Func, displayName: 'toFuncOrInvoke' },
            // { value: JumpTypes.ChartTable, displayName: '跳转至预制图表页' },
            { value: JumpTypes.NewBrowserTab, displayName: 'browserNewTab' }
        ]
    }
}
// let allFuncs
/** 菜单/联查帮助 option */
;
// let allFuncs
/**
 * 菜单/联查帮助 option
 * @type {?}
 */
var funcOption = {
    type: PropertyTypes.Help,
    tip: '选菜单/联查的帮助',
    helpOption: {
        getData: (/**
         * @param {?} httpClient
         * @return {?}
         */
        function (httpClient) {
            return httpClient
                .get('/api/runtime/sys/v1.0/functions/allFuncs')
                .pipe(map((/**
             * @param {?} funcs
             * @return {?}
             */
            function (funcs) {
                // allFuncs = funcs
                return list2Tree(funcs, {
                    rootParentIdValue: '0',
                    beforeProcess: /**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        if (item.layer === '3') {
                            item.isLeaf = true;
                            item.isTableParent = true;
                        }
                    }
                });
            })));
        }),
        structure: HelpStructure.treeTable,
        tableFields: ['code', 'name'],
        valueField: 'id',
        nameField: 'name'
    }
}
/** 不取决于某条数据值的联查 */
;
/**
 * 不取决于某条数据值的联查
 * @type {?}
 */
var dataJumpOption = {
    category: 'clickJump',
    type: PropertyTypes.Object,
    objectOption: {
        objPropertyOptions: [
            __assign({ name: 'jumpType', displayName: 'jumpType' }, jumpTypeOption),
            /** 菜单/联查 */
            {
                name: 'funcIdSource',
                type: PropertyTypes.Enum,
                enumOption: {
                    items: ['fixed', 'fromData']
                },
                ifShow: /**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.jumpType === JumpTypes.Func; }
            }, {
                name: 'funcIdDataField',
                type: PropertyTypes.DataField,
                ifShow: /**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    return c.jumpType === JumpTypes.Func && c.funcIdSource === 'fromData';
                }
            },
            __assign({ name: 'funcId', displayName: 'func/invoke', ifShow: /**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    return c.jumpType === JumpTypes.Func && c.funcIdSource === 'fixed';
                } }, funcOption),
            {
                name: 'funcParams',
                displayName: 'routeParams',
                type: PropertyTypes.Object,
                isArray: true,
                objectOption: {
                    objPropertyOptions: [{
                            name: 'key',
                            displayName: 'paramKey',
                            textOption: { i18n: false },
                            type: PropertyTypes.Text,
                        }, {
                            name: 'valueType',
                            displayName: 'valueType',
                            type: PropertyTypes.Enum,
                            enumOption: {
                                items: [
                                    { value: 'fieldName', displayName: 'dataFieldValue' },
                                    { value: 'fixedValue', displayName: 'fixedValue' }
                                ]
                            }
                        }, {
                            name: 'fixedValue',
                            displayName: 'paramFixedValue',
                            type: PropertyTypes.Text,
                            textOption: { i18n: false },
                            ifShow: /**
                             * @param {?} funcParam
                             * @return {?}
                             */
                            function (funcParam) { return funcParam.valueType === 'fixedValue'; }
                        }, {
                            name: 'fieldName',
                            displayName: 'paramValueField',
                            type: PropertyTypes.DataField,
                            ifShow: /**
                             * @param {?} funcParam
                             * @return {?}
                             */
                            function (funcParam) { return funcParam.valueType === 'fieldName'; }
                        }]
                },
                ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.Func; }
            },
            /** 浏览器标签 */
            {
                name: 'url',
                displayName: 'newTabUrl',
                type: PropertyTypes.Text,
                textOption: { i18n: false },
                ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.NewBrowserTab; }
            }, {
                name: 'urlParams',
                displayName: 'urlParams',
                type: PropertyTypes.Object,
                isArray: true,
                objectOption: {
                    objPropertyOptions: [{
                            name: 'valueType',
                            displayName: 'valueType',
                            type: PropertyTypes.Enum,
                            enumOption: {
                                items: [
                                    { value: 'fieldName', displayName: 'dataFieldValue' },
                                    { value: 'fixedValue', displayName: 'fixedValue' }
                                ]
                            }
                        }, {
                            name: 'fixedValue',
                            displayName: 'paramFixedValue',
                            type: PropertyTypes.Text,
                            textOption: { i18n: false },
                            ifShow: /**
                             * @param {?} urlParam
                             * @return {?}
                             */
                            function (urlParam) { return urlParam.valueType === 'fixedValue'; }
                        }, {
                            name: 'fieldName',
                            displayName: 'paramValueField',
                            type: PropertyTypes.DataField,
                            ifShow: /**
                             * @param {?} urlParam
                             * @return {?}
                             */
                            function (urlParam) { return urlParam.valueType === 'fieldName'; }
                        }]
                },
                ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.NewBrowserTab; }
            }, {
                name: 'queryParams',
                displayName: 'urlQueryParams',
                type: PropertyTypes.Object,
                isArray: true,
                objectOption: {
                    objPropertyOptions: [{
                            name: 'key',
                            displayName: 'paramKey',
                            type: PropertyTypes.Text,
                            textOption: { i18n: false },
                        }, {
                            name: 'valueType',
                            displayName: 'valueType',
                            type: PropertyTypes.Enum,
                            enumOption: {
                                items: [
                                    { value: 'fieldName', displayName: 'dataFieldValue' },
                                    { value: 'fixedValue', displayName: 'fixedValue' }
                                ]
                            }
                        }, {
                            name: 'fixedValue',
                            displayName: 'paramFixedValue',
                            type: PropertyTypes.Text,
                            textOption: { i18n: false },
                            ifShow: /**
                             * @param {?} funcParam
                             * @return {?}
                             */
                            function (funcParam) { return funcParam.valueType === 'fixedValue'; }
                        }, {
                            name: 'fieldName',
                            displayName: 'paramValueField',
                            type: PropertyTypes.DataField,
                            ifShow: /**
                             * @param {?} funcParam
                             * @return {?}
                             */
                            function (funcParam) { return funcParam.valueType === 'fieldName'; }
                        }]
                },
                ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.NewBrowserTab; }
            }
        ]
    }
}
/** 决于某条数据值的联查 */
;
/**
 * 决于某条数据值的联查
 * @type {?}
 */
var datalessJumpOption = {
    category: 'clickJump',
    type: PropertyTypes.Object,
    objectOption: {
        objPropertyOptions: [
            __assign({ name: 'jumpType', displayName: 'jumpType' }, jumpTypeOption),
            __assign({ name: 'funcId', displayName: 'func/invoke', ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.Func; } }, funcOption),
            {
                name: 'funcParams',
                displayName: 'routeParams',
                type: PropertyTypes.Object,
                isArray: true,
                objectOption: {
                    objPropertyOptions: [{
                            name: 'key',
                            displayName: 'paramKey',
                            type: PropertyTypes.Text,
                            textOption: { i18n: false },
                        }, {
                            name: 'value',
                            displayName: 'paramValue',
                            type: PropertyTypes.Text,
                            textOption: { i18n: false },
                        }]
                },
                ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.Func; }
            },
            /** 浏览器标签 */
            {
                name: 'url',
                displayName: 'newTabUrl',
                type: PropertyTypes.Text,
                textOption: { i18n: false },
                ifShow: /**
                 * @param {?} values
                 * @return {?}
                 */
                function (values) { return values.jumpType === JumpTypes.NewBrowserTab; }
            }
        ]
    }
}
/** @deprecated 请用 datalessJump 或 dataJump */
;
/**
 * @deprecated 请用 datalessJump 或 dataJump
 * @type {?}
 */
var CommonPropertyOptions = {
    jump: datalessJumpOption
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 元部件属性注册表，形如
 * { constructorName: { propertyName: propertyOption }
 * @type {?}
 */
var WidgetPropertyMap = new Map()
/**
 * TODO: 加入检查，编译时报错（name不应该写；）
 * @param option 可选，默认为 { type: PropertyTypes.String }
 */
;
/**
 * TODO: 加入检查，编译时报错（name不应该写；）
 * @param {?=} option 可选，默认为 { type: PropertyTypes.String }
 * @return {?}
 */
function Property(option) {
    if (option === void 0) { option = {}; }
    // 这里统一处理：没有设置 type 的一律设置为 Text。没用递归，仅多考虑了 Obj 内一层。
    option.type = option.type || PropertyTypes.Text;
    if (option.objectOption && option.objectOption.objPropertyOptions) {
        option.objectOption.objPropertyOptions.forEach((/**
         * @param {?} subOption
         * @return {?}
         */
        function (subOption) {
            subOption.type = subOption.type || PropertyTypes.Text;
        }));
    }
    option.isArray = !!option.isArray;
    return (/**
     * @param {?} widgetPrototype
     * @param {?} propName
     * @return {?}
     */
    function (widgetPrototype, propName) {
        // TODO: 想办法把 su 加进所有运行时注册表里的 keys 里
        /** @type {?} */
        var ctorName = widgetPrototype.constructor.name;
        if (!WidgetPropertyMap.get(ctorName))
            WidgetPropertyMap.set(ctorName, []);
        WidgetPropertyMap.get(ctorName).push(__assign({ name: propName }, option));
        // 调 angular Input decorator
        Input()(widgetPrototype, propName);
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var WidgetBase = /** @class */ (function () {
    /**
     * 因为是父类构造函数所以无法依赖注入, 也没法传入参数;
     * compInstance.field = xxx 的方式又发生在构造函数后而不太好,
     * 所以考虑此父类不提供成员属性, 而通过依赖注入, 在子组件自取.
     */
    function WidgetBase() {
        this.title = 'untitled';
        /**
         * @deprecated 是否使用外部数据源。是的话，wc 就拿它的 portlet id 请求数据去。应改为 dataEngine 写法。
         */
        this.useDataEngine = false;
        if (this.widgetName == null)
            console.error("\u5143\u90E8\u4EF6 " + this.constructor.name + " \u672A\u6DFB\u52A0 @Widget({ name: <name>})");
    }
    /**
     * 元部件容器大小变化事件，参数 width 为容器宽度，单位 px。
     * 可重写此方法以处理复杂的响应式样式。
     */
    /**
     * 元部件容器大小变化事件，参数 width 为容器宽度，单位 px。
     * 可重写此方法以处理复杂的响应式样式。
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    WidgetBase.prototype.onResized = /**
     * 元部件容器大小变化事件，参数 width 为容器宽度，单位 px。
     * 可重写此方法以处理复杂的响应式样式。
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (width, height) { };
    /**
     * @param {?} propName
     * @param {?} value
     * @return {?}
     */
    WidgetBase.prototype.onPropertyChange = /**
     * @param {?} propName
     * @param {?} value
     * @return {?}
     */
    function (propName, value) { };
    /**
     * @deprecated
     * 请用 this.dataService.loadData() 代替
     * @param data 获得的数据
     */
    /**
     * @deprecated
     * 请用 this.dataService.loadData() 代替
     * @param {?} data 获得的数据
     * @return {?}
     */
    WidgetBase.prototype.onGetData = /**
     * @deprecated
     * 请用 this.dataService.loadData() 代替
     * @param {?} data 获得的数据
     * @return {?}
     */
    function (data) { };
    __decorate([
        Property({
            category: '公共属性',
            displayName: '部件标题'
        }),
        __metadata("design:type", Object)
    ], WidgetBase.prototype, "title", void 0);
    return WidgetBase;
}());

var _a;
/** @type {?} */
var PropertyTypeDefaultValues = (_a = {},
    _a[PropertyTypes.Text] = '',
    _a[PropertyTypes.Bool] = false,
    _a[PropertyTypes.Number] = 0,
    _a[PropertyTypes.DataField] = {},
    _a)
// const frontendFilterProp: PropertyOption = {
//   name: 'filter',
//   displayName: '筛选',
//   isArray: true,
//   type: PropertyTypes.Filter,
// }
// TODO: filters
;
// const frontendFilterProp: PropertyOption = {
//   name: 'filter',
//   displayName: '筛选',
//   isArray: true,
//   type: PropertyTypes.Filter,
// }
// TODO: filters
/** @type {?} */
var titleBarProps = [{
        category: 'titleBar',
        name: 'titleBarHide',
        type: PropertyTypes.Bool,
        boolOption: {
            default: false
        }
    }, {
        category: 'titleBar',
        name: 'titleBarShowRefresh',
        displayName: 'showRefreshBtn',
        type: PropertyTypes.Bool,
        boolOption: {
            default: true
        }
    }, __assign({}, datalessJumpOption, { category: 'titleBar', name: 'titleBarJump' })];
var WidgetPropertyService = /** @class */ (function () {
    function WidgetPropertyService() {
    }
    /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param prop
     * @param arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     */
    /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param {?} prop
     * @param {?=} arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     * @return {?}
     */
    WidgetPropertyService.prototype.getPropertyDefaultValue = /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param {?} prop
     * @param {?=} arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     * @return {?}
     */
    function (prop, arrayItem) {
        var _this = this;
        if (arrayItem === void 0) { arrayItem = false; }
        if (!arrayItem && prop.isArray)
            return [];
        // object: 递归生成具有所有 key 的对象，每个 key 的 value 是默认值
        if (prop.type === PropertyTypes.Object) {
            /** @type {?} */
            var newObj_1 = {};
            prop.objectOption.objPropertyOptions.forEach((/**
             * @param {?} childProp
             * @return {?}
             */
            function (childProp) {
                newObj_1[childProp.name] = (childProp[childProp.type]
                    && childProp[childProp.type].default)
                    || _this.getPropertyDefaultValue(childProp);
            }));
            return newObj_1;
        }
        else if (prop.type === PropertyTypes.Enum) {
            /** @type {?} */
            var firstItem = prop.enumOption.items[0];
            return typeof firstItem === 'string'
                ? firstItem
                : firstItem['value'];
        }
        else if (prop.type === PropertyTypes.Color) {
            /** @type {?} */
            var colors = this.getColorsByColorOption(prop.colorOption);
            /** @type {?} */
            var i = Math.random();
            return colors[Math.floor(i * colors.length)];
        }
        else if (prop.type === PropertyTypes.Filter) {
            return new FilterSchema();
        }
        else {
            return PropertyTypeDefaultValues[prop.type];
        }
    };
    /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     */
    /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     * @param {?} widgetName
     * @param {?} widgetConfig
     * @return {?}
     */
    WidgetPropertyService.prototype.getWidgetProps = /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     * @param {?} widgetName
     * @param {?} widgetConfig
     * @return {?}
     */
    function (widgetName, widgetConfig) {
        /** @type {?} */
        var ctorName = WidgetRegistry.getWidgetByName(widgetName).ctor.name
        // widget 子类中的 property
        ;
        // widget 子类中的 property
        /** @type {?} */
        var widgetProps = WidgetPropertyMap.get(ctorName) || []
        // 筛选出 widget 子类中没重写过的 property，否则可能会有俩一样的
        ;
        // 筛选出 widget 子类中没重写过的 property，否则可能会有俩一样的
        /** @type {?} */
        var baseProps = WidgetPropertyMap.get(WidgetBase.name)
            .filter((/**
         * @param {?} baseProp
         * @return {?}
         */
        function (baseProp) { return !widgetProps.some((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) { return baseProp.name === prop.name; })); }))
        // 组装
        ;
        // 组装
        return __spread(baseProps, (widgetConfig.enableCommonTitleBar
            ? titleBarProps
            : []), (widgetConfig.enableDataConfig && widgetConfig.enableCommonTitleBar
            ? [frontendFilterProp]
            : []), widgetProps
        // ...testProps,
        );
    };
    /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     */
    /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     * @param {?} props
     * @param {?} propValues
     * @return {?}
     */
    WidgetPropertyService.prototype.mixinWidgetPropValues = /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     * @param {?} props
     * @param {?} propValues
     * @return {?}
     */
    function (props, propValues) {
        var _this = this;
        /** @type {?} */
        var mixinedPropValues = __assign({}, propValues)
        // 检查所有 properties，哪个没有值，就赋上默认推荐值
        ;
        // 检查所有 properties，哪个没有值，就赋上默认推荐值
        props.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) {
            // 这里必须是判断 undefined，否则 bool 类型的 false 也可能判定为无值
            if (mixinedPropValues[prop.name] === undefined) {
                mixinedPropValues[prop.name] = prop[prop.type] && prop[prop.type].default
                    // 如果元部件无默认值，就加入全局的当前类型默认值
                    || _this.getPropertyDefaultValue(prop);
            }
        }));
        return mixinedPropValues;
    };
    /**
     * @param {?} colorOption
     * @return {?}
     */
    WidgetPropertyService.prototype.getColorsByColorOption = /**
     * @param {?} colorOption
     * @return {?}
     */
    function (colorOption) {
        if (colorOption && colorOption.palette)
            return colorOption.palette;
        /** @type {?} */
        var colorType = colorOption ? colorOption.type : 'pure';
        /** @type {?} */
        var colors;
        switch (colorType) {
            case 'gradient':
                colors = PlThemeColors.gradient;
                break;
            case 'pureOrGradient':
                colors = __spread(PlThemeColors.pure, PlThemeColors.gradient);
                break;
            case 'pure':
            default:
                colors = PlThemeColors.pure;
                break;
        }
        return colors;
    };
    WidgetPropertyService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WidgetPropertyService.ctorParameters = function () { return []; };
    /** @nocollapse */ WidgetPropertyService.ngInjectableDef = defineInjectable({ factory: function WidgetPropertyService_Factory() { return new WidgetPropertyService(); }, token: WidgetPropertyService, providedIn: "root" });
    return WidgetPropertyService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO: 左图右表页面、funcId
/** @type {?} */
var CHART_TABLE_FUNC_ID = '???';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated
 * 为了 widget-devkit 的兼容而暂时保留。不准再用了。
 * 元部件应该直接用 \@gspwidget/util。
 * @type {?}
 */
var DASHBOARD_API = 'DashboardApi';
var WidgetDevkitService = /** @class */ (function () {
    function WidgetDevkitService(modalService) {
        this.modalService = modalService;
    }
    /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    WidgetDevkitService.prototype.openModal = /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    function (content, config) {
        return this.modalService.show(content, config);
    };
    /**
     * @param {?} funcId
     * @param {?=} queryParamsArray
     * @return {?}
     */
    WidgetDevkitService.prototype.openMenu = /**
     * @param {?} funcId
     * @param {?=} queryParamsArray
     * @return {?}
     */
    function (funcId, queryParamsArray) {
        window[DASHBOARD_API].openMenu(funcId, queryParamsArray);
    };
    /**
     * @param {?} appId
     * @return {?}
     */
    WidgetDevkitService.prototype.openApp = /**
     * @param {?} appId
     * @return {?}
     */
    function (appId) {
        window[DASHBOARD_API].openApp(appId);
    };
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     */
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    WidgetDevkitService.prototype.openInfoMsg = /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (content, options) {
        window[DASHBOARD_API].messageSvc.info(content, options);
    };
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     */
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    WidgetDevkitService.prototype.openSuccessMsg = /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (content, options) {
        window[DASHBOARD_API].messageSvc.success(content, options);
    };
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     */
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    WidgetDevkitService.prototype.openWarningMsg = /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (content, options) {
        window[DASHBOARD_API].messageSvc.warning(content, options);
    };
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     */
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    WidgetDevkitService.prototype.openErrorMsg = /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (content, options) {
        window[DASHBOARD_API].messageSvc.error(content, options);
    };
    /**
     * @param {?} dataOption
     * @return {?}
     */
    WidgetDevkitService.prototype.getData = /**
     * @param {?} dataOption
     * @return {?}
     */
    function (dataOption) {
        return window[DASHBOARD_API].storageSvc.getData(dataOption);
    };
    /**
     * @param {?=} reload
     * @return {?}
     */
    WidgetDevkitService.prototype.getUserInfo = /**
     * @param {?=} reload
     * @return {?}
     */
    function (reload) {
        if (reload === void 0) { reload = false; }
        return window[DASHBOARD_API].storageSvc.getUserInfo(reload);
    };
    /**
     * @param {?=} reload
     * @return {?}
     */
    WidgetDevkitService.prototype.getUserAvatar = /**
     * @param {?=} reload
     * @return {?}
     */
    function (reload) {
        if (reload === void 0) { reload = false; }
        return window[DASHBOARD_API].storageSvc.getUserAvatar(reload);
    };
    /**
     * @deprecated 应用另外两个 jump 方法
     * 联查跳转，直接把配置属性的值传进来就行。配成“无”就不跳转。
     * @param jumpProperty 跳转的配置属性的值
     * @param dataItem 当前跳转对应的数据行。如果是全局跳转，就传入第一行？
     */
    /**
     * @deprecated 应用另外两个 jump 方法
     * 联查跳转，直接把配置属性的值传进来就行。配成“无”就不跳转。
     * @param {?} jumpProperty 跳转的配置属性的值
     * @param {?=} dataItem 当前跳转对应的数据行。如果是全局跳转，就传入第一行？
     * @return {?}
     */
    WidgetDevkitService.prototype.jump = /**
     * @deprecated 应用另外两个 jump 方法
     * 联查跳转，直接把配置属性的值传进来就行。配成“无”就不跳转。
     * @param {?} jumpProperty 跳转的配置属性的值
     * @param {?=} dataItem 当前跳转对应的数据行。如果是全局跳转，就传入第一行？
     * @return {?}
     */
    function (jumpProperty, dataItem) {
        var type = jumpProperty.type, funcId = jumpProperty.funcId, params = jumpProperty.params;
        /** @type {?} */
        var queryParamsArray = Array.isArray(params)
            ? params.map((/**
             * @param {?} param
             * @return {?}
             */
            function (param) { return [param.key, (param.valueType === 'fixedValue'
                    ? param.fixedValue
                    : (dataItem
                        ? dataItem[param.fieldName.name]
                        : undefined))]; }))
            : undefined;
        switch (type) {
            case JumpTypes.None:
                return;
            case JumpTypes.Func:
                this.openMenu(funcId, queryParamsArray);
                break;
            case JumpTypes.ChartTable:
                this.openMenu(CHART_TABLE_FUNC_ID, queryParamsArray);
                break;
        }
    };
    /**
     * @param {?} dataJumpConfig
     * @param {?} dataItem
     * @return {?}
     */
    WidgetDevkitService.prototype.jumpWithData = /**
     * @param {?} dataJumpConfig
     * @param {?} dataItem
     * @return {?}
     */
    function (dataJumpConfig, dataItem) {
        var jumpType = dataJumpConfig.jumpType, funcIdSource = dataJumpConfig.funcIdSource, funcIdDataField = dataJumpConfig.funcIdDataField, funcId = dataJumpConfig.funcId, funcParams = dataJumpConfig.funcParams, url = dataJumpConfig.url, urlParams = dataJumpConfig.urlParams, queryParams = dataJumpConfig.queryParams;
        /** @type {?} */
        var funcParamsArray = Array.isArray(funcParams)
            ? funcParams.map((/**
             * @param {?} funcParam
             * @return {?}
             */
            function (funcParam) { return [funcParam.key, (funcParam.valueType === 'fixedValue'
                    ? funcParam.fixedValue
                    : (dataItem
                        ? dataItem[funcParam.fieldName.name]
                        : undefined))]; }))
            : undefined;
        switch (jumpType) {
            case JumpTypes.None:
                return;
            case JumpTypes.Func:
                /** @type {?} */
                var resultFuncId = (!funcIdSource || funcIdSource === 'fixed')
                    ? funcId
                    : dataItem[funcIdDataField.name];
                if (resultFuncId)
                    this.openMenu(resultFuncId, funcParamsArray);
                break;
            case JumpTypes.ChartTable:
                this.openMenu(CHART_TABLE_FUNC_ID, funcParamsArray);
                break;
            case JumpTypes.NewBrowserTab:
                // 拼 url
                /** @type {?} */
                var finalUrl = url
                // + urlParams
                ;
                // + urlParams
                if (urlParams && urlParams.length > 0) {
                    /** @type {?} */
                    var urlParamPart = urlParams.map((/**
                     * @param {?} urlParam
                     * @return {?}
                     */
                    function (urlParam) {
                        var valueType = urlParam.valueType, fixedValue = urlParam.fixedValue, fieldName = urlParam.fieldName;
                        return valueType === 'fixedValue' ? fixedValue : dataItem[fieldName.name];
                    })).join('/');
                    finalUrl += url.endsWith('/') ? '' : '/';
                    finalUrl += urlParamPart;
                }
                // + queryParams
                if (queryParams && queryParams.length > 0) {
                    /** @type {?} */
                    var queryParamPart = queryParams.map((/**
                     * @param {?} queryParam
                     * @return {?}
                     */
                    function (queryParam) {
                        var key = queryParam.key, valueType = queryParam.valueType, fixedValue = queryParam.fixedValue, fieldName = queryParam.fieldName;
                        return key + "=" + (valueType === 'fixedValue' ? fixedValue : dataItem[fieldName.name]);
                    })).join('&');
                    finalUrl += '?' + queryParamPart;
                }
                // 打开
                window.open(finalUrl, '_blank');
        }
    };
    /**
     * @param {?} datalessJumpConfig
     * @return {?}
     */
    WidgetDevkitService.prototype.jumpWithoutData = /**
     * @param {?} datalessJumpConfig
     * @return {?}
     */
    function (datalessJumpConfig) {
        var jumpType = datalessJumpConfig.jumpType, funcId = datalessJumpConfig.funcId, funcParams = datalessJumpConfig.funcParams, url = datalessJumpConfig.url;
        /** @type {?} */
        var funcParamsArray = Array.isArray(funcParams)
            ? funcParams.map((/**
             * @param {?} funcParam
             * @return {?}
             */
            function (funcParam) { return [funcParam.key, funcParam.value]; }))
            : undefined;
        switch (jumpType) {
            case JumpTypes.None:
                return;
            case JumpTypes.Func:
                this.openMenu(funcId, funcParamsArray);
                break;
            case JumpTypes.ChartTable:
                this.openMenu(CHART_TABLE_FUNC_ID, funcParamsArray);
                break;
            case JumpTypes.NewBrowserTab:
                window.open(url, '_blank');
        }
    };
    WidgetDevkitService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WidgetDevkitService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    return WidgetDevkitService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WidgetTitleBarComponent = /** @class */ (function () {
    function WidgetTitleBarComponent(devkitSvc) {
        this.devkitSvc = devkitSvc;
        this.icon = '';
        /**
         * 标题
         */
        this.showTitle = true;
        this.title = '';
        /**
         * 数字
         */
        this.showNumber = false;
        this.number = 0;
        /**
         * 设置按钮
         */
        this.showSetting = false;
        this.clickSetting = new EventEmitter();
        /**
         * 刷新按钮
         */
        this.showRefresh = false;
        this.clickRefresh = new EventEmitter();
        this.JumpTypes = JumpTypes;
    }
    /**
     * @return {?}
     */
    WidgetTitleBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    WidgetTitleBarComponent.prototype.handleClickJump = /**
     * @return {?}
     */
    function () {
        this.devkitSvc.jumpWithoutData(this.jumpConfig);
    };
    WidgetTitleBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-widget-title-bar',
                    template: "\n<div class=\"widget-title-bar d-flex\">\n  <!-- left -->\n  <div class=\"left align-items-center\">\n    <i *ngIf=\"icon!=''\" class=\"material-icons\">{{icon}}</i>\n    <div *ngIf=\"showTitle\" class=\"title\">{{title}}</div>\n    <div *ngIf=\"showNumber\" class=\"number\">{{number}}</div>\n    <ng-container *ngTemplateOutlet=\"leftTemplate\"></ng-container>\n  </div>\n  <!-- right -->\n  <div class=\"right\">\n    <ng-container *ngTemplateOutlet=\"rightTemplate\"></ng-container>\n    <div class=\"tool-wrap d-flex\" [title]=\"(settingTitle || '') | translate\">\n      <img\n        class=\"setting\"\n        *ngIf=\"showSetting\"\n        (click)=\"clickSetting.emit()\"\n        src=\"assets/img/setting.svg\"\n        [alt]=\"settingTitle\">\n    </div>\n    <div\n      class=\"tool-wrap d-flex\"\n      *ngIf=\"showRefresh\"\n      (click)=\"clickRefresh.emit()\">\n      <i class=\"icon-refresh material-icons\" style=\"font-size: 20px;\">refresh</i>\n    </div>\n    <div\n      *ngIf=\"jumpConfig && jumpConfig.jumpType!==JumpTypes.None\"\n      (click)=\"handleClickJump()\"\n      class=\"tool-wrap d-flex\">\n      <i class=\"material-icons\">chevron_right</i>\n    </div>\n  </div>\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["@charset \"UTF-8\";.widget-title-bar{display:flex;padding:12px 20px 10px}.widget-title-bar .left{flex:1 1 auto;display:flex}.widget-title-bar .left .material-icons{font-size:18px;margin-right:8px;color:#3794ff;padding-top:1px}.widget-title-bar .left .title{font-weight:700;font-size:15px}.widget-title-bar .left .number{font-size:15px;margin-left:10px}.widget-title-bar .right{flex:1 1 auto;display:flex;justify-content:flex-end;align-items:center}.widget-title-bar .right .widget-select{margin-left:5px}.widget-title-bar .right .setting{width:16px;height:16px;transition:.3s;opacity:1!important}.widget-title-bar .right .setting:hover{transform:rotate(60deg)}.widget-title-bar .right .tool-wrap{width:20px;margin-left:10px;font-size:14px;color:#000;transition:.3s;cursor:pointer;opacity:.2}.widget-title-bar .right .tool-wrap:hover{opacity:.4}"]
                }] }
    ];
    /** @nocollapse */
    WidgetTitleBarComponent.ctorParameters = function () { return [
        { type: WidgetDevkitService }
    ]; };
    WidgetTitleBarComponent.propDecorators = {
        icon: [{ type: Input }],
        showTitle: [{ type: Input }],
        title: [{ type: Input }],
        showNumber: [{ type: Input }],
        number: [{ type: Input }],
        showSetting: [{ type: Input }],
        settingTitle: [{ type: Input }],
        clickSetting: [{ type: Output }],
        showRefresh: [{ type: Input }],
        clickRefresh: [{ type: Output }],
        jumpConfig: [{ type: Input }],
        jumpProperty: [{ type: Input }],
        data: [{ type: Input }],
        leftTemplate: [{ type: ContentChild, args: ['leftTemplate',] }],
        rightTemplate: [{ type: ContentChild, args: ['rightTemplate',] }]
    };
    return WidgetTitleBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WidgetTitleBarSelectComponent = /** @class */ (function () {
    function WidgetTitleBarSelectComponent() {
        this.filterOptions = [];
        this.onFilterChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetTitleBarSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.filter = new FormControl(this.defaultFilterValue ? this.defaultFilterValue : this.filterOptions[0].value);
        this.filter.valueChanges.subscribe((/**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            _this.onFilterChange.emit(newValue);
        }));
    };
    WidgetTitleBarSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-widget-title-bar-select',
                    template: "\n<select\n  [formControl]=\"filter\"\n  class=\"widget-select form-control\" >\n  <option *ngFor=\"let option of filterOptions\"\n    [value]=\"option.value\">{{option.name}}</option>\n</select>",
                    styles: [".widget-select{font-size:12px;padding:0 5px;height:25px}"]
                }] }
    ];
    /** @nocollapse */
    WidgetTitleBarSelectComponent.ctorParameters = function () { return []; };
    WidgetTitleBarSelectComponent.propDecorators = {
        defaultFilterValue: [{ type: Input }],
        filterOptions: [{ type: Input }],
        onFilterChange: [{ type: Output }]
    };
    return WidgetTitleBarSelectComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WidgetTitleBarModule = /** @class */ (function () {
    function WidgetTitleBarModule() {
    }
    WidgetTitleBarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        WidgetTitleBarComponent,
                        WidgetTitleBarSelectComponent
                    ],
                    exports: [
                        WidgetTitleBarComponent,
                        WidgetTitleBarSelectComponent
                    ],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        TranslateModule.forChild()
                    ]
                },] }
    ];
    return WidgetTitleBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Gradient = /** @class */ (function () {
    function Gradient(colorStops) {
        this.colorStops = colorStops || [];
    }
    /**
     * @param {?} offset
     * @param {?} color
     * @return {?}
     */
    Gradient.prototype.addColorStop = /**
     * @param {?} offset
     * @param {?} color
     * @return {?}
     */
    function (offset, color) {
        this.colorStops.push({
            offset: offset,
            color: color,
        });
    };
    return Gradient;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * x, y, x2, y2 are all percent from 0 to 1 when globalCoord is false
 */
var /**
 * x, y, x2, y2 are all percent from 0 to 1 when globalCoord is false
 */
LinearGradient = /** @class */ (function (_super) {
    __extends(LinearGradient, _super);
    function LinearGradient(x, y, x2, y2, colorStops, globalCoord) {
        var _this = _super.call(this, colorStops) || this;
        // Should do nothing more in this constructor. Because gradient can be
        // declard by `color: {type: 'linear', colorStops: ...}`, where
        // this constructor will not be called.
        _this.x = x == null ? 0 : x;
        _this.y = y == null ? 0 : y;
        _this.x2 = x2 == null ? 1 : x2;
        _this.y2 = y2 == null ? 0 : y2;
        // Can be cloned
        _this.type = "linear";
        // If use global coord
        _this.global = globalCoord || false;
        return _this;
    }
    return LinearGradient;
}(Gradient));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var EchartsOptions = {
    grid: {
        top: 20,
        right: 30,
        bottom: 36,
        left: 10,
        containLabel: true,
    },
    xAxis: {
        type: 'category',
        axisLine: {
            lineStyle: {
                color: '#D9D9D9',
            }
        },
        axisTick: {
            lineStyle: {
                color: '#D9D9D9',
            }
        },
        axisLabel: {
            color: 'black',
            margin: 10,
            fontSize: 11
        }
    },
    yAxis: {
        axisLine: {
            show: false
        },
        axisTick: {
            show: false
        },
        splitLine: {
            lineStyle: {
                color: '#E4EBF057',
            }
        },
        axisLabel: {
            fontSize: 11
        }
    },
    legend: {
        // left: 45,
        // top: -3,
        x: 'center',
        y: 'bottom',
        itemWidth: 16,
        itemHeight: 3,
        borderRadius: 2,
        icon: 'roundRect',
        padding: [15, 0],
        textStyle: {
            color: '#000000a6'
        }
    },
    tooltip: {
        backgroundColor: "#ffffffe8",
        textStyle: {
            color: "#000000e6",
        },
        extraCssText: "box-shadow: 0px 1px 7px #00000017;",
        appendToBody: true,
        confine: true,
    },
};
/** @type {?} */
var chartsConsts = {
    /**
     * series label 字体大小
     */
    seriesLabelFontSize: 9,
};
var ɵ0 = /**
 * @param {?} c
 * @return {?}
 */
function (c) { return c.split(','); };
/** @type {?} */
var splitedGradientColors = PlThemeColors.gradient.map((ɵ0));
/** @type {?} */
var getChartColorsPure = (/**
 * @param {?} params
 * @return {?}
 */
function (params) {
    return PlThemeColors.pure[params.dataIndex];
});
/** @type {?} */
var getChartColorsGradient = (/**
 * @param {?} params
 * @return {?}
 */
function (params) {
    return new LinearGradient(0, 0, 0, 1, [
        { offset: 0, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][0] },
        { offset: 1, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][1] }
    ]);
});
/** @type {?} */
var getChartColorsGradientOne = (/**
 * @param {?} params
 * @return {?}
 */
function (params) {
    return new LinearGradient(1, 0, 0, 0, [
        { offset: 0, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][0] },
        { offset: 1, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][1] }
    ]);
})
/**
 * 对于有 “y 轴自定义范围” 的 charts 元部件，data 都要用它过滤后再用
 * @param obj 元部件实例
 */
;
/**
 * 对于有 “y 轴自定义范围” 的 charts 元部件，data 都要用它过滤后再用
 * @param {?} obj 元部件实例
 * @param {?} data
 * @return {?}
 */
function filterYData(obj, data) {
    if (obj.filterYFlag) {
        /** @type {?} */
        var yFields_1 = obj.yFieldObjs.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return o.valueField.name; }));
        return data.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return !yFields_1.some((/**
             * @param {?} yField
             * @return {?}
             */
            function (yField) { return item[yField] <= obj.minY || item[yField] >= obj.maxY; }));
        }));
    }
    return data;
}
/** @type {?} */
var EchartsPropertyOptions = {
    showRefresh: {
        category: 'data',
        displayName: 'showRefreshBtn',
        type: PropertyTypes.Bool,
        boolOption: {
            default: true
        }
    },
    filterYFlag: {
        type: PropertyTypes.Bool,
        category: 'data',
        displayName: 'setYRange'
    },
    minY: {
        type: PropertyTypes.Number,
        category: 'data',
        displayName: 'minY',
        numberOption: {
            default: 0
        },
        ifShow: /**
         * @param {?} values
         * @return {?}
         */
        function (values) { return values.filterYFlag; }
    },
    maxY: {
        type: PropertyTypes.Number,
        category: 'data',
        displayName: 'maxY',
        numberOption: {
            default: 1000
        },
        ifShow: /**
         * @param {?} values
         * @return {?}
         */
        function (values) { return values.filterYFlag; }
    },
    showLabel: {
        category: 'style',
        type: PropertyTypes.Bool,
        displayName: 'showNumber'
    },
    showTooltip: {
        category: 'style',
        type: PropertyTypes.Bool,
        boolOption: { default: true },
        displayName: 'showHoverDetail'
    },
    legendStyleOption: {
        type: PropertyTypes.Enum,
        displayName: 'legendType',
        category: 'style',
        enumOption: {
            default: 'scroll',
            items: [
                { value: 'none', displayName: 'notVisible' },
                { value: 'plain', displayName: 'showAll' },
                { value: 'scroll', displayName: 'scrollOverflow' }
            ]
        }
    },
    valueStyleOption: {
        type: PropertyTypes.Enum,
        displayName: 'valueType',
        category: 'style',
        enumOption: {
            default: 'right',
            items: [
                { value: 'right', displayName: 'right' },
                { value: 'insideRight', displayName: 'inside' },
            ]
        }
    }
}
/**
 * 三种传参方式：
 * 1. '#000', '#fff'
 * 2. '#000,#fff'
 * 3. '#000'
 */
;
/**
 * 三种传参方式：
 * 1. '#000', '#fff'
 * 2. '#000,#fff'
 * 3. '#000'
 * @param {?} c1
 * @param {?=} c2
 * @return {?}
 */
function echartsGradient(c1, c2) {
    var _a;
    // 若只传了一个值、还不是逗号分割，则直接返回此纯色
    if (!c2 && !c1.includes(','))
        return c1;
    // 若只传了一个值、是逗号分割，就分割为俩颜色
    if (!c2)
        _a = __read(c1.split(','), 2), c1 = _a[0], c2 = _a[1];
    return new LinearGradient(0, 0, 0, 1, [
        { offset: 0, color: c1 },
        { offset: 1, color: c2 }
    ]);
}
// TODO: 暂时给资金做国际化
/** @type {?} */
var tempMap = {
    '金额': {
        'en': 'Amount',
        'zh-CHS': '金额',
    },
    '数量': {
        'en': 'Number',
        'zh-CHS': '数量',
    }
}
// TODO: 暂时给资金国际化
;
// TODO: 暂时给资金国际化
/**
 * @param {?} dataField
 * @param {?} currentLang
 * @return {?}
 */
function tempLabel(dataField, currentLang) {
    var label = dataField.label;
    return tempMap[label] && tempMap[label][currentLang]
        ? tempMap[label][currentLang]
        : dataField.label;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * dataItem 这个名字会影响 exp 中的写法，不可随意更改。
 * @param {?} html
 * @param {?} dataItem
 * @return {?}
 */
function resolveTemplate(html, dataItem) {
    /** @type {?} */
    var expPatt = /{{[\d\D]+?}}/gm;
    if (!html)
        return '';
    /** @type {?} */
    var exps = html.match(expPatt) || [];
    try {
        exps.forEach((/**
         * @param {?} exp
         * @return {?}
         */
        function (exp) {
            html = html.replace(exp, eval(exp.slice(2, -2)));
        }));
    }
    catch (err) {
        return html;
    }
    return html;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据加载不应该让此 service 直接发出，因为外部框架并不随时都支持取数，
 * 比如新增部件后的部件配置，此时没有配置过数据，便会服务端报错。
 * 应该交由元部件容器加载数据。
 */
var WidgetDataService = /** @class */ (function () {
    function WidgetDataService() {
        /**
         * loadData() / reloadData() 时触发，外部元部件容器接收、加载数据，并通过 setData 设置回数据
         */
        this.onLoadData = new EventEmitter();
        this.onGetData = new EventEmitter();
        this.onGetDataWithDims = new EventEmitter();
    }
    /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     */
    /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     * @param {?=} options
     * @return {?}
     */
    WidgetDataService.prototype.loadData = /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        this.onLoadData.emit(options);
        return this.onGetData;
    };
    /**
     * 获取全数据信息，包含 dimensions
     */
    /**
     * 获取全数据信息，包含 dimensions
     * @param {?=} options
     * @return {?}
     */
    WidgetDataService.prototype.loadDataWithDims = /**
     * 获取全数据信息，包含 dimensions
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        this.onLoadData.emit(options);
        return this.onGetDataWithDims;
    };
    /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     */
    /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     * @param {?=} param
     * @return {?}
     */
    WidgetDataService.prototype.reloadData = /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.onLoadData.emit(param);
    };
    /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param dataWithDims 要设置的数据
     */
    /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param {?} dataWithDims 要设置的数据
     * @return {?}
     */
    WidgetDataService.prototype.setData = /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param {?} dataWithDims 要设置的数据
     * @return {?}
     */
    function (dataWithDims) {
        this.onGetData.emit(dataWithDims.tableData);
        this.onGetDataWithDims.emit(dataWithDims);
    };
    WidgetDataService.decorators = [
        { type: Injectable }
    ];
    return WidgetDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 可依赖注入至元部件的元部件实例信息
 */
var  /**
 * 可依赖注入至元部件的元部件实例信息
 */
WidgetInstanceInfo = /** @class */ (function () {
    function WidgetInstanceInfo(portletId, id, assetsBaseUrl) {
        this.portletId = portletId;
        this.id = id;
        this.assetsBaseUrl = assetsBaseUrl;
    }
    return WidgetInstanceInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { TranslateModule } from '@ngx-translate/core';
var WidgetDevkitModule = /** @class */ (function () {
    function WidgetDevkitModule() {
    }
    WidgetDevkitModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    providers: [WidgetDevkitService],
                    imports: [
                        CommonModule,
                        // 需要加 forRoot，保证 WidgetDevkitService 能在此层找到依赖的里面的服务。
                        // 无法保证外部环境。
                        ModalModule.forRoot(),
                    ],
                    exports: [
                        // TranslateModule
                        WidgetTitleBarModule
                    ]
                },] }
    ];
    return WidgetDevkitModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Widget, WidgetRegistry, WidgetEvent, WidgetEventMap, WidgetEventService, WidgetPropertyService, Property, WidgetPropertyMap, WidgetTitleBarModule, WidgetTitleBarComponent, WidgetTitleBarSelectComponent, WidgetBase, resolveTemplate, JumpTypes, jumpTypeOption, funcOption, dataJumpOption, datalessJumpOption, CommonPropertyOptions, filterYData, echartsGradient, tempLabel, EchartsOptions, chartsConsts, getChartColorsPure, getChartColorsGradient, getChartColorsGradientOne, EchartsPropertyOptions, tempMap, WidgetDataService, WidgetInstanceInfo, WidgetDevkitModule, DASHBOARD_API, WidgetDevkitService, PropertyTypes, HelpStructure, CHART_TABLE_FUNC_ID, getObj, ifFsDateRange, isFsFlat, FSLastTimeItem, FSRangeDefault, FSDate, FSEnum, FSEnumItem, FilterSchema, FILTER_PROP_NAME, frontendFilterProp };

//# sourceMappingURL=gspwidget-widget-devkit.js.map