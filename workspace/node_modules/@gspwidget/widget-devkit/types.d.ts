import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
export declare enum PropertyTypes {
    Text = "textOption",
    Bool = "boolOption",
    Number = "numberOption",
    Enum = "enumOption",
    Color = "colorOption",
    Object = "objectOption",
    Custom = "customOption",
    SelectHelp = "selectHelpOption",
    /** Help 得到的值的结构，取决于配置 HelpOption 后，最终得到的数据结构 */
    Help = "helpOption",
    /** DataField 得到的值的值的类型为 DataField */
    DataField = "dataFieldOption",
    Filter = "filterOption",
    Html = "htmlOption",
    DataParam = "dataParamOption"
}
export interface DataField {
    name: string;
    label: string;
}
/**
 * type，类型，默认 PropertyTypes.String
 * isArray，是否为数组，默认 false
 * 用 prop[prop.type] 可获取到 xxxOption
 */
export interface PropertyOption {
    name?: string;
    displayName?: string;
    type?: PropertyTypes;
    isArray?: boolean;
    category?: string; /** 分组路径，可用 / 分割多层 */
    tip?: string; /** 帮助提示，显示帮助信息 */
    /**
     * 定义如何根据其他 prop 的值，控制当前 item 是否显示。
     * 注意：curPropValues 是当前 property 所在的直接父对象内的（**即与自身平级的**）所有 propValues，不包含爸爸的同辈。
     * 仅应当根据同辈的值控制显示与否，所以某儿子不应该根据爸爸的某同辈而变化。
     */
    ifShow?: (curPropValues: {
        [propName: string]: any;
    }) => boolean;
    textOption?: {
        default?: string | string[];
        short?: boolean;
        /** 是否是多语字段，默认 true */
        i18n?: boolean;
    };
    boolOption?: {
        default?: boolean | boolean[];
    };
    numberOption?: {
        default?: number | number[];
        min?: number;
        max?: number;
        step?: boolean;
    };
    enumOption?: {
        default?: string | string[];
        items: string[] | {
            value: string;
            displayName?: string; /** displayName 默认与 value 一致 */
        }[];
    };
    colorOption?: {
        default?: string | string[];
        pureOnly?: boolean;
        gradientOnly?: boolean;
        type?: 'pure' | 'gradient' | 'pureOrGradient';
        /** 可选色板，默认是全局配置色板 */
        palette?: string[];
    };
    dateOption?: {
        default?: Date | Date[];
    };
    objectOption?: {
        default?: any;
        /**
         * 这里的 PropertyOption 有点特殊:
         * name 必填
         * category, xxxOption.default 无效 😂
         */
        objPropertyOptions: PropertyOption[];
    };
    selectHelpOption?: {
        url: string; /** 获取 options 的 url */
        valueField?: string; /** 如果返回结果是对象数组，这个是编辑器结果值对应的字段 */
        displayField?: string; /** 如果返回结果是对象数组，这个是编辑器显示值对应的字段 */
        usePost?: boolean; /** 是否使用 post 请求 */
        body?: any; /** post 请求的 body */
        default?: string; /** 默认值 */
    };
    helpOption?: {
        getData?: (httpClient: HttpClient) => Observable<any[]>; /** 获取数据，默认值为空数组 */
        structure?: HelpStructure; /** 是否是树状。树的结构可在 getTreeFromRes 中拼接 */
        tableFields: (string | string[])[];
        valueField: string;
        nameField: string;
        default?: string;
        getTableOnSelectTree?: Function;
    };
    dataFieldOption?: {};
}
export declare enum HelpStructure {
    table = 0,
    treeTable = 1,
    transfer = 2,
    treeTransfer = 3
}
export interface WidgetConfig {
    name?: string;
    /** 是否在部件配置中开启数据配置、筛选配置，默认 false */
    enableDataConfig?: boolean;
    /** 是否使用公共的标题头，默认 false */
    enableCommonTitleBar?: boolean;
    /** 是否禁用公共背景，即使用透明背景，默认 false */
    /** 是否启用加载 assets/i18n/ 下的国际化资源文件，默认 false */
    enableLoadingI18n?: boolean;
    /** 自定义国际化资源文件目录位置，如 '/apps/test/i18n/'，默认位置为元部件自身目录下的 assets/i18n/ 位置。*/
    customI18nResourceUrl?: string;
}
export interface RegisteredWidgetConfig extends WidgetConfig {
    ctor?: any;
}
