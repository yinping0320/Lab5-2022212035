/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import add from "date-fns/add";
import sub from 'date-fns/sub';
import { PropertyTypes } from "../types";
/**
 * 没发直接用 [] 作 key 直接建 literal 对象，aot 编译会报错
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
export function getObj(key, value) {
    /** @type {?} */
    const obj = {};
    obj[key] = value;
    return obj;
}
/**
 * 筛选描述
 */
export class FSLastTimeItem {
    constructor() {
        this.num = 1;
        this.unit = 'day';
    }
    /**
     * 传入一个 '最近n某'，返回对应的时间范围数组
     * @param {?} lastTimeItem
     * @return {?}
     */
    static GetDates(lastTimeItem) {
        return [
            sub(new Date(), getObj(lastTimeItem.unit + 's', lastTimeItem.num)),
            new Date()
        ];
    }
}
if (false) {
    /** @type {?} */
    FSLastTimeItem.prototype.num;
    /** @type {?} */
    FSLastTimeItem.prototype.unit;
    /** @type {?} */
    FSLastTimeItem.prototype.isDefault;
}
export class FSRangeDefault {
    constructor() {
        this.beforeNum = 1;
        this.beforeUnit = 'month';
        this.afterNum = 0;
        this.afterUnit = 'day';
    }
    /**
     * @param {?} rangeDefault
     * @return {?}
     */
    static GetDates(rangeDefault) {
        return [
            sub(new Date(), getObj(rangeDefault.beforeUnit + 's', rangeDefault.afterNum)),
            add(new Date(), getObj(rangeDefault.beforeUnit + 's', rangeDefault.afterNum)),
        ];
    }
}
if (false) {
    /** @type {?} */
    FSRangeDefault.prototype.beforeNum;
    /** @type {?} */
    FSRangeDefault.prototype.beforeUnit;
    /** @type {?} */
    FSRangeDefault.prototype.afterNum;
    /** @type {?} */
    FSRangeDefault.prototype.afterUnit;
}
export class FSDate {
    constructor() {
        this.type = 'single';
        this.singleUnit = 'day';
        this.singleDefaultType = 'current';
        this.singleDefaultSpecified = new Date();
        this.rangeDefault = new FSRangeDefault();
        this.lastTimeItems = [];
        this.lastTimeDisplayType = 'flat';
    }
}
if (false) {
    /** @type {?} */
    FSDate.prototype.type;
    /** @type {?} */
    FSDate.prototype.singleUnit;
    /** @type {?} */
    FSDate.prototype.singleDefaultType;
    /** @type {?} */
    FSDate.prototype.singleDefaultSpecified;
    /** @type {?} */
    FSDate.prototype.rangeDefault;
    /** @type {?} */
    FSDate.prototype.lastTimeItems;
    /** @type {?} */
    FSDate.prototype.lastTimeDisplayType;
}
export class FSEnum {
    constructor() {
        this.multi = false;
        /**
         * 暂时定为，仅有 single 时可以选择 flat
         */
        this.displayType = 'select';
        this.source = 'manual';
        /**
         * 是否可清空不选。仅有 select 且 single 才有此选项
         */
        this.allowEmpty = false;
        /**
         * 通过上面两个字段取出 items 存在下面
         */
        this.itemsFromData = [];
        this.itemsManual = [];
        this.multiDefault = [];
    }
    // 暂时不做
    // sourceDatasetId: string
    // sourceDatasetLabelField?: DataField
    // sourceDatasetValueField?: DataField
    /**
     * @param {?} fsEnum
     * @return {?}
     */
    static GetItems(fsEnum) {
        const { source, itemsFromData, itemsManual } = fsEnum;
        if (source === 'dataField') {
            // if (!itemsValueField || !intactData) return []
            // const tempItems = intactData.map(dataItem => ({
            //   label: dataItem[itemsLabelField || itemsValueField],
            //   value: dataItem[itemsValueField]
            // }))
            // return ArrUtil.Unique(tempItems)
            return itemsFromData;
        }
        else if (source === 'manual') {
            return itemsManual;
        }
    }
    /**
     * @param {?} fsEnum
     * @return {?}
     */
    static GetItemValues(fsEnum) {
        /**
         * @param {?} item
         * @return {?}
         */
        function mapCb(item) { return item.value; }
        return FSEnum.GetItems(fsEnum).map(mapCb);
    }
}
if (false) {
    /** @type {?} */
    FSEnum.prototype.multi;
    /**
     * 暂时定为，仅有 single 时可以选择 flat
     * @type {?}
     */
    FSEnum.prototype.displayType;
    /** @type {?} */
    FSEnum.prototype.source;
    /**
     * 是否可清空不选。仅有 select 且 single 才有此选项
     * @type {?}
     */
    FSEnum.prototype.allowEmpty;
    /** @type {?} */
    FSEnum.prototype.itemsLabelField;
    /** @type {?} */
    FSEnum.prototype.itemsValueField;
    /**
     * 通过上面两个字段取出 items 存在下面
     * @type {?}
     */
    FSEnum.prototype.itemsFromData;
    /** @type {?} */
    FSEnum.prototype.itemsManual;
    /** @type {?} */
    FSEnum.prototype.multiDefault;
    /** @type {?} */
    FSEnum.prototype.singleDefault;
}
export class FSEnumItem {
}
if (false) {
    /** @type {?} */
    FSEnumItem.prototype.label;
    /** @type {?} */
    FSEnumItem.prototype.value;
}
export class FilterSchema {
    constructor() {
        /**
         * 过滤名称，在筛选控件上显示，可选
         */
        this.i18nName = {};
        this.showName = false;
        /**
         * 过滤大类
         */
        this.type = 'date';
        /**
         * 每种类型的过滤配置
         */
        this.date = new FSDate();
        this.enum = new FSEnum();
        this.number = {
            default: 0
        };
        this.text = {
            default: ''
        };
    }
    /**
     * 获取 FS 的默认值
     * 🙅 不可以依赖 data：部件第一次根据默认值筛选时，还没有 data 呢。
     * @param {?} fs
     * @return {?}
     */
    static getDefaultValue(fs) {
        switch (fs.type) {
            case 'date':
                if (fs.date.type === 'single') {
                    if (fs.date.singleDefaultType === 'current') {
                        return new Date();
                    }
                    else {
                        return fs.date.singleDefaultSpecified;
                    }
                }
                else if (fs.date.type === 'range') {
                    return FSRangeDefault.GetDates(fs.date.rangeDefault);
                }
                else if (fs.date.type === 'lastTimeEnum') {
                    return FSLastTimeItem.GetDates(fs.date.lastTimeItems[0]);
                }
                break;
            case 'enum':
                const { multi, singleDefault, multiDefault } = fs.enum;
                return multi ? multiDefault : singleDefault;
            case 'number':
                return fs.number.default;
                break;
            case 'text':
                return fs.text.default;
                break;
        }
    }
}
if (false) {
    /**
     * 过滤名称，在筛选控件上显示，可选
     * @type {?}
     */
    FilterSchema.prototype.i18nName;
    /** @type {?} */
    FilterSchema.prototype.showName;
    /**
     * 过滤大类
     * @type {?}
     */
    FilterSchema.prototype.type;
    /**
     * 每种类型的过滤配置
     * @type {?}
     */
    FilterSchema.prototype.date;
    /** @type {?} */
    FilterSchema.prototype.enum;
    /** @type {?} */
    FilterSchema.prototype.help;
    /** @type {?} */
    FilterSchema.prototype.number;
    /** @type {?} */
    FilterSchema.prototype.text;
}
/**
 * @param {?} fs
 * @return {?}
 */
export function ifFsDateRange(fs) {
    if (!fs)
        return;
    return fs.type === 'date' && fs.date.type === 'range';
}
/**
 * @param {?} fs
 * @return {?}
 */
export function isFsFlat(fs) {
    if (!fs)
        return;
    return fs.type === 'date' && fs.date.type === 'lastTimeEnum' && fs.date.lastTimeDisplayType === 'flat'
        || fs.type === 'enum' && !fs.enum.multi && fs.enum.displayType === 'flat';
}
/**
 * 官方预制的筛选 property
 * @type {?}
 */
export const FILTER_PROP_NAME = 'filter';
/** @type {?} */
export const frontendFilterProp = {
    name: FILTER_PROP_NAME,
    displayName: '筛选',
    isArray: true,
    type: PropertyTypes.Object,
    objectOption: {
        objPropertyOptions: [{
                name: 'fs',
                type: PropertyTypes.Filter,
            }, {
                name: 'dpId',
                type: PropertyTypes.DataParam,
            }, {
                name: 'dpId2',
                type: PropertyTypes.DataParam,
                ifShow: (/**
                 * @param {?} pv
                 * @return {?}
                 */
                pv => {
                    return pv.fs && ifFsDateRange(pv.fs);
                })
            }]
    }
};
/**
 * @record
 */
export function FilterConfig() { }
if (false) {
    /** @type {?} */
    FilterConfig.prototype.fs;
    /** @type {?} */
    FilterConfig.prototype.dpId;
    /** @type {?} */
    FilterConfig.prototype.dpId2;
}
//# sourceMappingURL=data:application/json;base64,