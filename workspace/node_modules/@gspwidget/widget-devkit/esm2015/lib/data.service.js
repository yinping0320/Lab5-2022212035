/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
/**
 * @record
 */
export function LoadDataOptions() { }
if (false) {
    /** @type {?|undefined} */
    LoadDataOptions.prototype.param;
}
/**
 * 部件系统、数据服务内部使用
 * @record
 */
export function LoadDataPayload() { }
/**
 * 数据加载不应该让此 service 直接发出，因为外部框架并不随时都支持取数，
 * 比如新增部件后的部件配置，此时没有配置过数据，便会服务端报错。
 * 应该交由元部件容器加载数据。
 */
export class WidgetDataService {
    constructor() {
        /**
         * loadData() / reloadData() 时触发，外部元部件容器接收、加载数据，并通过 setData 设置回数据
         */
        this.onLoadData = new EventEmitter();
        this.onGetData = new EventEmitter();
        this.onGetDataWithDims = new EventEmitter();
    }
    /**
     * 元部件调用此方法获取数据。示例：
     * ```ts
     * this.dataService.loadData().subscribe(data => {
     *  this.data = data // 使用数据
     * })
     * ```
     * @param {?=} options
     * @return {?}
     */
    loadData(options) {
        this.onLoadData.emit(options);
        return this.onGetData;
    }
    /**
     * 获取全数据信息，包含 dimensions
     * @param {?=} options
     * @return {?}
     */
    loadDataWithDims(options) {
        this.onLoadData.emit(options);
        return this.onGetDataWithDims;
    }
    /**
     * 元部件调用此方法以重新获取数据，数据加载完成后再次调用在 loadData() 注册的事件处理器。示例：
     * ```ts
     * this.dataService.refreshData()
     * ```
     * @param {?=} param
     * @return {?}
     */
    reloadData(param) {
        this.onLoadData.emit(param);
    }
    /**
     * 外部通过此方法给元部件设置数据，元部件无需调用
     * @param {?} dataWithDims 要设置的数据
     * @return {?}
     */
    setData(dataWithDims) {
        this.onGetData.emit(dataWithDims.tableData);
        this.onGetDataWithDims.emit(dataWithDims);
    }
}
WidgetDataService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * loadData() / reloadData() 时触发，外部元部件容器接收、加载数据，并通过 setData 设置回数据
     * @type {?}
     */
    WidgetDataService.prototype.onLoadData;
    /**
     * @type {?}
     * @private
     */
    WidgetDataService.prototype.onGetData;
    /**
     * @type {?}
     * @private
     */
    WidgetDataService.prototype.onGetDataWithDims;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcHdpZGdldC93aWRnZXQtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2RhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFJekQscUNBRUM7OztJQURDLGdDQUE4Qjs7Ozs7O0FBR2hDLHFDQUVDOzs7Ozs7QUFPRCxNQUFNLE9BQU8saUJBQWlCO0lBRDlCOzs7O1FBR1MsZUFBVSxHQUFHLElBQUksWUFBWSxFQUEwQixDQUFBO1FBQ3RELGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFBO1FBQ3JDLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFnQixDQUFBO0lBd0M5RCxDQUFDOzs7Ozs7Ozs7OztJQTlCQyxRQUFRLENBQUUsT0FBeUI7UUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDN0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFBO0lBQ3ZCLENBQUM7Ozs7OztJQUlELGdCQUFnQixDQUFFLE9BQXlCO1FBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFBO0lBQy9CLENBQUM7Ozs7Ozs7OztJQU9ELFVBQVUsQ0FBRSxLQUE4QjtRQUN4QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM3QixDQUFDOzs7Ozs7SUFNRCxPQUFPLENBQUUsWUFBMEI7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzNDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDM0MsQ0FBQzs7O1lBM0NGLFVBQVU7Ozs7Ozs7SUFHVCx1Q0FBOEQ7Ozs7O0lBQzlELHNDQUE2Qzs7Ozs7SUFDN0MsOENBQTREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhV2l0aERpbXMsIERpbWVuc2lvbiB9IGZyb20gJ0Bnc3B3aWRnZXQvdXRpbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZERhdGFPcHRpb25zIHtcbiAgcGFyYW0/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XG59XG4vKiog6YOo5Lu257O757uf44CB5pWw5o2u5pyN5Yqh5YaF6YOo5L2/55SoICovXG5leHBvcnQgaW50ZXJmYWNlIExvYWREYXRhUGF5bG9hZCB7XG5cbn1cbi8qKlxuICog5pWw5o2u5Yqg6L295LiN5bqU6K+l6K6p5q2kIHNlcnZpY2Ug55u05o6l5Y+R5Ye677yM5Zug5Li65aSW6YOo5qGG5p625bm25LiN6ZqP5pe26YO95pSv5oyB5Y+W5pWw77yMXG4gKiDmr5TlpoLmlrDlop7pg6jku7blkI7nmoTpg6jku7bphY3nva7vvIzmraTml7bmsqHmnInphY3nva7ov4fmlbDmja7vvIzkvr/kvJrmnI3liqHnq6/miqXplJnjgIJcbiAqIOW6lOivpeS6pOeUseWFg+mDqOS7tuWuueWZqOWKoOi9veaVsOaNruOAglxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgV2lkZ2V0RGF0YVNlcnZpY2Uge1xuICAvKiogbG9hZERhdGEoKSAvIHJlbG9hZERhdGEoKSDml7bop6blj5HvvIzlpJbpg6jlhYPpg6jku7blrrnlmajmjqXmlLbjgIHliqDovb3mlbDmja7vvIzlubbpgJrov4cgc2V0RGF0YSDorr7nva7lm57mlbDmja4gKi9cbiAgcHVibGljIG9uTG9hZERhdGEgPSBuZXcgRXZlbnRFbWl0dGVyPHsgW2tleTogc3RyaW5nXTogYW55IH0+KClcbiAgcHJpdmF0ZSBvbkdldERhdGEgPSBuZXcgRXZlbnRFbWl0dGVyPGFueVtdPigpXG4gIHByaXZhdGUgb25HZXREYXRhV2l0aERpbXMgPSBuZXcgRXZlbnRFbWl0dGVyPERhdGFXaXRoRGltcz4oKVxuXG4gIC8qKlxuICAgKiDlhYPpg6jku7bosIPnlKjmraTmlrnms5Xojrflj5bmlbDmja7jgILnpLrkvovvvJpcbiAgICogYGBgdHNcbiAgICogdGhpcy5kYXRhU2VydmljZS5sb2FkRGF0YSgpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICogIHRoaXMuZGF0YSA9IGRhdGEgLy8g5L2/55So5pWw5o2uXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgbG9hZERhdGEgKG9wdGlvbnM/OiBMb2FkRGF0YU9wdGlvbnMpIHtcbiAgICB0aGlzLm9uTG9hZERhdGEuZW1pdChvcHRpb25zKVxuICAgIHJldHVybiB0aGlzLm9uR2V0RGF0YVxuICB9XG4gIC8qKlxuICAgKiDojrflj5blhajmlbDmja7kv6Hmga/vvIzljIXlkKsgZGltZW5zaW9uc1xuICAgKi9cbiAgbG9hZERhdGFXaXRoRGltcyAob3B0aW9ucz86IExvYWREYXRhT3B0aW9ucyk6IE9ic2VydmFibGU8RGF0YVdpdGhEaW1zPiB7XG4gICAgdGhpcy5vbkxvYWREYXRhLmVtaXQob3B0aW9ucylcbiAgICByZXR1cm4gdGhpcy5vbkdldERhdGFXaXRoRGltc1xuICB9XG4gIC8qKlxuICAgKiDlhYPpg6jku7bosIPnlKjmraTmlrnms5Xku6Xph43mlrDojrflj5bmlbDmja7vvIzmlbDmja7liqDovb3lrozmiJDlkI7lho3mrKHosIPnlKjlnKggbG9hZERhdGEoKSDms6jlhoznmoTkuovku7blpITnkIblmajjgILnpLrkvovvvJpcbiAgICogYGBgdHNcbiAgICogdGhpcy5kYXRhU2VydmljZS5yZWZyZXNoRGF0YSgpXG4gICAqIGBgYFxuICAgKi9cbiAgcmVsb2FkRGF0YSAocGFyYW0/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gICAgdGhpcy5vbkxvYWREYXRhLmVtaXQocGFyYW0pXG4gIH1cblxuICAvKipcbiAgICog5aSW6YOo6YCa6L+H5q2k5pa55rOV57uZ5YWD6YOo5Lu26K6+572u5pWw5o2u77yM5YWD6YOo5Lu25peg6ZyA6LCD55SoXG4gICAqIEBwYXJhbSBkYXRhV2l0aERpbXMg6KaB6K6+572u55qE5pWw5o2uXG4gICAqL1xuICBzZXREYXRhIChkYXRhV2l0aERpbXM6IERhdGFXaXRoRGltcykge1xuICAgIHRoaXMub25HZXREYXRhLmVtaXQoZGF0YVdpdGhEaW1zLnRhYmxlRGF0YSlcbiAgICB0aGlzLm9uR2V0RGF0YVdpdGhEaW1zLmVtaXQoZGF0YVdpdGhEaW1zKVxuICB9XG5cbn1cbiJdfQ==