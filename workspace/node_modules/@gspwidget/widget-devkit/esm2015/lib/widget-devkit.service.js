/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { JumpTypes } from './preset/preset.jump';
import { CHART_TABLE_FUNC_ID } from './util';
/**
 * @deprecated
 * 为了 widget-devkit 的兼容而暂时保留。不准再用了。
 * 元部件应该直接用 \@gspwidget/util。
 * @type {?}
 */
export const DASHBOARD_API = 'DashboardApi';
export class WidgetDevkitService {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    openModal(content, config) {
        return this.modalService.show(content, config);
    }
    /**
     * @param {?} funcId
     * @param {?=} queryParamsArray
     * @return {?}
     */
    openMenu(funcId, queryParamsArray) {
        window[DASHBOARD_API].openMenu(funcId, queryParamsArray);
    }
    /**
     * @param {?} appId
     * @return {?}
     */
    openApp(appId) {
        window[DASHBOARD_API].openApp(appId);
    }
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    openInfoMsg(content, options) {
        window[DASHBOARD_API].messageSvc.info(content, options);
    }
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    openSuccessMsg(content, options) {
        window[DASHBOARD_API].messageSvc.success(content, options);
    }
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    openWarningMsg(content, options) {
        window[DASHBOARD_API].messageSvc.warning(content, options);
    }
    /**
     * options 参考 https://ng.ant.design/components/message/zh
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    openErrorMsg(content, options) {
        window[DASHBOARD_API].messageSvc.error(content, options);
    }
    /**
     * @param {?} dataOption
     * @return {?}
     */
    getData(dataOption) {
        return window[DASHBOARD_API].storageSvc.getData(dataOption);
    }
    /**
     * @param {?=} reload
     * @return {?}
     */
    getUserInfo(reload = false) {
        return window[DASHBOARD_API].storageSvc.getUserInfo(reload);
    }
    /**
     * @param {?=} reload
     * @return {?}
     */
    getUserAvatar(reload = false) {
        return window[DASHBOARD_API].storageSvc.getUserAvatar(reload);
    }
    /**
     * @deprecated 应用另外两个 jump 方法
     * 联查跳转，直接把配置属性的值传进来就行。配成“无”就不跳转。
     * @param {?} jumpProperty 跳转的配置属性的值
     * @param {?=} dataItem 当前跳转对应的数据行。如果是全局跳转，就传入第一行？
     * @return {?}
     */
    jump(jumpProperty, dataItem) {
        const { type, funcId, params } = jumpProperty;
        /** @type {?} */
        const queryParamsArray = Array.isArray(params)
            ? params.map((/**
             * @param {?} param
             * @return {?}
             */
            param => [param.key, (param.valueType === 'fixedValue'
                    ? param.fixedValue
                    : (dataItem
                        ? dataItem[param.fieldName.name]
                        : undefined))]))
            : undefined;
        switch (type) {
            case JumpTypes.None:
                return;
            case JumpTypes.Func:
                this.openMenu(funcId, queryParamsArray);
                break;
            case JumpTypes.ChartTable:
                this.openMenu(CHART_TABLE_FUNC_ID, queryParamsArray);
                break;
        }
    }
    /**
     * @param {?} dataJumpConfig
     * @param {?} dataItem
     * @return {?}
     */
    jumpWithData(dataJumpConfig, dataItem) {
        const { jumpType, funcIdSource, funcIdDataField, funcId, funcParams, url, urlParams, queryParams } = dataJumpConfig;
        /** @type {?} */
        const funcParamsArray = Array.isArray(funcParams)
            ? funcParams.map((/**
             * @param {?} funcParam
             * @return {?}
             */
            funcParam => [funcParam.key, (funcParam.valueType === 'fixedValue'
                    ? funcParam.fixedValue
                    : (dataItem
                        ? dataItem[funcParam.fieldName.name]
                        : undefined))]))
            : undefined;
        switch (jumpType) {
            case JumpTypes.None:
                return;
            case JumpTypes.Func:
                /** @type {?} */
                const resultFuncId = (!funcIdSource || funcIdSource === 'fixed')
                    ? funcId
                    : dataItem[funcIdDataField.name];
                if (resultFuncId)
                    this.openMenu(resultFuncId, funcParamsArray);
                break;
            case JumpTypes.ChartTable:
                this.openMenu(CHART_TABLE_FUNC_ID, funcParamsArray);
                break;
            case JumpTypes.NewBrowserTab:
                // 拼 url
                /** @type {?} */
                let finalUrl = url
                // + urlParams
                ;
                // + urlParams
                if (urlParams && urlParams.length > 0) {
                    /** @type {?} */
                    const urlParamPart = urlParams.map((/**
                     * @param {?} urlParam
                     * @return {?}
                     */
                    urlParam => {
                        const { valueType, fixedValue, fieldName } = urlParam;
                        return valueType === 'fixedValue' ? fixedValue : dataItem[fieldName.name];
                    })).join('/');
                    finalUrl += url.endsWith('/') ? '' : '/';
                    finalUrl += urlParamPart;
                }
                // + queryParams
                if (queryParams && queryParams.length > 0) {
                    /** @type {?} */
                    const queryParamPart = queryParams.map((/**
                     * @param {?} queryParam
                     * @return {?}
                     */
                    queryParam => {
                        const { key, valueType, fixedValue, fieldName } = queryParam;
                        return `${key}=${valueType === 'fixedValue' ? fixedValue : dataItem[fieldName.name]}`;
                    })).join('&');
                    finalUrl += '?' + queryParamPart;
                }
                // 打开
                window.open(finalUrl, '_blank');
        }
    }
    /**
     * @param {?} datalessJumpConfig
     * @return {?}
     */
    jumpWithoutData(datalessJumpConfig) {
        const { jumpType, funcId, funcParams, url } = datalessJumpConfig;
        /** @type {?} */
        const funcParamsArray = Array.isArray(funcParams)
            ? funcParams.map((/**
             * @param {?} funcParam
             * @return {?}
             */
            funcParam => [funcParam.key, funcParam.value]))
            : undefined;
        switch (jumpType) {
            case JumpTypes.None:
                return;
            case JumpTypes.Func:
                this.openMenu(funcId, funcParamsArray);
                break;
            case JumpTypes.ChartTable:
                this.openMenu(CHART_TABLE_FUNC_ID, funcParamsArray);
                break;
            case JumpTypes.NewBrowserTab:
                window.open(url, '_blank');
        }
    }
}
WidgetDevkitService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WidgetDevkitService.ctorParameters = () => [
    { type: BsModalService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WidgetDevkitService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,