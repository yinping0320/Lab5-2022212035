/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PlThemeColors } from "@gspwidget/util";
import { PropertyTypes } from "../../types";
import LinearGradient from "./zrender.linear-gradient";
/** @type {?} */
export const EchartsOptions = {
    grid: {
        top: 20,
        right: 30,
        bottom: 36,
        left: 10,
        containLabel: true,
    },
    xAxis: {
        type: 'category',
        axisLine: {
            lineStyle: {
                color: '#D9D9D9',
            }
        },
        axisTick: {
            lineStyle: {
                color: '#D9D9D9',
            }
        },
        axisLabel: {
            color: 'black',
            margin: 10,
            fontSize: 11
        }
    },
    yAxis: {
        axisLine: {
            show: false
        },
        axisTick: {
            show: false
        },
        splitLine: {
            lineStyle: {
                color: '#E4EBF057',
            }
        },
        axisLabel: {
            fontSize: 11
        }
    },
    legend: {
        // left: 45,
        // top: -3,
        x: 'center',
        y: 'bottom',
        itemWidth: 16,
        itemHeight: 3,
        borderRadius: 2,
        icon: 'roundRect',
        padding: [15, 0],
        textStyle: {
            color: '#000000a6'
        }
    },
    tooltip: {
        backgroundColor: "#ffffffe8",
        textStyle: {
            color: "#000000e6",
        },
        extraCssText: "box-shadow: 0px 1px 7px #00000017;",
        appendToBody: true,
        confine: true,
    },
};
/** @type {?} */
export const chartsConsts = {
    /**
     * series label 字体大小
     */
    seriesLabelFontSize: 9,
};
const ɵ0 = /**
 * @param {?} c
 * @return {?}
 */
c => c.split(',');
/** @type {?} */
const splitedGradientColors = PlThemeColors.gradient.map((ɵ0));
/** @type {?} */
export const getChartColorsPure = (/**
 * @param {?} params
 * @return {?}
 */
(params) => {
    return PlThemeColors.pure[params.dataIndex];
});
/** @type {?} */
export const getChartColorsGradient = (/**
 * @param {?} params
 * @return {?}
 */
(params) => {
    return new LinearGradient(0, 0, 0, 1, [
        { offset: 0, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][0] },
        { offset: 1, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][1] }
    ]);
});
/** @type {?} */
export const getChartColorsGradientOne = (/**
 * @param {?} params
 * @return {?}
 */
(params) => {
    return new LinearGradient(1, 0, 0, 0, [
        { offset: 0, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][0] },
        { offset: 1, color: splitedGradientColors[params.dataIndex % splitedGradientColors.length][1] }
    ]);
})
/**
 * 对于有 “y 轴自定义范围” 的 charts 元部件，data 都要用它过滤后再用
 * @param obj 元部件实例
 */
;
/**
 * 对于有 “y 轴自定义范围” 的 charts 元部件，data 都要用它过滤后再用
 * @param {?} obj 元部件实例
 * @param {?} data
 * @return {?}
 */
export function filterYData(obj, data) {
    if (obj.filterYFlag) {
        /** @type {?} */
        const yFields = obj.yFieldObjs.map((/**
         * @param {?} o
         * @return {?}
         */
        o => o.valueField.name));
        return data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return !yFields.some((/**
             * @param {?} yField
             * @return {?}
             */
            yField => item[yField] <= obj.minY || item[yField] >= obj.maxY));
        }));
    }
    return data;
}
/** @type {?} */
export const EchartsPropertyOptions = {
    showRefresh: {
        category: 'data',
        displayName: 'showRefreshBtn',
        type: PropertyTypes.Bool,
        boolOption: {
            default: true
        }
    },
    filterYFlag: {
        type: PropertyTypes.Bool,
        category: 'data',
        displayName: 'setYRange'
    },
    minY: {
        type: PropertyTypes.Number,
        category: 'data',
        displayName: 'minY',
        numberOption: {
            default: 0
        },
        /**
         * @param {?} values
         * @return {?}
         */
        ifShow(values) { return values.filterYFlag; }
    },
    maxY: {
        type: PropertyTypes.Number,
        category: 'data',
        displayName: 'maxY',
        numberOption: {
            default: 1000
        },
        /**
         * @param {?} values
         * @return {?}
         */
        ifShow(values) { return values.filterYFlag; }
    },
    showLabel: {
        category: 'style',
        type: PropertyTypes.Bool,
        displayName: 'showNumber'
    },
    showTooltip: {
        category: 'style',
        type: PropertyTypes.Bool,
        boolOption: { default: true },
        displayName: 'showHoverDetail'
    },
    legendStyleOption: {
        type: PropertyTypes.Enum,
        displayName: 'legendType',
        category: 'style',
        enumOption: {
            default: 'scroll',
            items: [
                { value: 'none', displayName: 'notVisible' },
                { value: 'plain', displayName: 'showAll' },
                { value: 'scroll', displayName: 'scrollOverflow' }
            ]
        }
    },
    valueStyleOption: {
        type: PropertyTypes.Enum,
        displayName: 'valueType',
        category: 'style',
        enumOption: {
            default: 'right',
            items: [
                { value: 'right', displayName: 'right' },
                { value: 'insideRight', displayName: 'inside' },
            ]
        }
    }
}
/**
 * 三种传参方式：
 * 1. '#000', '#fff'
 * 2. '#000,#fff'
 * 3. '#000'
 */
;
/**
 * 三种传参方式：
 * 1. '#000', '#fff'
 * 2. '#000,#fff'
 * 3. '#000'
 * @param {?} c1
 * @param {?=} c2
 * @return {?}
 */
export function echartsGradient(c1, c2) {
    // 若只传了一个值、还不是逗号分割，则直接返回此纯色
    if (!c2 && !c1.includes(','))
        return c1;
    // 若只传了一个值、是逗号分割，就分割为俩颜色
    if (!c2)
        [c1, c2] = c1.split(',');
    return new LinearGradient(0, 0, 0, 1, [
        { offset: 0, color: c1 },
        { offset: 1, color: c2 }
    ]);
}
// TODO: 暂时给资金做国际化
/** @type {?} */
export const tempMap = {
    '金额': {
        'en': 'Amount',
        'zh-CHS': '金额',
    },
    '数量': {
        'en': 'Number',
        'zh-CHS': '数量',
    }
}
// TODO: 暂时给资金国际化
;
// TODO: 暂时给资金国际化
/**
 * @param {?} dataField
 * @param {?} currentLang
 * @return {?}
 */
export function tempLabel(dataField, currentLang) {
    const { label } = dataField;
    return tempMap[label] && tempMap[label][currentLang]
        ? tempMap[label][currentLang]
        : dataField.label;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmVjaGFydHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3Nwd2lkZ2V0L3dpZGdldC1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcHJlc2V0L3ByZXNldC5lY2hhcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDL0MsT0FBTyxFQUFhLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUN0RCxPQUFPLGNBQWMsTUFBTSwyQkFBMkIsQ0FBQTs7QUFFdEQsTUFBTSxPQUFPLGNBQWMsR0FBRztJQUM1QixJQUFJLEVBQUU7UUFDSixHQUFHLEVBQUUsRUFBRTtRQUNQLEtBQUssRUFBRSxFQUFFO1FBQ1QsTUFBTSxFQUFFLEVBQUU7UUFDVixJQUFJLEVBQUUsRUFBRTtRQUNSLFlBQVksRUFBRSxJQUFJO0tBQ25CO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLFVBQVU7UUFDaEIsUUFBUSxFQUFFO1lBQ1IsU0FBUyxFQUFFO2dCQUNULEtBQUssRUFBRSxTQUFTO2FBQ2pCO1NBQ0Y7UUFDRCxRQUFRLEVBQUU7WUFDUixTQUFTLEVBQUU7Z0JBQ1QsS0FBSyxFQUFFLFNBQVM7YUFDakI7U0FDRjtRQUNELFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxPQUFPO1lBQ2QsTUFBTSxFQUFFLEVBQUU7WUFDVixRQUFRLEVBQUUsRUFBRTtTQUNiO0tBQ0Y7SUFDRCxLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsS0FBSztTQUNaO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLEtBQUs7U0FDWjtRQUNELFNBQVMsRUFBRTtZQUNULFNBQVMsRUFBRTtnQkFDVCxLQUFLLEVBQUUsV0FBVzthQUVuQjtTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsUUFBUSxFQUFFLEVBQUU7U0FDYjtLQUNGO0lBQ0QsTUFBTSxFQUFFOzs7UUFHTixDQUFDLEVBQUUs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QUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDVixFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztRQUN0QixFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztLQUN2QixDQUNGLENBQUE7QUFDSCxDQUFDOzs7QUFHRCxNQUFNLE9BQU8sT0FBTyxHQUFHO0lBQ3JCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxRQUFRO1FBQ2QsUUFBUSxFQUFFLElBQUk7S0FDZjtJQUNELElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxRQUFRO1FBQ2QsUUFBUSxFQUFFLElBQUk7S0FDZjtDQUNGO0FBQ0QsaUJBQWlCOzs7Ozs7OztBQUNqQixNQUFNLFVBQVUsU0FBUyxDQUFFLFNBQW9CLEVBQUUsV0FBbUI7VUFDNUQsRUFBRSxLQUFLLEVBQUUsR0FBRyxTQUFTO0lBQzNCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDbEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDN0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUE7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsVGhlbWVDb2xvcnMgfSBmcm9tIFwiQGdzcHdpZGdldC91dGlsXCJcbmltcG9ydCB7IERhdGFGaWVsZCwgUHJvcGVydHlUeXBlcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiXG5pbXBvcnQgTGluZWFyR3JhZGllbnQgZnJvbSBcIi4venJlbmRlci5saW5lYXItZ3JhZGllbnRcIlxuXG5leHBvcnQgY29uc3QgRWNoYXJ0c09wdGlvbnMgPSB7XG4gIGdyaWQ6IHtcbiAgICB0b3A6IDIwLFxuICAgIHJpZ2h0OiAzMCxcbiAgICBib3R0b206IDM2LFxuICAgIGxlZnQ6IDEwLFxuICAgIGNvbnRhaW5MYWJlbDogdHJ1ZSxcbiAgfSxcbiAgeEF4aXM6IHtcbiAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgIGF4aXNMaW5lOiB7XG4gICAgICBsaW5lU3R5bGU6IHtcbiAgICAgICAgY29sb3I6ICcjRDlEOUQ5JyxcbiAgICAgIH1cbiAgICB9LFxuICAgIGF4aXNUaWNrOiB7XG4gICAgICBsaW5lU3R5bGU6IHtcbiAgICAgICAgY29sb3I6ICcjRDlEOUQ5JyxcbiAgICAgIH1cbiAgICB9LFxuICAgIGF4aXNMYWJlbDoge1xuICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICBtYXJnaW46IDEwLFxuICAgICAgZm9udFNpemU6IDExXG4gICAgfVxuICB9LFxuICB5QXhpczoge1xuICAgIGF4aXNMaW5lOiB7XG4gICAgICBzaG93OiBmYWxzZVxuICAgIH0sXG4gICAgYXhpc1RpY2s6IHtcbiAgICAgIHNob3c6IGZhbHNlXG4gICAgfSxcbiAgICBzcGxpdExpbmU6IHtcbiAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICBjb2xvcjogJyNFNEVCRjA1NycsXG4gICAgICAgIC8vIHR5cGU6ICdkYXNoZWQnXG4gICAgICB9XG4gICAgfSxcbiAgICBheGlzTGFiZWw6IHtcbiAgICAgIGZvbnRTaXplOiAxMVxuICAgIH1cbiAgfSxcbiAgbGVnZW5kOiB7XG4gICAgLy8gbGVmdDogNDUsXG4gICAgLy8gdG9wOiAtMyxcbiAgICB4OiAnY2VudGVyJyxcbiAgICB5OiAnYm90dG9tJyxcbiAgICBpdGVtV2lkdGg6IDE2LFxuICAgIGl0ZW1IZWlnaHQ6IDMsXG4gICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgIGljb246ICdyb3VuZFJlY3QnLFxuICAgIHBhZGRpbmc6IFsxNSwgMF0sXG4gICAgdGV4dFN0eWxlOiB7XG4gICAgICBjb2xvcjogJyMwMDAwMDBhNidcbiAgICB9XG4gIH0sXG4gIHRvb2x0aXA6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2ZmZmZmZmU4XCIsXG4gICAgdGV4dFN0eWxlOiB7XG4gICAgICBjb2xvcjogXCIjMDAwMDAwZTZcIixcbiAgICB9LFxuICAgIGV4dHJhQ3NzVGV4dDogXCJib3gtc2hhZG93OiAwcHggMXB4IDdweCAjMDAwMDAwMTc7XCIsXG4gICAgYXBwZW5kVG9Cb2R5OiB0cnVlLFxuICAgIGNvbmZpbmU6IHRydWUsXG4gIH0sXG59XG5leHBvcnQgY29uc3QgY2hhcnRzQ29uc3RzID0ge1xuICAvKiogc2VyaWVzIGxhYmVsIOWtl+S9k+Wkp+WwjyAqL1xuICBzZXJpZXNMYWJlbEZvbnRTaXplOiA5LFxufVxuXG5jb25zdCBzcGxpdGVkR3JhZGllbnRDb2xvcnMgPSBQbFRoZW1lQ29sb3JzLmdyYWRpZW50Lm1hcChjID0+IGMuc3BsaXQoJywnKSlcblxuZXhwb3J0IGNvbnN0IGdldENoYXJ0Q29sb3JzUHVyZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIFBsVGhlbWVDb2xvcnMucHVyZVtwYXJhbXMuZGF0YUluZGV4XTtcbn1cbmV4cG9ydCBjb25zdCBnZXRDaGFydENvbG9yc0dyYWRpZW50ID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IExpbmVhckdyYWRpZW50KFxuICAgIDAsIDAsIDAsIDEsIFtcbiAgICAgIHtvZmZzZXQ6IDAsIGNvbG9yOiBzcGxpdGVkR3JhZGllbnRDb2xvcnNbcGFyYW1zLmRhdGFJbmRleCAlIHNwbGl0ZWRHcmFkaWVudENvbG9ycy5sZW5ndGhdWzBdfSxcbiAgICAgIHtvZmZzZXQ6IDEsIGNvbG9yOiBzcGxpdGVkR3JhZGllbnRDb2xvcnNbcGFyYW1zLmRhdGFJbmRleCAlIHNwbGl0ZWRHcmFkaWVudENvbG9ycy5sZW5ndGhdWzFdfVxuICAgIF1cbiAgKVxufVxuZXhwb3J0IGNvbnN0IGdldENoYXJ0Q29sb3JzR3JhZGllbnRPbmUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgTGluZWFyR3JhZGllbnQoXG4gICAgMSwgMCwgMCwgMCwgW1xuICAgICAge29mZnNldDogMCwgY29sb3I6IHNwbGl0ZWRHcmFkaWVudENvbG9yc1twYXJhbXMuZGF0YUluZGV4ICUgc3BsaXRlZEdyYWRpZW50Q29sb3JzLmxlbmd0aF1bMF19LFxuICAgICAge29mZnNldDogMSwgY29sb3I6IHNwbGl0ZWRHcmFkaWVudENvbG9yc1twYXJhbXMuZGF0YUluZGV4ICUgc3BsaXRlZEdyYWRpZW50Q29sb3JzLmxlbmd0aF1bMV19XG4gICAgXVxuICApXG59XG5cbi8qKlxuICog5a+55LqO5pyJIOKAnHkg6L206Ieq5a6a5LmJ6IyD5Zu04oCdIOeahCBjaGFydHMg5YWD6YOo5Lu277yMZGF0YSDpg73opoHnlKjlroPov4fmu6TlkI7lho3nlKhcbiAqIEBwYXJhbSBvYmog5YWD6YOo5Lu25a6e5L6LXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJZRGF0YSAob2JqOiB7IGZpbHRlcllGbGFnLCB5RmllbGRPYmpzOiB7IHZhbHVlRmllbGQ6IERhdGFGaWVsZCwgY29sb3I6IHN0cmluZyB9W10sIG1pblksIG1heFkgfSwgZGF0YSkge1xuICBpZiAob2JqLmZpbHRlcllGbGFnKSB7XG4gICAgY29uc3QgeUZpZWxkcyA9IG9iai55RmllbGRPYmpzLm1hcChvID0+IG8udmFsdWVGaWVsZC5uYW1lKVxuICAgIHJldHVybiBkYXRhLmZpbHRlcihpdGVtID0+IHtcbiAgICAgIHJldHVybiAheUZpZWxkcy5zb21lKHlGaWVsZCA9PiBpdGVtW3lGaWVsZF0gPD0gb2JqLm1pblkgfHwgaXRlbVt5RmllbGRdID49IG9iai5tYXhZKVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZXhwb3J0IGNvbnN0IEVjaGFydHNQcm9wZXJ0eU9wdGlvbnMgPSB7XG4gIHNob3dSZWZyZXNoOiB7XG4gICAgY2F0ZWdvcnk6ICdkYXRhJyxcbiAgICBkaXNwbGF5TmFtZTogJ3Nob3dSZWZyZXNoQnRuJyxcbiAgICB0eXBlOiBQcm9wZXJ0eVR5cGVzLkJvb2wsXG4gICAgYm9vbE9wdGlvbjoge1xuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgZmlsdGVyWUZsYWc6IHtcbiAgICB0eXBlOiBQcm9wZXJ0eVR5cGVzLkJvb2wsXG4gICAgY2F0ZWdvcnk6ICdkYXRhJyxcbiAgICBkaXNwbGF5TmFtZTogJ3NldFlSYW5nZSdcbiAgfSxcbiAgbWluWToge1xuICAgIHR5cGU6IFByb3BlcnR5VHlwZXMuTnVtYmVyLFxuICAgIGNhdGVnb3J5OiAnZGF0YScsXG4gICAgZGlzcGxheU5hbWU6ICdtaW5ZJyxcbiAgICBudW1iZXJPcHRpb246IHtcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuICAgIGlmU2hvdyAodmFsdWVzKSB7IHJldHVybiB2YWx1ZXMuZmlsdGVyWUZsYWcgfVxuICB9LFxuICBtYXhZOiB7XG4gICAgdHlwZTogUHJvcGVydHlUeXBlcy5OdW1iZXIsXG4gICAgY2F0ZWdvcnk6ICdkYXRhJyxcbiAgICBkaXNwbGF5TmFtZTogJ21heFknLFxuICAgIG51bWJlck9wdGlvbjoge1xuICAgICAgZGVmYXVsdDogMTAwMFxuICAgIH0sXG4gICAgaWZTaG93ICh2YWx1ZXMpIHsgcmV0dXJuIHZhbHVlcy5maWx0ZXJZRmxhZyB9XG4gIH0sXG5cbiAgc2hvd0xhYmVsOiB7XG4gICAgY2F0ZWdvcnk6ICdzdHlsZScsXG4gICAgdHlwZTogUHJvcGVydHlUeXBlcy5Cb29sLFxuICAgIGRpc3BsYXlOYW1lOiAnc2hvd051bWJlcidcbiAgfSxcbiAgc2hvd1Rvb2x0aXA6IHtcbiAgICBjYXRlZ29yeTogJ3N0eWxlJyxcbiAgICB0eXBlOiBQcm9wZXJ0eVR5cGVzLkJvb2wsXG4gICAgYm9vbE9wdGlvbjogeyBkZWZhdWx0OiB0cnVlIH0sXG4gICAgZGlzcGxheU5hbWU6ICdzaG93SG92ZXJEZXRhaWwnXG4gIH1cblxuICAsIGxlZ2VuZFN0eWxlT3B0aW9uOiB7XG4gICAgdHlwZTogUHJvcGVydHlUeXBlcy5FbnVtLFxuICAgIGRpc3BsYXlOYW1lOiAnbGVnZW5kVHlwZScsXG4gICAgY2F0ZWdvcnk6ICdzdHlsZScsXG4gICAgZW51bU9wdGlvbjoge1xuICAgICAgZGVmYXVsdDogJ3Njcm9sbCcsXG4gICAgICBpdGVtczogW1xuICAgICAgICB7IHZhbHVlOiAnbm9uZScsIGRpc3BsYXlOYW1lOiAnbm90VmlzaWJsZScgfSxcbiAgICAgICAgeyB2YWx1ZTogJ3BsYWluJywgZGlzcGxheU5hbWU6ICdzaG93QWxsJyB9LFxuICAgICAgICB7IHZhbHVlOiAnc2Nyb2xsJywgZGlzcGxheU5hbWU6ICdzY3JvbGxPdmVyZmxvdycgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgdmFsdWVTdHlsZU9wdGlvbjoge1xuICAgIHR5cGU6IFByb3BlcnR5VHlwZXMuRW51bSxcbiAgICBkaXNwbGF5TmFtZTogJ3ZhbHVlVHlwZScsXG4gICAgY2F0ZWdvcnk6ICdzdHlsZScsXG4gICAgZW51bU9wdGlvbjoge1xuICAgICAgZGVmYXVsdDogJ3JpZ2h0JyxcbiAgICAgIGl0ZW1zOiBbXG4gICAgICAgIHsgdmFsdWU6ICdyaWdodCcsIGRpc3BsYXlOYW1lOiAncmlnaHQnIH0sXG4gICAgICAgIHsgdmFsdWU6ICdpbnNpZGVSaWdodCcsIGRpc3BsYXlOYW1lOiAnaW5zaWRlJyB9LFxuICAgICAgXVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIOS4ieenjeS8oOWPguaWueW8j++8mlxuICogMS4gJyMwMDAnLCAnI2ZmZidcbiAqIDIuICcjMDAwLCNmZmYnXG4gKiAzLiAnIzAwMCdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVjaGFydHNHcmFkaWVudCAoYzE6IHN0cmluZywgYzI/OiBzdHJpbmcpIHtcbiAgLy8g6Iul5Y+q5Lyg5LqG5LiA5Liq5YC844CB6L+Y5LiN5piv6YCX5Y+35YiG5Ymy77yM5YiZ55u05o6l6L+U5Zue5q2k57qv6ImyXG4gIGlmICghYzIgJiYgIWMxLmluY2x1ZGVzKCcsJykpIHJldHVybiBjMVxuICAvLyDoi6Xlj6rkvKDkuobkuIDkuKrlgLzjgIHmmK/pgJflj7fliIblibLvvIzlsLHliIblibLkuLrkv6npopzoibJcbiAgaWYgKCFjMikgW2MxLCBjMl0gPSBjMS5zcGxpdCgnLCcpXG4gIHJldHVybiBuZXcgTGluZWFyR3JhZGllbnQoXG4gICAgMCwgMCwgMCwgMSwgW1xuICAgICAge29mZnNldDogMCwgY29sb3I6IGMxfSxcbiAgICAgIHtvZmZzZXQ6IDEsIGNvbG9yOiBjMn1cbiAgICBdXG4gIClcbn1cblxuLy8gVE9ETzog5pqC5pe257uZ6LWE6YeR5YGa5Zu96ZmF5YyWXG5leHBvcnQgY29uc3QgdGVtcE1hcCA9IHtcbiAgJ+mHkeminSc6IHtcbiAgICAnZW4nOiAnQW1vdW50JyxcbiAgICAnemgtQ0hTJzogJ+mHkeminScsXG4gIH0sXG4gICfmlbDph48nOiB7XG4gICAgJ2VuJzogJ051bWJlcicsXG4gICAgJ3poLUNIUyc6ICfmlbDph48nLFxuICB9XG59XG4vLyBUT0RPOiDmmoLml7bnu5notYTph5Hlm73pmYXljJZcbmV4cG9ydCBmdW5jdGlvbiB0ZW1wTGFiZWwgKGRhdGFGaWVsZDogRGF0YUZpZWxkLCBjdXJyZW50TGFuZzogc3RyaW5nKSB7XG4gIGNvbnN0IHsgbGFiZWwgfSA9IGRhdGFGaWVsZFxuICByZXR1cm4gdGVtcE1hcFtsYWJlbF0gJiYgdGVtcE1hcFtsYWJlbF1bY3VycmVudExhbmddXG4gICAgPyB0ZW1wTWFwW2xhYmVsXVtjdXJyZW50TGFuZ11cbiAgICA6IGRhdGFGaWVsZC5sYWJlbFxufVxuIl19