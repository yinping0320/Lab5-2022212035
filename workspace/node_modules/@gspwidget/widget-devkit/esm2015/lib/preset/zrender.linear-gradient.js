/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import Gradient from "./zrender.gradient";
/**
 * @record
 */
export function LinearGradientObject() { }
if (false) {
    /** @type {?} */
    LinearGradientObject.prototype.type;
    /** @type {?} */
    LinearGradientObject.prototype.x;
    /** @type {?} */
    LinearGradientObject.prototype.y;
    /** @type {?} */
    LinearGradientObject.prototype.x2;
    /** @type {?} */
    LinearGradientObject.prototype.y2;
    /** @type {?} */
    LinearGradientObject.prototype.global;
}
/**
 * x, y, x2, y2 are all percent from 0 to 1 when globalCoord is false
 */
export default class LinearGradient extends Gradient {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} x2
     * @param {?} y2
     * @param {?=} colorStops
     * @param {?=} globalCoord
     */
    constructor(x, y, x2, y2, colorStops, globalCoord) {
        super(colorStops);
        // Should do nothing more in this constructor. Because gradient can be
        // declard by `color: {type: 'linear', colorStops: ...}`, where
        // this constructor will not be called.
        this.x = x == null ? 0 : x;
        this.y = y == null ? 0 : y;
        this.x2 = x2 == null ? 1 : x2;
        this.y2 = y2 == null ? 0 : y2;
        // Can be cloned
        this.type = "linear";
        // If use global coord
        this.global = globalCoord || false;
    }
}
if (false) {
    /** @type {?} */
    LinearGradient.prototype.type;
    /** @type {?} */
    LinearGradient.prototype.x;
    /** @type {?} */
    LinearGradient.prototype.y;
    /** @type {?} */
    LinearGradient.prototype.x2;
    /** @type {?} */
    LinearGradient.prototype.y2;
    /** @type {?} */
    LinearGradient.prototype.global;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoienJlbmRlci5saW5lYXItZ3JhZGllbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3Nwd2lkZ2V0L3dpZGdldC1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcHJlc2V0L3pyZW5kZXIubGluZWFyLWdyYWRpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLFFBQStDLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFFakYsMENBU0M7OztJQVJDLG9DQUFlOztJQUVmLGlDQUFVOztJQUNWLGlDQUFVOztJQUNWLGtDQUFXOztJQUNYLGtDQUFXOztJQUVYLHNDQUFnQjs7Ozs7QUFNbEIsTUFBTSxDQUFDLE9BQU8sT0FBTyxjQUFlLFNBQVEsUUFBUTs7Ozs7Ozs7O0lBVWxELFlBQ0UsQ0FBUyxFQUNULENBQVMsRUFDVCxFQUFVLEVBQ1YsRUFBVSxFQUNWLFVBQWdDLEVBQ2hDLFdBQXFCO1FBRXJCLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVsQixzRUFBc0U7UUFDdEUsK0RBQStEO1FBQy9ELHVDQUF1QztRQUV2QyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUU5QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRTlCLGdCQUFnQjtRQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUVyQixzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLElBQUksS0FBSyxDQUFDO0lBQ3JDLENBQUM7Q0FDRjs7O0lBckNDLDhCQUFlOztJQUVmLDJCQUFVOztJQUNWLDJCQUFVOztJQUNWLDRCQUFXOztJQUNYLDRCQUFXOztJQUVYLGdDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHcmFkaWVudCwgeyBHcmFkaWVudE9iamVjdCwgR3JhZGllbnRDb2xvclN0b3AgfSBmcm9tIFwiLi96cmVuZGVyLmdyYWRpZW50XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluZWFyR3JhZGllbnRPYmplY3QgZXh0ZW5kcyBHcmFkaWVudE9iamVjdCB7XG4gIHR5cGU6IFwibGluZWFyXCI7XG5cbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHgyOiBudW1iZXI7XG4gIHkyOiBudW1iZXI7XG5cbiAgZ2xvYmFsOiBib29sZWFuO1xufVxuLyoqXG4gKiB4LCB5LCB4MiwgeTIgYXJlIGFsbCBwZXJjZW50IGZyb20gMCB0byAxIHdoZW4gZ2xvYmFsQ29vcmQgaXMgZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW5lYXJHcmFkaWVudCBleHRlbmRzIEdyYWRpZW50IHtcbiAgdHlwZTogXCJsaW5lYXJcIjtcblxuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgeDI6IG51bWJlcjtcbiAgeTI6IG51bWJlcjtcblxuICBnbG9iYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICB4MjogbnVtYmVyLFxuICAgIHkyOiBudW1iZXIsXG4gICAgY29sb3JTdG9wcz86IEdyYWRpZW50Q29sb3JTdG9wW10sXG4gICAgZ2xvYmFsQ29vcmQ/OiBib29sZWFuXG4gICkge1xuICAgIHN1cGVyKGNvbG9yU3RvcHMpO1xuXG4gICAgLy8gU2hvdWxkIGRvIG5vdGhpbmcgbW9yZSBpbiB0aGlzIGNvbnN0cnVjdG9yLiBCZWNhdXNlIGdyYWRpZW50IGNhbiBiZVxuICAgIC8vIGRlY2xhcmQgYnkgYGNvbG9yOiB7dHlwZTogJ2xpbmVhcicsIGNvbG9yU3RvcHM6IC4uLn1gLCB3aGVyZVxuICAgIC8vIHRoaXMgY29uc3RydWN0b3Igd2lsbCBub3QgYmUgY2FsbGVkLlxuXG4gICAgdGhpcy54ID0geCA9PSBudWxsID8gMCA6IHg7XG5cbiAgICB0aGlzLnkgPSB5ID09IG51bGwgPyAwIDogeTtcblxuICAgIHRoaXMueDIgPSB4MiA9PSBudWxsID8gMSA6IHgyO1xuXG4gICAgdGhpcy55MiA9IHkyID09IG51bGwgPyAwIDogeTI7XG5cbiAgICAvLyBDYW4gYmUgY2xvbmVkXG4gICAgdGhpcy50eXBlID0gXCJsaW5lYXJcIjtcblxuICAgIC8vIElmIHVzZSBnbG9iYWwgY29vcmRcbiAgICB0aGlzLmdsb2JhbCA9IGdsb2JhbENvb3JkIHx8IGZhbHNlO1xuICB9XG59XG4iXX0=