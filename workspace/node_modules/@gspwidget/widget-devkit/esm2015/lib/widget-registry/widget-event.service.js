/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { curLang, FILTERS_WIDGET_FILTERS_PROP_NAME, FILTERS_WIDGET_NAME } from '@gspwidget/util';
import { WidgetEventMap } from './widget-event.decorator';
import { WidgetRegistry } from './widget-registry';
import * as i0 from "@angular/core";
export class WidgetEventService {
    constructor() { }
    /**
     * @param {?} widgetName
     * @param {?} pvs
     * @return {?}
     */
    getEventsByWidgetName(widgetName, pvs) {
        /** @type {?} */
        const ctorName = WidgetRegistry.getWidgetByName(widgetName).ctor.name;
        /** @type {?} */
        const widgetEvents = WidgetEventMap.get(ctorName) || [];
        if (widgetName === FILTERS_WIDGET_NAME) {
            return pvs[FILTERS_WIDGET_FILTERS_PROP_NAME].map((/**
             * @param {?} fc
             * @return {?}
             */
            (fc) => ({
                name: fc.i18nName[curLang],
                propName: fc.i18nName[curLang],
            })));
        }
        // 组装
        return [
            ...widgetEvents,
            ...test,
        ];
    }
}
WidgetEventService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WidgetEventService.ctorParameters = () => [];
/** @nocollapse */ WidgetEventService.ngInjectableDef = i0.defineInjectable({ factory: function WidgetEventService_Factory() { return new WidgetEventService(); }, token: WidgetEventService, providedIn: "root" });
/** @type {?} */
const test = [{
        name: 'click bar'
    }, {
        name: 'event 2'
    }, {
        name: 'event 3'
    }];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LWV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3Nwd2lkZ2V0L3dpZGdldC1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvd2lkZ2V0LXJlZ2lzdHJ5L3dpZGdldC1ldmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsbUJBQW1CLEVBQXFCLE1BQU0saUJBQWlCLENBQUM7QUFFcEgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7QUFLbkQsTUFBTSxPQUFPLGtCQUFrQjtJQUU3QixnQkFBaUIsQ0FBQzs7Ozs7O0lBRWxCLHFCQUFxQixDQUFFLFVBQWtCLEVBQUUsR0FBRzs7Y0FFdEMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUk7O2NBQy9ELFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7UUFDdkQsSUFBSSxVQUFVLEtBQUssbUJBQW1CLEVBQUU7WUFDdEMsT0FBTyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxHQUFHOzs7O1lBQUMsQ0FBQyxFQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RSxJQUFJLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7Z0JBQzFCLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzthQUMvQixDQUFDLEVBQUMsQ0FBQTtTQUNKO1FBQ0QsS0FBSztRQUNMLE9BQU87WUFDTCxHQUFHLFlBQVk7WUFDZixHQUFHLElBQUk7U0FDUixDQUFBO0lBQ0gsQ0FBQzs7O1lBdEJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7O01Bc0JLLElBQUksR0FBd0IsQ0FBQztRQUNqQyxJQUFJLEVBQUUsV0FBVztLQUNsQixFQUFFO1FBQ0QsSUFBSSxFQUFFLFNBQVM7S0FDaEIsRUFBRTtRQUNELElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjdXJMYW5nLCBGSUxURVJTX1dJREdFVF9GSUxURVJTX1BST1BfTkFNRSwgRklMVEVSU19XSURHRVRfTkFNRSwgV2lkZ2V0RXZlbnRDb25maWcgfSBmcm9tICdAZ3Nwd2lkZ2V0L3V0aWwnO1xuaW1wb3J0IHsgRmlsdGVyQ29uZmlnLCBGaWx0ZXJTY2hlbWEgfSBmcm9tICcuLi9maWx0ZXInO1xuaW1wb3J0IHsgV2lkZ2V0RXZlbnRNYXAgfSBmcm9tICcuL3dpZGdldC1ldmVudC5kZWNvcmF0b3InO1xuaW1wb3J0IHsgV2lkZ2V0UmVnaXN0cnkgfSBmcm9tICcuL3dpZGdldC1yZWdpc3RyeSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFdpZGdldEV2ZW50U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IgKCkgeyB9XG5cbiAgZ2V0RXZlbnRzQnlXaWRnZXROYW1lICh3aWRnZXROYW1lOiBzdHJpbmcsIHB2cylcbiAgICA6IFdpZGdldEV2ZW50Q29uZmlnW10ge1xuICAgIGNvbnN0IGN0b3JOYW1lID0gV2lkZ2V0UmVnaXN0cnkuZ2V0V2lkZ2V0QnlOYW1lKHdpZGdldE5hbWUpLmN0b3IubmFtZVxuICAgIGNvbnN0IHdpZGdldEV2ZW50cyA9IFdpZGdldEV2ZW50TWFwLmdldChjdG9yTmFtZSkgfHwgW11cbiAgICBpZiAod2lkZ2V0TmFtZSA9PT0gRklMVEVSU19XSURHRVRfTkFNRSkge1xuICAgICAgcmV0dXJuIHB2c1tGSUxURVJTX1dJREdFVF9GSUxURVJTX1BST1BfTkFNRV0ubWFwKChmYzogRmlsdGVyU2NoZW1hKSA9PiAoe1xuICAgICAgICBuYW1lOiBmYy5pMThuTmFtZVtjdXJMYW5nXSxcbiAgICAgICAgcHJvcE5hbWU6IGZjLmkxOG5OYW1lW2N1ckxhbmddLFxuICAgICAgfSkpXG4gICAgfVxuICAgIC8vIOe7hOijhVxuICAgIHJldHVybiBbXG4gICAgICAuLi53aWRnZXRFdmVudHMsXG4gICAgICAuLi50ZXN0LFxuICAgIF1cbiAgfVxufVxuY29uc3QgdGVzdDogV2lkZ2V0RXZlbnRDb25maWdbXSA9IFt7XG4gIG5hbWU6ICdjbGljayBiYXInXG59LCB7XG4gIG5hbWU6ICdldmVudCAyJ1xufSwge1xuICBuYW1lOiAnZXZlbnQgMydcbn1dXG4iXX0=