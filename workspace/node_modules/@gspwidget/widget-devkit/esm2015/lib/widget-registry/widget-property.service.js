/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PlThemeColors } from '@gspwidget/util';
import { PropertyTypes } from '../../types';
import { FilterSchema, frontendFilterProp } from '../filter';
import { datalessJumpOption } from '../preset/preset.jump';
// import { WidgetPropertyMap } from './widget-event.decorator';
import { WidgetRegistry } from './widget-registry';
import { WidgetBase } from '../WidgetBase';
import { WidgetPropertyMap } from './widget-property.decorator';
import * as i0 from "@angular/core";
/** @type {?} */
const PropertyTypeDefaultValues = {
    [PropertyTypes.Text]: '',
    [PropertyTypes.Bool]: false,
    [PropertyTypes.Number]: 0,
    [PropertyTypes.DataField]: {}
    // [PropertyTypes.Color]: '#000000',
    // [PropertyTypes.Enum]: 0,
    // [PropertyTypes.Date]: new Date()
    // [PropertyTypes.Object]: {},
}
// const frontendFilterProp: PropertyOption = {
//   name: 'filter',
//   displayName: '筛选',
//   isArray: true,
//   type: PropertyTypes.Filter,
// }
// TODO: filters
;
// const frontendFilterProp: PropertyOption = {
//   name: 'filter',
//   displayName: '筛选',
//   isArray: true,
//   type: PropertyTypes.Filter,
// }
// TODO: filters
/** @type {?} */
const titleBarProps = [{
        category: 'titleBar',
        name: 'titleBarHide',
        type: PropertyTypes.Bool,
        boolOption: {
            default: false
        }
    }, {
        category: 'titleBar',
        name: 'titleBarShowRefresh',
        displayName: 'showRefreshBtn',
        type: PropertyTypes.Bool,
        boolOption: {
            default: true
        }
    }, Object.assign({}, datalessJumpOption, { category: 'titleBar', name: 'titleBarJump' })];
export class WidgetPropertyService {
    constructor() { }
    /**
     * 获得某种类型的全局默认值，在完全没有值时使用
     * @param {?} prop
     * @param {?=} arrayItem 是否是来获取 array 的子项默认值的，默认不是。
     * 如果不是，若 prop.isArray 为真，就返回空数组 []；
     * 如果是，则不管 prop.isArray 是否为真，总返回 prop.type 对应的默认值，仅应用于增加数组项时获取新项。
     * @return {?}
     */
    getPropertyDefaultValue(prop, arrayItem = false) {
        if (!arrayItem && prop.isArray)
            return [];
        // object: 递归生成具有所有 key 的对象，每个 key 的 value 是默认值
        if (prop.type === PropertyTypes.Object) {
            /** @type {?} */
            const newObj = {};
            prop.objectOption.objPropertyOptions.forEach((/**
             * @param {?} childProp
             * @return {?}
             */
            (childProp) => {
                newObj[childProp.name] = (childProp[childProp.type]
                    && childProp[childProp.type].default)
                    || this.getPropertyDefaultValue(childProp);
            }));
            return newObj;
        }
        else if (prop.type === PropertyTypes.Enum) {
            /** @type {?} */
            const firstItem = prop.enumOption.items[0];
            return typeof firstItem === 'string'
                ? firstItem
                : firstItem['value'];
        }
        else if (prop.type === PropertyTypes.Color) {
            /** @type {?} */
            const colors = this.getColorsByColorOption(prop.colorOption);
            /** @type {?} */
            const i = Math.random();
            return colors[Math.floor(i * colors.length)];
        }
        else if (prop.type === PropertyTypes.Filter) {
            return new FilterSchema();
        }
        else {
            return PropertyTypeDefaultValues[prop.type];
        }
    }
    /**
     * 元部件加载、编译完成后，组装新的 properties
     * widget name
     * -> constructor name
     * -> widget + title bar + base properties
     * -> 元部件的所有可配置 properties
     * @param {?} widgetName
     * @param {?} widgetConfig
     * @return {?}
     */
    getWidgetProps(widgetName, widgetConfig) {
        /** @type {?} */
        const ctorName = WidgetRegistry.getWidgetByName(widgetName).ctor.name
        // widget 子类中的 property
        ;
        // widget 子类中的 property
        /** @type {?} */
        const widgetProps = WidgetPropertyMap.get(ctorName) || []
        // 筛选出 widget 子类中没重写过的 property，否则可能会有俩一样的
        ;
        // 筛选出 widget 子类中没重写过的 property，否则可能会有俩一样的
        /** @type {?} */
        const baseProps = WidgetPropertyMap.get(WidgetBase.name)
            .filter((/**
         * @param {?} baseProp
         * @return {?}
         */
        baseProp => !widgetProps.some((/**
         * @param {?} prop
         * @return {?}
         */
        prop => baseProp.name === prop.name))))
        // 组装
        ;
        // 组装
        return [
            // 公共配置都放这
            ...baseProps,
            // 标题配置
            ...(widgetConfig.enableCommonTitleBar
                ? titleBarProps
                : []),
            // 筛选配置
            ...(widgetConfig.enableDataConfig && widgetConfig.enableCommonTitleBar
                ? [frontendFilterProp]
                : []),
            // 元部件自身配置
            ...widgetProps
            // ...testProps,
        ];
    }
    /**
     * mixin 已有pv + 元部件推荐的默认pv + 此类型的全局默认pv
     * @param {?} props
     * @param {?} propValues
     * @return {?}
     */
    mixinWidgetPropValues(props, propValues) {
        /** @type {?} */
        const mixinedPropValues = Object.assign({}, propValues)
        // 检查所有 properties，哪个没有值，就赋上默认推荐值
        ;
        // 检查所有 properties，哪个没有值，就赋上默认推荐值
        props.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            // 这里必须是判断 undefined，否则 bool 类型的 false 也可能判定为无值
            if (mixinedPropValues[prop.name] === undefined) {
                mixinedPropValues[prop.name] = prop[prop.type] && prop[prop.type].default
                    // 如果元部件无默认值，就加入全局的当前类型默认值
                    || this.getPropertyDefaultValue(prop);
            }
        }));
        return mixinedPropValues;
    }
    /**
     * @param {?} colorOption
     * @return {?}
     */
    getColorsByColorOption(colorOption) {
        if (colorOption && colorOption.palette)
            return colorOption.palette;
        /** @type {?} */
        const colorType = colorOption ? colorOption.type : 'pure';
        /** @type {?} */
        let colors;
        switch (colorType) {
            case 'gradient':
                colors = PlThemeColors.gradient;
                break;
            case 'pureOrGradient':
                colors = [...PlThemeColors.pure, ...PlThemeColors.gradient];
                break;
            case 'pure':
            default:
                colors = PlThemeColors.pure;
                break;
        }
        return colors;
    }
}
WidgetPropertyService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WidgetPropertyService.ctorParameters = () => [];
/** @nocollapse */ WidgetPropertyService.ngInjectableDef = i0.defineInjectable({ factory: function WidgetPropertyService_Factory() { return new WidgetPropertyService(); }, token: WidgetPropertyService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,