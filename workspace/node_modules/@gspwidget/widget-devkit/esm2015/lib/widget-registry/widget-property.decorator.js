/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { PropertyTypes } from '../../types';
/**
 * 元部件属性注册表，形如
 * { constructorName: { propertyName: propertyOption }
 * @type {?}
 */
export const WidgetPropertyMap = new Map()
/**
 * TODO: 加入检查，编译时报错（name不应该写；）
 * @param option 可选，默认为 { type: PropertyTypes.String }
 */
;
/**
 * TODO: 加入检查，编译时报错（name不应该写；）
 * @param {?=} option 可选，默认为 { type: PropertyTypes.String }
 * @return {?}
 */
export function Property(option = {}) {
    // 这里统一处理：没有设置 type 的一律设置为 Text。没用递归，仅多考虑了 Obj 内一层。
    option.type = option.type || PropertyTypes.Text;
    if (option.objectOption && option.objectOption.objPropertyOptions) {
        option.objectOption.objPropertyOptions.forEach((/**
         * @param {?} subOption
         * @return {?}
         */
        subOption => {
            subOption.type = subOption.type || PropertyTypes.Text;
        }));
    }
    option.isArray = !!option.isArray;
    return (/**
     * @param {?} widgetPrototype
     * @param {?} propName
     * @return {?}
     */
    (widgetPrototype, propName) => {
        // TODO: 想办法把 su 加进所有运行时注册表里的 keys 里
        /** @type {?} */
        const ctorName = widgetPrototype.constructor.name;
        if (!WidgetPropertyMap.get(ctorName))
            WidgetPropertyMap.set(ctorName, []);
        WidgetPropertyMap.get(ctorName).push(Object.assign({ name: propName }, option));
        // 调 angular Input decorator
        Input()(widgetPrototype, propName);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LXByb3BlcnR5LmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvd2lkZ2V0LWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi93aWRnZXQtcmVnaXN0cnkvd2lkZ2V0LXByb3BlcnR5LmRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0QyxPQUFPLEVBQWtCLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7Ozs7O0FBSzVELE1BQU0sT0FBTyxpQkFBaUIsR0FBRyxJQUFJLEdBQUcsRUFBNEI7QUFDcEU7OztHQUdHOzs7Ozs7O0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBRSxTQUF5QixFQUFFO0lBQ25ELG1EQUFtRDtJQUNuRCxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQTtJQUMvQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRTtRQUNqRSxNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLE9BQU87Ozs7UUFBQyxTQUFTLENBQUMsRUFBRTtZQUN6RCxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQTtRQUN2RCxDQUFDLEVBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtJQUNqQzs7Ozs7SUFBTyxDQUFDLGVBQWUsRUFBRSxRQUFRLEVBQUUsRUFBRTs7O2NBRTdCLFFBQVEsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUk7UUFDakQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7WUFBRSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3pFLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLGlCQUFHLElBQUksRUFBRSxRQUFRLElBQUssTUFBTSxFQUFHLENBQUE7UUFDbkUsNEJBQTRCO1FBQzVCLEtBQUssRUFBRSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNwQyxDQUFDLEVBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb3BlcnR5T3B0aW9uLCBQcm9wZXJ0eVR5cGVzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuLyoqXG4gKiDlhYPpg6jku7blsZ7mgKfms6jlhozooajvvIzlvaLlpoJcbiAqIHsgY29uc3RydWN0b3JOYW1lOiB7IHByb3BlcnR5TmFtZTogcHJvcGVydHlPcHRpb24gfVxuICovXG5leHBvcnQgY29uc3QgV2lkZ2V0UHJvcGVydHlNYXAgPSBuZXcgTWFwPHN0cmluZywgUHJvcGVydHlPcHRpb25bXT4oKVxuLyoqXG4gKiBUT0RPOiDliqDlhaXmo4Dmn6XvvIznvJbor5Hml7bmiqXplJnvvIhuYW1l5LiN5bqU6K+l5YaZ77yb77yJXG4gKiBAcGFyYW0gb3B0aW9uIOWPr+mAie+8jOm7mOiupOS4uiB7IHR5cGU6IFByb3BlcnR5VHlwZXMuU3RyaW5nIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFByb3BlcnR5IChvcHRpb246IFByb3BlcnR5T3B0aW9uID0ge30pIHtcbiAgLy8g6L+Z6YeM57uf5LiA5aSE55CG77ya5rKh5pyJ6K6+572uIHR5cGUg55qE5LiA5b6L6K6+572u5Li6IFRleHTjgILmsqHnlKjpgJLlvZLvvIzku4XlpJrogIPomZHkuoYgT2JqIOWGheS4gOWxguOAglxuICBvcHRpb24udHlwZSA9IG9wdGlvbi50eXBlIHx8IFByb3BlcnR5VHlwZXMuVGV4dFxuICBpZiAob3B0aW9uLm9iamVjdE9wdGlvbiAmJiBvcHRpb24ub2JqZWN0T3B0aW9uLm9ialByb3BlcnR5T3B0aW9ucykge1xuICAgIG9wdGlvbi5vYmplY3RPcHRpb24ub2JqUHJvcGVydHlPcHRpb25zLmZvckVhY2goc3ViT3B0aW9uID0+IHtcbiAgICAgIHN1Yk9wdGlvbi50eXBlID0gc3ViT3B0aW9uLnR5cGUgfHwgUHJvcGVydHlUeXBlcy5UZXh0XG4gICAgfSlcbiAgfVxuICBvcHRpb24uaXNBcnJheSA9ICEhb3B0aW9uLmlzQXJyYXlcbiAgcmV0dXJuICh3aWRnZXRQcm90b3R5cGUsIHByb3BOYW1lKSA9PiB7XG4gICAgLy8gVE9ETzog5oOz5Yqe5rOV5oqKIHN1IOWKoOi/m+aJgOaciei/kOihjOaXtuazqOWGjOihqOmHjOeahCBrZXlzIOmHjFxuICAgIGNvbnN0IGN0b3JOYW1lID0gd2lkZ2V0UHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWVcbiAgICBpZiAoIVdpZGdldFByb3BlcnR5TWFwLmdldChjdG9yTmFtZSkpIFdpZGdldFByb3BlcnR5TWFwLnNldChjdG9yTmFtZSwgW10pXG4gICAgV2lkZ2V0UHJvcGVydHlNYXAuZ2V0KGN0b3JOYW1lKS5wdXNoKHsgbmFtZTogcHJvcE5hbWUsIC4uLm9wdGlvbiB9KVxuICAgIC8vIOiwgyBhbmd1bGFyIElucHV0IGRlY29yYXRvclxuICAgIElucHV0KCkod2lkZ2V0UHJvdG90eXBlLCBwcm9wTmFtZSlcbiAgfVxufVxuIl19