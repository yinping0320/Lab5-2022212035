import { I18nValue } from './common.type';
export interface ProviderParam {
    label?: string;
    name?: string;
    type?: 'input' | 'textarea' | 'password' | 'checkbox' | 'select';
    sortNo?: number;
    value?: string;
    placeholder?: string;
    options?: string[];
    checked?: boolean;
    required?: boolean;
    encrypted?: boolean;
}
export declare class Datasrc {
    providerName?: string;
    id?: string;
    name?: string;
    i18nName: {
        [key: string]: any;
    };
    config?: {
        [name: string]: any;
    };
    groupName?: string;
    creator?: string;
    createTime?: Date;
    constructor(providerName?: string);
}
export interface DataProvider {
    label: string;
    name: string;
}
export interface DataParamDto {
    id?: string;
    i18nName?: any;
    type?: 'queryParam' | 'pathParam' | 'body';
    config?: string;
    datasetId?: string;
    name?: string;
    value?: string;
}
/**
 * 取数参数
 */
export declare class DataParam {
    id?: string;
    name?: string;
    i18nName?: any;
    type?: 'QUERY_PARAM' | 'PATH_PARAM' | 'BODY';
    config?: any;
    default?: string;
    datasetId?: string;
    static ToDto(dp: DataParam): DataParamDto;
    static FromDto(dpDto: DataParamDto): DataParam;
}
export interface DatasetDto {
    id?: string;
    name?: string;
    datasourceId?: string;
    i18nName?: {
        [key: string]: any;
    };
    datasourceName?: string;
    dimensions?: Dimension[];
    creationTime?: Date;
    method?: string;
    parameters?: DatasetParameter[];
    config?: string;
    dataParamDto?: DataParamDto[];
}
export declare class DatasetParameter {
    name: string;
    value: string;
    sortNo?: number;
    isExpression: boolean;
    constructor(name: string, value: string, sortNo?: number, isExpression?: boolean);
}
interface AnyKey {
    [key: string]: any;
}
export declare class Dataset implements AnyKey {
    id?: string;
    name?: string;
    product?: string;
    module?: string;
    creator?: string;
    modifier?: string;
    creationTime?: Date;
    modifyTime?: Date;
    datasrcId?: string;
    datasrcName?: string;
    i18nName?: {
        [key: string]: any;
    };
    config?: {
        [key: string]: any;
    };
    cols: {
        dimensions?: Dimension[];
        measures?: Dimension[];
    };
    dataParams?: DataParam[];
    static create(): Dataset;
    static toDto(dataset: Dataset): DatasetDto;
    static fromDto(datasetDto: DatasetDto): Dataset;
}
export declare type DimensionTypeName = 'STRING' | 'TEXT' | 'SHORT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'DECIMAL' | 'INTEGER' | 'INTETER' | 'DATETIME' | 'BYTE' | 'BYTES' | 'BOOLEAN' | 'UNKNOWN';
export declare class Dimension {
    name?: string;
    label?: string;
    i18nLabel?: I18nValue | string;
    type?: number;
    typeName?: DimensionTypeName;
    javaClassName?: string;
    groupName?: string;
    comment?: string;
    notNull?: boolean;
}
export interface Filter extends Dimension {
    hasValue?: boolean;
    filterExpression?: string;
}
export declare enum ComputedType {
    Count = "Count",
    Sum = "Sum",
    Max = "Max",
    Min = "Min",
    Avg = "Avg",
    Expression = "Expression"
}
export declare enum AggType {
    Table = "Table",
    CroosTable = "CroosTable"
}
export declare class ComputedCol extends Dimension {
    private expression?;
    computeType: ComputedType;
    constructor(expression?: string);
}
export interface Col extends Filter {
}
export interface Row extends Filter {
}
export interface AggDto {
    id?: string;
    dataSetId?: string;
    dataSetName?: string;
    resource?: string;
    resourceId?: string;
    aggregationType?: AggType;
    columnConfigs?: Col[];
    rowConfigs?: Row[];
    filterConfigs?: Filter[];
    computedExpressionConfigs?: ComputedCol[];
}
export declare class Agg {
    id?: string;
    datasetId?: string;
    datasetName?: string;
    resource?: string;
    resourceId?: string;
    aggType?: AggType;
    cols?: Col[];
    rows?: Row[];
    filters?: Filter[];
    computedCols?: ComputedCol[];
    static toDto(agg: Agg): AggDto;
    static fromDto(aggDto: AggDto): Agg;
}
export declare enum AggregationResultSetType {
    Table = "Table",
    CroosTable = "CroosTable"
}
/** 数据服务实际返回的结构 */
export interface AggResult {
    tableData?: {
        [key: string]: any;
    }[];
    dimensions?: Dimension[];
    columns?: string[];
    /** ? */
    type?: AggregationResultSetType;
    /** ? */
    getResultSet?: Result;
    /** ? */
    data?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export interface Result {
    data: object[];
    columns: Dimension[];
}
/** widget component 需要外部传入的数据格式。上面的服务符合此结构。 */
export interface DataWithDims {
    dimensions?: Dimension[];
    tableData?: any[];
}
/**
 * 获取数据时传服务端的 dp + value
 */
export declare class DpValue {
    dpId: string;
    value: any;
    static toDto(dpValue: any): DpValueDto;
}
export interface DpValueDto {
    dataParamId: string;
    value: string;
}
export interface RuntimeAggOptionDto {
    dimensions: string[];
    indicators: {
        type: number;
        name: string;
    }[];
}
export declare class Indicator {
    dimName?: string;
    aggFn?: 1 | 2 | 3 | 4 | 5;
}
export declare class RuntimeAggOption {
    dimensions: string[];
    indicators: Indicator[];
    static toDto(runtimeAgg: RuntimeAggOption): RuntimeAggOptionDto;
}
export {};
