import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Lang } from '../types/common.type';
import { RtfFunc, UserInfo } from '../types/igix.type';
export declare const igixUrls: {
    bo: {
        GET_ALL: string;
    };
    funcOperations: {
        GET_BY_BO_ID: string;
    };
    roleGroup: {
        GET_ALL: string;
    };
    role: {
        GET: string;
    };
    userInfo: {
        GET: string;
    };
    func: {
        /** 包含了所有菜单、联查，体积大、加载较慢 */
        GET_ALL_WITH_INVOKE: string;
        /** 这个是 iGIX 我的应用中的菜单、功能组列表，数据量稍小，性能较好 */
        GET_ALL: string;
    };
    langs: {
        GET_ALL: string;
    };
    qoDataset: {
        GET_ECP_BIZ_TREE: string;
        GET_DETAIL_BY_ID: string;
        GET_DETAIL_QUERY: string;
    };
    ba: {
        GET_ALL_PORTLETS: string;
    };
};
export declare class IgixRepo {
    private http;
    constructor(http: HttpClient);
    getBOTree(layer?: number): Observable<any[]>;
    getOpsByBOId(boId: string): Observable<any>;
    /** role, role group */
    getRoleGroupTree(): Observable<any[]>;
    getRolesByRoleGroupId(groupId: string): Observable<any>;
    getAllRoles(): Observable<any>;
    funcTree12: any;
    /** 获取部件列表需要的二级 bo tree */
    getFuncTree12(): Observable<any>;
    getQoDatasetDetailsByModuleId(moduleId: string): Observable<any>;
    getQoDatasetDetailById(id: string): Observable<any>;
    /**
     * 获取 igix 用户信息
     * @param reload 默认为假，不再发出请求，使用已缓存的结果；真则重新请求
     */
    userInfoPromise: Promise<UserInfo>;
    getUserInfo(reload?: boolean): Observable<UserInfo>;
    getUserAvatar(reload?: boolean): Observable<string>;
    getAllFuncs(): Observable<RtfFunc[]>;
    getBAPortletsAll(): Observable<any>;
    getLangsPromise: Promise<Lang[]>;
    getLangs(): Promise<Lang[]>;
}
