import { TranslateService, TranslateModule } from '@ngx-translate/core';
import { __assign, __extends } from 'tslib';
import { camelCase, constantCase } from 'change-case';
import CryptoJS from 'crypto-js';
import { from, of } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, Component, NgModule, EventEmitter, Pipe, defineInjectable, inject } from '@angular/core';
import { map, tap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UtilService = /** @class */ (function () {
    function UtilService(http) {
        this.http = http;
    }
    // TODO: 移走
    // TODO: 移走
    /**
     * @param {?} url
     * @param {?} content
     * @return {?}
     */
    UtilService.prototype.uploadFile = 
    // TODO: 移走
    /**
     * @param {?} url
     * @param {?} content
     * @return {?}
     */
    function (url, content) {
        /** @type {?} */
        var formData = new FormData();
        Object.keys(content).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            // TODO: 判断文件类型、append name 为啥去掉了？问阳仔
            if (key === 'file') {
                formData.append(key, content[key]);
            }
            else if (key === 'i18nName' || key === 'i18nDesc') {
                formData.append(key, JSON.stringify(content[key]));
            }
            else {
                formData.append(key, content[key]);
            }
        }));
        return this.http.post(url, formData, { responseType: 'text' });
    };
    UtilService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UtilService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ UtilService.ngInjectableDef = defineInjectable({ factory: function UtilService_Factory() { return new UtilService(inject(HttpClient)); }, token: UtilService, providedIn: "root" });
    return UtilService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UtilComponent = /** @class */ (function () {
    function UtilComponent() {
    }
    /**
     * @return {?}
     */
    UtilComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    UtilComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-util',
                    template: "\n    <p>\n      util works!\n    </p>\n  "
                }] }
    ];
    /** @nocollapse */
    UtilComponent.ctorParameters = function () { return []; };
    return UtilComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var WINDOW_RTF_KEY = 'gspframeworkService';
var RtfUtilService = /** @class */ (function () {
    function RtfUtilService(translate) {
        this.translate = translate;
    }
    // TODO: queryParamArray 是个 array 就行
    // TODO: queryParamArray 是个 array 就行
    /**
     * @param {?} funcId
     * @param {?=} queryParamArray
     * @param {?=} tabId
     * @param {?=} isReload
     * @return {?}
     */
    RtfUtilService.prototype.openMenu = 
    // TODO: queryParamArray 是个 array 就行
    /**
     * @param {?} funcId
     * @param {?=} queryParamArray
     * @param {?=} tabId
     * @param {?=} isReload
     * @return {?}
     */
    function (funcId, queryParamArray, tabId, isReload) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'menu',
            funcId: funcId, tabId: tabId, isReload: isReload,
            appId: '', appEntrance: '',
            queryStringParams: new Map(queryParamArray)
        })));
    };
    /**
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    RtfUtilService.prototype.closeMenu = /**
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    function (funcId, tabId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.close((/** @type {?} */ ({
            appType: 'menu',
            funcId: funcId, tabId: tabId,
            appId: '', appEntrance: ''
        })));
    };
    /**
     * @param {?} appId
     * @return {?}
     */
    RtfUtilService.prototype.openApp = /**
     * @param {?} appId
     * @return {?}
     */
    function (appId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'app',
            funcId: '',
            appId: appId,
            appEntrance: '',
        })));
    };
    /**
     * @return {?}
     */
    RtfUtilService.prototype.openUserInfoMenu = /**
     * @return {?}
     */
    function () {
        var rtf = window[WINDOW_RTF_KEY].rtf;
        /** @type {?} */
        var frmEventSvc = rtf.frmEvent;
        /** @type {?} */
        var sessionSvc = rtf.adapter.adatperSerice().session;
        this.translate.get('userInfo').subscribe((/**
         * @param {?} txt
         * @return {?}
         */
        function (txt) {
            frmEventSvc.eventFire("farrisapp-click", {
                active: false,
                code: 'userInfo',
                src: '/platform/runtime/sys/web/userinfo/index.html',
                sessionid: sessionSvc.getUserSessionId(),
                id: 'userinfo',
                appType: '',
                FuncName: txt
            });
        }));
    };
    /**
     * @param {?} route
     * @return {?}
     */
    RtfUtilService.prototype.closeCurRtfTab = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var _a = route.snapshot.queryParams, tabId = _a.tabId, funcId = _a.funcId;
        this.closeMenu(funcId, tabId);
    };
    /**
     * @param {?} route
     * @param {?=} condition
     * @return {?}
     */
    RtfUtilService.prototype.onRtfTabChangeToMe = /**
     * @param {?} route
     * @param {?=} condition
     * @return {?}
     */
    function (route, condition) {
        /** @type {?} */
        var onRtfTabChangeToMe$ = new EventEmitter();
        var curTabId = route.snapshot.queryParams.tabId;
        onRtfTabChange().subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!condition)
                condition = (/**
                 * @param {?} pToTabId
                 * @param {?} pCurTabId
                 * @return {?}
                 */
                function (pToTabId, pCurTabId) { return pToTabId === pCurTabId; });
            if (condition(e.tabId, curTabId)) {
                onRtfTabChangeToMe$.emit(e);
            }
        }));
        return onRtfTabChangeToMe$;
    };
    RtfUtilService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RtfUtilService.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return RtfUtilService;
}());
/** @type {?} */
var onRtfTabChange$ = new EventEmitter();
/** @type {?} */
var funcSwitchEventRegistered = false
/** 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上 */
;
/**
 * 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上
 * @return {?}
 */
function onRtfTabChange() {
    if (!funcSwitchEventRegistered && window[WINDOW_RTF_KEY]) {
        funcSwitchEventRegistered = true;
        window[WINDOW_RTF_KEY].rtf.frmEvent.eventListener('funcSwitchEvent', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            onRtfTabChange$.emit(e);
        }));
    }
    return onRtfTabChange$;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TransPipe = /** @class */ (function () {
    function TransPipe(translate) {
        this.translate = translate;
    }
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    /**
     * @return {?}
     */
    TransPipe.prototype.ngOnDestroy = 
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    TransPipe.prototype.transform = /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    function (query) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a = this.translate, translations = _a.translations, currentLang = _a.currentLang;
        if (translations && translations[currentLang] && translations[currentLang][query]) {
            return translations[currentLang][query];
        }
        return query;
    };
    TransPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'trans',
                },] }
    ];
    /** @nocollapse */
    TransPipe.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return TransPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UtilModule = /** @class */ (function () {
    function UtilModule() {
    }
    UtilModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [UtilComponent, TransPipe],
                    imports: [
                        TranslateModule,
                    ],
                    providers: [
                        RtfUtilService,
                    ],
                    exports: [UtilComponent, TransPipe]
                },] }
    ];
    return UtilModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 通过 ls 中 LS_LOAD_LOCAL_ASSET 标记判断是否加载 localhost/assets。仅用于部件系统开发人员，只能手动修改 ls 中的标记值。
 * @type {?}
 */
var LS_LOAD_LOCAL_ASSET = 'LS_LOAD_LOCAL_ASSET';
/** @type {?} */
var loadLocalAsset = localStorage.getItem(LS_LOAD_LOCAL_ASSET);
/** @type {?} */
var IGIX_HOME_PATH = loadLocalAsset ? "" : "/platform/runtime/sys/web/home/";
/** @type {?} */
var BASE_URL = "/api/runtime/epp/v1.0/";
/**
 * @param {?} node
 * @return {?}
 */
function addBaseUrl(node) {
    Object.keys(node).forEach((/**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (typeof node[key] === 'string') {
            node[key] = BASE_URL + node[key];
        }
        else {
            addBaseUrl(node[key]);
        }
    }));
}
// const DATA_PREFIX = `/jersey`
/**
 * 数据源相关的 base url, 为了防止跟其他的不同. 若相同, 可删掉
 * @type {?}
 */
var DATA_PREFIX = "data";
/** @type {?} */
var FILTERS_WIDGET_NAME = 'filters';
/** @type {?} */
var FILTERS_WIDGET_FILTERS_PROP_NAME = 'filters';
/** @type {?} */
var FILTERS_WIDGET_PROP_NAME = 'change';
/** @type {?} */
var DESIGNER_CONFIG = {
    PAGE_DESIGNER_ID: "Epp-pagedesigner",
    PAGE_RUNTIME_ID: "Epp-pageruntime"
};
/** @type {?} */
var dimensionTypeConfig = {
    text: {
        list: ['STRING', 'TEXT'],
        color: '#2196F3',
        iconName: 'texture'
    },
    number: {
        // TODO: integer
        list: ['SHORT', 'LONG', 'FLOAT', 'DOUBLE', 'DECIMAL', 'INTEGER', 'INTETER'],
        color: '#e91e63',
        iconName: 'device_hub'
    },
    date: {
        list: ['DATETIME'],
        color: '#ff9800',
        iconName: 'access_time'
    },
    byte: {
        list: ['BYTE', 'BYTES'],
        color: '#4caf50',
        iconName: 'texture'
    },
    boolean: {
        list: ['BOOLEAN', 'UNKNOWN'],
        color: '#3f51b5',
        iconName: 'invert_colors'
    },
    unknown: {
        list: ['UNKNOWN'],
        color: '#3f51b5',
        iconName: 'help'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 形如 {key={key=value, key=value}, key={}}
 * 转为 JSON 标准格式
 * @param {?} original
 * @return {?}
 */
function backendString2Json(original) {
    /** @type {?} */
    var result = original.replace(/\s/g, '') // 去空格
    ;
    result = result.replace(/=/g, ':'); // = 变 :
    result = result.replace(/:/g, '\":'); // : 前加 "
    result = result.replace(/,/g, ',\"'); // , 后加 "
    result = result.replace(/{(?=\w)/g, '{\"'); // 后接字母的 { 后加 "
    return result;
}
/**
 * 用列表构造一棵树。
 * @param {?} list
 * @param {?} __1
 * @return {?}
 */
function list2Tree(list, _a) {
    var _b = _a.parentIdKey, parentIdKey = _b === void 0 ? 'parentId' : _b, _c = _a.rootParentIdValue, rootParentIdValue = _c === void 0 ? null : _c, _d = _a.idKey, idKey = _d === void 0 ? 'id' : _d, 
    // leafSelectableOnly = true
    // ignoreLeaf = false
    _e = _a.ifIgnore, 
    // leafSelectableOnly = true
    // ignoreLeaf = false
    ifIgnore = _e === void 0 ? (/**
     * @param {?} node
     * @return {?}
     */
    function (node) { return false; }) : _e, 
    // isLeaf = (node) => false,
    _f = _a.beforeProcess, 
    // isLeaf = (node) => false,
    beforeProcess = _f === void 0 ? null : _f, _g = _a.afterProcess, afterProcess = _g === void 0 ? null : _g;
    /**
     * @param {?} nodes
     * @param {?=} layer
     * @return {?}
     */
    function recurseAddChildren(nodes, layer) {
        if (layer === void 0) { layer = 0; }
        nodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (beforeProcess)
                beforeProcess(node);
            if (!node.layer)
                node.layer = layer;
            node.value = node.key = node[idKey];
            node.label = node.title = node.name;
            /** @type {?} */
            var children = list.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item[parentIdKey] === node[idKey] && !ifIgnore(item); }));
            if (children.length > 0) {
                node.children = children;
                recurseAddChildren(node.children, layer + 1);
            }
            else {
                node.isLeaf = true;
            }
            if (afterProcess)
                afterProcess(node);
        }));
    }
    /** @type {?} */
    var tree = list.filter((/**
     * @param {?} item
     * @return {?}
     */
    function (item) { return !item[parentIdKey] || item[parentIdKey] === rootParentIdValue; }));
    recurseAddChildren(tree);
    return tree;
}
/**
 * @return {?}
 */
function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var r = Math.random() * 16 | 0;
        /** @type {?} */
        var v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    }));
}
/**
 * @param {?} src
 * @return {?}
 */
function appendScript(src) {
    /** @type {?} */
    var body = document.getElementsByTagName('body')[0];
    /** @type {?} */
    var script = document.createElement('script');
    script.src = src;
    body.appendChild(script);
}
/**
 * 加载 css
 * 1. 防重复：如果相同 href 的 link 标签已存在，不会重新加载
 * 2. 同 id 替换：可以替换同 id 的 link 标签
 * @param {?} href
 * @param {?=} eleId
 * @param {?=} allowRepeat
 * @return {?}
 */
function loadCss(href, eleId, allowRepeat) {
    if (allowRepeat === void 0) { allowRepeat = false; }
    // 防重复
    if (!allowRepeat
        && Array.from(document.querySelectorAll('link')).some((/**
         * @param {?} link
         * @return {?}
         */
        function (link) { return link.href === href; })))
        return;
    // 同 id 替换
    if (eleId) {
        /** @type {?} */
        var themeLink = (/** @type {?} */ (document.getElementById(eleId)));
        if (themeLink) {
            themeLink.href = href;
            return;
        }
    }
    /** @type {?} */
    var head = document.getElementsByTagName('head')[0];
    /** @type {?} */
    var style = document.createElement('link');
    if (eleId)
        style.id = eleId;
    style.type = 'text/css';
    style.rel = 'stylesheet';
    style.href = href;
    head.appendChild(style);
}
/**
 * @param {?} obj
 * @return {?}
 */
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
/**
 * 直接改变数组
 * @param {?} arr
 * @param {?} targetLength
 * @param {?} fillItem
 * @return {?}
 */
function setArrayLengthTo(arr, targetLength, fillItem) {
    arr.length = targetLength;
    for (var i = 0; i < arr.length; i++) {
        if (!arr[i])
            arr[i] = deepClone(fillItem);
    }
}
/**
 * @return {?}
 */
function getCurTheme() {
    /** @type {?} */
    var rawThemeKey = localStorage.getItem('gsp_rtf_themesKey')
    // 可能是 default，归一化成 blue
    ;
    // 可能是 default，归一化成 blue
    if (rawThemeKey === 'default' || !rawThemeKey)
        return 'blue';
}
/**
 * 加载
 * 1. 公共 style
 * 2. 公共主题 style
 * @return {?}
 */
function loadCommonStyleNTheme() {
    /** @type {?} */
    var curTheme = getCurTheme()
    // antd 优先级最低
    ;
    // antd 优先级最低
    loadCss(IGIX_HOME_PATH + "xc-antd-" + curTheme + ".css");
    loadCss(IGIX_HOME_PATH + "plain.css");
    loadCss(IGIX_HOME_PATH + "xc-common.css");
    loadCss(IGIX_HOME_PATH + "xc-common-" + curTheme + ".css");
}
/**
 * 两个 obj 是否结构相同、里面的所有字面值相等，及时内部引用
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function objectLiteralEqual(obj1, obj2) {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
}
/** @type {?} */
var curLang = localStorage.getItem('languageCode') || 'zh-CHS';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IgixUtilService = /** @class */ (function () {
    function IgixUtilService() {
    }
    IgixUtilService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ IgixUtilService.ngInjectableDef = defineInjectable({ factory: function IgixUtilService_Factory() { return new IgixUtilService(); }, token: IgixUtilService, providedIn: "root" });
    return IgixUtilService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PORTLET_COLS = 5;
/** @type {?} */
var DEFAULT_PORTLET_ROWS = 4;
/**
 * 部件
 * @abstract
 */
var  /**
 * 部件
 * @abstract
 */
Portlet = /** @class */ (function () {
    function Portlet() {
    }
    /**
     * 唯一标识
     * @param {?} key
     * @return {?}
     */
    Portlet.prototype.getSize = /**
     * 唯一标识
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key === 'rows') {
            return this._getAxisSize('rows') || this._getAxisSize('minRows') || DEFAULT_PORTLET_ROWS;
        }
        else if (key === 'cols') {
            return this._getAxisSize('cols') || this._getAxisSize('minCols') || DEFAULT_PORTLET_COLS;
        }
        else {
            return this._getAxisSize(key);
        }
    };
    return Portlet;
}());
var EppPortlet = /** @class */ (function (_super) {
    __extends(EppPortlet, _super);
    function EppPortlet(widgetId) {
        var _this = _super.call(this) || this;
        _this.widgetId = widgetId;
        _this.name = '未命名部件'; /** 显示标题 */
        /**
         * 显示标题
         */
        _this.i18nName = {};
        _this.propValues = {}; /** 可配置属性的值 */
        /**
         * 可配置属性的值
         */
        _this.dataOption = {};
        /** 所属模块 */
        /**
         * 配置联动时，前端动态增加。只做运行时使用，不应该被保存。
         * null 代表初始状态，[] 代表数据已加载且为空。
         */
        _this.dps = null;
        return _this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    EppPortlet.prototype._getAxisSize = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return (this.size && this.size[key]) || (this.widget.layout && this.widget.layout.grid && this.widget.layout.grid[key]);
    };
    return EppPortlet;
}(Portlet));
/** @type {?} */
var defaultSizeMap = {
    rows: 4,
    cols: 5,
    minCols: 2,
    minRows: 2,
    maxCols: 24,
    maxRows: 24,
};
var BAPortlet = /** @class */ (function (_super) {
    __extends(BAPortlet, _super);
    function BAPortlet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isBA = true;
        return _this;
    }
    // code?: string
    // createTime?: string
    // detail?: number
    // gradeCode?: string
    // isParent?: boolean
    // layer?: number
    // pid?: string
    // tab?: number
    // type?: string
    // updateTime?: string
    // userId?: string
    // code?: string
    // createTime?: string
    // detail?: number
    // gradeCode?: string
    // isParent?: boolean
    // layer?: number
    // pid?: string
    // tab?: number
    // type?: string
    // updateTime?: string
    // userId?: string
    /**
     * @param {?} key
     * @return {?}
     */
    BAPortlet.prototype._getAxisSize = 
    // code?: string
    // createTime?: string
    // detail?: number
    // gradeCode?: string
    // isParent?: boolean
    // layer?: number
    // pid?: string
    // tab?: number
    // type?: string
    // updateTime?: string
    // userId?: string
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return defaultSizeMap[key];
    };
    return BAPortlet;
}(Portlet));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var widgetUrls = {
    GET_BY_ID: "metaportlet/",
    GET_USER_ALL: "metaportlet/all",
    CREATE: "metaportlet/upload",
    EDIT: "metaportlet/editor",
    DELETE: "metaportlet/",
    GET_PORTLET: "portlet/findByMetaId",
};
addBaseUrl(widgetUrls);
/**
 * url 转换:
 * 服务端 url: /su/元部件名/文件路径
 * full url: host/runtime/web/metaportlet/su/元部件名/文件路径
 * @type {?}
 */
var WIDGET_PREFIX = location.origin + "/runtime/web/metaportlet"
/** widget 后端 -> 前端 转换 */
;
/**
 * widget 后端 -> 前端 转换
 * @param {?} widget
 * @return {?}
 */
function convertWidget(widget) {
    widget.href = WIDGET_PREFIX + widget.href;
    widget.logoImgUrl = WIDGET_PREFIX + widget.logoImgUrl;
    widget.previewImgUrl = WIDGET_PREFIX + widget.previewImgUrl;
    widget.baseUrl = WIDGET_PREFIX + widget.baseUrl;
    widget.layout = widget.layout && JSON.parse(backendString2Json(widget.layout));
    return (/** @type {?} */ (widget));
}
var WidgetRepo = /** @class */ (function () {
    function WidgetRepo(http, util) {
        this.http = http;
        this.util = util;
    }
    /**
     * @return {?}
     */
    WidgetRepo.prototype.getWidgets = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(widgetUrls.GET_USER_ALL)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data.map(convertWidget); })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WidgetRepo.prototype.getWidgetById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http
            .get(widgetUrls.GET_BY_ID + id)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return convertWidget(data); })));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    WidgetRepo.prototype.uploadWidget = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return this.util.uploadFile(widgetUrls.CREATE, content);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    WidgetRepo.prototype.editorWidget = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return this.util.uploadFile(widgetUrls.EDIT, content);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WidgetRepo.prototype.deleteWidget = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.delete(widgetUrls.DELETE + id, {});
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WidgetRepo.prototype.findPortletByMeta = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(widgetUrls.GET_PORTLET, {
            params: { id: id }
        });
    };
    WidgetRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WidgetRepo.ctorParameters = function () { return [
        { type: HttpClient },
        { type: UtilService }
    ]; };
    /** @nocollapse */ WidgetRepo.ngInjectableDef = defineInjectable({ factory: function WidgetRepo_Factory() { return new WidgetRepo(inject(HttpClient), inject(UtilService)); }, token: WidgetRepo, providedIn: "root" });
    return WidgetRepo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var portletUrls = {
    GET_BY_ID: "portlet/",
    GET_USER_ALL: "portlet/all",
    SAVE: "portlet/",
    GET_BY_MODULE_ID: "portlet/findByModuleId",
    DELETE_BY_ID: "portlet/",
    GET_PAGE: "page/findByPortletId"
};
/** @type {?} */
var portletOps = {
    SAVE: "portletop/save?portletId=",
    GET_BY_PORTLET_ID: "portletop/getallpagerole?portletId="
};
addBaseUrl(portletUrls);
addBaseUrl(portletOps);
var PortletRepo = /** @class */ (function () {
    function PortletRepo(http) {
        this.http = http;
    }
    /**
     * @param {?} portletId
     * @return {?}
     */
    PortletRepo.prototype.getPageByPortletId = /**
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.get(portletUrls.GET_PAGE, {
            params: { portletId: portletId }
        });
    };
    /**
     * @return {?}
     */
    PortletRepo.prototype.getPortlets = /**
     * @return {?}
     */
    function () {
        return this.http.get(portletUrls.GET_USER_ALL).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        function (portlets) { return portlets.map(convertPortlet); })));
    };
    /**
     * @param {?=} moduleId
     * @return {?}
     */
    PortletRepo.prototype.getPortletsByModuleId = /**
     * @param {?=} moduleId
     * @return {?}
     */
    function (moduleId) {
        return this.http.get(portletUrls.GET_BY_MODULE_ID, { params: moduleId ? { moduleId: moduleId } : null }).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        function (portlets) { return portlets.map(convertPortlet); })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PortletRepo.prototype.getPortletById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        // return this.storage.getPortletById(id)
        return this.http.get(portletUrls.GET_BY_ID + id).pipe(map(convertPortlet));
    };
    /**
     * @param {?} portlet
     * @return {?}
     */
    PortletRepo.prototype.savePortlet = /**
     * @param {?} portlet
     * @return {?}
     */
    function (portlet) {
        /** @type {?} */
        var serverPortlet = convertPortletInverse(portlet);
        return portlet.id
            ? this.http.post(portletUrls.SAVE, serverPortlet)
            : this.http.put(portletUrls.SAVE, serverPortlet);
    };
    /** portlet op */
    /**
     * portlet op
     * @param {?} portletId
     * @return {?}
     */
    PortletRepo.prototype.getPortletOps = /**
     * portlet op
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.get(portletOps.GET_BY_PORTLET_ID + portletId);
    };
    /**
     * @param {?} portletId
     * @param {?} opIds
     * @return {?}
     */
    PortletRepo.prototype.savePortletOps = /**
     * @param {?} portletId
     * @param {?} opIds
     * @return {?}
     */
    function (portletId, opIds) {
        return this.http.post(portletOps.SAVE + portletId, opIds);
    };
    /**
     * @param {?} portletId
     * @return {?}
     */
    PortletRepo.prototype.deletePortletById = /**
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.delete(portletUrls.DELETE_BY_ID + portletId);
    };
    PortletRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PortletRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PortletRepo.ngInjectableDef = defineInjectable({ factory: function PortletRepo_Factory() { return new PortletRepo(inject(HttpClient)); }, token: PortletRepo, providedIn: "root" });
    return PortletRepo;
}());
/**
 * portlet 后端 -> 前端, 前端 -> 后端 转换
 * @param {?} serverPortlet
 * @return {?}
 */
function convertPortlet(serverPortlet) {
    serverPortlet.widget = convertWidget(serverPortlet.widget);
    if (serverPortlet.propValues)
        serverPortlet.propValues = JSON.parse(serverPortlet.propValues);
    return (/** @type {?} */ (Object.assign(new EppPortlet(null), serverPortlet)));
}
/**
 * @param {?} portlet
 * @return {?}
 */
function convertPortletInverse(portlet) {
    /** @type {?} */
    var serverPortlet = __assign({}, portlet);
    delete serverPortlet.widget;
    serverPortlet.propValues = (/** @type {?} */ (JSON.stringify(portlet.propValues)));
    return serverPortlet;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// declare var CryptoJS
/** @type {?} */
var AES_SECRET_KEY;
/** @type {?} */
var CRYPTO_CFG;
try {
    AES_SECRET_KEY = CryptoJS.enc.Utf8.parse('1234567890123456');
    CRYPTO_CFG = {
        iv: CryptoJS.enc.Utf8.parse('0000000000000000'),
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
    };
}
catch (error) {
}
/**
 * @param {?} message
 * @return {?}
 */
function encrypt(message) {
    /** @type {?} */
    var msg = CryptoJS.enc.Utf8.parse(message);
    return CryptoJS.AES.encrypt(msg, AES_SECRET_KEY, CRYPTO_CFG).toString();
}
/**
 * @param {?} encryptedMsg
 * @return {?}
 */
function decrypt(encryptedMsg) {
    return CryptoJS.AES.decrypt(encryptedMsg, AES_SECRET_KEY, CRYPTO_CFG).toString(CryptoJS.enc.Utf8);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO: 数据源相关的，要放在 dashboard core 中吗
var  
// TODO: 数据源相关的，要放在 dashboard core 中吗
Datasrc = /** @class */ (function () {
    function Datasrc(providerName) {
        this.providerName = providerName;
        this.i18nName = {};
        this.config = {};
    }
    return Datasrc;
}());
/**
 * 取数参数
 */
var  /**
 * 取数参数
 */
DataParam = /** @class */ (function () {
    function DataParam() {
        this.type = 'QUERY_PARAM';
        this.default = null;
    }
    /**
     * @param {?} dp
     * @return {?}
     */
    DataParam.ToDto = /**
     * @param {?} dp
     * @return {?}
     */
    function (dp) {
        var i18nName = dp.i18nName, type = dp.type, config = dp.config, id = dp.id;
        return (/** @type {?} */ ({
            id: id, i18nName: i18nName, config: config,
            type: camelCase(type),
            value: dp.default,
        }));
    };
    /**
     * @param {?} dpDto
     * @return {?}
     */
    DataParam.FromDto = /**
     * @param {?} dpDto
     * @return {?}
     */
    function (dpDto) {
        return (/** @type {?} */ ({
            id: dpDto.id,
            i18nName: dpDto.i18nName,
            type: constantCase(dpDto.type),
            config: dpDto.config,
            datasetId: dpDto.datasetId,
            name: dpDto.name,
            default: dpDto.value,
        }));
    };
    return DataParam;
}());
var DatasetParameter = /** @class */ (function () {
    function DatasetParameter(name, value, sortNo, isExpression) {
        if (isExpression === void 0) { isExpression = true; }
        this.name = name;
        this.value = value;
        this.sortNo = sortNo;
        this.isExpression = isExpression;
    }
    return DatasetParameter;
}());
var Dataset = /** @class */ (function () {
    function Dataset() {
        // datasrc?: Datasrc
        this.config = {};
        this.cols = {
            dimensions: [],
            measures: [],
        };
        this.dataParams = [];
    }
    /**
     * @return {?}
     */
    Dataset.create = /**
     * @return {?}
     */
    function () {
        return new Dataset();
    };
    /**
     * @param {?} dataset
     * @return {?}
     */
    Dataset.toDto = /**
     * @param {?} dataset
     * @return {?}
     */
    function (dataset) {
        var id = dataset.id, name = dataset.name, datasrcId = dataset.datasrcId, datasrcName = dataset.datasrcName, cols = dataset.cols, creationTime = dataset.creationTime, config = dataset.config, dataParams = dataset.dataParams, i18nName = dataset.i18nName;
        return {
            id: id, name: name, creationTime: creationTime, i18nName: i18nName,
            datasourceId: datasrcId,
            datasourceName: datasrcName,
            dimensions: cols.dimensions,
            config: encrypt(JSON.stringify(config)),
            dataParamDto: dataParams.map(DataParam.ToDto)
        };
    };
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    Dataset.fromDto = /**
     * @param {?} datasetDto
     * @return {?}
     */
    function (datasetDto) {
        var id = datasetDto.id, name = datasetDto.name, datasourceId = datasetDto.datasourceId, datasourceName = datasetDto.datasourceName, dimensions = datasetDto.dimensions, creationTime = datasetDto.creationTime, method = datasetDto.method, parameters = datasetDto.parameters, i18nName = datasetDto.i18nName, config = datasetDto.config, dataParamDto = datasetDto.dataParamDto;
        /** @type {?} */
        var parsedConfig = null;
        try {
            parsedConfig = JSON.parse(decrypt(config));
        }
        catch (error) {
        }
        if (!parsedConfig)
            parsedConfig = {};
        return {
            // ...datasetDto,
            id: id, name: name, creationTime: creationTime, i18nName: i18nName,
            datasrcId: datasourceId,
            datasrcName: datasourceName,
            cols: { dimensions: dimensions },
            config: parsedConfig,
            dataParams: dataParamDto ? dataParamDto.map(DataParam.FromDto) : [],
        };
    };
    return Dataset;
}());
var Dimension = /** @class */ (function () {
    function Dimension() {
    }
    return Dimension;
}());
/** @enum {string} */
var ComputedType = {
    Count: 'Count',
    Sum: 'Sum',
    Max: 'Max',
    Min: 'Min',
    Avg: 'Avg',
    Expression: 'Expression',
};
/** @enum {string} */
var AggType = {
    Table: 'Table',
    CroosTable: 'CroosTable',
};
var ComputedCol = /** @class */ (function (_super) {
    __extends(ComputedCol, _super);
    function ComputedCol(expression) {
        var _this = _super.call(this) || this;
        _this.expression = expression;
        _this.computeType = ComputedType.Expression;
        return _this;
    }
    return ComputedCol;
}(Dimension));
var Agg = /** @class */ (function () {
    function Agg() {
        this.cols = [];
        this.rows = [];
        this.filters = [];
        this.computedCols = [];
    }
    /**
     * @param {?} agg
     * @return {?}
     */
    Agg.toDto = /**
     * @param {?} agg
     * @return {?}
     */
    function (agg) {
        var id = agg.id, datasetId = agg.datasetId, resource = agg.resource, resourceId = agg.resourceId, aggType = agg.aggType, cols = agg.cols, rows = agg.rows, filters = agg.filters, computedCols = agg.computedCols;
        return (/** @type {?} */ ({
            id: id,
            dataSetId: datasetId,
            resource: resource,
            resourceId: resourceId,
            aggregationType: aggType,
            columnConfigs: cols,
            rowConfigs: rows,
            filterConfigs: filters,
            computedExpressionConfigs: computedCols
        }));
    };
    /**
     * @param {?} aggDto
     * @return {?}
     */
    Agg.fromDto = /**
     * @param {?} aggDto
     * @return {?}
     */
    function (aggDto) {
        var id = aggDto.id, dataSetId = aggDto.dataSetId, dataSetName = aggDto.dataSetName, resource = aggDto.resource, resourceId = aggDto.resourceId, aggregationType = aggDto.aggregationType, columnConfigs = aggDto.columnConfigs, rowConfigs = aggDto.rowConfigs, filterConfigs = aggDto.filterConfigs, computedExpressionConfigs = aggDto.computedExpressionConfigs;
        return (/** @type {?} */ ({
            id: id,
            datasetId: dataSetId,
            datasetName: dataSetName,
            resource: resource,
            resourceId: resourceId,
            aggType: aggregationType,
            cols: columnConfigs,
            rows: rowConfigs,
            filters: filterConfigs,
            computedCols: computedExpressionConfigs
        }));
    };
    return Agg;
}());
/** @enum {string} */
var AggregationResultSetType = {
    Table: 'Table',
    CroosTable: 'CroosTable',
};
/**
 * 获取数据时传服务端的 dp + value
 */
var  /**
 * 获取数据时传服务端的 dp + value
 */
DpValue = /** @class */ (function () {
    function DpValue() {
    }
    /**
     * @param {?} dpValue
     * @return {?}
     */
    DpValue.toDto = /**
     * @param {?} dpValue
     * @return {?}
     */
    function (dpValue) {
        return (/** @type {?} */ ({
            dataParamId: dpValue.dpId,
            value: dpValue.value
        }));
    };
    return DpValue;
}());
var Indicator = /** @class */ (function () {
    function Indicator() {
        this.aggFn = 4;
    }
    return Indicator;
}());
var RuntimeAggOption = /** @class */ (function () {
    function RuntimeAggOption() {
        this.dimensions = [];
        this.indicators = [new Indicator()];
    }
    /**
     * @param {?} runtimeAgg
     * @return {?}
     */
    RuntimeAggOption.toDto = /**
     * @param {?} runtimeAgg
     * @return {?}
     */
    function (runtimeAgg) {
        if (!runtimeAgg)
            return;
        return (/** @type {?} */ ({
            dimensions: runtimeAgg.dimensions,
            indicators: runtimeAgg.indicators.map((/**
             * @param {?} ind
             * @return {?}
             */
            function (ind) { return ({
                type: ind.aggFn,
                name: ind.dimName
            }); }))
        }));
    };
    return RuntimeAggOption;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var datasetUrls = {
    GET_BY_ID: DATA_PREFIX + "/DataSetService/find/",
    CREATE: DATA_PREFIX + "/DataSetService/create",
    IMPORT_QO: DATA_PREFIX + "/DataSetService/importQO",
    DELETE: DATA_PREFIX + "/DataSetService/delete",
    GET_ALL: DATA_PREFIX + "/DataSetService/findAll",
    // 500
    GET_RAW_DIMS_BY_DATASET: DATA_PREFIX + "/DataResultSetService/tryGetDimensions",
    GET_RAW_DATA_BY_DATASET: DATA_PREFIX + "/DataResultSetService/getResultSet",
    UPDATE: DATA_PREFIX + "/DataSetService/update",
};
/** @type {?} */
var aggUrls = {
    SAVE: DATA_PREFIX + "/DataSetService/saveAggConfig",
    GET_BY_RESOURCE: DATA_PREFIX + "/DataSetService/findAggConfigByResource",
};
/** @type {?} */
var dataResultSetUrls = {
    GET_BY_AGG_ID: DATA_PREFIX + "/DataResultSetService/getAggResultSet/{aggId}",
    // ?
    GET_BY_AGG: DATA_PREFIX + "/DataResultSetService/getAggResultSetForTest",
    GET_BY_DATASET: DATA_PREFIX + "/DataResultSetService/getResultSet",
    // 原始数据，用不到
    GET_BY_RESOURCE: DATA_PREFIX + "/DataResultSetService/getResultSetByResource",
};
addBaseUrl(datasetUrls);
addBaseUrl(aggUrls);
addBaseUrl(dataResultSetUrls);
var DatasetRepo = /** @class */ (function () {
    function DatasetRepo(http) {
        this.http = http;
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    DatasetRepo.prototype.getRawDimsByDataset = /**
     * @param {?} datasetDto
     * @return {?}
     */
    function (datasetDto) {
        return this.http
            .post(datasetUrls.GET_RAW_DIMS_BY_DATASET, datasetDto);
    };
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    DatasetRepo.prototype.getRawColsNDataByDataset = /**
     * @param {?} datasetDto
     * @return {?}
     */
    function (datasetDto) {
        return this.http
            .post(datasetUrls.GET_RAW_DATA_BY_DATASET, datasetDto);
    };
    /**
     * @return {?}
     */
    DatasetRepo.prototype.getDatasets = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(datasetUrls.GET_ALL)
            .pipe(map((/**
         * @param {?} datasetDtos
         * @return {?}
         */
        function (datasetDtos) { return datasetDtos.map(Dataset.fromDto); })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatasetRepo.prototype.getDatasetById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http
            .get(datasetUrls.GET_BY_ID + id)
            .pipe(map(Dataset.fromDto));
    };
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    DatasetRepo.prototype.saveDataset = /**
     * @param {?} datasetDto
     * @return {?}
     */
    function (datasetDto) {
        return this.http.post(datasetDto.id ? datasetUrls.UPDATE : datasetUrls.CREATE, 
        // Dataset.toDto(dataset)
        datasetDto).pipe(map(Dataset.fromDto));
        // TODO:
        // , this.success()
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    DatasetRepo.prototype.importQO = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.http.post(datasetUrls.IMPORT_QO, ids);
    };
    /**
     * @param {?} datasetId
     * @return {?}
     */
    DatasetRepo.prototype.deleteDataset = /**
     * @param {?} datasetId
     * @return {?}
     */
    function (datasetId) {
        return this.http
            .post(datasetUrls.DELETE, null, { params: { id: datasetId } });
        // TODO:
        // .pipe(this.success())
    };
    /** agg */
    /**
     * agg
     * @param {?} portletId
     * @return {?}
     */
    DatasetRepo.prototype.getAggByPortletId = /**
     * agg
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.get(aggUrls.GET_BY_RESOURCE, {
            params: {
                resource: 'portlet',
                resourceId: portletId
            }
        }).pipe(map(Agg.fromDto));
    };
    /**
     * @param {?} agg
     * @return {?}
     */
    DatasetRepo.prototype.saveAgg = /**
     * @param {?} agg
     * @return {?}
     */
    function (agg) {
        return this.http
            .post(aggUrls.SAVE, Agg.toDto(agg));
    };
    /** result */
    /**
     * result
     * @param {?} agg
     * @param {?=} dpValues
     * @param {?=} runtimeAgg
     * @return {?}
     */
    DatasetRepo.prototype.getAggResultByAgg = /**
     * result
     * @param {?} agg
     * @param {?=} dpValues
     * @param {?=} runtimeAgg
     * @return {?}
     */
    function (agg, dpValues, runtimeAgg) {
        if (dpValues === void 0) { dpValues = []; }
        /** @type {?} */
        var body = {
            aggDataDto: Agg.toDto(agg),
            aggregation: RuntimeAggOption.toDto(runtimeAgg)
        }
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        ;
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        if (dpValues && dpValues.length > 0)
            body.dataParam = dpValues.map(DpValue.toDto);
        return this.http.post(dataResultSetUrls.GET_BY_AGG, body);
    };
    /**
     * @param {?} portletId
     * @param {?=} dpValues
     * @param {?=} filter
     * @param {?=} runtimeAgg
     * @return {?}
     */
    DatasetRepo.prototype.getResultByPortletId = /**
     * @param {?} portletId
     * @param {?=} dpValues
     * @param {?=} filter
     * @param {?=} runtimeAgg
     * @return {?}
     */
    function (portletId, dpValues, filter, runtimeAgg) {
        if (dpValues === void 0) { dpValues = []; }
        if (filter === void 0) { filter = '""'; }
        /** @type {?} */
        var body = {
            filter: filter,
            aggregation: RuntimeAggOption.toDto(runtimeAgg)
        }
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        ;
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        if (dpValues && dpValues.length > 0)
            body.dataParam = dpValues.map(DpValue.toDto);
        return this.http.post(dataResultSetUrls.GET_BY_RESOURCE, body, {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            params: {
                resourceType: 'portlet',
                resourceId: portletId
            }
        });
    };
    DatasetRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DatasetRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ DatasetRepo.ngInjectableDef = defineInjectable({ factory: function DatasetRepo_Factory() { return new DatasetRepo(inject(HttpClient)); }, token: DatasetRepo, providedIn: "root" });
    return DatasetRepo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var datasrcUrls = {
    GET_BY_ID: DATA_PREFIX + "/DatasourceService/find/",
    // ?
    CREATE: DATA_PREFIX + "/DatasourceService/create",
    // 500
    DELETE: DATA_PREFIX + "/DatasourceService/delete",
    // ?
    GET_ALL: DATA_PREFIX + "/DatasourceService/findAll",
    // 500
    UPDATE: DATA_PREFIX + "/DatasourceService/update",
    // ?
    TRY: DATA_PREFIX + "/DatasourceService/try",
    GET_PARAMS_BY_PROVIDER_NAME: DATA_PREFIX + "/DataService/getDatasourceParameters/",
    GET_ALL_PROVIDERS: DATA_PREFIX + "/DataService/getProvicerNames",
};
addBaseUrl(datasrcUrls);
var DatasrcRepo = /** @class */ (function () {
    function DatasrcRepo(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    DatasrcRepo.prototype.getDatasrcList = /**
     * @return {?}
     */
    function () {
        return this.http.post(datasrcUrls.GET_ALL, null);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatasrcRepo.prototype.getDatasrcById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http
            .get(datasrcUrls.GET_BY_ID + id);
    };
    /**
     * @param {?} datasrc
     * @return {?}
     */
    DatasrcRepo.prototype.saveDatasrc = /**
     * @param {?} datasrc
     * @return {?}
     */
    function (datasrc) {
        if (datasrc.id) {
            return this.http.post(datasrcUrls.UPDATE, datasrc);
            // TODO: 移走
            // .pipe(this.success())
        }
        else {
            return this.http.post(datasrcUrls.CREATE, datasrc);
            // TODO: 移走
            // .pipe(this.success())
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatasrcRepo.prototype.deleteDatasrc = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.post(datasrcUrls.DELETE, null, {
            params: { id: id }
        });
        // TODO: 移走
        // .pipe(this.success())
    };
    /**
     * @param {?} datasrc
     * @return {?}
     */
    DatasrcRepo.prototype.tryDatasrc = /**
     * @param {?} datasrc
     * @return {?}
     */
    function (datasrc) {
        return this.http.post(datasrcUrls.TRY, datasrc, { responseType: 'text' });
        // TODO: 移走
        // .pipe(tap(
        //   () => this.nzMsg.success('测试成功！'),
        //   () => this.nzMsg.error('测试失败！')
        // ))
    };
    /**
     * @return {?}
     */
    DatasrcRepo.prototype.getProviders = /**
     * @return {?}
     */
    function () {
        return this.http.get(datasrcUrls.GET_ALL_PROVIDERS);
    };
    /**
     * @param {?} providerName
     * @return {?}
     */
    DatasrcRepo.prototype.getParamsByProviderName = /**
     * @param {?} providerName
     * @return {?}
     */
    function (providerName) {
        return this.http.get(datasrcUrls.GET_PARAMS_BY_PROVIDER_NAME + providerName);
    };
    DatasrcRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DatasrcRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ DatasrcRepo.ngInjectableDef = defineInjectable({ factory: function DatasrcRepo_Factory() { return new DatasrcRepo(inject(HttpClient)); }, token: DatasrcRepo, providedIn: "root" });
    return DatasrcRepo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 支持的语言
 */
var  /**
 * 支持的语言
 */
Lang = /** @class */ (function () {
    function Lang(code, name) {
        this.code = code;
        this.name = name;
    }
    return Lang;
}());
var I18nValue = /** @class */ (function () {
    function I18nValue() {
    }
    return I18nValue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var igixUrls = {
    bo: {
        GET_ALL: "/api/dev/main/v1.0/business-objects"
    },
    funcOperations: {
        GET_BY_BO_ID: "/api/runtime/sys/v1.0/funcOperations/business/"
    },
    roleGroup: {
        GET_ALL: "/api/runtime/sys/v1.0/rolegroups/all"
    },
    role: {
        GET: "/api/runtime/sys/v1.0/roles",
    },
    userInfo: {
        // igix 的 userInfo 里有头像
        GET: "/api/runtime/sys/v1.0/userinfos?infoType=user"
        // GET: `http://dscloud.chec.bj.cn/api/runime/sys/v1.0/userinfos/setting`
    },
    func: {
        /**
         * 包含了所有菜单、联查，体积大、加载较慢
         */
        GET_ALL_WITH_INVOKE: "/api/runtime/sys/v1.0/functions/allFuncs",
        /**
         * 这个是 iGIX 我的应用中的菜单、功能组列表，数据量稍小，性能较好
         */
        GET_ALL: "/api/runtime/sys/v1.0/functions/funcGroups?funcType=4"
    },
    langs: {
        GET_ALL: "/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage"
    },
    qoDataset: {
        // GET_BO_TREE: `/api/gsp/bcc/v1.0/botreefornavvo/extension/query`,
        GET_ECP_BIZ_TREE: "/api/gsp/bcc/v1.0/ecpbiztree/extension/query",
        GET_DETAIL_BY_ID: "/api/gsp/bcc/v1.0/datasetdetail_frm/extension/retrieve/",
        GET_DETAIL_QUERY: "/api/gsp/bcc/v1.0/datasetdetail_frm/extension/query"
    },
    ba: {
        // GET_ALL_PORTLETS: `/api/ba/bap/v1.0/category/getCloudCategoryList?type=widget`,
        GET_ALL_PORTLETS: "/api/ba/bap/v1.0/widget/getCloudWidgetList?allWidgetList=true",
    }
    // TODO: su http://10.24.20.77:5200/api/dev/main/v1.0/business-objects/
    // http://localhost:5000/api/dev/main/v1.0/business-object-trees
};
var IgixRepo = /** @class */ (function () {
    function IgixRepo(http) {
        this.http = http;
    }
    /**
     * @param {?=} layer
     * @return {?}
     */
    IgixRepo.prototype.getBOTree = /**
     * @param {?=} layer
     * @return {?}
     */
    function (layer) {
        if (layer === void 0) { layer = Infinity; }
        return this.http.get(igixUrls.bo.GET_ALL).pipe(map((/**
         * @param {?} boList
         * @return {?}
         */
        function (boList) {
            return list2Tree(boList, {
                parentIdKey: 'parentID',
                ifIgnore: (/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.layer > layer; })
            });
        })));
    };
    /**
     * @param {?} boId
     * @return {?}
     */
    IgixRepo.prototype.getOpsByBOId = /**
     * @param {?} boId
     * @return {?}
     */
    function (boId) {
        return this.http.get(igixUrls.funcOperations.GET_BY_BO_ID + boId);
    };
    /** role, role group */
    /**
     * role, role group
     * @return {?}
     */
    IgixRepo.prototype.getRoleGroupTree = /**
     * role, role group
     * @return {?}
     */
    function () {
        return this.http.get(igixUrls.roleGroup.GET_ALL).pipe(map((/**
         * @param {?} roleGroups
         * @return {?}
         */
        function (roleGroups) {
            return list2Tree(roleGroups, {});
        })));
    };
    /**
     * @param {?} groupId
     * @return {?}
     */
    IgixRepo.prototype.getRolesByRoleGroupId = /**
     * @param {?} groupId
     * @return {?}
     */
    function (groupId) {
        return this.http.get(igixUrls.role.GET, {
            params: {
                param: JSON.stringify({ groupId: groupId })
            }
        }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.data; })));
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getAllRoles = /**
     * @return {?}
     */
    function () {
        return this.http.get(igixUrls.role.GET).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.data; })));
    };
    /** 获取部件列表需要的二级 bo tree */
    /**
     * 获取部件列表需要的二级 bo tree
     * @return {?}
     */
    IgixRepo.prototype.getFuncTree12 = /**
     * 获取部件列表需要的二级 bo tree
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.funcTree12)
            return of(this.funcTree12);
        return this.getAllFuncs()
            .pipe(map((/**
         * @param {?} funcs
         * @return {?}
         */
        function (funcs) {
            funcs = funcs.filter((/**
             * @param {?} func
             * @return {?}
             */
            function (func) { return parseInt(func.layer) < 3; }));
            _this.funcTree12 = list2Tree(funcs, {
                rootParentIdValue: '0',
                parentIdKey: 'parentId',
            });
            return _this.funcTree12;
        })));
    };
    /**
     * @param {?} moduleId
     * @return {?}
     */
    IgixRepo.prototype.getQoDatasetDetailsByModuleId = /**
     * @param {?} moduleId
     * @return {?}
     */
    function (moduleId) {
        return this.http.put(igixUrls.qoDataset.GET_DETAIL_QUERY, {}, {
            params: {
                entityFilter: JSON.stringify({
                    FilterConditions: [{
                            FilterField: 'moduleID',
                            Compare: 0,
                            Value: moduleId,
                            Relation: 0
                        }],
                    SortConditions: [],
                    IsUsePagination: true,
                    Pagination: {
                        PageIndex: 1,
                        PageSize: 20,
                        // TODO:
                        PageCount: 0,
                        TotalCount: 0
                    }
                })
            }
            // }, null).pipe(map(res => res.returnValue))
        }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.returnValue.result; })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgixRepo.prototype.getQoDatasetDetailById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.put(igixUrls.qoDataset.GET_DETAIL_BY_ID + id, {}).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.returnValue; })));
    };
    /**
     * @param {?=} reload
     * @return {?}
     */
    IgixRepo.prototype.getUserInfo = /**
     * @param {?=} reload
     * @return {?}
     */
    function (reload) {
        if (reload === void 0) { reload = false; }
        if (reload)
            this.userInfoPromise = null;
        if (!this.userInfoPromise)
            this.userInfoPromise = this.http
                .get(igixUrls.userInfo.GET)
                .toPromise();
        return from(this.userInfoPromise);
    };
    /**
     * @param {?=} reload
     * @return {?}
     */
    IgixRepo.prototype.getUserAvatar = /**
     * @param {?=} reload
     * @return {?}
     */
    function (reload) {
        if (reload === void 0) { reload = false; }
        return this.getUserInfo(reload).pipe(map((/**
         * @param {?} userInfo
         * @return {?}
         */
        function (userInfo) {
            if (userInfo && userInfo.userSetting && userInfo.userSetting.imgblob)
                return userInfo.userSetting.imgblob;
            return null;
        })));
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getAllFuncs = /**
     * @return {?}
     */
    function () {
        return this.http.get(igixUrls.func.GET_ALL);
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getBAPortletsAll = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(igixUrls.ba.GET_ALL_PORTLETS).pipe(
        // map(res => JSON.parse(res)),
        map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.data
            // .filter(p => p.tab === 1)
            .map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return Object.assign(new BAPortlet(), p); })); })));
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getLangs = /**
     * @return {?}
     */
    function () {
        if (!this.getLangsPromise)
            this.getLangsPromise = this.http
                .get(igixUrls.langs.GET_ALL)
                .pipe(map((/**
             * @param {?} rtfLangs
             * @return {?}
             */
            function (rtfLangs) { return rtfLangs.map((/**
             * @param {?} rtfLang
             * @return {?}
             */
            function (rtfLang) { return new Lang(rtfLang.code, rtfLang.name); })); })))
                .toPromise();
        return this.getLangsPromise;
    };
    IgixRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IgixRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ IgixRepo.ngInjectableDef = defineInjectable({ factory: function IgixRepo_Factory() { return new IgixRepo(inject(HttpClient)); }, token: IgixRepo, providedIn: "root" });
    return IgixRepo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段转换器
 * 为了解决前端 - 服务端某些字段不一致，在读取、保存端动态转换
 */
/**
 * 映射表
 * 后端名：前端名
 * @type {?}
 */
var fieldMapping = {
    pageInfo: {
        title: 'name',
    },
    portlet: {},
    widget: {}
}
/** 反向映射表，自动把上面的正向表反过来 */
;
var ɵ0 = /**
 * @return {?}
 */
function () {
    /** @type {?} */
    var resultMapping = {};
    Object.keys(fieldMapping).forEach((/**
     * @param {?} entityType
     * @return {?}
     */
    function (entityType) {
        resultMapping[entityType] = {};
        Object.keys(fieldMapping[entityType]).forEach((/**
         * @param {?} originKey
         * @return {?}
         */
        function (originKey) {
            resultMapping[entityType][fieldMapping[entityType][originKey]] = originKey;
        }));
    }));
    return resultMapping;
};
/**
 * 反向映射表，自动把上面的正向表反过来
 * @type {?}
 */
var fieldMappingInverse = ((ɵ0))()
/**
 * 接受原对象，转换出新对象
 * @param originEntity 待转换原对象
 * @param entityType 对象类型，应为 fieldMapping 的属性名
 * @param inverse 是否反向转换（默认为后端 -> 前端）
 */
;
/**
 * 接受原对象，转换出新对象
 * @template T
 * @param {?} originEntity 待转换原对象
 * @param {?} entityType 对象类型，应为 fieldMapping 的属性名
 * @param {?=} inverse 是否反向转换（默认为后端 -> 前端）
 * @return {?}
 */
function mapEntityFeilds(originEntity, entityType, inverse) {
    if (inverse === void 0) { inverse = false; }
    /** @type {?} */
    var mapping = inverse ? fieldMappingInverse : fieldMapping;
    /** @type {?} */
    var mappedEntity = {};
    Object.keys(originEntity).forEach((/**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (mapping[entityType].hasOwnProperty(key)) {
            mappedEntity[mapping[entityType][key]] = originEntity[key];
        }
        else {
            mappedEntity[key] = originEntity[key];
        }
    }));
    return (/** @type {?} */ (mappedEntity));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var pageInfoUrls = {
    GET_BY_ID_MANAGE: "page/",
    GET_BY_ID_PERSONAL: "page/pageofuser?pageId=",
    GET_ALL_MANAGE: "page/all/mg",
    GET_ALL_PERSONAL: "page/pagelistofuser",
    GET_BY_ROLE: "pagerole/pagesbyrole?roleId=",
    GET_PAGES_WITH_ROLE: "pagerole/all",
    SET_TO_ROLE_DEFAULT: "pagerole/settingrolepageenable",
    // roleId pageId
    DELETE: "page/",
    // delete + id
    DELETE_MANAGE: "page/delete/mg",
    // post []
    ADD: "page",
    ADD_MANAGE: "page/add/mg",
    UPDATE: "page",
    UPDATE_MANAGE: "page/update/mg",
    COPY: "page/copy",
    COPY_MANAGE: "page/copy/mg",
    RESET_PAGE: "page/resetsyspage?pageId=",
    SELECT_PAGE: "page/changepageselect?pageId=",
};
/** @type {?} */
var pageRoles = {
    SAVE: "pagerole/save?pageId=",
    GET_BY_PAGE_ID: "pagerole/getallpagerole?pageId=",
};
addBaseUrl(pageInfoUrls);
addBaseUrl(pageRoles);
var PageRepo = /** @class */ (function () {
    function PageRepo(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    PageRepo.prototype.getPagesManage = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(pageInfoUrls.GET_ALL_MANAGE)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data.map(convertPageInfo); })));
    };
    /**
     * @return {?}
     */
    PageRepo.prototype.getPagesUser = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(pageInfoUrls.GET_ALL_PERSONAL);
    };
    /**
     * @param {?} roleId
     * @return {?}
     */
    PageRepo.prototype.getPagesByRole = /**
     * @param {?} roleId
     * @return {?}
     */
    function (roleId) {
        return this.http
            .get(pageInfoUrls.GET_BY_ROLE + roleId);
    };
    /**
     * @return {?}
     */
    PageRepo.prototype.getPagesWithRole = /**
     * @return {?}
     */
    function () {
        return this.http.get(pageInfoUrls.GET_PAGES_WITH_ROLE);
    };
    /**
     * @param {?} roleId
     * @param {?} pageId
     * @return {?}
     */
    PageRepo.prototype.setRoleDefaultPage = /**
     * @param {?} roleId
     * @param {?} pageId
     * @return {?}
     */
    function (roleId, pageId) {
        return this.http
            .post(pageInfoUrls.SET_TO_ROLE_DEFAULT, null, {
            params: { pageId: pageId, roleId: roleId }
        }).pipe(this.success());
    };
    /**
     * @param {?} id
     * @param {?=} isManage
     * @return {?}
     */
    PageRepo.prototype.getPageInfoById = /**
     * @param {?} id
     * @param {?=} isManage
     * @return {?}
     */
    function (id, isManage) {
        if (isManage === void 0) { isManage = false; }
        return this.http
            .get((isManage
            ? pageInfoUrls.GET_BY_ID_MANAGE
            : pageInfoUrls.GET_BY_ID_PERSONAL)
            + id)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return convertPageInfo(data); })));
    };
    /**
     * @param {?} pageInfo
     * @param {?=} isManage
     * @return {?}
     */
    PageRepo.prototype.savePageInfo = /**
     * @param {?} pageInfo
     * @param {?=} isManage
     * @return {?}
     */
    function (pageInfo, isManage) {
        if (isManage === void 0) { isManage = false; }
        return pageInfo.id
            ? this.http.post(isManage ? pageInfoUrls.UPDATE_MANAGE : pageInfoUrls.UPDATE, convertPageInfoInverse(pageInfo)).pipe(this.success())
            : this.http.put(isManage ? pageInfoUrls.ADD_MANAGE : pageInfoUrls.ADD, convertPageInfoInverse(pageInfo)).pipe(this.success());
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PageRepo.prototype.deletePageInfo = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http
            .delete(pageInfoUrls.DELETE + id, { responseType: 'text' })
            .pipe(this.success());
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    PageRepo.prototype.deletePageInfoManage = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.http
            .post(pageInfoUrls.DELETE_MANAGE, ids)
            .pipe(this.success());
    };
    /**
     * @param {?} ids
     * @param {?=} isManage
     * @return {?}
     */
    PageRepo.prototype.copyPageInfo = /**
     * @param {?} ids
     * @param {?=} isManage
     * @return {?}
     */
    function (ids, isManage) {
        if (isManage === void 0) { isManage = false; }
        return this.http
            .post(isManage ? pageInfoUrls.COPY_MANAGE : pageInfoUrls.COPY, ids, { responseType: 'text' });
    };
    /**
     * @param {?} pageId
     * @return {?}
     */
    PageRepo.prototype.resetPage = /**
     * @param {?} pageId
     * @return {?}
     */
    function (pageId) {
        return this.http.post(pageInfoUrls.RESET_PAGE + pageId, null);
    };
    /**
     * @param {?} pageId
     * @return {?}
     */
    PageRepo.prototype.selectPage = /**
     * @param {?} pageId
     * @return {?}
     */
    function (pageId) {
        return this.http.post(pageInfoUrls.SELECT_PAGE + pageId, null);
    };
    // TODO: 不该在这依赖 nzmsg，应移到使用处
    // TODO: 不该在这依赖 nzmsg，应移到使用处
    /**
     * @private
     * @return {?}
     */
    PageRepo.prototype.success = 
    // TODO: 不该在这依赖 nzmsg，应移到使用处
    /**
     * @private
     * @return {?}
     */
    function () {
        return tap((/**
         * @return {?}
         */
        function () {
            // this.nzMsg.success(`操作成功！`, { nzDuration: 1000 })
        }));
    };
    /** page roles */
    /**
     * page roles
     * @param {?} pageId
     * @param {?} roleIds
     * @return {?}
     */
    PageRepo.prototype.savePageRoles = /**
     * page roles
     * @param {?} pageId
     * @param {?} roleIds
     * @return {?}
     */
    function (pageId, roleIds) {
        return this.http.post(pageRoles.SAVE + pageId, roleIds);
    };
    /**
     * @param {?} pageId
     * @return {?}
     */
    PageRepo.prototype.getPageRoles = /**
     * @param {?} pageId
     * @return {?}
     */
    function (pageId) {
        return this.http.get(pageRoles.GET_BY_PAGE_ID + pageId);
    };
    PageRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PageRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PageRepo.ngInjectableDef = defineInjectable({ factory: function PageRepo_Factory() { return new PageRepo(inject(HttpClient)); }, token: PageRepo, providedIn: "root" });
    return PageRepo;
}());
/**
 * pageInfo 后端 -> 前端, 前端 -> 后端 转换
 * @param {?} original
 * @return {?}
 */
function convertPageInfo(original) {
    /** @type {?} */
    var result = mapEntityFeilds(original, 'pageInfo');
    result.config = JSON.parse((/** @type {?} */ (result.config)));
    return result;
}
/**
 * @param {?} pageInfo
 * @return {?}
 */
function convertPageInfoInverse(pageInfo) {
    /** @type {?} */
    var result = mapEntityFeilds(pageInfo, 'pageInfo', true)
    // 保存时，删除 pageInfo.config.layout 的元素的 portlet
    ;
    // 保存时，删除 pageInfo.config.layout 的元素的 portlet
    result.config.layout = result.config.layout.map((/**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var instanceId = item.instanceId, isBAPortlet = item.isBAPortlet, gridsterItem = item.gridsterItem, portletId = item.portletId, link = item.link;
        return { instanceId: instanceId, isBAPortlet: isBAPortlet, gridsterItem: gridsterItem, portletId: portletId, link: link };
    }));
    result.config = JSON.stringify(result.config);
    return result;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var FuncType = {
    Products: '1',
    Module: '2',
    AppGroups: '3',
    App: '4',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 页面的保存结构
 */
var  /**
 * 页面的保存结构
 */
PageInfo = /** @class */ (function () {
    // TODO: 希望“页面管理”里，服务端返回的列表中的 page 加上当前页面分配给的功能组列表，如果性能没问题的话
    function PageInfo(id) {
        this.id = id;
        this.name = '';
        this.i18nName = {};
        this.config = new PageConfig();
    }
    return PageInfo;
}());
var PageConfig = /** @class */ (function () {
    function PageConfig() {
        this.type = 'gridster';
        /**
         * 当 type 为 gridster，布局信息
         */
        this.layout = [];
        /** TODO: 当前页面其他配置，比如 gridster options */
    }
    return PageConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var WidgetContainerMode = {
    AOT: 0,
    DEV: 1,
    JIT: 2,
};
WidgetContainerMode[WidgetContainerMode.AOT] = 'AOT';
WidgetContainerMode[WidgetContainerMode.DEV] = 'DEV';
WidgetContainerMode[WidgetContainerMode.JIT] = 'JIT';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ArrUtil = /** @class */ (function () {
    function ArrUtil() {
    }
    /**
     * @param {?} arr
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    ArrUtil.SwapByIndex = /**
     * @param {?} arr
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (arr, i, j) {
        /** @type {?} */
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    };
    /**
     * @param {?} arr
     * @param {?} newItem
     * @return {?}
     */
    ArrUtil.Add = /**
     * @param {?} arr
     * @param {?} newItem
     * @return {?}
     */
    function (arr, newItem) {
        arr.push(newItem);
    };
    /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    ArrUtil.Up = /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    function (arr, item) {
        /** @type {?} */
        var i = arr.indexOf(item);
        if (i < 1)
            return;
        ArrUtil.SwapByIndex(arr, i, i - 1);
    };
    /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    ArrUtil.Down = /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    function (arr, item) {
        /** @type {?} */
        var i = arr.indexOf(item);
        if (i > arr.length - 2)
            return;
        ArrUtil.SwapByIndex(arr, i, i + 1);
    };
    /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    ArrUtil.Remove = /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    function (arr, item) {
        /** @type {?} */
        var i = arr.indexOf(item);
        if (i === -1)
            return;
        arr.splice(i, 1);
        // arr = arr.filter(i => item!==i)
    };
    /**
     * @param {?} arr
     * @return {?}
     */
    ArrUtil.Unique = /**
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        return Array.from(new Set(arr));
    };
    return ArrUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 部件系统默认色系。
 * 直接用的缺陷是无法拿到 home.config.json 中定制的色系值，
 * 尽量用 colors
 */
var PlThemeColors = /** @class */ (function () {
    function PlThemeColors() {
    }
    /**
     * @param {?} pure
     * @param {?} gradient
     * @return {?}
     */
    PlThemeColors.SetColors = /**
     * @param {?} pure
     * @param {?} gradient
     * @return {?}
     */
    function (pure, gradient) {
        this.SetPure(pure);
        this.SetGradient(gradient);
    };
    /**
     * @param {?} pure
     * @return {?}
     */
    PlThemeColors.SetPure = /**
     * @param {?} pure
     * @return {?}
     */
    function (pure) {
        if (pure && pure.length > 0)
            this.pure = pure;
    };
    /**
     * @param {?} gradient
     * @return {?}
     */
    PlThemeColors.SetGradient = /**
     * @param {?} gradient
     * @return {?}
     */
    function (gradient) {
        if (gradient && gradient.length > 0)
            this.gradient = gradient;
    };
    PlThemeColors.pure = [
        '#F5B805', '#FF9300', '#EC7658', '#897AFB', '#5E6EEB',
        '#4D97FF', '#01BBC7', '#3DDB88', '#A4EA4D', '#93A3D3',
        '#000000', '#ffffff'
    ];
    PlThemeColors.gradient = [
        '#FBDD0C,#F5B805',
        '#FFB046,#FF9300',
        '#FF9579,#EC7658',
        '#8B99FF,#897AFB',
        '#7F8DFF,#5E6EEB',
        '#79B1FF,#4D97FF',
        '#00DBE9,#01BBC7',
        '#46FA9B,#3DDB88',
        '#C1FF73,#A4EA4D',
        '#B5C7FD,#93A3D3',
    ];
    return PlThemeColors;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UtilService, UtilComponent, UtilModule, backendString2Json, list2Tree, uuidv4, appendScript, loadCss, deepClone, setArrayLengthTo, getCurTheme, loadCommonStyleNTheme, objectLiteralEqual, curLang, addBaseUrl, LS_LOAD_LOCAL_ASSET, IGIX_HOME_PATH, BASE_URL, DATA_PREFIX, FILTERS_WIDGET_NAME, FILTERS_WIDGET_FILTERS_PROP_NAME, FILTERS_WIDGET_PROP_NAME, DESIGNER_CONFIG, dimensionTypeConfig, IgixUtilService, onRtfTabChange, RtfUtilService, portletUrls, portletOps, PortletRepo, convertWidget, widgetUrls, WidgetRepo, datasetUrls, aggUrls, dataResultSetUrls, DatasetRepo, datasrcUrls, DatasrcRepo, igixUrls, IgixRepo, convertPageInfo, convertPageInfoInverse, pageInfoUrls, pageRoles, PageRepo, Lang, I18nValue, Datasrc, DataParam, DatasetParameter, Dataset, Dimension, ComputedType, AggType, ComputedCol, Agg, AggregationResultSetType, DpValue, Indicator, RuntimeAggOption, FuncType, PageInfo, PageConfig, DEFAULT_PORTLET_COLS, DEFAULT_PORTLET_ROWS, Portlet, EppPortlet, BAPortlet, WidgetContainerMode, encrypt, decrypt, mapEntityFeilds, TransPipe, ArrUtil, PlThemeColors };

//# sourceMappingURL=gspwidget-util.js.map