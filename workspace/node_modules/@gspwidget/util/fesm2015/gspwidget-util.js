import { TranslateService, TranslateModule } from '@ngx-translate/core';
import { camelCase, constantCase } from 'change-case';
import CryptoJS from 'crypto-js';
import { from, of } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, Component, NgModule, EventEmitter, Pipe, defineInjectable, inject } from '@angular/core';
import { map, tap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UtilService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    // TODO: 移走
    /**
     * @param {?} url
     * @param {?} content
     * @return {?}
     */
    uploadFile(url, content) {
        /** @type {?} */
        const formData = new FormData();
        Object.keys(content).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            // TODO: 判断文件类型、append name 为啥去掉了？问阳仔
            if (key === 'file') {
                formData.append(key, content[key]);
            }
            else if (key === 'i18nName' || key === 'i18nDesc') {
                formData.append(key, JSON.stringify(content[key]));
            }
            else {
                formData.append(key, content[key]);
            }
        }));
        return this.http.post(url, formData, { responseType: 'text' });
    }
}
UtilService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UtilService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ UtilService.ngInjectableDef = defineInjectable({ factory: function UtilService_Factory() { return new UtilService(inject(HttpClient)); }, token: UtilService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UtilComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
UtilComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-util',
                template: `
    <p>
      util works!
    </p>
  `
            }] }
];
/** @nocollapse */
UtilComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW_RTF_KEY = 'gspframeworkService';
class RtfUtilService {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
    }
    // TODO: queryParamArray 是个 array 就行
    /**
     * @param {?} funcId
     * @param {?=} queryParamArray
     * @param {?=} tabId
     * @param {?=} isReload
     * @return {?}
     */
    openMenu(funcId, queryParamArray, tabId, isReload) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'menu',
            funcId, tabId, isReload,
            appId: '', appEntrance: '',
            queryStringParams: new Map(queryParamArray)
        })));
    }
    /**
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    closeMenu(funcId, tabId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.close((/** @type {?} */ ({
            appType: 'menu',
            funcId, tabId,
            appId: '', appEntrance: ''
        })));
    }
    /**
     * @param {?} appId
     * @return {?}
     */
    openApp(appId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'app',
            funcId: '',
            appId,
            appEntrance: '',
        })));
    }
    /**
     * @return {?}
     */
    openUserInfoMenu() {
        const { rtf } = window[WINDOW_RTF_KEY];
        /** @type {?} */
        const frmEventSvc = rtf.frmEvent;
        /** @type {?} */
        const sessionSvc = rtf.adapter.adatperSerice().session;
        this.translate.get('userInfo').subscribe((/**
         * @param {?} txt
         * @return {?}
         */
        txt => {
            frmEventSvc.eventFire(`farrisapp-click`, {
                active: false,
                code: 'userInfo',
                src: '/platform/runtime/sys/web/userinfo/index.html',
                sessionid: sessionSvc.getUserSessionId(),
                id: 'userinfo',
                appType: '',
                FuncName: txt
            });
        }));
    }
    /**
     * @param {?} route
     * @return {?}
     */
    closeCurRtfTab(route) {
        const { tabId, funcId } = route.snapshot.queryParams;
        this.closeMenu(funcId, tabId);
    }
    /**
     * @param {?} route
     * @param {?=} condition
     * @return {?}
     */
    onRtfTabChangeToMe(route, condition) {
        /** @type {?} */
        const onRtfTabChangeToMe$ = new EventEmitter();
        const { tabId: curTabId } = route.snapshot.queryParams;
        onRtfTabChange().subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!condition)
                condition = (/**
                 * @param {?} pToTabId
                 * @param {?} pCurTabId
                 * @return {?}
                 */
                (pToTabId, pCurTabId) => pToTabId === pCurTabId);
            if (condition(e.tabId, curTabId)) {
                onRtfTabChangeToMe$.emit(e);
            }
        }));
        return onRtfTabChangeToMe$;
    }
}
RtfUtilService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RtfUtilService.ctorParameters = () => [
    { type: TranslateService }
];
/** @type {?} */
const onRtfTabChange$ = new EventEmitter();
/** @type {?} */
let funcSwitchEventRegistered = false
/** 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上 */
;
/**
 * 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上
 * @return {?}
 */
function onRtfTabChange() {
    if (!funcSwitchEventRegistered && window[WINDOW_RTF_KEY]) {
        funcSwitchEventRegistered = true;
        window[WINDOW_RTF_KEY].rtf.frmEvent.eventListener('funcSwitchEvent', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            onRtfTabChange$.emit(e);
        }));
    }
    return onRtfTabChange$;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TransPipe {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
    }
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    transform(query, ...args) {
        const { translations, currentLang } = this.translate;
        if (translations && translations[currentLang] && translations[currentLang][query]) {
            return translations[currentLang][query];
        }
        return query;
    }
}
TransPipe.decorators = [
    { type: Injectable },
    { type: Pipe, args: [{
                name: 'trans',
            },] }
];
/** @nocollapse */
TransPipe.ctorParameters = () => [
    { type: TranslateService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UtilModule {
}
UtilModule.decorators = [
    { type: NgModule, args: [{
                declarations: [UtilComponent, TransPipe],
                imports: [
                    TranslateModule,
                ],
                providers: [
                    RtfUtilService,
                ],
                exports: [UtilComponent, TransPipe]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 通过 ls 中 LS_LOAD_LOCAL_ASSET 标记判断是否加载 localhost/assets。仅用于部件系统开发人员，只能手动修改 ls 中的标记值。
 * @type {?}
 */
const LS_LOAD_LOCAL_ASSET = 'LS_LOAD_LOCAL_ASSET';
/** @type {?} */
const loadLocalAsset = localStorage.getItem(LS_LOAD_LOCAL_ASSET);
/** @type {?} */
const IGIX_HOME_PATH = loadLocalAsset ? `` : `/platform/runtime/sys/web/home/`;
/** @type {?} */
const BASE_URL = `/api/runtime/epp/v1.0/`;
/**
 * @param {?} node
 * @return {?}
 */
function addBaseUrl(node) {
    Object.keys(node).forEach((/**
     * @param {?} key
     * @return {?}
     */
    key => {
        if (typeof node[key] === 'string') {
            node[key] = BASE_URL + node[key];
        }
        else {
            addBaseUrl(node[key]);
        }
    }));
}
// const DATA_PREFIX = `/jersey`
/**
 * 数据源相关的 base url, 为了防止跟其他的不同. 若相同, 可删掉
 * @type {?}
 */
const DATA_PREFIX = `data`;
/** @type {?} */
const FILTERS_WIDGET_NAME = 'filters';
/** @type {?} */
const FILTERS_WIDGET_FILTERS_PROP_NAME = 'filters';
/** @type {?} */
const FILTERS_WIDGET_PROP_NAME = 'change';
/** @type {?} */
const DESIGNER_CONFIG = {
    PAGE_DESIGNER_ID: `Epp-pagedesigner`,
    PAGE_RUNTIME_ID: `Epp-pageruntime`
};
/** @type {?} */
const dimensionTypeConfig = {
    text: {
        list: ['STRING', 'TEXT'],
        color: '#2196F3',
        iconName: 'texture'
    },
    number: {
        // TODO: integer
        list: ['SHORT', 'LONG', 'FLOAT', 'DOUBLE', 'DECIMAL', 'INTEGER', 'INTETER'],
        color: '#e91e63',
        iconName: 'device_hub'
    },
    date: {
        list: ['DATETIME'],
        color: '#ff9800',
        iconName: 'access_time'
    },
    byte: {
        list: ['BYTE', 'BYTES'],
        color: '#4caf50',
        iconName: 'texture'
    },
    boolean: {
        list: ['BOOLEAN', 'UNKNOWN'],
        color: '#3f51b5',
        iconName: 'invert_colors'
    },
    unknown: {
        list: ['UNKNOWN'],
        color: '#3f51b5',
        iconName: 'help'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 形如 {key={key=value, key=value}, key={}}
 * 转为 JSON 标准格式
 * @param {?} original
 * @return {?}
 */
function backendString2Json(original) {
    /** @type {?} */
    let result = original.replace(/\s/g, '') // 去空格
    ;
    result = result.replace(/=/g, ':'); // = 变 :
    result = result.replace(/:/g, '\":'); // : 前加 "
    result = result.replace(/,/g, ',\"'); // , 后加 "
    result = result.replace(/{(?=\w)/g, '{\"'); // 后接字母的 { 后加 "
    return result;
}
/**
 * 用列表构造一棵树。
 * @param {?} list
 * @param {?} __1
 * @return {?}
 */
function list2Tree(list, { parentIdKey = 'parentId', rootParentIdValue = null, idKey = 'id', 
// leafSelectableOnly = true
// ignoreLeaf = false
ifIgnore = (/**
 * @param {?} node
 * @return {?}
 */
(node) => false), 
// isLeaf = (node) => false,
beforeProcess = null, afterProcess = null, }) {
    /**
     * @param {?} nodes
     * @param {?=} layer
     * @return {?}
     */
    function recurseAddChildren(nodes, layer = 0) {
        nodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (beforeProcess)
                beforeProcess(node);
            if (!node.layer)
                node.layer = layer;
            node.value = node.key = node[idKey];
            node.label = node.title = node.name;
            /** @type {?} */
            const children = list.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item[parentIdKey] === node[idKey] && !ifIgnore(item)));
            if (children.length > 0) {
                node.children = children;
                recurseAddChildren(node.children, layer + 1);
            }
            else {
                node.isLeaf = true;
            }
            if (afterProcess)
                afterProcess(node);
        }));
    }
    /** @type {?} */
    const tree = list.filter((/**
     * @param {?} item
     * @return {?}
     */
    item => !item[parentIdKey] || item[parentIdKey] === rootParentIdValue));
    recurseAddChildren(tree);
    return tree;
}
/**
 * @return {?}
 */
function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
     * @param {?} c
     * @return {?}
     */
    c => {
        /** @type {?} */
        var r = Math.random() * 16 | 0;
        /** @type {?} */
        var v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    }));
}
/**
 * @param {?} src
 * @return {?}
 */
function appendScript(src) {
    /** @type {?} */
    const body = document.getElementsByTagName('body')[0];
    /** @type {?} */
    const script = document.createElement('script');
    script.src = src;
    body.appendChild(script);
}
/**
 * 加载 css
 * 1. 防重复：如果相同 href 的 link 标签已存在，不会重新加载
 * 2. 同 id 替换：可以替换同 id 的 link 标签
 * @param {?} href
 * @param {?=} eleId
 * @param {?=} allowRepeat
 * @return {?}
 */
function loadCss(href, eleId, allowRepeat = false) {
    // 防重复
    if (!allowRepeat
        && Array.from(document.querySelectorAll('link')).some((/**
         * @param {?} link
         * @return {?}
         */
        link => link.href === href)))
        return;
    // 同 id 替换
    if (eleId) {
        /** @type {?} */
        const themeLink = (/** @type {?} */ (document.getElementById(eleId)));
        if (themeLink) {
            themeLink.href = href;
            return;
        }
    }
    /** @type {?} */
    const head = document.getElementsByTagName('head')[0];
    /** @type {?} */
    const style = document.createElement('link');
    if (eleId)
        style.id = eleId;
    style.type = 'text/css';
    style.rel = 'stylesheet';
    style.href = href;
    head.appendChild(style);
}
/**
 * @param {?} obj
 * @return {?}
 */
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
/**
 * 直接改变数组
 * @param {?} arr
 * @param {?} targetLength
 * @param {?} fillItem
 * @return {?}
 */
function setArrayLengthTo(arr, targetLength, fillItem) {
    arr.length = targetLength;
    for (let i = 0; i < arr.length; i++) {
        if (!arr[i])
            arr[i] = deepClone(fillItem);
    }
}
/**
 * @return {?}
 */
function getCurTheme() {
    /** @type {?} */
    const rawThemeKey = localStorage.getItem('gsp_rtf_themesKey')
    // 可能是 default，归一化成 blue
    ;
    // 可能是 default，归一化成 blue
    if (rawThemeKey === 'default' || !rawThemeKey)
        return 'blue';
}
/**
 * 加载
 * 1. 公共 style
 * 2. 公共主题 style
 * @return {?}
 */
function loadCommonStyleNTheme() {
    /** @type {?} */
    const curTheme = getCurTheme()
    // antd 优先级最低
    ;
    // antd 优先级最低
    loadCss(`${IGIX_HOME_PATH}xc-antd-${curTheme}.css`);
    loadCss(`${IGIX_HOME_PATH}plain.css`);
    loadCss(`${IGIX_HOME_PATH}xc-common.css`);
    loadCss(`${IGIX_HOME_PATH}xc-common-${curTheme}.css`);
}
/**
 * 两个 obj 是否结构相同、里面的所有字面值相等，及时内部引用
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function objectLiteralEqual(obj1, obj2) {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
}
/** @type {?} */
const curLang = localStorage.getItem('languageCode') || 'zh-CHS';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IgixUtilService {
}
IgixUtilService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ IgixUtilService.ngInjectableDef = defineInjectable({ factory: function IgixUtilService_Factory() { return new IgixUtilService(); }, token: IgixUtilService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PORTLET_COLS = 5;
/** @type {?} */
const DEFAULT_PORTLET_ROWS = 4;
/**
 * 部件
 * @abstract
 */
class Portlet {
    /**
     * 唯一标识
     * @param {?} key
     * @return {?}
     */
    getSize(key) {
        if (key === 'rows') {
            return this._getAxisSize('rows') || this._getAxisSize('minRows') || DEFAULT_PORTLET_ROWS;
        }
        else if (key === 'cols') {
            return this._getAxisSize('cols') || this._getAxisSize('minCols') || DEFAULT_PORTLET_COLS;
        }
        else {
            return this._getAxisSize(key);
        }
    }
}
class EppPortlet extends Portlet {
    /**
     * @param {?} widgetId
     */
    constructor(widgetId) {
        super();
        this.widgetId = widgetId;
        this.name = '未命名部件'; /** 显示标题 */
        /**
         * 显示标题
         */
        this.i18nName = {};
        this.propValues = {}; /** 可配置属性的值 */
        /**
         * 可配置属性的值
         */
        this.dataOption = {};
        /** 所属模块 */
        /**
         * 配置联动时，前端动态增加。只做运行时使用，不应该被保存。
         * null 代表初始状态，[] 代表数据已加载且为空。
         */
        this.dps = null;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    _getAxisSize(key) {
        return (this.size && this.size[key]) || (this.widget.layout && this.widget.layout.grid && this.widget.layout.grid[key]);
    }
}
/** @type {?} */
const defaultSizeMap = {
    rows: 4,
    cols: 5,
    minCols: 2,
    minRows: 2,
    maxCols: 24,
    maxRows: 24,
};
class BAPortlet extends Portlet {
    constructor() {
        super(...arguments);
        this.isBA = true;
    }
    // code?: string
    // createTime?: string
    // detail?: number
    // gradeCode?: string
    // isParent?: boolean
    // layer?: number
    // pid?: string
    // tab?: number
    // type?: string
    // updateTime?: string
    // userId?: string
    /**
     * @param {?} key
     * @return {?}
     */
    _getAxisSize(key) {
        return defaultSizeMap[key];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const widgetUrls = {
    GET_BY_ID: `metaportlet/`,
    GET_USER_ALL: `metaportlet/all`,
    CREATE: `metaportlet/upload`,
    EDIT: `metaportlet/editor`,
    DELETE: `metaportlet/`,
    GET_PORTLET: `portlet/findByMetaId`,
};
addBaseUrl(widgetUrls);
/**
 * url 转换:
 * 服务端 url: /su/元部件名/文件路径
 * full url: host/runtime/web/metaportlet/su/元部件名/文件路径
 * @type {?}
 */
const WIDGET_PREFIX = `${location.origin}/runtime/web/metaportlet`
/** widget 后端 -> 前端 转换 */
;
/**
 * widget 后端 -> 前端 转换
 * @param {?} widget
 * @return {?}
 */
function convertWidget(widget) {
    widget.href = WIDGET_PREFIX + widget.href;
    widget.logoImgUrl = WIDGET_PREFIX + widget.logoImgUrl;
    widget.previewImgUrl = WIDGET_PREFIX + widget.previewImgUrl;
    widget.baseUrl = WIDGET_PREFIX + widget.baseUrl;
    widget.layout = widget.layout && JSON.parse(backendString2Json(widget.layout));
    return (/** @type {?} */ (widget));
}
class WidgetRepo {
    /**
     * @param {?} http
     * @param {?} util
     */
    constructor(http, util) {
        this.http = http;
        this.util = util;
    }
    /**
     * @return {?}
     */
    getWidgets() {
        return this.http
            .get(widgetUrls.GET_USER_ALL)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => data.map(convertWidget))));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getWidgetById(id) {
        return this.http
            .get(widgetUrls.GET_BY_ID + id)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => convertWidget(data))));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    uploadWidget(content) {
        return this.util.uploadFile(widgetUrls.CREATE, content);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    editorWidget(content) {
        return this.util.uploadFile(widgetUrls.EDIT, content);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deleteWidget(id) {
        return this.http.delete(widgetUrls.DELETE + id, {});
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findPortletByMeta(id) {
        return this.http.get(widgetUrls.GET_PORTLET, {
            params: { id }
        });
    }
}
WidgetRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WidgetRepo.ctorParameters = () => [
    { type: HttpClient },
    { type: UtilService }
];
/** @nocollapse */ WidgetRepo.ngInjectableDef = defineInjectable({ factory: function WidgetRepo_Factory() { return new WidgetRepo(inject(HttpClient), inject(UtilService)); }, token: WidgetRepo, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const portletUrls = {
    GET_BY_ID: `portlet/`,
    GET_USER_ALL: `portlet/all`,
    SAVE: `portlet/`,
    GET_BY_MODULE_ID: `portlet/findByModuleId`,
    DELETE_BY_ID: `portlet/`,
    GET_PAGE: `page/findByPortletId`
};
/** @type {?} */
const portletOps = {
    SAVE: `portletop/save?portletId=`,
    GET_BY_PORTLET_ID: `portletop/getallpagerole?portletId=`
};
addBaseUrl(portletUrls);
addBaseUrl(portletOps);
class PortletRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} portletId
     * @return {?}
     */
    getPageByPortletId(portletId) {
        return this.http.get(portletUrls.GET_PAGE, {
            params: { portletId }
        });
    }
    /**
     * @return {?}
     */
    getPortlets() {
        return this.http.get(portletUrls.GET_USER_ALL).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        portlets => portlets.map(convertPortlet))));
    }
    /**
     * @param {?=} moduleId
     * @return {?}
     */
    getPortletsByModuleId(moduleId) {
        return this.http.get(portletUrls.GET_BY_MODULE_ID, { params: moduleId ? { moduleId } : null }).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        portlets => portlets.map(convertPortlet))));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getPortletById(id) {
        // return this.storage.getPortletById(id)
        return this.http.get(portletUrls.GET_BY_ID + id).pipe(map(convertPortlet));
    }
    /**
     * @param {?} portlet
     * @return {?}
     */
    savePortlet(portlet) {
        /** @type {?} */
        const serverPortlet = convertPortletInverse(portlet);
        return portlet.id
            ? this.http.post(portletUrls.SAVE, serverPortlet)
            : this.http.put(portletUrls.SAVE, serverPortlet);
    }
    /**
     * portlet op
     * @param {?} portletId
     * @return {?}
     */
    getPortletOps(portletId) {
        return this.http.get(portletOps.GET_BY_PORTLET_ID + portletId);
    }
    /**
     * @param {?} portletId
     * @param {?} opIds
     * @return {?}
     */
    savePortletOps(portletId, opIds) {
        return this.http.post(portletOps.SAVE + portletId, opIds);
    }
    /**
     * @param {?} portletId
     * @return {?}
     */
    deletePortletById(portletId) {
        return this.http.delete(portletUrls.DELETE_BY_ID + portletId);
    }
}
PortletRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PortletRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PortletRepo.ngInjectableDef = defineInjectable({ factory: function PortletRepo_Factory() { return new PortletRepo(inject(HttpClient)); }, token: PortletRepo, providedIn: "root" });
/**
 * portlet 后端 -> 前端, 前端 -> 后端 转换
 * @param {?} serverPortlet
 * @return {?}
 */
function convertPortlet(serverPortlet) {
    serverPortlet.widget = convertWidget(serverPortlet.widget);
    if (serverPortlet.propValues)
        serverPortlet.propValues = JSON.parse(serverPortlet.propValues);
    return (/** @type {?} */ (Object.assign(new EppPortlet(null), serverPortlet)));
}
/**
 * @param {?} portlet
 * @return {?}
 */
function convertPortletInverse(portlet) {
    /** @type {?} */
    const serverPortlet = Object.assign({}, portlet);
    delete serverPortlet.widget;
    serverPortlet.propValues = (/** @type {?} */ (JSON.stringify(portlet.propValues)));
    return serverPortlet;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// declare var CryptoJS
/** @type {?} */
let AES_SECRET_KEY;
/** @type {?} */
let CRYPTO_CFG;
try {
    AES_SECRET_KEY = CryptoJS.enc.Utf8.parse('1234567890123456');
    CRYPTO_CFG = {
        iv: CryptoJS.enc.Utf8.parse('0000000000000000'),
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
    };
}
catch (error) {
}
/**
 * @param {?} message
 * @return {?}
 */
function encrypt(message) {
    /** @type {?} */
    const msg = CryptoJS.enc.Utf8.parse(message);
    return CryptoJS.AES.encrypt(msg, AES_SECRET_KEY, CRYPTO_CFG).toString();
}
/**
 * @param {?} encryptedMsg
 * @return {?}
 */
function decrypt(encryptedMsg) {
    return CryptoJS.AES.decrypt(encryptedMsg, AES_SECRET_KEY, CRYPTO_CFG).toString(CryptoJS.enc.Utf8);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO: 数据源相关的，要放在 dashboard core 中吗
class Datasrc {
    /**
     * @param {?=} providerName
     */
    constructor(providerName) {
        this.providerName = providerName;
        this.i18nName = {};
        this.config = {};
    }
}
/**
 * 取数参数
 */
class DataParam {
    constructor() {
        this.type = 'QUERY_PARAM';
        this.default = null;
    }
    /**
     * @param {?} dp
     * @return {?}
     */
    static ToDto(dp) {
        const { i18nName, type, config, id } = dp;
        return (/** @type {?} */ ({
            id, i18nName, config,
            type: camelCase(type),
            value: dp.default,
        }));
    }
    /**
     * @param {?} dpDto
     * @return {?}
     */
    static FromDto(dpDto) {
        return (/** @type {?} */ ({
            id: dpDto.id,
            i18nName: dpDto.i18nName,
            type: constantCase(dpDto.type),
            config: dpDto.config,
            datasetId: dpDto.datasetId,
            name: dpDto.name,
            default: dpDto.value,
        }));
    }
}
class DatasetParameter {
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} sortNo
     * @param {?=} isExpression
     */
    constructor(name, value, sortNo, isExpression = true) {
        this.name = name;
        this.value = value;
        this.sortNo = sortNo;
        this.isExpression = isExpression;
    }
}
class Dataset {
    constructor() {
        // datasrc?: Datasrc
        this.config = {};
        this.cols = {
            dimensions: [],
            measures: [],
        };
        this.dataParams = [];
    }
    /**
     * @return {?}
     */
    static create() {
        return new Dataset();
    }
    /**
     * @param {?} dataset
     * @return {?}
     */
    static toDto(dataset) {
        const { id, name, datasrcId, datasrcName, cols, creationTime, config, dataParams, i18nName } = dataset;
        return {
            id, name, creationTime, i18nName,
            datasourceId: datasrcId,
            datasourceName: datasrcName,
            dimensions: cols.dimensions,
            config: encrypt(JSON.stringify(config)),
            dataParamDto: dataParams.map(DataParam.ToDto)
        };
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    static fromDto(datasetDto) {
        const { id, name, datasourceId, datasourceName, dimensions, creationTime, method, parameters, i18nName, config, dataParamDto } = datasetDto;
        /** @type {?} */
        let parsedConfig = null;
        try {
            parsedConfig = JSON.parse(decrypt(config));
        }
        catch (error) {
        }
        if (!parsedConfig)
            parsedConfig = {};
        return {
            // ...datasetDto,
            id, name, creationTime, i18nName,
            datasrcId: datasourceId,
            datasrcName: datasourceName,
            cols: { dimensions },
            config: parsedConfig,
            dataParams: dataParamDto ? dataParamDto.map(DataParam.FromDto) : [],
        };
    }
}
class Dimension {
}
/** @enum {string} */
const ComputedType = {
    Count: 'Count',
    Sum: 'Sum',
    Max: 'Max',
    Min: 'Min',
    Avg: 'Avg',
    Expression: 'Expression',
};
/** @enum {string} */
const AggType = {
    Table: 'Table',
    CroosTable: 'CroosTable',
};
class ComputedCol extends Dimension {
    /**
     * @param {?=} expression
     */
    constructor(expression) {
        super();
        this.expression = expression;
        this.computeType = ComputedType.Expression;
    }
}
class Agg {
    constructor() {
        this.cols = [];
        this.rows = [];
        this.filters = [];
        this.computedCols = [];
    }
    /**
     * @param {?} agg
     * @return {?}
     */
    static toDto(agg) {
        const { id, datasetId, resource, resourceId, aggType, cols, rows, filters, computedCols } = agg;
        return (/** @type {?} */ ({
            id,
            dataSetId: datasetId,
            resource,
            resourceId,
            aggregationType: aggType,
            columnConfigs: cols,
            rowConfigs: rows,
            filterConfigs: filters,
            computedExpressionConfigs: computedCols
        }));
    }
    /**
     * @param {?} aggDto
     * @return {?}
     */
    static fromDto(aggDto) {
        const { id, dataSetId, dataSetName, resource, resourceId, aggregationType, columnConfigs, rowConfigs, filterConfigs, computedExpressionConfigs } = aggDto;
        return (/** @type {?} */ ({
            id,
            datasetId: dataSetId,
            datasetName: dataSetName,
            resource,
            resourceId,
            aggType: aggregationType,
            cols: columnConfigs,
            rows: rowConfigs,
            filters: filterConfigs,
            computedCols: computedExpressionConfigs
        }));
    }
}
/** @enum {string} */
const AggregationResultSetType = {
    Table: 'Table',
    CroosTable: 'CroosTable',
};
/**
 * 获取数据时传服务端的 dp + value
 */
class DpValue {
    /**
     * @param {?} dpValue
     * @return {?}
     */
    static toDto(dpValue) {
        return (/** @type {?} */ ({
            dataParamId: dpValue.dpId,
            value: dpValue.value
        }));
    }
}
class Indicator {
    constructor() {
        this.aggFn = 4;
    }
}
class RuntimeAggOption {
    constructor() {
        this.dimensions = [];
        this.indicators = [new Indicator()];
    }
    /**
     * @param {?} runtimeAgg
     * @return {?}
     */
    static toDto(runtimeAgg) {
        if (!runtimeAgg)
            return;
        return (/** @type {?} */ ({
            dimensions: runtimeAgg.dimensions,
            indicators: runtimeAgg.indicators.map((/**
             * @param {?} ind
             * @return {?}
             */
            ind => ({
                type: ind.aggFn,
                name: ind.dimName
            })))
        }));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const datasetUrls = {
    GET_BY_ID: `${DATA_PREFIX}/DataSetService/find/`,
    CREATE: `${DATA_PREFIX}/DataSetService/create`,
    IMPORT_QO: `${DATA_PREFIX}/DataSetService/importQO`,
    DELETE: `${DATA_PREFIX}/DataSetService/delete`,
    GET_ALL: `${DATA_PREFIX}/DataSetService/findAll`,
    // 500
    GET_RAW_DIMS_BY_DATASET: `${DATA_PREFIX}/DataResultSetService/tryGetDimensions`,
    GET_RAW_DATA_BY_DATASET: `${DATA_PREFIX}/DataResultSetService/getResultSet`,
    UPDATE: `${DATA_PREFIX}/DataSetService/update`,
};
/** @type {?} */
const aggUrls = {
    SAVE: `${DATA_PREFIX}/DataSetService/saveAggConfig`,
    GET_BY_RESOURCE: `${DATA_PREFIX}/DataSetService/findAggConfigByResource`,
};
/** @type {?} */
const dataResultSetUrls = {
    GET_BY_AGG_ID: `${DATA_PREFIX}/DataResultSetService/getAggResultSet/{aggId}`,
    // ?
    GET_BY_AGG: `${DATA_PREFIX}/DataResultSetService/getAggResultSetForTest`,
    GET_BY_DATASET: `${DATA_PREFIX}/DataResultSetService/getResultSet`,
    // 原始数据，用不到
    GET_BY_RESOURCE: `${DATA_PREFIX}/DataResultSetService/getResultSetByResource`,
};
addBaseUrl(datasetUrls);
addBaseUrl(aggUrls);
addBaseUrl(dataResultSetUrls);
class DatasetRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    getRawDimsByDataset(datasetDto) {
        return this.http
            .post(datasetUrls.GET_RAW_DIMS_BY_DATASET, datasetDto);
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    getRawColsNDataByDataset(datasetDto) {
        return this.http
            .post(datasetUrls.GET_RAW_DATA_BY_DATASET, datasetDto);
    }
    /**
     * @return {?}
     */
    getDatasets() {
        return this.http
            .get(datasetUrls.GET_ALL)
            .pipe(map((/**
         * @param {?} datasetDtos
         * @return {?}
         */
        datasetDtos => datasetDtos.map(Dataset.fromDto))));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getDatasetById(id) {
        return this.http
            .get(datasetUrls.GET_BY_ID + id)
            .pipe(map(Dataset.fromDto));
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    saveDataset(datasetDto) {
        return this.http.post(datasetDto.id ? datasetUrls.UPDATE : datasetUrls.CREATE, 
        // Dataset.toDto(dataset)
        datasetDto).pipe(map(Dataset.fromDto));
        // TODO:
        // , this.success()
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    importQO(ids) {
        return this.http.post(datasetUrls.IMPORT_QO, ids);
    }
    /**
     * @param {?} datasetId
     * @return {?}
     */
    deleteDataset(datasetId) {
        return this.http
            .post(datasetUrls.DELETE, null, { params: { id: datasetId } });
        // TODO:
        // .pipe(this.success())
    }
    /**
     * agg
     * @param {?} portletId
     * @return {?}
     */
    getAggByPortletId(portletId) {
        return this.http.get(aggUrls.GET_BY_RESOURCE, {
            params: {
                resource: 'portlet',
                resourceId: portletId
            }
        }).pipe(map(Agg.fromDto));
    }
    /**
     * @param {?} agg
     * @return {?}
     */
    saveAgg(agg) {
        return this.http
            .post(aggUrls.SAVE, Agg.toDto(agg));
    }
    /**
     * result
     * @param {?} agg
     * @param {?=} dpValues
     * @param {?=} runtimeAgg
     * @return {?}
     */
    getAggResultByAgg(agg, dpValues = [], runtimeAgg) {
        /** @type {?} */
        const body = {
            aggDataDto: Agg.toDto(agg),
            aggregation: RuntimeAggOption.toDto(runtimeAgg)
        }
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        ;
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        if (dpValues && dpValues.length > 0)
            body.dataParam = dpValues.map(DpValue.toDto);
        return this.http.post(dataResultSetUrls.GET_BY_AGG, body);
    }
    /**
     * @param {?} portletId
     * @param {?=} dpValues
     * @param {?=} filter
     * @param {?=} runtimeAgg
     * @return {?}
     */
    getResultByPortletId(portletId, dpValues = [], filter = '""', runtimeAgg) {
        /** @type {?} */
        const body = {
            filter,
            aggregation: RuntimeAggOption.toDto(runtimeAgg)
        }
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        ;
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        if (dpValues && dpValues.length > 0)
            body.dataParam = dpValues.map(DpValue.toDto);
        return this.http.post(dataResultSetUrls.GET_BY_RESOURCE, body, {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            params: {
                resourceType: 'portlet',
                resourceId: portletId
            }
        });
    }
}
DatasetRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DatasetRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ DatasetRepo.ngInjectableDef = defineInjectable({ factory: function DatasetRepo_Factory() { return new DatasetRepo(inject(HttpClient)); }, token: DatasetRepo, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const datasrcUrls = {
    GET_BY_ID: `${DATA_PREFIX}/DatasourceService/find/`,
    // ?
    CREATE: `${DATA_PREFIX}/DatasourceService/create`,
    // 500
    DELETE: `${DATA_PREFIX}/DatasourceService/delete`,
    // ?
    GET_ALL: `${DATA_PREFIX}/DatasourceService/findAll`,
    // 500
    UPDATE: `${DATA_PREFIX}/DatasourceService/update`,
    // ?
    TRY: `${DATA_PREFIX}/DatasourceService/try`,
    GET_PARAMS_BY_PROVIDER_NAME: `${DATA_PREFIX}/DataService/getDatasourceParameters/`,
    GET_ALL_PROVIDERS: `${DATA_PREFIX}/DataService/getProvicerNames`,
};
addBaseUrl(datasrcUrls);
class DatasrcRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    getDatasrcList() {
        return this.http.post(datasrcUrls.GET_ALL, null);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getDatasrcById(id) {
        return this.http
            .get(datasrcUrls.GET_BY_ID + id);
    }
    /**
     * @param {?} datasrc
     * @return {?}
     */
    saveDatasrc(datasrc) {
        if (datasrc.id) {
            return this.http.post(datasrcUrls.UPDATE, datasrc);
            // TODO: 移走
            // .pipe(this.success())
        }
        else {
            return this.http.post(datasrcUrls.CREATE, datasrc);
            // TODO: 移走
            // .pipe(this.success())
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deleteDatasrc(id) {
        return this.http.post(datasrcUrls.DELETE, null, {
            params: { id }
        });
        // TODO: 移走
        // .pipe(this.success())
    }
    /**
     * @param {?} datasrc
     * @return {?}
     */
    tryDatasrc(datasrc) {
        return this.http.post(datasrcUrls.TRY, datasrc, { responseType: 'text' });
        // TODO: 移走
        // .pipe(tap(
        //   () => this.nzMsg.success('测试成功！'),
        //   () => this.nzMsg.error('测试失败！')
        // ))
    }
    /**
     * @return {?}
     */
    getProviders() {
        return this.http.get(datasrcUrls.GET_ALL_PROVIDERS);
    }
    /**
     * @param {?} providerName
     * @return {?}
     */
    getParamsByProviderName(providerName) {
        return this.http.get(datasrcUrls.GET_PARAMS_BY_PROVIDER_NAME + providerName);
    }
}
DatasrcRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DatasrcRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ DatasrcRepo.ngInjectableDef = defineInjectable({ factory: function DatasrcRepo_Factory() { return new DatasrcRepo(inject(HttpClient)); }, token: DatasrcRepo, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 支持的语言
 */
class Lang {
    /**
     * @param {?} code
     * @param {?} name
     */
    constructor(code, name) {
        this.code = code;
        this.name = name;
    }
}
class I18nValue {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const igixUrls = {
    bo: {
        GET_ALL: `/api/dev/main/v1.0/business-objects`
    },
    funcOperations: {
        GET_BY_BO_ID: `/api/runtime/sys/v1.0/funcOperations/business/`
    },
    roleGroup: {
        GET_ALL: `/api/runtime/sys/v1.0/rolegroups/all`
    },
    role: {
        GET: `/api/runtime/sys/v1.0/roles`,
    },
    userInfo: {
        // igix 的 userInfo 里有头像
        GET: `/api/runtime/sys/v1.0/userinfos?infoType=user`
        // GET: `http://dscloud.chec.bj.cn/api/runime/sys/v1.0/userinfos/setting`
    },
    func: {
        /**
         * 包含了所有菜单、联查，体积大、加载较慢
         */
        GET_ALL_WITH_INVOKE: `/api/runtime/sys/v1.0/functions/allFuncs`,
        /**
         * 这个是 iGIX 我的应用中的菜单、功能组列表，数据量稍小，性能较好
         */
        GET_ALL: `/api/runtime/sys/v1.0/functions/funcGroups?funcType=4`
    },
    langs: {
        GET_ALL: `/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage`
    },
    qoDataset: {
        // GET_BO_TREE: `/api/gsp/bcc/v1.0/botreefornavvo/extension/query`,
        GET_ECP_BIZ_TREE: `/api/gsp/bcc/v1.0/ecpbiztree/extension/query`,
        GET_DETAIL_BY_ID: `/api/gsp/bcc/v1.0/datasetdetail_frm/extension/retrieve/`,
        GET_DETAIL_QUERY: `/api/gsp/bcc/v1.0/datasetdetail_frm/extension/query`
    },
    ba: {
        // GET_ALL_PORTLETS: `/api/ba/bap/v1.0/category/getCloudCategoryList?type=widget`,
        GET_ALL_PORTLETS: `/api/ba/bap/v1.0/widget/getCloudWidgetList?allWidgetList=true`,
    }
    // TODO: su http://10.24.20.77:5200/api/dev/main/v1.0/business-objects/
    // http://localhost:5000/api/dev/main/v1.0/business-object-trees
};
class IgixRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?=} layer
     * @return {?}
     */
    getBOTree(layer = Infinity) {
        return this.http.get(igixUrls.bo.GET_ALL).pipe(map((/**
         * @param {?} boList
         * @return {?}
         */
        boList => {
            return list2Tree(boList, {
                parentIdKey: 'parentID',
                ifIgnore: (/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.layer > layer)
            });
        })));
    }
    /**
     * @param {?} boId
     * @return {?}
     */
    getOpsByBOId(boId) {
        return this.http.get(igixUrls.funcOperations.GET_BY_BO_ID + boId);
    }
    /**
     * role, role group
     * @return {?}
     */
    getRoleGroupTree() {
        return this.http.get(igixUrls.roleGroup.GET_ALL).pipe(map((/**
         * @param {?} roleGroups
         * @return {?}
         */
        roleGroups => {
            return list2Tree(roleGroups, {});
        })));
    }
    /**
     * @param {?} groupId
     * @return {?}
     */
    getRolesByRoleGroupId(groupId) {
        return this.http.get(igixUrls.role.GET, {
            params: {
                param: JSON.stringify({ groupId })
            }
        }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.data)));
    }
    /**
     * @return {?}
     */
    getAllRoles() {
        return this.http.get(igixUrls.role.GET).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.data)));
    }
    /**
     * 获取部件列表需要的二级 bo tree
     * @return {?}
     */
    getFuncTree12() {
        if (this.funcTree12)
            return of(this.funcTree12);
        return this.getAllFuncs()
            .pipe(map((/**
         * @param {?} funcs
         * @return {?}
         */
        funcs => {
            funcs = funcs.filter((/**
             * @param {?} func
             * @return {?}
             */
            func => parseInt(func.layer) < 3));
            this.funcTree12 = list2Tree(funcs, {
                rootParentIdValue: '0',
                parentIdKey: 'parentId',
            });
            return this.funcTree12;
        })));
    }
    /**
     * @param {?} moduleId
     * @return {?}
     */
    getQoDatasetDetailsByModuleId(moduleId) {
        return this.http.put(igixUrls.qoDataset.GET_DETAIL_QUERY, {}, {
            params: {
                entityFilter: JSON.stringify({
                    FilterConditions: [{
                            FilterField: 'moduleID',
                            Compare: 0,
                            Value: moduleId,
                            Relation: 0
                        }],
                    SortConditions: [],
                    IsUsePagination: true,
                    Pagination: {
                        PageIndex: 1,
                        PageSize: 20,
                        // TODO:
                        PageCount: 0,
                        TotalCount: 0
                    }
                })
            }
            // }, null).pipe(map(res => res.returnValue))
        }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.returnValue.result)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getQoDatasetDetailById(id) {
        return this.http.put(igixUrls.qoDataset.GET_DETAIL_BY_ID + id, {}).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.returnValue)));
    }
    /**
     * @param {?=} reload
     * @return {?}
     */
    getUserInfo(reload = false) {
        if (reload)
            this.userInfoPromise = null;
        if (!this.userInfoPromise)
            this.userInfoPromise = this.http
                .get(igixUrls.userInfo.GET)
                .toPromise();
        return from(this.userInfoPromise);
    }
    /**
     * @param {?=} reload
     * @return {?}
     */
    getUserAvatar(reload = false) {
        return this.getUserInfo(reload).pipe(map((/**
         * @param {?} userInfo
         * @return {?}
         */
        userInfo => {
            if (userInfo && userInfo.userSetting && userInfo.userSetting.imgblob)
                return userInfo.userSetting.imgblob;
            return null;
        })));
    }
    /**
     * @return {?}
     */
    getAllFuncs() {
        return this.http.get(igixUrls.func.GET_ALL);
    }
    /**
     * @return {?}
     */
    getBAPortletsAll() {
        return this.http
            .get(igixUrls.ba.GET_ALL_PORTLETS).pipe(
        // map(res => JSON.parse(res)),
        map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.data
            // .filter(p => p.tab === 1)
            .map((/**
         * @param {?} p
         * @return {?}
         */
        p => Object.assign(new BAPortlet(), p))))));
    }
    /**
     * @return {?}
     */
    getLangs() {
        if (!this.getLangsPromise)
            this.getLangsPromise = this.http
                .get(igixUrls.langs.GET_ALL)
                .pipe(map((/**
             * @param {?} rtfLangs
             * @return {?}
             */
            rtfLangs => rtfLangs.map((/**
             * @param {?} rtfLang
             * @return {?}
             */
            rtfLang => new Lang(rtfLang.code, rtfLang.name))))))
                .toPromise();
        return this.getLangsPromise;
    }
}
IgixRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IgixRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ IgixRepo.ngInjectableDef = defineInjectable({ factory: function IgixRepo_Factory() { return new IgixRepo(inject(HttpClient)); }, token: IgixRepo, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段转换器
 * 为了解决前端 - 服务端某些字段不一致，在读取、保存端动态转换
 */
/**
 * 映射表
 * 后端名：前端名
 * @type {?}
 */
const fieldMapping = {
    pageInfo: {
        title: 'name',
    },
    portlet: {},
    widget: {}
}
/** 反向映射表，自动把上面的正向表反过来 */
;
const ɵ0 = /**
 * @return {?}
 */
function () {
    /** @type {?} */
    let resultMapping = {};
    Object.keys(fieldMapping).forEach((/**
     * @param {?} entityType
     * @return {?}
     */
    entityType => {
        resultMapping[entityType] = {};
        Object.keys(fieldMapping[entityType]).forEach((/**
         * @param {?} originKey
         * @return {?}
         */
        originKey => {
            resultMapping[entityType][fieldMapping[entityType][originKey]] = originKey;
        }));
    }));
    return resultMapping;
};
/**
 * 反向映射表，自动把上面的正向表反过来
 * @type {?}
 */
const fieldMappingInverse = ((ɵ0))()
/**
 * 接受原对象，转换出新对象
 * @param originEntity 待转换原对象
 * @param entityType 对象类型，应为 fieldMapping 的属性名
 * @param inverse 是否反向转换（默认为后端 -> 前端）
 */
;
/**
 * 接受原对象，转换出新对象
 * @template T
 * @param {?} originEntity 待转换原对象
 * @param {?} entityType 对象类型，应为 fieldMapping 的属性名
 * @param {?=} inverse 是否反向转换（默认为后端 -> 前端）
 * @return {?}
 */
function mapEntityFeilds(originEntity, entityType, inverse = false) {
    /** @type {?} */
    let mapping = inverse ? fieldMappingInverse : fieldMapping;
    /** @type {?} */
    let mappedEntity = {};
    Object.keys(originEntity).forEach((/**
     * @param {?} key
     * @return {?}
     */
    key => {
        if (mapping[entityType].hasOwnProperty(key)) {
            mappedEntity[mapping[entityType][key]] = originEntity[key];
        }
        else {
            mappedEntity[key] = originEntity[key];
        }
    }));
    return (/** @type {?} */ (mappedEntity));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const pageInfoUrls = {
    GET_BY_ID_MANAGE: `page/`,
    GET_BY_ID_PERSONAL: `page/pageofuser?pageId=`,
    GET_ALL_MANAGE: `page/all/mg`,
    GET_ALL_PERSONAL: `page/pagelistofuser`,
    GET_BY_ROLE: `pagerole/pagesbyrole?roleId=`,
    GET_PAGES_WITH_ROLE: `pagerole/all`,
    SET_TO_ROLE_DEFAULT: `pagerole/settingrolepageenable`,
    // roleId pageId
    DELETE: `page/`,
    // delete + id
    DELETE_MANAGE: `page/delete/mg`,
    // post []
    ADD: `page`,
    ADD_MANAGE: `page/add/mg`,
    UPDATE: `page`,
    UPDATE_MANAGE: `page/update/mg`,
    COPY: `page/copy`,
    COPY_MANAGE: `page/copy/mg`,
    RESET_PAGE: `page/resetsyspage?pageId=`,
    SELECT_PAGE: `page/changepageselect?pageId=`,
};
/** @type {?} */
const pageRoles = {
    SAVE: `pagerole/save?pageId=`,
    GET_BY_PAGE_ID: `pagerole/getallpagerole?pageId=`,
};
addBaseUrl(pageInfoUrls);
addBaseUrl(pageRoles);
class PageRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    getPagesManage() {
        return this.http
            .get(pageInfoUrls.GET_ALL_MANAGE)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => data.map(convertPageInfo))));
    }
    /**
     * @return {?}
     */
    getPagesUser() {
        return this.http
            .get(pageInfoUrls.GET_ALL_PERSONAL);
    }
    /**
     * @param {?} roleId
     * @return {?}
     */
    getPagesByRole(roleId) {
        return this.http
            .get(pageInfoUrls.GET_BY_ROLE + roleId);
    }
    /**
     * @return {?}
     */
    getPagesWithRole() {
        return this.http.get(pageInfoUrls.GET_PAGES_WITH_ROLE);
    }
    /**
     * @param {?} roleId
     * @param {?} pageId
     * @return {?}
     */
    setRoleDefaultPage(roleId, pageId) {
        return this.http
            .post(pageInfoUrls.SET_TO_ROLE_DEFAULT, null, {
            params: { pageId, roleId }
        }).pipe(this.success());
    }
    /**
     * @param {?} id
     * @param {?=} isManage
     * @return {?}
     */
    getPageInfoById(id, isManage = false) {
        return this.http
            .get((isManage
            ? pageInfoUrls.GET_BY_ID_MANAGE
            : pageInfoUrls.GET_BY_ID_PERSONAL)
            + id)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => convertPageInfo(data))));
    }
    /**
     * @param {?} pageInfo
     * @param {?=} isManage
     * @return {?}
     */
    savePageInfo(pageInfo, isManage = false) {
        return pageInfo.id
            ? this.http.post(isManage ? pageInfoUrls.UPDATE_MANAGE : pageInfoUrls.UPDATE, convertPageInfoInverse(pageInfo)).pipe(this.success())
            : this.http.put(isManage ? pageInfoUrls.ADD_MANAGE : pageInfoUrls.ADD, convertPageInfoInverse(pageInfo)).pipe(this.success());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deletePageInfo(id) {
        return this.http
            .delete(pageInfoUrls.DELETE + id, { responseType: 'text' })
            .pipe(this.success());
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    deletePageInfoManage(ids) {
        return this.http
            .post(pageInfoUrls.DELETE_MANAGE, ids)
            .pipe(this.success());
    }
    /**
     * @param {?} ids
     * @param {?=} isManage
     * @return {?}
     */
    copyPageInfo(ids, isManage = false) {
        return this.http
            .post(isManage ? pageInfoUrls.COPY_MANAGE : pageInfoUrls.COPY, ids, { responseType: 'text' });
    }
    /**
     * @param {?} pageId
     * @return {?}
     */
    resetPage(pageId) {
        return this.http.post(pageInfoUrls.RESET_PAGE + pageId, null);
    }
    /**
     * @param {?} pageId
     * @return {?}
     */
    selectPage(pageId) {
        return this.http.post(pageInfoUrls.SELECT_PAGE + pageId, null);
    }
    // TODO: 不该在这依赖 nzmsg，应移到使用处
    /**
     * @private
     * @return {?}
     */
    success() {
        return tap((/**
         * @return {?}
         */
        () => {
            // this.nzMsg.success(`操作成功！`, { nzDuration: 1000 })
        }));
    }
    /**
     * page roles
     * @param {?} pageId
     * @param {?} roleIds
     * @return {?}
     */
    savePageRoles(pageId, roleIds) {
        return this.http.post(pageRoles.SAVE + pageId, roleIds);
    }
    /**
     * @param {?} pageId
     * @return {?}
     */
    getPageRoles(pageId) {
        return this.http.get(pageRoles.GET_BY_PAGE_ID + pageId);
    }
}
PageRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PageRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PageRepo.ngInjectableDef = defineInjectable({ factory: function PageRepo_Factory() { return new PageRepo(inject(HttpClient)); }, token: PageRepo, providedIn: "root" });
/**
 * pageInfo 后端 -> 前端, 前端 -> 后端 转换
 * @param {?} original
 * @return {?}
 */
function convertPageInfo(original) {
    /** @type {?} */
    const result = mapEntityFeilds(original, 'pageInfo');
    result.config = JSON.parse((/** @type {?} */ (result.config)));
    return result;
}
/**
 * @param {?} pageInfo
 * @return {?}
 */
function convertPageInfoInverse(pageInfo) {
    /** @type {?} */
    const result = mapEntityFeilds(pageInfo, 'pageInfo', true)
    // 保存时，删除 pageInfo.config.layout 的元素的 portlet
    ;
    // 保存时，删除 pageInfo.config.layout 的元素的 portlet
    result.config.layout = result.config.layout.map((/**
     * @param {?} item
     * @return {?}
     */
    item => {
        const { instanceId, isBAPortlet, gridsterItem, portletId, link } = item;
        return { instanceId, isBAPortlet, gridsterItem, portletId, link };
    }));
    result.config = JSON.stringify(result.config);
    return result;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const FuncType = {
    Products: '1',
    Module: '2',
    AppGroups: '3',
    App: '4',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 页面的保存结构
 */
class PageInfo {
    // TODO: 希望“页面管理”里，服务端返回的列表中的 page 加上当前页面分配给的功能组列表，如果性能没问题的话
    /**
     * @param {?=} id
     */
    constructor(id) {
        this.id = id;
        this.name = '';
        this.i18nName = {};
        this.config = new PageConfig();
    }
}
class PageConfig {
    constructor() {
        this.type = 'gridster';
        /**
         * 当 type 为 gridster，布局信息
         */
        this.layout = [];
        /** TODO: 当前页面其他配置，比如 gridster options */
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const WidgetContainerMode = {
    AOT: 0,
    DEV: 1,
    JIT: 2,
};
WidgetContainerMode[WidgetContainerMode.AOT] = 'AOT';
WidgetContainerMode[WidgetContainerMode.DEV] = 'DEV';
WidgetContainerMode[WidgetContainerMode.JIT] = 'JIT';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ArrUtil {
    /**
     * @param {?} arr
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    static SwapByIndex(arr, i, j) {
        /** @type {?} */
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    /**
     * @param {?} arr
     * @param {?} newItem
     * @return {?}
     */
    static Add(arr, newItem) {
        arr.push(newItem);
    }
    /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    static Up(arr, item) {
        /** @type {?} */
        const i = arr.indexOf(item);
        if (i < 1)
            return;
        ArrUtil.SwapByIndex(arr, i, i - 1);
    }
    /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    static Down(arr, item) {
        /** @type {?} */
        const i = arr.indexOf(item);
        if (i > arr.length - 2)
            return;
        ArrUtil.SwapByIndex(arr, i, i + 1);
    }
    /**
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    static Remove(arr, item) {
        /** @type {?} */
        const i = arr.indexOf(item);
        if (i === -1)
            return;
        arr.splice(i, 1);
        // arr = arr.filter(i => item!==i)
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    static Unique(arr) {
        return Array.from(new Set(arr));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 部件系统默认色系。
 * 直接用的缺陷是无法拿到 home.config.json 中定制的色系值，
 * 尽量用 colors
 */
class PlThemeColors {
    /**
     * @param {?} pure
     * @param {?} gradient
     * @return {?}
     */
    static SetColors(pure, gradient) {
        this.SetPure(pure);
        this.SetGradient(gradient);
    }
    /**
     * @param {?} pure
     * @return {?}
     */
    static SetPure(pure) {
        if (pure && pure.length > 0)
            this.pure = pure;
    }
    /**
     * @param {?} gradient
     * @return {?}
     */
    static SetGradient(gradient) {
        if (gradient && gradient.length > 0)
            this.gradient = gradient;
    }
}
PlThemeColors.pure = [
    '#F5B805', '#FF9300', '#EC7658', '#897AFB', '#5E6EEB',
    '#4D97FF', '#01BBC7', '#3DDB88', '#A4EA4D', '#93A3D3',
    '#000000', '#ffffff'
];
PlThemeColors.gradient = [
    '#FBDD0C,#F5B805',
    '#FFB046,#FF9300',
    '#FF9579,#EC7658',
    '#8B99FF,#897AFB',
    '#7F8DFF,#5E6EEB',
    '#79B1FF,#4D97FF',
    '#00DBE9,#01BBC7',
    '#46FA9B,#3DDB88',
    '#C1FF73,#A4EA4D',
    '#B5C7FD,#93A3D3',
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UtilService, UtilComponent, UtilModule, backendString2Json, list2Tree, uuidv4, appendScript, loadCss, deepClone, setArrayLengthTo, getCurTheme, loadCommonStyleNTheme, objectLiteralEqual, curLang, addBaseUrl, LS_LOAD_LOCAL_ASSET, IGIX_HOME_PATH, BASE_URL, DATA_PREFIX, FILTERS_WIDGET_NAME, FILTERS_WIDGET_FILTERS_PROP_NAME, FILTERS_WIDGET_PROP_NAME, DESIGNER_CONFIG, dimensionTypeConfig, IgixUtilService, onRtfTabChange, RtfUtilService, portletUrls, portletOps, PortletRepo, convertWidget, widgetUrls, WidgetRepo, datasetUrls, aggUrls, dataResultSetUrls, DatasetRepo, datasrcUrls, DatasrcRepo, igixUrls, IgixRepo, convertPageInfo, convertPageInfoInverse, pageInfoUrls, pageRoles, PageRepo, Lang, I18nValue, Datasrc, DataParam, DatasetParameter, Dataset, Dimension, ComputedType, AggType, ComputedCol, Agg, AggregationResultSetType, DpValue, Indicator, RuntimeAggOption, FuncType, PageInfo, PageConfig, DEFAULT_PORTLET_COLS, DEFAULT_PORTLET_ROWS, Portlet, EppPortlet, BAPortlet, WidgetContainerMode, encrypt, decrypt, mapEntityFeilds, TransPipe, ArrUtil, PlThemeColors };

//# sourceMappingURL=gspwidget-util.js.map