/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段转换器
 * 为了解决前端 - 服务端某些字段不一致，在读取、保存端动态转换
 */
/**
 * 映射表
 * 后端名：前端名
 * @type {?}
 */
var fieldMapping = {
    pageInfo: {
        title: 'name',
    },
    portlet: {},
    widget: {}
}
/** 反向映射表，自动把上面的正向表反过来 */
;
var ɵ0 = /**
 * @return {?}
 */
function () {
    /** @type {?} */
    var resultMapping = {};
    Object.keys(fieldMapping).forEach((/**
     * @param {?} entityType
     * @return {?}
     */
    function (entityType) {
        resultMapping[entityType] = {};
        Object.keys(fieldMapping[entityType]).forEach((/**
         * @param {?} originKey
         * @return {?}
         */
        function (originKey) {
            resultMapping[entityType][fieldMapping[entityType][originKey]] = originKey;
        }));
    }));
    return resultMapping;
};
/**
 * 反向映射表，自动把上面的正向表反过来
 * @type {?}
 */
var fieldMappingInverse = ((ɵ0))()
/**
 * 接受原对象，转换出新对象
 * @param originEntity 待转换原对象
 * @param entityType 对象类型，应为 fieldMapping 的属性名
 * @param inverse 是否反向转换（默认为后端 -> 前端）
 */
;
/**
 * 接受原对象，转换出新对象
 * @template T
 * @param {?} originEntity 待转换原对象
 * @param {?} entityType 对象类型，应为 fieldMapping 的属性名
 * @param {?=} inverse 是否反向转换（默认为后端 -> 前端）
 * @return {?}
 */
export function mapEntityFeilds(originEntity, entityType, inverse) {
    if (inverse === void 0) { inverse = false; }
    /** @type {?} */
    var mapping = inverse ? fieldMappingInverse : fieldMapping;
    /** @type {?} */
    var mappedEntity = {};
    Object.keys(originEntity).forEach((/**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (mapping[entityType].hasOwnProperty(key)) {
            mappedEntity[mapping[entityType][key]] = originEntity[key];
        }
        else {
            mappedEntity[key] = originEntity[key];
        }
    }));
    return (/** @type {?} */ (mappedEntity));
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtbWFwcGluZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvdXRpbC8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9maWVsZC1tYXBwaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7SUFVTSxZQUFZLEdBQUc7SUFDbkIsUUFBUSxFQUFFO1FBQ1IsS0FBSyxFQUFFLE1BQU07S0FFZDtJQUNELE9BQU8sRUFBRSxFQUVSO0lBQ0QsTUFBTSxFQUFFLEVBRVA7Q0FDRjtBQUNELHlCQUF5Qjs7Ozs7QUFDSTs7UUFDdkIsYUFBYSxHQUFHLEVBQUU7SUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPOzs7O0lBQUMsVUFBQSxVQUFVO1FBQzFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxTQUFTO1lBQ3JELGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUE7UUFDNUUsQ0FBQyxFQUFDLENBQUE7SUFDSixDQUFDLEVBQUMsQ0FBQTtJQUNGLE9BQU8sYUFBYSxDQUFBO0FBQ3RCLENBQUM7Ozs7O0lBVEssbUJBQW1CLEdBQUcsTUFTMUIsRUFBRTtBQUVKOzs7OztHQUtHOzs7Ozs7Ozs7O0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBSSxZQUFZLEVBQUUsVUFBVSxFQUFFLE9BQWU7SUFBZix3QkFBQSxFQUFBLGVBQWU7O1FBQ3RFLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxZQUFZOztRQUN0RCxZQUFZLEdBQUcsRUFBRTtJQUVyQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU87Ozs7SUFBQyxVQUFBLEdBQUc7UUFDbkMsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzNDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDM0Q7YUFBTTtZQUNMLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDdEM7SUFDSCxDQUFDLEVBQUMsQ0FBQTtJQUNGLE9BQU8sbUJBQUEsWUFBWSxFQUFLLENBQUE7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5a2X5q616L2s5o2i5ZmoXG4gKiDkuLrkuobop6PlhrPliY3nq68gLSDmnI3liqHnq6/mn5DkupvlrZfmrrXkuI3kuIDoh7TvvIzlnKjor7vlj5bjgIHkv53lrZjnq6/liqjmgIHovazmjaJcbiAqL1xuXG5pbXBvcnQgeyBtYXAsIG1lcmdlTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcbi8qKlxuICog5pig5bCE6KGoXG4gKiDlkI7nq6/lkI3vvJrliY3nq6/lkI1cbiAqL1xuY29uc3QgZmllbGRNYXBwaW5nID0ge1xuICBwYWdlSW5mbzoge1xuICAgIHRpdGxlOiAnbmFtZScsXG4gICAgLy8gY29uZmlnOiAnc2ltcGxlTGF5b3V0J1xuICB9LFxuICBwb3J0bGV0OiB7XG5cbiAgfSxcbiAgd2lkZ2V0OiB7XG5cbiAgfVxufVxuLyoqIOWPjeWQkeaYoOWwhOihqO+8jOiHquWKqOaKiuS4iumdoueahOato+WQkeihqOWPjei/h+adpSAqL1xuY29uc3QgZmllbGRNYXBwaW5nSW52ZXJzZSA9IChmdW5jdGlvbiAoKSB7XG4gIGxldCByZXN1bHRNYXBwaW5nID0ge31cbiAgT2JqZWN0LmtleXMoZmllbGRNYXBwaW5nKS5mb3JFYWNoKGVudGl0eVR5cGUgPT4ge1xuICAgIHJlc3VsdE1hcHBpbmdbZW50aXR5VHlwZV0gPSB7fVxuICAgIE9iamVjdC5rZXlzKGZpZWxkTWFwcGluZ1tlbnRpdHlUeXBlXSkuZm9yRWFjaChvcmlnaW5LZXkgPT4ge1xuICAgICAgcmVzdWx0TWFwcGluZ1tlbnRpdHlUeXBlXVtmaWVsZE1hcHBpbmdbZW50aXR5VHlwZV1bb3JpZ2luS2V5XV0gPSBvcmlnaW5LZXlcbiAgICB9KVxuICB9KVxuICByZXR1cm4gcmVzdWx0TWFwcGluZ1xufSkoKVxuXG4vKipcbiAqIOaOpeWPl+WOn+Wvueixoe+8jOi9rOaNouWHuuaWsOWvueixoVxuICogQHBhcmFtIG9yaWdpbkVudGl0eSDlvoXovazmjaLljp/lr7nosaFcbiAqIEBwYXJhbSBlbnRpdHlUeXBlIOWvueixoeexu+Wei++8jOW6lOS4uiBmaWVsZE1hcHBpbmcg55qE5bGe5oCn5ZCNXG4gKiBAcGFyYW0gaW52ZXJzZSDmmK/lkKblj43lkJHovazmjaLvvIjpu5jorqTkuLrlkI7nq68gLT4g5YmN56uv77yJXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBFbnRpdHlGZWlsZHM8VD4ob3JpZ2luRW50aXR5LCBlbnRpdHlUeXBlLCBpbnZlcnNlID0gZmFsc2UpIHtcbiAgbGV0IG1hcHBpbmcgPSBpbnZlcnNlID8gZmllbGRNYXBwaW5nSW52ZXJzZSA6IGZpZWxkTWFwcGluZ1xuICBsZXQgbWFwcGVkRW50aXR5ID0ge31cblxuICBPYmplY3Qua2V5cyhvcmlnaW5FbnRpdHkpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAobWFwcGluZ1tlbnRpdHlUeXBlXS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBtYXBwZWRFbnRpdHlbbWFwcGluZ1tlbnRpdHlUeXBlXVtrZXldXSA9IG9yaWdpbkVudGl0eVtrZXldXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcHBlZEVudGl0eVtrZXldID0gb3JpZ2luRW50aXR5W2tleV1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBtYXBwZWRFbnRpdHkgYXMgVFxufVxuXG4vKipcbiAqIOi/lOWbniByeGpzIOeahCBtYXAg5pON5L2c56ym6LCD55So77yM55So5rOV77yaXG4gKiBgYGBqc1xuICogdGhpcy5odHRwLmdldCh1cmwpLnBpcGUobWFwRmVpbGRzPFBhZ2VJbmZvPigncGFnZUluZm8nKSlcbiAqIGBgYFxuICog5Y+v5bCGIGh0dHAg6K+35rGC5b6X5Yiw55qE5a+56LGhIHBpcGUg6L2s5o2i5Li65YmN56uv6YCC55So5a2X5q6177yb5Y+v5o6l5Y+X5pWw57uE5oiW5a+56LGh77yM5Y+v6Ieq5Yqo5Yy65YiG44CCXG4gKiBcbiAqIEBwYXJhbSBlbnRpdHlUeXBlIOWvueixoeexu+Wei++8jOW6lOS4uiBmaWVsZE1hcHBpbmcg55qE5bGe5oCn5ZCNXG4gKiBAcGFyYW0gaW52ZXJzZSDmmK/lkKblj43lkJHovazmjaLvvIjpu5jorqTkuLrlkI7nq68gLT4g5YmN56uv77yJXG4gKi9cbi8vIGV4cG9ydCBmdW5jdGlvbiBtYXBMaXN0PFQ+IChlbnRpdHlUeXBlOiBzdHJpbmcsIGludmVyc2UgPSBmYWxzZSkge1xuLy8gICByZXR1cm4gbWFwKG9yaWdpbkRhdGEgPT4ge1xuLy8gICAgIGlmIChvcmlnaW5EYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbi8vICAgICAgIHJldHVybiBvcmlnaW5EYXRhLm1hcChlbnRpdHkgPT4ge1xuLy8gICAgICAgICByZXR1cm4gbWFwRW50aXR5RmVpbGRzPFQ+KGVudGl0eSwgZW50aXR5VHlwZSwgaW52ZXJzZSlcbi8vICAgICAgIH0pXG4vLyAgICAgfVxuLy8gICB9KVxuLy8gfVxuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hcEVudGl0eTxUPiAoZW50aXR5VHlwZTogc3RyaW5nLCBpbnZlcnNlID0gZmFsc2UpIHtcbi8vICAgcmV0dXJuIG1hcChvcmlnaW5EYXRhID0+IHtcbi8vICAgICBpZiAoISAob3JpZ2luRGF0YSBpbnN0YW5jZW9mIEFycmF5KSkge1xuLy8gICAgICAgcmV0dXJuIG1hcEVudGl0eUZlaWxkczxUPihvcmlnaW5EYXRhLCBlbnRpdHlUeXBlLCBpbnZlcnNlKVxuLy8gICAgIH1cbi8vICAgfSlcbi8vIH1cbiJdfQ==