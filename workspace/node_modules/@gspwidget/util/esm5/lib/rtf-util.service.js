/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
/** @type {?} */
var WINDOW_RTF_KEY = 'gspframeworkService';
/**
 * @record
 */
export function RtfTabChangeEvent() { }
if (false) {
    /** @type {?} */
    RtfTabChangeEvent.prototype.appEntrance;
    /** @type {?} */
    RtfTabChangeEvent.prototype.appId;
    /** @type {?} */
    RtfTabChangeEvent.prototype.appType;
    /** @type {?} */
    RtfTabChangeEvent.prototype.funcId;
    /** @type {?} */
    RtfTabChangeEvent.prototype.tabId;
    /** @type {?} */
    RtfTabChangeEvent.prototype.tabName;
}
var RtfUtilService = /** @class */ (function () {
    function RtfUtilService(translate) {
        this.translate = translate;
    }
    // TODO: queryParamArray 是个 array 就行
    // TODO: queryParamArray 是个 array 就行
    /**
     * @param {?} funcId
     * @param {?=} queryParamArray
     * @param {?=} tabId
     * @param {?=} isReload
     * @return {?}
     */
    RtfUtilService.prototype.openMenu = 
    // TODO: queryParamArray 是个 array 就行
    /**
     * @param {?} funcId
     * @param {?=} queryParamArray
     * @param {?=} tabId
     * @param {?=} isReload
     * @return {?}
     */
    function (funcId, queryParamArray, tabId, isReload) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'menu',
            funcId: funcId, tabId: tabId, isReload: isReload,
            appId: '', appEntrance: '',
            queryStringParams: new Map(queryParamArray)
        })));
    };
    /**
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    RtfUtilService.prototype.closeMenu = /**
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    function (funcId, tabId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.close((/** @type {?} */ ({
            appType: 'menu',
            funcId: funcId, tabId: tabId,
            appId: '', appEntrance: ''
        })));
    };
    /**
     * @param {?} appId
     * @return {?}
     */
    RtfUtilService.prototype.openApp = /**
     * @param {?} appId
     * @return {?}
     */
    function (appId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'app',
            funcId: '',
            appId: appId,
            appEntrance: '',
        })));
    };
    /**
     * @return {?}
     */
    RtfUtilService.prototype.openUserInfoMenu = /**
     * @return {?}
     */
    function () {
        var rtf = window[WINDOW_RTF_KEY].rtf;
        /** @type {?} */
        var frmEventSvc = rtf.frmEvent;
        /** @type {?} */
        var sessionSvc = rtf.adapter.adatperSerice().session;
        this.translate.get('userInfo').subscribe((/**
         * @param {?} txt
         * @return {?}
         */
        function (txt) {
            frmEventSvc.eventFire("farrisapp-click", {
                active: false,
                code: 'userInfo',
                src: '/platform/runtime/sys/web/userinfo/index.html',
                sessionid: sessionSvc.getUserSessionId(),
                id: 'userinfo',
                appType: '',
                FuncName: txt
            });
        }));
    };
    /**
     * @param {?} route
     * @return {?}
     */
    RtfUtilService.prototype.closeCurRtfTab = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var _a = route.snapshot.queryParams, tabId = _a.tabId, funcId = _a.funcId;
        this.closeMenu(funcId, tabId);
    };
    /**
     * @param {?} route
     * @param {?=} condition
     * @return {?}
     */
    RtfUtilService.prototype.onRtfTabChangeToMe = /**
     * @param {?} route
     * @param {?=} condition
     * @return {?}
     */
    function (route, condition) {
        /** @type {?} */
        var onRtfTabChangeToMe$ = new EventEmitter();
        var curTabId = route.snapshot.queryParams.tabId;
        onRtfTabChange().subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!condition)
                condition = (/**
                 * @param {?} pToTabId
                 * @param {?} pCurTabId
                 * @return {?}
                 */
                function (pToTabId, pCurTabId) { return pToTabId === pCurTabId; });
            if (condition(e.tabId, curTabId)) {
                onRtfTabChangeToMe$.emit(e);
            }
        }));
        return onRtfTabChangeToMe$;
    };
    RtfUtilService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RtfUtilService.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return RtfUtilService;
}());
export { RtfUtilService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RtfUtilService.prototype.translate;
}
/** @type {?} */
var onRtfTabChange$ = new EventEmitter();
/** @type {?} */
var funcSwitchEventRegistered = false
/** 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上 */
;
/**
 * 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上
 * @return {?}
 */
export function onRtfTabChange() {
    if (!funcSwitchEventRegistered && window[WINDOW_RTF_KEY]) {
        funcSwitchEventRegistered = true;
        window[WINDOW_RTF_KEY].rtf.frmEvent.eventListener('funcSwitchEvent', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            onRtfTabChange$.emit(e);
        }));
    }
    return onRtfTabChange$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnRmLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvdXRpbC8iLCJzb3VyY2VzIjpbImxpYi9ydGYtdXRpbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7SUFHakQsY0FBYyxHQUFHLHFCQUFxQjs7OztBQUU1Qyx1Q0FPQzs7O0lBTkMsd0NBQW1COztJQUNuQixrQ0FBYTs7SUFDYixvQ0FBZTs7SUFDZixtQ0FBYzs7SUFDZCxrQ0FBYTs7SUFDYixvQ0FBZTs7QUFHakI7SUFHRSx3QkFDVSxTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtJQUNqQyxDQUFDO0lBRUwsb0NBQW9DOzs7Ozs7Ozs7SUFDcEMsaUNBQVE7Ozs7Ozs7OztJQUFSLFVBQVUsTUFBYyxFQUFFLGVBQXFDLEVBQUUsS0FBYyxFQUFFLFFBQWtCO1FBQ2pHLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBQTtZQUNwRCxPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFFBQVEsVUFBQTtZQUN2QixLQUFLLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFO1lBQzFCLGlCQUFpQixFQUFFLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztTQUM1QyxFQUFjLENBQUMsQ0FBQTtJQUNsQixDQUFDOzs7Ozs7SUFDRCxrQ0FBUzs7Ozs7SUFBVCxVQUFXLE1BQWMsRUFBRSxLQUFjO1FBQ3ZDLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBQTtZ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QUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBBcHBPcHRpb25zIH0gZnJvbSAnLi4vcHVibGljLWFwaSc7XG5cbmNvbnN0IFdJTkRPV19SVEZfS0VZID0gJ2dzcGZyYW1ld29ya1NlcnZpY2UnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUnRmVGFiQ2hhbmdlRXZlbnQge1xuICBhcHBFbnRyYW5jZTogc3RyaW5nXG4gIGFwcElkOiBzdHJpbmdcbiAgYXBwVHlwZTogc3RyaW5nXG4gIGZ1bmNJZDogc3RyaW5nXG4gIHRhYklkOiBzdHJpbmdcbiAgdGFiTmFtZTogc3RyaW5nXG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSdGZVdGlsU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlXG4gICkgeyB9XG5cbiAgLy8gVE9ETzogcXVlcnlQYXJhbUFycmF5IOaYr+S4qiBhcnJheSDlsLHooYxcbiAgb3Blbk1lbnUgKGZ1bmNJZDogc3RyaW5nLCBxdWVyeVBhcmFtQXJyYXk/OiBNYXA8c3RyaW5nLCBzdHJpbmc+LCB0YWJJZD86IHN0cmluZywgaXNSZWxvYWQ/OiBib29sZWFuKSB7XG4gICAgKHdpbmRvdyBhcyBhbnkpLmdzcGZyYW1ld29ya1NlcnZpY2UucnRmLmZ1bmMub3Blbk1lbnUoe1xuICAgICAgYXBwVHlwZTogJ21lbnUnLFxuICAgICAgZnVuY0lkLCB0YWJJZCwgaXNSZWxvYWQsXG4gICAgICBhcHBJZDogJycsIGFwcEVudHJhbmNlOiAnJyxcbiAgICAgIHF1ZXJ5U3RyaW5nUGFyYW1zOiBuZXcgTWFwKHF1ZXJ5UGFyYW1BcnJheSlcbiAgICB9IGFzIEFwcE9wdGlvbnMpXG4gIH1cbiAgY2xvc2VNZW51IChmdW5jSWQ6IHN0cmluZywgdGFiSWQ/OiBzdHJpbmcpIHtcbiAgICAod2luZG93IGFzIGFueSkuZ3NwZnJhbWV3b3JrU2VydmljZS5ydGYuZnVuYy5jbG9zZSh7XG4gICAgICBhcHBUeXBlOiAnbWVudScsXG4gICAgICBmdW5jSWQsIHRhYklkLFxuICAgICAgYXBwSWQ6ICcnLCBhcHBFbnRyYW5jZTogJydcbiAgICB9IGFzIEFwcE9wdGlvbnMpXG4gIH1cbiAgb3BlbkFwcCAoYXBwSWQ6IHN0cmluZykge1xuICAgICh3aW5kb3cgYXMgYW55KS5nc3BmcmFtZXdvcmtTZXJ2aWNlLnJ0Zi5mdW5jLm9wZW5NZW51KHtcbiAgICAgIGFwcFR5cGU6ICdhcHAnLFxuICAgICAgZnVuY0lkOiAnJyxcbiAgICAgIGFwcElkLFxuICAgICAgYXBwRW50cmFuY2U6ICcnLFxuICAgIH0gYXMgQXBwT3B0aW9ucyk7XG4gIH1cbiAgcHVibGljIG9wZW5Vc2VySW5mb01lbnUgKCkge1xuICAgIGNvbnN0IHsgcnRmIH0gPSB3aW5kb3dbV0lORE9XX1JURl9LRVldXG4gICAgY29uc3QgZnJtRXZlbnRTdmMgPSBydGYuZnJtRXZlbnRcbiAgICBjb25zdCBzZXNzaW9uU3ZjID0gcnRmLmFkYXB0ZXIuYWRhdHBlclNlcmljZSgpLnNlc3Npb25cbiAgICB0aGlzLnRyYW5zbGF0ZS5nZXQoJ3VzZXJJbmZvJykuc3Vic2NyaWJlKHR4dCA9PiB7XG4gICAgICBmcm1FdmVudFN2Yy5ldmVudEZpcmUoYGZhcnJpc2FwcC1jbGlja2AsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgY29kZTogJ3VzZXJJbmZvJyxcbiAgICAgICAgc3JjOiAnL3BsYXRmb3JtL3J1bnRpbWUvc3lzL3dlYi91c2VyaW5mby9pbmRleC5odG1sJyxcbiAgICAgICAgc2Vzc2lvbmlkOiBzZXNzaW9uU3ZjLmdldFVzZXJTZXNzaW9uSWQoKSxcbiAgICAgICAgaWQ6ICd1c2VyaW5mbycsXG4gICAgICAgIGFwcFR5cGU6ICcnLFxuICAgICAgICBGdW5jTmFtZTogdHh0XG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgY2xvc2VDdXJSdGZUYWIgKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xuICAgIGNvbnN0IHsgdGFiSWQsIGZ1bmNJZCB9ID0gcm91dGUuc25hcHNob3QucXVlcnlQYXJhbXNcbiAgICB0aGlzLmNsb3NlTWVudShmdW5jSWQsIHRhYklkKVxuICB9XG5cbiAgb25SdGZUYWJDaGFuZ2VUb01lIChyb3V0ZTogQWN0aXZhdGVkUm91dGUsIGNvbmRpdGlvbj86ICh0b1RhYklkOiBzdHJpbmcsIGN1clRhYklkOiBzdHJpbmcpID0+IGJvb2xlYW4pIHtcbiAgICBjb25zdCBvblJ0ZlRhYkNoYW5nZVRvTWUkID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgY29uc3QgeyB0YWJJZDogY3VyVGFiSWQgfSA9IHJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zXG4gICAgb25SdGZUYWJDaGFuZ2UoKS5zdWJzY3JpYmUoKGU6IFJ0ZlRhYkNoYW5nZUV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWNvbmRpdGlvbikgY29uZGl0aW9uID0gKHBUb1RhYklkOiBzdHJpbmcsIHBDdXJUYWJJZDogc3RyaW5nKSA9PiBwVG9UYWJJZCA9PT0gcEN1clRhYklkXG4gICAgICBpZiAoY29uZGl0aW9uKGUudGFiSWQsIGN1clRhYklkKSkge1xuICAgICAgICBvblJ0ZlRhYkNoYW5nZVRvTWUkLmVtaXQoZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBvblJ0ZlRhYkNoYW5nZVRvTWUkXG4gIH1cbn1cblxuY29uc3Qgb25SdGZUYWJDaGFuZ2UkID0gbmV3IEV2ZW50RW1pdHRlcjxSdGZUYWJDaGFuZ2VFdmVudD4oKVxubGV0IGZ1bmNTd2l0Y2hFdmVudFJlZ2lzdGVyZWQgPSBmYWxzZVxuLyoqIOeUqOWHveaVsOaYr+S4uuS6huW7tui/n+azqOWGjOS6i+S7tu+8jOWQpuWImSBydGYgc2VydmljZSDlj6/og73ov5jmsqHmjILlnKggd2luZG93IOS4iiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uUnRmVGFiQ2hhbmdlICgpIHtcbiAgaWYgKCFmdW5jU3dpdGNoRXZlbnRSZWdpc3RlcmVkICYmIHdpbmRvd1tXSU5ET1dfUlRGX0tFWV0pIHtcbiAgICBmdW5jU3dpdGNoRXZlbnRSZWdpc3RlcmVkID0gdHJ1ZVxuICAgIHdpbmRvd1tXSU5ET1dfUlRGX0tFWV0ucnRmLmZybUV2ZW50LmV2ZW50TGlzdGVuZXIoJ2Z1bmNTd2l0Y2hFdmVudCcsIChlOiBSdGZUYWJDaGFuZ2VFdmVudCkgPT4ge1xuICAgICAgb25SdGZUYWJDaGFuZ2UkLmVtaXQoZSlcbiAgICB9KVxuICB9XG4gIHJldHVybiBvblJ0ZlRhYkNoYW5nZSRcbn1cbiJdfQ==