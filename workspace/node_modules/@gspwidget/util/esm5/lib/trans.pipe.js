/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
var TransPipe = /** @class */ (function () {
    function TransPipe(translate) {
        this.translate = translate;
    }
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    /**
     * @return {?}
     */
    TransPipe.prototype.ngOnDestroy = 
    // TODO: 不加的话，切走路由时会报错 provider.ngOnChanges is not a function
    /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    TransPipe.prototype.transform = /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    function (query) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a = this.translate, translations = _a.translations, currentLang = _a.currentLang;
        if (translations && translations[currentLang] && translations[currentLang][query]) {
            return translations[currentLang][query];
        }
        return query;
    };
    TransPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'trans',
                },] }
    ];
    /** @nocollapse */
    TransPipe.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return TransPipe;
}());
export { TransPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TransPipe.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,