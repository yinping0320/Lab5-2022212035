/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { addBaseUrl, DATA_PREFIX } from '../const';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
export var datasrcUrls = {
    GET_BY_ID: DATA_PREFIX + "/DatasourceService/find/",
    // ?
    CREATE: DATA_PREFIX + "/DatasourceService/create",
    // 500
    DELETE: DATA_PREFIX + "/DatasourceService/delete",
    // ?
    GET_ALL: DATA_PREFIX + "/DatasourceService/findAll",
    // 500
    UPDATE: DATA_PREFIX + "/DatasourceService/update",
    // ?
    TRY: DATA_PREFIX + "/DatasourceService/try",
    GET_PARAMS_BY_PROVIDER_NAME: DATA_PREFIX + "/DataService/getDatasourceParameters/",
    GET_ALL_PROVIDERS: DATA_PREFIX + "/DataService/getProvicerNames",
};
addBaseUrl(datasrcUrls);
var DatasrcRepo = /** @class */ (function () {
    function DatasrcRepo(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    DatasrcRepo.prototype.getDatasrcList = /**
     * @return {?}
     */
    function () {
        return this.http.post(datasrcUrls.GET_ALL, null);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatasrcRepo.prototype.getDatasrcById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http
            .get(datasrcUrls.GET_BY_ID + id);
    };
    /**
     * @param {?} datasrc
     * @return {?}
     */
    DatasrcRepo.prototype.saveDatasrc = /**
     * @param {?} datasrc
     * @return {?}
     */
    function (datasrc) {
        if (datasrc.id) {
            return this.http.post(datasrcUrls.UPDATE, datasrc);
            // TODO: 移走
            // .pipe(this.success())
        }
        else {
            return this.http.post(datasrcUrls.CREATE, datasrc);
            // TODO: 移走
            // .pipe(this.success())
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatasrcRepo.prototype.deleteDatasrc = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.post(datasrcUrls.DELETE, null, {
            params: { id: id }
        });
        // TODO: 移走
        // .pipe(this.success())
    };
    /**
     * @param {?} datasrc
     * @return {?}
     */
    DatasrcRepo.prototype.tryDatasrc = /**
     * @param {?} datasrc
     * @return {?}
     */
    function (datasrc) {
        return this.http.post(datasrcUrls.TRY, datasrc, { responseType: 'text' });
        // TODO: 移走
        // .pipe(tap(
        //   () => this.nzMsg.success('测试成功！'),
        //   () => this.nzMsg.error('测试失败！')
        // ))
    };
    /**
     * @return {?}
     */
    DatasrcRepo.prototype.getProviders = /**
     * @return {?}
     */
    function () {
        return this.http.get(datasrcUrls.GET_ALL_PROVIDERS);
    };
    /**
     * @param {?} providerName
     * @return {?}
     */
    DatasrcRepo.prototype.getParamsByProviderName = /**
     * @param {?} providerName
     * @return {?}
     */
    function (providerName) {
        return this.http.get(datasrcUrls.GET_PARAMS_BY_PROVIDER_NAME + providerName);
    };
    DatasrcRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DatasrcRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ DatasrcRepo.ngInjectableDef = i0.defineInjectable({ factory: function DatasrcRepo_Factory() { return new DatasrcRepo(i0.inject(i1.HttpClient)); }, token: DatasrcRepo, providedIn: "root" });
    return DatasrcRepo;
}());
export { DatasrcRepo };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatasrcRepo.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNyYy5yZXBvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcHdpZGdldC91dGlsLyIsInNvdXJjZXMiOlsibGliL3JlcG9zaXRvcmllcy9kYXRhc3JjLnJlcG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7O0FBR25ELE1BQU0sS0FBTyxXQUFXLEdBQUc7SUFDekIsU0FBUyxFQUFLLFdBQVcsNkJBQTBCOztJQUNuRCxNQUFNLEVBQUssV0FBVyw4QkFBMkI7O0lBQ2pELE1BQU0sRUFBSyxXQUFXLDhCQUEyQjs7SUFDakQsT0FBTyxFQUFLLFdBQVcsK0JBQTRCOztJQUNuRCxNQUFNLEVBQUssV0FBVyw4QkFBMkI7O0lBQ2pELEdBQUcsRUFBSyxXQUFXLDJCQUF3QjtJQUMzQywyQkFBMkIsRUFBSyxXQUFXLDBDQUF1QztJQUNsRixpQkFBaUIsRUFBSyxXQUFXLGtDQUErQjtDQUNqRTtBQUNELFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUV2QjtJQUtFLHFCQUNVLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFDdEIsQ0FBQzs7OztJQUVMLG9DQUFjOzs7SUFBZDtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQVksV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUM3RCxDQUFDOzs7OztJQUNELG9DQUFjOzs7O0lBQWQsVUFBZ0IsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFVLFdBQVcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDN0MsQ0FBQzs7Ozs7SUFDRCxpQ0FBVzs7OztJQUFYLFVBQWEsT0FBZ0I7UUFDM0IsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBVSxXQUFXLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQzNELFdBQVc7WUFDWCx3QkFBd0I7U0FDekI7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQVUsV0FBVyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUMzRCxXQUFXO1lBQ1gsd0JBQXdCO1NBQ3pCO0lBQ0gsQ0FBQzs7Ozs7SUFDRCxtQ0FBYTs7OztJQUFiLFVBQWUsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQ3RELE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBQSxFQUFFO1NBQ2YsQ0FBQyxDQUFBO1FBQ0YsV0FBVztRQUNYLHdCQUF3QjtJQUMxQixDQUFDOzs7OztJQUNELGdDQUFVOzs7O0lBQVYsVUFBWSxPQUFnQjtRQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDekUsV0FBVztRQUNYLGFBQWE7UUFDYix1Q0FBdUM7UUFDdkMsb0NBQW9DO1FBQ3BDLEtBQUs7SUFDUCxDQUFDOzs7O0lBQ0Qsa0NBQVk7OztJQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBaUIsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDckUsQ0FBQzs7Ozs7SUFDRCw2Q0FBdUI7Ozs7SUFBdkIsVUFBeUIsWUFBb0I7UUFDM0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBa0IsV0FBVyxDQUFDLDJCQUEyQixHQUFHLFlBQVksQ0FBQyxDQUFBO0lBQy9GLENBQUM7O2dCQS9DRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQXBCUSxVQUFVOzs7c0JBQW5CO0NBa0VDLEFBaERELElBZ0RDO1NBN0NZLFdBQVc7Ozs7OztJQUdwQiwyQkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGFkZEJhc2VVcmwsIERBVEFfUFJFRklYIH0gZnJvbSAnLi4vY29uc3QnO1xuaW1wb3J0IHsgRGF0YVByb3ZpZGVyLCBEYXRhc3JjLCBQcm92aWRlclBhcmFtIH0gZnJvbSAnLi4vdHlwZXMvZGF0YS50eXBlJztcblxuZXhwb3J0IGNvbnN0IGRhdGFzcmNVcmxzID0ge1xuICBHRVRfQllfSUQ6IGAke0RBVEFfUFJFRklYfS9EYXRhc291cmNlU2VydmljZS9maW5kL2AsIC8vID9cbiAgQ1JFQVRFOiBgJHtEQVRBX1BSRUZJWH0vRGF0YXNvdXJjZVNlcnZpY2UvY3JlYXRlYCwgLy8gNTAwXG4gIERFTEVURTogYCR7REFUQV9QUkVGSVh9L0RhdGFzb3VyY2VTZXJ2aWNlL2RlbGV0ZWAsIC8vID9cbiAgR0VUX0FMTDogYCR7REFUQV9QUkVGSVh9L0RhdGFzb3VyY2VTZXJ2aWNlL2ZpbmRBbGxgLCAvLyA1MDBcbiAgVVBEQVRFOiBgJHtEQVRBX1BSRUZJWH0vRGF0YXNvdXJjZVNlcnZpY2UvdXBkYXRlYCwgLy8gP1xuICBUUlk6IGAke0RBVEFfUFJFRklYfS9EYXRhc291cmNlU2VydmljZS90cnlgLFxuICBHRVRfUEFSQU1TX0JZX1BST1ZJREVSX05BTUU6IGAke0RBVEFfUFJFRklYfS9EYXRhU2VydmljZS9nZXREYXRhc291cmNlUGFyYW1ldGVycy9gLFxuICBHRVRfQUxMX1BST1ZJREVSUzogYCR7REFUQV9QUkVGSVh9L0RhdGFTZXJ2aWNlL2dldFByb3ZpY2VyTmFtZXNgLFxufVxuYWRkQmFzZVVybChkYXRhc3JjVXJscylcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGF0YXNyY1JlcG8ge1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICkgeyB9XG5cbiAgZ2V0RGF0YXNyY0xpc3QgKCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxEYXRhc3JjW10+KGRhdGFzcmNVcmxzLkdFVF9BTEwsIG51bGwpXG4gIH1cbiAgZ2V0RGF0YXNyY0J5SWQgKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PERhdGFzcmM+KGRhdGFzcmNVcmxzLkdFVF9CWV9JRCArIGlkKVxuICB9XG4gIHNhdmVEYXRhc3JjIChkYXRhc3JjOiBEYXRhc3JjKSB7XG4gICAgaWYgKGRhdGFzcmMuaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxEYXRhc3JjPihkYXRhc3JjVXJscy5VUERBVEUsIGRhdGFzcmMpXG4gICAgICAvLyBUT0RPOiDnp7votbBcbiAgICAgIC8vIC5waXBlKHRoaXMuc3VjY2VzcygpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8RGF0YXNyYz4oZGF0YXNyY1VybHMuQ1JFQVRFLCBkYXRhc3JjKVxuICAgICAgLy8gVE9ETzog56e76LWwXG4gICAgICAvLyAucGlwZSh0aGlzLnN1Y2Nlc3MoKSlcbiAgICB9XG4gIH1cbiAgZGVsZXRlRGF0YXNyYyAoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxzdHJpbmc+KGRhdGFzcmNVcmxzLkRFTEVURSwgbnVsbCwge1xuICAgICAgcGFyYW1zOiB7IGlkIH1cbiAgICB9KVxuICAgIC8vIFRPRE86IOenu+i1sFxuICAgIC8vIC5waXBlKHRoaXMuc3VjY2VzcygpKVxuICB9XG4gIHRyeURhdGFzcmMgKGRhdGFzcmM6IERhdGFzcmMpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChkYXRhc3JjVXJscy5UUlksIGRhdGFzcmMsIHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSlcbiAgICAvLyBUT0RPOiDnp7votbBcbiAgICAvLyAucGlwZSh0YXAoXG4gICAgLy8gICAoKSA9PiB0aGlzLm56TXNnLnN1Y2Nlc3MoJ+a1i+ivleaIkOWKn++8gScpLFxuICAgIC8vICAgKCkgPT4gdGhpcy5uek1zZy5lcnJvcign5rWL6K+V5aSx6LSl77yBJylcbiAgICAvLyApKVxuICB9XG4gIGdldFByb3ZpZGVycyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RGF0YVByb3ZpZGVyW10+KGRhdGFzcmNVcmxzLkdFVF9BTExfUFJPVklERVJTKVxuICB9XG4gIGdldFBhcmFtc0J5UHJvdmlkZXJOYW1lIChwcm92aWRlck5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFByb3ZpZGVyUGFyYW1bXT4oZGF0YXNyY1VybHMuR0VUX1BBUkFNU19CWV9QUk9WSURFUl9OQU1FICsgcHJvdmlkZXJOYW1lKVxuICB9XG59XG4iXX0=