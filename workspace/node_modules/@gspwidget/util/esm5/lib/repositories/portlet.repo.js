/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addBaseUrl } from '../const';
import { EppPortlet } from '../types/portlet.type';
import { convertWidget } from './widget.repo';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
export var portletUrls = {
    GET_BY_ID: "portlet/",
    GET_USER_ALL: "portlet/all",
    SAVE: "portlet/",
    GET_BY_MODULE_ID: "portlet/findByModuleId",
    DELETE_BY_ID: "portlet/",
    GET_PAGE: "page/findByPortletId"
};
/** @type {?} */
export var portletOps = {
    SAVE: "portletop/save?portletId=",
    GET_BY_PORTLET_ID: "portletop/getallpagerole?portletId="
};
addBaseUrl(portletUrls);
addBaseUrl(portletOps);
var PortletRepo = /** @class */ (function () {
    function PortletRepo(http) {
        this.http = http;
    }
    /**
     * @param {?} portletId
     * @return {?}
     */
    PortletRepo.prototype.getPageByPortletId = /**
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.get(portletUrls.GET_PAGE, {
            params: { portletId: portletId }
        });
    };
    /**
     * @return {?}
     */
    PortletRepo.prototype.getPortlets = /**
     * @return {?}
     */
    function () {
        return this.http.get(portletUrls.GET_USER_ALL).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        function (portlets) { return portlets.map(convertPortlet); })));
    };
    /**
     * @param {?=} moduleId
     * @return {?}
     */
    PortletRepo.prototype.getPortletsByModuleId = /**
     * @param {?=} moduleId
     * @return {?}
     */
    function (moduleId) {
        return this.http.get(portletUrls.GET_BY_MODULE_ID, { params: moduleId ? { moduleId: moduleId } : null }).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        function (portlets) { return portlets.map(convertPortlet); })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PortletRepo.prototype.getPortletById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        // return this.storage.getPortletById(id)
        return this.http.get(portletUrls.GET_BY_ID + id).pipe(map(convertPortlet));
    };
    /**
     * @param {?} portlet
     * @return {?}
     */
    PortletRepo.prototype.savePortlet = /**
     * @param {?} portlet
     * @return {?}
     */
    function (portlet) {
        /** @type {?} */
        var serverPortlet = convertPortletInverse(portlet);
        return portlet.id
            ? this.http.post(portletUrls.SAVE, serverPortlet)
            : this.http.put(portletUrls.SAVE, serverPortlet);
    };
    /** portlet op */
    /**
     * portlet op
     * @param {?} portletId
     * @return {?}
     */
    PortletRepo.prototype.getPortletOps = /**
     * portlet op
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.get(portletOps.GET_BY_PORTLET_ID + portletId);
    };
    /**
     * @param {?} portletId
     * @param {?} opIds
     * @return {?}
     */
    PortletRepo.prototype.savePortletOps = /**
     * @param {?} portletId
     * @param {?} opIds
     * @return {?}
     */
    function (portletId, opIds) {
        return this.http.post(portletOps.SAVE + portletId, opIds);
    };
    /**
     * @param {?} portletId
     * @return {?}
     */
    PortletRepo.prototype.deletePortletById = /**
     * @param {?} portletId
     * @return {?}
     */
    function (portletId) {
        return this.http.delete(portletUrls.DELETE_BY_ID + portletId);
    };
    PortletRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PortletRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PortletRepo.ngInjectableDef = i0.defineInjectable({ factory: function PortletRepo_Factory() { return new PortletRepo(i0.inject(i1.HttpClient)); }, token: PortletRepo, providedIn: "root" });
    return PortletRepo;
}());
export { PortletRepo };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PortletRepo.prototype.http;
}
/**
 * portlet 后端 -> 前端, 前端 -> 后端 转换
 * @param {?} serverPortlet
 * @return {?}
 */
function convertPortlet(serverPortlet) {
    serverPortlet.widget = convertWidget(serverPortlet.widget);
    if (serverPortlet.propValues)
        serverPortlet.propValues = JSON.parse(serverPortlet.propValues);
    return (/** @type {?} */ (Object.assign(new EppPortlet(null), serverPortlet)));
}
/**
 * @param {?} portlet
 * @return {?}
 */
function convertPortletInverse(portlet) {
    /** @type {?} */
    var serverPortlet = tslib_1.__assign({}, portlet);
    delete serverPortlet.widget;
    serverPortlet.propValues = (/** @type {?} */ (JSON.stringify(portlet.propValues)));
    return serverPortlet;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGxldC5yZXBvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcHdpZGdldC91dGlsLyIsInNvdXJjZXMiOlsibGliL3JlcG9zaXRvcmllcy9wb3J0bGV0LnJlcG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUU5QyxNQUFNLEtBQU8sV0FBVyxHQUFHO0lBQ3pCLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFlBQVksRUFBRSxhQUFhO0lBQzNCLElBQUksRUFBRSxVQUFVO0lBQ2hCLGdCQUFnQixFQUFFLHdCQUF3QjtJQUMxQyxZQUFZLEVBQUUsVUFBVTtJQUN4QixRQUFRLEVBQUMsc0JBQXNCO0NBQ2hDOztBQUNELE1BQU0sS0FBTyxVQUFVLEdBQUc7SUFDeEIsSUFBSSxFQUFFLDJCQUEyQjtJQUNqQyxpQkFBaUIsRUFBRSxxQ0FBcUM7Q0FDekQ7QUFDRCxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDdkIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBRXRCO0lBS0UscUJBQ1UsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUN0QixDQUFDOzs7OztJQUVMLHdDQUFrQjs7OztJQUFsQixVQUFtQixTQUFnQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFTLFdBQVcsQ0FBQyxRQUFRLEVBQUM7WUFDaEQsTUFBTSxFQUFDLEVBQUMsU0FBUyxXQUFBLEVB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QXFCLENBQUUsT0FBbUI7O1FBQzNDLGFBQWEsd0JBQVEsT0FBTyxDQUFFO0lBQ3BDLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQTtJQUMzQixhQUFhLENBQUMsVUFBVSxHQUFHLG1CQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFPLENBQUE7SUFDcEUsT0FBTyxhQUFhLENBQUE7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgYWRkQmFzZVVybCB9IGZyb20gJy4uL2NvbnN0JztcbmltcG9ydCB7IFJvbGUgfSBmcm9tICcuLi90eXBlcy9pZ2l4LnR5cGUnO1xuaW1wb3J0IHsgRXBwUG9ydGxldCB9IGZyb20gJy4uL3R5cGVzL3BvcnRsZXQudHlwZSc7XG5pbXBvcnQgeyBjb252ZXJ0V2lkZ2V0IH0gZnJvbSAnLi93aWRnZXQucmVwbyc7XG5cbmV4cG9ydCBjb25zdCBwb3J0bGV0VXJscyA9IHtcbiAgR0VUX0JZX0lEOiBgcG9ydGxldC9gLFxuICBHRVRfVVNFUl9BTEw6IGBwb3J0bGV0L2FsbGAsXG4gIFNBVkU6IGBwb3J0bGV0L2AsXG4gIEdFVF9CWV9NT0RVTEVfSUQ6IGBwb3J0bGV0L2ZpbmRCeU1vZHVsZUlkYCxcbiAgREVMRVRFX0JZX0lEOiBgcG9ydGxldC9gLFxuICBHRVRfUEFHRTpgcGFnZS9maW5kQnlQb3J0bGV0SWRgXG59XG5leHBvcnQgY29uc3QgcG9ydGxldE9wcyA9IHtcbiAgU0FWRTogYHBvcnRsZXRvcC9zYXZlP3BvcnRsZXRJZD1gLFxuICBHRVRfQllfUE9SVExFVF9JRDogYHBvcnRsZXRvcC9nZXRhbGxwYWdlcm9sZT9wb3J0bGV0SWQ9YFxufVxuYWRkQmFzZVVybChwb3J0bGV0VXJscylcbmFkZEJhc2VVcmwocG9ydGxldE9wcylcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9ydGxldFJlcG8ge1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICkgeyB9XG5cbiAgZ2V0UGFnZUJ5UG9ydGxldElkKHBvcnRsZXRJZDpzdHJpbmcpe1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PG51bWJlcj4ocG9ydGxldFVybHMuR0VUX1BBR0Use1xuICAgICAgcGFyYW1zOntwb3J0bGV0SWR9XG4gICAgfSlcbiAgfVxuXG4gIGdldFBvcnRsZXRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxFcHBQb3J0bGV0W10+KHBvcnRsZXRVcmxzLkdFVF9VU0VSX0FMTCkucGlwZShcbiAgICAgIG1hcChwb3J0bGV0cyA9PiBwb3J0bGV0cy5tYXAoY29udmVydFBvcnRsZXQpKVxuICAgIClcbiAgfVxuICBnZXRQb3J0bGV0c0J5TW9kdWxlSWQgKG1vZHVsZUlkPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RXBwUG9ydGxldFtdPihcbiAgICAgIHBvcnRsZXRVcmxzLkdFVF9CWV9NT0RVTEVfSUQsXG4gICAgICB7IHBhcmFtczogbW9kdWxlSWQgPyB7IG1vZHVsZUlkIH0gOiBudWxsIH1cbiAgICApLnBpcGUobWFwKHBvcnRsZXRzID0+IHBvcnRsZXRzLm1hcChjb252ZXJ0UG9ydGxldCkpKVxuICB9XG4gIGdldFBvcnRsZXRCeUlkIChpZDogc3RyaW5nKSB7XG4gICAgLy8gcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRQb3J0bGV0QnlJZChpZClcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxFcHBQb3J0bGV0Pihwb3J0bGV0VXJscy5HRVRfQllfSUQgKyBpZCkucGlwZShcbiAgICAgIG1hcChjb252ZXJ0UG9ydGxldCksXG4gICAgICAvLyDlpoLmnpzor7fmsYLlh7rplJnvvIzkvJrov5Tlm57kuIDkuKogbnVsbO+8jOiAjOS4jeWBnOaOiVxuICAgICAgLy8gY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgLy8gICBjb25zdCBwID0gbmV3IEVwcFBvcnRsZXQobnVsbClcbiAgICAgIC8vICAgcC5pZCA9IGlkXG4gICAgICAvLyAgIHAubmFtZSA9ICcnXG4gICAgICAvLyAgIHJldHVybiBvZihwKVxuICAgICAgLy8gfSlcbiAgICApXG4gIH1cbiAgc2F2ZVBvcnRsZXQgKHBvcnRsZXQ6IEVwcFBvcnRsZXQpIHtcbiAgICBjb25zdCBzZXJ2ZXJQb3J0bGV0ID0gY29udmVydFBvcnRsZXRJbnZlcnNlKHBvcnRsZXQpXG4gICAgcmV0dXJuIHBvcnRsZXQuaWRcbiAgICAgID8gdGhpcy5odHRwLnBvc3Q8RXBwUG9ydGxldD4ocG9ydGxldFVybHMuU0FWRSwgc2VydmVyUG9ydGxldClcbiAgICAgIDogdGhpcy5odHRwLnB1dDxFcHBQb3J0bGV0Pihwb3J0bGV0VXJscy5TQVZFLCBzZXJ2ZXJQb3J0bGV0KVxuICB9XG5cbiAgLyoqIHBvcnRsZXQgb3AgKi9cbiAgZ2V0UG9ydGxldE9wcyAocG9ydGxldElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxSb2xlW10+KHBvcnRsZXRPcHMuR0VUX0JZX1BPUlRMRVRfSUQgKyBwb3J0bGV0SWQpXG4gIH1cbiAgc2F2ZVBvcnRsZXRPcHMgKHBvcnRsZXRJZDogc3RyaW5nLCBvcElkczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QocG9ydGxldE9wcy5TQVZFICsgcG9ydGxldElkLCBvcElkcylcbiAgfVxuICBkZWxldGVQb3J0bGV0QnlJZCAocG9ydGxldElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShwb3J0bGV0VXJscy5ERUxFVEVfQllfSUQgKyBwb3J0bGV0SWQpXG4gIH1cbn1cblxuLyoqIHBvcnRsZXQg5ZCO56uvIC0+IOWJjeerrywg5YmN56uvIC0+IOWQjuerryDovazmjaIgKi9cbmZ1bmN0aW9uIGNvbnZlcnRQb3J0bGV0IChzZXJ2ZXJQb3J0bGV0KSB7XG4gIHNlcnZlclBvcnRsZXQud2lkZ2V0ID0gY29udmVydFdpZGdldChzZXJ2ZXJQb3J0bGV0LndpZGdldClcbiAgaWYgKHNlcnZlclBvcnRsZXQucHJvcFZhbHVlcykgc2VydmVyUG9ydGxldC5wcm9wVmFsdWVzID0gSlNPTi5wYXJzZShzZXJ2ZXJQb3J0bGV0LnByb3BWYWx1ZXMpXG4gIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFcHBQb3J0bGV0KG51bGwpLCBzZXJ2ZXJQb3J0bGV0KSBhcyBFcHBQb3J0bGV0XG59XG5mdW5jdGlvbiBjb252ZXJ0UG9ydGxldEludmVyc2UgKHBvcnRsZXQ6IEVwcFBvcnRsZXQpIHtcbiAgY29uc3Qgc2VydmVyUG9ydGxldCA9IHsgLi4ucG9ydGxldCB9XG4gIGRlbGV0ZSBzZXJ2ZXJQb3J0bGV0LndpZGdldFxuICBzZXJ2ZXJQb3J0bGV0LnByb3BWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShwb3J0bGV0LnByb3BWYWx1ZXMpIGFzIGFueVxuICByZXR1cm4gc2VydmVyUG9ydGxldFxufVxuIl19