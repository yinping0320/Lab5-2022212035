/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { list2Tree } from '../misc';
import { Lang } from '../types/common.type';
import { BAPortlet } from '../types/portlet.type';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
export var igixUrls = {
    bo: {
        GET_ALL: "/api/dev/main/v1.0/business-objects"
    },
    funcOperations: {
        GET_BY_BO_ID: "/api/runtime/sys/v1.0/funcOperations/business/"
    },
    roleGroup: {
        GET_ALL: "/api/runtime/sys/v1.0/rolegroups/all"
    },
    role: {
        GET: "/api/runtime/sys/v1.0/roles",
    },
    userInfo: {
        // igix 的 userInfo 里有头像
        GET: "/api/runtime/sys/v1.0/userinfos?infoType=user"
        // GET: `http://dscloud.chec.bj.cn/api/runime/sys/v1.0/userinfos/setting`
    },
    func: {
        /**
         * 包含了所有菜单、联查，体积大、加载较慢
         */
        GET_ALL_WITH_INVOKE: "/api/runtime/sys/v1.0/functions/allFuncs",
        /**
         * 这个是 iGIX 我的应用中的菜单、功能组列表，数据量稍小，性能较好
         */
        GET_ALL: "/api/runtime/sys/v1.0/functions/funcGroups?funcType=4"
    },
    langs: {
        GET_ALL: "/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage"
    },
    qoDataset: {
        // GET_BO_TREE: `/api/gsp/bcc/v1.0/botreefornavvo/extension/query`,
        GET_ECP_BIZ_TREE: "/api/gsp/bcc/v1.0/ecpbiztree/extension/query",
        GET_DETAIL_BY_ID: "/api/gsp/bcc/v1.0/datasetdetail_frm/extension/retrieve/",
        GET_DETAIL_QUERY: "/api/gsp/bcc/v1.0/datasetdetail_frm/extension/query"
    },
    ba: {
        // GET_ALL_PORTLETS: `/api/ba/bap/v1.0/category/getCloudCategoryList?type=widget`,
        GET_ALL_PORTLETS: "/api/ba/bap/v1.0/widget/getCloudWidgetList?allWidgetList=true",
    }
    // TODO: su http://10.24.20.77:5200/api/dev/main/v1.0/business-objects/
    // http://localhost:5000/api/dev/main/v1.0/business-object-trees
};
var IgixRepo = /** @class */ (function () {
    function IgixRepo(http) {
        this.http = http;
    }
    /**
     * @param {?=} layer
     * @return {?}
     */
    IgixRepo.prototype.getBOTree = /**
     * @param {?=} layer
     * @return {?}
     */
    function (layer) {
        if (layer === void 0) { layer = Infinity; }
        return this.http.get(igixUrls.bo.GET_ALL).pipe(map((/**
         * @param {?} boList
         * @return {?}
         */
        function (boList) {
            return list2Tree(boList, {
                parentIdKey: 'parentID',
                ifIgnore: (/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.layer > layer; })
            });
        })));
    };
    /**
     * @param {?} boId
     * @return {?}
     */
    IgixRepo.prototype.getOpsByBOId = /**
     * @param {?} boId
     * @return {?}
     */
    function (boId) {
        return this.http.get(igixUrls.funcOperations.GET_BY_BO_ID + boId);
    };
    /** role, role group */
    /**
     * role, role group
     * @return {?}
     */
    IgixRepo.prototype.getRoleGroupTree = /**
     * role, role group
     * @return {?}
     */
    function () {
        return this.http.get(igixUrls.roleGroup.GET_ALL).pipe(map((/**
         * @param {?} roleGroups
         * @return {?}
         */
        function (roleGroups) {
            return list2Tree(roleGroups, {});
        })));
    };
    /**
     * @param {?} groupId
     * @return {?}
     */
    IgixRepo.prototype.getRolesByRoleGroupId = /**
     * @param {?} groupId
     * @return {?}
     */
    function (groupId) {
        return this.http.get(igixUrls.role.GET, {
            params: {
                param: JSON.stringify({ groupId: groupId })
            }
        }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.data; })));
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getAllRoles = /**
     * @return {?}
     */
    function () {
        return this.http.get(igixUrls.role.GET).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.data; })));
    };
    /** 获取部件列表需要的二级 bo tree */
    /**
     * 获取部件列表需要的二级 bo tree
     * @return {?}
     */
    IgixRepo.prototype.getFuncTree12 = /**
     * 获取部件列表需要的二级 bo tree
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.funcTree12)
            return of(this.funcTree12);
        return this.getAllFuncs()
            .pipe(map((/**
         * @param {?} funcs
         * @return {?}
         */
        function (funcs) {
            funcs = funcs.filter((/**
             * @param {?} func
             * @return {?}
             */
            function (func) { return parseInt(func.layer) < 3; }));
            _this.funcTree12 = list2Tree(funcs, {
                rootParentIdValue: '0',
                parentIdKey: 'parentId',
            });
            return _this.funcTree12;
        })));
    };
    /**
     * @param {?} moduleId
     * @return {?}
     */
    IgixRepo.prototype.getQoDatasetDetailsByModuleId = /**
     * @param {?} moduleId
     * @return {?}
     */
    function (moduleId) {
        return this.http.put(igixUrls.qoDataset.GET_DETAIL_QUERY, {}, {
            params: {
                entityFilter: JSON.stringify({
                    FilterConditions: [{
                            FilterField: 'moduleID',
                            Compare: 0,
                            Value: moduleId,
                            Relation: 0
                        }],
                    SortConditions: [],
                    IsUsePagination: true,
                    Pagination: {
                        PageIndex: 1,
                        PageSize: 20,
                        // TODO:
                        PageCount: 0,
                        TotalCount: 0
                    }
                })
            }
            // }, null).pipe(map(res => res.returnValue))
        }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.returnValue.result; })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgixRepo.prototype.getQoDatasetDetailById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.put(igixUrls.qoDataset.GET_DETAIL_BY_ID + id, {}).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.returnValue; })));
    };
    /**
     * @param {?=} reload
     * @return {?}
     */
    IgixRepo.prototype.getUserInfo = /**
     * @param {?=} reload
     * @return {?}
     */
    function (reload) {
        if (reload === void 0) { reload = false; }
        if (reload)
            this.userInfoPromise = null;
        if (!this.userInfoPromise)
            this.userInfoPromise = this.http
                .get(igixUrls.userInfo.GET)
                .toPromise();
        return from(this.userInfoPromise);
    };
    /**
     * @param {?=} reload
     * @return {?}
     */
    IgixRepo.prototype.getUserAvatar = /**
     * @param {?=} reload
     * @return {?}
     */
    function (reload) {
        if (reload === void 0) { reload = false; }
        return this.getUserInfo(reload).pipe(map((/**
         * @param {?} userInfo
         * @return {?}
         */
        function (userInfo) {
            if (userInfo && userInfo.userSetting && userInfo.userSetting.imgblob)
                return userInfo.userSetting.imgblob;
            return null;
        })));
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getAllFuncs = /**
     * @return {?}
     */
    function () {
        return this.http.get(igixUrls.func.GET_ALL);
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getBAPortletsAll = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(igixUrls.ba.GET_ALL_PORTLETS).pipe(
        // map(res => JSON.parse(res)),
        map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.data
            // .filter(p => p.tab === 1)
            .map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return Object.assign(new BAPortlet(), p); })); })));
    };
    /**
     * @return {?}
     */
    IgixRepo.prototype.getLangs = /**
     * @return {?}
     */
    function () {
        if (!this.getLangsPromise)
            this.getLangsPromise = this.http
                .get(igixUrls.langs.GET_ALL)
                .pipe(map((/**
             * @param {?} rtfLangs
             * @return {?}
             */
            function (rtfLangs) { return rtfLangs.map((/**
             * @param {?} rtfLang
             * @return {?}
             */
            function (rtfLang) { return new Lang(rtfLang.code, rtfLang.name); })); })))
                .toPromise();
        return this.getLangsPromise;
    };
    IgixRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IgixRepo.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ IgixRepo.ngInjectableDef = i0.defineInjectable({ factory: function IgixRepo_Factory() { return new IgixRepo(i0.inject(i1.HttpClient)); }, token: IgixRepo, providedIn: "root" });
    return IgixRepo;
}());
export { IgixRepo };
if (false) {
    /** @type {?} */
    IgixRepo.prototype.funcTree12;
    /**
     * 获取 igix 用户信息
     * \@param reload 默认为假，不再发出请求，使用已缓存的结果；真则重新请求
     * @type {?}
     */
    IgixRepo.prototype.userInfoPromise;
    /** @type {?} */
    IgixRepo.prototype.getLangsPromise;
    /**
     * @type {?}
     * @private
     */
    IgixRepo.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,