/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addBaseUrl } from '../const';
import { backendString2Json } from '../misc';
import { UtilService } from '../util.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../util.service";
/** @type {?} */
export var widgetUrls = {
    GET_BY_ID: "metaportlet/",
    GET_USER_ALL: "metaportlet/all",
    CREATE: "metaportlet/upload",
    EDIT: "metaportlet/editor",
    DELETE: "metaportlet/",
    GET_PORTLET: "portlet/findByMetaId",
};
addBaseUrl(widgetUrls);
/**
 * url 转换:
 * 服务端 url: /su/元部件名/文件路径
 * full url: host/runtime/web/metaportlet/su/元部件名/文件路径
 * @type {?}
 */
var WIDGET_PREFIX = location.origin + "/runtime/web/metaportlet"
/** widget 后端 -> 前端 转换 */
;
/**
 * widget 后端 -> 前端 转换
 * @param {?} widget
 * @return {?}
 */
export function convertWidget(widget) {
    widget.href = WIDGET_PREFIX + widget.href;
    widget.logoImgUrl = WIDGET_PREFIX + widget.logoImgUrl;
    widget.previewImgUrl = WIDGET_PREFIX + widget.previewImgUrl;
    widget.baseUrl = WIDGET_PREFIX + widget.baseUrl;
    widget.layout = widget.layout && JSON.parse(backendString2Json(widget.layout));
    return (/** @type {?} */ (widget));
}
var WidgetRepo = /** @class */ (function () {
    function WidgetRepo(http, util) {
        this.http = http;
        this.util = util;
    }
    /**
     * @return {?}
     */
    WidgetRepo.prototype.getWidgets = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(widgetUrls.GET_USER_ALL)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data.map(convertWidget); })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WidgetRepo.prototype.getWidgetById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http
            .get(widgetUrls.GET_BY_ID + id)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return convertWidget(data); })));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    WidgetRepo.prototype.uploadWidget = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return this.util.uploadFile(widgetUrls.CREATE, content);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    WidgetRepo.prototype.editorWidget = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        return this.util.uploadFile(widgetUrls.EDIT, content);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WidgetRepo.prototype.deleteWidget = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.delete(widgetUrls.DELETE + id, {});
    };
    /**
     * @param {?} id
     * @return {?}
     */
    WidgetRepo.prototype.findPortletByMeta = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(widgetUrls.GET_PORTLET, {
            params: { id: id }
        });
    };
    WidgetRepo.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WidgetRepo.ctorParameters = function () { return [
        { type: HttpClient },
        { type: UtilService }
    ]; };
    /** @nocollapse */ WidgetRepo.ngInjectableDef = i0.defineInjectable({ factory: function WidgetRepo_Factory() { return new WidgetRepo(i0.inject(i1.HttpClient), i0.inject(i2.UtilService)); }, token: WidgetRepo, providedIn: "root" });
    return WidgetRepo;
}());
export { WidgetRepo };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WidgetRepo.prototype.http;
    /**
     * @type {?}
     * @private
     */
    WidgetRepo.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LnJlcG8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3Nwd2lkZ2V0L3V0aWwvIiwic291cmNlcyI6WyJsaWIvcmVwb3NpdG9yaWVzL3dpZGdldC5yZXBvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7OztBQUU5QyxNQUFNLEtBQU8sVUFBVSxHQUFHO0lBQ3hCLFNBQVMsRUFBRSxjQUFjO0lBQ3pCLFlBQVksRUFBRSxpQkFBaUI7SUFDL0IsTUFBTSxFQUFFLG9CQUFvQjtJQUM1QixJQUFJLEVBQUUsb0JBQW9CO0lBQzFCLE1BQU0sRUFBQyxjQUFjO0lBQ3JCLFdBQVcsRUFBQyxzQkFBc0I7Q0FDbkM7QUFDRCxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7Ozs7Ozs7SUFPaEIsYUFBYSxHQUFNLFFBQVEsQ0FBQyxNQUFNLDZCQUEwQjtBQUNsRSx5QkFBeUI7Ozs7Ozs7QUFDekIsTUFBTSxVQUFVLGFBQWEsQ0FBRSxNQUFNO0lBQ25DLE1BQU0sQ0FBQyxJQUFJLEdBQUcsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUE7SUFDekMsTUFBTSxDQUFDLFVBQVUsR0FBRyxhQUFhLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQTtJQUNyRCxNQUFNLENBQUMsYUFBYSxHQUFHLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFBO0lBQzNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUE7SUFDL0MsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDOUUsT0FBTyxtQkFBQSxNQUFNLEVBQWMsQ0FBQTtBQUM3QixDQUFDO0FBRUQ7SUFLRSxvQkFDVSxJQUFnQixFQUNoQixJQUFpQjtRQURqQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFNBQUksR0FBSixJQUFJLENBQWE7SUFDdkIsQ0FBQzs7OztJQUVMLCtCQUFVOzs7SUFBVjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQWUsVUFBVSxDQUFDLFlBQVksQ0FBQzthQUMxQyxJQUFJLENBQ0gsR0FBRzs7OztRQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBdkIsQ0FBdUIsRUFBQyxDQUNyQyxDQUFBO0lBQ0wsQ0FBQzs7Ozs7SUFDRCxrQ0FBYTs7OztJQUFiLFVBQWUsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFhLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2FBQzFDLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQW5CLENBQW1CLEVBQUMsQ0FDakMsQ0FBQTtJQUNMLENBQUM7Ozs7O0lBQ0QsaUNBQVk7Ozs7SUFBWixVQUFjLE9BQXNDO1FBQ2xELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN6RCxDQUFDOzs7OztJQUNELGlDQUFZOzs7O0lBQVosVUFBYyxPQUFzQztRQUNsRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDdkQsQ0FBQzs7Ozs7SUFDRCxpQ0FBWTs7OztJQUFaLFVBQWMsRUFBVTtRQUN0QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFTLFVBQVUsQ0FBQyxNQUFNLEdBQUMsRUFBRSxFQUFDLEVBQ3BELENBQUMsQ0FBQTtJQUNKLENBQUM7Ozs7O0lBQ0Qsc0NBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQVM7UUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBUyxVQUFVLENBQUMsV0FBVyxFQUFDO1lBQ2xELE1BQU0sRUFBRyxFQUFDLEVBQUUsSUFBQSxFQUFDO1NBQ2QsQ0FBQyxDQUFBO0lBQ0osQ0FBQzs7Z0JBdENGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBcENRLFVBQVU7Z0JBTVYsV0FBVzs7O3FCQU5wQjtDQXlFQyxBQXZDRCxJQXVDQztTQXBDWSxVQUFVOzs7Ozs7SUFHbkIsMEJBQXdCOzs7OztJQUN4QiwwQkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgYWRkQmFzZVVybCB9IGZyb20gJy4uL2NvbnN0JztcbmltcG9ydCB7IGJhY2tlbmRTdHJpbmcySnNvbiB9IGZyb20gJy4uL21pc2MnO1xuaW1wb3J0IHsgV2lkZ2V0SW5mbyB9IGZyb20gJy4uL3R5cGVzL3dpZGdldC50eXBlJztcbmltcG9ydCB7IFV0aWxTZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbC5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IHdpZGdldFVybHMgPSB7XG4gIEdFVF9CWV9JRDogYG1ldGFwb3J0bGV0L2AsXG4gIEdFVF9VU0VSX0FMTDogYG1ldGFwb3J0bGV0L2FsbGAsXG4gIENSRUFURTogYG1ldGFwb3J0bGV0L3VwbG9hZGAsXG4gIEVESVQ6IGBtZXRhcG9ydGxldC9lZGl0b3JgLFxuICBERUxFVEU6YG1ldGFwb3J0bGV0L2AsXG4gIEdFVF9QT1JUTEVUOmBwb3J0bGV0L2ZpbmRCeU1ldGFJZGAsXG59XG5hZGRCYXNlVXJsKHdpZGdldFVybHMpXG5cbi8qKlxuICogdXJsIOi9rOaNojpcbiAqIOacjeWKoeerryB1cmw6IC9zdS/lhYPpg6jku7blkI0v5paH5Lu26Lev5b6EXG4gKiBmdWxsIHVybDogaG9zdC9ydW50aW1lL3dlYi9tZXRhcG9ydGxldC9zdS/lhYPpg6jku7blkI0v5paH5Lu26Lev5b6EXG4gKi9cbmNvbnN0IFdJREdFVF9QUkVGSVggPSBgJHtsb2NhdGlvbi5vcmlnaW59L3J1bnRpbWUvd2ViL21ldGFwb3J0bGV0YFxuLyoqIHdpZGdldCDlkI7nq68gLT4g5YmN56uvIOi9rOaNoiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRXaWRnZXQgKHdpZGdldCkge1xuICB3aWRnZXQuaHJlZiA9IFdJREdFVF9QUkVGSVggKyB3aWRnZXQuaHJlZlxuICB3aWRnZXQubG9nb0ltZ1VybCA9IFdJREdFVF9QUkVGSVggKyB3aWRnZXQubG9nb0ltZ1VybFxuICB3aWRnZXQucHJldmlld0ltZ1VybCA9IFdJREdFVF9QUkVGSVggKyB3aWRnZXQucHJldmlld0ltZ1VybFxuICB3aWRnZXQuYmFzZVVybCA9IFdJREdFVF9QUkVGSVggKyB3aWRnZXQuYmFzZVVybFxuICB3aWRnZXQubGF5b3V0ID0gd2lkZ2V0LmxheW91dCAmJiBKU09OLnBhcnNlKGJhY2tlbmRTdHJpbmcySnNvbih3aWRnZXQubGF5b3V0KSlcbiAgcmV0dXJuIHdpZGdldCBhcyBXaWRnZXRJbmZvXG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFdpZGdldFJlcG8ge1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSB1dGlsOiBVdGlsU2VydmljZVxuICApIHsgfVxuXG4gIGdldFdpZGdldHMgKCkge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQ8V2lkZ2V0SW5mb1tdPih3aWRnZXRVcmxzLkdFVF9VU0VSX0FMTClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoZGF0YSA9PiBkYXRhLm1hcChjb252ZXJ0V2lkZ2V0KSlcbiAgICAgIClcbiAgfVxuICBnZXRXaWRnZXRCeUlkIChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxXaWRnZXRJbmZvPih3aWRnZXRVcmxzLkdFVF9CWV9JRCArIGlkKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChkYXRhID0+IGNvbnZlcnRXaWRnZXQoZGF0YSkpXG4gICAgICApXG4gIH1cbiAgdXBsb2FkV2lkZ2V0IChjb250ZW50OiB7IFtrZXk6IHN0cmluZ106IEZpbGUgfCBhbnkgfSkge1xuICAgIHJldHVybiB0aGlzLnV0aWwudXBsb2FkRmlsZSh3aWRnZXRVcmxzLkNSRUFURSwgY29udGVudClcbiAgfVxuICBlZGl0b3JXaWRnZXQgKGNvbnRlbnQ6IHsgW2tleTogc3RyaW5nXTogRmlsZSB8IGFueSB9KSB7XG4gICAgcmV0dXJuIHRoaXMudXRpbC51cGxvYWRGaWxlKHdpZGdldFVybHMuRURJVCwgY29udGVudClcbiAgfVxuICBkZWxldGVXaWRnZXQgKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZTxzdHJpbmc+KHdpZGdldFVybHMuREVMRVRFK2lkLHtcbiAgICB9KVxuICB9XG4gIGZpbmRQb3J0bGV0QnlNZXRhKGlkOnN0cmluZyl7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8bnVtYmVyPih3aWRnZXRVcmxzLkdFVF9QT1JUTEVULHtcbiAgICAgIHBhcmFtcyA6IHtpZH1cbiAgICB9KVxuICB9XG59XG4iXX0=