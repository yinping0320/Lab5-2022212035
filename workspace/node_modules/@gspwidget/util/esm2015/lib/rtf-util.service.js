/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
/** @type {?} */
const WINDOW_RTF_KEY = 'gspframeworkService';
/**
 * @record
 */
export function RtfTabChangeEvent() { }
if (false) {
    /** @type {?} */
    RtfTabChangeEvent.prototype.appEntrance;
    /** @type {?} */
    RtfTabChangeEvent.prototype.appId;
    /** @type {?} */
    RtfTabChangeEvent.prototype.appType;
    /** @type {?} */
    RtfTabChangeEvent.prototype.funcId;
    /** @type {?} */
    RtfTabChangeEvent.prototype.tabId;
    /** @type {?} */
    RtfTabChangeEvent.prototype.tabName;
}
export class RtfUtilService {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
    }
    // TODO: queryParamArray 是个 array 就行
    /**
     * @param {?} funcId
     * @param {?=} queryParamArray
     * @param {?=} tabId
     * @param {?=} isReload
     * @return {?}
     */
    openMenu(funcId, queryParamArray, tabId, isReload) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'menu',
            funcId, tabId, isReload,
            appId: '', appEntrance: '',
            queryStringParams: new Map(queryParamArray)
        })));
    }
    /**
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    closeMenu(funcId, tabId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.close((/** @type {?} */ ({
            appType: 'menu',
            funcId, tabId,
            appId: '', appEntrance: ''
        })));
    }
    /**
     * @param {?} appId
     * @return {?}
     */
    openApp(appId) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu((/** @type {?} */ ({
            appType: 'app',
            funcId: '',
            appId,
            appEntrance: '',
        })));
    }
    /**
     * @return {?}
     */
    openUserInfoMenu() {
        const { rtf } = window[WINDOW_RTF_KEY];
        /** @type {?} */
        const frmEventSvc = rtf.frmEvent;
        /** @type {?} */
        const sessionSvc = rtf.adapter.adatperSerice().session;
        this.translate.get('userInfo').subscribe((/**
         * @param {?} txt
         * @return {?}
         */
        txt => {
            frmEventSvc.eventFire(`farrisapp-click`, {
                active: false,
                code: 'userInfo',
                src: '/platform/runtime/sys/web/userinfo/index.html',
                sessionid: sessionSvc.getUserSessionId(),
                id: 'userinfo',
                appType: '',
                FuncName: txt
            });
        }));
    }
    /**
     * @param {?} route
     * @return {?}
     */
    closeCurRtfTab(route) {
        const { tabId, funcId } = route.snapshot.queryParams;
        this.closeMenu(funcId, tabId);
    }
    /**
     * @param {?} route
     * @param {?=} condition
     * @return {?}
     */
    onRtfTabChangeToMe(route, condition) {
        /** @type {?} */
        const onRtfTabChangeToMe$ = new EventEmitter();
        const { tabId: curTabId } = route.snapshot.queryParams;
        onRtfTabChange().subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!condition)
                condition = (/**
                 * @param {?} pToTabId
                 * @param {?} pCurTabId
                 * @return {?}
                 */
                (pToTabId, pCurTabId) => pToTabId === pCurTabId);
            if (condition(e.tabId, curTabId)) {
                onRtfTabChangeToMe$.emit(e);
            }
        }));
        return onRtfTabChangeToMe$;
    }
}
RtfUtilService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RtfUtilService.ctorParameters = () => [
    { type: TranslateService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RtfUtilService.prototype.translate;
}
/** @type {?} */
const onRtfTabChange$ = new EventEmitter();
/** @type {?} */
let funcSwitchEventRegistered = false
/** 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上 */
;
/**
 * 用函数是为了延迟注册事件，否则 rtf service 可能还没挂在 window 上
 * @return {?}
 */
export function onRtfTabChange() {
    if (!funcSwitchEventRegistered && window[WINDOW_RTF_KEY]) {
        funcSwitchEventRegistered = true;
        window[WINDOW_RTF_KEY].rtf.frmEvent.eventListener('funcSwitchEvent', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            onRtfTabChange$.emit(e);
        }));
    }
    return onRtfTabChange$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnRmLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvdXRpbC8iLCJzb3VyY2VzIjpbImxpYi9ydGYtdXRpbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7TUFHakQsY0FBYyxHQUFHLHFCQUFxQjs7OztBQUU1Qyx1Q0FPQzs7O0lBTkMsd0NBQW1COztJQUNuQixrQ0FBYTs7SUFDYixvQ0FBZTs7SUFDZixtQ0FBYzs7SUFDZCxrQ0FBYTs7SUFDYixvQ0FBZTs7QUFJakIsTUFBTSxPQUFPLGNBQWM7Ozs7SUFFekIsWUFDVSxTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtJQUNqQyxDQUFDOzs7Ozs7Ozs7SUFHTCxRQUFRLENBQUUsTUFBYyxFQUFFLGVBQXFDLEVBQUUsS0FBYyxFQUFFLFFBQWtCO1FBQ2pHLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBQTtZQUNwRCxPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUTtZQUN2QixLQUFLLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFO1lBQzFCLGlCQUFpQixFQUFFLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztTQUM1QyxFQUFjLENBQUMsQ0FBQTtJQUNsQixDQUFDOzs7Ozs7SUFDRCxTQUFTLENBQUUsTUFBYyxFQUFFLEtBQWM7UUFDdkMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFBO1lBQ2pELE9BQU8sRUFBRSxNQUFNO1lBQ2YsTUFBTSxFQUFF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ZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgQXBwT3B0aW9ucyB9IGZyb20gJy4uL3B1YmxpYy1hcGknO1xuXG5jb25zdCBXSU5ET1dfUlRGX0tFWSA9ICdnc3BmcmFtZXdvcmtTZXJ2aWNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFJ0ZlRhYkNoYW5nZUV2ZW50IHtcbiAgYXBwRW50cmFuY2U6IHN0cmluZ1xuICBhcHBJZDogc3RyaW5nXG4gIGFwcFR5cGU6IHN0cmluZ1xuICBmdW5jSWQ6IHN0cmluZ1xuICB0YWJJZDogc3RyaW5nXG4gIHRhYk5hbWU6IHN0cmluZ1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUnRmVXRpbFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZVxuICApIHsgfVxuXG4gIC8vIFRPRE86IHF1ZXJ5UGFyYW1BcnJheSDmmK/kuKogYXJyYXkg5bCx6KGMXG4gIG9wZW5NZW51IChmdW5jSWQ6IHN0cmluZywgcXVlcnlQYXJhbUFycmF5PzogTWFwPHN0cmluZywgc3RyaW5nPiwgdGFiSWQ/OiBzdHJpbmcsIGlzUmVsb2FkPzogYm9vbGVhbikge1xuICAgICh3aW5kb3cgYXMgYW55KS5nc3BmcmFtZXdvcmtTZXJ2aWNlLnJ0Zi5mdW5jLm9wZW5NZW51KHtcbiAgICAgIGFwcFR5cGU6ICdtZW51JyxcbiAgICAgIGZ1bmNJZCwgdGFiSWQsIGlzUmVsb2FkLFxuICAgICAgYXBwSWQ6ICcnLCBhcHBFbnRyYW5jZTogJycsXG4gICAgICBxdWVyeVN0cmluZ1BhcmFtczogbmV3IE1hcChxdWVyeVBhcmFtQXJyYXkpXG4gICAgfSBhcyBBcHBPcHRpb25zKVxuICB9XG4gIGNsb3NlTWVudSAoZnVuY0lkOiBzdHJpbmcsIHRhYklkPzogc3RyaW5nKSB7XG4gICAgKHdpbmRvdyBhcyBhbnkpLmdzcGZyYW1ld29ya1NlcnZpY2UucnRmLmZ1bmMuY2xvc2Uoe1xuICAgICAgYXBwVHlwZTogJ21lbnUnLFxuICAgICAgZnVuY0lkLCB0YWJJZCxcbiAgICAgIGFwcElkOiAnJywgYXBwRW50cmFuY2U6ICcnXG4gICAgfSBhcyBBcHBPcHRpb25zKVxuICB9XG4gIG9wZW5BcHAgKGFwcElkOiBzdHJpbmcpIHtcbiAgICAod2luZG93IGFzIGFueSkuZ3NwZnJhbWV3b3JrU2VydmljZS5ydGYuZnVuYy5vcGVuTWVudSh7XG4gICAgICBhcHBUeXBlOiAnYXBwJyxcbiAgICAgIGZ1bmNJZDogJycsXG4gICAgICBhcHBJZCxcbiAgICAgIGFwcEVudHJhbmNlOiAnJyxcbiAgICB9IGFzIEFwcE9wdGlvbnMpO1xuICB9XG4gIHB1YmxpYyBvcGVuVXNlckluZm9NZW51ICgpIHtcbiAgICBjb25zdCB7IHJ0ZiB9ID0gd2luZG93W1dJTkRPV19SVEZfS0VZXVxuICAgIGNvbnN0IGZybUV2ZW50U3ZjID0gcnRmLmZybUV2ZW50XG4gICAgY29uc3Qgc2Vzc2lvblN2YyA9IHJ0Zi5hZGFwdGVyLmFkYXRwZXJTZXJpY2UoKS5zZXNzaW9uXG4gICAgdGhpcy50cmFuc2xhdGUuZ2V0KCd1c2VySW5mbycpLnN1YnNjcmliZSh0eHQgPT4ge1xuICAgICAgZnJtRXZlbnRTdmMuZXZlbnRGaXJlKGBmYXJyaXNhcHAtY2xpY2tgLCB7XG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGNvZGU6ICd1c2VySW5mbycsXG4gICAgICAgIHNyYzogJy9wbGF0Zm9ybS9ydW50aW1lL3N5cy93ZWIvdXNlcmluZm8vaW5kZXguaHRtbCcsXG4gICAgICAgIHNlc3Npb25pZDogc2Vzc2lvblN2Yy5nZXRVc2VyU2Vzc2lvbklkKCksXG4gICAgICAgIGlkOiAndXNlcmluZm8nLFxuICAgICAgICBhcHBUeXBlOiAnJyxcbiAgICAgICAgRnVuY05hbWU6IHR4dFxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIGNsb3NlQ3VyUnRmVGFiIChyb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCB7IHRhYklkLCBmdW5jSWQgfSA9IHJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zXG4gICAgdGhpcy5jbG9zZU1lbnUoZnVuY0lkLCB0YWJJZClcbiAgfVxuXG4gIG9uUnRmVGFiQ2hhbmdlVG9NZSAocm91dGU6IEFjdGl2YXRlZFJvdXRlLCBjb25kaXRpb24/OiAodG9UYWJJZDogc3RyaW5nLCBjdXJUYWJJZDogc3RyaW5nKSA9PiBib29sZWFuKSB7XG4gICAgY29uc3Qgb25SdGZUYWJDaGFuZ2VUb01lJCA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICAgIGNvbnN0IHsgdGFiSWQ6IGN1clRhYklkIH0gPSByb3V0ZS5zbmFwc2hvdC5xdWVyeVBhcmFtc1xuICAgIG9uUnRmVGFiQ2hhbmdlKCkuc3Vic2NyaWJlKChlOiBSdGZUYWJDaGFuZ2VFdmVudCkgPT4ge1xuICAgICAgaWYgKCFjb25kaXRpb24pIGNvbmRpdGlvbiA9IChwVG9UYWJJZDogc3RyaW5nLCBwQ3VyVGFiSWQ6IHN0cmluZykgPT4gcFRvVGFiSWQgPT09IHBDdXJUYWJJZFxuICAgICAgaWYgKGNvbmRpdGlvbihlLnRhYklkLCBjdXJUYWJJZCkpIHtcbiAgICAgICAgb25SdGZUYWJDaGFuZ2VUb01lJC5lbWl0KGUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gb25SdGZUYWJDaGFuZ2VUb01lJFxuICB9XG59XG5cbmNvbnN0IG9uUnRmVGFiQ2hhbmdlJCA9IG5ldyBFdmVudEVtaXR0ZXI8UnRmVGFiQ2hhbmdlRXZlbnQ+KClcbmxldCBmdW5jU3dpdGNoRXZlbnRSZWdpc3RlcmVkID0gZmFsc2Vcbi8qKiDnlKjlh73mlbDmmK/kuLrkuoblu7bov5/ms6jlhozkuovku7bvvIzlkKbliJkgcnRmIHNlcnZpY2Ug5Y+v6IO96L+Y5rKh5oyC5ZyoIHdpbmRvdyDkuIogKi9cbmV4cG9ydCBmdW5jdGlvbiBvblJ0ZlRhYkNoYW5nZSAoKSB7XG4gIGlmICghZnVuY1N3aXRjaEV2ZW50UmVnaXN0ZXJlZCAmJiB3aW5kb3dbV0lORE9XX1JURl9LRVldKSB7XG4gICAgZnVuY1N3aXRjaEV2ZW50UmVnaXN0ZXJlZCA9IHRydWVcbiAgICB3aW5kb3dbV0lORE9XX1JURl9LRVldLnJ0Zi5mcm1FdmVudC5ldmVudExpc3RlbmVyKCdmdW5jU3dpdGNoRXZlbnQnLCAoZTogUnRmVGFiQ2hhbmdlRXZlbnQpID0+IHtcbiAgICAgIG9uUnRmVGFiQ2hhbmdlJC5lbWl0KGUpXG4gICAgfSlcbiAgfVxuICByZXR1cm4gb25SdGZUYWJDaGFuZ2UkXG59XG4iXX0=