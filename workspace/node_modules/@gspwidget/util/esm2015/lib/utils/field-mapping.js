/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段转换器
 * 为了解决前端 - 服务端某些字段不一致，在读取、保存端动态转换
 */
/**
 * 映射表
 * 后端名：前端名
 * @type {?}
 */
const fieldMapping = {
    pageInfo: {
        title: 'name',
    },
    portlet: {},
    widget: {}
}
/** 反向映射表，自动把上面的正向表反过来 */
;
const ɵ0 = /**
 * @return {?}
 */
function () {
    /** @type {?} */
    let resultMapping = {};
    Object.keys(fieldMapping).forEach((/**
     * @param {?} entityType
     * @return {?}
     */
    entityType => {
        resultMapping[entityType] = {};
        Object.keys(fieldMapping[entityType]).forEach((/**
         * @param {?} originKey
         * @return {?}
         */
        originKey => {
            resultMapping[entityType][fieldMapping[entityType][originKey]] = originKey;
        }));
    }));
    return resultMapping;
};
/**
 * 反向映射表，自动把上面的正向表反过来
 * @type {?}
 */
const fieldMappingInverse = ((ɵ0))()
/**
 * 接受原对象，转换出新对象
 * @param originEntity 待转换原对象
 * @param entityType 对象类型，应为 fieldMapping 的属性名
 * @param inverse 是否反向转换（默认为后端 -> 前端）
 */
;
/**
 * 接受原对象，转换出新对象
 * @template T
 * @param {?} originEntity 待转换原对象
 * @param {?} entityType 对象类型，应为 fieldMapping 的属性名
 * @param {?=} inverse 是否反向转换（默认为后端 -> 前端）
 * @return {?}
 */
export function mapEntityFeilds(originEntity, entityType, inverse = false) {
    /** @type {?} */
    let mapping = inverse ? fieldMappingInverse : fieldMapping;
    /** @type {?} */
    let mappedEntity = {};
    Object.keys(originEntity).forEach((/**
     * @param {?} key
     * @return {?}
     */
    key => {
        if (mapping[entityType].hasOwnProperty(key)) {
            mappedEntity[mapping[entityType][key]] = originEntity[key];
        }
        else {
            mappedEntity[key] = originEntity[key];
        }
    }));
    return (/** @type {?} */ (mappedEntity));
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtbWFwcGluZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3B3aWRnZXQvdXRpbC8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9maWVsZC1tYXBwaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7TUFVTSxZQUFZLEdBQUc7SUFDbkIsUUFBUSxFQUFFO1FBQ1IsS0FBSyxFQUFFLE1BQU07S0FFZDtJQUNELE9BQU8sRUFBRSxFQUVSO0lBQ0QsTUFBTSxFQUFFLEVBRVA7Q0FDRjtBQUNELHlCQUF5Qjs7Ozs7QUFDSTs7UUFDdkIsYUFBYSxHQUFHLEVBQUU7SUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPOzs7O0lBQUMsVUFBVSxDQUFDLEVBQUU7UUFDN0MsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxTQUFTLENBQUMsRUFBRTtZQUN4RCxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFBO1FBQzVFLENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQyxFQUFDLENBQUE7SUFDRixPQUFPLGFBQWEsQ0FBQTtBQUN0QixDQUFDOzs7OztNQVRLLG1CQUFtQixHQUFHLE1BUzFCLEVBQUU7QUFFSjs7Ozs7R0FLRzs7Ozs7Ozs7OztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUksWUFBWSxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsS0FBSzs7UUFDdEUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFlBQVk7O1FBQ3RELFlBQVksR0FBRyxFQUFFO0lBRXJCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTzs7OztJQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQzNEO2FBQU07WUFDTCxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3RDO0lBQ0gsQ0FBQyxFQUFDLENBQUE7SUFDRixPQUFPLG1CQUFBLFlBQVksRUFBSyxDQUFBO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOWtl+autei9rOaNouWZqFxuICog5Li65LqG6Kej5Yaz5YmN56uvIC0g5pyN5Yqh56uv5p+Q5Lqb5a2X5q615LiN5LiA6Ie077yM5Zyo6K+75Y+W44CB5L+d5a2Y56uv5Yqo5oCB6L2s5o2iXG4gKi9cblxuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG4vKipcbiAqIOaYoOWwhOihqFxuICog5ZCO56uv5ZCN77ya5YmN56uv5ZCNXG4gKi9cbmNvbnN0IGZpZWxkTWFwcGluZyA9IHtcbiAgcGFnZUluZm86IHtcbiAgICB0aXRsZTogJ25hbWUnLFxuICAgIC8vIGNvbmZpZzogJ3NpbXBsZUxheW91dCdcbiAgfSxcbiAgcG9ydGxldDoge1xuXG4gIH0sXG4gIHdpZGdldDoge1xuXG4gIH1cbn1cbi8qKiDlj43lkJHmmKDlsITooajvvIzoh6rliqjmiorkuIrpnaLnmoTmraPlkJHooajlj43ov4fmnaUgKi9cbmNvbnN0IGZpZWxkTWFwcGluZ0ludmVyc2UgPSAoZnVuY3Rpb24gKCkge1xuICBsZXQgcmVzdWx0TWFwcGluZyA9IHt9XG4gIE9iamVjdC5rZXlzKGZpZWxkTWFwcGluZykuZm9yRWFjaChlbnRpdHlUeXBlID0+IHtcbiAgICByZXN1bHRNYXBwaW5nW2VudGl0eVR5cGVdID0ge31cbiAgICBPYmplY3Qua2V5cyhmaWVsZE1hcHBpbmdbZW50aXR5VHlwZV0pLmZvckVhY2gob3JpZ2luS2V5ID0+IHtcbiAgICAgIHJlc3VsdE1hcHBpbmdbZW50aXR5VHlwZV1bZmllbGRNYXBwaW5nW2VudGl0eVR5cGVdW29yaWdpbktleV1dID0gb3JpZ2luS2V5XG4gICAgfSlcbiAgfSlcbiAgcmV0dXJuIHJlc3VsdE1hcHBpbmdcbn0pKClcblxuLyoqXG4gKiDmjqXlj5fljp/lr7nosaHvvIzovazmjaLlh7rmlrDlr7nosaFcbiAqIEBwYXJhbSBvcmlnaW5FbnRpdHkg5b6F6L2s5o2i5Y6f5a+56LGhXG4gKiBAcGFyYW0gZW50aXR5VHlwZSDlr7nosaHnsbvlnovvvIzlupTkuLogZmllbGRNYXBwaW5nIOeahOWxnuaAp+WQjVxuICogQHBhcmFtIGludmVyc2Ug5piv5ZCm5Y+N5ZCR6L2s5o2i77yI6buY6K6k5Li65ZCO56uvIC0+IOWJjeerr++8iVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwRW50aXR5RmVpbGRzPFQ+KG9yaWdpbkVudGl0eSwgZW50aXR5VHlwZSwgaW52ZXJzZSA9IGZhbHNlKSB7XG4gIGxldCBtYXBwaW5nID0gaW52ZXJzZSA/IGZpZWxkTWFwcGluZ0ludmVyc2UgOiBmaWVsZE1hcHBpbmdcbiAgbGV0IG1hcHBlZEVudGl0eSA9IHt9XG5cbiAgT2JqZWN0LmtleXMob3JpZ2luRW50aXR5KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKG1hcHBpbmdbZW50aXR5VHlwZV0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbWFwcGVkRW50aXR5W21hcHBpbmdbZW50aXR5VHlwZV1ba2V5XV0gPSBvcmlnaW5FbnRpdHlba2V5XVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXBwZWRFbnRpdHlba2V5XSA9IG9yaWdpbkVudGl0eVtrZXldXG4gICAgfVxuICB9KVxuICByZXR1cm4gbWFwcGVkRW50aXR5IGFzIFRcbn1cblxuLyoqXG4gKiDov5Tlm54gcnhqcyDnmoQgbWFwIOaTjeS9nOespuiwg+eUqO+8jOeUqOazle+8mlxuICogYGBganNcbiAqIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKG1hcEZlaWxkczxQYWdlSW5mbz4oJ3BhZ2VJbmZvJykpXG4gKiBgYGBcbiAqIOWPr+WwhiBodHRwIOivt+axguW+l+WIsOeahOWvueixoSBwaXBlIOi9rOaNouS4uuWJjeerr+mAgueUqOWtl+aute+8m+WPr+aOpeWPl+aVsOe7hOaIluWvueixoe+8jOWPr+iHquWKqOWMuuWIhuOAglxuICogXG4gKiBAcGFyYW0gZW50aXR5VHlwZSDlr7nosaHnsbvlnovvvIzlupTkuLogZmllbGRNYXBwaW5nIOeahOWxnuaAp+WQjVxuICogQHBhcmFtIGludmVyc2Ug5piv5ZCm5Y+N5ZCR6L2s5o2i77yI6buY6K6k5Li65ZCO56uvIC0+IOWJjeerr++8iVxuICovXG4vLyBleHBvcnQgZnVuY3Rpb24gbWFwTGlzdDxUPiAoZW50aXR5VHlwZTogc3RyaW5nLCBpbnZlcnNlID0gZmFsc2UpIHtcbi8vICAgcmV0dXJuIG1hcChvcmlnaW5EYXRhID0+IHtcbi8vICAgICBpZiAob3JpZ2luRGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4vLyAgICAgICByZXR1cm4gb3JpZ2luRGF0YS5tYXAoZW50aXR5ID0+IHtcbi8vICAgICAgICAgcmV0dXJuIG1hcEVudGl0eUZlaWxkczxUPihlbnRpdHksIGVudGl0eVR5cGUsIGludmVyc2UpXG4vLyAgICAgICB9KVxuLy8gICAgIH1cbi8vICAgfSlcbi8vIH1cbi8vIGV4cG9ydCBmdW5jdGlvbiBtYXBFbnRpdHk8VD4gKGVudGl0eVR5cGU6IHN0cmluZywgaW52ZXJzZSA9IGZhbHNlKSB7XG4vLyAgIHJldHVybiBtYXAob3JpZ2luRGF0YSA9PiB7XG4vLyAgICAgaWYgKCEgKG9yaWdpbkRhdGEgaW5zdGFuY2VvZiBBcnJheSkpIHtcbi8vICAgICAgIHJldHVybiBtYXBFbnRpdHlGZWlsZHM8VD4ob3JpZ2luRGF0YSwgZW50aXR5VHlwZSwgaW52ZXJzZSlcbi8vICAgICB9XG4vLyAgIH0pXG4vLyB9XG4iXX0=