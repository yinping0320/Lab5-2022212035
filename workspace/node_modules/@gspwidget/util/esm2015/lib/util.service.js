/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class UtilService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    // TODO: 移走
    /**
     * @param {?} url
     * @param {?} content
     * @return {?}
     */
    uploadFile(url, content) {
        /** @type {?} */
        const formData = new FormData();
        Object.keys(content).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            // TODO: 判断文件类型、append name 为啥去掉了？问阳仔
            if (key === 'file') {
                formData.append(key, content[key]);
            }
            else if (key === 'i18nName' || key === 'i18nDesc') {
                formData.append(key, JSON.stringify(content[key]));
            }
            else {
                formData.append(key, content[key]);
            }
        }));
        return this.http.post(url, formData, { responseType: 'text' });
    }
}
UtilService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UtilService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ UtilService.ngInjectableDef = i0.defineInjectable({ factory: function UtilService_Factory() { return new UtilService(i0.inject(i1.HttpClient)); }, token: UtilService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    UtilService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcHdpZGdldC91dGlsLyIsInNvdXJjZXMiOlsibGliL3V0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7OztBQUtsRCxNQUFNLE9BQU8sV0FBVzs7OztJQUN0QixZQUNVLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFDdEIsQ0FBQzs7Ozs7OztJQUdMLFVBQVUsQ0FBRSxHQUFXLEVBQUUsT0FBc0M7O2NBQ3ZELFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUNqQyxxQ0FBcUM7WUFDckMsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO2dCQUNsQixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTthQUNuQztpQkFBTSxJQUFJLEdBQUcsS0FBSyxVQUFVLElBQUUsR0FBRyxLQUFLLFVBQVUsRUFBRTtnQkFDakQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ25EO2lCQUFNO2dCQUNMLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ25DO1FBQ0gsQ0FBQyxFQUFDLENBQUE7UUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUNoRSxDQUFDOzs7WUF0QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBSlEsVUFBVTs7Ozs7Ozs7SUFPZiwyQkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBVdGlsU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICkgeyB9XG5cbiAgLy8gVE9ETzog56e76LWwXG4gIHVwbG9hZEZpbGUgKHVybDogc3RyaW5nLCBjb250ZW50OiB7IFtrZXk6IHN0cmluZ106IEZpbGUgfCBhbnkgfSkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICBPYmplY3Qua2V5cyhjb250ZW50KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAvLyBUT0RPOiDliKTmlq3mlofku7bnsbvlnovjgIFhcHBlbmQgbmFtZSDkuLrllaXljrvmjonkuobvvJ/pl67pmLPku5RcbiAgICAgIGlmIChrZXkgPT09ICdmaWxlJykge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBjb250ZW50W2tleV0pXG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2kxOG5OYW1lJ3x8a2V5ID09PSAnaTE4bkRlc2MnKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIEpTT04uc3RyaW5naWZ5KGNvbnRlbnRba2V5XSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBjb250ZW50W2tleV0pXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBmb3JtRGF0YSwgeyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KVxuICB9XG59XG4iXX0=