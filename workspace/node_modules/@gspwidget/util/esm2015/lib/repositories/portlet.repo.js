/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addBaseUrl } from '../const';
import { EppPortlet } from '../types/portlet.type';
import { convertWidget } from './widget.repo';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
export const portletUrls = {
    GET_BY_ID: `portlet/`,
    GET_USER_ALL: `portlet/all`,
    SAVE: `portlet/`,
    GET_BY_MODULE_ID: `portlet/findByModuleId`,
    DELETE_BY_ID: `portlet/`,
    GET_PAGE: `page/findByPortletId`
};
/** @type {?} */
export const portletOps = {
    SAVE: `portletop/save?portletId=`,
    GET_BY_PORTLET_ID: `portletop/getallpagerole?portletId=`
};
addBaseUrl(portletUrls);
addBaseUrl(portletOps);
export class PortletRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} portletId
     * @return {?}
     */
    getPageByPortletId(portletId) {
        return this.http.get(portletUrls.GET_PAGE, {
            params: { portletId }
        });
    }
    /**
     * @return {?}
     */
    getPortlets() {
        return this.http.get(portletUrls.GET_USER_ALL).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        portlets => portlets.map(convertPortlet))));
    }
    /**
     * @param {?=} moduleId
     * @return {?}
     */
    getPortletsByModuleId(moduleId) {
        return this.http.get(portletUrls.GET_BY_MODULE_ID, { params: moduleId ? { moduleId } : null }).pipe(map((/**
         * @param {?} portlets
         * @return {?}
         */
        portlets => portlets.map(convertPortlet))));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getPortletById(id) {
        // return this.storage.getPortletById(id)
        return this.http.get(portletUrls.GET_BY_ID + id).pipe(map(convertPortlet));
    }
    /**
     * @param {?} portlet
     * @return {?}
     */
    savePortlet(portlet) {
        /** @type {?} */
        const serverPortlet = convertPortletInverse(portlet);
        return portlet.id
            ? this.http.post(portletUrls.SAVE, serverPortlet)
            : this.http.put(portletUrls.SAVE, serverPortlet);
    }
    /**
     * portlet op
     * @param {?} portletId
     * @return {?}
     */
    getPortletOps(portletId) {
        return this.http.get(portletOps.GET_BY_PORTLET_ID + portletId);
    }
    /**
     * @param {?} portletId
     * @param {?} opIds
     * @return {?}
     */
    savePortletOps(portletId, opIds) {
        return this.http.post(portletOps.SAVE + portletId, opIds);
    }
    /**
     * @param {?} portletId
     * @return {?}
     */
    deletePortletById(portletId) {
        return this.http.delete(portletUrls.DELETE_BY_ID + portletId);
    }
}
PortletRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PortletRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PortletRepo.ngInjectableDef = i0.defineInjectable({ factory: function PortletRepo_Factory() { return new PortletRepo(i0.inject(i1.HttpClient)); }, token: PortletRepo, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PortletRepo.prototype.http;
}
/**
 * portlet 后端 -> 前端, 前端 -> 后端 转换
 * @param {?} serverPortlet
 * @return {?}
 */
function convertPortlet(serverPortlet) {
    serverPortlet.widget = convertWidget(serverPortlet.widget);
    if (serverPortlet.propValues)
        serverPortlet.propValues = JSON.parse(serverPortlet.propValues);
    return (/** @type {?} */ (Object.assign(new EppPortlet(null), serverPortlet)));
}
/**
 * @param {?} portlet
 * @return {?}
 */
function convertPortletInverse(portlet) {
    /** @type {?} */
    const serverPortlet = Object.assign({}, portlet);
    delete serverPortlet.widget;
    serverPortlet.propValues = (/** @type {?} */ (JSON.stringify(portlet.propValues)));
    return serverPortlet;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGxldC5yZXBvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcHdpZGdldC91dGlsLyIsInNvdXJjZXMiOlsibGliL3JlcG9zaXRvcmllcy9wb3J0bGV0LnJlcG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBRTlDLE1BQU0sT0FBTyxXQUFXLEdBQUc7SUFDekIsU0FBUyxFQUFFLFVBQVU7SUFDckIsWUFBWSxFQUFFLGFBQWE7SUFDM0IsSUFBSSxFQUFFLFVBQVU7SUFDaEIsZ0JBQWdCLEVBQUUsd0JBQXdCO0lBQzFDLFlBQVksRUFBRSxVQUFVO0lBQ3hCLFFBQVEsRUFBQyxzQkFBc0I7Q0FDaEM7O0FBQ0QsTUFBTSxPQUFPLFVBQVUsR0FBRztJQUN4QixJQUFJLEVBQUUsMkJBQTJCO0lBQ2pDLGlCQUFpQixFQUFFLHFDQUFxQztDQUN6RDtBQUNELFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUN2QixVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7QUFLdEIsTUFBTSxPQUFPLFdBQVc7Ozs7SUFFdEIsWUFDVSxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3RCLENBQUM7Ozs7O0lBRUwsa0JBQWtCLENBQUMsU0FBZ0I7UUFDakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBUyxXQUFXLENBQUMsUUFBUSxFQUFDO1lBQ2hELE1BQU0sRUFBQyxFQUFDLFNBQVMs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RUFBTyxDQUFBO0lBQ3BFLE9BQU8sYUFBYSxDQUFBO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGFkZEJhc2VVcmwgfSBmcm9tICcuLi9jb25zdCc7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnLi4vdHlwZXMvaWdpeC50eXBlJztcbmltcG9ydCB7IEVwcFBvcnRsZXQgfSBmcm9tICcuLi90eXBlcy9wb3J0bGV0LnR5cGUnO1xuaW1wb3J0IHsgY29udmVydFdpZGdldCB9IGZyb20gJy4vd2lkZ2V0LnJlcG8nO1xuXG5leHBvcnQgY29uc3QgcG9ydGxldFVybHMgPSB7XG4gIEdFVF9CWV9JRDogYHBvcnRsZXQvYCxcbiAgR0VUX1VTRVJfQUxMOiBgcG9ydGxldC9hbGxgLFxuICBTQVZFOiBgcG9ydGxldC9gLFxuICBHRVRfQllfTU9EVUxFX0lEOiBgcG9ydGxldC9maW5kQnlNb2R1bGVJZGAsXG4gIERFTEVURV9CWV9JRDogYHBvcnRsZXQvYCxcbiAgR0VUX1BBR0U6YHBhZ2UvZmluZEJ5UG9ydGxldElkYFxufVxuZXhwb3J0IGNvbnN0IHBvcnRsZXRPcHMgPSB7XG4gIFNBVkU6IGBwb3J0bGV0b3Avc2F2ZT9wb3J0bGV0SWQ9YCxcbiAgR0VUX0JZX1BPUlRMRVRfSUQ6IGBwb3J0bGV0b3AvZ2V0YWxscGFnZXJvbGU/cG9ydGxldElkPWBcbn1cbmFkZEJhc2VVcmwocG9ydGxldFVybHMpXG5hZGRCYXNlVXJsKHBvcnRsZXRPcHMpXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvcnRsZXRSZXBvIHtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICApIHsgfVxuXG4gIGdldFBhZ2VCeVBvcnRsZXRJZChwb3J0bGV0SWQ6c3RyaW5nKXtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxudW1iZXI+KHBvcnRsZXRVcmxzLkdFVF9QQUdFLHtcbiAgICAgIHBhcmFtczp7cG9ydGxldElkfVxuICAgIH0pXG4gIH1cblxuICBnZXRQb3J0bGV0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RXBwUG9ydGxldFtdPihwb3J0bGV0VXJscy5HRVRfVVNFUl9BTEwpLnBpcGUoXG4gICAgICBtYXAocG9ydGxldHMgPT4gcG9ydGxldHMubWFwKGNvbnZlcnRQb3J0bGV0KSlcbiAgICApXG4gIH1cbiAgZ2V0UG9ydGxldHNCeU1vZHVsZUlkIChtb2R1bGVJZD86IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEVwcFBvcnRsZXRbXT4oXG4gICAgICBwb3J0bGV0VXJscy5HRVRfQllfTU9EVUxFX0lELFxuICAgICAgeyBwYXJhbXM6IG1vZHVsZUlkID8geyBtb2R1bGVJZCB9IDogbnVsbCB9XG4gICAgKS5waXBlKG1hcChwb3J0bGV0cyA9PiBwb3J0bGV0cy5tYXAoY29udmVydFBvcnRsZXQpKSlcbiAgfVxuICBnZXRQb3J0bGV0QnlJZCAoaWQ6IHN0cmluZykge1xuICAgIC8vIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0UG9ydGxldEJ5SWQoaWQpXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RXBwUG9ydGxldD4ocG9ydGxldFVybHMuR0VUX0JZX0lEICsgaWQpLnBpcGUoXG4gICAgICBtYXAoY29udmVydFBvcnRsZXQpLFxuICAgICAgLy8g5aaC5p6c6K+35rGC5Ye66ZSZ77yM5Lya6L+U5Zue5LiA5LiqIG51bGzvvIzogIzkuI3lgZzmjolcbiAgICAgIC8vIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgIC8vICAgY29uc3QgcCA9IG5ldyBFcHBQb3J0bGV0KG51bGwpXG4gICAgICAvLyAgIHAuaWQgPSBpZFxuICAgICAgLy8gICBwLm5hbWUgPSAnJ1xuICAgICAgLy8gICByZXR1cm4gb2YocClcbiAgICAgIC8vIH0pXG4gICAgKVxuICB9XG4gIHNhdmVQb3J0bGV0IChwb3J0bGV0OiBFcHBQb3J0bGV0KSB7XG4gICAgY29uc3Qgc2VydmVyUG9ydGxldCA9IGNvbnZlcnRQb3J0bGV0SW52ZXJzZShwb3J0bGV0KVxuICAgIHJldHVybiBwb3J0bGV0LmlkXG4gICAgICA/IHRoaXMuaHR0cC5wb3N0PEVwcFBvcnRsZXQ+KHBvcnRsZXRVcmxzLlNBVkUsIHNlcnZlclBvcnRsZXQpXG4gICAgICA6IHRoaXMuaHR0cC5wdXQ8RXBwUG9ydGxldD4ocG9ydGxldFVybHMuU0FWRSwgc2VydmVyUG9ydGxldClcbiAgfVxuXG4gIC8qKiBwb3J0bGV0IG9wICovXG4gIGdldFBvcnRsZXRPcHMgKHBvcnRsZXRJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Um9sZVtdPihwb3J0bGV0T3BzLkdFVF9CWV9QT1JUTEVUX0lEICsgcG9ydGxldElkKVxuICB9XG4gIHNhdmVQb3J0bGV0T3BzIChwb3J0bGV0SWQ6IHN0cmluZywgb3BJZHM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHBvcnRsZXRPcHMuU0FWRSArIHBvcnRsZXRJZCwgb3BJZHMpXG4gIH1cbiAgZGVsZXRlUG9ydGxldEJ5SWQgKHBvcnRsZXRJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUocG9ydGxldFVybHMuREVMRVRFX0JZX0lEICsgcG9ydGxldElkKVxuICB9XG59XG5cbi8qKiBwb3J0bGV0IOWQjuerryAtPiDliY3nq68sIOWJjeerryAtPiDlkI7nq68g6L2s5o2iICovXG5mdW5jdGlvbiBjb252ZXJ0UG9ydGxldCAoc2VydmVyUG9ydGxldCkge1xuICBzZXJ2ZXJQb3J0bGV0LndpZGdldCA9IGNvbnZlcnRXaWRnZXQoc2VydmVyUG9ydGxldC53aWRnZXQpXG4gIGlmIChzZXJ2ZXJQb3J0bGV0LnByb3BWYWx1ZXMpIHNlcnZlclBvcnRsZXQucHJvcFZhbHVlcyA9IEpTT04ucGFyc2Uoc2VydmVyUG9ydGxldC5wcm9wVmFsdWVzKVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRXBwUG9ydGxldChudWxsKSwgc2VydmVyUG9ydGxldCkgYXMgRXBwUG9ydGxldFxufVxuZnVuY3Rpb24gY29udmVydFBvcnRsZXRJbnZlcnNlIChwb3J0bGV0OiBFcHBQb3J0bGV0KSB7XG4gIGNvbnN0IHNlcnZlclBvcnRsZXQgPSB7IC4uLnBvcnRsZXQgfVxuICBkZWxldGUgc2VydmVyUG9ydGxldC53aWRnZXRcbiAgc2VydmVyUG9ydGxldC5wcm9wVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkocG9ydGxldC5wcm9wVmFsdWVzKSBhcyBhbnlcbiAgcmV0dXJuIHNlcnZlclBvcnRsZXRcbn1cbiJdfQ==