/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addBaseUrl, DATA_PREFIX } from '../const';
import { Agg, Dataset, DpValue, RuntimeAggOption } from '../types/data.type';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
export const datasetUrls = {
    GET_BY_ID: `${DATA_PREFIX}/DataSetService/find/`,
    CREATE: `${DATA_PREFIX}/DataSetService/create`,
    IMPORT_QO: `${DATA_PREFIX}/DataSetService/importQO`,
    DELETE: `${DATA_PREFIX}/DataSetService/delete`,
    GET_ALL: `${DATA_PREFIX}/DataSetService/findAll`,
    // 500
    GET_RAW_DIMS_BY_DATASET: `${DATA_PREFIX}/DataResultSetService/tryGetDimensions`,
    GET_RAW_DATA_BY_DATASET: `${DATA_PREFIX}/DataResultSetService/getResultSet`,
    UPDATE: `${DATA_PREFIX}/DataSetService/update`,
};
/** @type {?} */
export const aggUrls = {
    SAVE: `${DATA_PREFIX}/DataSetService/saveAggConfig`,
    GET_BY_RESOURCE: `${DATA_PREFIX}/DataSetService/findAggConfigByResource`,
};
/** @type {?} */
export const dataResultSetUrls = {
    GET_BY_AGG_ID: `${DATA_PREFIX}/DataResultSetService/getAggResultSet/{aggId}`,
    // ?
    GET_BY_AGG: `${DATA_PREFIX}/DataResultSetService/getAggResultSetForTest`,
    GET_BY_DATASET: `${DATA_PREFIX}/DataResultSetService/getResultSet`,
    // 原始数据，用不到
    GET_BY_RESOURCE: `${DATA_PREFIX}/DataResultSetService/getResultSetByResource`,
};
addBaseUrl(datasetUrls);
addBaseUrl(aggUrls);
addBaseUrl(dataResultSetUrls);
export class DatasetRepo {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    getRawDimsByDataset(datasetDto) {
        return this.http
            .post(datasetUrls.GET_RAW_DIMS_BY_DATASET, datasetDto);
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    getRawColsNDataByDataset(datasetDto) {
        return this.http
            .post(datasetUrls.GET_RAW_DATA_BY_DATASET, datasetDto);
    }
    /**
     * @return {?}
     */
    getDatasets() {
        return this.http
            .get(datasetUrls.GET_ALL)
            .pipe(map((/**
         * @param {?} datasetDtos
         * @return {?}
         */
        datasetDtos => datasetDtos.map(Dataset.fromDto))));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getDatasetById(id) {
        return this.http
            .get(datasetUrls.GET_BY_ID + id)
            .pipe(map(Dataset.fromDto));
    }
    /**
     * @param {?} datasetDto
     * @return {?}
     */
    saveDataset(datasetDto) {
        return this.http.post(datasetDto.id ? datasetUrls.UPDATE : datasetUrls.CREATE, 
        // Dataset.toDto(dataset)
        datasetDto).pipe(map(Dataset.fromDto));
        // TODO:
        // , this.success()
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    importQO(ids) {
        return this.http.post(datasetUrls.IMPORT_QO, ids);
    }
    /**
     * @param {?} datasetId
     * @return {?}
     */
    deleteDataset(datasetId) {
        return this.http
            .post(datasetUrls.DELETE, null, { params: { id: datasetId } });
        // TODO:
        // .pipe(this.success())
    }
    /**
     * agg
     * @param {?} portletId
     * @return {?}
     */
    getAggByPortletId(portletId) {
        return this.http.get(aggUrls.GET_BY_RESOURCE, {
            params: {
                resource: 'portlet',
                resourceId: portletId
            }
        }).pipe(map(Agg.fromDto));
    }
    /**
     * @param {?} agg
     * @return {?}
     */
    saveAgg(agg) {
        return this.http
            .post(aggUrls.SAVE, Agg.toDto(agg));
    }
    /**
     * result
     * @param {?} agg
     * @param {?=} dpValues
     * @param {?=} runtimeAgg
     * @return {?}
     */
    getAggResultByAgg(agg, dpValues = [], runtimeAgg) {
        /** @type {?} */
        const body = {
            aggDataDto: Agg.toDto(agg),
            aggregation: RuntimeAggOption.toDto(runtimeAgg)
        }
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        ;
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        if (dpValues && dpValues.length > 0)
            body.dataParam = dpValues.map(DpValue.toDto);
        return this.http.post(dataResultSetUrls.GET_BY_AGG, body);
    }
    /**
     * @param {?} portletId
     * @param {?=} dpValues
     * @param {?=} filter
     * @param {?=} runtimeAgg
     * @return {?}
     */
    getResultByPortletId(portletId, dpValues = [], filter = '""', runtimeAgg) {
        /** @type {?} */
        const body = {
            filter,
            aggregation: RuntimeAggOption.toDto(runtimeAgg)
        }
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        ;
        // dataParam 为 [] 服务端会报错，若没有直接不传此参数。
        if (dpValues && dpValues.length > 0)
            body.dataParam = dpValues.map(DpValue.toDto);
        return this.http.post(dataResultSetUrls.GET_BY_RESOURCE, body, {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            params: {
                resourceType: 'portlet',
                resourceId: portletId
            }
        });
    }
}
DatasetRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DatasetRepo.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ DatasetRepo.ngInjectableDef = i0.defineInjectable({ factory: function DatasetRepo_Factory() { return new DatasetRepo(i0.inject(i1.HttpClient)); }, token: DatasetRepo, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatasetRepo.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,