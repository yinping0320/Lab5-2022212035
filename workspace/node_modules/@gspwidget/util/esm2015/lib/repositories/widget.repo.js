/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addBaseUrl } from '../const';
import { backendString2Json } from '../misc';
import { UtilService } from '../util.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../util.service";
/** @type {?} */
export const widgetUrls = {
    GET_BY_ID: `metaportlet/`,
    GET_USER_ALL: `metaportlet/all`,
    CREATE: `metaportlet/upload`,
    EDIT: `metaportlet/editor`,
    DELETE: `metaportlet/`,
    GET_PORTLET: `portlet/findByMetaId`,
};
addBaseUrl(widgetUrls);
/**
 * url 转换:
 * 服务端 url: /su/元部件名/文件路径
 * full url: host/runtime/web/metaportlet/su/元部件名/文件路径
 * @type {?}
 */
const WIDGET_PREFIX = `${location.origin}/runtime/web/metaportlet`
/** widget 后端 -> 前端 转换 */
;
/**
 * widget 后端 -> 前端 转换
 * @param {?} widget
 * @return {?}
 */
export function convertWidget(widget) {
    widget.href = WIDGET_PREFIX + widget.href;
    widget.logoImgUrl = WIDGET_PREFIX + widget.logoImgUrl;
    widget.previewImgUrl = WIDGET_PREFIX + widget.previewImgUrl;
    widget.baseUrl = WIDGET_PREFIX + widget.baseUrl;
    widget.layout = widget.layout && JSON.parse(backendString2Json(widget.layout));
    return (/** @type {?} */ (widget));
}
export class WidgetRepo {
    /**
     * @param {?} http
     * @param {?} util
     */
    constructor(http, util) {
        this.http = http;
        this.util = util;
    }
    /**
     * @return {?}
     */
    getWidgets() {
        return this.http
            .get(widgetUrls.GET_USER_ALL)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => data.map(convertWidget))));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getWidgetById(id) {
        return this.http
            .get(widgetUrls.GET_BY_ID + id)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => convertWidget(data))));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    uploadWidget(content) {
        return this.util.uploadFile(widgetUrls.CREATE, content);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    editorWidget(content) {
        return this.util.uploadFile(widgetUrls.EDIT, content);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deleteWidget(id) {
        return this.http.delete(widgetUrls.DELETE + id, {});
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findPortletByMeta(id) {
        return this.http.get(widgetUrls.GET_PORTLET, {
            params: { id }
        });
    }
}
WidgetRepo.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WidgetRepo.ctorParameters = () => [
    { type: HttpClient },
    { type: UtilService }
];
/** @nocollapse */ WidgetRepo.ngInjectableDef = i0.defineInjectable({ factory: function WidgetRepo_Factory() { return new WidgetRepo(i0.inject(i1.HttpClient), i0.inject(i2.UtilService)); }, token: WidgetRepo, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    WidgetRepo.prototype.http;
    /**
     * @type {?}
     * @private
     */
    WidgetRepo.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LnJlcG8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3Nwd2lkZ2V0L3V0aWwvIiwic291cmNlcyI6WyJsaWIvcmVwb3NpdG9yaWVzL3dpZGdldC5yZXBvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7OztBQUU5QyxNQUFNLE9BQU8sVUFBVSxHQUFHO0lBQ3hCLFNBQVMsRUFBRSxjQUFjO0lBQ3pCLFlBQVksRUFBRSxpQkFBaUI7SUFDL0IsTUFBTSxFQUFFLG9CQUFvQjtJQUM1QixJQUFJLEVBQUUsb0JBQW9CO0lBQzFCLE1BQU0sRUFBQyxjQUFjO0lBQ3JCLFdBQVcsRUFBQyxzQkFBc0I7Q0FDbkM7QUFDRCxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7Ozs7Ozs7TUFPaEIsYUFBYSxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sMEJBQTBCO0FBQ2xFLHlCQUF5Qjs7Ozs7OztBQUN6QixNQUFNLFVBQVUsYUFBYSxDQUFFLE1BQU07SUFDbkMsTUFBTSxDQUFDLElBQUksR0FBRyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUN6QyxNQUFNLENBQUMsVUFBVSxHQUFHLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFBO0lBQ3JELE1BQU0sQ0FBQyxhQUFhLEdBQUcsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUE7SUFDM0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQTtJQUMvQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUM5RSxPQUFPLG1CQUFBLE1BQU0sRUFBYyxDQUFBO0FBQzdCLENBQUM7QUFLRCxNQUFNLE9BQU8sVUFBVTs7Ozs7SUFFckIsWUFDVSxJQUFnQixFQUNoQixJQUFpQjtRQURqQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFNBQUksR0FBSixJQUFJLENBQWE7SUFDdkIsQ0FBQzs7OztJQUVMLFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFlLFVBQVUsQ0FBQyxZQUFZLENBQUM7YUFDMUMsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FDckMsQ0FBQTtJQUNMLENBQUM7Ozs7O0lBQ0QsYUFBYSxDQUFFLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBYSxVQUFVLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQzthQUMxQyxJQUFJLENBQ0gsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQ2pDLENBQUE7SUFDTCxDQUFDOzs7OztJQUNELFlBQVksQ0FBRSxPQUFzQztRQUNsRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDekQsQ0FBQzs7Ozs7SUFDRCxZQUFZLENBQUUsT0FBc0M7UUFDbEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZELENBQUM7Ozs7O0lBQ0QsWUFBWSxDQUFFLEVBQVU7UUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBUyxVQUFVLENBQUMsTUFBTSxHQUFDLEVBQUUsRUFBQyxFQUNwRCxDQUFDLENBQUE7SUFDSixDQUFDOzs7OztJQUNELGlCQUFpQixDQUFDLEVBQVM7UUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBUyxVQUFVLENBQUMsV0FBVyxFQUFDO1lBQ2xELE1BQU0sRUFBRyxFQUFDLEVBQUUsRUFBQztTQUNkLENBQUMsQ0FBQTtJQUNKLENBQUM7OztZQXRDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFwQ1EsVUFBVTtZQU1WLFdBQVc7Ozs7Ozs7O0lBa0NoQiwwQkFBd0I7Ozs7O0lBQ3hCLDBCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBhZGRCYXNlVXJsIH0gZnJvbSAnLi4vY29uc3QnO1xuaW1wb3J0IHsgYmFja2VuZFN0cmluZzJKc29uIH0gZnJvbSAnLi4vbWlzYyc7XG5pbXBvcnQgeyBXaWRnZXRJbmZvIH0gZnJvbSAnLi4vdHlwZXMvd2lkZ2V0LnR5cGUnO1xuaW1wb3J0IHsgVXRpbFNlcnZpY2UgfSBmcm9tICcuLi91dGlsLnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3Qgd2lkZ2V0VXJscyA9IHtcbiAgR0VUX0JZX0lEOiBgbWV0YXBvcnRsZXQvYCxcbiAgR0VUX1VTRVJfQUxMOiBgbWV0YXBvcnRsZXQvYWxsYCxcbiAgQ1JFQVRFOiBgbWV0YXBvcnRsZXQvdXBsb2FkYCxcbiAgRURJVDogYG1ldGFwb3J0bGV0L2VkaXRvcmAsXG4gIERFTEVURTpgbWV0YXBvcnRsZXQvYCxcbiAgR0VUX1BPUlRMRVQ6YHBvcnRsZXQvZmluZEJ5TWV0YUlkYCxcbn1cbmFkZEJhc2VVcmwod2lkZ2V0VXJscylcblxuLyoqXG4gKiB1cmwg6L2s5o2iOlxuICog5pyN5Yqh56uvIHVybDogL3N1L+WFg+mDqOS7tuWQjS/mlofku7bot6/lvoRcbiAqIGZ1bGwgdXJsOiBob3N0L3J1bnRpbWUvd2ViL21ldGFwb3J0bGV0L3N1L+WFg+mDqOS7tuWQjS/mlofku7bot6/lvoRcbiAqL1xuY29uc3QgV0lER0VUX1BSRUZJWCA9IGAke2xvY2F0aW9uLm9yaWdpbn0vcnVudGltZS93ZWIvbWV0YXBvcnRsZXRgXG4vKiogd2lkZ2V0IOWQjuerryAtPiDliY3nq68g6L2s5o2iICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFdpZGdldCAod2lkZ2V0KSB7XG4gIHdpZGdldC5ocmVmID0gV0lER0VUX1BSRUZJWCArIHdpZGdldC5ocmVmXG4gIHdpZGdldC5sb2dvSW1nVXJsID0gV0lER0VUX1BSRUZJWCArIHdpZGdldC5sb2dvSW1nVXJsXG4gIHdpZGdldC5wcmV2aWV3SW1nVXJsID0gV0lER0VUX1BSRUZJWCArIHdpZGdldC5wcmV2aWV3SW1nVXJsXG4gIHdpZGdldC5iYXNlVXJsID0gV0lER0VUX1BSRUZJWCArIHdpZGdldC5iYXNlVXJsXG4gIHdpZGdldC5sYXlvdXQgPSB3aWRnZXQubGF5b3V0ICYmIEpTT04ucGFyc2UoYmFja2VuZFN0cmluZzJKc29uKHdpZGdldC5sYXlvdXQpKVxuICByZXR1cm4gd2lkZ2V0IGFzIFdpZGdldEluZm9cbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgV2lkZ2V0UmVwbyB7XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIHV0aWw6IFV0aWxTZXJ2aWNlXG4gICkgeyB9XG5cbiAgZ2V0V2lkZ2V0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxXaWRnZXRJbmZvW10+KHdpZGdldFVybHMuR0VUX1VTRVJfQUxMKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChkYXRhID0+IGRhdGEubWFwKGNvbnZlcnRXaWRnZXQpKVxuICAgICAgKVxuICB9XG4gIGdldFdpZGdldEJ5SWQgKGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PFdpZGdldEluZm8+KHdpZGdldFVybHMuR0VUX0JZX0lEICsgaWQpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKGRhdGEgPT4gY29udmVydFdpZGdldChkYXRhKSlcbiAgICAgIClcbiAgfVxuICB1cGxvYWRXaWRnZXQgKGNvbnRlbnQ6IHsgW2tleTogc3RyaW5nXTogRmlsZSB8IGFueSB9KSB7XG4gICAgcmV0dXJuIHRoaXMudXRpbC51cGxvYWRGaWxlKHdpZGdldFVybHMuQ1JFQVRFLCBjb250ZW50KVxuICB9XG4gIGVkaXRvcldpZGdldCAoY29udGVudDogeyBba2V5OiBzdHJpbmddOiBGaWxlIHwgYW55IH0pIHtcbiAgICByZXR1cm4gdGhpcy51dGlsLnVwbG9hZEZpbGUod2lkZ2V0VXJscy5FRElULCBjb250ZW50KVxuICB9XG4gIGRlbGV0ZVdpZGdldCAoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlPHN0cmluZz4od2lkZ2V0VXJscy5ERUxFVEUraWQse1xuICAgIH0pXG4gIH1cbiAgZmluZFBvcnRsZXRCeU1ldGEoaWQ6c3RyaW5nKXtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxudW1iZXI+KHdpZGdldFVybHMuR0VUX1BPUlRMRVQse1xuICAgICAgcGFyYW1zIDoge2lkfVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==