(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@farris/ui-messager'), require('@angular/common'), require('@angular/forms'), require('@farris/ui-dialog'), require('@farris/ui-modal'), require('@progress/kendo-angular-grid'), require('@ecp-caf/caf-common'), require('@farris/ui-combo-list'), require('@farris/ui-dropdown'), require('@gsp-svc/formdoc-upload'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@gsp-wf/ui-comment', ['exports', 'rxjs', '@farris/ui-messager', '@angular/common', '@angular/forms', '@farris/ui-dialog', '@farris/ui-modal', '@progress/kendo-angular-grid', '@ecp-caf/caf-common', '@farris/ui-combo-list', '@farris/ui-dropdown', '@gsp-svc/formdoc-upload', '@angular/core'], factory) :
    (factory((global['gsp-wf'] = global['gsp-wf'] || {}, global['gsp-wf']['ui-comment'] = {}),global.rxjs,global.uiMessager,global.ng.common,global.ng.forms,global.uiDialog,global.uiModal,global.kendoAngularGrid,global.cafCommon,global.uiComboList,global.uiDropdown,global.formdocUpload,global.ng.core));
}(this, (function (exports,rxjs,uiMessager,common,forms,uiDialog,uiModal,kendoAngularGrid,cafCommon,uiComboList,uiDropdown,formdocUpload,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskCommentService = /** @class */ (function () {
        function TaskCommentService(httpSvc) {
            this.httpSvc = httpSvc;
        }
        /**
         * @return {?}
         */
        TaskCommentService.newId = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var S4 = function () { return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); };
                return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
            };
        /**
         * @return {?}
         */
        TaskCommentService.prototype.getCommentList = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/commonComments";
                return this.httpSvc.get(url);
            };
        /**
         * @return {?}
         */
        TaskCommentService.prototype.addComment = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/commonComments";
                return this.httpSvc.post(url, {});
            };
        /**
          * 获取任务中心配置项
          * @param code 配置项的Code
          */
        /**
         * 获取任务中心配置项
         * @param {?} code 配置项的Code
         * @return {?}
         */
        TaskCommentService.prototype.getTaskCenterConfigByCode = /**
         * 获取任务中心配置项
         * @param {?} code 配置项的Code
         * @return {?}
         */
            function (code) {
                /** @type {?} */
                var url = "/api/runtime/task/v1.0/task-center-setting/code?code=" + code;
                return this.httpSvc.get(url);
            };
        /**
         * 真正上传附件
         * @param files
         */
        /**
         * 真正上传附件
         * @param {?} files
         * @return {?}
         */
        TaskCommentService.prototype.uploadAttachment = /**
         * 真正上传附件
         * @param {?} files
         * @return {?}
         */
            function (files) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc/commit";
                return this.httpSvc.put(url, files);
            };
        /**
         * 删除附件
         * @param fileDeleteEntity
         */
        /**
         * 删除附件
         * @param {?} fileDeleteEntity
         * @return {?}
         */
        TaskCommentService.prototype.deleteAttachment = /**
         * 删除附件
         * @param {?} fileDeleteEntity
         * @return {?}
         */
            function (fileDeleteEntity) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc";
                return this.httpSvc.delete(url, fileDeleteEntity);
            };
        TaskCommentService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TaskCommentService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService }
            ];
        };
        return TaskCommentService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskCommentUIState = /** @class */ (function () {
        function TaskCommentUIState() {
            this.commentList = [];
            this.comments = [];
            this.changesCommentIds = [];
        }
        TaskCommentUIState.decorators = [
            { type: core.Injectable }
        ];
        return TaskCommentUIState;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonComment = /** @class */ (function () {
        function CommonComment() {
        }
        /**
         * @return {?}
         */
        CommonComment.newEntity = /**
         * @return {?}
         */
            function () {
                return {
                    id: TaskCommentService.newId(),
                    message: ''
                };
            };
        return CommonComment;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskCommentViewModel = /** @class */ (function () {
        function TaskCommentViewModel(uiState, httpSvc) {
            this.uiState = uiState;
            this.httpSvc = httpSvc;
        }
        /**
         * @return {?}
         */
        TaskCommentViewModel.prototype.add = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var newEntity = CommonComment.newEntity();
                newEntity.sortOrder = this.uiState.commentList.length + 1;
                this.uiState.commentList.push(newEntity);
            };
        /**
         * @return {?}
         */
        TaskCommentViewModel.prototype.delete = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.uiState.curComment) {
                    /** @type {?} */
                    var index = this.uiState.commentList.findIndex(function (c) { return c.id === _this.uiState.curComment.id; });
                    if (index > -1) {
                        this.uiState.commentList.splice(index, 1);
                    }
                }
            };
        /**
         * @return {?}
         */
        TaskCommentViewModel.prototype.save = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/commonComments";
                /** @type {?} */
                var deleteIds = this.uiState.originCommentIds.filter(function (id) { return _this.uiState.commentList.findIndex(function (c) { return c.id === id; }) < 0; });
                /** @type {?} */
                var addEntities = this.uiState.commentList.filter(function (item) { return _this.uiState.originCommentIds.indexOf(item.id) < 0; });
                /** @type {?} */
                var changesList = this.uiState.commentList.filter(function (item) {
                    return addEntities.findIndex(function (aItem) { return aItem.id === item.id; }) < 0
                        && _this.uiState.changesCommentIds.indexOf(item.id) > -1;
                });
                return rxjs.forkJoin(deleteIds.map(function (id) { return _this.httpSvc.delete(url + ("/" + id), null); })
                    .concat(changesList.map(function (change) { return _this.httpSvc.patch(url, change); }))
                    .concat(addEntities.map(function (add) { return _this.httpSvc.post(url, add); })));
            };
        TaskCommentViewModel.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TaskCommentViewModel.ctorParameters = function () {
            return [
                { type: TaskCommentUIState },
                { type: cafCommon.HttpService }
            ];
        };
        return TaskCommentViewModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 执行上传附件实体
     */
    var /**
     * 执行上传附件实体
     */ FileUploadEntity = /** @class */ (function () {
        function FileUploadEntity() {
        }
        return FileUploadEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskCommentComponent = /** @class */ (function () {
        // 构造方法不可动，顺序不要改变，使用新的
        function TaskCommentComponent(commentSvc, viewModel, uiState, formBuilder, injector) {
            this.commentSvc = commentSvc;
            this.viewModel = viewModel;
            this.uiState = uiState;
            this.formBuilder = formBuilder;
            this.injector = injector;
            this.placeholder = '';
            this.attachment = new core.EventEmitter();
            this._value = '';
            this.attachmentList = [];
            this.textAreaHeight = 120;
            this.isRepeat = false; // 重复附件校验
            // 重复附件校验
            this.ifShowAttachment = true; //任务中心配置，是否显示附件上传
            //任务中心配置，是否显示附件上传
            this.showUploadAttachment = true;
            this.onModelChange = function (obj) { };
            this.onModelTouched = function (obj) { };
            this.injector && (this.uploadDialog = this.injector.get(formdocUpload.UploadDialogService));
            this.injector && (this.messageService = this.injector.get(uiMessager.MessagerService));
        }
        Object.defineProperty(TaskCommentComponent.prototype, "actionCode", {
            set: /**
             * @param {?} actionCode
             * @return {?}
             */ function (actionCode) {
                if (actionCode === 'Claim' || actionCode === 'AssignUser') {
                    this.showUploadAttachment = false;
                }
                else {
                    this.showUploadAttachment = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskCommentComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                if (this._value !== v) {
                    this._value = v;
                    this.onModelChange(v);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskCommentComponent.prototype, "TextAreaHeight", {
            set: /**
             * @param {?} height
             * @return {?}
             */ function (height) {
                this.textAreaHeight = height;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // 获取常用意见列表
                this.loadComments();
                this.commentSvc.getTaskCenterConfigByCode('If_Show_Attachment').subscribe(function (re) {
                    re && re.currentValue === 'false' && (_this.ifShowAttachment = false);
                });
            };
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.onEditComment = /**
         * @return {?}
         */
            function () {
                this.commentDialog.show();
            };
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.save = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.commentGrid.closeCell();
                this.viewModel.save().subscribe(function (r) {
                    _this.loadComments();
                    _this.commentDialog.close();
                });
            };
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.loadComments = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.commentSvc.getCommentList().subscribe(function (data) {
                    _this.uiState.commentList = data;
                    _this.uiState.originCommentIds = data.map(function (d) { return d.id; });
                    _this.uiState.comments = data.map(function (d) { return d.message; });
                });
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        TaskCommentComponent.prototype.cellClickHandler = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var sender = _a.sender, rowIndex = _a.rowIndex, columnIndex = _a.columnIndex, dataItem = _a.dataItem, isEdited = _a.isEdited;
                this.uiState.curComment = dataItem;
                if (!isEdited) {
                    sender.editCell(rowIndex, columnIndex, this.createFormGroup(dataItem));
                }
            };
        /**
         * @param {?} args
         * @return {?}
         */
        TaskCommentComponent.prototype.cellCloseHandler = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                var formGroup = args.formGroup, dataItem = args.dataItem, column = args.column;
                if (!formGroup.valid) {
                    args.preventDefault();
                }
                else if (formGroup.dirty) {
                    if (this.uiState.originCommentIds.findIndex(function (d) { return d === dataItem.id; }) > -1
                        && this.uiState.changesCommentIds.findIndex(function (id) { return id === dataItem.id; }) < 0) {
                        this.uiState.changesCommentIds.push(dataItem.id);
                    }
                    Object.assign(dataItem, formGroup.value);
                }
            };
        /**
         * @param {?} dataItem
         * @return {?}
         */
        TaskCommentComponent.prototype.createFormGroup = /**
         * @param {?} dataItem
         * @return {?}
         */
            function (dataItem) {
                return this.formBuilder.group({
                    message: dataItem.message,
                    sortOrder: dataItem.sortOrder,
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TaskCommentComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== this.value) {
                    this.value = value;
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TaskCommentComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TaskCommentComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        TaskCommentComponent.prototype.buttonClick = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.dropDownEl.close();
                this.value = data;
            };
        /**
         * @return {?}
         */
        TaskCommentComponent.prototype.uploadAttachment = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.uploadDialog) {
                    this.uploadDialog.uploadFile(this.processInstanceId, 'wf_attachment').then(function (re) {
                        var e_1, _a, e_2, _b;
                        try {
                            for (var _c = __values((( /** @type {?} */(re)))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var i = _d.value;
                                _this.isRepeat = false;
                                try {
                                    for (var _e = __values(_this.attachmentList), _f = _e.next(); !_f.done; _f = _e.next()) {
                                        var attach = _f.value;
                                        if (attach.fileName === i.fileName) {
                                            _this.messageService.info('包含重复文件' + i.fileName);
                                            _this.isRepeat = true;
                                            break;
                                        }
                                    }
                                }
                                catch (e_2_1) {
                                    e_2 = { error: e_2_1 };
                                }
                                finally {
                                    try {
                                        if (_f && !_f.done && (_b = _e.return))
                                            _b.call(_e);
                                    }
                                    finally {
                                        if (e_2)
                                            throw e_2.error;
                                    }
                                }
                                if (!_this.isRepeat) {
                                    _this.attachmentList.push(i);
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return))
                                    _a.call(_c);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                        _this.attachment.emit(_this.attachmentList);
                        //执行上传附件
                        /** @type {?} */
                        var files = new FileUploadEntity();
                        files.rootId = "wf_attachment";
                        files.metadataIdList = [];
                        _this.attachmentList.forEach(function (a) {
                            files.metadataIdList.push(a.metadataId);
                        });
                        files.metadataIdList.length && _this.commentSvc.uploadAttachment(files).subscribe(function () { });
                    });
                }
                else {
                    throw new Error("使用附件上传功能，请升级表单");
                }
            };
        /**
         * @param {?} attachment
         * @return {?}
         */
        TaskCommentComponent.prototype.attachmentDelete = /**
         * @param {?} attachment
         * @return {?}
         */
            function (attachment) {
                /** @type {?} */
                var gspDocDeleteEntity = {
                    rootId: "wf_attachment",
                    metadataId: attachment.metadataId,
                    mode: "Formal"
                };
                /** @type {?} */
                var index = this.attachmentList.indexOf(attachment);
                if (index > -1) {
                    this.attachmentList.splice(index, 1);
                }
                this.attachment.emit(this.attachmentList);
                this.commentSvc.deleteAttachment(gspDocDeleteEntity).subscribe(function () { });
            };
        /**
         * @param {?} attachmentInfo
         * @return {?}
         */
        TaskCommentComponent.prototype.imageUrl = /**
         * @param {?} attachmentInfo
         * @return {?}
         */
            function (attachmentInfo) {
                return '/platform/runtime/wf/webapp/mobiletaskcenter/assets/accessory/' + this.createItem(attachmentInfo) + '.svg';
            };
        //解析文件类型，给出缩略图
        //解析文件类型，给出缩略图
        /**
         * @param {?} attachmentInfo
         * @return {?}
         */
        TaskCommentComponent.prototype.createItem =
            //解析文件类型，给出缩略图
            /**
             * @param {?} attachmentInfo
             * @return {?}
             */
            function (attachmentInfo) {
                /** @type {?} */
                var pos = attachmentInfo.fileName.lastIndexOf(".");
                /** @type {?} */
                var type = attachmentInfo.fileName.substring(pos + 1);
                type = (type == '' ? 'Default' : type.toLowerCase());
                /** @type {?} */
                var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
                /** @type {?} */
                var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
                /** @type {?} */
                var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
                /** @type {?} */
                var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
                if (docLib.indexOf(type) >= 0) {
                    type = type.toLowerCase();
                }
                else if (videoLib.indexOf(type) >= 0) {
                    type = 'video';
                }
                else if (audioLib.indexOf(type) >= 0) {
                    type = 'audio';
                }
                else if (imgLib.indexOf(type) >= 0) {
                    type = 'picture';
                }
                else {
                    type = 'default';
                }
                return type;
            };
        TaskCommentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-comment',
                        template: "<div class=\"fa-approve-comment fa-approve-common-gutter\">\r\n  <div class=\"fa-approve-comment--header\">\r\n    <div class=\"approve-comment--title\">\r\n      <div class=\"fa-btn-like-dropdown\">\r\n        <div class=\"btn-group\" fDropdown #dropdownEl=\"fDropdown\">\r\n          <button class=\"btn btn-secondary dropdown-toggle fa-dropdown-button\" fDropdownToggle type=\"button\">\r\n            {{ \"static.inputLabel\" | translate }}\r\n          </button>\r\n          <div *ngIf=\"uiState.commentList.length\" class=\"dropdown-menu\" fDropdownMenu>\r\n            <li class=\"dropdown-item\" *ngFor=\"let comment of uiState.commentList\" (click)=\"buttonClick(comment.message)\">\r\n              <span>{{ comment.message }}</span>\r\n            </li>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"fa-approve-comment--content\">\r\n    <textarea\r\n      class=\"form-control content-textarea\"\r\n      [(ngModel)]=\"value\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [style.height.px]=\"textAreaHeight\"\r\n    ></textarea>\r\n  </div>\r\n  <div class=\"fa-approve-comment--footer\">\r\n    <div class=\"approve-comment--text-btns\">\r\n      <div class=\"text-btns-item\">\r\n        <span class=\"f-icon f-icon-gear\"></span>\r\n        <span class=\"text-btns-item--text\" (click)=\"onEditComment()\">\r\n          {{\"static.manage\" | translate}}\r\n        </span>\r\n      </div>\r\n      <div class=\"text-btns-item\" *ngIf=\"ifShowAttachment && showUploadAttachment\">\r\n        <span  class=\"f-icon f-icon-attachment\"></span>\r\n        <span  class=\"text-btns-item--text\" (click)=\"uploadAttachment()\">\r\n          {{\"static.attachmentUpload\" | translate}}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"attachmentList.length > 0\">\r\n      <li *ngFor=\"let attachment of attachmentList\">\r\n        <div class=\"wf-docFile\">\r\n          <div><img class=\"wf-docFileIcon\" [src]=\"imageUrl(attachment)\"></div>\r\n          <div class=\"wf-docFileInfo\" >\r\n            <div class=\"attachment-list\">\r\n              <a>{{attachment.fileName}}</a>\r\n            </div>\r\n            <div class=\"attachment-delete\" (click)=\"attachmentDelete(attachment)\">\r\n              <span class=\"f-icon f-icon-close-outline\"></span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<farris-dialog #commentDialog [buttons]=\"formButtonRef\" [width]=\"550\" [height]=\"360\" [title]=\"'static.title' | translate\">\r\n    <kendo-grid #commentGrid [data]=\"uiState.commentList\" [selectable]=\"true\" (cellClick)=\"cellClickHandler($event)\"\r\n        (cellClose)=\"cellCloseHandler($event)\" style=\"padding: 10px;\">\r\n        <kendo-grid-column field=\"message\" title=\"{{'static.content' | translate}}\" width=\"80%\"></kendo-grid-column>\r\n        <kendo-grid-column field=\"sortOrder\" title=\"{{'static.order' | translate}}\" width=\"20%\"></kendo-grid-column>\r\n    </kendo-grid>\r\n</farris-dialog>\r\n<ng-template #formButtonRef>\r\n    <button class=\"btn btn-primary mr-2\" (click)=\"viewModel.add()\">{{'static.add' | translate}}</button>\r\n    <button class=\"btn btn-secondary mr-2\" (click)=\"viewModel.delete()\">{{'static.delete' | translate}}</button>\r\n    <button class=\"btn btn-secondary mr-2\" (click)=\"save()\">{{'static.save' | translate}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"commentDialog.close()\">{{'static.cancel' | translate}}</button>\r\n</ng-template>\r\n",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return TaskCommentComponent; }),
                                multi: true
                            },],
                        styles: [".fa-approval-operate-list{display:flex;flex-direction:row;align-items:center}.fa-approval-operate-list .approval-operate--label{position:relative;margin-right:8px;padding:3px 16px;border:1px solid rgba(0,0,0,.15);border-radius:2px;overflow:hidden;cursor:pointer;margin-bottom:0;color:#595959}.fa-approval-operate-list .approval-operate--label .label-title{font-size:14px;line-height:20px;white-space:nowrap}.fa-approval-operate-list .approval-operate--label .label-tip{position:absolute;display:block;right:0;bottom:0;width:14px;height:14px;border:7px solid #dadada;border-top:7px solid transparent;border-left:7px solid transparent}.fa-approval-operate-list .approval-operate--label .label-icon{position:absolute;display:block;right:-3px;bottom:-2px;font-size:12px;color:#fff}.fa-approval-operate-list .approval-operate--label .label-icon::before{content:'\\e118'}.fa-approval-operate-list .approval-operate--radio{display:none}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label{color:#388fff;border-color:#388fff;background:rgba(23,145,255,.05)}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label .label-tip{border-right-color:#388fff;border-bottom-color:#388fff}.fa-dropdown-button{border-color:#f7f7f7;font-size:12px;color:#667580;background:#f7f7f7}.fa-btn-like-dropdown{display:flex;align-items:center}.fa-btn-like-dropdown .like-dropdown--text{margin:0 4px 0 0}.fa-btn-like-dropdown .like-dropdown--icon{color:rgba(0,0,0,.25)}.fa-approve-common-gutter{margin:0 0 12px}.fa-approve-comment .approve-comment--title{display:inline-block;color:#667580;border-radius:4px 4px 0 0;height:26px;padding:0 9px;position:relative;background:#f7f7f7;cursor:pointer}.fa-approve-comment .approve-comment--title:after{content:'';height:100%;position:absolute;right:-10px;top:0;bottom:0;border-right:5px solid transparent;border-left:5px solid #f7f7f7;border-bottom:13px solid #f7f7f7;border-top:13px solid transparent}.fa-approve-comment .approve-comment--title .fa-btn-like-dropdown{font-size:12px;padding:2px 0}.fa-approve-comment .fa-approve-comment--content .content-textarea{border-color:#dcdcdc;border-radius:0 0 2px 2px}.fa-approve-comment .fa-approve-comment--footer{font-size:13px;color:#667580;background:#f7f7f7;padding:5px 0}.fa-approve-comment .approve-comment--text-btns{display:flex;flex-direction:row}.fa-approve-comment .approve-comment--text-btns .text-btns-item{display:flex;flex-direction:row;align-items:center;font-size:12px;line-height:18px;color:#667580;padding:4px;margin-right:8px;cursor:pointer}.fa-approve-comment .approve-comment--text-btns .text-btns-item:hover{color:#388fff}.fa-approve-comment .approve-comment--text-btns .text-btns-item .f-icon{margin-right:6px}.fa-approveal-links::after{content:\".\";display:block;height:0;clear:both;visibility:hidden}.fa-approveal-links .approveal-links--link{font-size:14px;position:relative;padding:0 16px 0 0;display:flex;align-items:center;float:left}.fa-approveal-links .approveal-links--link .link-text{color:rgba(0,0,0,.65);margin:0 8px 0 0}.fa-approveal-links .approveal-links--link+.approveal-links--link{padding-left:16px}.fa-approveal-links .approveal-links--link+.approveal-links--link::before{content:'';position:absolute;width:1px;height:80%;left:0;top:10%;background:#dbdbdb}.fa-btn-group-lg .btn{padding-top:6px;padding-bottom:6px;min-width:100px;text-align:center}.fa-approve-record{padding:0 0 16px;position:relative}.fa-approve-record .fa-approve-record--timeline{position:absolute;width:34px;top:0;bottom:0;z-index:100}.fa-approve-record .fa-approve-record--timeline::after{content:'';position:absolute;width:1px;height:100%;overflow:hidden;left:50%;top:0;z-index:101;border-left:1px dashed #dcdcdc}.fa-approve-record .fa-approve-record--timeline .fa-approve-star{position:relative;z-index:103;margin:20px auto}.fa-approve-record.fa-state-running .fa-approve-record--timeline::after{top:20px}.fa-approve-record:last-child .fa-approve-record--timeline::after{height:20px}.fa-approve-record .fa-approve-record--content{margin:0 0 0 34px;padding:16px 14px;background:#f9f9f9;border-radius:2px}.fa-approve-record .fa-approve-record--content .approve-record--header{margin:0 0 12px;display:flex;align-items:center}.fa-approve-record .fa-approve-record--content .approve-record--header .header--title{margin-bottom:0;color:rgba(0,0,0,.85)}.fa-approve-record .fa-approve-record--content .approve-record--header>*{margin:0 19px 0 0}.fa-approve-record .approve-record--list-item{display:flex;flex-direction:row}.fa-approve-record .approve-record--list-item+.approve-record--list-item{padding-top:8px}.fa-approve-record .approve-record--list-item .list-item--auxiliary{width:30px;margin:0 10px 0 0}.fa-approve-record .approve-record--list-item .list-item--main{flex-grow:1;flex-shrink:1;flex-basis:auto;padding:6px 0 0;background:#f9f9f9}.fa-approve-record .approve-record--list-item .list-item--content{padding:20px 0 0}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info{font-size:12px;margin-bottom:0}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info .info-label{color:rgba(0,0,0,.65)}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info .info-text{color:rgba(0,0,0,.85)}.fa-approve-record .approve-record--list-item .list-item--header{display:flex;align-items:center}.fa-approve-record .approve-record--list-item .list-item--header>*{margin:0 16px 0 0}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info{margin-bottom:0;font-size:12px}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info .info-label{color:rgba(0,0,0,.35)}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info .info-text{color:rgba(0,0,0,.65)}.fa-approve-record .approve-record--list-item .list-item--name{color:#4297fa}.fa-approve-record .approve-record--avatar{width:30px;height:30px;border-radius:15px}.fa-approve-round-bg{margin:4px auto 0;width:30px;height:30px;background:#59a1ff;border-radius:18px;line-height:30px;text-align:center;white-space:nowrap;font-size:12px;overflow:hidden}.fa-approve-round-bg-text{color:#fff}.fa-approve-star{width:14px;height:14px;display:block;background:rgba(56,143,255,.4);border-radius:7px;position:relative}.fa-approve-star::after{content:'';width:8px;height:8px;position:absolute;top:50%;left:50%;margin:-4px 0 0 -4px;border-radius:4px;background:#388fff}.fa-approve-star.bg-warning{background:rgba(245,156,36,.4)!important}.fa-approve-star.bg-warning::after{background:#f59c24}.fa-approve-badge{padding-top:4px;padding-bottom:4px;border-radius:10px}.fa-approve-badge-light{font-size:13px;line-height:20px;padding:0 8px;color:#5f637a;border:1px solid #e6e6e6;background:#f6faff}.fa-approve-link-border{cursor:pointer;display:inline-block;border:1px solid #60a5ff;border-radius:13px;font-size:12px;line-height:16px;color:#388fff;padding:3px 10px;background:#ebf5ff}.fa-approve-link-border:hover{background:#2881ff;color:#fff}.fm-toolbar{flex-direction:row;display:flex}.wf-docFile{flex-shrink:1;flex-grow:1;flex-basis:0;display:flex;flex-direction:row;align-items:flex-start;border-top:1px solid #f8f9fa;border-left:1px solid #f8f9fa}.wf-docFileIcon{margin:0 0 0 10px;width:20px;height:20px;line-height:20px;text-align:center;overflow:hidden;white-space:nowrap;padding:2px}.wf-docFileInfo{flex-shrink:1;flex-grow:1;flex-basis:0;padding:2px 6px 0 9px;margin-left:0}.wf-docFileInfo:hover .attachment-delete{display:block}.wf-docFileSize{font-size:11px;color:#888}.wf-doc-delete{margin:auto;font-size:18px;color:#f8f9fa}li{list-style:none}.attachment-delete{float:right;cursor:pointer;display:none;text-align:right;padding-right:10px}.attachment-delete:hover{color:#4297fa}.attachment-list{float:left;font-size:12px;margin-left:8px;width:180px}"]
                    }] }
        ];
        /** @nocollapse */
        TaskCommentComponent.ctorParameters = function () {
            return [
                { type: TaskCommentService },
                { type: TaskCommentViewModel },
                { type: TaskCommentUIState },
                { type: forms.FormBuilder },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        TaskCommentComponent.propDecorators = {
            comment: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            processInstanceId: [{ type: core.Input }],
            actionCode: [{ type: core.Input }],
            attachment: [{ type: core.Output }],
            commentDialog: [{ type: core.ViewChild, args: [uiDialog.DialogComponent,] }],
            commentGrid: [{ type: core.ViewChild, args: ['commentGrid',] }],
            dropDownEl: [{ type: core.ViewChild, args: ['dropdownEl',] }],
            grid: [{ type: core.ViewChild, args: ['grid',] }],
            TextAreaHeight: [{ type: core.Input }]
        };
        return TaskCommentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var en = {
        static: {
            title: 'Approval comments',
            add: 'Add',
            delete: 'Delete',
            save: 'Save',
            cancel: 'Cancel',
            content: 'Content',
            order: 'Order',
            inputLabel: 'Comments',
            manage: 'Comments management',
            attachmentUpload: 'attachment upload',
            repeatFile: 'Contains repeat files:'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zh_CHS = {
        static: {
            title: '常用意见管理',
            add: '新增',
            delete: '删除',
            save: '保存',
            cancel: '取消',
            content: '内容',
            order: '顺序',
            inputLabel: '常用意见',
            manage: '意见维护',
            attachmentUpload: '上传附件',
            repeatFile: '包含重复文件：'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zh_CHT = {
        static: {
            title: '常用意見管理',
            add: '新增',
            delete: '刪除',
            save: '保存',
            cancel: '取消',
            content: '內容',
            order: '順序',
            inputLabel: '常用意見',
            manage: '意見維護',
            attachmentUpload: '上傳附件',
            repeatFile: '包含重復文件：'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var translate = {
        'zh-CHS': zh_CHS,
        'en': en,
        'zh-CHT': zh_CHT
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var I18nService = /** @class */ (function () {
        function I18nService() {
            this.defaultLang = localStorage.getItem('languageCode');
            if (!this.defaultLang) {
                this.langData = translate['zh-CHS'];
            }
            else {
                this.langData = translate[this.defaultLang];
            }
        }
        /**
         * @param {?} name
         * @return {?}
         */
        I18nService.prototype.getValue = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!name) {
                    return '';
                }
                /** @type {?} */
                var resultVal = '';
                if (name.indexOf('.') === -1) {
                    resultVal = this.langData[name];
                }
                else {
                    resultVal = name.split('.').reduce(function (obj, key) {
                        if (obj) {
                            return obj[key];
                        }
                        else {
                            return null;
                        }
                    }, this.langData);
                }
                return resultVal;
            };
        I18nService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        I18nService.ctorParameters = function () { return []; };
        return I18nService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(i18nService) {
            this.i18nService = i18nService;
        }
        /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
        TranslatePipe.prototype.transform = /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
            function (name, defaultVal) {
                if (defaultVal === void 0) {
                    defaultVal = '';
                }
                /** @type {?} */
                var r = this.i18nService.getValue(name);
                return r ? r : defaultVal;
            };
        TranslatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'translate' },] }
        ];
        /** @nocollapse */
        TranslatePipe.ctorParameters = function () {
            return [
                { type: I18nService }
            ];
        };
        return TranslatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //不要删，否则会引起其他使用提交审批表单报错 by fangpengfei@20201228
    var TaskCommentRepository = /** @class */ (function () {
        function TaskCommentRepository() {
        }
        TaskCommentRepository.decorators = [
            { type: core.Injectable }
        ];
        return TaskCommentRepository;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFCommentModule = /** @class */ (function () {
        function WFCommentModule() {
        }
        WFCommentModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TaskCommentComponent,
                            TranslatePipe,
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiDialog.FarrisDialogModule,
                            uiModal.ModalModule.forRoot(),
                            kendoAngularGrid.GridModule,
                            uiComboList.ComboListModule,
                            uiDropdown.FDropdownDirectiveTypeModule,
                            formdocUpload.UploadDialogMoudle,
                        ],
                        exports: [
                            TaskCommentComponent,
                        ],
                        providers: [
                            cafCommon.HttpService,
                            TaskCommentService,
                            TaskCommentUIState,
                            TaskCommentViewModel,
                            I18nService,
                            TaskCommentRepository
                        ],
                    },] }
        ];
        return WFCommentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TaskCommentService = TaskCommentService;
    exports.TaskCommentComponent = TaskCommentComponent;
    exports.WFCommentModule = WFCommentModule;
    exports.CommonComment = CommonComment;
    exports.TaskCommentUIState = TaskCommentUIState;
    exports.TaskCommentViewModel = TaskCommentViewModel;
    exports.I18nService = I18nService;
    exports.TranslatePipe = TranslatePipe;
    exports.TaskCommentRepository = TaskCommentRepository;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-wf-ui-comment.umd.js.map