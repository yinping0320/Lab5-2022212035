/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { TaskCommentComponent } from './task-comment/task-comment.component';
import { TaskCommentService } from './services/task-comment.service';
import { ModalModule } from '@farris/ui-modal';
import { GridModule } from '@progress/kendo-angular-grid';
import { TaskCommentUIState } from './task-comment/task-comment.uistate';
import { TaskCommentViewModel } from './task-comment/task-comment.viewmodel';
import { HttpService } from '@ecp-caf/caf-common';
import { TranslatePipe } from './services/translate.pipe';
import { I18nService } from './services/i18n.service';
import { ComboListModule } from '@farris/ui-combo-list';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { UploadDialogMoudle } from '@gsp-svc/formdoc-upload';
import { TaskCommentRepository } from './model/task-comment.repository';
var WFCommentModule = /** @class */ (function () {
    function WFCommentModule() {
    }
    WFCommentModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TaskCommentComponent,
                        TranslatePipe,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        FarrisDialogModule,
                        ModalModule.forRoot(),
                        GridModule,
                        ComboListModule,
                        FDropdownDirectiveTypeModule,
                        UploadDialogMoudle,
                    ],
                    exports: [
                        TaskCommentComponent,
                    ],
                    providers: [
                        HttpService,
                        TaskCommentService,
                        TaskCommentUIState,
                        TaskCommentViewModel,
                        I18nService,
                        TaskCommentRepository
                    ],
                },] }
    ];
    return WFCommentModule;
}());
export { WFCommentModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtY29tbWVudC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3VpLWNvbW1lbnQvIiwic291cmNlcyI6WyJsaWIvd2YtY29tbWVudC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUd4RTtJQUFBO0lBMkIrQixDQUFDOztnQkEzQi9CLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osb0JBQW9CO3dCQUNwQixhQUFhO3FCQUNkO29CQUNELE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsa0JBQWtCO3dCQUNsQixXQUFXLENBQUMsT0FBTyxFQUFFO3dCQUNyQixVQUFVO3dCQUNWLGVBQWU7d0JBQ2YsNEJBQTRCO3dCQUM1QixrQkFBa0I7cUJBQ25CO29CQUNELE9BQU8sRUFBRTt3QkFDUCxvQkFBb0I7cUJBQ3JCO29CQUNELFNBQVMsRUFBRTt3QkFDVCxXQUFXO3dCQUNYLGtCQUFrQjt3QkFDbEIsa0JBQWtCO3dCQUNsQixvQkFBb0I7d0JBQ3BCLFdBQVc7d0JBQ1gscUJBQXFCO3FCQUN0QjtpQkFDRjs7SUFDOEIsc0JBQUM7Q0FBQSxBQTNCaEMsSUEyQmdDO1NBQW5CLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRmFycmlzRGlhbG9nTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kaWFsb2cnO1xyXG5pbXBvcnQgeyBUYXNrQ29tbWVudENvbXBvbmVudCB9IGZyb20gJy4vdGFzay1jb21tZW50L3Rhc2stY29tbWVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUYXNrQ29tbWVudFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3Rhc2stY29tbWVudC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTW9kYWxNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgR3JpZE1vZHVsZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWdyaWQnO1xyXG5pbXBvcnQgeyBUYXNrQ29tbWVudFVJU3RhdGUgfSBmcm9tICcuL3Rhc2stY29tbWVudC90YXNrLWNvbW1lbnQudWlzdGF0ZSc7XHJcbmltcG9ydCB7IFRhc2tDb21tZW50Vmlld01vZGVsIH0gZnJvbSAnLi90YXNrLWNvbW1lbnQvdGFzay1jb21tZW50LnZpZXdtb2RlbCc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVBpcGUgfSBmcm9tICcuL3NlcnZpY2VzL3RyYW5zbGF0ZS5waXBlJztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2kxOG4uc2VydmljZSc7XHJcbmltcG9ydCB7IENvbWJvTGlzdE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbGlzdCc7XHJcbmltcG9ydCB7IEZEcm9wZG93bkRpcmVjdGl2ZVR5cGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRyb3Bkb3duJztcclxuaW1wb3J0IHsgVXBsb2FkRGlhbG9nTW91ZGxlIH0gZnJvbSAnQGdzcC1zdmMvZm9ybWRvYy11cGxvYWQnO1xyXG5pbXBvcnQgeyBUYXNrQ29tbWVudFJlcG9zaXRvcnkgfSBmcm9tICcuL21vZGVsL3Rhc2stY29tbWVudC5yZXBvc2l0b3J5JztcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgVGFza0NvbW1lbnRDb21wb25lbnQsXHJcbiAgICBUcmFuc2xhdGVQaXBlLFxyXG4gIF0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgRm9ybXNNb2R1bGUsXHJcbiAgICBGYXJyaXNEaWFsb2dNb2R1bGUsXHJcbiAgICBNb2RhbE1vZHVsZS5mb3JSb290KCksXHJcbiAgICBHcmlkTW9kdWxlLFxyXG4gICAgQ29tYm9MaXN0TW9kdWxlLFxyXG4gICAgRkRyb3Bkb3duRGlyZWN0aXZlVHlwZU1vZHVsZSxcclxuICAgIFVwbG9hZERpYWxvZ01vdWRsZSxcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIFRhc2tDb21tZW50Q29tcG9uZW50LFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBIdHRwU2VydmljZSxcclxuICAgIFRhc2tDb21tZW50U2VydmljZSxcclxuICAgIFRhc2tDb21tZW50VUlTdGF0ZSxcclxuICAgIFRhc2tDb21tZW50Vmlld01vZGVsLFxyXG4gICAgSTE4blNlcnZpY2UsXHJcbiAgICBUYXNrQ29tbWVudFJlcG9zaXRvcnlcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgV0ZDb21tZW50TW9kdWxlIHsgfVxyXG4iXX0=