import { OnInit, Injector, ComponentFactoryResolver } from '@angular/core';
import { TaskCommentService } from '../services/task-comment.service';
import { TaskCommentViewModel } from './task-comment.viewmodel';
import { TaskCommentUIState } from './task-comment.uistate';
import { DialogComponent } from '@farris/ui-dialog';
import { ControlValueAccessor, FormGroup, FormBuilder } from '@angular/forms';
import { CommonComment } from '../entities/comment';
import { GridComponent } from '@progress/kendo-angular-grid';
import { FDropdownDirective } from '@farris/ui-dropdown';
import { UploadDialogService } from '@gsp-svc/formdoc-upload';
import { DatagridComponent } from "@farris/ui-datagrid";
import { MessagerService } from '@farris/ui-messager';
export declare class TaskCommentComponent implements OnInit, ControlValueAccessor {
    private commentSvc;
    viewModel: TaskCommentViewModel;
    uiState: TaskCommentUIState;
    private formBuilder;
    private injector;
    comment: string;
    placeholder: string;
    processInstanceId: string;
    actionCode: string;
    attachment: any;
    commentDialog: DialogComponent;
    commentGrid: GridComponent;
    dropDownEl: FDropdownDirective;
    grid: DatagridComponent;
    private _value;
    attachmentList: any[];
    selectValue: string;
    textAreaHeight: number;
    messageService: MessagerService;
    isRepeat: boolean;
    ifShowAttachment: boolean;
    showUploadAttachment: boolean;
    value: any;
    TextAreaHeight: number;
    onModelChange: (obj: any) => void;
    onModelTouched: (obj: any) => void;
    uploadDialog: UploadDialogService;
    resolver: ComponentFactoryResolver;
    constructor(commentSvc: TaskCommentService, viewModel: TaskCommentViewModel, uiState: TaskCommentUIState, formBuilder: FormBuilder, injector: Injector);
    ngOnInit(): void;
    onEditComment(): void;
    save(): void;
    loadComments(): void;
    cellClickHandler({ sender, rowIndex, columnIndex, dataItem, isEdited }: {
        sender: any;
        rowIndex: any;
        columnIndex: any;
        dataItem: any;
        isEdited: any;
    }): void;
    cellCloseHandler(args: any): void;
    createFormGroup(dataItem: CommonComment): FormGroup;
    writeValue(value: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    buttonClick(data: any): void;
    uploadAttachment(): void;
    attachmentDelete(attachment: any): void;
    imageUrl(attachmentInfo: any): string;
    createItem(attachmentInfo: any): any;
}
