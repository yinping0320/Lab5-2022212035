/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TaskCommentUIState } from './task-comment.uistate';
import { CommonComment } from '../entities/comment';
import { forkJoin } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
export class TaskCommentViewModel {
    /**
     * @param {?} uiState
     * @param {?} httpSvc
     */
    constructor(uiState, httpSvc) {
        this.uiState = uiState;
        this.httpSvc = httpSvc;
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const newEntity = CommonComment.newEntity();
        newEntity.sortOrder = this.uiState.commentList.length + 1;
        this.uiState.commentList.push(newEntity);
    }
    /**
     * @return {?}
     */
    delete() {
        if (this.uiState.curComment) {
            /** @type {?} */
            const index = this.uiState.commentList.findIndex(c => c.id === this.uiState.curComment.id);
            if (index > -1) {
                this.uiState.commentList.splice(index, 1);
            }
        }
    }
    /**
     * @return {?}
     */
    save() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        /** @type {?} */
        const deleteIds = this.uiState.originCommentIds.filter(id => this.uiState.commentList.findIndex(c => c.id === id) < 0);
        /** @type {?} */
        const addEntities = this.uiState.commentList.filter(item => this.uiState.originCommentIds.indexOf(item.id) < 0);
        /** @type {?} */
        const changesList = this.uiState.commentList.filter(item => addEntities.findIndex(aItem => aItem.id === item.id) < 0
            && this.uiState.changesCommentIds.indexOf(item.id) > -1);
        return forkJoin(deleteIds.map(id => this.httpSvc.delete(url + `/${id}`, null))
            .concat(changesList.map(change => this.httpSvc.patch(url, change)))
            .concat(addEntities.map(add => this.httpSvc.post(url, add))));
    }
}
TaskCommentViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskCommentViewModel.ctorParameters = () => [
    { type: TaskCommentUIState },
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskCommentViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    TaskCommentViewModel.prototype.httpSvc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1jb21tZW50LnZpZXdtb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2YvdWktY29tbWVudC8iLCJzb3VyY2VzIjpbImxpYi90YXNrLWNvbW1lbnQvdGFzay1jb21tZW50LnZpZXdtb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFjLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbEQsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7SUFDN0IsWUFDWSxPQUEyQixFQUMzQixPQUFvQjtRQURwQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUMzQixZQUFPLEdBQVAsT0FBTyxDQUFhO0lBQ2hDLENBQUM7Ozs7SUFDRCxHQUFHOztjQUNPLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFO1FBQzNDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7OztJQUNELE1BQU07UUFDRixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFOztrQkFDbkIsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQzFGLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDN0M7U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCxJQUFJOztjQUNNLEdBQUcsR0FBRyxxQ0FBcUM7O2NBRTNDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztjQUNoSCxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Y0FDekcsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO2VBQzdHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1RCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDekUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUNsRSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDOzs7WUE5QkosVUFBVTs7OztZQUxGLGtCQUFrQjtZQUdsQixXQUFXOzs7Ozs7O0lBS1osdUNBQW1DOzs7OztJQUNuQyx1Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRhc2tDb21tZW50VUlTdGF0ZSB9IGZyb20gJy4vdGFzay1jb21tZW50LnVpc3RhdGUnO1xyXG5pbXBvcnQgeyBDb21tb25Db21tZW50IH0gZnJvbSAnLi4vZW50aXRpZXMvY29tbWVudCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBUYXNrQ29tbWVudFZpZXdNb2RlbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHVpU3RhdGU6IFRhc2tDb21tZW50VUlTdGF0ZSxcclxuICAgICAgICBwcml2YXRlIGh0dHBTdmM6IEh0dHBTZXJ2aWNlKSB7XHJcbiAgICB9XHJcbiAgICBhZGQoKSB7XHJcbiAgICAgICAgY29uc3QgbmV3RW50aXR5ID0gQ29tbW9uQ29tbWVudC5uZXdFbnRpdHkoKTtcclxuICAgICAgICBuZXdFbnRpdHkuc29ydE9yZGVyID0gdGhpcy51aVN0YXRlLmNvbW1lbnRMaXN0Lmxlbmd0aCArIDE7XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLmNvbW1lbnRMaXN0LnB1c2gobmV3RW50aXR5KTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy51aVN0YXRlLmN1ckNvbW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnVpU3RhdGUuY29tbWVudExpc3QuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gdGhpcy51aVN0YXRlLmN1ckNvbW1lbnQuaWQpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51aVN0YXRlLmNvbW1lbnRMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9jb21tb25Db21tZW50c2A7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlbGV0ZUlkcyA9IHRoaXMudWlTdGF0ZS5vcmlnaW5Db21tZW50SWRzLmZpbHRlcihpZCA9PiB0aGlzLnVpU3RhdGUuY29tbWVudExpc3QuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gaWQpIDwgMCk7XHJcbiAgICAgICAgY29uc3QgYWRkRW50aXRpZXMgPSB0aGlzLnVpU3RhdGUuY29tbWVudExpc3QuZmlsdGVyKGl0ZW0gPT4gdGhpcy51aVN0YXRlLm9yaWdpbkNvbW1lbnRJZHMuaW5kZXhPZihpdGVtLmlkKSA8IDApO1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZXNMaXN0ID0gdGhpcy51aVN0YXRlLmNvbW1lbnRMaXN0LmZpbHRlcihpdGVtID0+IGFkZEVudGl0aWVzLmZpbmRJbmRleChhSXRlbSA9PiBhSXRlbS5pZCA9PT0gaXRlbS5pZCkgPCAwXHJcbiAgICAgICAgICAgICYmIHRoaXMudWlTdGF0ZS5jaGFuZ2VzQ29tbWVudElkcy5pbmRleE9mKGl0ZW0uaWQpID4gLTEpO1xyXG4gICAgICAgIHJldHVybiBmb3JrSm9pbihkZWxldGVJZHMubWFwKGlkID0+IHRoaXMuaHR0cFN2Yy5kZWxldGUodXJsICsgYC8ke2lkfWAsIG51bGwpKVxyXG4gICAgICAgICAgICAuY29uY2F0KGNoYW5nZXNMaXN0Lm1hcChjaGFuZ2UgPT4gdGhpcy5odHRwU3ZjLnBhdGNoKHVybCwgY2hhbmdlKSkpXHJcbiAgICAgICAgICAgIC5jb25jYXQoYWRkRW50aXRpZXMubWFwKGFkZCA9PiB0aGlzLmh0dHBTdmMucG9zdCh1cmwsIGFkZCkpKSk7XHJcbiAgICB9XHJcbn1cclxuIl19