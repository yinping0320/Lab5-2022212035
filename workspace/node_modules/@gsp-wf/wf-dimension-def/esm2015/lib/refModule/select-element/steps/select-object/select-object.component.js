/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, Input } from '@angular/core';
import { FarrisPageDetailComponent } from '@farris/ui-wizard';
export class SelectObjectComponent {
    constructor() {
        this.enableNextStep = true;
        this.detailPage = null;
        // 记录当前BE所有表的code
        this.treeTables = [];
        this.grid_selected = {};
        this.readonlyFields = []; // 不可取消勾选的字段
        // 不可取消勾选的字段
        /**
         * 左侧树信息
         */
        this.treeData = [];
        this.farrisTreeData = [];
        this.treeConfig = {
            idField: 'ID',
            columns: [
                { field: 'Name', title: 'Name', width: 200 }
            ],
            /**
             * 叶子节点图标
             */
            leafIcon: 'f-icon f-icon-folder text-info',
            /**
             * 节点展开图标
             */
            expandIcon: 'f-icon f-icon-folder-open text-info',
            /**
             * 节点折叠图标
             */
            collapseIcon: 'f-icon f-icon-folder text-info',
            /**
             * 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
             */
            expandLevel: 2,
        };
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmpPageDetail(cmp) {
        this.detailPage = cmp;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.load();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.load();
    }
    /**
     * @return {?}
     */
    load() {
        if (this.data && this.data.be) {
            /** @type {?} */
            const mainObject = this.data.be.MainObject;
            this.treeData = this.getTablesTree(mainObject);
            this.farrisTreeData = this.getFarrisTreeData(this.treeData);
        }
    }
    /**
     * 组装farris-tree左侧树
     * @param {?} data
     * @return {?}
     */
    getFarrisTreeData(data) {
        /** @type {?} */
        const newArr = [];
        if (data && data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let childrenArr = [];
                if (item && item.Children && item.Children.length) {
                    childrenArr = this.getFarrisTreeData(item.Children);
                }
                newArr.push({ data: item, children: childrenArr, expanded: true });
            }));
        }
        return newArr;
    }
    /**
     * 组装左侧树
     * @param {?} mainObject
     * @return {?}
     */
    getTablesTree(mainObject) {
        const { ContainChildObjects, ColumnGenerateID, Keys } = mainObject, parentTable = tslib_1.__rest(mainObject, ["ContainChildObjects", "ColumnGenerateID", "Keys"]);
        this.treeTables.push(parentTable.Code);
        // const selectedAll = this.grid_selected[parentTable.Code] ? false : true;
        // this.gridData[parentTable.Code] = this.getGridFields(parentTable.ContainElements, parentTable.Code, selectedAll);
        if (ContainChildObjects && ContainChildObjects.length > 0) {
            parentTable['Children'] = [];
            ContainChildObjects.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childTree = this.getTablesTree((/** @type {?} */ (child)));
                parentTable['Children'] = parentTable['Children'].concat(childTree);
            }));
        }
        // 判断主键
        if (ColumnGenerateID) {
            this.readonlyFields.push(ColumnGenerateID.ElementID);
        }
        // 判断主从表的关联字段
        if (Keys && Keys.length > 0) {
            Keys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                this.readonlyFields.push(key.SourceElement);
            }));
        }
        return [parentTable];
    }
    /**
     * 选中节点事件
     * @param {?} event 被选中节点
     * @return {?}
     */
    handleTreeSelection(event) {
        this.data.selectedObj = event.node.data;
    }
    /**
     * @return {?}
     */
    nextStep() {
        // 设置当前页传递出去数据
        this.data.BeFields = this.data.selectedObj.ContainElements;
        this.detailPage.setPageData(this.data.selectedObj);
        // 下一步
        this.detailPage.nextStep();
    }
    /**
     * @return {?}
     */
    cancel() {
        this.detailPage.cancelWizard();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    pagedetailSelected(args) {
    }
}
SelectObjectComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-object',
                template: "<wizard-page-detail #detailpage1 (pagedetailSelected)=\"pagedetailSelected($event)\">\r\n    <ng-template wizardPageContent>\r\n        <div class=\"f-template-wizard-page-content\" style=\"margin-left:2px\">\r\n            <farris-treetable #treetable [columns]=\"treeConfig.columns\" [showBorder]=\"false\" [showHeader]=\"false\" [data]=\"farrisTreeData\" [fit]=\"true\" [idField]=\"treeConfig.idField\" [singleSelect]=\"true\" [showCheckbox]=\"false\" [showIcon]=\"true\" [disabled]=\"false\"\r\n                [checkOnSelect]=\"true\" (nodeSelected)=\"handleTreeSelection($event)\" [leafIcon]=\"treeConfig.leafIcon\" [expandIcon]=\"treeConfig.expandIcon\" [collapseIcon]=\"treeConfig.collapseIcon\">\r\n            </farris-treetable>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template wizardPageFooter>\r\n        <div class=\"f-template-wizard-page-footer\">\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n              \u53D6\u6D88\r\n          </button>\r\n            <button class=\"btn btn-primary\" [disabled]=\"!enableNextStep\" (click)=\"nextStep()\">\r\n              \u4E0B\u4E00\u6B65\r\n          </button>\r\n        </div>\r\n    </ng-template>\r\n</wizard-page-detail>",
                styles: [":host{display:flex;flex:1}button{margin:10px}"]
            }] }
];
/** @nocollapse */
SelectObjectComponent.ctorParameters = () => [];
SelectObjectComponent.propDecorators = {
    data: [{ type: Input }],
    cmpPageDetail: [{ type: ViewChild, args: [FarrisPageDetailComponent,] }]
};
if (false) {
    /** @type {?} */
    SelectObjectComponent.prototype.data;
    /** @type {?} */
    SelectObjectComponent.prototype.enableNextStep;
    /**
     * @type {?}
     * @private
     */
    SelectObjectComponent.prototype.detailPage;
    /** @type {?} */
    SelectObjectComponent.prototype.treeTables;
    /** @type {?} */
    SelectObjectComponent.prototype.grid_selected;
    /** @type {?} */
    SelectObjectComponent.prototype.readonlyFields;
    /**
     * 左侧树信息
     * @type {?}
     */
    SelectObjectComponent.prototype.treeData;
    /** @type {?} */
    SelectObjectComponent.prototype.farrisTreeData;
    /** @type {?} */
    SelectObjectComponent.prototype.treeConfig;
}
//# sourceMappingURL=data:application/json;base64,