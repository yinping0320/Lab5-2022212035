/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation, Output, EventEmitter, ElementRef, Renderer2, ViewChild } from '@angular/core';
export class WFDimensionPanelComponent {
    /**
     * @param {?} render
     */
    constructor(render) {
        this.render = render;
        /* 自定义className */
        this.className = [];
        /* 面板是否可收折  默认收折*/
        this.foldable = true;
        // 设置手风琴模式  至多只有一个panel可以被选中
        this.accordion = false;
        this.modelChange = new EventEmitter();
        // @HostBinding('class.farris-panel') isPanel =
        // 双向绑定  当model数组改变时，相应的active状态的panel也要改变 从而改变视图
        // 双向绑定 用于存取active状态的panel
        this.modelValue = [];
        this.subscriber = [];
    }
    /* panel数据存储 */
    /**
     * @return {?}
     */
    get model() {
        return this.modelValue;
    }
    /**
     * @param {?} modelValue
     * @return {?}
     */
    set model(modelValue) {
        // 获取用户输入的值
        this.modelValue = modelValue;
        this.updateSubscriber();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 添加class名
        if (this.className.length) {
            this.className.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                this.render.addClass(this.farrisPanel.nativeElement, ele);
            }));
        }
        this.updateSubscriber();
    }
    /**
     * @param {?} value panel存储激活值
     * @return {?}
     */
    updateModel(value) {
        /** @type {?} */
        const index = this.modelValue.findIndex((/**
         * @param {?} val
         * @return {?}
         */
        val => val === value));
        // 如果没有匹配到点击的panel值  可能model里面不存在 可能model为空
        if (index < 0) {
            // 若是手风琴模式  先把所有panel处于未激活状态
            if (this.accordion) {
                this.model = [];
            }
            // 如果不是手风琴模式  直接激活即可
            this.modelValue.push(value);
            this.updateSubscriber();
            return this.modelChange.emit(this.modelValue);
        }
        // 如果index不为-1
        // 手风琴模式  关闭所有激活状态
        if (this.accordion) {
            this.model = [];
        }
        else {
            // 非手风琴模式 直接关闭当前panel即可
            this.modelValue.splice(index, 1);
        }
        this.updateSubscriber();
        this.modelChange.emit(this.modelValue);
    }
    /* 函数分发 */
    /**
     * @private
     * @return {?}
     */
    updateSubscriber() {
        this.subscriber.forEach((/**
         * @param {?} handle
         * @return {?}
         */
        handle => handle()));
    }
}
WFDimensionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-dimension-panel',
                template: "<div #farrisPanel class=\"farris-panel\" [class.accordion]=\"accordion\" [style.width]=\"width+'px'\" [style.height]=\"height+'px'\">\r\n    <ng-content>\r\n    </ng-content>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".farris-panel{margin:25px}"]
            }] }
];
/** @nocollapse */
WFDimensionPanelComponent.ctorParameters = () => [
    { type: Renderer2 }
];
WFDimensionPanelComponent.propDecorators = {
    farrisPanel: [{ type: ViewChild, args: ['farrisPanel',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    className: [{ type: Input }],
    foldable: [{ type: Input }],
    defaultExpand: [{ type: Input }],
    accordion: [{ type: Input }],
    model: [{ type: Input }],
    modelChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    WFDimensionPanelComponent.prototype.farrisPanel;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.width;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.height;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.className;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.foldable;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.defaultExpand;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.accordion;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.modelChange;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.modelValue;
    /** @type {?} */
    WFDimensionPanelComponent.prototype.subscriber;
    /**
     * @type {?}
     * @private
     */
    WFDimensionPanelComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtaXRlbS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtZGltZW5zaW9uLWRlZi8iLCJzb3VyY2VzIjpbImxpYi9yZWZNb2R1bGUvcGFuZWwvcGFuZWwvcGFuZWwtaXRlbS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFBRSxLQUFLLEVBQ2hCLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQ3BGLE1BQU0sZUFBZSxDQUFDO0FBUXZCLE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUEyQ2xDLFlBQ1ksTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVzs7UUFqQ3BCLGNBQVMsR0FBRyxFQUFFLENBQUM7O1FBR2YsYUFBUSxHQUFHLElBQUksQ0FBQzs7UUFNaEIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQWNqQixnQkFBVyxHQUF5QyxJQUFJLFlBQVksRUFBMEIsQ0FBQzs7OztRQU16RyxlQUFVLEdBQTJCLEVBQUUsQ0FBQztRQUN4QyxlQUFVLEdBQXNCLEVBQUUsQ0FBQztJQUluQyxDQUFDOzs7OztJQXRCRCxJQUFhLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxVQUFVO1FBQ2hCLFdBQVc7UUFDWCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBZ0JELFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLFdBQVc7UUFDWCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM5RCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFLRCxXQUFXLENBQUMsS0FBYTs7Y0FDZixLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFDO1FBQzdELDJDQUEyQztRQUMzQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCw0QkFBNEI7WUFDNUIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUNuQjtZQUNELG9CQUFvQjtZQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN4QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNqRDtRQUNELGNBQWM7UUFDZCxrQkFBa0I7UUFDbEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQ25CO2FBQU07WUFDSCx1QkFBdUI7WUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7OztJQUdPLGdCQUFnQjtRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7UUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFDLENBQUM7SUFDaEQsQ0FBQzs7O1lBbEdKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixvTUFBK0M7Z0JBRS9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN4Qzs7OztZQVB3RCxTQUFTOzs7MEJBVzdELFNBQVMsU0FBQyxhQUFhO29CQUd2QixLQUFLO3FCQUNMLEtBQUs7d0JBS0wsS0FBSzt1QkFHTCxLQUFLOzRCQUdMLEtBQUs7d0JBR0wsS0FBSztvQkFHTCxLQUFLOzBCQVdMLE1BQU07Ozs7SUFoQ1AsZ0RBQWtEOztJQUdsRCwwQ0FBdUI7O0lBQ3ZCLDJDQUF3Qjs7SUFLeEIsOENBQXdCOztJQUd4Qiw2Q0FBeUI7O0lBR3pCLGtEQUFnQzs7SUFHaEMsOENBQTJCOztJQWMzQixnREFBeUc7O0lBTXpHLCtDQUF3Qzs7SUFDeEMsK0NBQW1DOzs7OztJQUcvQiwyQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCxcclxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnd2YtZGltZW5zaW9uLXBhbmVsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9wYW5lbC1pdGVtLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vcGFuZWwtaXRlbS1saXN0LmNvbXBvbmVudC5jc3MnXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBXRkRpbWVuc2lvblBhbmVsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0IHtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdmYXJyaXNQYW5lbCcpIGZhcnJpc1BhbmVsOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIC8qIOiuvue9ruWuvemrmCAqL1xyXG4gICAgQElucHV0KCkgd2lkdGg6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIGhlaWdodDogbnVtYmVyO1xyXG5cclxuXHJcblxyXG4gICAgLyog6Ieq5a6a5LmJY2xhc3NOYW1lICovXHJcbiAgICBASW5wdXQoKSBjbGFzc05hbWUgPSBbXTtcclxuXHJcbiAgICAvKiDpnaLmnb/mmK/lkKblj6/mlLbmipggIOm7mOiupOaUtuaKmCovXHJcbiAgICBASW5wdXQoKSBmb2xkYWJsZSA9IHRydWU7XHJcblxyXG4gICAgLyog6Z2i5p2/5piv5ZCm5YWo6YOo5bGV5byAICDpu5jorqTkuI3mmK/lhajpg6jlsZXlvIAqL1xyXG4gICAgQElucHV0KCkgZGVmYXVsdEV4cGFuZDogYm9vbGVhbjtcclxuXHJcbiAgICAvLyDorr7nva7miYvpo47nkLTmqKHlvI8gIOiHs+WkmuWPquacieS4gOS4qnBhbmVs5Y+v5Lul6KKr6YCJ5LitXHJcbiAgICBASW5wdXQoKSBhY2NvcmRpb24gPSBmYWxzZTtcclxuXHJcbiAgICAvKiBwYW5lbOaVsOaNruWtmOWCqCAqL1xyXG4gICAgQElucHV0KCkgZ2V0IG1vZGVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1vZGVsKG1vZGVsVmFsdWUpIHtcclxuICAgICAgICAvLyDojrflj5bnlKjmiLfovpPlhaXnmoTlgLxcclxuICAgICAgICB0aGlzLm1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaWJlcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBAT3V0cHV0KCkgbW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxzdHJpbmcgfCBudW1iZXI+PiA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8c3RyaW5nIHwgbnVtYmVyPj4oKTtcclxuXHJcbiAgICAvLyBASG9zdEJpbmRpbmcoJ2NsYXNzLmZhcnJpcy1wYW5lbCcpIGlzUGFuZWwgPVxyXG5cclxuICAgIC8vIOWPjOWQkee7keWumiAg5b2TbW9kZWzmlbDnu4TmlLnlj5jml7bvvIznm7jlupTnmoRhY3RpdmXnirbmgIHnmoRwYW5lbOS5n+imgeaUueWPmCDku47ogIzmlLnlj5jop4blm75cclxuICAgIC8vIOWPjOWQkee7keWumiDnlKjkuo7lrZjlj5ZhY3RpdmXnirbmgIHnmoRwYW5lbFxyXG4gICAgbW9kZWxWYWx1ZTogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiA9IFtdO1xyXG4gICAgc3Vic2NyaWJlcjogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIOa3u+WKoGNsYXNz5ZCNXHJcbiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZS5mb3JFYWNoKGVsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmZhcnJpc1BhbmVsLm5hdGl2ZUVsZW1lbnQsIGVsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmliZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBwYW5lbOWtmOWCqOa/gOa0u+WAvFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVNb2RlbCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm1vZGVsVmFsdWUuZmluZEluZGV4KHZhbCA9PiB2YWwgPT09IHZhbHVlKTtcclxuICAgICAgICAvLyDlpoLmnpzmsqHmnInljLnphY3liLDngrnlh7vnmoRwYW5lbOWAvCAg5Y+v6IO9bW9kZWzph4zpnaLkuI3lrZjlnKgg5Y+v6IO9bW9kZWzkuLrnqbpcclxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIC8vIOiLpeaYr+aJi+mjjueQtOaooeW8jyAg5YWI5oqK5omA5pyJcGFuZWzlpITkuo7mnKrmv4DmtLvnirbmgIFcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWNjb3JkaW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5aaC5p6c5LiN5piv5omL6aOO55C05qih5byPICDnm7TmjqXmv4DmtLvljbPlj69cclxuICAgICAgICAgICAgdGhpcy5tb2RlbFZhbHVlLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmliZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxDaGFuZ2UuZW1pdCh0aGlzLm1vZGVsVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlpoLmnpxpbmRleOS4jeS4ui0xXHJcbiAgICAgICAgLy8g5omL6aOO55C05qih5byPICDlhbPpl63miYDmnInmv4DmtLvnirbmgIFcclxuICAgICAgICBpZiAodGhpcy5hY2NvcmRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IFtdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOmdnuaJi+mjjueQtOaooeW8jyDnm7TmjqXlhbPpl63lvZPliY1wYW5lbOWNs+WPr1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsVmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVyKCk7XHJcbiAgICAgICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWxWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyog5Ye95pWw5YiG5Y+RICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZVN1YnNjcmliZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyLmZvckVhY2goaGFuZGxlID0+IGhhbmRsZSgpKTtcclxuICAgIH1cclxufVxyXG4iXX0=