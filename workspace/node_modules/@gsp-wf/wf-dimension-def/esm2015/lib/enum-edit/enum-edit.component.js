/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, HostBinding, ComponentFactoryResolver, Injector } from '@angular/core';
import { Subject } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { DatagridComponent } from '@farris/ui-datagrid';
import { EnumItem } from '../entity/dimensiondef.entity';
import { WFDimensionDefUIState } from '../service/wf-dimension-def.uistate';
import { GSPElementObjectType } from '@gsp-bef/gsp-cm-metadata';
import { SelectElementComponent } from '../refModule/select-element/select-element.component';
import { BsModalService } from '@farris/ui-modal';
export class EnumEditComponent {
    /**
     * @param {?} messageService
     * @param {?} uistate
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     */
    constructor(messageService, uistate, modalService, resolver, injector) {
        this.messageService = messageService;
        this.uistate = uistate;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { field: 'key', width: 100, title: '键', editor: { type: EditorTypes.TEXTBOX, options: {} } },
            { field: 'value', width: 100, title: '值', editor: { type: EditorTypes.TEXTBOX, options: {} } }
        ];
        this.confirm = new Subject();
        this.closeModalEmitter = new Subject();
        /**
         * 显示值
         */
        this.editData = new Array();
        this.maxNum = 0;
    }
    /**
     * 实际值
     * @return {?}
     */
    get enumValues() {
        /** @type {?} */
        const arr = [];
        if (this.editData && this.editData.length >= 0) {
            this.editData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const enumItem = new EnumItem();
                enumItem.key = item.key;
                enumItem.value = item.value;
                arr.push(enumItem);
            }));
        }
        return arr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    load(enumValues) {
        this.editData = [...this.createData(enumValues)];
    }
    /**
     * 确认
     * @return {?}
     */
    onConfirm() {
        this.closeCell();
        if (this.checkBeforeSave()) {
            this.confirm.next(this.enumValues);
            this.closeModalEmitter.next();
        }
    }
    /**
     * 取消
     * @return {?}
     */
    cancel() {
        this.closeModalEmitter.next();
    }
    /**
     * 保存前检查
     * @return {?}
     */
    checkBeforeSave() {
        // ① 空，则通过；
        if (!(this.enumValues) || this.enumValues.length === 0) {
            this.messageService.warning('请添加枚举值。');
            return false;
        }
        // ② 非空，则校验每个的键值是否为空；
        for (const item of this.enumValues) {
            if (!item.key || !item.value) {
                this.messageService.warning('枚举的[键][值]均不允许为空。');
                return false;
            }
        }
        // ③ 多于一个，索引不允许重复；
        if (this.enumValues.length > 1) {
            for (let i = 0; i < this.enumValues.length; i++) {
                /** @type {?} */
                const code1 = this.enumValues[i].value;
                /** @type {?} */
                const name1 = this.enumValues[i].key;
                for (let j = i + 1; j < this.enumValues.length; j++) {
                    /** @type {?} */
                    const code2 = this.enumValues[j].value;
                    /** @type {?} */
                    const name2 = this.enumValues[j].key;
                    if (code1 === code2) {
                        this.messageService.warning(`枚举的[编号]不允许重复，重复编号为[${code1}]。`);
                        return false;
                    }
                    if (name1 === name2) {
                        this.messageService.warning(`枚举的[名称]不允许重复，重复名称为[${name1}]。`);
                        return false;
                    }
                }
            }
        }
        return true;
    }
    /**
     * 取消编辑
     * @return {?}
     */
    closeCell() {
        this.dg.endCellEdit();
    }
    /**
     * 引入
     * @return {?}
     */
    import() {
        if (!this.uistate.beMetaData) {
            this.messageService.error('未获取到BE元数据，请联系管理员查看原因！');
            return;
        }
        /** @type {?} */
        const model = this.uistate.beMetaData.content;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectElementComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.selectEleInfo.be = model;
        compRef.instance.selectEleInfo.singleElement = true;
        compRef.instance.selectEleInfo.assoRefElement = false;
        compRef.instance.confirm.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            const selectedElement = (/** @type {?} */ (data.selectedBeFields[0]));
            if (selectedElement.ObjectType === GSPElementObjectType.Enum) {
                this.editData = new Array();
                /** @type {?} */
                let k = 0;
                for (const enumValue of selectedElement.ContainEnumValues) {
                    this.editData.push({
                        id: k,
                        key: enumValue.Value,
                        value: enumValue.Name,
                    });
                    k++;
                }
                this.maxNum = k;
            }
            else {
                this.messageService.info('选中字段并非枚举字段，请了解！');
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: '枚举字段选择',
            width: 1000,
            height: 550,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            dialog.close();
        }));
    }
    /**
     * 新增
     * @return {?}
     */
    add() {
        this.closeCell();
        /** @type {?} */
        const newId = this.maxNum;
        this.editData = this.editData.concat([{
                id: newId
            }]);
        this.maxNum++;
    }
    /**
     * 删除
     * @return {?}
     */
    remove() {
        this.closeCell();
        if (this.dg.selectedRow) {
            /** @type {?} */
            const id = this.dg.selectedRow.id;
            this.dg.selectPrevRow();
            this.editData = this.editData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id !== id));
        }
    }
    /**
     * @param {?} enumValues
     * @return {?}
     */
    createData(enumValues) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        let k = 0;
        for (const enumValue of enumValues) {
            arr.push({
                id: k,
                key: enumValue.key,
                value: enumValue.value,
            });
            k++;
        }
        this.maxNum = k;
        return arr;
    }
}
EnumEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-enum-edit',
                template: "<ng-template #buttons>\r\n    <button class=\"btn btn-primary\" (click)=\"onConfirm()\">\u786E\u5B9A</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<div class=\"f-page\">\r\n    <div class=\"f-page-header\">\r\n        <nav class=\"f-page-header-base\">\r\n            <div class=\"f-title\">\r\n                <span class=\"f-title-icon f-text-orna-bill\">\r\n                    <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n                </span>\r\n                <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n            </div>\r\n            <div class=\"btn-toolbar btn-group-lg\">\r\n                <button class=\"btn btn-primary mr-2\" (click)=\"import()\">\u5F15\u5165</button>\r\n                <button class=\"btn btn-secondary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n                <button class=\"btn btn-secondary\" (click)=\"remove()\">\u5220\u9664</button>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n    <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n        <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n            <farris-datagrid [data]=\"editData\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\" \r\n                [editable]=\"true\" [editMode]=\"'cell'\" [idField]=\"'id'\"\r\n                [showCheckbox]=\"false\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" \r\n                [striped]=\"true\" [virtualized]=\"true\" [pagination]=\"false\">\r\n            </farris-datagrid>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [":host{position:absolute;top:0;bottom:0;right:0;left:0}"]
            }] }
];
/** @nocollapse */
EnumEditComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: WFDimensionDefUIState },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
EnumEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    dg: [{ type: ViewChild, args: ['dg',] }],
    btnRef: [{ type: ViewChild, args: ['buttons',] }]
};
if (false) {
    /** @type {?} */
    EnumEditComponent.prototype.cls;
    /** @type {?} */
    EnumEditComponent.prototype.columns;
    /** @type {?} */
    EnumEditComponent.prototype.dg;
    /** @type {?} */
    EnumEditComponent.prototype.btnRef;
    /** @type {?} */
    EnumEditComponent.prototype.confirm;
    /** @type {?} */
    EnumEditComponent.prototype.closeModalEmitter;
    /**
     * 显示值
     * @type {?}
     */
    EnumEditComponent.prototype.editData;
    /** @type {?} */
    EnumEditComponent.prototype.maxNum;
    /**
     * @type {?}
     * @private
     */
    EnumEditComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    EnumEditComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    EnumEditComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    EnumEditComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    EnumEditComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,