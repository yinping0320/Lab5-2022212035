/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpService } from '@ecp-caf/caf-common';
import { Injectable } from '@angular/core';
export class WFDimensionDefViewmodel {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.url = '/api/runtime/wf/v1.0/dimensionDef';
    }
    /**
     * @param {?} flowFormId
     * @return {?}
     */
    loadDimensionDefs(flowFormId) {
        if (flowFormId) {
            /** @type {?} */
            const url = this.url + `?entryFormID=${flowFormId}`;
            return this.http.get(url);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeDimensionDef(id) {
        if (id) {
            /** @type {?} */
            const url = this.url + `/${id}`;
            return this.http.delete(url, {});
        }
    }
    /**
     * @param {?} dimensionDef
     * @return {?}
     */
    addDimensionDef(dimensionDef) {
        return this.http.post(this.url, dimensionDef);
    }
    /**
     * @param {?} dimensionDef
     * @return {?}
     */
    updateDimensionDef(dimensionDef) {
        return this.http.patch(this.url, dimensionDef);
    }
    /**
     * @param {?} flowFormId
     * @return {?}
     */
    getDimensionDefSet(flowFormId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/dimensionDef/customSetting?entryFormId=${flowFormId}`;
        return this.http.get(url);
    }
}
WFDimensionDefViewmodel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFDimensionDefViewmodel.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WFDimensionDefViewmodel.prototype.url;
    /**
     * @type {?}
     * @private
     */
    WFDimensionDefViewmodel.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtZGltZW5zaW9uLWRlZi52aWV3TW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLWRpbWVuc2lvbi1kZWYvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS93Zi1kaW1lbnNpb24tZGVmLnZpZXdNb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLM0MsTUFBTSxPQUFPLHVCQUF1Qjs7OztJQUVoQyxZQUNZLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7UUFGckIsUUFBRyxHQUFHLG1DQUFtQyxDQUFDO0lBRzlDLENBQUM7Ozs7O0lBRUwsaUJBQWlCLENBQUMsVUFBa0I7UUFDaEMsSUFBSSxVQUFVLEVBQUU7O2tCQUNOLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLGdCQUFnQixVQUFVLEVBQUU7WUFDbkQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7O0lBQ0Qsa0JBQWtCLENBQUMsRUFBVTtRQUN6QixJQUFJLEVBQUUsRUFBRTs7a0JBQ0UsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDcEM7SUFDTCxDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxZQUFnQztRQUM1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxZQUFnQztRQUMvQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7SUFHRCxrQkFBa0IsQ0FBQyxVQUFrQjs7Y0FDM0IsR0FBRyxHQUFHLCtEQUErRCxVQUFVLEVBQUU7UUFDdkYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUFoQ0osVUFBVTs7OztZQUxGLFdBQVc7Ozs7Ozs7SUFPaEIsc0NBQWtEOzs7OztJQUU5Qyx1Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERpbWVuc2lvbkRlZkVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9kaW1lbnNpb25kZWYuZW50aXR5JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV0ZEaW1lbnNpb25EZWZWaWV3bW9kZWwgeyBcclxuICAgIHByaXZhdGUgdXJsID0gJy9hcGkvcnVudGltZS93Zi92MS4wL2RpbWVuc2lvbkRlZic7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIGxvYWREaW1lbnNpb25EZWZzKGZsb3dGb3JtSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7IFxyXG4gICAgICAgIGlmIChmbG93Rm9ybUlkKSB7IFxyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLnVybCArIGA/ZW50cnlGb3JtSUQ9JHtmbG93Rm9ybUlkfWA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVtb3ZlRGltZW5zaW9uRGVmKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4geyBcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy51cmwgKyBgLyR7aWR9YDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUodXJsLCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZERpbWVuc2lvbkRlZihkaW1lbnNpb25EZWY6IERpbWVuc2lvbkRlZkVudGl0eSk6IE9ic2VydmFibGU8YW55PiB7IFxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLnVybCwgZGltZW5zaW9uRGVmKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVEaW1lbnNpb25EZWYoZGltZW5zaW9uRGVmOiBEaW1lbnNpb25EZWZFbnRpdHkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucGF0Y2godGhpcy51cmwsIGRpbWVuc2lvbkRlZik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldERpbWVuc2lvbkRlZlNldChmbG93Rm9ybUlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvZGltZW5zaW9uRGVmL2N1c3RvbVNldHRpbmc/ZW50cnlGb3JtSWQ9JHtmbG93Rm9ybUlkfWA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgIH1cclxufVxyXG4iXX0=