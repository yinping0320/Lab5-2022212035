import { OnInit, OnChanges, SimpleChanges } from '@angular/core';
import { FarrisPageDetailComponent } from '@farris/ui-wizard';
import { GSPCommonObject } from '@gsp-bef/gsp-cm-metadata';
export declare class SelectObjectComponent implements OnInit, OnChanges {
    data: any;
    enableNextStep: boolean;
    private detailPage;
    cmpPageDetail: FarrisPageDetailComponent;
    treeTables: any[];
    grid_selected: {};
    readonlyFields: any[];
    /** 左侧树信息 */
    treeData: any[];
    farrisTreeData: any[];
    treeConfig: {
        idField: string;
        columns: {
            field: string;
            title: string;
            width: number;
        }[];
        /** 叶子节点图标 */
        leafIcon: string;
        /** 节点展开图标 */
        expandIcon: string;
        /** 节点折叠图标 */
        collapseIcon: string;
        /**  树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数； */
        expandLevel: number;
    };
    constructor();
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    load(): void;
    /**
     * 组装farris-tree左侧树
     */
    getFarrisTreeData(data: any[]): any[];
    /**
     * 组装左侧树
     */
    getTablesTree(mainObject: GSPCommonObject): {
        RepositoryComps: import("@gsp-bef/gsp-cm-metadata").MdRefInfo[];
        BillCodeConfig: import("@gsp-bef/gsp-cm-metadata").ElementCodeRuleConfig;
        ObjectType: import("@gsp-bef/gsp-cm-metadata/lib/common-model/src/Object/GSPCommonObjectType").GSPCommonObjectType;
        RefObjectName: string;
        LogicDelete: boolean;
        IDElement: import("@gsp-bef/gsp-cm-metadata").IGSPCommonElement;
        ContainElements: import("@gsp-bef/gsp-cm-metadata").GSPCommonElement[];
        ContainConstraints: import("@gsp-bef/gsp-cm-metadata").GSPUniqueConstraint[];
        BelongModel: import("@gsp-bef/gsp-cm-metadata").IGSPCommonModel;
        BelongModelID: string;
        OrderbyCondition: string;
        FilterCondition: string; /**
         * 组装farris-tree左侧树
         */
        ParentAssociation: boolean;
        CreatorElementID: string;
        ModifierElementID: boolean;
        RecordDelData: boolean;
        IsReadOnly: boolean;
        IsVirtual: boolean;
        StateElementID: string;
        HirarchyInfo: import("@gsp-bef/gsp-cm-metadata").GSPHirarchyInfo;
        ParentObjectID: string;
        ID: string;
        Code: string;
        Name: string;
        IsRef: boolean;
        DtmBeforeSave: import("@gsp-bef/gsp-cm-metadata").CommonDetermination[];
        DtmAfterModify: import("@gsp-bef/gsp-cm-metadata").CommonDetermination[];
        DtmAfterCreate: import("@gsp-bef/gsp-cm-metadata").CommonDetermination[];
        BeLabel: string[];
    }[];
    /**
     * 选中节点事件
     * @param event 被选中节点
     */
    handleTreeSelection(event: any): void;
    nextStep(): void;
    cancel(): void;
    pagedetailSelected(args: any): void;
}
