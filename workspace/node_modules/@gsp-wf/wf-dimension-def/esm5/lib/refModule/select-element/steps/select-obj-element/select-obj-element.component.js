/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, Input } from '@angular/core';
import { FarrisPageDetailComponent } from '@farris/ui-wizard';
import { TreeTableComponent } from '@farris/ui-treetable';
// import { MessagerService } from '@farris/ui-messager';
var SelectObjElementComponent = /** @class */ (function () {
    function SelectObjElementComponent() {
        this.gridData = {};
        this.gridCols = [
            { field: 'show', title: '显示', width: 40 },
            { field: 'Name', title: '字段名称' },
            { field: 'Code', title: '字段编号', width: 200 },
            { field: 'LabelID', title: '字段标签' },
            { field: 'MDataType', title: '字段类型' }
        ];
        this.grid_selected = {
            selectedAll: {}
        };
        this.readonlyFields = []; // 不可取消勾选的字段
        // 不可取消勾选的字段
        this.selectedAll = {};
        this.selectedTreeKeys = [];
        this.selectedTreeKey = '';
        this.enableNextStep = true;
        this.detailPage = null;
    }
    Object.defineProperty(SelectObjElementComponent.prototype, "cmpPageDetail", {
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            this.detailPage = cmp;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SelectObjElementComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.load();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SelectObjElementComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.load();
    };
    /**
     * @return {?}
     */
    SelectObjElementComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = this.detailPage.getPageData('selectobject');
        if (this.data && this.data.selectedObj) {
            /** @type {?} */
            var parentTable = (/** @type {?} */ (this.data.selectedObj));
            this.selectedTreeKey = this.data.selectedObj.Code;
            this.selectedTreeKeys = [this.selectedTreeKey];
            this.grid_selected[this.selectedTreeKey] = this.data.selectedBeFields;
            this.gridData[parentTable.Code] = this.getGridFields(parentTable.ContainElements, parentTable.Code, false);
        }
    };
    /**
     * 获取各表字段，关联字段以树形式展示
     * @param fields
     */
    /**
     * 获取各表字段，关联字段以树形式展示
     * @param {?} fields
     * @param {?} tableCode
     * @param {?} needSelectAll
     * @return {?}
     */
    SelectObjElementComponent.prototype.getGridFields = /**
     * 获取各表字段，关联字段以树形式展示
     * @param {?} fields
     * @param {?} tableCode
     * @param {?} needSelectAll
     * @return {?}
     */
    function (fields, tableCode, needSelectAll) {
        var _this = this;
        /** @type {?} */
        var gridData = [];
        /** @type {?} */
        var fieldIdList = [];
        if (!fields || fields.length === 0) {
            return [];
        }
        fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var ChildAssociations = field.ChildAssociations, fieldObject = tslib_1.__rest(field, ["ChildAssociations"]);
            /** @type {?} */
            var children = [];
            if (_this.data.assoRefElement) {
                // 关联表
                if (ChildAssociations && ChildAssociations.length > 0) {
                    ChildAssociations.forEach((/**
                     * @param {?} child
                     * @return {?}
                     */
                    function (child) {
                        child.RefElementCollection.forEach((/**
                         * @param {?} refEle
                         * @return {?}
                         */
                        function (refEle) {
                            children.push({ data: refEle, children: [], expanded: true, layer: 2 });
                            fieldIdList.push(refEle.ID);
                        }));
                    }));
                }
            }
            gridData.push({ data: fieldObject, children: children, expanded: true, layer: 1 });
            fieldIdList.push(fieldObject.ID);
        }));
        //  默认选中所有字段
        if (needSelectAll) {
            this.grid_selected[tableCode] = fieldIdList;
            this.grid_selected['selectedAll'][tableCode] = true;
        }
        return gridData;
    };
    /**
     * @param {?} rowData
     * @param {?} rowNode
     * @return {?}
     */
    SelectObjElementComponent.prototype.changeCheckbox = /**
     * @param {?} rowData
     * @param {?} rowNode
     * @return {?}
     */
    function (rowData, rowNode) {
        var _this = this;
        /** @type {?} */
        var ID = rowData.ID;
        /** @type {?} */
        var index = this.grid_selected[this.selectedTreeKey].indexOf(ID);
        if (index >= 0) {
            this.grid_selected[this.selectedTreeKey].splice(index, 1);
            this.grid_selected['selectedAll'][this.selectedTreeKey] = false;
        }
        else {
            // 若为[单选]，则清空已选择字段
            if (this.data.singleElement) {
                this.grid_selected[this.selectedTreeKey] = [];
            }
            this.grid_selected[this.selectedTreeKey].push(ID);
        }
        // 主表的关联字段
        if (rowNode.children.length > 0) {
            rowNode.children.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var reIndex = _this.grid_selected[_this.selectedTreeKey].findIndex((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) { return id === element.data.ID; }));
                if (index >= 0 && reIndex >= 0) {
                    _this.grid_selected[_this.selectedTreeKey].splice(reIndex, 1);
                }
                if (index < 0 && reIndex < 0) {
                    _this.grid_selected[_this.selectedTreeKey].push(element.data.ID);
                }
            }));
        }
        // 关联表的字段
        if (rowNode.parent) {
            /** @type {?} */
            var parentNode = rowNode.parent;
            if (!parentNode) {
                return;
            }
            /** @type {?} */
            var parentIndex = this.grid_selected[this.selectedTreeKey].indexOf(parentNode.data.ID);
            if (index < 0 && parentIndex < 0) {
                this.grid_selected[this.selectedTreeKey].push(parentNode.data.ID);
            }
        }
    };
    /**
     * @return {?}
     */
    SelectObjElementComponent.prototype.clickSelectAllCheckbox = /**
     * @return {?}
     */
    function () {
        this.selectAllChange(this.gridData[this.selectedTreeKey], this.grid_selected['selectedAll'][this.selectedTreeKey]);
    };
    /**
     * 全选
     * @param treeData treeData
     * @param isSelected isSelected
     */
    /**
     * 全选
     * @param {?} treeData treeData
     * @param {?} isSelected isSelected
     * @return {?}
     */
    SelectObjElementComponent.prototype.selectAllChange = /**
     * 全选
     * @param {?} treeData treeData
     * @param {?} isSelected isSelected
     * @return {?}
     */
    function (treeData, isSelected) {
        var _this = this;
        if (treeData.length === 0) {
            return;
        }
        treeData.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        function (treeNode) {
            /** @type {?} */
            var ID = treeNode.data.ID;
            if (treeNode.children && treeNode.children.length > 0) {
                _this.selectAllChange(treeNode.children, isSelected);
            }
            /** @type {?} */
            var index = _this.grid_selected[_this.selectedTreeKey].indexOf(ID);
            // 全选
            if (isSelected && index < 0) {
                _this.grid_selected[_this.selectedTreeKey].push(ID);
                return;
            }
            // 取消全选
            if (!isSelected && _this.readonlyFields.indexOf(ID) < 0) {
                _this.grid_selected[_this.selectedTreeKey].splice(index, 1);
            }
        }));
    };
    /**
     * @return {?}
     */
    SelectObjElementComponent.prototype.prevStep = /**
     * @return {?}
     */
    function () {
        this.detailPage.prevStep();
    };
    /**
     * @return {?}
     */
    SelectObjElementComponent.prototype.finish = /**
     * @return {?}
     */
    function () {
        // 校验
        if (this.grid_selected[this.selectedTreeKey].length === 0) {
            // this.messagerService.warning('请勾选字段。');
            alert('请勾选字段。');
            return;
        }
        // 设置当前页传递出去数据
        this.data.selectedBeFields = [this.grid_selected[this.selectedTreeKey]];
        this.detailPage.setPageData(this.data.selectedBeFields);
        // 下一步
        this.detailPage.finishWizard();
    };
    /**
     * @return {?}
     */
    SelectObjElementComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.detailPage.cancelWizard();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    SelectObjElementComponent.prototype.pagedetailSelected = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
    };
    SelectObjElementComponent.decorators = [
        { type: Component, args: [{
                    selector: 'select-obj-element',
                    template: "<wizard-page-detail #detailpage2 (pagedetailSelected)=\"pagedetailSelected($event)\">\r\n    <ng-template wizardPageContent>\r\n        <div class=\"f-template-wizard-page-content\" style=\"margin-left:2px\">\r\n            <farris-treetable #treeTable [data]=\"gridData[selectedTreeKey]\" [columns]=\"gridCols\" [idField]=\"'ID'\" [fixedHeader]=\"true\" [width]=\"'100%'\" [height]=\"330\" [showFilterBar]=\"false\" [showIcon]=\"false\" [resizableColumns]=\"true\" [cascadeCheck]=\"true\" [showBorder]=\"false\"\r\n                class=\"f-selectbe-treetable\">\r\n                <ng-template farrisTemplate=\"header\" let-columns>\r\n                    <tr>\r\n                        <ng-container *ngFor=\"let col of columns; let i = index\">\r\n\r\n                            <th *ngIf=\"col.field!=='show'\">\r\n                                <ng-container> {{col.title}} </ng-container>\r\n                            </th>\r\n                            <th *ngIf=\"col.field==='show'\" [width]=\"col.width\">\r\n                                <ng-container>\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <!-- <input class=\"custom-control-input\" id=\"CheckAll\" type=\"checkbox\" [(ngModel)]=\"grid_selected.selectedAll[selectedTreeKey]\" (ngModelChange)=\"clickSelectAllCheckbox()\" />\r\n                                        <label class=\"custom-control-label\" for=\"CheckAll\"></label> -->\r\n                                    </div>\r\n                                </ng-container>\r\n                            </th>\r\n                            <th *ngIf=\"col.field==='toggler'\" [width]=\"col.width\">\r\n                            </th>\r\n                        </ng-container>\r\n\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template farrisTemplate=\"body\" let-rowNode let-rowIndex=\"index\" let-rowData=\"rowData\" let-columns=\"columns\">\r\n                    <tr [selectRow]=\"rowNode\" [rowIndex]=\"rowIndex\" [dblclick]=\"true\" [selectRowDisabled]=\"true\">\r\n                        <ng-container *ngFor=\"let col of columns; let i = index\">\r\n                            <td *ngIf=\"col.field==='show'\" [width]=\"col.width\">\r\n                                <ng-container *ngIf=\"!rowNode.node.tableNode  && readonlyFields.indexOf(rowData.ID)<0\">\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <input type=\"checkbox\" [id]=\"rowData.ID\" class=\"custom-control-input\" [checked]=\"grid_selected[selectedTreeKey] && grid_selected[selectedTreeKey].indexOf(rowData.ID)>=0\" (click)=\"changeCheckbox(rowData,rowNode.node)\">\r\n                                        <label class=\"custom-control-label\" [for]=\"rowData.ID\"></label>\r\n                                    </div>\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"!rowNode.node.tableNode && readonlyFields.indexOf(rowData.ID)>=0\">\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <input type=\"checkbox\" [id]=\"rowData.ID\" class=\"custom-control-input\" checked=\"checked\" disabled>\r\n                                        <label class=\"custom-control-label\" [for]=\"rowData.ID\"></label>\r\n                                    </div>\r\n                                </ng-container>\r\n                            </td>\r\n                            <td *ngIf=\"col.field!=='show'\">\r\n                                <farris-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 1\"></farris-treeTableToggler>\r\n                                <ng-container *ngIf=\"col.field!=='MDataType'\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData[col.field]}}</span>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"col.field ==='MDataType' && rowData.IsUdt\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData.UdtName}}</span>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"col.field ==='MDataType' && !rowData.IsUdt\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData.MDataType}}</span>\r\n                                </ng-container>\r\n                            </td>\r\n                        </ng-container>\r\n                    </tr>\r\n                </ng-template>\r\n\r\n            </farris-treetable>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template wizardPageFooter>\r\n        <div class=\"f-template-wizard-page-footer\">\r\n            <button class=\"btn btn-secondary\" (click)=\"prevStep()\">\u4E0A\u4E00\u6B65</button>\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n            <button class=\"btn btn-primary\" [disabled]=\"!enableNextStep\" (click)=\"finish()\">\u5B8C\u6210</button>\r\n        </div>\r\n    </ng-template>\r\n</wizard-page-detail>",
                    styles: [":host{display:flex;flex:1}button{margin:10px}"]
                }] }
    ];
    /** @nocollapse */
    SelectObjElementComponent.ctorParameters = function () { return []; };
    SelectObjElementComponent.propDecorators = {
        data: [{ type: Input }],
        changeObj: [{ type: Input }],
        treeTable: [{ type: ViewChild, args: ['treeTable',] }],
        cmpPageDetail: [{ type: ViewChild, args: [FarrisPageDetailComponent,] }]
    };
    return SelectObjElementComponent;
}());
export { SelectObjElementComponent };
if (false) {
    /** @type {?} */
    SelectObjElementComponent.prototype.data;
    /** @type {?} */
    SelectObjElementComponent.prototype.changeObj;
    /**
     * 右侧树表信息
     * @type {?}
     */
    SelectObjElementComponent.prototype.treeTable;
    /** @type {?} */
    SelectObjElementComponent.prototype.gridData;
    /** @type {?} */
    SelectObjElementComponent.prototype.gridCols;
    /** @type {?} */
    SelectObjElementComponent.prototype.grid_selected;
    /** @type {?} */
    SelectObjElementComponent.prototype.readonlyFields;
    /** @type {?} */
    SelectObjElementComponent.prototype.selectedAll;
    /** @type {?} */
    SelectObjElementComponent.prototype.selectedTreeKeys;
    /** @type {?} */
    SelectObjElementComponent.prototype.selectedTreeKey;
    /** @type {?} */
    SelectObjElementComponent.prototype.enableNextStep;
    /**
     * @type {?}
     * @private
     */
    SelectObjElementComponent.prototype.detailPage;
}
//# sourceMappingURL=data:application/json;base64,