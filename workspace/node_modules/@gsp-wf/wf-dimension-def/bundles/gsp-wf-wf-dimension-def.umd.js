(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/observable/forkJoin'), require('rxjs/operators'), require('@farris/ui-button'), require('@farris/ui-datagrid'), require('@farris/ui-input-group'), require('@farris/ui-notify'), require('@farris/ui-dialog'), require('@farris/ui-combo-list'), require('@gsp-lcm/metadatart-selector'), require('rxjs'), require('@farris/ui-messager'), require('@farris/ui-datagrid-editors'), require('@gsp-bef/gsp-cm-metadata'), require('@farris/ui-modal'), require('@ecp-caf/caf-common'), require('@gsp-svc/expression'), require('@angular/animations'), require('@angular/common'), require('@farris/ui-treetable'), require('@angular/core'), require('@farris/ui-wizard'), require('@angular/forms'), require('@farris/lookup-config')) :
    typeof define === 'function' && define.amd ? define('@gsp-wf/wf-dimension-def', ['exports', 'rxjs/observable/forkJoin', 'rxjs/operators', '@farris/ui-button', '@farris/ui-datagrid', '@farris/ui-input-group', '@farris/ui-notify', '@farris/ui-dialog', '@farris/ui-combo-list', '@gsp-lcm/metadatart-selector', 'rxjs', '@farris/ui-messager', '@farris/ui-datagrid-editors', '@gsp-bef/gsp-cm-metadata', '@farris/ui-modal', '@ecp-caf/caf-common', '@gsp-svc/expression', '@angular/animations', '@angular/common', '@farris/ui-treetable', '@angular/core', '@farris/ui-wizard', '@angular/forms', '@farris/lookup-config'], factory) :
    (factory((global['gsp-wf'] = global['gsp-wf'] || {}, global['gsp-wf']['wf-dimension-def'] = {}),global.rxjs['observable/forkJoin'],global.rxjs.operators,global.uiButton,global.uiDatagrid,global.uiInputGroup,global.uiNotify,global.uiDialog,global.uiComboList,global.metadatartSelector,global.rxjs,global.uiMessager,global.uiDatagridEditors,global.gspCmMetadata,global.uiModal,global.cafCommon,global.expression,global.ng.animations,global.ng.common,global.uiTreetable,global.ng.core,global.uiWizard,global.ng.forms,global.lookupConfig));
}(this, (function (exports,forkJoin,operators,uiButton,uiDatagrid,uiInputGroup,uiNotify,uiDialog,uiComboList,metadatartSelector,rxjs,uiMessager,uiDatagridEditors,gspCmMetadata,uiModal,cafCommon,expression,animations,common,uiTreetable,i0,uiWizard,forms,lookupConfig) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WfDimensionDefService = /** @class */ (function () {
        function WfDimensionDefService() {
        }
        WfDimensionDefService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WfDimensionDefService.ctorParameters = function () { return []; };
        /** @nocollapse */ WfDimensionDefService.ngInjectableDef = i0.defineInjectable({ factory: function WfDimensionDefService_Factory() { return new WfDimensionDefService(); }, token: WfDimensionDefService, providedIn: "root" });
        return WfDimensionDefService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var DimensionInputType = {
        Help: 0,
        Enum: 1,
    };
    DimensionInputType[DimensionInputType.Help] = 'Help';
    DimensionInputType[DimensionInputType.Enum] = 'Enum';
    /** @enum {number} */
    var DimensionType = {
        BusinessField: 0,
        EnvironmentalVariable: 1,
    };
    DimensionType[DimensionType.BusinessField] = 'BusinessField';
    DimensionType[DimensionType.EnvironmentalVariable] = 'EnvironmentalVariable';
    /** @type {?} */
    var WFDimensionTypes = [
        { index: 0, text: '模型字段', value: DimensionType.BusinessField },
    ];
    /** @type {?} */
    var WFDimensionInputTypes = [
        { index: 0, text: '帮助', value: DimensionInputType.Help },
        { index: 1, text: '枚举', value: DimensionInputType.Enum }
    ];
    var ItemEditState = /** @class */ (function () {
        function ItemEditState() {
            this.canEdit = false;
        }
        return ItemEditState;
    }());
    var EnumItem = /** @class */ (function () {
        function EnumItem() {
        }
        return EnumItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Guid = /** @class */ (function () {
        function Guid() {
        }
        /**
         * @return {?}
         */
        Guid.newGuid = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var initString = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
                /** @type {?} */
                var result = initString.replace(/[xy]/g, ( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) {
                    return _this.convert(c);
                }));
                return result;
            };
        /**
         * @private
         * @param {?} c
         * @return {?}
         */
        Guid.convert = /**
         * @private
         * @param {?} c
         * @return {?}
         */
            function (c) {
                // tslint:disable-next-line:no-bitwise
                /** @type {?} */
                var r = Math.random() * 16 | 0;
                // tslint:disable-next-line:no-bitwise
                /** @type {?} */
                var v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            };
        return Guid;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DimenDefEntityUtil = /** @class */ (function () {
        function DimenDefEntityUtil() {
        }
        /**
         * @param {?} flowFormId
         * @return {?}
         */
        DimenDefEntityUtil.newDimendefEntity = /**
         * @param {?} flowFormId
         * @return {?}
         */
            function (flowFormId) {
                /** @type {?} */
                var newDimendef = {
                    id: '',
                    code: '',
                    entryFormID: '',
                    dimensionType: DimensionType.BusinessField,
                    dimensionCode: '',
                    dimensionName: '',
                    inputType: DimensionInputType.Help,
                    enumList: null,
                    smartHelp: '',
                    multiSelect: true,
                    helpFilter: '',
                    isUse: true,
                    devLayer: '',
                    contentInfo: null,
                    sortOrder: 0,
                    sysInit: 0,
                    remarks: ''
                };
                newDimendef.id = Guid.newGuid();
                newDimendef.entryFormID = flowFormId;
                return newDimendef;
            };
        return DimenDefEntityUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFDimensionDefViewmodel = /** @class */ (function () {
        function WFDimensionDefViewmodel(http) {
            this.http = http;
            this.url = '/api/runtime/wf/v1.0/dimensionDef';
        }
        /**
         * @param {?} flowFormId
         * @return {?}
         */
        WFDimensionDefViewmodel.prototype.loadDimensionDefs = /**
         * @param {?} flowFormId
         * @return {?}
         */
            function (flowFormId) {
                if (flowFormId) {
                    /** @type {?} */
                    var url = this.url + ("?entryFormID=" + flowFormId);
                    return this.http.get(url);
                }
            };
        /**
         * @param {?} id
         * @return {?}
         */
        WFDimensionDefViewmodel.prototype.removeDimensionDef = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (id) {
                    /** @type {?} */
                    var url = this.url + ("/" + id);
                    return this.http.delete(url, {});
                }
            };
        /**
         * @param {?} dimensionDef
         * @return {?}
         */
        WFDimensionDefViewmodel.prototype.addDimensionDef = /**
         * @param {?} dimensionDef
         * @return {?}
         */
            function (dimensionDef) {
                return this.http.post(this.url, dimensionDef);
            };
        /**
         * @param {?} dimensionDef
         * @return {?}
         */
        WFDimensionDefViewmodel.prototype.updateDimensionDef = /**
         * @param {?} dimensionDef
         * @return {?}
         */
            function (dimensionDef) {
                return this.http.patch(this.url, dimensionDef);
            };
        /**
         * @param {?} flowFormId
         * @return {?}
         */
        WFDimensionDefViewmodel.prototype.getDimensionDefSet = /**
         * @param {?} flowFormId
         * @return {?}
         */
            function (flowFormId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/dimensionDef/customSetting?entryFormId=" + flowFormId;
                return this.http.get(url);
            };
        WFDimensionDefViewmodel.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        WFDimensionDefViewmodel.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService }
            ];
        };
        return WFDimensionDefViewmodel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFDimensionDefUIState = /** @class */ (function () {
        function WFDimensionDefUIState() {
        }
        WFDimensionDefUIState.decorators = [
            { type: i0.Injectable }
        ];
        return WFDimensionDefUIState;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WfDimensionDefComponent = /** @class */ (function () {
        function WfDimensionDefComponent(messageService, viewmodel, notifyService, uistate) {
            this.messageService = messageService;
            this.viewmodel = viewmodel;
            this.notifyService = notifyService;
            this.uistate = uistate;
            this.entry = 'flowForm';
            // tslint:disable-next-line: variable-name
            this._editable = false;
            this.data = new Array();
            this.editData = new Array();
        }
        Object.defineProperty(WfDimensionDefComponent.prototype, "flowFormId", {
            get: /**
             * @return {?}
             */ function () {
                return this._flowFormId;
            },
            set: /**
             * @param {?} id
             * @return {?}
             */ function (id) {
                this._flowFormId = id;
                this.load();
                this.getDimensionDefSet(this._flowFormId);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WfDimensionDefComponent.prototype, "schema", {
            get: /**
             * @return {?}
             */ function () {
                return this.uistate.schema;
            },
            set: /**
             * @param {?} s
             * @return {?}
             */ function (s) {
                this.uistate.schema = s;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WfDimensionDefComponent.prototype, "beMetaData", {
            get: /**
             * @return {?}
             */ function () {
                return this.uistate.beMetaData;
            },
            set: /**
             * @param {?} m
             * @return {?}
             */ function (m) {
                this.uistate.beMetaData = m;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WfDimensionDefComponent.prototype, "editable", {
            get: /**
             * @return {?}
             */ function () {
                return this._editable;
            },
            set: /**
             * @param {?} e
             * @return {?}
             */ function (e) {
                var e_1, _a;
                this._editable = e;
                try {
                    for (var _b = __values(this.editData), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var d = _c.value;
                        d.canEdit = this._editable;
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WfDimensionDefComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        WfDimensionDefComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        WfDimensionDefComponent.prototype.load = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.flowFormId) {
                    this.viewmodel.loadDimensionDefs(this.flowFormId).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        _this.data = re;
                        _this.editData = [];
                        if (_this.data && _this.data.length > 0) {
                            _this.data.forEach(( /**
                             * @param {?} item
                             * @return {?}
                             */function (item) {
                                _this.addItem(item, _this.editable);
                            }));
                        }
                    }));
                }
            };
        /**
         * @param {?} flowFormId
         * @return {?}
         */
        WfDimensionDefComponent.prototype.getDimensionDefSet = /**
         * @param {?} flowFormId
         * @return {?}
         */
            function (flowFormId) {
                var _this = this;
                if (flowFormId) {
                    this.viewmodel.getDimensionDefSet(flowFormId).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        _this.dimensionDefSet = re;
                    }));
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WfDimensionDefComponent.prototype.hasItem = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.editData.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.index === index; }));
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WfDimensionDefComponent.prototype.getItem = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.hasItem(index) ? this.editData.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.index === index; })).itemData : null;
            };
        /**
         * @param {?} index
         * @param {?} itemData
         * @return {?}
         */
        WfDimensionDefComponent.prototype.setItem = /**
         * @param {?} index
         * @param {?} itemData
         * @return {?}
         */
            function (index, itemData) {
                this.editData.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.index === index; })).itemData = itemData;
            };
        /**
         * @param {?} itemData
         * @param {?} canEdit
         * @return {?}
         */
        WfDimensionDefComponent.prototype.addItem = /**
         * @param {?} itemData
         * @param {?} canEdit
         * @return {?}
         */
            function (itemData, canEdit) {
                /** @type {?} */
                var editDataItem = new ItemEditState();
                editDataItem.canEdit = canEdit;
                editDataItem.index = this.editData.length;
                editDataItem.itemData = Object.assign({}, itemData);
                editDataItem.id = itemData.id;
                this.editData.push(editDataItem);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WfDimensionDefComponent.prototype.getTitle = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                /** @type {?} */
                var suffix = '';
                switch (index) {
                    case 0:
                        suffix = '一';
                        break;
                    case 1:
                        suffix = '二';
                        break;
                }
                return "\u7EF4\u5EA6" + suffix;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WfDimensionDefComponent.prototype.getState = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (!this.hasItem(index)) {
                    return false;
                }
                /** @type {?} */
                var sysInit = this.editData.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.index === index; })).itemData.sysInit;
                return sysInit === 1 ? true : false;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WfDimensionDefComponent.prototype.isEditState = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (!this.hasItem(index)) {
                    return false;
                }
                return this.editData.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.index === index; })).canEdit;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        WfDimensionDefComponent.prototype.edit = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.editData.find(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) { return d.id === item.id; })).canEdit = true;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        WfDimensionDefComponent.prototype.remove = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var _this = this;
                if (this.dimensionDefSet && (item.id === this.dimensionDefSet.dimension1 || item.id === this.dimensionDefSet.dimension2)) {
                    this.messageService.info('当前维度定义已在流程分配维度配置中启用');
                    return;
                }
                if (this.entry === 'flowForm') {
                    this.removeDimensionDef(item);
                    // const i = this.data.findIndex(d => d.id === item.id);
                    // if (i > -1) {
                    //   this.data.splice(i, 1);
                    // }
                }
                else {
                    this.messageService.question("\u786E\u8BA4\u5220\u9664'" + this.getTitle(item.index) + "'\u5417\uFF1F", ( /**
                     * @return {?}
                     */function () {
                        if (_this.data.findIndex(( /**
                         * @param {?} d
                         * @return {?}
                         */function (d) { return d.id === item.id; })) === -1) {
                            _this.removeDimensionDef(item);
                            _this.notifyService.success('删除成功');
                            return;
                        }
                        _this.viewmodel.removeDimensionDef(item.id).subscribe(( /**
                         * @param {?} re
                         * @return {?}
                         */function (re) {
                            _this.removeDimensionDef(item);
                            /** @type {?} */
                            var i = _this.data.findIndex(( /**
                             * @param {?} d
                             * @return {?}
                             */function (d) { return d.id === item.id; }));
                            if (i > -1) {
                                _this.data.splice(i, 1);
                            }
                            _this.notifyService.success('删除成功');
                        }), ( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            _this.notifyService.error('删除失败，请联系管理员查看原因！');
                        }));
                    }));
                }
            };
        /**
         * @return {?}
         */
        WfDimensionDefComponent.prototype.getDimensionDefs = /**
         * @return {?}
         */
            function () {
                return this.editData.map(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) { return d.itemData; }));
            };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        WfDimensionDefComponent.prototype.removeDimensionDef = /**
         * @private
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var index = this.editData.findIndex(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) { return d.id === item.id; }));
                if (index > -1) {
                    this.editData.splice(index, 1);
                }
                if (index < this.editData.length) {
                    for (var i = 0; i < this.editData.length; i++) {
                        this.editData[i].index = i;
                    }
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        WfDimensionDefComponent.prototype.save = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var _this = this;
                /** @type {?} */
                var v = this.validate(item.itemData);
                if (!v.result) {
                    this.messageService.info(v.message);
                    return;
                }
                if (this.data.findIndex(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) { return d.id === item.id; })) === -1) {
                    this.viewmodel.addDimensionDef(item.itemData).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        _this.endEdit(item);
                        _this.data.push(Object.assign({}, item.itemData));
                        _this.notifyService.success('保存成功');
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.notifyService.error('保存失败，请联系管理员查看原因！');
                    }));
                }
                else {
                    this.viewmodel.updateDimensionDef(item.itemData).subscribe(( /**
                     * @param {?} re
                     * @return {?}
                     */function (re) {
                        _this.endEdit(item);
                        /** @type {?} */
                        var data = _this.data.find(( /**
                         * @param {?} d
                         * @return {?}
                         */function (d) { return d.id === item.id; }));
                        Object.assign(data, item.itemData);
                        _this.notifyService.success('保存成功');
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.notifyService.error('保存失败，请联系管理员查看原因！');
                    }));
                }
            };
        /**
         * @return {?}
         */
        WfDimensionDefComponent.prototype.saveAll = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var deleteDefs = this.data.filter(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) {
                    return _this.editData.findIndex(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return e.id === d.id; })) === -1;
                }));
                /** @type {?} */
                var addDefs = this.editData.filter(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    return _this.data.findIndex(( /**
                     * @param {?} d
                     * @return {?}
                     */function (d) { return d.id === e.id; })) === -1;
                })).map(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.itemData; }));
                /** @type {?} */
                var updateDefs = this.editData.filter(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    return _this.data.findIndex(( /**
                     * @param {?} d
                     * @return {?}
                     */function (d) { return d.id === e.id; })) > -1;
                }))
                    .map(( /**
             * @param {?} e
             * @return {?}
             */function (e) { return e.itemData; }))
                    .filter(( /**
             * @param {?} d
             * @return {?}
             */function (d) { return d.sysInit === 0; }));
                return forkJoin.forkJoin(deleteDefs.map(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) {
                    return _this.viewmodel.removeDimensionDef(d.id);
                })).concat(updateDefs.map(( /**
                 * @param {?} u
                 * @return {?}
                 */function (u) {
                    return _this.viewmodel.updateDimensionDef(u);
                })).concat(addDefs.map(( /**
                 * @param {?} a
                 * @return {?}
                 */function (a) {
                    return _this.viewmodel.addDimensionDef(a);
                }))))).pipe(operators.switchMap(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    _this.data = _this.editData.map(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return e.itemData; }));
                    // this.editData.map(e => e.canEdit = false);
                    return rxjs.of(true);
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    console.error(err);
                    return rxjs.of(false);
                })));
                //   .subscribe(re => {
                //   this.data = this.editData.map(e => e.itemData);
                //   this.editData.map(e => e.canEdit = false);
                // },
                // err => {
                //   this.notifyService.error('保存维度定义失败，请联系系统管理员查看原因！');
                // });
            };
        /**
         * @param {?} item
         * @return {?}
         */
        WfDimensionDefComponent.prototype.cancel = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.endEdit(item);
                if (this.data.findIndex(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) { return d.id === item.id; })) === -1) {
                    this.removeDimensionDef(item);
                    return;
                }
                else {
                    Object.assign(this.editData.find(( /**
                     * @param {?} d
                     * @return {?}
                     */function (d) {
                        return d.id === item.id;
                    })).itemData, this.data.find(( /**
                     * @param {?} d
                     * @return {?}
                     */function (d) { return d.id === item.id; })));
                }
            };
        /**
         * @return {?}
         */
        WfDimensionDefComponent.prototype.addHandler = /**
         * @return {?}
         */
            function () {
                if (this.entry === 'flowForm' && !this.editable) {
                    return;
                }
                /** @type {?} */
                var info = DimenDefEntityUtil.newDimendefEntity(this.flowFormId);
                this.addItem(info, true);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        WfDimensionDefComponent.prototype.isOtherItemEditting = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var _this = this;
                /** @type {?} */
                var isOtherItemEditting = false;
                this.editData.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (item.canEdit === true && item.index !== index) {
                        isOtherItemEditting = true;
                        _this.messageService.info("\u8BF7\u5148\u4FDD\u5B58\u5BF9\u4E8E'" + _this.getTitle(item.index) + "'\u7684\u4FEE\u6539\u3002");
                    }
                }));
                return isOtherItemEditting;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        WfDimensionDefComponent.prototype.endEdit = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                var e_2, _a;
                try {
                    for (var _b = __values(this.editData), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var d = _c.value;
                        if (d.id === item.id) {
                            d.canEdit = false;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
            };
        /**
         * @private
         * @param {?} d
         * @return {?}
         */
        WfDimensionDefComponent.prototype.validate = /**
         * @private
         * @param {?} d
         * @return {?}
         */
            function (d) {
                if (!d.code) {
                    return { result: false, message: '维度定义不允许编号为空，请修改！' };
                }
                else if (!d.dimensionName) {
                    return { result: false, message: '维度定义不允许维度名称为空，请修改！' };
                }
                else if (!d.dimensionCode) {
                    return { result: false, message: '维度定义不允许分配维度为空，请修改！' };
                }
                else if (d.inputType === DimensionInputType.Help && !d.smartHelp) {
                    return { result: false, message: '维度定义数据类型为帮助，但帮助值为空，请修改！' };
                }
                else if (d.inputType === DimensionInputType.Enum && !d.enumList) {
                    return { result: false, message: '维度定义数据类型为枚举，但枚举值为空，请修改！' };
                }
                return { result: true, message: '' };
            };
        WfDimensionDefComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'wf-dimension-def',
                        template: "<wf-dimension-panel [model]=\"['b']\" [width]=\"'700px'\" [defaultExpand]=\"true\">\r\n    <div *ngFor=\"let item of editData; index as index;\"\r\n        style=\"width: 100%;border: 1px solid rgba(0, 0, 0, .125);margin-bottom: 25px;\">\r\n        <wf-dimension-panel-item [title]=\"getTitle(index)\" [sysInit]=\"getState(index)\" [value]=\"index\" [editState]=\"entry==='billCategory'?isEditState(index):false\">\r\n            <ng-template #contentTempl>\r\n                <wf-dimension-item-card [data]=\"getItem(index)\" [canCardEdit]=\"isEditState(index)\" [sysInit]=\"getState(index)\">\r\n                </wf-dimension-item-card>\r\n            </ng-template>\r\n            <ng-template #toolTempl>\r\n                <farris-button *ngIf=\"entry==='billCategory'\" [type]=\"'link'\" (click)=\"edit(item)\"><span class=\"f-icon text-info k-i-edit\"></span>\u4FEE\u6539\r\n                </farris-button>\r\n                <farris-button *ngIf=\"editable && !getState(index)\" [type]=\"'link'\" (click)=\"remove(item)\"><span\r\n                        class=\"f-icon text-info k-i-delete\"></span> \u5220\u9664\r\n                </farris-button>\r\n            </ng-template>\r\n            <ng-template #bottomRef>\r\n                <farris-button (click)=\"save(item)\">\u4FDD\u5B58</farris-button>\r\n                <farris-button style=\"margin-left:10px\" [type]=\"'secondary'\" (click)=\"cancel(item)\">\u53D6\u6D88</farris-button>\r\n            </ng-template>\r\n        </wf-dimension-panel-item>\r\n    </div>\r\n</wf-dimension-panel>\r\n<div *ngIf=\"hasItem(1)\" class=\"panel-ony-two\">\r\n    <div style=\"width: 250px;margin:0 auto\">\r\n        <p style=\"color:rgba(217,217,217)\">Tips:\u76EE\u524D\u4EC5\u652F\u6301\u6DFB\u52A0\u4E24\u4E2A\u7EF4\u5EA6</p>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"!hasItem(1)\" class=\"panel-add\">\r\n    <div style=\"width: 100px;margin:0 auto\">\r\n        <farris-button style=\"margin:25px\" [type]=\"'link'\" [disabled]=\"entry==='flowForm'&&!editable\" (click)=\"addHandler()\">\r\n            <span *ngIf=\"!(entry==='flowForm'&&!editable)\" class=\"f-icon text-info k-i-plus\"></span>\u6DFB\u52A0\u7EF4\u5EA6</farris-button>\r\n    </div>\r\n</div>",
                        styles: [".panel-add{margin:25px;padding:10px;border:1px dashed rgba(0,0,0,.125)}.panel-ony-two{margin:20px}"]
                    }] }
        ];
        /** @nocollapse */
        WfDimensionDefComponent.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: WFDimensionDefViewmodel },
                { type: uiNotify.NotifyService },
                { type: WFDimensionDefUIState }
            ];
        };
        WfDimensionDefComponent.propDecorators = {
            flowFormId: [{ type: i0.Input }],
            schema: [{ type: i0.Input }],
            beMetaData: [{ type: i0.Input }],
            entry: [{ type: i0.Input }],
            editable: [{ type: i0.Input }]
        };
        return WfDimensionDefComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectElementComponent = /** @class */ (function () {
        function SelectElementComponent() {
            /**
             * 关闭窗口事件
             */
            this.closeModal = new i0.EventEmitter();
            /**
             * 确认选择字段
             */
            this.confirm = new i0.EventEmitter();
            this.progressData = {
                activeIndex: 0,
                stepMessages: [
                    {
                        id: 'selectobject',
                        title: '选择节点',
                        icon: ''
                    },
                    {
                        id: 'selectelement',
                        title: '选择字段',
                        icon: ''
                    }
                ]
            };
            this.changeObj = true;
            /**
             * 字段选择信息
             */
            this.selectEleInfo = {
                be: null,
                // be实体
                selectedObj: null,
                // be节点
                BeFields: [],
                // Be字段列表
                selectedBeFields: [],
                // Be字段ID列表
                singleElement: false,
                // 是否单选
                assoRefElement: false // 是否包含关联带出字段
            };
            this.result = {
                be: null,
                // be实体
                selectedObj: null,
                // be节点
                selectedBeFields: [],
            };
        }
        /**
         * @return {?}
         */
        SelectElementComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 页面状态变化时触发事件 {state:'', fromPageId:'', toPageId:''}
         * 其中state分别对应0：Finish:1：Cancel:2：Prev:3：Next:4：StepChange
         * @param value
         */
        /**
         * 页面状态变化时触发事件 {state:'', fromPageId:'', toPageId:''}
         * 其中state分别对应0：Finish:1：Cancel:2：Prev:3：Next:4：StepChange
         * @param {?} value
         * @return {?}
         */
        SelectElementComponent.prototype.stateChange = /**
         * 页面状态变化时触发事件 {state:'', fromPageId:'', toPageId:''}
         * 其中state分别对应0：Finish:1：Cancel:2：Prev:3：Next:4：StepChange
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                switch (value.state) {
                    case 0:
                        // 返回选择结果
                        this.result.be = this.selectEleInfo.be;
                        this.result.selectedObj = this.selectEleInfo.selectedObj;
                        this.result.selectedBeFields = this.selectEleInfo.BeFields.filter(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) {
                            /** @type {?} */
                            var ele = ( /** @type {?} */(item));
                            // 此处使用==判断值相等，若为===，则无法找到id相同的字段
                            // tslint:disable-next-line:triple-equals
                            return _this.selectEleInfo.selectedBeFields.findIndex(( /**
                             * @param {?} fieldId
                             * @return {?}
                             */function (fieldId) { return fieldId == ele.ID; })) >= 0;
                        }));
                        this.confirm.next(this.result);
                        this.close();
                        break;
                    case 1:
                        this.close();
                        break;
                    case 3:
                        this.changeObj = !this.changeObj;
                        break;
                }
            };
        /**
         * 关闭弹窗
         */
        /**
         * 关闭弹窗
         * @return {?}
         */
        SelectElementComponent.prototype.close = /**
         * 关闭弹窗
         * @return {?}
         */
            function () {
                this.closeModal.next();
            };
        SelectElementComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'select-element',
                        template: "<farris-wizard style=\"display:flex;flex:1\" [progressData]=\"progressData\" [stepClickable]=\"false\" [fill]=\"true\" [stepDirection]=\"'vertical'\" [stepPosition]=\"'PageLeft'\" (stateChange)=\"stateChange($event)\">\r\n    <wizard-page [pageId]=\"progressData.stepMessages[0].id\">\r\n        <select-object [data]=\"selectEleInfo\"></select-object>\r\n    </wizard-page>\r\n    <wizard-page [pageId]=\"progressData.stepMessages[1].id\">\r\n        <select-obj-element [data]=\"selectEleInfo\" [changeObj]=\"changeObj\"></select-obj-element>\r\n    </wizard-page>\r\n</farris-wizard>",
                        styles: [":host{display:flex;position:absolute;top:0;bottom:0;left:0;right:0}"]
                    }] }
        ];
        /** @nocollapse */
        SelectElementComponent.ctorParameters = function () { return []; };
        return SelectElementComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumEditComponent = /** @class */ (function () {
        function EnumEditComponent(messageService, uistate, modalService, resolver, injector) {
            this.messageService = messageService;
            this.uistate = uistate;
            this.modalService = modalService;
            this.resolver = resolver;
            this.injector = injector;
            this.cls = 'farris-main-area flex-column';
            this.columns = [
                { field: 'key', width: 100, title: '键', editor: { type: uiDatagridEditors.EditorTypes.TEXTBOX, options: {} } },
                { field: 'value', width: 100, title: '值', editor: { type: uiDatagridEditors.EditorTypes.TEXTBOX, options: {} } }
            ];
            this.confirm = new rxjs.Subject();
            this.closeModalEmitter = new rxjs.Subject();
            /**
             * 显示值
             */
            this.editData = new Array();
            this.maxNum = 0;
        }
        Object.defineProperty(EnumEditComponent.prototype, "enumValues", {
            /**
             * 实际值
             */
            get: /**
             * 实际值
             * @return {?}
             */ function () {
                /** @type {?} */
                var arr = [];
                if (this.editData && this.editData.length >= 0) {
                    this.editData.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        /** @type {?} */
                        var enumItem = new EnumItem();
                        enumItem.key = item.key;
                        enumItem.value = item.value;
                        arr.push(enumItem);
                    }));
                }
                return arr;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        EnumEditComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 加载显示数据
         */
        /**
         * 加载显示数据
         * @param {?} enumValues
         * @return {?}
         */
        EnumEditComponent.prototype.load = /**
         * 加载显示数据
         * @param {?} enumValues
         * @return {?}
         */
            function (enumValues) {
                this.editData = __spread(this.createData(enumValues));
            };
        /**
         * 确认
         */
        /**
         * 确认
         * @return {?}
         */
        EnumEditComponent.prototype.onConfirm = /**
         * 确认
         * @return {?}
         */
            function () {
                this.closeCell();
                if (this.checkBeforeSave()) {
                    this.confirm.next(this.enumValues);
                    this.closeModalEmitter.next();
                }
            };
        /**
         * 取消
         */
        /**
         * 取消
         * @return {?}
         */
        EnumEditComponent.prototype.cancel = /**
         * 取消
         * @return {?}
         */
            function () {
                this.closeModalEmitter.next();
            };
        /**
         * 保存前检查
         */
        /**
         * 保存前检查
         * @return {?}
         */
        EnumEditComponent.prototype.checkBeforeSave = /**
         * 保存前检查
         * @return {?}
         */
            function () {
                var e_1, _a;
                // ① 空，则通过；
                if (!(this.enumValues) || this.enumValues.length === 0) {
                    this.messageService.warning('请添加枚举值。');
                    return false;
                }
                try {
                    // ② 非空，则校验每个的键值是否为空；
                    for (var _b = __values(this.enumValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (!item.key || !item.value) {
                            this.messageService.warning('枚举的[键][值]均不允许为空。');
                            return false;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                // ③ 多于一个，索引不允许重复；
                if (this.enumValues.length > 1) {
                    for (var i = 0; i < this.enumValues.length; i++) {
                        /** @type {?} */
                        var code1 = this.enumValues[i].value;
                        /** @type {?} */
                        var name1 = this.enumValues[i].key;
                        for (var j = i + 1; j < this.enumValues.length; j++) {
                            /** @type {?} */
                            var code2 = this.enumValues[j].value;
                            /** @type {?} */
                            var name2 = this.enumValues[j].key;
                            if (code1 === code2) {
                                this.messageService.warning("\u679A\u4E3E\u7684[\u7F16\u53F7]\u4E0D\u5141\u8BB8\u91CD\u590D\uFF0C\u91CD\u590D\u7F16\u53F7\u4E3A[" + code1 + "]\u3002");
                                return false;
                            }
                            if (name1 === name2) {
                                this.messageService.warning("\u679A\u4E3E\u7684[\u540D\u79F0]\u4E0D\u5141\u8BB8\u91CD\u590D\uFF0C\u91CD\u590D\u540D\u79F0\u4E3A[" + name1 + "]\u3002");
                                return false;
                            }
                        }
                    }
                }
                return true;
            };
        /**
         * 取消编辑
         */
        /**
         * 取消编辑
         * @return {?}
         */
        EnumEditComponent.prototype.closeCell = /**
         * 取消编辑
         * @return {?}
         */
            function () {
                this.dg.endCellEdit();
            };
        /**
         * 引入
         */
        /**
         * 引入
         * @return {?}
         */
        EnumEditComponent.prototype.import = /**
         * 引入
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.uistate.beMetaData) {
                    this.messageService.error('未获取到BE元数据，请联系管理员查看原因！');
                    return;
                }
                /** @type {?} */
                var model = this.uistate.beMetaData.content;
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(SelectElementComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.selectEleInfo.be = model;
                compRef.instance.selectEleInfo.singleElement = true;
                compRef.instance.selectEleInfo.assoRefElement = false;
                compRef.instance.confirm.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    var e_2, _a;
                    /** @type {?} */
                    var selectedElement = ( /** @type {?} */(data.selectedBeFields[0]));
                    if (selectedElement.ObjectType === gspCmMetadata.GSPElementObjectType.Enum) {
                        _this.editData = new Array();
                        /** @type {?} */
                        var k = 0;
                        try {
                            for (var _b = __values(selectedElement.ContainEnumValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var enumValue = _c.value;
                                _this.editData.push({
                                    id: k,
                                    key: enumValue.Value,
                                    value: enumValue.Name,
                                });
                                k++;
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                        _this.maxNum = k;
                    }
                    else {
                        _this.messageService.info('选中字段并非枚举字段，请了解！');
                    }
                }));
                /** @type {?} */
                var modalConfig = {
                    title: '枚举字段选择',
                    width: 1000,
                    height: 550,
                    showButtons: false
                };
                /** @type {?} */
                var dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModal.subscribe(( /**
                 * @return {?}
                 */function () {
                    dialog.close();
                }));
            };
        /**
         * 新增
         */
        /**
         * 新增
         * @return {?}
         */
        EnumEditComponent.prototype.add = /**
         * 新增
         * @return {?}
         */
            function () {
                this.closeCell();
                /** @type {?} */
                var newId = this.maxNum;
                this.editData = this.editData.concat([{
                        id: newId
                    }]);
                this.maxNum++;
            };
        /**
         * 删除
         */
        /**
         * 删除
         * @return {?}
         */
        EnumEditComponent.prototype.remove = /**
         * 删除
         * @return {?}
         */
            function () {
                this.closeCell();
                if (this.dg.selectedRow) {
                    /** @type {?} */
                    var id_1 = this.dg.selectedRow.id;
                    this.dg.selectPrevRow();
                    this.editData = this.editData.filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.id !== id_1; }));
                }
            };
        /**
         * @param {?} enumValues
         * @return {?}
         */
        EnumEditComponent.prototype.createData = /**
         * @param {?} enumValues
         * @return {?}
         */
            function (enumValues) {
                var e_3, _a;
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var k = 0;
                try {
                    for (var enumValues_1 = __values(enumValues), enumValues_1_1 = enumValues_1.next(); !enumValues_1_1.done; enumValues_1_1 = enumValues_1.next()) {
                        var enumValue = enumValues_1_1.value;
                        arr.push({
                            id: k,
                            key: enumValue.key,
                            value: enumValue.value,
                        });
                        k++;
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (enumValues_1_1 && !enumValues_1_1.done && (_a = enumValues_1.return))
                            _a.call(enumValues_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.maxNum = k;
                return arr;
            };
        EnumEditComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-enum-edit',
                        template: "<ng-template #buttons>\r\n    <button class=\"btn btn-primary\" (click)=\"onConfirm()\">\u786E\u5B9A</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<div class=\"f-page\">\r\n    <div class=\"f-page-header\">\r\n        <nav class=\"f-page-header-base\">\r\n            <div class=\"f-title\">\r\n                <span class=\"f-title-icon f-text-orna-bill\">\r\n                    <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n                </span>\r\n                <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n            </div>\r\n            <div class=\"btn-toolbar btn-group-lg\">\r\n                <button class=\"btn btn-primary mr-2\" (click)=\"import()\">\u5F15\u5165</button>\r\n                <button class=\"btn btn-secondary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n                <button class=\"btn btn-secondary\" (click)=\"remove()\">\u5220\u9664</button>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n    <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n        <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n            <farris-datagrid [data]=\"editData\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\" \r\n                [editable]=\"true\" [editMode]=\"'cell'\" [idField]=\"'id'\"\r\n                [showCheckbox]=\"false\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" \r\n                [striped]=\"true\" [virtualized]=\"true\" [pagination]=\"false\">\r\n            </farris-datagrid>\r\n        </div>\r\n    </div>\r\n</div>",
                        styles: [":host{position:absolute;top:0;bottom:0;right:0;left:0}"]
                    }] }
        ];
        /** @nocollapse */
        EnumEditComponent.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: WFDimensionDefUIState },
                { type: uiModal.BsModalService },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector }
            ];
        };
        EnumEditComponent.propDecorators = {
            cls: [{ type: i0.HostBinding, args: ['class',] }],
            dg: [{ type: i0.ViewChild, args: ['dg',] }],
            btnRef: [{ type: i0.ViewChild, args: ['buttons',] }]
        };
        return EnumEditComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DimensionItemCardComponent = /** @class */ (function () {
        function DimensionItemCardComponent(modalService, resolver, injector, messageService, uistate, exprService, configService) {
            var _this = this;
            this.modalService = modalService;
            this.resolver = resolver;
            this.injector = injector;
            this.messageService = messageService;
            this.uistate = uistate;
            this.exprService = exprService;
            this.configService = configService;
            this.sysInit = false;
            this.canEdit = false;
            /**
             * 维度种类
             */
            this.dimensionTypes = WFDimensionTypes;
            this.inputTypes = WFDimensionInputTypes;
            this.selectedBEMetadata = new i0.EventEmitter();
            this.selectedHelpMetadata = new i0.EventEmitter();
            this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
            this.enumListText = ( /**
             * @return {?}
             */function () {
                if (!_this.getIsEnumInput()) {
                    return '';
                }
                /** @type {?} */
                var display = '';
                if (_this.data.enumList) {
                    /** @type {?} */
                    var enumList = JSON.parse(_this.data.enumList);
                    if (enumList.length > 0) {
                        enumList.forEach(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) {
                            display = display.concat(item.key + ":" + item.value + "; ");
                        }));
                    }
                }
                return display;
            });
            this.configService.getLookupData().subscribe(( /**
             * @param {?} data
             * @return {?}
             */function (data) {
                console.log(data);
                _this.data.smartHelp = data;
            }));
        }
        Object.defineProperty(DimensionItemCardComponent.prototype, "dimensionItemCode", {
            get: /**
             * @return {?}
             */ function () {
                return this.data ? this.data.code : '';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.data.code = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DimensionItemCardComponent.prototype, "dimensionItemName", {
            get: /**
             * @return {?}
             */ function () {
                return this.data ? this.data.dimensionName : '';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.data.dimensionName = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DimensionItemCardComponent.prototype, "dimensionCode", {
            get: /**
             * @return {?}
             */ function () {
                return this.data ? this.data.dimensionCode : '';
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this.data.dimensionCode = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DimensionItemCardComponent.prototype, "inputType", {
            get: /**
             * @return {?}
             */ function () {
                return this.data ? this.data.inputType : null;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this.data.inputType = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DimensionItemCardComponent.prototype, "dimensionType", {
            get: /**
             * @return {?}
             */ function () {
                return this.data ? this.data.dimensionType : null;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this.data.dimensionType = v;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DimensionItemCardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.canEdit = this.canCardEdit;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DimensionItemCardComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.canCardEdit) {
                    this.canEdit = this.canCardEdit;
                }
            };
        /**
         * 维度类型
         */
        /**
         * 维度类型
         * @param {?} data
         * @return {?}
         */
        DimensionItemCardComponent.prototype.selectDimensionType = /**
         * 维度类型
         * @param {?} data
         * @return {?}
         */
            function (data) {
            };
        /**
         * 维度选择1-be字段
         */
        /**
         * 维度选择1-be字段
         * @return {?}
         */
        DimensionItemCardComponent.prototype.selectBEMeta = /**
         * 维度选择1-be字段
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.uistate.schema) {
                    this.exprService.clearInjectedEntity();
                    this.exprService.addSchema('Schema', this.uistate.schema);
                    if (this.uistate.schema.entityTypes && this.uistate.schema.entityTypes.length > 0) {
                        /** @type {?} */
                        var entityType = this.uistate.schema.entityTypes[0];
                        this.exprService.addInjectedEntity(entityType.name, 'Schema', entityType.name, expression.InjectedType.EntityType);
                    }
                }
                // if (this.dimensionCode) {                                 // 编辑器加载初始值
                //   try {
                this.exprService.addExpressionText(this.dimensionCode);
                // } catch (error) {
                //   console.log('parse expression error:' + this.dimensionCode);
                // }
                // }
                this.exprService.buildExpression().then(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) {
                    if (d) {
                        _this.dimensionCode = d;
                    }
                }));
            };
        /**
         * 输入类型
         * @param value
         */
        /**
         * 输入类型
         * @param {?} data
         * @return {?}
         */
        DimensionItemCardComponent.prototype.selectInputType = /**
         * 输入类型
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.data.inputType = data.data.value;
            };
        /**
         * 是否枚举输入
         */
        /**
         * 是否枚举输入
         * @return {?}
         */
        DimensionItemCardComponent.prototype.getIsEnumInput = /**
         * 是否枚举输入
         * @return {?}
         */
            function () {
                return this.data && this.data.inputType === DimensionInputType.Enum;
            };
        /**
         * 是否帮助输入
         */
        /**
         * 是否帮助输入
         * @return {?}
         */
        DimensionItemCardComponent.prototype.getIsSmartHelpInput = /**
         * 是否帮助输入
         * @return {?}
         */
            function () {
                return this.data && this.data.inputType === DimensionInputType.Help;
            };
        /**
         * 枚举显示值
         */
        /**
         * 枚举显示值
         * @return {?}
         */
        DimensionItemCardComponent.prototype.getEnumInputDisplay = /**
         * 枚举显示值
         * @return {?}
         */
            function () {
                // if (!this.getIsEnumInput()) {
                //   return '';
                // }
                // const enumInputInfo = this.data.inputInfo as EnumInputInfo;
                // let display = '';
                // if (!enumInputInfo || !enumInputInfo.enumItems) {
                //   return display;
                // }
                // enumInputInfo.enumItems.forEach(item => {
                //   display = display.concat(`${item.key}:${item.value}; `);
                // });
                // return display;
            };
        Object.defineProperty(DimensionItemCardComponent.prototype, "helperName", {
            /**
             * 帮助名称
             */
            get: /**
             * 帮助名称
             * @return {?}
             */ function () {
                if (!this.getIsSmartHelpInput()) {
                    return '';
                }
                return this.data.smartHelp;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 帮助选择
         */
        /**
         * 帮助选择
         * @return {?}
         */
        DimensionItemCardComponent.prototype.selectHelpMeta = /**
         * 帮助选择
         * @return {?}
         */
            function () {
                this.lookupConfig = this.configService.showConfig({
                    configId: this.data.smartHelp
                });
                // const compFactory =
                //   this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
                // const compRef = compFactory.create(this.injector);
                // compRef.instance.typeList = 'HelpMetadata';
                // compRef.instance.selectedMetadata
                //   .subscribe(($event: Metadata4RefDto) => {
                //     const meta: MetadataDto = $event.metadata;
                //     const help = JSON.parse(meta.content);
                //     this.data.smartHelp = help.id;
                //   });
                // const modalConfig = {
                //   title: '帮助选择',
                //   width: 930,
                //   height: 573,
                //   showButtons: false
                // };
                // const dialog = this.modalService.show(compRef, modalConfig);
                // compRef.instance.closeModalEmitter.subscribe($event => dialog.close());
            };
        /**
         * @return {?}
         */
        DimensionItemCardComponent.prototype.editEnumValues = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(EnumEditComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                /** @type {?} */
                var modalConfig = {
                    title: '枚举设置',
                    width: 650,
                    height: 450,
                    showButtons: true,
                    buttons: compRef.instance.btnRef,
                };
                if (this.data.enumList) {
                    compRef.instance.load(JSON.parse(this.data.enumList));
                }
                compRef.instance.confirm.subscribe(( /**
                 * @param {?} re
                 * @return {?}
                 */function (re) {
                    _this.data.enumList = JSON.stringify(re) ? JSON.stringify(re) : null;
                }));
                /** @type {?} */
                var dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModalEmitter.subscribe(( /**
                 * @return {?}
                 */function () {
                    dialog.close();
                }));
            };
        DimensionItemCardComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'wf-dimension-item-card',
                        template: "<div class=\"farris-form farris-form-controls-inline mt-3\">\r\n    <form class=\"f-section-formgroup\">\r\n        <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12 row\">\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u7EF4\u5EA6\u7F16\u53F7</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group [(ngModel)]=\"dimensionItemCode\" name=\"code\" \r\n                            [disabled]=\"!canEdit\" [readonly]=\"sysInit\" [enableClear]=\"false\"></input-group>\r\n                            <!-- <input type=\"text\" class=\"form-control\" [(ngModel)]=\"dimensionItemCode\" name=\"code\"\r\n                                [disabled]=\"!canEdit\" [readOnly]=\"canEdit && sysInit\"> -->\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u7EF4\u5EA6\u7C7B\u578B</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list [ngModel]=\"dimensionType\" [idField]=\"'value'\" [textField]=\"'text'\" \r\n                                [disabled]=\"!canEdit\" [enableClear]=\"false\" [readonly]=\"sysInit\"\r\n                                [data]=\"dimensionTypes\" name=\"dimensionType\" (selectChange)=\"selectDimensionType($event)\"></farris-combo-list>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u5206\u914D\u7EF4\u5EA6</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\" \r\n                                [showButtonWhenDisabled]=\"false\" [disabled]=\"!canEdit\" [readonly]=\"sysInit\"\r\n                                [ngModel]=\"dimensionCode\" name=\"dimensionCode\"\r\n                                [editable]=\"false\" (clickHandle)=\"selectBEMeta()\" [groupText]=\"groupIcon\"></input-group>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u7EF4\u5EA6\u540D\u79F0</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group [(ngModel)]=\"dimensionItemName\" name=\"name\" \r\n                            [disabled]=\"!canEdit\" [readonly]=\"sysInit\" [enableClear]=\"false\"></input-group>\r\n                            <!-- <input type=\"text\" class=\"form-control\" [(ngModel)]=\"dimensionItemName\" name=\"name\" \r\n                            [disabled]=\"!canEdit\" [readOnly]=\"canEdit && sysInit\"> -->\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u6570\u636E\u7C7B\u578B</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list [ngModel]=\"inputType\" [idField]=\"'value'\" [textField]=\"'text'\" [disabled]=\"!canEdit\" \r\n                                [data]=\"inputTypes\" [enableClear]=\"false\" [readonly]=\"sysInit\"\r\n                                (selectChange)=\"selectInputType($event)\" name=\"inputType\"></farris-combo-list>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"getIsEnumInput()\" class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u679A\u4E3E\u5217\u8868</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                                [showButtonWhenDisabled]=\"false\" [disabled]=\"!canEdit\" [value]=\"enumListText()\" [editable]=\"false\"\r\n                                (clickHandle)=\"editEnumValues()\" [groupText]=\"groupIcon\" [readonly]=\"sysInit\"></input-group>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"getIsSmartHelpInput()\" class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u5E2E\u52A9\u9009\u62E9</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\" \r\n                                [showButtonWhenDisabled]=\"false\" [disabled]=\"!canEdit\"\r\n                                [value]=\"helperName\" [editable]=\"false\" (clickHandle)=\"selectHelpMeta()\"\r\n                                [groupText]=\"groupIcon\"></input-group>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>",
                        providers: [lookupConfig.LookupConfigService],
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        DimensionItemCardComponent.ctorParameters = function () {
            return [
                { type: uiModal.BsModalService },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector },
                { type: uiMessager.MessagerService },
                { type: WFDimensionDefUIState },
                { type: expression.ExpressionService },
                { type: lookupConfig.LookupConfigService }
            ];
        };
        DimensionItemCardComponent.propDecorators = {
            data: [{ type: i0.Input }],
            canCardEdit: [{ type: i0.Input }],
            sysInit: [{ type: i0.Input }]
        };
        return DimensionItemCardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFDimensionPanelComponent = /** @class */ (function () {
        function WFDimensionPanelComponent(render) {
            this.render = render;
            /* 自定义className */
            this.className = [];
            /* 面板是否可收折  默认收折*/
            this.foldable = true;
            // 设置手风琴模式  至多只有一个panel可以被选中
            this.accordion = false;
            this.modelChange = new i0.EventEmitter();
            // @HostBinding('class.farris-panel') isPanel =
            // 双向绑定  当model数组改变时，相应的active状态的panel也要改变 从而改变视图
            // 双向绑定 用于存取active状态的panel
            this.modelValue = [];
            this.subscriber = [];
        }
        Object.defineProperty(WFDimensionPanelComponent.prototype, "model", {
            /* panel数据存储 */
            get: /* panel数据存储 */ 
            /**
             * @return {?}
             */
            function () {
                return this.modelValue;
            },
            set: /**
             * @param {?} modelValue
             * @return {?}
             */ function (modelValue) {
                // 获取用户输入的值
                this.modelValue = modelValue;
                this.updateSubscriber();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WFDimensionPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        WFDimensionPanelComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // 添加class名
                if (this.className.length) {
                    this.className.forEach(( /**
                     * @param {?} ele
                     * @return {?}
                     */function (ele) {
                        _this.render.addClass(_this.farrisPanel.nativeElement, ele);
                    }));
                }
                this.updateSubscriber();
            };
        /**
         * @param value panel存储激活值
         */
        /**
         * @param {?} value panel存储激活值
         * @return {?}
         */
        WFDimensionPanelComponent.prototype.updateModel = /**
         * @param {?} value panel存储激活值
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var index = this.modelValue.findIndex(( /**
                 * @param {?} val
                 * @return {?}
                 */function (val) { return val === value; }));
                // 如果没有匹配到点击的panel值  可能model里面不存在 可能model为空
                if (index < 0) {
                    // 若是手风琴模式  先把所有panel处于未激活状态
                    if (this.accordion) {
                        this.model = [];
                    }
                    // 如果不是手风琴模式  直接激活即可
                    this.modelValue.push(value);
                    this.updateSubscriber();
                    return this.modelChange.emit(this.modelValue);
                }
                // 如果index不为-1
                // 手风琴模式  关闭所有激活状态
                if (this.accordion) {
                    this.model = [];
                }
                else {
                    // 非手风琴模式 直接关闭当前panel即可
                    this.modelValue.splice(index, 1);
                }
                this.updateSubscriber();
                this.modelChange.emit(this.modelValue);
            };
        /* 函数分发 */
        /* 函数分发 */
        /**
         * @private
         * @return {?}
         */
        WFDimensionPanelComponent.prototype.updateSubscriber = /* 函数分发 */
            /**
             * @private
             * @return {?}
             */
            function () {
                this.subscriber.forEach(( /**
                 * @param {?} handle
                 * @return {?}
                 */function (handle) { return handle(); }));
            };
        WFDimensionPanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'wf-dimension-panel',
                        template: "<div #farrisPanel class=\"farris-panel\" [class.accordion]=\"accordion\" [style.width]=\"width+'px'\" [style.height]=\"height+'px'\">\r\n    <ng-content>\r\n    </ng-content>\r\n</div>",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [".farris-panel{margin:25px}"]
                    }] }
        ];
        /** @nocollapse */
        WFDimensionPanelComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 }
            ];
        };
        WFDimensionPanelComponent.propDecorators = {
            farrisPanel: [{ type: i0.ViewChild, args: ['farrisPanel',] }],
            width: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            className: [{ type: i0.Input }],
            foldable: [{ type: i0.Input }],
            defaultExpand: [{ type: i0.Input }],
            accordion: [{ type: i0.Input }],
            model: [{ type: i0.Input }],
            modelChange: [{ type: i0.Output }]
        };
        return WFDimensionPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var dropAnimation = animations.trigger('dropAnimation', [
        animations.state('active', animations.style({
            'height': '*',
        })),
        animations.state('inactive', animations.style({
            'height': '0',
            'overflow': 'hidden'
        })),
        animations.transition('active<=>inactive', animations.animate(".35s ease")),
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFDimensionPanelItemComponent = /** @class */ (function () {
        function WFDimensionPanelItemComponent(panel, changeRef, render, el) {
            this.panel = panel;
            this.changeRef = changeRef;
            this.render = render;
            this.el = el;
            this.sysInit = false;
            // @HostBinding('class.farris-panel-item') isPanelItem = true;
            // @HostBinding('class.card') isCard = true;
            // 默认非激活状态(不显示)
            this.active = false;
        }
        /**
         * @return {?}
         */
        WFDimensionPanelItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        WFDimensionPanelItemComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.editState) {
                    if (this.editState) {
                        this.active = true;
                    }
                    else {
                        this.active = false;
                    }
                }
            };
        WFDimensionPanelItemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'wf-dimension-panel-item',
                        template: "<!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n\r\n<div id=\"cardheader\" class=\"card-header\" style=\"height: 45px; background-color: white;border-bottom: 1px solid rgba(0, 0, 0, .125);\">\r\n    <!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n    <div class=\"panel-item-title\">\r\n        <span class=\"f-icon f-icon-new-dimension\"></span>\r\n        <span *ngIf=\"!headRef;else head\">\r\n            {{tabTitle}}\r\n        </span>\r\n        <span [class]=\"sysInit?'sysInit-flow-form':'customize-flow-form'\">{{sysInit?'\u7CFB\u7EDF\u9884\u7F6E':'\u81EA\u5B9A\u4E49'}}</span>\r\n        <ng-template #head [ngTemplateOutlet]=\"headRef\"></ng-template>\r\n    </div>\r\n    <div class=\"panel-item-tool\">\r\n        <ng-template [ngTemplateOutlet]=\"toolTempl\"></ng-template>\r\n    </div>\r\n    <div class=\"panel-item-clear\">\r\n    </div>\r\n\r\n</div>\r\n<!-- panel\u5185\u5BB9\u6A21\u677F -->\r\n<div class=\" card-body \">\r\n    <ng-template [ngTemplateOutlet]=\"contentRef\">\r\n    </ng-template>\r\n</div>\r\n<!-- \u5E95\u90E8  \u662F\u5426\u6709\u6A21\u677F -->\r\n<div class=\"card-bottom \" style=\"border-top: 1px solid rgba(0, 0, 0, .125);\" [@dropAnimation]=\"active? 'active': 'inactive' \">\r\n    <div style=\"float: right; margin: 9px;\">\r\n        <ng-template [ngTemplateOutlet]=\"bottomRef \">\r\n        </ng-template>\r\n    </div>\r\n</div>",
                        animations: [dropAnimation],
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [":host{width:100%}#cardheader .card-header{cursor:pointer;border-width:1px;background-color:#fff}.panel-item-title{float:left}.card-bottom{background-color:rgba(242,242,242);height:45px}.panel-item-tool{float:right}.panel-item-clear{clear:both}.f-state-disable{pointer-events:none}.customize-flow-form{font-size:12px;color:#fff;margin-left:10px;border-radius:20px;padding:2px 8px;background:#59a1ff}.sysInit-flow-form{font-size:12px;color:#fff;margin-left:10px;border-radius:20px;padding:2px 8px;background:#ff8e59}"]
                    }] }
        ];
        /** @nocollapse */
        WFDimensionPanelItemComponent.ctorParameters = function () {
            return [
                { type: WFDimensionPanelComponent, decorators: [{ type: i0.Optional }] },
                { type: i0.ChangeDetectorRef },
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        WFDimensionPanelItemComponent.propDecorators = {
            editState: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            value: [{ type: i0.Input }],
            tabTitle: [{ type: i0.Input, args: ['title',] }],
            sysInit: [{ type: i0.Input }],
            disable: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.f-state-disable',] }],
            headRef: [{ type: i0.ContentChild, args: ['headTempl',] }],
            bottomRef: [{ type: i0.ContentChild, args: ['bottomRef',] }],
            toolTempl: [{ type: i0.ContentChild, args: ['toolTempl',] }],
            contentRef: [{ type: i0.ContentChild, args: ['contentTempl',] }]
        };
        return WFDimensionPanelItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFDimensionPanelModule = /** @class */ (function () {
        function WFDimensionPanelModule() {
        }
        WFDimensionPanelModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            WFDimensionPanelComponent,
                            WFDimensionPanelItemComponent,
                        ],
                        exports: [
                            WFDimensionPanelComponent,
                            WFDimensionPanelItemComponent
                        ],
                    },] }
        ];
        return WFDimensionPanelModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectObjectComponent = /** @class */ (function () {
        function SelectObjectComponent() {
            this.enableNextStep = true;
            this.detailPage = null;
            // 记录当前BE所有表的code
            this.treeTables = [];
            this.grid_selected = {};
            this.readonlyFields = []; // 不可取消勾选的字段
            // 不可取消勾选的字段
            /**
             * 左侧树信息
             */
            this.treeData = [];
            this.farrisTreeData = [];
            this.treeConfig = {
                idField: 'ID',
                columns: [
                    { field: 'Name', title: 'Name', width: 200 }
                ],
                /**
                 * 叶子节点图标
                 */
                leafIcon: 'f-icon f-icon-folder text-info',
                /**
                 * 节点展开图标
                 */
                expandIcon: 'f-icon f-icon-folder-open text-info',
                /**
                 * 节点折叠图标
                 */
                collapseIcon: 'f-icon f-icon-folder text-info',
                /**
                 * 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
                 */
                expandLevel: 2,
            };
        }
        Object.defineProperty(SelectObjectComponent.prototype, "cmpPageDetail", {
            set: /**
             * @param {?} cmp
             * @return {?}
             */ function (cmp) {
                this.detailPage = cmp;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SelectObjectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.load();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SelectObjectComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.load();
            };
        /**
         * @return {?}
         */
        SelectObjectComponent.prototype.load = /**
         * @return {?}
         */
            function () {
                if (this.data && this.data.be) {
                    /** @type {?} */
                    var mainObject = this.data.be.MainObject;
                    this.treeData = this.getTablesTree(mainObject);
                    this.farrisTreeData = this.getFarrisTreeData(this.treeData);
                }
            };
        /**
         * 组装farris-tree左侧树
         */
        /**
         * 组装farris-tree左侧树
         * @param {?} data
         * @return {?}
         */
        SelectObjectComponent.prototype.getFarrisTreeData = /**
         * 组装farris-tree左侧树
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var newArr = [];
                if (data && data.length) {
                    data.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        /** @type {?} */
                        var childrenArr = [];
                        if (item && item.Children && item.Children.length) {
                            childrenArr = _this.getFarrisTreeData(item.Children);
                        }
                        newArr.push({ data: item, children: childrenArr, expanded: true });
                    }));
                }
                return newArr;
            };
        /**
         * 组装左侧树
         */
        /**
         * 组装左侧树
         * @param {?} mainObject
         * @return {?}
         */
        SelectObjectComponent.prototype.getTablesTree = /**
         * 组装左侧树
         * @param {?} mainObject
         * @return {?}
         */
            function (mainObject) {
                var _this = this;
                var ContainChildObjects = mainObject.ContainChildObjects, ColumnGenerateID = mainObject.ColumnGenerateID, Keys = mainObject.Keys, parentTable = __rest(mainObject, ["ContainChildObjects", "ColumnGenerateID", "Keys"]);
                this.treeTables.push(parentTable.Code);
                // const selectedAll = this.grid_selected[parentTable.Code] ? false : true;
                // this.gridData[parentTable.Code] = this.getGridFields(parentTable.ContainElements, parentTable.Code, selectedAll);
                if (ContainChildObjects && ContainChildObjects.length > 0) {
                    parentTable['Children'] = [];
                    ContainChildObjects.forEach(( /**
                     * @param {?} child
                     * @return {?}
                     */function (child) {
                        /** @type {?} */
                        var childTree = _this.getTablesTree(( /** @type {?} */(child)));
                        parentTable['Children'] = parentTable['Children'].concat(childTree);
                    }));
                }
                // 判断主键
                if (ColumnGenerateID) {
                    this.readonlyFields.push(ColumnGenerateID.ElementID);
                }
                // 判断主从表的关联字段
                if (Keys && Keys.length > 0) {
                    Keys.forEach(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) {
                        _this.readonlyFields.push(key.SourceElement);
                    }));
                }
                return [parentTable];
            };
        /**
         * 选中节点事件
         * @param event 被选中节点
         */
        /**
         * 选中节点事件
         * @param {?} event 被选中节点
         * @return {?}
         */
        SelectObjectComponent.prototype.handleTreeSelection = /**
         * 选中节点事件
         * @param {?} event 被选中节点
         * @return {?}
         */
            function (event) {
                this.data.selectedObj = event.node.data;
            };
        /**
         * @return {?}
         */
        SelectObjectComponent.prototype.nextStep = /**
         * @return {?}
         */
            function () {
                // 设置当前页传递出去数据
                this.data.BeFields = this.data.selectedObj.ContainElements;
                this.detailPage.setPageData(this.data.selectedObj);
                // 下一步
                this.detailPage.nextStep();
            };
        /**
         * @return {?}
         */
        SelectObjectComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.detailPage.cancelWizard();
            };
        /**
         * @param {?} args
         * @return {?}
         */
        SelectObjectComponent.prototype.pagedetailSelected = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
            };
        SelectObjectComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'select-object',
                        template: "<wizard-page-detail #detailpage1 (pagedetailSelected)=\"pagedetailSelected($event)\">\r\n    <ng-template wizardPageContent>\r\n        <div class=\"f-template-wizard-page-content\" style=\"margin-left:2px\">\r\n            <farris-treetable #treetable [columns]=\"treeConfig.columns\" [showBorder]=\"false\" [showHeader]=\"false\" [data]=\"farrisTreeData\" [fit]=\"true\" [idField]=\"treeConfig.idField\" [singleSelect]=\"true\" [showCheckbox]=\"false\" [showIcon]=\"true\" [disabled]=\"false\"\r\n                [checkOnSelect]=\"true\" (nodeSelected)=\"handleTreeSelection($event)\" [leafIcon]=\"treeConfig.leafIcon\" [expandIcon]=\"treeConfig.expandIcon\" [collapseIcon]=\"treeConfig.collapseIcon\">\r\n            </farris-treetable>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template wizardPageFooter>\r\n        <div class=\"f-template-wizard-page-footer\">\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n              \u53D6\u6D88\r\n          </button>\r\n            <button class=\"btn btn-primary\" [disabled]=\"!enableNextStep\" (click)=\"nextStep()\">\r\n              \u4E0B\u4E00\u6B65\r\n          </button>\r\n        </div>\r\n    </ng-template>\r\n</wizard-page-detail>",
                        styles: [":host{display:flex;flex:1}button{margin:10px}"]
                    }] }
        ];
        /** @nocollapse */
        SelectObjectComponent.ctorParameters = function () { return []; };
        SelectObjectComponent.propDecorators = {
            data: [{ type: i0.Input }],
            cmpPageDetail: [{ type: i0.ViewChild, args: [uiWizard.FarrisPageDetailComponent,] }]
        };
        return SelectObjectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { MessagerService } from '@farris/ui-messager';
    var SelectObjElementComponent = /** @class */ (function () {
        function SelectObjElementComponent() {
            this.gridData = {};
            this.gridCols = [
                { field: 'show', title: '显示', width: 40 },
                { field: 'Name', title: '字段名称' },
                { field: 'Code', title: '字段编号', width: 200 },
                { field: 'LabelID', title: '字段标签' },
                { field: 'MDataType', title: '字段类型' }
            ];
            this.grid_selected = {
                selectedAll: {}
            };
            this.readonlyFields = []; // 不可取消勾选的字段
            // 不可取消勾选的字段
            this.selectedAll = {};
            this.selectedTreeKeys = [];
            this.selectedTreeKey = '';
            this.enableNextStep = true;
            this.detailPage = null;
        }
        Object.defineProperty(SelectObjElementComponent.prototype, "cmpPageDetail", {
            set: /**
             * @param {?} cmp
             * @return {?}
             */ function (cmp) {
                this.detailPage = cmp;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SelectObjElementComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.load();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SelectObjElementComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.load();
            };
        /**
         * @return {?}
         */
        SelectObjElementComponent.prototype.load = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var obj = this.detailPage.getPageData('selectobject');
                if (this.data && this.data.selectedObj) {
                    /** @type {?} */
                    var parentTable = ( /** @type {?} */(this.data.selectedObj));
                    this.selectedTreeKey = this.data.selectedObj.Code;
                    this.selectedTreeKeys = [this.selectedTreeKey];
                    this.grid_selected[this.selectedTreeKey] = this.data.selectedBeFields;
                    this.gridData[parentTable.Code] = this.getGridFields(parentTable.ContainElements, parentTable.Code, false);
                }
            };
        /**
         * 获取各表字段，关联字段以树形式展示
         * @param fields
         */
        /**
         * 获取各表字段，关联字段以树形式展示
         * @param {?} fields
         * @param {?} tableCode
         * @param {?} needSelectAll
         * @return {?}
         */
        SelectObjElementComponent.prototype.getGridFields = /**
         * 获取各表字段，关联字段以树形式展示
         * @param {?} fields
         * @param {?} tableCode
         * @param {?} needSelectAll
         * @return {?}
         */
            function (fields, tableCode, needSelectAll) {
                var _this = this;
                /** @type {?} */
                var gridData = [];
                /** @type {?} */
                var fieldIdList = [];
                if (!fields || fields.length === 0) {
                    return [];
                }
                fields.forEach(( /**
                 * @param {?} field
                 * @return {?}
                 */function (field) {
                    var ChildAssociations = field.ChildAssociations, fieldObject = __rest(field, ["ChildAssociations"]);
                    /** @type {?} */
                    var children = [];
                    if (_this.data.assoRefElement) {
                        // 关联表
                        if (ChildAssociations && ChildAssociations.length > 0) {
                            ChildAssociations.forEach(( /**
                             * @param {?} child
                             * @return {?}
                             */function (child) {
                                child.RefElementCollection.forEach(( /**
                                 * @param {?} refEle
                                 * @return {?}
                                 */function (refEle) {
                                    children.push({ data: refEle, children: [], expanded: true, layer: 2 });
                                    fieldIdList.push(refEle.ID);
                                }));
                            }));
                        }
                    }
                    gridData.push({ data: fieldObject, children: children, expanded: true, layer: 1 });
                    fieldIdList.push(fieldObject.ID);
                }));
                //  默认选中所有字段
                if (needSelectAll) {
                    this.grid_selected[tableCode] = fieldIdList;
                    this.grid_selected['selectedAll'][tableCode] = true;
                }
                return gridData;
            };
        /**
         * @param {?} rowData
         * @param {?} rowNode
         * @return {?}
         */
        SelectObjElementComponent.prototype.changeCheckbox = /**
         * @param {?} rowData
         * @param {?} rowNode
         * @return {?}
         */
            function (rowData, rowNode) {
                var _this = this;
                /** @type {?} */
                var ID = rowData.ID;
                /** @type {?} */
                var index = this.grid_selected[this.selectedTreeKey].indexOf(ID);
                if (index >= 0) {
                    this.grid_selected[this.selectedTreeKey].splice(index, 1);
                    this.grid_selected['selectedAll'][this.selectedTreeKey] = false;
                }
                else {
                    // 若为[单选]，则清空已选择字段
                    if (this.data.singleElement) {
                        this.grid_selected[this.selectedTreeKey] = [];
                    }
                    this.grid_selected[this.selectedTreeKey].push(ID);
                }
                // 主表的关联字段
                if (rowNode.children.length > 0) {
                    rowNode.children.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        /** @type {?} */
                        var reIndex = _this.grid_selected[_this.selectedTreeKey].findIndex(( /**
                         * @param {?} id
                         * @return {?}
                         */function (id) { return id === element.data.ID; }));
                        if (index >= 0 && reIndex >= 0) {
                            _this.grid_selected[_this.selectedTreeKey].splice(reIndex, 1);
                        }
                        if (index < 0 && reIndex < 0) {
                            _this.grid_selected[_this.selectedTreeKey].push(element.data.ID);
                        }
                    }));
                }
                // 关联表的字段
                if (rowNode.parent) {
                    /** @type {?} */
                    var parentNode = rowNode.parent;
                    if (!parentNode) {
                        return;
                    }
                    /** @type {?} */
                    var parentIndex = this.grid_selected[this.selectedTreeKey].indexOf(parentNode.data.ID);
                    if (index < 0 && parentIndex < 0) {
                        this.grid_selected[this.selectedTreeKey].push(parentNode.data.ID);
                    }
                }
            };
        /**
         * @return {?}
         */
        SelectObjElementComponent.prototype.clickSelectAllCheckbox = /**
         * @return {?}
         */
            function () {
                this.selectAllChange(this.gridData[this.selectedTreeKey], this.grid_selected['selectedAll'][this.selectedTreeKey]);
            };
        /**
         * 全选
         * @param treeData treeData
         * @param isSelected isSelected
         */
        /**
         * 全选
         * @param {?} treeData treeData
         * @param {?} isSelected isSelected
         * @return {?}
         */
        SelectObjElementComponent.prototype.selectAllChange = /**
         * 全选
         * @param {?} treeData treeData
         * @param {?} isSelected isSelected
         * @return {?}
         */
            function (treeData, isSelected) {
                var _this = this;
                if (treeData.length === 0) {
                    return;
                }
                treeData.forEach(( /**
                 * @param {?} treeNode
                 * @return {?}
                 */function (treeNode) {
                    /** @type {?} */
                    var ID = treeNode.data.ID;
                    if (treeNode.children && treeNode.children.length > 0) {
                        _this.selectAllChange(treeNode.children, isSelected);
                    }
                    /** @type {?} */
                    var index = _this.grid_selected[_this.selectedTreeKey].indexOf(ID);
                    // 全选
                    if (isSelected && index < 0) {
                        _this.grid_selected[_this.selectedTreeKey].push(ID);
                        return;
                    }
                    // 取消全选
                    if (!isSelected && _this.readonlyFields.indexOf(ID) < 0) {
                        _this.grid_selected[_this.selectedTreeKey].splice(index, 1);
                    }
                }));
            };
        /**
         * @return {?}
         */
        SelectObjElementComponent.prototype.prevStep = /**
         * @return {?}
         */
            function () {
                this.detailPage.prevStep();
            };
        /**
         * @return {?}
         */
        SelectObjElementComponent.prototype.finish = /**
         * @return {?}
         */
            function () {
                // 校验
                if (this.grid_selected[this.selectedTreeKey].length === 0) {
                    // this.messagerService.warning('请勾选字段。');
                    alert('请勾选字段。');
                    return;
                }
                // 设置当前页传递出去数据
                this.data.selectedBeFields = [this.grid_selected[this.selectedTreeKey]];
                this.detailPage.setPageData(this.data.selectedBeFields);
                // 下一步
                this.detailPage.finishWizard();
            };
        /**
         * @return {?}
         */
        SelectObjElementComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.detailPage.cancelWizard();
            };
        /**
         * @param {?} args
         * @return {?}
         */
        SelectObjElementComponent.prototype.pagedetailSelected = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
            };
        SelectObjElementComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'select-obj-element',
                        template: "<wizard-page-detail #detailpage2 (pagedetailSelected)=\"pagedetailSelected($event)\">\r\n    <ng-template wizardPageContent>\r\n        <div class=\"f-template-wizard-page-content\" style=\"margin-left:2px\">\r\n            <farris-treetable #treeTable [data]=\"gridData[selectedTreeKey]\" [columns]=\"gridCols\" [idField]=\"'ID'\" [fixedHeader]=\"true\" [width]=\"'100%'\" [height]=\"330\" [showFilterBar]=\"false\" [showIcon]=\"false\" [resizableColumns]=\"true\" [cascadeCheck]=\"true\" [showBorder]=\"false\"\r\n                class=\"f-selectbe-treetable\">\r\n                <ng-template farrisTemplate=\"header\" let-columns>\r\n                    <tr>\r\n                        <ng-container *ngFor=\"let col of columns; let i = index\">\r\n\r\n                            <th *ngIf=\"col.field!=='show'\">\r\n                                <ng-container> {{col.title}} </ng-container>\r\n                            </th>\r\n                            <th *ngIf=\"col.field==='show'\" [width]=\"col.width\">\r\n                                <ng-container>\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <!-- <input class=\"custom-control-input\" id=\"CheckAll\" type=\"checkbox\" [(ngModel)]=\"grid_selected.selectedAll[selectedTreeKey]\" (ngModelChange)=\"clickSelectAllCheckbox()\" />\r\n                                        <label class=\"custom-control-label\" for=\"CheckAll\"></label> -->\r\n                                    </div>\r\n                                </ng-container>\r\n                            </th>\r\n                            <th *ngIf=\"col.field==='toggler'\" [width]=\"col.width\">\r\n                            </th>\r\n                        </ng-container>\r\n\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template farrisTemplate=\"body\" let-rowNode let-rowIndex=\"index\" let-rowData=\"rowData\" let-columns=\"columns\">\r\n                    <tr [selectRow]=\"rowNode\" [rowIndex]=\"rowIndex\" [dblclick]=\"true\" [selectRowDisabled]=\"true\">\r\n                        <ng-container *ngFor=\"let col of columns; let i = index\">\r\n                            <td *ngIf=\"col.field==='show'\" [width]=\"col.width\">\r\n                                <ng-container *ngIf=\"!rowNode.node.tableNode  && readonlyFields.indexOf(rowData.ID)<0\">\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <input type=\"checkbox\" [id]=\"rowData.ID\" class=\"custom-control-input\" [checked]=\"grid_selected[selectedTreeKey] && grid_selected[selectedTreeKey].indexOf(rowData.ID)>=0\" (click)=\"changeCheckbox(rowData,rowNode.node)\">\r\n                                        <label class=\"custom-control-label\" [for]=\"rowData.ID\"></label>\r\n                                    </div>\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"!rowNode.node.tableNode && readonlyFields.indexOf(rowData.ID)>=0\">\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <input type=\"checkbox\" [id]=\"rowData.ID\" class=\"custom-control-input\" checked=\"checked\" disabled>\r\n                                        <label class=\"custom-control-label\" [for]=\"rowData.ID\"></label>\r\n                                    </div>\r\n                                </ng-container>\r\n                            </td>\r\n                            <td *ngIf=\"col.field!=='show'\">\r\n                                <farris-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 1\"></farris-treeTableToggler>\r\n                                <ng-container *ngIf=\"col.field!=='MDataType'\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData[col.field]}}</span>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"col.field ==='MDataType' && rowData.IsUdt\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData.UdtName}}</span>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"col.field ==='MDataType' && !rowData.IsUdt\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData.MDataType}}</span>\r\n                                </ng-container>\r\n                            </td>\r\n                        </ng-container>\r\n                    </tr>\r\n                </ng-template>\r\n\r\n            </farris-treetable>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template wizardPageFooter>\r\n        <div class=\"f-template-wizard-page-footer\">\r\n            <button class=\"btn btn-secondary\" (click)=\"prevStep()\">\u4E0A\u4E00\u6B65</button>\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n            <button class=\"btn btn-primary\" [disabled]=\"!enableNextStep\" (click)=\"finish()\">\u5B8C\u6210</button>\r\n        </div>\r\n    </ng-template>\r\n</wizard-page-detail>",
                        styles: [":host{display:flex;flex:1}button{margin:10px}"]
                    }] }
        ];
        /** @nocollapse */
        SelectObjElementComponent.ctorParameters = function () { return []; };
        SelectObjElementComponent.propDecorators = {
            data: [{ type: i0.Input }],
            changeObj: [{ type: i0.Input }],
            treeTable: [{ type: i0.ViewChild, args: ['treeTable',] }],
            cmpPageDetail: [{ type: i0.ViewChild, args: [uiWizard.FarrisPageDetailComponent,] }]
        };
        return SelectObjElementComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectElementModule = /** @class */ (function () {
        function SelectElementModule() {
        }
        SelectElementModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            uiWizard.WizardModule,
                            uiTreetable.TreeTableModule,
                            // MessagerModule.forRoot(),
                            forms.FormsModule,
                            forms.ReactiveFormsModule
                        ],
                        declarations: [
                            SelectElementComponent,
                            SelectObjectComponent,
                            SelectObjElementComponent
                        ],
                        entryComponents: [
                            SelectElementComponent,
                            SelectObjectComponent,
                            SelectObjElementComponent
                        ]
                    },] }
        ];
        return SelectElementModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WfDimensionDefModule = /** @class */ (function () {
        function WfDimensionDefModule() {
        }
        WfDimensionDefModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            WfDimensionDefComponent,
                            DimensionItemCardComponent,
                            EnumEditComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            uiButton.FarrisButtonModule,
                            uiMessager.MessagerModule.forRoot(),
                            uiDialog.FarrisDialogModule,
                            uiNotify.NotifyModule,
                            metadatartSelector.GSPMetadataRTServiceModule.forRoot(''),
                            metadatartSelector.MetadataRTSelectModule,
                            uiInputGroup.InputGroupModule,
                            WFDimensionPanelModule,
                            uiDatagridEditors.DatagridEditorsModule,
                            uiDatagrid.DatagridModule.forRoot(__spread(uiDatagridEditors.EditorProviders)),
                            uiComboList.ComboListModule,
                            expression.ExpressionModule,
                            SelectElementModule,
                            lookupConfig.LookupConfigModule
                        ],
                        providers: [
                            metadatartSelector.GSPMetadataRTService,
                            WFDimensionDefViewmodel,
                            WFDimensionDefUIState,
                            expression.ExpressionService,
                            cafCommon.HttpService
                        ],
                        entryComponents: [
                            EnumEditComponent
                        ],
                        exports: [WfDimensionDefComponent, DimensionItemCardComponent]
                    },] }
        ];
        return WfDimensionDefModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.WfDimensionDefService = WfDimensionDefService;
    exports.WfDimensionDefComponent = WfDimensionDefComponent;
    exports.WfDimensionDefModule = WfDimensionDefModule;
    exports.ɵc = DimensionItemCardComponent;
    exports.ɵd = EnumEditComponent;
    exports.ɵg = WFDimensionPanelItemComponent;
    exports.ɵe = WFDimensionPanelModule;
    exports.ɵf = WFDimensionPanelComponent;
    exports.ɵh = dropAnimation;
    exports.ɵj = SelectElementComponent;
    exports.ɵi = SelectElementModule;
    exports.ɵl = SelectObjElementComponent;
    exports.ɵk = SelectObjectComponent;
    exports.ɵb = WFDimensionDefUIState;
    exports.ɵa = WFDimensionDefViewmodel;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-wf-wf-dimension-def.umd.js.map