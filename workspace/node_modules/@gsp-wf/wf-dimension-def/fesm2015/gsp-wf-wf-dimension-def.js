import { forkJoin } from 'rxjs/observable/forkJoin';
import { switchMap, catchError } from 'rxjs/operators';
import { FarrisButtonModule } from '@farris/ui-button';
import { InputGroupModule } from '@farris/ui-input-group';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ComboListModule } from '@farris/ui-combo-list';
import { MetadataRTSelectModule, GSPMetadataRTServiceModule, GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { of, Subject } from 'rxjs';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { EditorTypes, DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { DatagridModule } from '@farris/ui-datagrid';
import { GSPElementObjectType } from '@gsp-bef/gsp-cm-metadata';
import { BsModalService } from '@farris/ui-modal';
import { HttpService } from '@ecp-caf/caf-common';
import { ExpressionService, InjectedType, ExpressionModule } from '@gsp-svc/expression';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { __rest } from 'tslib';
import { Injectable, Component, ViewChild, HostBinding, ComponentFactoryResolver, Injector, EventEmitter, Input, NgModule, ContentChild, Optional, ViewEncapsulation, ChangeDetectorRef, Renderer2, ElementRef, Output, defineInjectable } from '@angular/core';
import { FarrisPageDetailComponent, WizardModule } from '@farris/ui-wizard';
import { TreeTableModule } from '@farris/ui-treetable';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { LookupConfigService, LookupConfigModule } from '@farris/lookup-config';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfDimensionDefService {
    constructor() { }
}
WfDimensionDefService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WfDimensionDefService.ctorParameters = () => [];
/** @nocollapse */ WfDimensionDefService.ngInjectableDef = defineInjectable({ factory: function WfDimensionDefService_Factory() { return new WfDimensionDefService(); }, token: WfDimensionDefService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DimensionInputType = {
    Help: 0,
    Enum: 1,
};
DimensionInputType[DimensionInputType.Help] = 'Help';
DimensionInputType[DimensionInputType.Enum] = 'Enum';
/** @enum {number} */
const DimensionType = {
    BusinessField: 0,
    EnvironmentalVariable: 1,
};
DimensionType[DimensionType.BusinessField] = 'BusinessField';
DimensionType[DimensionType.EnvironmentalVariable] = 'EnvironmentalVariable';
/** @type {?} */
const WFDimensionTypes = [
    { index: 0, text: '模型字段', value: DimensionType.BusinessField },
];
/** @type {?} */
const WFDimensionInputTypes = [
    { index: 0, text: '帮助', value: DimensionInputType.Help },
    { index: 1, text: '枚举', value: DimensionInputType.Enum }
];
class ItemEditState {
    constructor() {
        this.canEdit = false;
    }
}
class EnumItem {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Guid {
    /**
     * @return {?}
     */
    static newGuid() {
        /** @type {?} */
        const initString = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        /** @type {?} */
        const result = initString.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            return this.convert(c);
        }));
        return result;
    }
    /**
     * @private
     * @param {?} c
     * @return {?}
     */
    static convert(c) {
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        const r = Math.random() * 16 | 0;
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        const v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimenDefEntityUtil {
    constructor() {
    }
    /**
     * @param {?} flowFormId
     * @return {?}
     */
    static newDimendefEntity(flowFormId) {
        /** @type {?} */
        const newDimendef = {
            id: '',
            code: '',
            entryFormID: '',
            dimensionType: DimensionType.BusinessField,
            dimensionCode: '',
            dimensionName: '',
            inputType: DimensionInputType.Help,
            enumList: null,
            smartHelp: '',
            multiSelect: true,
            helpFilter: '',
            isUse: true,
            devLayer: '',
            contentInfo: null,
            sortOrder: 0,
            sysInit: 0,
            remarks: ''
        };
        newDimendef.id = Guid.newGuid();
        newDimendef.entryFormID = flowFormId;
        return newDimendef;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFDimensionDefViewmodel {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.url = '/api/runtime/wf/v1.0/dimensionDef';
    }
    /**
     * @param {?} flowFormId
     * @return {?}
     */
    loadDimensionDefs(flowFormId) {
        if (flowFormId) {
            /** @type {?} */
            const url = this.url + `?entryFormID=${flowFormId}`;
            return this.http.get(url);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeDimensionDef(id) {
        if (id) {
            /** @type {?} */
            const url = this.url + `/${id}`;
            return this.http.delete(url, {});
        }
    }
    /**
     * @param {?} dimensionDef
     * @return {?}
     */
    addDimensionDef(dimensionDef) {
        return this.http.post(this.url, dimensionDef);
    }
    /**
     * @param {?} dimensionDef
     * @return {?}
     */
    updateDimensionDef(dimensionDef) {
        return this.http.patch(this.url, dimensionDef);
    }
    /**
     * @param {?} flowFormId
     * @return {?}
     */
    getDimensionDefSet(flowFormId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/dimensionDef/customSetting?entryFormId=${flowFormId}`;
        return this.http.get(url);
    }
}
WFDimensionDefViewmodel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFDimensionDefViewmodel.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFDimensionDefUIState {
}
WFDimensionDefUIState.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfDimensionDefComponent {
    /**
     * @param {?} messageService
     * @param {?} viewmodel
     * @param {?} notifyService
     * @param {?} uistate
     */
    constructor(messageService, viewmodel, notifyService, uistate) {
        this.messageService = messageService;
        this.viewmodel = viewmodel;
        this.notifyService = notifyService;
        this.uistate = uistate;
        this.entry = 'flowForm';
        // tslint:disable-next-line: variable-name
        this._editable = false;
        this.data = new Array();
        this.editData = new Array();
    }
    /**
     * @return {?}
     */
    get flowFormId() {
        return this._flowFormId;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set flowFormId(id) {
        this._flowFormId = id;
        this.load();
        this.getDimensionDefSet(this._flowFormId);
    }
    /**
     * @param {?} s
     * @return {?}
     */
    set schema(s) {
        this.uistate.schema = s;
    }
    /**
     * @return {?}
     */
    get schema() {
        return this.uistate.schema;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set beMetaData(m) {
        this.uistate.beMetaData = m;
    }
    /**
     * @return {?}
     */
    get beMetaData() {
        return this.uistate.beMetaData;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    set editable(e) {
        this._editable = e;
        for (const d of this.editData) {
            d.canEdit = this._editable;
        }
    }
    /**
     * @return {?}
     */
    get editable() {
        return this._editable;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    load() {
        if (this.flowFormId) {
            this.viewmodel.loadDimensionDefs(this.flowFormId).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.data = re;
                this.editData = [];
                if (this.data && this.data.length > 0) {
                    this.data.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        this.addItem(item, this.editable);
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} flowFormId
     * @return {?}
     */
    getDimensionDefSet(flowFormId) {
        if (flowFormId) {
            this.viewmodel.getDimensionDefSet(flowFormId).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.dimensionDefSet = re;
            }));
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    hasItem(index) {
        return this.editData.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.index === index));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getItem(index) {
        return this.hasItem(index) ? this.editData.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.index === index)).itemData : null;
    }
    /**
     * @param {?} index
     * @param {?} itemData
     * @return {?}
     */
    setItem(index, itemData) {
        this.editData.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.index === index)).itemData = itemData;
    }
    /**
     * @param {?} itemData
     * @param {?} canEdit
     * @return {?}
     */
    addItem(itemData, canEdit) {
        /** @type {?} */
        const editDataItem = new ItemEditState();
        editDataItem.canEdit = canEdit;
        editDataItem.index = this.editData.length;
        editDataItem.itemData = Object.assign({}, itemData);
        editDataItem.id = itemData.id;
        this.editData.push(editDataItem);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getTitle(index) {
        /** @type {?} */
        let suffix = '';
        switch (index) {
            case 0:
                suffix = '一';
                break;
            case 1:
                suffix = '二';
                break;
        }
        return `维度${suffix}`;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getState(index) {
        if (!this.hasItem(index)) {
            return false;
        }
        /** @type {?} */
        const sysInit = this.editData.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.index === index)).itemData.sysInit;
        return sysInit === 1 ? true : false;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    isEditState(index) {
        if (!this.hasItem(index)) {
            return false;
        }
        return this.editData.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.index === index)).canEdit;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    edit(item) {
        this.editData.find((/**
         * @param {?} d
         * @return {?}
         */
        d => d.id === item.id)).canEdit = true;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    remove(item) {
        if (this.dimensionDefSet && (item.id === this.dimensionDefSet.dimension1 || item.id === this.dimensionDefSet.dimension2)) {
            this.messageService.info('当前维度定义已在流程分配维度配置中启用');
            return;
        }
        if (this.entry === 'flowForm') {
            this.removeDimensionDef(item);
            // const i = this.data.findIndex(d => d.id === item.id);
            // if (i > -1) {
            //   this.data.splice(i, 1);
            // }
        }
        else {
            this.messageService.question(`确认删除'${this.getTitle(item.index)}'吗？`, (/**
             * @return {?}
             */
            () => {
                if (this.data.findIndex((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d.id === item.id)) === -1) {
                    this.removeDimensionDef(item);
                    this.notifyService.success('删除成功');
                    return;
                }
                this.viewmodel.removeDimensionDef(item.id).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                re => {
                    this.removeDimensionDef(item);
                    /** @type {?} */
                    const i = this.data.findIndex((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => d.id === item.id));
                    if (i > -1) {
                        this.data.splice(i, 1);
                    }
                    this.notifyService.success('删除成功');
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    this.notifyService.error('删除失败，请联系管理员查看原因！');
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    getDimensionDefs() {
        return this.editData.map((/**
         * @param {?} d
         * @return {?}
         */
        d => d.itemData));
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    removeDimensionDef(item) {
        /** @type {?} */
        const index = this.editData.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => d.id === item.id));
        if (index > -1) {
            this.editData.splice(index, 1);
        }
        if (index < this.editData.length) {
            for (let i = 0; i < this.editData.length; i++) {
                this.editData[i].index = i;
            }
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    save(item) {
        /** @type {?} */
        const v = this.validate(item.itemData);
        if (!v.result) {
            this.messageService.info(v.message);
            return;
        }
        if (this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => d.id === item.id)) === -1) {
            this.viewmodel.addDimensionDef(item.itemData).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.endEdit(item);
                this.data.push(Object.assign({}, item.itemData));
                this.notifyService.success('保存成功');
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.notifyService.error('保存失败，请联系管理员查看原因！');
            }));
        }
        else {
            this.viewmodel.updateDimensionDef(item.itemData).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.endEdit(item);
                /** @type {?} */
                const data = this.data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d.id === item.id));
                Object.assign(data, item.itemData);
                this.notifyService.success('保存成功');
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.notifyService.error('保存失败，请联系管理员查看原因！');
            }));
        }
    }
    /**
     * @return {?}
     */
    saveAll() {
        /** @type {?} */
        const deleteDefs = this.data.filter((/**
         * @param {?} d
         * @return {?}
         */
        d => this.editData.findIndex((/**
         * @param {?} e
         * @return {?}
         */
        e => e.id === d.id)) === -1));
        /** @type {?} */
        const addDefs = this.editData.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => d.id === e.id)) === -1)).map((/**
         * @param {?} e
         * @return {?}
         */
        e => e.itemData));
        /** @type {?} */
        const updateDefs = this.editData.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => d.id === e.id)) > -1))
            .map((/**
         * @param {?} e
         * @return {?}
         */
        e => e.itemData))
            .filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d.sysInit === 0));
        return forkJoin(deleteDefs.map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            return this.viewmodel.removeDimensionDef(d.id);
        })).concat(updateDefs.map((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            return this.viewmodel.updateDimensionDef(u);
        })).concat(addDefs.map((/**
         * @param {?} a
         * @return {?}
         */
        a => {
            return this.viewmodel.addDimensionDef(a);
        }))))).pipe(switchMap((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            this.data = this.editData.map((/**
             * @param {?} e
             * @return {?}
             */
            e => e.itemData));
            // this.editData.map(e => e.canEdit = false);
            return of(true);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
            return of(false);
        })));
        //   .subscribe(re => {
        //   this.data = this.editData.map(e => e.itemData);
        //   this.editData.map(e => e.canEdit = false);
        // },
        // err => {
        //   this.notifyService.error('保存维度定义失败，请联系系统管理员查看原因！');
        // });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    cancel(item) {
        this.endEdit(item);
        if (this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => d.id === item.id)) === -1) {
            this.removeDimensionDef(item);
            return;
        }
        else {
            Object.assign(this.editData.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d.id === item.id)).itemData, this.data.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d.id === item.id)));
        }
    }
    /**
     * @return {?}
     */
    addHandler() {
        if (this.entry === 'flowForm' && !this.editable) {
            return;
        }
        /** @type {?} */
        const info = DimenDefEntityUtil.newDimendefEntity(this.flowFormId);
        this.addItem(info, true);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    isOtherItemEditting(index) {
        /** @type {?} */
        let isOtherItemEditting = false;
        this.editData.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item.canEdit === true && item.index !== index) {
                isOtherItemEditting = true;
                this.messageService.info(`请先保存对于'${this.getTitle(item.index)}'的修改。`);
            }
        }));
        return isOtherItemEditting;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    endEdit(item) {
        for (const d of this.editData) {
            if (d.id === item.id) {
                d.canEdit = false;
            }
        }
    }
    /**
     * @private
     * @param {?} d
     * @return {?}
     */
    validate(d) {
        if (!d.code) {
            return { result: false, message: '维度定义不允许编号为空，请修改！' };
        }
        else if (!d.dimensionName) {
            return { result: false, message: '维度定义不允许维度名称为空，请修改！' };
        }
        else if (!d.dimensionCode) {
            return { result: false, message: '维度定义不允许分配维度为空，请修改！' };
        }
        else if (d.inputType === DimensionInputType.Help && !d.smartHelp) {
            return { result: false, message: '维度定义数据类型为帮助，但帮助值为空，请修改！' };
        }
        else if (d.inputType === DimensionInputType.Enum && !d.enumList) {
            return { result: false, message: '维度定义数据类型为枚举，但枚举值为空，请修改！' };
        }
        return { result: true, message: '' };
    }
}
WfDimensionDefComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-dimension-def',
                template: "<wf-dimension-panel [model]=\"['b']\" [width]=\"'700px'\" [defaultExpand]=\"true\">\r\n    <div *ngFor=\"let item of editData; index as index;\"\r\n        style=\"width: 100%;border: 1px solid rgba(0, 0, 0, .125);margin-bottom: 25px;\">\r\n        <wf-dimension-panel-item [title]=\"getTitle(index)\" [sysInit]=\"getState(index)\" [value]=\"index\" [editState]=\"entry==='billCategory'?isEditState(index):false\">\r\n            <ng-template #contentTempl>\r\n                <wf-dimension-item-card [data]=\"getItem(index)\" [canCardEdit]=\"isEditState(index)\" [sysInit]=\"getState(index)\">\r\n                </wf-dimension-item-card>\r\n            </ng-template>\r\n            <ng-template #toolTempl>\r\n                <farris-button *ngIf=\"entry==='billCategory'\" [type]=\"'link'\" (click)=\"edit(item)\"><span class=\"f-icon text-info k-i-edit\"></span>\u4FEE\u6539\r\n                </farris-button>\r\n                <farris-button *ngIf=\"editable && !getState(index)\" [type]=\"'link'\" (click)=\"remove(item)\"><span\r\n                        class=\"f-icon text-info k-i-delete\"></span> \u5220\u9664\r\n                </farris-button>\r\n            </ng-template>\r\n            <ng-template #bottomRef>\r\n                <farris-button (click)=\"save(item)\">\u4FDD\u5B58</farris-button>\r\n                <farris-button style=\"margin-left:10px\" [type]=\"'secondary'\" (click)=\"cancel(item)\">\u53D6\u6D88</farris-button>\r\n            </ng-template>\r\n        </wf-dimension-panel-item>\r\n    </div>\r\n</wf-dimension-panel>\r\n<div *ngIf=\"hasItem(1)\" class=\"panel-ony-two\">\r\n    <div style=\"width: 250px;margin:0 auto\">\r\n        <p style=\"color:rgba(217,217,217)\">Tips:\u76EE\u524D\u4EC5\u652F\u6301\u6DFB\u52A0\u4E24\u4E2A\u7EF4\u5EA6</p>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"!hasItem(1)\" class=\"panel-add\">\r\n    <div style=\"width: 100px;margin:0 auto\">\r\n        <farris-button style=\"margin:25px\" [type]=\"'link'\" [disabled]=\"entry==='flowForm'&&!editable\" (click)=\"addHandler()\">\r\n            <span *ngIf=\"!(entry==='flowForm'&&!editable)\" class=\"f-icon text-info k-i-plus\"></span>\u6DFB\u52A0\u7EF4\u5EA6</farris-button>\r\n    </div>\r\n</div>",
                styles: [".panel-add{margin:25px;padding:10px;border:1px dashed rgba(0,0,0,.125)}.panel-ony-two{margin:20px}"]
            }] }
];
/** @nocollapse */
WfDimensionDefComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: WFDimensionDefViewmodel },
    { type: NotifyService },
    { type: WFDimensionDefUIState }
];
WfDimensionDefComponent.propDecorators = {
    flowFormId: [{ type: Input }],
    schema: [{ type: Input }],
    beMetaData: [{ type: Input }],
    entry: [{ type: Input }],
    editable: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectElementComponent {
    constructor() {
        /**
         * 关闭窗口事件
         */
        this.closeModal = new EventEmitter();
        /**
         * 确认选择字段
         */
        this.confirm = new EventEmitter();
        this.progressData = {
            activeIndex: 0,
            stepMessages: [
                {
                    id: 'selectobject',
                    title: '选择节点',
                    icon: ''
                },
                {
                    id: 'selectelement',
                    title: '选择字段',
                    icon: ''
                }
            ]
        };
        this.changeObj = true;
        /**
         * 字段选择信息
         */
        this.selectEleInfo = {
            be: null,
            // be实体
            selectedObj: null,
            // be节点
            BeFields: [],
            // Be字段列表
            selectedBeFields: [],
            // Be字段ID列表
            singleElement: false,
            // 是否单选
            assoRefElement: false // 是否包含关联带出字段
        };
        this.result = {
            be: null,
            // be实体
            selectedObj: null,
            // be节点
            selectedBeFields: [],
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 页面状态变化时触发事件 {state:'', fromPageId:'', toPageId:''}
     * 其中state分别对应0：Finish:1：Cancel:2：Prev:3：Next:4：StepChange
     * @param {?} value
     * @return {?}
     */
    stateChange(value) {
        switch (value.state) {
            case 0:
                // 返回选择结果
                this.result.be = this.selectEleInfo.be;
                this.result.selectedObj = this.selectEleInfo.selectedObj;
                this.result.selectedBeFields = this.selectEleInfo.BeFields.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    /** @type {?} */
                    const ele = (/** @type {?} */ (item));
                    // 此处使用==判断值相等，若为===，则无法找到id相同的字段
                    // tslint:disable-next-line:triple-equals
                    return this.selectEleInfo.selectedBeFields.findIndex((/**
                     * @param {?} fieldId
                     * @return {?}
                     */
                    fieldId => fieldId == ele.ID)) >= 0;
                }));
                this.confirm.next(this.result);
                this.close();
                break;
            case 1:
                this.close();
                break;
            case 3:
                this.changeObj = !this.changeObj;
                break;
        }
    }
    /**
     * 关闭弹窗
     * @return {?}
     */
    close() {
        this.closeModal.next();
    }
}
SelectElementComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-element',
                template: "<farris-wizard style=\"display:flex;flex:1\" [progressData]=\"progressData\" [stepClickable]=\"false\" [fill]=\"true\" [stepDirection]=\"'vertical'\" [stepPosition]=\"'PageLeft'\" (stateChange)=\"stateChange($event)\">\r\n    <wizard-page [pageId]=\"progressData.stepMessages[0].id\">\r\n        <select-object [data]=\"selectEleInfo\"></select-object>\r\n    </wizard-page>\r\n    <wizard-page [pageId]=\"progressData.stepMessages[1].id\">\r\n        <select-obj-element [data]=\"selectEleInfo\" [changeObj]=\"changeObj\"></select-obj-element>\r\n    </wizard-page>\r\n</farris-wizard>",
                styles: [":host{display:flex;position:absolute;top:0;bottom:0;left:0;right:0}"]
            }] }
];
/** @nocollapse */
SelectElementComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumEditComponent {
    /**
     * @param {?} messageService
     * @param {?} uistate
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     */
    constructor(messageService, uistate, modalService, resolver, injector) {
        this.messageService = messageService;
        this.uistate = uistate;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { field: 'key', width: 100, title: '键', editor: { type: EditorTypes.TEXTBOX, options: {} } },
            { field: 'value', width: 100, title: '值', editor: { type: EditorTypes.TEXTBOX, options: {} } }
        ];
        this.confirm = new Subject();
        this.closeModalEmitter = new Subject();
        /**
         * 显示值
         */
        this.editData = new Array();
        this.maxNum = 0;
    }
    /**
     * 实际值
     * @return {?}
     */
    get enumValues() {
        /** @type {?} */
        const arr = [];
        if (this.editData && this.editData.length >= 0) {
            this.editData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const enumItem = new EnumItem();
                enumItem.key = item.key;
                enumItem.value = item.value;
                arr.push(enumItem);
            }));
        }
        return arr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    load(enumValues) {
        this.editData = [...this.createData(enumValues)];
    }
    /**
     * 确认
     * @return {?}
     */
    onConfirm() {
        this.closeCell();
        if (this.checkBeforeSave()) {
            this.confirm.next(this.enumValues);
            this.closeModalEmitter.next();
        }
    }
    /**
     * 取消
     * @return {?}
     */
    cancel() {
        this.closeModalEmitter.next();
    }
    /**
     * 保存前检查
     * @return {?}
     */
    checkBeforeSave() {
        // ① 空，则通过；
        if (!(this.enumValues) || this.enumValues.length === 0) {
            this.messageService.warning('请添加枚举值。');
            return false;
        }
        // ② 非空，则校验每个的键值是否为空；
        for (const item of this.enumValues) {
            if (!item.key || !item.value) {
                this.messageService.warning('枚举的[键][值]均不允许为空。');
                return false;
            }
        }
        // ③ 多于一个，索引不允许重复；
        if (this.enumValues.length > 1) {
            for (let i = 0; i < this.enumValues.length; i++) {
                /** @type {?} */
                const code1 = this.enumValues[i].value;
                /** @type {?} */
                const name1 = this.enumValues[i].key;
                for (let j = i + 1; j < this.enumValues.length; j++) {
                    /** @type {?} */
                    const code2 = this.enumValues[j].value;
                    /** @type {?} */
                    const name2 = this.enumValues[j].key;
                    if (code1 === code2) {
                        this.messageService.warning(`枚举的[编号]不允许重复，重复编号为[${code1}]。`);
                        return false;
                    }
                    if (name1 === name2) {
                        this.messageService.warning(`枚举的[名称]不允许重复，重复名称为[${name1}]。`);
                        return false;
                    }
                }
            }
        }
        return true;
    }
    /**
     * 取消编辑
     * @return {?}
     */
    closeCell() {
        this.dg.endCellEdit();
    }
    /**
     * 引入
     * @return {?}
     */
    import() {
        if (!this.uistate.beMetaData) {
            this.messageService.error('未获取到BE元数据，请联系管理员查看原因！');
            return;
        }
        /** @type {?} */
        const model = this.uistate.beMetaData.content;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectElementComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.selectEleInfo.be = model;
        compRef.instance.selectEleInfo.singleElement = true;
        compRef.instance.selectEleInfo.assoRefElement = false;
        compRef.instance.confirm.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            const selectedElement = (/** @type {?} */ (data.selectedBeFields[0]));
            if (selectedElement.ObjectType === GSPElementObjectType.Enum) {
                this.editData = new Array();
                /** @type {?} */
                let k = 0;
                for (const enumValue of selectedElement.ContainEnumValues) {
                    this.editData.push({
                        id: k,
                        key: enumValue.Value,
                        value: enumValue.Name,
                    });
                    k++;
                }
                this.maxNum = k;
            }
            else {
                this.messageService.info('选中字段并非枚举字段，请了解！');
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: '枚举字段选择',
            width: 1000,
            height: 550,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            dialog.close();
        }));
    }
    /**
     * 新增
     * @return {?}
     */
    add() {
        this.closeCell();
        /** @type {?} */
        const newId = this.maxNum;
        this.editData = this.editData.concat([{
                id: newId
            }]);
        this.maxNum++;
    }
    /**
     * 删除
     * @return {?}
     */
    remove() {
        this.closeCell();
        if (this.dg.selectedRow) {
            /** @type {?} */
            const id = this.dg.selectedRow.id;
            this.dg.selectPrevRow();
            this.editData = this.editData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id !== id));
        }
    }
    /**
     * @param {?} enumValues
     * @return {?}
     */
    createData(enumValues) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        let k = 0;
        for (const enumValue of enumValues) {
            arr.push({
                id: k,
                key: enumValue.key,
                value: enumValue.value,
            });
            k++;
        }
        this.maxNum = k;
        return arr;
    }
}
EnumEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-enum-edit',
                template: "<ng-template #buttons>\r\n    <button class=\"btn btn-primary\" (click)=\"onConfirm()\">\u786E\u5B9A</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<div class=\"f-page\">\r\n    <div class=\"f-page-header\">\r\n        <nav class=\"f-page-header-base\">\r\n            <div class=\"f-title\">\r\n                <span class=\"f-title-icon f-text-orna-bill\">\r\n                    <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n                </span>\r\n                <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n            </div>\r\n            <div class=\"btn-toolbar btn-group-lg\">\r\n                <button class=\"btn btn-primary mr-2\" (click)=\"import()\">\u5F15\u5165</button>\r\n                <button class=\"btn btn-secondary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n                <button class=\"btn btn-secondary\" (click)=\"remove()\">\u5220\u9664</button>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n    <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n        <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n            <farris-datagrid [data]=\"editData\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\" \r\n                [editable]=\"true\" [editMode]=\"'cell'\" [idField]=\"'id'\"\r\n                [showCheckbox]=\"false\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" \r\n                [striped]=\"true\" [virtualized]=\"true\" [pagination]=\"false\">\r\n            </farris-datagrid>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [":host{position:absolute;top:0;bottom:0;right:0;left:0}"]
            }] }
];
/** @nocollapse */
EnumEditComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: WFDimensionDefUIState },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
EnumEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    dg: [{ type: ViewChild, args: ['dg',] }],
    btnRef: [{ type: ViewChild, args: ['buttons',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionItemCardComponent {
    /**
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     * @param {?} messageService
     * @param {?} uistate
     * @param {?} exprService
     * @param {?} configService
     */
    constructor(modalService, resolver, injector, messageService, uistate, exprService, configService) {
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.messageService = messageService;
        this.uistate = uistate;
        this.exprService = exprService;
        this.configService = configService;
        this.sysInit = false;
        this.canEdit = false;
        /**
         * 维度种类
         */
        this.dimensionTypes = WFDimensionTypes;
        this.inputTypes = WFDimensionInputTypes;
        this.selectedBEMetadata = new EventEmitter();
        this.selectedHelpMetadata = new EventEmitter();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.enumListText = (/**
         * @return {?}
         */
        () => {
            if (!this.getIsEnumInput()) {
                return '';
            }
            /** @type {?} */
            let display = '';
            if (this.data.enumList) {
                /** @type {?} */
                const enumList = JSON.parse(this.data.enumList);
                if (enumList.length > 0) {
                    enumList.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        display = display.concat(`${item.key}:${item.value}; `);
                    }));
                }
            }
            return display;
        });
        this.configService.getLookupData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            console.log(data);
            this.data.smartHelp = data;
        }));
    }
    /**
     * @return {?}
     */
    get dimensionItemCode() {
        return this.data ? this.data.code : '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dimensionItemCode(value) {
        this.data.code = value;
    }
    /**
     * @return {?}
     */
    get dimensionItemName() {
        return this.data ? this.data.dimensionName : '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dimensionItemName(value) {
        this.data.dimensionName = value;
    }
    /**
     * @return {?}
     */
    get dimensionCode() {
        return this.data ? this.data.dimensionCode : '';
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set dimensionCode(v) {
        this.data.dimensionCode = v;
    }
    /**
     * @return {?}
     */
    get inputType() {
        return this.data ? this.data.inputType : null;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set inputType(v) {
        this.data.inputType = v;
    }
    /**
     * @return {?}
     */
    get dimensionType() {
        return this.data ? this.data.dimensionType : null;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set dimensionType(v) {
        this.data.dimensionType = v;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.canEdit = this.canCardEdit;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.canCardEdit) {
            this.canEdit = this.canCardEdit;
        }
    }
    /**
     * 维度类型
     * @param {?} data
     * @return {?}
     */
    selectDimensionType(data) {
    }
    /**
     * 维度选择1-be字段
     * @return {?}
     */
    selectBEMeta() {
        if (this.uistate.schema) {
            this.exprService.clearInjectedEntity();
            this.exprService.addSchema('Schema', this.uistate.schema);
            if (this.uistate.schema.entityTypes && this.uistate.schema.entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schema.entityTypes[0];
                this.exprService.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        // if (this.dimensionCode) {                                 // 编辑器加载初始值
        //   try {
        this.exprService.addExpressionText(this.dimensionCode);
        // } catch (error) {
        //   console.log('parse expression error:' + this.dimensionCode);
        // }
        // }
        this.exprService.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d) {
                this.dimensionCode = d;
            }
        }));
    }
    /**
     * 输入类型
     * @param {?} data
     * @return {?}
     */
    selectInputType(data) {
        this.data.inputType = data.data.value;
    }
    /**
     * 是否枚举输入
     * @return {?}
     */
    getIsEnumInput() {
        return this.data && this.data.inputType === DimensionInputType.Enum;
    }
    /**
     * 是否帮助输入
     * @return {?}
     */
    getIsSmartHelpInput() {
        return this.data && this.data.inputType === DimensionInputType.Help;
    }
    /**
     * 枚举显示值
     * @return {?}
     */
    getEnumInputDisplay() {
        // if (!this.getIsEnumInput()) {
        //   return '';
        // }
        // const enumInputInfo = this.data.inputInfo as EnumInputInfo;
        // let display = '';
        // if (!enumInputInfo || !enumInputInfo.enumItems) {
        //   return display;
        // }
        // enumInputInfo.enumItems.forEach(item => {
        //   display = display.concat(`${item.key}:${item.value}; `);
        // });
        // return display;
    }
    /**
     * 帮助名称
     * @return {?}
     */
    get helperName() {
        if (!this.getIsSmartHelpInput()) {
            return '';
        }
        return this.data.smartHelp;
    }
    /**
     * 帮助选择
     * @return {?}
     */
    selectHelpMeta() {
        this.lookupConfig = this.configService.showConfig({
            configId: this.data.smartHelp
        });
        // const compFactory =
        //   this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        // const compRef = compFactory.create(this.injector);
        // compRef.instance.typeList = 'HelpMetadata';
        // compRef.instance.selectedMetadata
        //   .subscribe(($event: Metadata4RefDto) => {
        //     const meta: MetadataDto = $event.metadata;
        //     const help = JSON.parse(meta.content);
        //     this.data.smartHelp = help.id;
        //   });
        // const modalConfig = {
        //   title: '帮助选择',
        //   width: 930,
        //   height: 573,
        //   showButtons: false
        // };
        // const dialog = this.modalService.show(compRef, modalConfig);
        // compRef.instance.closeModalEmitter.subscribe($event => dialog.close());
    }
    /**
     * @return {?}
     */
    editEnumValues() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(EnumEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: '枚举设置',
            width: 650,
            height: 450,
            showButtons: true,
            buttons: compRef.instance.btnRef,
        };
        if (this.data.enumList) {
            compRef.instance.load(JSON.parse(this.data.enumList));
        }
        compRef.instance.confirm.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            this.data.enumList = JSON.stringify(re) ? JSON.stringify(re) : null;
        }));
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @return {?}
         */
        () => {
            dialog.close();
        }));
    }
}
DimensionItemCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-dimension-item-card',
                template: "<div class=\"farris-form farris-form-controls-inline mt-3\">\r\n    <form class=\"f-section-formgroup\">\r\n        <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12 row\">\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u7EF4\u5EA6\u7F16\u53F7</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group [(ngModel)]=\"dimensionItemCode\" name=\"code\" \r\n                            [disabled]=\"!canEdit\" [readonly]=\"sysInit\" [enableClear]=\"false\"></input-group>\r\n                            <!-- <input type=\"text\" class=\"form-control\" [(ngModel)]=\"dimensionItemCode\" name=\"code\"\r\n                                [disabled]=\"!canEdit\" [readOnly]=\"canEdit && sysInit\"> -->\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u7EF4\u5EA6\u7C7B\u578B</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list [ngModel]=\"dimensionType\" [idField]=\"'value'\" [textField]=\"'text'\" \r\n                                [disabled]=\"!canEdit\" [enableClear]=\"false\" [readonly]=\"sysInit\"\r\n                                [data]=\"dimensionTypes\" name=\"dimensionType\" (selectChange)=\"selectDimensionType($event)\"></farris-combo-list>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u5206\u914D\u7EF4\u5EA6</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\" \r\n                                [showButtonWhenDisabled]=\"false\" [disabled]=\"!canEdit\" [readonly]=\"sysInit\"\r\n                                [ngModel]=\"dimensionCode\" name=\"dimensionCode\"\r\n                                [editable]=\"false\" (clickHandle)=\"selectBEMeta()\" [groupText]=\"groupIcon\"></input-group>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u7EF4\u5EA6\u540D\u79F0</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group [(ngModel)]=\"dimensionItemName\" name=\"name\" \r\n                            [disabled]=\"!canEdit\" [readonly]=\"sysInit\" [enableClear]=\"false\"></input-group>\r\n                            <!-- <input type=\"text\" class=\"form-control\" [(ngModel)]=\"dimensionItemName\" name=\"name\" \r\n                            [disabled]=\"!canEdit\" [readOnly]=\"canEdit && sysInit\"> -->\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u6570\u636E\u7C7B\u578B</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list [ngModel]=\"inputType\" [idField]=\"'value'\" [textField]=\"'text'\" [disabled]=\"!canEdit\" \r\n                                [data]=\"inputTypes\" [enableClear]=\"false\" [readonly]=\"sysInit\"\r\n                                (selectChange)=\"selectInputType($event)\" name=\"inputType\"></farris-combo-list>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"getIsEnumInput()\" class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u679A\u4E3E\u5217\u8868</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                                [showButtonWhenDisabled]=\"false\" [disabled]=\"!canEdit\" [value]=\"enumListText()\" [editable]=\"false\"\r\n                                (clickHandle)=\"editEnumValues()\" [groupText]=\"groupIcon\" [readonly]=\"sysInit\"></input-group>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"getIsSmartHelpInput()\" class=\"farris-group-wrap col-4\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">\u5E2E\u52A9\u9009\u62E9</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\">\r\n                            <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\" \r\n                                [showButtonWhenDisabled]=\"false\" [disabled]=\"!canEdit\"\r\n                                [value]=\"helperName\" [editable]=\"false\" (clickHandle)=\"selectHelpMeta()\"\r\n                                [groupText]=\"groupIcon\"></input-group>\r\n                            <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>",
                providers: [LookupConfigService],
                styles: [""]
            }] }
];
/** @nocollapse */
DimensionItemCardComponent.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: MessagerService },
    { type: WFDimensionDefUIState },
    { type: ExpressionService },
    { type: LookupConfigService }
];
DimensionItemCardComponent.propDecorators = {
    data: [{ type: Input }],
    canCardEdit: [{ type: Input }],
    sysInit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFDimensionPanelComponent {
    /**
     * @param {?} render
     */
    constructor(render) {
        this.render = render;
        /* 自定义className */
        this.className = [];
        /* 面板是否可收折  默认收折*/
        this.foldable = true;
        // 设置手风琴模式  至多只有一个panel可以被选中
        this.accordion = false;
        this.modelChange = new EventEmitter();
        // @HostBinding('class.farris-panel') isPanel =
        // 双向绑定  当model数组改变时，相应的active状态的panel也要改变 从而改变视图
        // 双向绑定 用于存取active状态的panel
        this.modelValue = [];
        this.subscriber = [];
    }
    /* panel数据存储 */
    /**
     * @return {?}
     */
    get model() {
        return this.modelValue;
    }
    /**
     * @param {?} modelValue
     * @return {?}
     */
    set model(modelValue) {
        // 获取用户输入的值
        this.modelValue = modelValue;
        this.updateSubscriber();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 添加class名
        if (this.className.length) {
            this.className.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                this.render.addClass(this.farrisPanel.nativeElement, ele);
            }));
        }
        this.updateSubscriber();
    }
    /**
     * @param {?} value panel存储激活值
     * @return {?}
     */
    updateModel(value) {
        /** @type {?} */
        const index = this.modelValue.findIndex((/**
         * @param {?} val
         * @return {?}
         */
        val => val === value));
        // 如果没有匹配到点击的panel值  可能model里面不存在 可能model为空
        if (index < 0) {
            // 若是手风琴模式  先把所有panel处于未激活状态
            if (this.accordion) {
                this.model = [];
            }
            // 如果不是手风琴模式  直接激活即可
            this.modelValue.push(value);
            this.updateSubscriber();
            return this.modelChange.emit(this.modelValue);
        }
        // 如果index不为-1
        // 手风琴模式  关闭所有激活状态
        if (this.accordion) {
            this.model = [];
        }
        else {
            // 非手风琴模式 直接关闭当前panel即可
            this.modelValue.splice(index, 1);
        }
        this.updateSubscriber();
        this.modelChange.emit(this.modelValue);
    }
    /* 函数分发 */
    /**
     * @private
     * @return {?}
     */
    updateSubscriber() {
        this.subscriber.forEach((/**
         * @param {?} handle
         * @return {?}
         */
        handle => handle()));
    }
}
WFDimensionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-dimension-panel',
                template: "<div #farrisPanel class=\"farris-panel\" [class.accordion]=\"accordion\" [style.width]=\"width+'px'\" [style.height]=\"height+'px'\">\r\n    <ng-content>\r\n    </ng-content>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".farris-panel{margin:25px}"]
            }] }
];
/** @nocollapse */
WFDimensionPanelComponent.ctorParameters = () => [
    { type: Renderer2 }
];
WFDimensionPanelComponent.propDecorators = {
    farrisPanel: [{ type: ViewChild, args: ['farrisPanel',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    className: [{ type: Input }],
    foldable: [{ type: Input }],
    defaultExpand: [{ type: Input }],
    accordion: [{ type: Input }],
    model: [{ type: Input }],
    modelChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const dropAnimation = trigger('dropAnimation', [
    state('active', style({
        'height': '*',
    })),
    state('inactive', style({
        'height': '0',
        'overflow': 'hidden'
    })),
    transition('active<=>inactive', animate(`.35s ease`)),
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFDimensionPanelItemComponent {
    /**
     * @param {?} panel
     * @param {?} changeRef
     * @param {?} render
     * @param {?} el
     */
    constructor(panel, changeRef, render, el) {
        this.panel = panel;
        this.changeRef = changeRef;
        this.render = render;
        this.el = el;
        this.sysInit = false;
        // @HostBinding('class.farris-panel-item') isPanelItem = true;
        // @HostBinding('class.card') isCard = true;
        // 默认非激活状态(不显示)
        this.active = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.editState) {
            if (this.editState) {
                this.active = true;
            }
            else {
                this.active = false;
            }
        }
    }
}
WFDimensionPanelItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-dimension-panel-item',
                template: "<!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n\r\n<div id=\"cardheader\" class=\"card-header\" style=\"height: 45px; background-color: white;border-bottom: 1px solid rgba(0, 0, 0, .125);\">\r\n    <!-- \u6807\u9898  \u662F\u5426\u6709\u6A21\u677F -->\r\n    <div class=\"panel-item-title\">\r\n        <span class=\"f-icon f-icon-new-dimension\"></span>\r\n        <span *ngIf=\"!headRef;else head\">\r\n            {{tabTitle}}\r\n        </span>\r\n        <span [class]=\"sysInit?'sysInit-flow-form':'customize-flow-form'\">{{sysInit?'\u7CFB\u7EDF\u9884\u7F6E':'\u81EA\u5B9A\u4E49'}}</span>\r\n        <ng-template #head [ngTemplateOutlet]=\"headRef\"></ng-template>\r\n    </div>\r\n    <div class=\"panel-item-tool\">\r\n        <ng-template [ngTemplateOutlet]=\"toolTempl\"></ng-template>\r\n    </div>\r\n    <div class=\"panel-item-clear\">\r\n    </div>\r\n\r\n</div>\r\n<!-- panel\u5185\u5BB9\u6A21\u677F -->\r\n<div class=\" card-body \">\r\n    <ng-template [ngTemplateOutlet]=\"contentRef\">\r\n    </ng-template>\r\n</div>\r\n<!-- \u5E95\u90E8  \u662F\u5426\u6709\u6A21\u677F -->\r\n<div class=\"card-bottom \" style=\"border-top: 1px solid rgba(0, 0, 0, .125);\" [@dropAnimation]=\"active? 'active': 'inactive' \">\r\n    <div style=\"float: right; margin: 9px;\">\r\n        <ng-template [ngTemplateOutlet]=\"bottomRef \">\r\n        </ng-template>\r\n    </div>\r\n</div>",
                animations: [dropAnimation],
                encapsulation: ViewEncapsulation.None,
                styles: [":host{width:100%}#cardheader .card-header{cursor:pointer;border-width:1px;background-color:#fff}.panel-item-title{float:left}.card-bottom{background-color:rgba(242,242,242);height:45px}.panel-item-tool{float:right}.panel-item-clear{clear:both}.f-state-disable{pointer-events:none}.customize-flow-form{font-size:12px;color:#fff;margin-left:10px;border-radius:20px;padding:2px 8px;background:#59a1ff}.sysInit-flow-form{font-size:12px;color:#fff;margin-left:10px;border-radius:20px;padding:2px 8px;background:#ff8e59}"]
            }] }
];
/** @nocollapse */
WFDimensionPanelItemComponent.ctorParameters = () => [
    { type: WFDimensionPanelComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
WFDimensionPanelItemComponent.propDecorators = {
    editState: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    value: [{ type: Input }],
    tabTitle: [{ type: Input, args: ['title',] }],
    sysInit: [{ type: Input }],
    disable: [{ type: Input }, { type: HostBinding, args: ['class.f-state-disable',] }],
    headRef: [{ type: ContentChild, args: ['headTempl',] }],
    bottomRef: [{ type: ContentChild, args: ['bottomRef',] }],
    toolTempl: [{ type: ContentChild, args: ['toolTempl',] }],
    contentRef: [{ type: ContentChild, args: ['contentTempl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFDimensionPanelModule {
}
WFDimensionPanelModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    WFDimensionPanelComponent,
                    WFDimensionPanelItemComponent,
                ],
                exports: [
                    WFDimensionPanelComponent,
                    WFDimensionPanelItemComponent
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectObjectComponent {
    constructor() {
        this.enableNextStep = true;
        this.detailPage = null;
        // 记录当前BE所有表的code
        this.treeTables = [];
        this.grid_selected = {};
        this.readonlyFields = []; // 不可取消勾选的字段
        // 不可取消勾选的字段
        /**
         * 左侧树信息
         */
        this.treeData = [];
        this.farrisTreeData = [];
        this.treeConfig = {
            idField: 'ID',
            columns: [
                { field: 'Name', title: 'Name', width: 200 }
            ],
            /**
             * 叶子节点图标
             */
            leafIcon: 'f-icon f-icon-folder text-info',
            /**
             * 节点展开图标
             */
            expandIcon: 'f-icon f-icon-folder-open text-info',
            /**
             * 节点折叠图标
             */
            collapseIcon: 'f-icon f-icon-folder text-info',
            /**
             * 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
             */
            expandLevel: 2,
        };
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmpPageDetail(cmp) {
        this.detailPage = cmp;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.load();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.load();
    }
    /**
     * @return {?}
     */
    load() {
        if (this.data && this.data.be) {
            /** @type {?} */
            const mainObject = this.data.be.MainObject;
            this.treeData = this.getTablesTree(mainObject);
            this.farrisTreeData = this.getFarrisTreeData(this.treeData);
        }
    }
    /**
     * 组装farris-tree左侧树
     * @param {?} data
     * @return {?}
     */
    getFarrisTreeData(data) {
        /** @type {?} */
        const newArr = [];
        if (data && data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let childrenArr = [];
                if (item && item.Children && item.Children.length) {
                    childrenArr = this.getFarrisTreeData(item.Children);
                }
                newArr.push({ data: item, children: childrenArr, expanded: true });
            }));
        }
        return newArr;
    }
    /**
     * 组装左侧树
     * @param {?} mainObject
     * @return {?}
     */
    getTablesTree(mainObject) {
        const { ContainChildObjects, ColumnGenerateID, Keys } = mainObject, parentTable = __rest(mainObject, ["ContainChildObjects", "ColumnGenerateID", "Keys"]);
        this.treeTables.push(parentTable.Code);
        // const selectedAll = this.grid_selected[parentTable.Code] ? false : true;
        // this.gridData[parentTable.Code] = this.getGridFields(parentTable.ContainElements, parentTable.Code, selectedAll);
        if (ContainChildObjects && ContainChildObjects.length > 0) {
            parentTable['Children'] = [];
            ContainChildObjects.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childTree = this.getTablesTree((/** @type {?} */ (child)));
                parentTable['Children'] = parentTable['Children'].concat(childTree);
            }));
        }
        // 判断主键
        if (ColumnGenerateID) {
            this.readonlyFields.push(ColumnGenerateID.ElementID);
        }
        // 判断主从表的关联字段
        if (Keys && Keys.length > 0) {
            Keys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                this.readonlyFields.push(key.SourceElement);
            }));
        }
        return [parentTable];
    }
    /**
     * 选中节点事件
     * @param {?} event 被选中节点
     * @return {?}
     */
    handleTreeSelection(event) {
        this.data.selectedObj = event.node.data;
    }
    /**
     * @return {?}
     */
    nextStep() {
        // 设置当前页传递出去数据
        this.data.BeFields = this.data.selectedObj.ContainElements;
        this.detailPage.setPageData(this.data.selectedObj);
        // 下一步
        this.detailPage.nextStep();
    }
    /**
     * @return {?}
     */
    cancel() {
        this.detailPage.cancelWizard();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    pagedetailSelected(args) {
    }
}
SelectObjectComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-object',
                template: "<wizard-page-detail #detailpage1 (pagedetailSelected)=\"pagedetailSelected($event)\">\r\n    <ng-template wizardPageContent>\r\n        <div class=\"f-template-wizard-page-content\" style=\"margin-left:2px\">\r\n            <farris-treetable #treetable [columns]=\"treeConfig.columns\" [showBorder]=\"false\" [showHeader]=\"false\" [data]=\"farrisTreeData\" [fit]=\"true\" [idField]=\"treeConfig.idField\" [singleSelect]=\"true\" [showCheckbox]=\"false\" [showIcon]=\"true\" [disabled]=\"false\"\r\n                [checkOnSelect]=\"true\" (nodeSelected)=\"handleTreeSelection($event)\" [leafIcon]=\"treeConfig.leafIcon\" [expandIcon]=\"treeConfig.expandIcon\" [collapseIcon]=\"treeConfig.collapseIcon\">\r\n            </farris-treetable>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template wizardPageFooter>\r\n        <div class=\"f-template-wizard-page-footer\">\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n              \u53D6\u6D88\r\n          </button>\r\n            <button class=\"btn btn-primary\" [disabled]=\"!enableNextStep\" (click)=\"nextStep()\">\r\n              \u4E0B\u4E00\u6B65\r\n          </button>\r\n        </div>\r\n    </ng-template>\r\n</wizard-page-detail>",
                styles: [":host{display:flex;flex:1}button{margin:10px}"]
            }] }
];
/** @nocollapse */
SelectObjectComponent.ctorParameters = () => [];
SelectObjectComponent.propDecorators = {
    data: [{ type: Input }],
    cmpPageDetail: [{ type: ViewChild, args: [FarrisPageDetailComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { MessagerService } from '@farris/ui-messager';
class SelectObjElementComponent {
    constructor() {
        this.gridData = {};
        this.gridCols = [
            { field: 'show', title: '显示', width: 40 },
            { field: 'Name', title: '字段名称' },
            { field: 'Code', title: '字段编号', width: 200 },
            { field: 'LabelID', title: '字段标签' },
            { field: 'MDataType', title: '字段类型' }
        ];
        this.grid_selected = {
            selectedAll: {}
        };
        this.readonlyFields = []; // 不可取消勾选的字段
        // 不可取消勾选的字段
        this.selectedAll = {};
        this.selectedTreeKeys = [];
        this.selectedTreeKey = '';
        this.enableNextStep = true;
        this.detailPage = null;
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmpPageDetail(cmp) {
        this.detailPage = cmp;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.load();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.load();
    }
    /**
     * @return {?}
     */
    load() {
        /** @type {?} */
        const obj = this.detailPage.getPageData('selectobject');
        if (this.data && this.data.selectedObj) {
            /** @type {?} */
            const parentTable = (/** @type {?} */ (this.data.selectedObj));
            this.selectedTreeKey = this.data.selectedObj.Code;
            this.selectedTreeKeys = [this.selectedTreeKey];
            this.grid_selected[this.selectedTreeKey] = this.data.selectedBeFields;
            this.gridData[parentTable.Code] = this.getGridFields(parentTable.ContainElements, parentTable.Code, false);
        }
    }
    /**
     * 获取各表字段，关联字段以树形式展示
     * @param {?} fields
     * @param {?} tableCode
     * @param {?} needSelectAll
     * @return {?}
     */
    getGridFields(fields, tableCode, needSelectAll) {
        /** @type {?} */
        const gridData = [];
        /** @type {?} */
        const fieldIdList = [];
        if (!fields || fields.length === 0) {
            return [];
        }
        fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            const { ChildAssociations } = field, fieldObject = __rest(field, ["ChildAssociations"]);
            /** @type {?} */
            const children = [];
            if (this.data.assoRefElement) {
                // 关联表
                if (ChildAssociations && ChildAssociations.length > 0) {
                    ChildAssociations.forEach((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => {
                        child.RefElementCollection.forEach((/**
                         * @param {?} refEle
                         * @return {?}
                         */
                        refEle => {
                            children.push({ data: refEle, children: [], expanded: true, layer: 2 });
                            fieldIdList.push(refEle.ID);
                        }));
                    }));
                }
            }
            gridData.push({ data: fieldObject, children: children, expanded: true, layer: 1 });
            fieldIdList.push(fieldObject.ID);
        }));
        //  默认选中所有字段
        if (needSelectAll) {
            this.grid_selected[tableCode] = fieldIdList;
            this.grid_selected['selectedAll'][tableCode] = true;
        }
        return gridData;
    }
    /**
     * @param {?} rowData
     * @param {?} rowNode
     * @return {?}
     */
    changeCheckbox(rowData, rowNode) {
        /** @type {?} */
        const ID = rowData.ID;
        /** @type {?} */
        const index = this.grid_selected[this.selectedTreeKey].indexOf(ID);
        if (index >= 0) {
            this.grid_selected[this.selectedTreeKey].splice(index, 1);
            this.grid_selected['selectedAll'][this.selectedTreeKey] = false;
        }
        else {
            // 若为[单选]，则清空已选择字段
            if (this.data.singleElement) {
                this.grid_selected[this.selectedTreeKey] = [];
            }
            this.grid_selected[this.selectedTreeKey].push(ID);
        }
        // 主表的关联字段
        if (rowNode.children.length > 0) {
            rowNode.children.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                const reIndex = this.grid_selected[this.selectedTreeKey].findIndex((/**
                 * @param {?} id
                 * @return {?}
                 */
                id => id === element.data.ID));
                if (index >= 0 && reIndex >= 0) {
                    this.grid_selected[this.selectedTreeKey].splice(reIndex, 1);
                }
                if (index < 0 && reIndex < 0) {
                    this.grid_selected[this.selectedTreeKey].push(element.data.ID);
                }
            }));
        }
        // 关联表的字段
        if (rowNode.parent) {
            /** @type {?} */
            const parentNode = rowNode.parent;
            if (!parentNode) {
                return;
            }
            /** @type {?} */
            const parentIndex = this.grid_selected[this.selectedTreeKey].indexOf(parentNode.data.ID);
            if (index < 0 && parentIndex < 0) {
                this.grid_selected[this.selectedTreeKey].push(parentNode.data.ID);
            }
        }
    }
    /**
     * @return {?}
     */
    clickSelectAllCheckbox() {
        this.selectAllChange(this.gridData[this.selectedTreeKey], this.grid_selected['selectedAll'][this.selectedTreeKey]);
    }
    /**
     * 全选
     * @param {?} treeData treeData
     * @param {?} isSelected isSelected
     * @return {?}
     */
    selectAllChange(treeData, isSelected) {
        if (treeData.length === 0) {
            return;
        }
        treeData.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            /** @type {?} */
            const ID = treeNode.data.ID;
            if (treeNode.children && treeNode.children.length > 0) {
                this.selectAllChange(treeNode.children, isSelected);
            }
            /** @type {?} */
            const index = this.grid_selected[this.selectedTreeKey].indexOf(ID);
            // 全选
            if (isSelected && index < 0) {
                this.grid_selected[this.selectedTreeKey].push(ID);
                return;
            }
            // 取消全选
            if (!isSelected && this.readonlyFields.indexOf(ID) < 0) {
                this.grid_selected[this.selectedTreeKey].splice(index, 1);
            }
        }));
    }
    /**
     * @return {?}
     */
    prevStep() {
        this.detailPage.prevStep();
    }
    /**
     * @return {?}
     */
    finish() {
        // 校验
        if (this.grid_selected[this.selectedTreeKey].length === 0) {
            // this.messagerService.warning('请勾选字段。');
            alert('请勾选字段。');
            return;
        }
        // 设置当前页传递出去数据
        this.data.selectedBeFields = [this.grid_selected[this.selectedTreeKey]];
        this.detailPage.setPageData(this.data.selectedBeFields);
        // 下一步
        this.detailPage.finishWizard();
    }
    /**
     * @return {?}
     */
    cancel() {
        this.detailPage.cancelWizard();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    pagedetailSelected(args) {
    }
}
SelectObjElementComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-obj-element',
                template: "<wizard-page-detail #detailpage2 (pagedetailSelected)=\"pagedetailSelected($event)\">\r\n    <ng-template wizardPageContent>\r\n        <div class=\"f-template-wizard-page-content\" style=\"margin-left:2px\">\r\n            <farris-treetable #treeTable [data]=\"gridData[selectedTreeKey]\" [columns]=\"gridCols\" [idField]=\"'ID'\" [fixedHeader]=\"true\" [width]=\"'100%'\" [height]=\"330\" [showFilterBar]=\"false\" [showIcon]=\"false\" [resizableColumns]=\"true\" [cascadeCheck]=\"true\" [showBorder]=\"false\"\r\n                class=\"f-selectbe-treetable\">\r\n                <ng-template farrisTemplate=\"header\" let-columns>\r\n                    <tr>\r\n                        <ng-container *ngFor=\"let col of columns; let i = index\">\r\n\r\n                            <th *ngIf=\"col.field!=='show'\">\r\n                                <ng-container> {{col.title}} </ng-container>\r\n                            </th>\r\n                            <th *ngIf=\"col.field==='show'\" [width]=\"col.width\">\r\n                                <ng-container>\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <!-- <input class=\"custom-control-input\" id=\"CheckAll\" type=\"checkbox\" [(ngModel)]=\"grid_selected.selectedAll[selectedTreeKey]\" (ngModelChange)=\"clickSelectAllCheckbox()\" />\r\n                                        <label class=\"custom-control-label\" for=\"CheckAll\"></label> -->\r\n                                    </div>\r\n                                </ng-container>\r\n                            </th>\r\n                            <th *ngIf=\"col.field==='toggler'\" [width]=\"col.width\">\r\n                            </th>\r\n                        </ng-container>\r\n\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template farrisTemplate=\"body\" let-rowNode let-rowIndex=\"index\" let-rowData=\"rowData\" let-columns=\"columns\">\r\n                    <tr [selectRow]=\"rowNode\" [rowIndex]=\"rowIndex\" [dblclick]=\"true\" [selectRowDisabled]=\"true\">\r\n                        <ng-container *ngFor=\"let col of columns; let i = index\">\r\n                            <td *ngIf=\"col.field==='show'\" [width]=\"col.width\">\r\n                                <ng-container *ngIf=\"!rowNode.node.tableNode  && readonlyFields.indexOf(rowData.ID)<0\">\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <input type=\"checkbox\" [id]=\"rowData.ID\" class=\"custom-control-input\" [checked]=\"grid_selected[selectedTreeKey] && grid_selected[selectedTreeKey].indexOf(rowData.ID)>=0\" (click)=\"changeCheckbox(rowData,rowNode.node)\">\r\n                                        <label class=\"custom-control-label\" [for]=\"rowData.ID\"></label>\r\n                                    </div>\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"!rowNode.node.tableNode && readonlyFields.indexOf(rowData.ID)>=0\">\r\n                                    <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                                        <input type=\"checkbox\" [id]=\"rowData.ID\" class=\"custom-control-input\" checked=\"checked\" disabled>\r\n                                        <label class=\"custom-control-label\" [for]=\"rowData.ID\"></label>\r\n                                    </div>\r\n                                </ng-container>\r\n                            </td>\r\n                            <td *ngIf=\"col.field!=='show'\">\r\n                                <farris-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 1\"></farris-treeTableToggler>\r\n                                <ng-container *ngIf=\"col.field!=='MDataType'\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData[col.field]}}</span>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"col.field ==='MDataType' && rowData.IsUdt\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData.UdtName}}</span>\r\n                                </ng-container>\r\n                                <ng-container *ngIf=\"col.field ==='MDataType' && !rowData.IsUdt\">\r\n                                    <span [title]=\"rowData[col.field]\">{{rowData.MDataType}}</span>\r\n                                </ng-container>\r\n                            </td>\r\n                        </ng-container>\r\n                    </tr>\r\n                </ng-template>\r\n\r\n            </farris-treetable>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template wizardPageFooter>\r\n        <div class=\"f-template-wizard-page-footer\">\r\n            <button class=\"btn btn-secondary\" (click)=\"prevStep()\">\u4E0A\u4E00\u6B65</button>\r\n            <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n            <button class=\"btn btn-primary\" [disabled]=\"!enableNextStep\" (click)=\"finish()\">\u5B8C\u6210</button>\r\n        </div>\r\n    </ng-template>\r\n</wizard-page-detail>",
                styles: [":host{display:flex;flex:1}button{margin:10px}"]
            }] }
];
/** @nocollapse */
SelectObjElementComponent.ctorParameters = () => [];
SelectObjElementComponent.propDecorators = {
    data: [{ type: Input }],
    changeObj: [{ type: Input }],
    treeTable: [{ type: ViewChild, args: ['treeTable',] }],
    cmpPageDetail: [{ type: ViewChild, args: [FarrisPageDetailComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectElementModule {
}
SelectElementModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    WizardModule,
                    TreeTableModule,
                    // MessagerModule.forRoot(),
                    FormsModule,
                    ReactiveFormsModule
                ],
                declarations: [
                    SelectElementComponent,
                    SelectObjectComponent,
                    SelectObjElementComponent
                ],
                entryComponents: [
                    SelectElementComponent,
                    SelectObjectComponent,
                    SelectObjElementComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfDimensionDefModule {
}
WfDimensionDefModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    WfDimensionDefComponent,
                    DimensionItemCardComponent,
                    EnumEditComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    FarrisButtonModule,
                    MessagerModule.forRoot(),
                    FarrisDialogModule,
                    NotifyModule,
                    GSPMetadataRTServiceModule.forRoot(''),
                    MetadataRTSelectModule,
                    InputGroupModule,
                    WFDimensionPanelModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    ComboListModule,
                    ExpressionModule,
                    SelectElementModule,
                    LookupConfigModule
                ],
                providers: [
                    GSPMetadataRTService,
                    WFDimensionDefViewmodel,
                    WFDimensionDefUIState,
                    ExpressionService,
                    HttpService
                ],
                entryComponents: [
                    EnumEditComponent
                ],
                exports: [WfDimensionDefComponent, DimensionItemCardComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfDimensionDefService, WfDimensionDefComponent, WfDimensionDefModule, DimensionItemCardComponent as ɵc, EnumEditComponent as ɵd, WFDimensionPanelItemComponent as ɵg, WFDimensionPanelModule as ɵe, WFDimensionPanelComponent as ɵf, dropAnimation as ɵh, SelectElementComponent as ɵj, SelectElementModule as ɵi, SelectObjElementComponent as ɵl, SelectObjectComponent as ɵk, WFDimensionDefUIState as ɵb, WFDimensionDefViewmodel as ɵa };

//# sourceMappingURL=gsp-wf-wf-dimension-def.js.map