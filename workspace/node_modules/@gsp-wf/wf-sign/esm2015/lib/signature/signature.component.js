/**
 * @fileoverview added by tsickle
 * Generated from: lib/signature/signature.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
'use strict';
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import sp from 'signature_pad/dist/signature_pad.umd';
/**
 * @record
 */
export function Point() { }
if (false) {
    /** @type {?} */
    Point.prototype.x;
    /** @type {?} */
    Point.prototype.y;
    /** @type {?} */
    Point.prototype.time;
}
export class SignatureComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        // no op
        this.elementRef = elementRef;
        this.options = this.options || {};
        this.onBeginEvent = new EventEmitter();
        this.onEndEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** @type {?} */
        const canvas = this.elementRef.nativeElement.querySelector('canvas');
        if (((/** @type {?} */ (this.options))).canvasHeight) {
            canvas.height = ((/** @type {?} */ (this.options))).canvasHeight;
        }
        if (((/** @type {?} */ (this.options))).canvasWidth) {
            canvas.width = ((/** @type {?} */ (this.options))).canvasWidth;
        }
        this.signaturePad = new sp(canvas, this.options);
        this.signaturePad.onBegin = this.onBegin.bind(this);
        this.signaturePad.onEnd = this.onEnd.bind(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** @type {?} */
        const canvas = this.elementRef.nativeElement.querySelector('canvas');
        canvas.width = 0;
        canvas.height = 0;
    }
    /**
     * @return {?}
     */
    resizeCanvas() {
        // When zoomed out to less than 100%, for some very strange reason,
        // some browsers report devicePixelRatio as less than 1
        // and only part of the canvas is cleared then.
        /** @type {?} */
        const ratio = Math.max(window.devicePixelRatio || 1, 1);
        //const canvas: any = this.signaturePad._canvas;
        /** @type {?} */
        const canvas = this.signaturePad.canvas;
        canvas.width = canvas.offsetWidth * ratio;
        canvas.height = canvas.offsetHeight * ratio;
        canvas.getContext('2d').scale(ratio, ratio);
        this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value
    }
    /**
     * @param {?} text
     * @return {?}
     */
    setWaterMark(text) {
        /** @type {?} */
        const canvas = this.elementRef.nativeElement.querySelector('canvas');
        /** @type {?} */
        const ctx = canvas.getContext("2d");
        ctx.font = "20px 微软雅黑";
        ctx.fillStyle = '#888';
        ctx.fillText(text, 10, 50);
    }
    //
    /**
     * @return {?}
     */
    setImageBackground() {
        /** @type {?} */
        const canvas = this.elementRef.nativeElement.querySelector('canvas');
        /** @type {?} */
        const ctx = canvas.getContext("2d");
        /** @type {?} */
        var imageData = ctx.getImageData(0, 0, ((/** @type {?} */ (this.options))).canvasWidth, ((/** @type {?} */ (this.options))).canvasHeight);
        for (var i = 0; i < imageData.data.length; i += 4) {
            // 当该像素是透明的，则设置成白色
            if (imageData.data[i + 3] == 0) {
                imageData.data[i] = 255;
                imageData.data[i + 1] = 255;
                imageData.data[i + 2] = 255;
                imageData.data[i + 3] = 255;
            }
        }
        ctx.putImageData(imageData, 0, 0);
    }
    /**
     * @param {?} image
     * @return {?}
     */
    setBackgroundImage(image) {
        /** @type {?} */
        const canvas = this.elementRef.nativeElement.querySelector('canvas');
        /** @type {?} */
        const ctx = canvas.getContext("2d");
        ctx.drawImage(image, 0, 0);
    }
    // Returns signature image as an array of point groups
    /**
     * @return {?}
     */
    toData() {
        if (this.signaturePad) {
            return this.signaturePad.toData();
        }
        else {
            return [];
        }
    }
    // Draws signature image from an array of point groups
    /**
     * @param {?} points
     * @return {?}
     */
    fromData(points) {
        this.signaturePad.fromData(points);
    }
    // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)
    /**
     * @param {?=} imageType
     * @param {?=} quality
     * @return {?}
     */
    toDataURL(imageType, quality) {
        return this.signaturePad.toDataURL(imageType, quality); // save image as data URL
    }
    // Draws signature image from data URL
    /**
     * @param {?} dataURL
     * @param {?=} options
     * @return {?}
     */
    fromDataURL(dataURL, options = {}) {
        // set default height and width on read data from URL
        if (!options.hasOwnProperty('height') && ((/** @type {?} */ (this.options))).canvasHeight) {
            options.height = ((/** @type {?} */ (this.options))).canvasHeight;
        }
        if (!options.hasOwnProperty('width') && ((/** @type {?} */ (this.options))).canvasWidth) {
            options.width = ((/** @type {?} */ (this.options))).canvasWidth;
        }
        this.signaturePad.fromDataURL(dataURL, options);
    }
    // Clears the canvas
    /**
     * @return {?}
     */
    clear() {
        this.signaturePad.clear();
    }
    // Returns true if canvas is empty, otherwise returns false
    /**
     * @return {?}
     */
    isEmpty() {
        return this.signaturePad.isEmpty();
    }
    // Unbinds all event handlers
    /**
     * @return {?}
     */
    off() {
        this.signaturePad.off();
    }
    // Rebinds all event handlers
    /**
     * @return {?}
     */
    on() {
        this.signaturePad.on();
    }
    // set an option on the signaturePad - e.g. set('minWidth', 50);
    /**
     * @param {?} option
     * @param {?} value
     * @return {?}
     */
    set(option, value) {
        switch (option) {
            case 'canvasHeight':
                this.signaturePad.canvas.height = value;
                break;
            case 'canvasWidth':
                this.signaturePad.canvas.width = value;
                break;
            default:
                this.signaturePad[option] = value;
        }
    }
    // notify subscribers on signature begin
    /**
     * @return {?}
     */
    onBegin() {
        this.onBeginEvent.emit(true);
    }
    // notify subscribers on signature end
    /**
     * @return {?}
     */
    onEnd() {
        this.onEndEvent.emit(true);
    }
    /**
     * @return {?}
     */
    queryPad() {
        return this.signaturePad;
    }
}
SignatureComponent.decorators = [
    { type: Component, args: [{
                template: '<canvas></canvas>',
                selector: 'wf-sign-signature'
            }] }
];
/** @nocollapse */
SignatureComponent.ctorParameters = () => [
    { type: ElementRef }
];
SignatureComponent.propDecorators = {
    options: [{ type: Input }],
    onBeginEvent: [{ type: Output }],
    onEndEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SignatureComponent.prototype.options;
    /** @type {?} */
    SignatureComponent.prototype.onBeginEvent;
    /** @type {?} */
    SignatureComponent.prototype.onEndEvent;
    /**
     * @type {?}
     * @private
     */
    SignatureComponent.prototype.signaturePad;
    /**
     * @type {?}
     * @private
     */
    SignatureComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,