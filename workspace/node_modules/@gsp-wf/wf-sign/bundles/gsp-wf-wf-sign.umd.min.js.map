{"version":3,"sources":["ng://@gsp-wf/wf-sign/lib/wf-sign.service.ts","ng://@gsp-wf/wf-sign/lib/wf-sign.component.ts","ng://@gsp-wf/wf-sign/lib/signature/signature.component.ts","ng://@gsp-wf/wf-sign/lib/sign/sign.component.ts","ng://@gsp-wf/wf-sign/lib/sign-here/sign-here.component.ts","ng://@gsp-wf/wf-sign/lib/wf-sign.module.ts"],"names":["WfSignService","Injectable","args","providedIn","WfSignComponent","prototype","ngOnInit","Component","selector","template","SignatureComponent","elementRef","this","options","onBeginEvent","EventEmitter","onEndEvent","ngAfterContentInit","canvas","nativeElement","querySelector","canvasHeight","height","canvasWidth","width","signaturePad","sp","onBegin","bind","onEnd","ngOnDestroy","resizeCanvas","ratio","Math","max","window","devicePixelRatio","offsetWidth","offsetHeight","getContext","scale","clear","setWaterMark","text","ctx","font","fillStyle","fillText","setImageBackground","imageData","getImageData","i","data","length","putImageData","setBackgroundImage","image","drawImage","toData","fromData","points","toDataURL","imageType","quality","fromDataURL","dataURL","hasOwnProperty","isEmpty","off","on","set","option","value","emit","queryPad","ElementRef","Input","Output","SignComponent","toDataUrlEvent","isDrawEvent","imageQuality","isDraw","signaturePadOptions","minWidth","ngAfterViewInit","canvasDiv","clientWidth","confirm","console","log","Date","reset","drawComplete","drawStart","ViewChild","SignHereComponent","title","img","Image","src","initCanvasByImage","WfSignModule","NgModule","declarations","imports","exports"],"mappings":"0bAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAAC,UAAAC,SAAA,iCAbDC,EAAAA,UAASL,KAAA,CAAC,CACTM,SAAU,kBACVC,SAAU,0FAcZL,EAlBA,GCAAM,EAAA,WA8BE,SAAAA,EAAYC,GAEVC,KAAKD,WAAaA,EAClBC,KAAKC,QAAUD,KAAKC,SAAW,GAC/BD,KAAKE,aAAe,IAAIC,EAAAA,aACxBH,KAAKI,WAAa,IAAID,EAAAA,aAqJ1B,OAlJSL,EAAAL,UAAAY,mBAAP,eACQC,EAAcN,KAAKD,WAAWQ,cAAcC,cAAc,UAE3DR,KAAY,QAASS,eACxBH,EAAOI,OAAUV,KAAY,QAASS,cAGnCT,KAAY,QAASW,cACxBL,EAAOM,MAASZ,KAAY,QAASW,aAGvCX,KAAKa,aAAe,IAAIC,EAAGR,EAAQN,KAAKC,SACxCD,KAAKa,aAAaE,QAAUf,KAAKe,QAAQC,KAAKhB,MAC9CA,KAAKa,aAAaI,MAAQjB,KAAKiB,MAAMD,KAAKhB,OAGrCF,EAAAL,UAAAyB,YAAP,eACQZ,EAAcN,KAAKD,WAAWQ,cAAcC,cAAc,UAChEF,EAAOM,MAAQ,EACfN,EAAOI,OAAS,GAGXZ,EAAAL,UAAA0B,aAAP,eAIQC,EAAgBC,KAAKC,IAAIC,OAAOC,kBAAoB,EAAG,GAEvDlB,EAAcN,KAAKa,aAAaP,OACtCA,EAAOM,MAAQN,EAAOmB,YAAcL,EACpCd,EAAOI,OAASJ,EAAOoB,aAAeN,EACtCd,EAAOqB,WAAW,MAAMC,MAAMR,EAAOA,GACrCpB,KAAKa,aAAagB,SAGf/B,EAAAL,UAAAqC,aAAP,SAAoBC,OAEZC,EADchC,KAAKD,WAAWQ,cAAcC,cAAc,UAC/CmB,WAAW,MAC5BK,EAAIC,KAAK,YACTD,EAAIE,UAAY,OAChBF,EAAIG,SAASJ,EAAK,GAAG,KAIhBjC,EAAAL,UAAA2C,mBAAP,WAIE,QAFMJ,EADchC,KAAKD,WAAWQ,cAAcC,cAAc,UAC/CmB,WAAW,MACxBU,EAAYL,EAAIM,aAAc,EAAE,EAAGtC,KAAY,QAASW,YAAaX,KAAY,QAASS,cACrF8B,EAAI,EAAGA,EAAIF,EAAUG,KAAKC,OAAQF,GAAK,EAEf,GAAzBF,EAAUG,KAAKD,EAAI,KACjBF,EAAUG,KAAKD,GAAK,IACpBF,EAAUG,KAAKD,EAAI,GAAK,IACxBF,EAAUG,KAAKD,EAAI,GAAK,IACxBF,EAAUG,KAAKD,EAAI,GAAK,KAGlCP,EAAIU,aAAaL,EAAW,EAAG,IAI1BvC,EAAAL,UAAAkD,mBAAP,SAA0BC,GACJ5C,KAAKD,WAAWQ,cAAcC,cAAc,UAC/CmB,WAAW,MACxBkB,UAAUD,EAAO,EAAG,IAIjB9C,EAAAL,UAAAqD,OAAP,WACE,OAAI9C,KAAKa,aACAb,KAAKa,aAAaiC,SAElB,IAKJhD,EAAAL,UAAAsD,SAAP,SAAgBC,GACdhD,KAAKa,aAAakC,SAASC,IAItBlD,EAAAL,UAAAwD,UAAP,SAAiBC,EAAoBC,GACnC,OAAOnD,KAAKa,aAAaoC,UAAUC,EAAWC,IAIzCrD,EAAAL,UAAA2D,YAAP,SAAmBC,EAAiBpD,QAAA,IAAAA,IAAAA,EAAA,KAE7BA,EAAQqD,eAAe,WAActD,KAAY,QAASS,eAC7DR,EAAQS,OAAUV,KAAY,QAASS,eAEpCR,EAAQqD,eAAe,UAAatD,KAAY,QAASW,cAC5DV,EAAQW,MAASZ,KAAY,QAASW,aAExCX,KAAKa,aAAauC,YAAYC,EAASpD,IAIlCH,EAAAL,UAAAoC,MAAP,WACE7B,KAAKa,aAAagB,SAIb/B,EAAAL,UAAA8D,QAAP,WACE,OAAOvD,KAAKa,aAAa0C,WAIpBzD,EAAAL,UAAA+D,IAAP,WACExD,KAAKa,aAAa2C,OAIb1D,EAAAL,UAAAgE,GAAP,WACEzD,KAAKa,aAAa4C,MAIb3D,EAAAL,UAAAiE,IAAP,SAAWC,EAAgBC,GAEzB,OAAQD,GACN,IAAK,eACH3D,KAAKa,aAAaP,OAAOI,OAASkD,EAClC,MACF,IAAK,cACH5D,KAAKa,aAAaP,OAAOM,MAAQgD,EACjC,MACF,QACE5D,KAAKa,aAAa8C,GAAUC,IAK3B9D,EAAAL,UAAAsB,QAAP,WACEf,KAAKE,aAAa2D,MAAK,IAIlB/D,EAAAL,UAAAwB,MAAP,WACEjB,KAAKI,WAAWyD,MAAK,IAGhB/D,EAAAL,UAAAqE,SAAP,WACE,OAAO9D,KAAKa,kCAtKflB,EAAAA,UAASL,KAAA,CAAC,CACTO,SAAU,oBACVD,SAAU,iEAhByBmE,EAAAA,+CAqBlCC,EAAAA,4BACAC,EAAAA,2BACAA,EAAAA,UA+JHnE,EAxLA,GCAAoE,EAAA,WA2BE,SAAAA,IAdUlE,KAAAmE,eAAiB,IAAIhE,EAAAA,aACrBH,KAAAoE,YAAY,IAAIjE,EAAAA,aACjBH,KAAAkD,UAAY,YACZlD,KAAAqE,aAAe,EAChBrE,KAAAsE,QAAS,EAIjBtE,KAAAuE,oBAA8B,CAC5BC,SAAY,EACZ7D,YAAe,IACfF,aAAgB,KAuCpB,OAlCEyD,EAAAzE,UAAAC,SAAA,aAGAwE,EAAAzE,UAAAgF,gBAAA,WAEEzE,KAAKa,aAAa6C,IAAI,WAAY,GAClC1D,KAAKa,aAAa6C,IAAI,cAAe1D,KAAK0E,UAAUnE,cAAcoE,aAClE3E,KAAKa,aAAagB,QAClB7B,KAAKa,aAAauB,sBAGpB8B,EAAAzE,UAAAmF,QAAA,WACEC,QAAQC,IAAI9E,KAAKa,aAAaoC,UAAUjD,KAAKkD,UAAUlD,KAAKqE,eAC5DrE,KAAKa,aAAaiB,aAAa,IAAIiD,MACnC/E,KAAKmE,eAAeN,KAAK7D,KAAKa,aAAaoC,UAAUjD,KAAKkD,UAAUlD,KAAKqE,gBAE3EH,EAAAzE,UAAAuF,MAAA,WACEhF,KAAKa,aAAagB,QAClB7B,KAAKsE,QAAO,EACZtE,KAAKoE,YAAYP,KAAK7D,KAAKsE,SAG7BJ,EAAAzE,UAAAwF,aAAA,WACEjF,KAAKsE,QAAO,EACZtE,KAAKoE,YAAYP,KAAK7D,KAAKsE,SAK7BJ,EAAAzE,UAAAyF,UAAA,WAEEL,QAAQC,IAAI,sCAzDfnF,EAAAA,UAASL,KAAA,CAAC,CACTM,SAAU,eACVC,SAAA,m1CAKCsF,EAAAA,UAAS7F,KAAA,CAACQ,sBACVqF,EAAAA,UAAS7F,KAAA,CAAC,uCAEV2E,EAAAA,4BACAA,EAAAA,0BACAD,EAAAA,4BACAA,EAAAA,SA+CHE,EA/DA,GCAAkB,EAAA,WA4BE,SAAAA,IAdSpF,KAAAkD,UAAY,YACZlD,KAAAqE,aAAe,EACfrE,KAAAqF,MAAM,eAEfrF,KAAAsE,QAAS,EAITtE,KAAAuE,oBAA8B,CAC5BC,SAAY,EACZ7D,YAAe,IACfF,aAAgB,KAgDpB,OA3CE2E,EAAA3F,UAAAC,SAAA,aAGA0F,EAAA3F,UAAAgF,gBAAA,WAME,GAJAzE,KAAKa,aAAa6C,IAAI,WAAY,GAClC1D,KAAKa,aAAa6C,IAAI,cAAe1D,KAAK0E,UAAUnE,cAAcoE,aAClE3E,KAAKa,aAAagB,QAClB7B,KAAKa,aAAauB,qBACfpC,KAAK4C,MAAM,KACN0C,EAAM,IAAIC,MAChBD,EAAIE,IAAIxF,KAAK4C,MACb5C,KAAKa,aAAa8B,mBAAmB2C,KAIzCF,EAAA3F,UAAAmF,QAAA,WAGE,OAFAC,QAAQC,IAAI9E,KAAKa,aAAaoC,UAAUjD,KAAKkD,UAAUlD,KAAKqE,eAErDrE,KAAKa,aAAaoC,UAAUjD,KAAKkD,UAAUlD,KAAKqE,eAEzDe,EAAA3F,UAAAuF,MAAA,WACEhF,KAAKa,aAAagB,QAClB7B,KAAKa,aAAauB,qBAClBpC,KAAKsE,QAAO,GAGdc,EAAA3F,UAAAwF,aAAA,WACEjF,KAAKsE,QAAO,GAKdc,EAAA3F,UAAAyF,UAAA,WAEEL,QAAQC,IAAI,kBAIdM,EAAA3F,UAAAgG,kBAAA,SAAkB7C,GAChB5C,KAAKa,aAAa8B,mBAAmBC,wBAnExCjD,EAAAA,UAASL,KAAA,CAAC,CACTM,SAAU,eACVC,SAAA,uvCAKCsF,EAAAA,UAAS7F,KAAA,CAACQ,sBACVqF,EAAAA,UAAS7F,KAAA,CAAC,kCAGV0E,EAAAA,4BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,SAwDHoB,EAzEA,GCAAM,EAAA,WAMA,SAAAA,KAM4B,2BAN3BC,EAAAA,SAAQrG,KAAA,CAAC,CACRsG,aAAc,CAACpG,EAAkBM,EAAoBoE,EAAckB,GACnES,QAAS,GAETC,QAAS,CAACtG,EAAgBM,EAAoBoE,EAAckB,OAElCM,EAZ5B","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WfSignService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'wf-sign-wf-sign',\r\n  template: `\r\n    <p>\r\n      wf-sign works!\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class WfSignComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nimport {AfterContentInit, Component, ElementRef, EventEmitter, Input, Output, OnDestroy} from '@angular/core';\r\nimport  sp from 'signature_pad/dist/signature_pad.umd';\r\n\r\ndeclare var require: any;\r\ndeclare let System: any\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n  time: number;\r\n}\r\n\r\nexport type PointGroup = Array<Point>;\r\n\r\n@Component({\r\n  template: '<canvas></canvas>',\r\n  selector: 'wf-sign-signature',\r\n})\r\n\r\nexport class SignatureComponent implements AfterContentInit, OnDestroy {\r\n\r\n  @Input() public options: Object;\r\n  @Output() public onBeginEvent: EventEmitter<boolean>;\r\n  @Output() public onEndEvent: EventEmitter<boolean>;\r\n\r\n  private signaturePad: any;\r\n  private elementRef: ElementRef;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    // no op\r\n    this.elementRef = elementRef;\r\n    this.options = this.options || {};\r\n    this.onBeginEvent = new EventEmitter();\r\n    this.onEndEvent = new EventEmitter();\r\n  }\r\n\r\n  public ngAfterContentInit(): void {\r\n    const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\r\n\r\n    if ((this.options as any).canvasHeight) {\r\n      canvas.height = (this.options as any).canvasHeight;\r\n    }\r\n\r\n    if ((this.options as any).canvasWidth) {\r\n      canvas.width = (this.options as any).canvasWidth;\r\n    }\r\n\r\n    this.signaturePad = new sp(canvas, this.options);\r\n    this.signaturePad.onBegin = this.onBegin.bind(this);\r\n    this.signaturePad.onEnd = this.onEnd.bind(this);\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\r\n    canvas.width = 0;\r\n    canvas.height = 0;\r\n  }\r\n\r\n  public resizeCanvas(): void {\r\n    // When zoomed out to less than 100%, for some very strange reason,\r\n    // some browsers report devicePixelRatio as less than 1\r\n    // and only part of the canvas is cleared then.\r\n    const ratio: number = Math.max(window.devicePixelRatio || 1, 1);\r\n    //const canvas: any = this.signaturePad._canvas;\r\n    const canvas: any = this.signaturePad.canvas;\r\n    canvas.width = canvas.offsetWidth * ratio;\r\n    canvas.height = canvas.offsetHeight * ratio;\r\n    canvas.getContext('2d').scale(ratio, ratio);\r\n    this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value\r\n  }\r\n\r\npublic setWaterMark(text){\r\n  const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\r\n  const ctx=canvas.getContext(\"2d\");\r\n  ctx.font=\"20px å¾®è½¯éé»\";\r\n  ctx.fillStyle = '#888';\r\n  ctx.fillText(text,10,50);\r\n}\r\n\r\n//\r\npublic setImageBackground(){\r\n  const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\r\n  const ctx=canvas.getContext(\"2d\");\r\n  var imageData = ctx.getImageData( 0,0,(this.options as any).canvasWidth,(this.options as any).canvasHeight);\r\n  for (var i = 0; i < imageData.data.length; i += 4) {\r\n      // å½è¯¥åç´ æ¯éæçï¼åè®¾ç½®æç½è²\r\n      if (imageData.data[i + 3] == 0) {\r\n            imageData.data[i] = 255;\r\n            imageData.data[i + 1] = 255;\r\n            imageData.data[i + 2] = 255;\r\n            imageData.data[i + 3] = 255;\r\n      }\r\n  }\r\n  ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\n\r\npublic setBackgroundImage(image){\r\n  const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\r\n  const ctx=canvas.getContext(\"2d\");\r\n  ctx.drawImage(image, 0, 0);\r\n}\r\n\r\n  // Returns signature image as an array of point groups\r\n  public toData(): Array<PointGroup> {\r\n    if (this.signaturePad) {\r\n      return this.signaturePad.toData();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Draws signature image from an array of point groups\r\n  public fromData(points: Array<PointGroup>): void {\r\n    this.signaturePad.fromData(points);\r\n  }\r\n\r\n  // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)\r\n  public toDataURL(imageType?: string, quality?: number): string {\r\n    return this.signaturePad.toDataURL(imageType, quality); // save image as data URL\r\n  }\r\n\r\n  // Draws signature image from data URL\r\n  public fromDataURL(dataURL: string, options: any = {}): void {\r\n    // set default height and width on read data from URL\r\n    if (!options.hasOwnProperty('height') && (this.options as any).canvasHeight) {\r\n      options.height = (this.options as any).canvasHeight;\r\n    }\r\n    if (!options.hasOwnProperty('width') && (this.options as any).canvasWidth) {\r\n      options.width = (this.options as any).canvasWidth;\r\n    }\r\n    this.signaturePad.fromDataURL(dataURL, options);\r\n  }\r\n\r\n  // Clears the canvas\r\n  public clear(): void {\r\n    this.signaturePad.clear();\r\n  }\r\n\r\n  // Returns true if canvas is empty, otherwise returns false\r\n  public isEmpty(): boolean {\r\n    return this.signaturePad.isEmpty();\r\n  }\r\n\r\n  // Unbinds all event handlers\r\n  public off(): void {\r\n    this.signaturePad.off();\r\n  }\r\n\r\n  // Rebinds all event handlers\r\n  public on(): void {\r\n    this.signaturePad.on();\r\n  }\r\n\r\n  // set an option on the signaturePad - e.g. set('minWidth', 50);\r\n  public set(option: string, value: any): void {\r\n\r\n    switch (option) {\r\n      case 'canvasHeight':\r\n        this.signaturePad.canvas.height = value;\r\n        break;\r\n      case 'canvasWidth':\r\n        this.signaturePad.canvas.width = value;\r\n        break;\r\n      default:\r\n        this.signaturePad[option] = value;\r\n    }\r\n  }\r\n\r\n  // notify subscribers on signature begin\r\n  public onBegin(): void {\r\n    this.onBeginEvent.emit(true);\r\n  }\r\n\r\n  // notify subscribers on signature end\r\n  public onEnd(): void {\r\n    this.onEndEvent.emit(true);\r\n  }\r\n\r\n  public queryPad(): any {\r\n    return this.signaturePad;\r\n  }\r\n}\r\n","import { Component, HostBinding, OnInit, ViewChild, TemplateRef, HostListener, ElementRef,Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignatureComponent } from '../signature/signature.component';\r\n\r\n@Component({\r\n  selector: 'wf-sign-sign',\r\n  templateUrl: './sign.component.html',\r\n  styleUrls: ['./sign.component.css']\r\n})\r\nexport class SignComponent implements OnInit {\r\n\r\n  @ViewChild(SignatureComponent) signaturePad: SignatureComponent;\r\n  @ViewChild('canvastitle') public canvasDiv: ElementRef;\r\n  // æåºéä¸­çäºä»¶\r\n  @Output() toDataUrlEvent = new EventEmitter();\r\n  @Output() isDrawEvent=new EventEmitter();\r\n  @Input() imageType = \"image/png\";\r\n  @Input() imageQuality = 1;\r\n  private isDraw = false;\r\n\r\n  \r\n\r\n  signaturePadOptions: Object = { // passed through to szimek/signature_pad constructor\r\n    'minWidth': 1,\r\n    'canvasWidth': 500,\r\n    'canvasHeight': 240\r\n  };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // this.signaturePad is now available\r\n    this.signaturePad.set('minWidth', 1); // set szimek/signature_pad options at runtime\r\n    this.signaturePad.set('canvasWidth', this.canvasDiv.nativeElement.clientWidth);\r\n    this.signaturePad.clear(); // invoke functions from szimek/signature_pad API\r\n    this.signaturePad.setImageBackground();\r\n  }\r\n\r\n  confirm() {\r\n    console.log(this.signaturePad.toDataURL(this.imageType,this.imageQuality));\r\n    this.signaturePad.setWaterMark(new Date());\r\n    this.toDataUrlEvent.emit(this.signaturePad.toDataURL(this.imageType,this.imageQuality));\r\n  }\r\n  reset() {\r\n    this.signaturePad.clear();\r\n    this.isDraw=false;\r\n    this.isDrawEvent.emit(this.isDraw);\r\n  }\r\n\r\n  drawComplete() {\r\n    this.isDraw=true;\r\n    this.isDrawEvent.emit(this.isDraw);\r\n    // will be notified of szimek/signature_pad's onEnd event\r\n    //console.log(this.signaturePad.toDataURL());\r\n  }\r\n\r\n  drawStart() {\r\n    // will be notified of szimek/signature_pad's onBegin event\r\n    console.log('begin drawing');\r\n  }\r\n\r\n}\r\n","import { Component, HostBinding, OnInit, ViewChild, TemplateRef, HostListener, ElementRef,Input, Output, EventEmitter } from '@angular/core';\r\nimport { SignatureComponent } from '../signature/signature.component';\r\n\r\n@Component({\r\n  selector: 'wf-sign-here',\r\n  templateUrl: './sign-here.component.html',\r\n  styleUrls: ['./sign-here.component.css']\r\n})\r\nexport class SignHereComponent implements OnInit {\r\n\r\n  @ViewChild(SignatureComponent) signaturePad: SignatureComponent;\r\n  @ViewChild('canvastitle') public canvasDiv: ElementRef;\r\n\r\n  // æåºéä¸­çäºä»¶\r\n  @Input() imageType = \"image/png\";\r\n  @Input() imageQuality = 1;\r\n  @Input() title='è¯·å¯¹å®¡æ¹æè§è¿è¡ç­¾å­ç¡®è®¤';\r\n  @Input() image;\r\n  isDraw = false;\r\n\r\n  \r\n\r\n  signaturePadOptions: Object = { // passed through to szimek/signature_pad constructor\r\n    'minWidth': 1,\r\n    'canvasWidth': 500,\r\n    'canvasHeight': 240\r\n  };\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // this.signaturePad is now available\r\n    this.signaturePad.set('minWidth', 1); // set szimek/signature_pad options at runtime\r\n    this.signaturePad.set('canvasWidth', this.canvasDiv.nativeElement.clientWidth);\r\n    this.signaturePad.clear(); // invoke functions from szimek/signature_pad API\r\n    this.signaturePad.setImageBackground();\r\n    if(this.image){\r\n      const img = new Image();\r\n      img.src=this.image;\r\n      this.signaturePad.setBackgroundImage(img);\r\n    }\r\n  }\r\n\r\n  confirm() {\r\n    console.log(this.signaturePad.toDataURL(this.imageType,this.imageQuality));\r\n    //this.signaturePad.setWaterMark(new Date());\r\n    return this.signaturePad.toDataURL(this.imageType,this.imageQuality);\r\n  }\r\n  reset() {\r\n    this.signaturePad.clear();\r\n    this.signaturePad.setImageBackground();\r\n    this.isDraw=false;\r\n  }\r\n\r\n  drawComplete() {\r\n    this.isDraw=true;\r\n    // will be notified of szimek/signature_pad's onEnd event\r\n    //console.log(this.signaturePad.toDataURL());\r\n  }\r\n\r\n  drawStart() {\r\n    // will be notified of szimek/signature_pad's onBegin event\r\n    console.log('begin drawing');\r\n  }\r\n\r\n  //è®¾ç½®èæ¯å¾ç\r\n  initCanvasByImage(image){\r\n    this.signaturePad.setBackgroundImage(image);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { WfSignComponent } from './wf-sign.component';\r\nimport { SignatureComponent } from './signature/signature.component';\r\nimport { SignComponent } from './sign/sign.component';\r\nimport { SignHereComponent } from './sign-here/sign-here.component';\r\n\r\n@NgModule({\r\n  declarations: [WfSignComponent,  SignatureComponent, SignComponent,SignHereComponent],\r\n  imports: [\r\n  ],\r\n  exports: [WfSignComponent,SignatureComponent, SignComponent,SignHereComponent]\r\n})\r\nexport class WfSignModule { }\r\n"]}