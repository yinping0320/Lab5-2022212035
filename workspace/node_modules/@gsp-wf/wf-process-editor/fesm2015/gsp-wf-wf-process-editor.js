import { forkJoin as forkJoin$1 } from 'rxjs/observable/forkJoin';
import { of } from 'rxjs/observable/of';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import { ParameterFetchValueMode } from '@gsp-cmp/wscmp-models';
import { LookupDataService } from '@farris/lookup-config';
import 'rxjs/Observable';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { BpmnModelJsonHelper as BpmnModelJsonHelper$1, JsonConvertableImpl as JsonConvertableImpl$1 } from '@edp-aif/common-api';
import { forkJoin, Subject, of as of$1, from, Observable, throwError } from 'rxjs';
import { switchMap, map, catchError, delay } from 'rxjs/operators';
import { CommonComponentUiRTService, CommonComponentUiModule } from '@gsp-cmp/ccmp-ui';
import { SysFarrisLookupComponent, SysFarrisTreeHelpComponent, SysManagerUIModule } from '@gsp-sys/sysmgr-ui';
import { RtfAppHelpModule } from '@gsp-sys/rtf-ui';
import { ShowMode, PropertyPanelModule } from '@farris/ide-property-panel';
import { DataTableModule } from '@farris/ui-datatable';
import { LayoutModule } from '@farris/ui-layout';
import { FlexLayoutModule } from '@farris/ui-flex-layout';
import { FarrisPanelModule } from '@farris/ui-panel';
import { FarrisResponsiveModule } from '@farris/ui-responsive';
import { PopoverModule } from '@farris/ui-popover';
import { DatagridFilterRowModule } from '@farris/ui-datagrid-filter';
import { FarrisDropdownModule, FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { WizardModule } from '@farris/ui-wizard';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { ExprEditMode, ExpressionService, InjectedType, ExpressioneditorComponent, VarEntity, ExpressionModule } from '@gsp-svc/expression';
import { WfBizprocessLookupModule } from '@gsp-wf/wf-bizprocess-lookup';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { FarrisButtonModule } from '@farris/ui-button';
import { ConditionEntity, ConditionType, BpmnModelJsonHelper, ComponentConditionContent, ExpressionConditionContent, JsonConvertableImpl, TextValue } from '@edp-bif/common-api';
import { CommonModelUtil } from '@gsp-bef/gsp-cm-metadata';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { SysLookupDetailComponent, SysmgrLookupModule } from '@gsp-sys/sysmgr-lookup';
import { VerifyDetailService, VerifyDetailModule } from '@farris/ui-verify-detail';
import { FarrisHtmlEditorModule } from '@farris/ui-html-editor';
import { WfTaskHandlerService, WfTaskHandlerModule } from '@gsp-wf/wf-task-handler';
import { HttpClientModule, HttpClient } from '@angular/common/http';
import { FormBuilder, FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisCommonModule } from '@farris/ui-common';
import { DatagridComponent, DatagridModule } from '@farris/ui-datagrid';
import { EditorTypes, DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { FarrisFormsModule } from '@farris/ui-forms';
import { InputGroupModule } from '@farris/ui-input-group';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
import { ListFilterModule } from '@farris/ui-list-filter';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { ServerSideToken, LookupGridComponent, LookupModule } from '@farris/ui-lookup';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { PaginationModule } from '@farris/ui-pagination';
import { FarrisSectionModule } from '@farris/ui-section';
import { SplitterModule } from '@farris/ui-splitter';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { TreeTableModule } from '@farris/ui-treetable';
import { BusinessObjectRtService } from '@gsp-lcm/bo-rt-service';
import { SelectMetadataRTComponent, GSPMetadataRTService, MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { FrameworkService, AppService, FrmEventBus, FuncsService, LoadingService as LoadingService$1 } from '@gsp-sys/rtf-common';
import { FResponseToolbarModule } from '@farris/ui-response-toolbar';
import { DataEntityService, DataEntityModule } from '@gsp-svc/data-entity-adapter';
import { BizProcessApiModule } from '@gsp-wf/biz-process-api';
import { PersonnelSelectorComponent, PersonnelSelectorModule, PersonnelSelectorDataGridEditorProvider } from '@farris/ui-personnel-selector';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { TranslateService, TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { Injectable, NgModule, Injector, ComponentFactoryResolver, Pipe, Inject, LOCALE_ID, InjectionToken, Optional, Component, HostBinding, Output, EventEmitter, Input, ViewChild, ChangeDetectorRef, ElementRef, ViewContainerRef, NgZone, defineInjectable } from '@angular/core';
import { BpmnModelHelper, Expression, DataType, DataTypes, DataObject, FlowNodeState, MultiInstanceLoopCharacteristics, Signal, ParallelGateway, BpmnModel, SequenceFlowState } from '@edp-pmf/bpmn-model';
import { ElementPropertyConfig, PmfEvents, ProcessCell, Graph, Sidebar, BpmnCellHelper, ExclusiveGatewayCell, NodeCell, ParallelGatewayCell, EndEventCell, InclusiveGatewayCell, EditorUi, ActionKeys, ToolboxGroup, ToolboxItem, SequenceFlowEdge } from '@edp-pmf/grapheditor';
import { Condition, CounterSignRule, ValuedDataObject, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, OrganizationParticipantExpression, VariableSetting, Component as Component$1, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, ProcessHeader, StartMode, CDTSchemaType, ToolTime, ExecuteForm, ActualParameter, TitleExpression, CustomizeAction, MessageNotice, TimeLimitControl, ExtendProperty, ImageSettings, TimeLimitControlInfo, SendMessageExpireOperationInfo, SendMessageExpireOperation, AutoHandleExpireOperation, AutoHandleExpireOperationInfo, SmsMessageTemplate, SmsMessageVariable, UserActivity, AifCreationBillActivity, AutoActivity, CallActivitySubProcess, BackWardRule, SemanticExpression, IntermediateCatchEventImpl, SignalEventDefinitionImpl, MessageActivity, NotifyActivity, ActionScope, PotentialOwnerImpl, HumanPerformerImpl, OtherAssignNodes, OperationActivity, StartActivity, UrgeHandleRule, ApprovalPivot, ApprovalPivotConfig, CheckCondition, JumpScope, ParticipantSetting, AssignPerformerConfig, ConclusionItem, ExecuteWorkItemMode, WorkFlowAction, DisplayTerminal, AssignmentStrategy, ParticipantExpression, OtherAssignActivityNodeInfo, OrganizationLevel } from '@gsp-wf/wf-process-model';
import { mxResources, mxEventObject, mxConstants, mxUtils, mxGeometry, mxEvent } from '@edp-pmf/mxgraph-ts';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfProcessEditorService {
    constructor() { }
}
WfProcessEditorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WfProcessEditorService.ctorParameters = () => [];
/** @nocollapse */ WfProcessEditorService.ngInjectableDef = defineInjectable({ factory: function WfProcessEditorService_Factory() { return new WfProcessEditorService(); }, token: WfProcessEditorService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ProcessTime = {
    dt: 'dt',
    rt: 'rt',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FlowFormInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WF_LANG_RESOURCES = new InjectionToken("WF_LANG_RESOURCES");
class WfLocalePipe {
    /**
     * @param {?} localeId
     * @param {?} resources
     */
    constructor(localeId, resources) {
        this.defaultLang = "zh-CHS";
        this.langCode = localeId || this.defaultLang;
        this.resources = resources || {};
        this.lang = resources[this.langCode] || resources[this.defaultLang] || {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        /** @type {?} */
        const keys = name.split(".");
        /** @type {?} */
        let temp = this.lang;
        for (let key of keys) {
            temp = temp[key];
            if (temp == null) {
                break;
            }
        }
        return temp || name;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    instant(name) {
        return this.transform(name);
    }
}
WfLocalePipe.decorators = [
    { type: Pipe, args: [{ name: 'wfLocale' },] }
];
/** @nocollapse */
WfLocalePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WF_LANG_RESOURCES,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessDesignerUIState {
    /**
     * @param {?} http
     * @param {?} localePipe
     */
    constructor(http, localePipe) {
        this.http = http;
        this.localePipe = localePipe;
        this.rootPath = '';
        // 入口单据Info
        this.flowFormInfo = new FlowFormInfo();
        // Model上下文
        this.content = '';
        // 属性框
        this.propertyConfig = [];
        this.propertyData = {};
        // 设计器地址
        this.POST_MESSAGE_TARGET = window.document.location.origin + this.rootPath + '/platform/runtime/wf/web/designer/index.html';
        this.schemas = [];
        // 审批活动属性
        this.counterSignVariables = [];
        this.approvalItems = [];
        // 流程的审批活动节点信息
        this.userActList = [];
        // 流程包括结束和审批活动节点的信息
        this.allActList = [];
        // 流程包括审批活动，知会活动，消息的节点信息
        this.MessageActList = [];
        this.NotifyActKist = [];
        this.SubAndCatchActList = [];
        this.enableAdminOrgAut = false;
        this.enableFlowFormAut = false;
        // 流程管理员信息
        this.isAdministratorConfig = false;
        // 审批活动属性枚举===========================================================================================
        this.assignIterator = [{ key: 'ALL', value: this.localePipe.transform("app.processDesigner.all") },
            { key: 'ASSIGN', value: this.localePipe.transform("app.processDesigner.assign") },
            { key: 'CLAIM', value: this.localePipe.transform("app.processDesigner.claim") }];
        this.completeIterator = [{ key: 'Preempt', value: this.localePipe.transform("app.processDesigner.preempt") },
            { key: 'Parallel', value: this.localePipe.transform("app.processDesigner.parallel") },
            { key: 'Sequential', value: this.localePipe.transform("app.processDesigner.sequential") }];
        this.completeIterator4Claim = [{ key: 'Preempt', value: this.localePipe.transform("app.processDesigner.preempt") }];
        this.boolIterator = [{ key: true, value: this.localePipe.transform("app.processDesigner.true") },
            { key: false, value: this.localePipe.transform("app.processDesigner.false") }];
        // 会签不允许跳转
        this.noJump4Sign = [{ key: false, value: this.localePipe.transform("app.processDesigner.false") }];
        // =================================================================================================
        // 流程实例上下文-----------------------------------------------
        this.procInstContext = [
            { key: 'dataId', name: this.localePipe.transform("app.processDesigner.dataId"), description: 'this.localePipe.transform("app.processDesigner.dataId")' },
            { key: 'procInstId', name: this.localePipe.transform("app.processDesigner.procInstId"), description: this.localePipe.transform("app.processDesigner.procInstId") },
            { key: 'bizDefKey', name: this.localePipe.transform("app.processDesigner.bizDefKey"), description: this.localePipe.transform("app.processDesigner.bizDefKey") },
            { key: 'processDefinitionKey', name: this.localePipe.transform("app.processDesigner.processDefinitionKey"), description: this.localePipe.transform("app.processDesigner.processDefinitionKey") },
            { key: 'procInstCreator', name: this.localePipe.transform("app.processDesigner.procInstCreator"), description: this.localePipe.transform("app.processDesigner.procInstCreator") },
            { key: 'businessCreator', name: this.localePipe.transform("app.processDesigner.businessCreator"), description: this.localePipe.transform("app.processDesigner.businessCreator") },
            { key: 'procInstDescription', name: this.localePipe.transform("app.processDesigner.procInstDescription"), description: this.localePipe.transform("app.processDesigner.procInstDescription") },
            { key: 'comment', name: this.localePipe.transform("app.processDesigner.comment"), description: this.localePipe.transform("app.processDesigner.comment") },
            { key: 'bizDefName', name: this.localePipe.transform("app.processDesigner.bizDefName"), description: this.localePipe.transform("app.processDesigner.bizDefName") },
            { key: 'curLoginUsername', name: this.localePipe.transform("app.processDesigner.curLoginUsername"), description: this.localePipe.transform("app.processDesigner.curLoginUsername") },
            { key: 'procInstCreatorName', name: this.localePipe.transform("app.processDesigner.procInstCreatorName"), description: this.localePipe.transform("app.processDesigner.procInstCreatorName") },
            { key: 'currentParticipantId', name: this.localePipe.transform("app.processDesigner.currentParticipantId"), description: this.localePipe.transform("app.processDesigner.currentParticipantId") },
            { key: 'currentParticipantName', name: this.localePipe.transform("app.processDesigner.currentParticipantName"), description: this.localePipe.transform("app.processDesigner.currentParticipantName") }
        ];
        // 催办上下文--------------------------------------------------
        this.urgeContext = [
            { key: 'dataId', name: this.localePipe.transform("app.processDesigner.dataId"), description: this.localePipe.transform("app.processDesigner.dataId") },
            { key: 'procInstId', name: this.localePipe.transform("app.processDesigner.procInstId"), description: this.localePipe.transform("app.processDesigner.procInstId") },
            { key: 'bizDefKey', name: this.localePipe.transform("app.processDesigner.bizDefKey"), description: this.localePipe.transform("app.processDesigner.bizDefKey") },
            { key: 'processDefinitionKey', name: this.localePipe.transform("app.processDesigner.processDefinitionKey"), description: this.localePipe.transform("app.processDesigner.processDefinitionKey") },
            { key: 'procInstCreator', name: this.localePipe.transform("app.processDesigner.procInstCreator"), description: this.localePipe.transform("app.processDesigner.procInstCreator") },
            { key: 'businessCreator', name: this.localePipe.transform("app.processDesigner.businessCreator"), description: this.localePipe.transform("app.processDesigner.businessCreator") },
            { key: 'procInstDescription', name: this.localePipe.transform("app.processDesigner.procInstDescription"), description: this.localePipe.transform("app.processDesigner.procInstDescription") },
            { key: 'comment', name: this.localePipe.transform("app.processDesigner.comment"), description: this.localePipe.transform("app.processDesigner.comment") },
            { key: 'bizDefName', name: this.localePipe.transform("app.processDesigner.bizDefName"), description: this.localePipe.transform("app.processDesigner.bizDefName") },
            { key: 'curLoginUsername', name: this.localePipe.transform("app.processDesigner.curLoginUsername"), description: this.localePipe.transform("app.processDesigner.curLoginUsername") },
            { key: 'procInstCreatorName', name: this.localePipe.transform("app.processDesigner.procInstCreatorName"), description: this.localePipe.transform("app.processDesigner.procInstCreatorName") }
        ];
        /**
         * 流程参数上下文
         */
        this.formalParameterContext = [];
        /**
         * 参与者上下文
         */
        this.participantContext = [
            {
                key: 'procInstCreator',
                name: this.localePipe.transform("app.processDesigner.procInstCreator"),
                description: this.localePipe.transform("app.processDesigner.procInstCreator")
            }, {
                key: 'businessCreator',
                name: this.localePipe.transform("app.processDesigner.businessCreator"),
                description: this.localePipe.transform("app.processDesigner.businessCreator")
            }, {
                key: 'currentUser',
                name: this.localePipe.transform("app.processDesigner.currentUser"),
                description: this.localePipe.transform("app.processDesigner.currentUser")
            }, {
                key: 'preActExecutors',
                name: this.localePipe.transform("app.processDesigner.preActExecutors"),
                description: this.localePipe.transform("app.processDesigner.preActExecutors")
            }
        ];
        /**
         * 子活动上下文
         */
        this.subActivityContext = [
            {
                key: 'collectionElementVariable',
                name: this.localePipe.transform("app.processDesigner.collectionElementVariable"),
                description: this.localePipe.transform("app.processDesigner.collectionElementVariable")
            }
        ];
        /**
         * 子流程元素上下文
         */
        this.subProcessElementContext = [
            {
                key: 'subCollectionElementVariable',
                name: this.localePipe.transform("app.processDesigner.subCollectionElementVariable"),
                description: this.localePipe.transform("app.processDesigner.subCollectionElementVariable")
            }
        ];
        /**
         * 多实例启用条件上下文
         */
        this.multiCounterSignVariables = [
            { key: 'nrOfInstances', name: this.localePipe.transform("app.processDesigner.nrOfInstances"), description: this.localePipe.transform("app.processDesigner.nrOfInstances") },
            { key: 'nrOfCompletedInstances', name: this.localePipe.transform("app.processDesigner.nrOfCompletedInstances"), description: this.localePipe.transform("app.processDesigner.nrOfCompletedInstances") },
            { key: 'nrOfActiveInstances', name: this.localePipe.transform("app.processDesigner.nrOfActiveInstances"), description: this.localePipe.transform("app.processDesigner.nrOfActiveInstances") },
            { key: 'nrOfForward', name: this.localePipe.transform("app.processDesigner.nrOfForward"), description: this.localePipe.transform("app.processDesigner.nrOfForward") },
            { key: 'nrOfBackward', name: this.localePipe.transform("app.processDesigner.nrOfBackward"), description: this.localePipe.transform("app.processDesigner.nrOfBackward") },
            { key: 'nrOfAbort', name: this.localePipe.transform("app.processDesigner.nrOfAbort"), description: this.localePipe.transform("app.processDesigner.nrOfAbort") }
        ];
        /**
         * 活动构件参数上下文
         */
        this.activityComponentContext = [
            {
                key: 'conclusionType',
                name: this.localePipe.transform("app.processDesigner.conclusionType"),
                description: this.localePipe.transform("app.processDesigner.conclusionTypeTips")
            }, {
                key: 'conclusionValue',
                name: this.localePipe.transform("app.processDesigner.conclusionValue"),
                description: this.localePipe.transform("app.processDesigner.conclusionValueTips")
            }
        ];
        this.processVariableContext = new Array();
        this.processVariables = new Array();
        /**
         * 汇报级次
         */
        this.dimensions = [
            { value: 'directSuperior', text: this.localePipe.transform("app.processDesigner.directSuperior") },
            { value: 'higherSuperior', text: this.localePipe.transform("app.processDesigner.higherSuperior") }
        ];
        /**
         * 启动方式
         */
        this.startModeIterator = [
            { key: 'DIRECT', value: this.localePipe.transform("app.processDesigner.DIRECT") },
            { key: 'EXTERNAL_PROCESS', value: this.localePipe.transform("app.processDesigner.EXTERNAL_PROCESS") },
            { key: 'SUB_PROCESS', value: this.localePipe.transform("app.processDesigner.SUB_PROCESS") }
        ];
        /**
         * 显示终端
         */
        this.displayTerminal = [
            { key: "ALL", value: this.localePipe.transform("app.processDesigner.ALL") },
            { key: "WEB", value: this.localePipe.transform("app.processDesigner.WEB") },
            { key: "APP", value: this.localePipe.transform("app.processDesigner.APP") }
        ];
        /**
         * 消息渠道列表
         */
        this.messageChannels = new Array();
        this.orgTypeCollection = [];
        try {
            this.rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
    }
    /**
     * @param {?} variables
     * @return {?}
     */
    set ProcessVariables(variables) {
        this.processVariables = variables;
        this.setProcessVariableContext();
    }
    /**
     * @return {?}
     */
    get ProcessVariables() {
        return this.processVariables;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    variableContextName(key) {
        return this.participantContext.find((/**
         * @param {?} i
         * @return {?}
         */
        i => i.key === key)).name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ranksName(value) {
        return this.dimensions.find((/**
         * @param {?} i
         * @return {?}
         */
        i => i.value === value)).text;
    }
    /**
     * @return {?}
     */
    getMessageChannels() {
        /** @type {?} */
        const url = '/api/runtime/msg/v1.0/messageplatform/channel/getenabledchannels';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.messageChannels = re;
        }));
    }
    /**
     * @return {?}
     */
    getAdministratorInfo() {
        this.getCurrentUser().subscribe((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            /** @type {?} */
            const userId = user.userId;
            forkJoin(this.getAdministratorConfig(), this.getAdministrator(userId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.isAdministratorConfig = re[0].currentValue === 'true' ? true : false;
                this.administrator = re[1];
            }));
        }));
    }
    /**
     * @return {?}
     */
    getEnableAdminOrgAut() {
        return this.getEnableProcessDesignerDataAut('WF_AdminOrg');
    }
    /**
     * @return {?}
     */
    getEnableFlowFormAut() {
        return this.getEnableProcessDesignerDataAut('WF_FlowForm');
    }
    /**
     * @private
     * @param {?} authField
     * @return {?}
     */
    getEnableProcessDesignerDataAut(authField) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/dtProcDefs/enableProcessDesignerDataAut/' + authField;
        return this.http.get(url);
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentUser() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/userinfos?infoType=user';
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    getAdministrator(userId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processAdministrator/${userId}`;
        return this.http.get(url);
    }
    /**
     * @return {?}
     */
    getReleaseConfig() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/generalConfig/Is_Enable_Examine`;
        return this.http.get(url);
    }
    /**
     * @private
     * @return {?}
     */
    getAdministratorConfig() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/generalConfig/Is_EnableAdministrator`;
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    getSysOrgById(orgId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/sysOrgs/${orgId}`;
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    getSysOrgWithAllSubsById(orgId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/sysOrgs?param=` + encodeURIComponent(`{"parentId":"${orgId}","withAllSub":true}`);
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    getCurUserInfo(userId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/users/${userId}`;
        return this.http.get(url);
    }
    /**
     * @return {?}
     */
    getOrgConfig() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/generalConfig/Is_Required_Organization`;
        return this.http.get(url);
    }
    /**
     * 获取当前用户信息
     * @return {?}
     */
    getUserInfo() {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/userinfos?infoType=user`;
        return this.http.get(url);
    }
    /**
     * 流程审核：新增
     * @return {?}
     */
    createData() {
        /** @type {?} */
        const url = `/api/bpms/wf/v1.0/processrelease_frm`;
        /** @type {?} */
        const requestInfo = {
            dataChange: [],
            variableChange: null
        };
        return this.http.post(url, requestInfo);
    }
    /**
     * 流程审核：保存
     * @param {?} data
     * @return {?}
     */
    releaseSave(data) {
        /** @type {?} */
        const requestInfo = {
            dataChange: [data],
            variableChange: null
        };
        /** @type {?} */
        const url = `/api/bpms/wf/v1.0/processrelease_frm`;
        return this.http.put(url, requestInfo);
    }
    /**
     * @private
     * @return {?}
     */
    setProcessVariableContext() {
        this.processVariableContext = new Array();
        if (this.ProcessVariables && this.ProcessVariables.length > 0) {
            for (const v of this.ProcessVariables) {
                /** @type {?} */
                const varEntity = {
                    key: v.name,
                    name: v.documentation,
                    description: v.description
                };
                this.processVariableContext.push(varEntity);
            }
        }
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    getHelpMetaData(helpId, su) {
        /** @type {?} */
        const url = `/api/runtime/lcm/v1.0/rt-metadatas/${helpId}`;
        return this.http.get(url);
    }
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @private
     * @return {?}
     */
    getTopWindow() {
        /** @type {?} */
        let curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    }
    // --------------------------0-------------------------
    // uiState初始
    /**
     * @return {?}
     */
    initUIState() {
        this.propertyConfig = [];
        this.propertyData = null;
        this.content = '';
        this.schemas = [];
    }
    /**
     * 获取所有审批节点信息
     * @param {?} data
     * @return {?}
     */
    getUserActList(data) {
        this.userActList = [];
        if (data && data.length > 0) {
            for (const userAct of data) {
                /** @type {?} */
                const userActInfo = {
                    Id: userAct.Id,
                    Name: userAct.NameLanguage ? (userAct.NameLanguage[this.localePipe.langCode] ? userAct.NameLanguage[this.localePipe.langCode] : userAct.Name) : userAct.Name,
                    ClrTypeID: userAct.ClrTypeID,
                    AssignmentStrategy: userAct.AssignmentStrategy
                };
                if (userAct.AssignmentStrategy === 'ASSIGN') {
                    userActInfo.AssignPerformerConfig = userAct.AssignPerformerConfig;
                }
                this.userActList.push(userActInfo);
            }
        }
    }
    /**
     * 获取所有结束节点信息
     * @param {?} data
     * @return {?}
     */
    getEndEventList(data) {
        this.allActList = [];
        if (data && data.length > 0) {
            for (const endEvent of data) {
                /** @type {?} */
                const endEventInfo = {
                    Id: endEvent.Id,
                    Name: endEvent.Name
                };
                // 取结束节点存到
                this.allActList.push(endEventInfo);
            }
        }
        // // 存入审批活动节点
        // this.allActList = this.allActList.concat(this.userActList);
    }
    /**
     * 获取所有知会活动节点信息
     * @param {?} data
     * @return {?}
     */
    getNotifyEventList(data) {
        this.NotifyActKist = [];
        if (data && data.length > 0) {
            for (const notifyEvent of data) {
                /** @type {?} */
                const notifyEventInfo = {
                    Id: notifyEvent.Id,
                    Name: notifyEvent.Name
                };
                // 取知会活动，消息节点存到
                this.NotifyActKist.push(notifyEventInfo);
            }
        }
    }
    //TODO: 只有审批\审批+人工\审批+人工+知会\审批、人工、子流程、信号捕获
    /**
     * 获取所有消息节点信息
     * @param {?} data
     * @return {?}
     */
    getMessageEventList(data) {
        this.MessageActList = [];
        if (data && data.length > 0) {
            for (const messageEvent of data) {
                /** @type {?} */
                const messageEventInfo = {
                    Id: messageEvent.Id,
                    Name: messageEvent.Name
                };
                // 取知会活动，消息节点存到
                this.MessageActList.push(messageEventInfo);
            }
        }
        // 存入审批活动节点
        this.MessageActList = this.MessageActList.concat(this.NotifyActKist);
        // 存入审批活动节点
        this.MessageActList = this.MessageActList.concat(this.userActList);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getSubAndCatchEventsList(data) {
        this.SubAndCatchActList = [];
        if (data && data.length > 0) {
            for (const subAndCatchEvent of data) {
                /** @type {?} */
                const subAndCatEventInfo = {
                    Id: subAndCatchEvent.Id,
                    Name: subAndCatchEvent.Name
                };
                // 取知会活动，消息节点存到
                this.SubAndCatchActList.push(subAndCatEventInfo);
            }
        }
    }
    /**
     * 获取当前流程启动方式
     * @param {?} data
     * @return {?}
     */
    getStartMode(data) {
        this.startMode = data;
    }
    /**
     * 添加上下文变量
     * @param {?} context
     * @return {?}
     */
    addContext(context) {
        if (this.procInstContext.length > 0) {
            for (const variable of this.procInstContext) {
                context.push(variable);
            }
        }
        if (this.formalParameterContext.length > 0) {
            for (const variable of this.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.participantContext.length > 0) {
            for (const variable of this.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.processVariableContext.length > 0) {
            for (const variable of this.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        return context;
    }
}
ProcessDesignerUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerUIState.ctorParameters = () => [
    { type: HttpService },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessDeUtil {
    constructor() { }
    /**
     * @return {?}
     */
    static GenerateElementId() {
        return BpmnModelHelper.GenerateElementId();
    }
    /**
     * 创建内码
     * @return {?}
     */
    static createNM() {
        /**
         * @return {?}
         */
        function S4() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static initVariableType(value) {
        if (value) {
            if (value.length >= 8 && value.slice(0, 8) === `{"expr":`) {
                return 'expression';
            }
            else {
                return 'constant';
            }
        }
        else {
            return 'variable';
        }
    }
    /**
     * @return {?}
     */
    getProcessDesignerRouter() {
        /** @type {?} */
        const url = 'processList';
        return url;
    }
    // 获取流程分类webapi
    /**
     * @return {?}
     */
    getFlowFormWebApi() {
        return '/api/runtime/wf/v1.0/flowForm';
    }
    // 获取参数列表webapi
    /**
     * @return {?}
     */
    getFormalParametersWebApi() {
        return '/api/runtime/wf/v1.0/formalParameter';
    }
    // 获取运行时元数据webapi
    /**
     * @return {?}
     */
    getMetaDataRUWebApi() {
        return '/api/runtime/lcm/v1.0/rt-metadatas/';
    }
    // 获取流程构件webapi
    /**
     * @return {?}
     */
    getBizComponentsWebApi() {
        return '/api/runtime/wf/v1.0/bizComponent';
    }
    // 基于流程分类获取表单定义
    /**
     * @return {?}
     */
    getExcuteFormsWebApi() {
        return '/api/runtime/wf/v1.0/excuteForm';
    }
    // 获取设计时流程定义WebAPi
    /**
     * @return {?}
     */
    getProcessDefinitionWebApi() {
        return '/api/runtime/wf/v1.0/dtProcDefs';
    }
    // 判断是否允许删除流程定义的api
    /**
     * @return {?}
     */
    getCheckExistActiveProcDefApi() {
        return '/api/runtime/wf/v1.0/procDefs/checkExistActiveProcDef';
    }
    /**
     * 获取业务活动webApi
     * @param {?} ffId
     * @return {?}
     */
    getBizActivityWebApi(ffId) {
        return `/api/runtime/wf/v1.0/bizActivity?flowFormKey=${ffId}`;
    }
    /**
     * @return {?}
     */
    getProcDefKeyWebApi() {
        return '/api/runtime/wf/v1.0/procDefs/processDefinitionKeys';
    }
    /**
     * 发布流程api
     * @return {?}
     */
    deployWebApi() {
        return '/api/runtime/wf/v1.0/procDefs/deploy';
    }
    /**
     * 保存流程api
     * @return {?}
     */
    saveWebApi() {
        return '/api/runtime/wf/v1.0/DTProcessDefinitions/SaveBpmnModel';
    }
    /**
     * 获取审批动作webapi
     * @return {?}
     */
    getApprovalActionWebApi() {
        return '/api/runtime/wf/v1.0/approvalAction';
    }
    /**
     * 获取运行时流程定义WebAPi
     * @return {?}
     */
    getRTProcessDefinitionWebApi() {
        return '/api/runtime/wf/v1.0/procDefs';
    }
    /**
     * @param {?} data
     * @param {?} code
     * @return {?}
     */
    getValue(data, code) {
        if (!code) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (code.indexOf('.') === -1) {
            resultVal = data[code];
        }
        else {
            resultVal = code.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        return resultVal;
    }
    /**
     * 转换
     * @param {?} jsonObj Object
     * @return {?}
     */
    toUpperCase(jsonObj) {
        if (typeof (jsonObj) === 'object') {
            for (const key of Object.keys(jsonObj)) {
                jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                delete (jsonObj[key]);
            }
        }
        return jsonObj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    toLowCase(jsonObj) {
        if (typeof (jsonObj) === 'object') {
            for (const key of Object.keys(jsonObj)) {
                if ((key.substring(0, 1).toLowerCase() + key.substring(1)) !== key) {
                    jsonObj[key.substring(0, 1).toLowerCase() + key.substring(1)] = jsonObj[key];
                    delete (jsonObj[key]);
                }
            }
        }
        return jsonObj;
    }
}
ProcessDeUtil.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDeUtil.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessDesignerDataService {
    /**
     * @param {?} http
     * @param {?} util
     */
    constructor(http, util) {
        this.http = http;
        this.util = util;
    }
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    GetFlowFormbyId(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getFlowFormWebApi() + '/getFlowForm';
            url += `/${id}`;
            return this.http.get(url);
        }
    }
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    getParametersbyFlowFormKey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getFormalParametersWebApi();
            url += `?flowFormKey=${id}`;
            return this.http.get(url);
        }
    }
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    getComponentsbyFlowformkey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getBizComponentsWebApi();
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${id}"}`);
            return this.http.get(url);
        }
    }
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    getExecuteFormbyFlowFormKey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getExcuteFormsWebApi();
            url += `?flowFormKey=${id}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    getBizActivities(ffId) {
        if (ffId) {
            /** @type {?} */
            const url = this.util.getBizActivityWebApi(ffId);
            return this.http.get(url);
            // .pipe(
            //     map((re: any) => re),
            //     mergeMap((activities: any[]) => {
            //         if (activities && activities.length > 0) {
            //             return forkJoin(activities.map(activity => {
            //                 return forkJoin(this.getBizActivityComponents(ffId, activity.id),
            //                     this.getBizActivityActions(activity.id))
            //                     .pipe(
            //                         map((re: any[]) => {
            //                             activity.components = re[0];
            //                             activity.actions = re[1];
            //                             return activity;
            //                         }));
            //             }));
            //         } else {
            //             return of([]);
            //         }
            //     })
            // );
        }
    }
    /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    getCustomizeActions(formId) {
        if (formId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/customizeAction?flowFormKey=${formId}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    getBizActivityComponents(flowFormId, id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getBizComponentsWebApi();
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${flowFormId}","owner":"${id}","ownerType":"Activity"}`);
            return this.http.get(url);
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getBizActivityActions(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getApprovalActionWebApi();
            url += `?bizActivityId=${id}`;
            return this.http.get(url);
        }
    }
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    getBusinessEntitybyId(id) {
        if (id) {
            // let url = this.util.getMetaDataRUWebApi();
            // url += id;
            // const url = `/api/runtime/lcm/v1.0/bef/handledBeMeta?beId=${id}`;
            /** @type {?} */
            const url = `/api/runtime/lcm/v1.0/bef/expression?beId=${id}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    getProcContentbyKey(key) {
        if (key) {
            /** @type {?} */
            let url = this.util.getProcessDefinitionWebApi();
            url += `/bpmnModel?procDefKey=${key}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    getRTProcContentbyId(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getRTProcessDefinitionWebApi();
            url += `/${id}/bpmnModel`;
            return this.http.get(url);
        }
    }
    /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    saveProcess(content, processInfo, state) {
        if (content) {
            /** @type {?} */
            const postData = {
                organization: processInfo.procOrg ? processInfo.procOrg.orgId : '',
                organizationName: processInfo.procOrg ? processInfo.procOrg.orgName : '',
                accessLevel: processInfo.accessLevel,
                procContent: content,
                state
            };
            /** @type {?} */
            const url = this.util.getProcessDefinitionWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} info
     * @return {?}
     */
    auditProcessDef(info) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/dtProcDefs/auditProcessDef';
        this.http.post(url, info).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => { }));
    }
    /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    deployProcess(content) {
        if (content) {
            /** @type {?} */
            const postData = {
                procDefContent: content
            };
            /** @type {?} */
            const url = this.util.deployWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    saveRTProcess(content, procDefId) {
        if (content) {
            /** @type {?} */
            const postData = {
                procDefContent: content
            };
            /** @type {?} */
            let url = this.util.getRTProcessDefinitionWebApi();
            url += `/${procDefId}/adjust`;
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    syncDtProcess(content, rtProcessInfo) {
        if (content) {
            /** @type {?} */
            const postData = {
                organization: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgId : '',
                organizationName: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgName : '',
                accessLevel: rtProcessInfo.accessLevel || 'public',
                procContent: content,
                state: 0
            };
            /** @type {?} */
            const url = '/api/runtime/wf/v1.0/dtProcDefs';
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * 获取流程扩展属性
     * @param {?} bizDefKey
     * @param {?} startMode
     * @param {?} bizCategoryId
     * @return {?}
     */
    getProcExtendProperty(bizDefKey, startMode, bizCategoryId) {
        /** @type {?} */
        let filter = '{';
        filter += `"bizDefKey":"${bizDefKey}",`;
        filter += `"bizCategoryId":"${bizCategoryId}",`;
        filter += `"startMode":"${startMode}"`;
        filter += '}';
        filter = encodeURIComponent(filter);
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/procExtendProperty?param=${filter}`;
        return this.http.get(url);
    }
    /**
     * 获取流程构件
     * @return {?}
     */
    getBizCmp() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/bizComponent?flowFormKey=*&owner=*&ownerType=Process`;
        return this.http.get(url);
    }
    /**
     * 获取全部流程构件
     * @param {?} flowFormKey
     * @return {?}
     */
    getAllBizCmp(flowFormKey) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/bizComponent?flowFormKey=${flowFormKey}&owner=${flowFormKey}&ownerType=Process`;
        return this.http.get(url);
    }
    /**
     * 获取表单格式
     * @param {?} bizCategoryId
     * @return {?}
     */
    getFormFormat(bizCategoryId) {
        if (bizCategoryId == null) {
            return of(null);
        }
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/formFormat/query?param=%7B%22bizCategory%22%3A%22${bizCategoryId}%22%7D`;
        return this.http.get(url);
    }
    /**
     * 获取配置
     * @return {?}
     */
    getGeneralConfig() {
        return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableTransfer").pipe(switchMap((/**
         * @param {?} enableTransfer
         * @return {?}
         */
        (enableTransfer) => {
            return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableNotify").pipe(switchMap((/**
             * @param {?} enableNotify
             * @return {?}
             */
            (enableNotify) => {
                return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableAddSignBehind").pipe(switchMap((/**
                 * @param {?} enableAddSignBehind
                 * @return {?}
                 */
                (enableAddSignBehind) => {
                    return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableAddSignFront").pipe(switchMap((/**
                     * @param {?} enableAddSignFront
                     * @return {?}
                     */
                    (enableAddSignFront) => {
                        /** @type {?} */
                        const res = {
                            enableTransfer: JSON.parse(enableTransfer.currentValue),
                            enableNotify: JSON.parse(enableNotify.currentValue),
                            enableAddSignBehind: JSON.parse(enableAddSignBehind.currentValue),
                            enableAddSignFront: JSON.parse(enableAddSignFront.currentValue)
                        };
                        return of(res);
                    })));
                })));
            })));
        })));
    }
}
ProcessDesignerDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerDataService.ctorParameters = () => [
    { type: HttpService },
    { type: ProcessDeUtil }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ProcessClrTypeID = {
    /**
     * 流程typeId
     */
    process: 'bpmn.Process',
    /**
     * 开始活动typeId
     */
    startActivity: 'wf.StartActivity',
    /**
     * 活动节点typeId
     */
    userActivity: 'wf.UserActivity',
    /**
     * 人工操作typeId
     */
    operationActivity: 'wf.OperationActivity',
    /**
     * 结束活动typeId
     */
    endEvent: 'bpmn.EndEvent',
    /**
     * 流转线typeId
     */
    sequenceFlow: 'bpmn.SequenceFlow',
    /**
     * 排他网关typeId
     */
    exclusiveGateway: 'bpmn.ExclusiveGateway',
    /**
     * 并行网关typeId
     */
    parallelGateway: 'bpmn.ParallelGateway',
    /**
     * 子流程
     */
    subProcess: 'wf.CallActivitySubProcess',
    /**
     * 服务活动
     */
    autoActivity: 'wf.AutoActivity',
    /**
     * 信号捕获
     */
    catchEvent: 'wf.IntermediateCatchEventImpl',
    /**
     * 消息
     */
    messageActivity: 'wf.MessageActivity',
    /**
     * 知会活动
     */
    notifyActivity: "wf.NotifyActivity",
    /**
     * 生单活动
     */
    aifCreationBillActivity: "wf.AifCreationBillActivity",
    billNodeActivity: "wf.AifBillNodeActivity",
    sequenceActivity: "wf.AifSequenceActivity",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntryFormEditorComponent {
    /**
     * @param {?} http
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, message, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.entryFormEditor.flowForm'),
            width: 760,
            height: 506,
            showButtons: true
        };
        this.columns = [
            { title: this.localePipe.transform('component.entryFormEditor.code'), field: 'code', width: 100, sortable: true },
            { title: this.localePipe.transform('component.entryFormEditor.name'), field: 'name', width: 100, sortable: true },
            { title: this.localePipe.transform('component.entryFormEditor.base'), field: 'base', width: 60,
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.entryFormEditor.extend'), falseText: this.localePipe.transform('component.entryFormEditor.foundation') } } }
        ];
        this.data = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.flowFormId = data.id;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getBaseAndExtendFlowForm();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (!this.grid.selectedRow) {
            this.message.info(this.localePipe.transform('component.entryFormEditor.selectedRow'));
            return;
        }
        /** @type {?} */
        const object = { value: this.grid.selectedRow.data, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    getBaseAndExtendFlowForm() {
        if (this.flowFormId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/flowForm/${this.flowFormId}/baseAndExtend`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re && re.length > 0) {
                    this.data = re;
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.grid.selectRow(this.flowFormId, true);
                    }), 0);
                }
                else {
                    this.message.info(this.localePipe.transform('component.entryFormEditor.absent'));
                }
            }));
        }
    }
}
EntryFormEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-entry-form-editor',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;margin-left: 6px;margin-right: 6px;\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.entryFormEditor.lineNumber' | wfLocale}}\"\r\n         [lineNumberWidth]=\"50\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.entryFormEditor.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.entryFormEditor.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EntryFormEditorComponent.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EntryFormEditorComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    editorParams: [{ type: Input }]
};
class FlowFormConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data.name;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityComponentUIState {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
        /**
         * 构件列表
         */
        this.components = [];
        /**
         * 流程分类绑定的所有活动构件
         */
        this.allComponents = [];
        /**
         * 构件执行时机数据绑定
         */
        this.executionCollection = [
            // { text: '流程创建', value: 'PROCESSINSTANCE_CREATED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_STARTED"), value: 'PROCESSINSTANCE_STARTED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_SUSPENDED"), value: 'PROCESSINSTANCE_SUSPENDED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_RESUMED"), value: 'PROCESSINSTANCE_RESUMED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_COMPLETED"), value: 'PROCESSINSTANCE_COMPLETED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_ABORTED"), value: 'PROCESSINSTANCE_ABORTED' },
            // { text: '流程预警', value: 'PROCESSINSTANCE_ALARM' },
            // { text: '流程超时', value: 'PROCESSINSTANCE_TIMEOUT' },
            // { text: '流程删除', value: 'PROCESSINSTANCE_DELETED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_CANCELED"), value: 'PROCESSINSTANCE_CANCELED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_REACTIVATED"), value: 'PROCESSINSTANCE_REACTIVATED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_ROLLBACK"), value: 'PROCESSINSTANCE_ROLLBACK' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_RESUBMIT"), value: 'PROCESSINSTANCE_RESUBMIT' },
            { text: this.localePipe.transform("component.activityComponent.ACTIVITY_AND_PARTICIPANT_UPDATED"), value: 'ACTIVITY_AND_PARTICIPANT_UPDATED' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_ABORTED_BY_ADMIN"), value: 'PROCESSINSTANCE_ABORTED_BY_ADMIN' },
            { text: this.localePipe.transform("component.activityComponent.PROCESSINSTANCE_BEFORE_START"), value: 'PROCESSINSTANCE_BEFORE_START' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_BEFORE_COMPLETE"), value: 'WORKITEM_BEFORE_COMPLETE' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_AFTER_COMPLETE"), value: 'WORKITEM_AFTER_COMPLETE' },
            { text: this.localePipe.transform("component.activityComponent.LOADDATA"), value: 'LOADDATA' }
        ];
        this.activityCollection = [
            // { text: '活动创建', value: 'ACTIVITY_CREATED' },
            { text: this.localePipe.transform("component.activityComponent.ACTIVITY_STARTED"), value: 'ACTIVITY_STARTED' },
            // { text: '活动挂起', value: 'ACTIVITY_SUSPENDED' },
            // { text: '活动恢复', value: 'ACTIVITY_RESUMED' },
            { text: this.localePipe.transform("component.activityComponent.ACTIVITY_COMPLETED"), value: 'ACTIVITY_COMPLETED' },
            { text: this.localePipe.transform("component.activityComponent.ACTIVITY_ABORTED"), value: 'ACTIVITY_ABORTED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_CREATED"), value: 'WORKITEM_CREATED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_COMPLETED"), value: 'WORKITEM_COMPLETED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_SUSPENDED"), value: 'WORKITEM_SUSPENDED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_RESUMED"), value: 'WORKITEM_RESUMED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_ABORTED"), value: 'WORKITEM_ABORTED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_RETRIEVED"), value: 'WORKITEM_RETRIEVED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_CLAIMED"), value: 'WORKITEM_CLAIMED' },
            { text: this.localePipe.transform("component.activityComponent.WORKITEM_UNCLAIMED"), value: 'WORKITEM_UNCLAIMED' },
            { text: this.localePipe.transform("component.activityComponent.ACTIVITY_ASSIGNMENT"), value: 'ACTIVITY_ASSIGNMENT' }
        ];
    }
}
ActivityComponentUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ActivityComponentUIState.ctorParameters = () => [
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizComponentEntity {
    /**
     * @param {?=} name
     * @param {?=} metadataid
     * @param {?=} method
     */
    constructor(name, metadataid, method) {
        this.id = ProcessDeUtil.GenerateElementId();
        this.name = name;
        this.metadataId = metadataid;
        this.methodCode = method;
        this.isForCompensation = false;
    }
}
/** @enum {string} */
const OwnerType = {
    Process: 'Process',
    Activity: 'Activity',
    Schema: 'Schema',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityComponentRepository {
    /**
     * @param {?} uistate
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     */
    constructor(uistate, util, http, designerState) {
        this.uistate = uistate;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.subject = new Subject();
    }
    /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    loadComponents(flowFormId, bizActId) {
        /** @type {?} */
        let url = this.util.getBizComponentsWebApi();
        if (bizActId) {
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${flowFormId}","owner":"${bizActId}","ownerType":"Activity"}`);
        }
        else {
            this.uistate.allComponents = [];
            return;
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.uistate.allComponents = data.filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.ownerType === OwnerType.Activity));
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeComponent(id) {
        if (id) {
            this.uistate.components = this.uistate.components.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id !== id));
        }
    }
    /**
     * @param {?} cpt
     * @return {?}
     */
    addComponent(cpt) {
        if (cpt) {
            /** @type {?} */
            const component = new BizComponentEntity(cpt.name, cpt.id, cpt.operations[0].code);
            component.id = ProcessDeUtil.GenerateElementId();
            component.actualParameters = this.bindParas(cpt);
            console.log(cpt);
            console.log(component.actualParameters);
            if (component.metadataId === '7433df25-9260-4c24-86f0-9da3e89450fb' ||
                component.metadataId === 'd0783800-ed60-488c-b053-8806a15947fe' ||
                component.metadataId === 'b89e9b9a-2e2d-4bd0-b354-187219544d34' ||
                component.metadataId === 'a8b8f7a4-49ae-4b7d-88d2-b3772b9d0ae5') {
                component.scopeType = 'ExternalProcess';
            }
            else {
                component.scopeType = 'DirectStart';
            }
            this.uistate.components.push(component);
            this.subject.next(component);
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    bindParas(component) {
        /** @type {?} */
        let parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({ code: p.code, name: p.name, value: '' })));
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    assignParameterValue(params) {
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('metadataId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}` };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('schemaId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}` };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"dataId\\")"}` };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"procInstId\\")"}` };
            }
            else {
                return { code: p.code, name: p.name, value: '' };
            }
        }));
    }
    /**
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
    // 获取是否预制了外部流程构件
    /**
     * @param {?} hander
     * @return {?}
     */
    getBizCmp(hander) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/bizComponent?flowFormKey=*&owner=*&ownerType=Process`;
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            hander(data);
        }));
    }
}
ActivityComponentRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ActivityComponentRepository.ctorParameters = () => [
    { type: ActivityComponentUIState },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityComponentViewModel {
    /**
     * @param {?} uistate
     * @param {?} repository
     * @param {?} messager
     * @param {?} localePipe
     */
    constructor(uistate, repository, messager, localePipe) {
        this.uistate = uistate;
        this.repository = repository;
        this.messager = messager;
        this.localePipe = localePipe;
    }
    /**
     * @return {?}
     */
    deleteRow() {
        if (this.uistate.curComponent) {
            if (this.uistate.curComponent.executionTime === 'LOADDATA') {
                this.messager.info(this.localePipe.transform('component.activityList.name'));
            }
            else {
                this.repository.removeComponent(this.uistate.curComponent.id);
            }
        }
        else {
            return;
        }
    }
    /**
     * @param {?} cpt
     * @return {?}
     */
    componentSelect(cpt) {
        if (cpt) {
            this.repository.addComponent(cpt);
        }
    }
    /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    loadComponents(flowFormId, bizActId) {
        this.repository.loadComponents(flowFormId, bizActId);
    }
}
ActivityComponentViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ActivityComponentViewModel.ctorParameters = () => [
    { type: ActivityComponentUIState },
    { type: ActivityComponentRepository },
    { type: MessagerService },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EditComponentParameterComponent {
    /**
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} sessionSrc
     * @param {?} componentService
     * @param {?} modalService
     * @param {?} message
     * @param {?} cd
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerState, expr, resolver, injector, sessionSrc, componentService, modalService, message, cd, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.componentService = componentService;
        this.modalService = modalService;
        this.message = message;
        this.cd = cd;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.paramColumns = [];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.executionTimingList = new Array();
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    ;
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.paramColumns = [
            { field: 'code', width: 50, title: this.localePipe.transform('component.editComponentParameter.code') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.editComponentParameter.name') },
            {
                field: 'required', width: 50, title: this.localePipe.transform('component.editComponentParameter.required'), formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    if (v) {
                        return this.localePipe.transform('component.editComponentParameter.yes');
                    }
                    else {
                        return this.localePipe.transform('component.editComponentParameter.no');
                    }
                })
            },
            {
                field: 'value', width: 100, title: this.localePipe.transform('component.editComponentParameter.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        // setTimeout(() => {
        //   this.cd.detectChanges();
        // },0 )
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.location === 'activity') {
            for (const variable of this.designerState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    /** @type {?} */
                    const component = new BizComponentEntity(result.name, result.id, result.operations[0].code);
                    component.id = ProcessDeUtil.GenerateElementId();
                    component.actualParameters = this.bindParas(result);
                    if (component.metadataId === '7433df25-9260-4c24-86f0-9da3e89450fb' ||
                        component.metadataId === 'd0783800-ed60-488c-b053-8806a15947fe' ||
                        component.metadataId === 'b89e9b9a-2e2d-4bd0-b354-187219544d34' ||
                        component.metadataId === 'a8b8f7a4-49ae-4b7d-88d2-b3772b9d0ae5') {
                        component.scopeType = 'ExternalProcess';
                    }
                    else {
                        component.scopeType = 'DirectStart';
                    }
                    this.curComponent = component;
                    this.cd.detectChanges();
                }
            }));
        }));
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    bindParas(component) {
        /** @type {?} */
        let parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({ code: p.code, name: p.name, value: '', required: p.code.toLowerCase() === 'wfcontext' ? false : p.required })));
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    assignParameterValue(params) {
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('metadataId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}`, required: true };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('schemaId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}`, required: true };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"dataId\\")"}`, required: true };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"procInstId\\")"}`, required: true };
            }
            else {
                return { code: p.code, name: p.name, value: '', required: true };
            }
        }));
    }
    /**
     * @return {?}
     */
    componentSelect() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            try {
                /** @type {?} */
                const meta = $event.metadata;
                this.openComponentSelectorNew(meta.id, this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error(this.localePipe.transform('component.editComponentParameter.openComponentFail') + $event);
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.editComponentParameter.componentSelection'),
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @return {?}
     */
    endCellEdit() {
        this.paramlist.endCellEdit();
    }
    /**
     * @return {?}
     */
    editOK() {
        // 结束构件参数编辑状态
        this.endCellEdit();
        if (this.validator()) {
            this.submitEmitter.emit(this.curComponent);
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @return {?}
     */
    validator() {
        if (!this.curComponent || !this.curComponent.metadataId || !this.curComponent.methodCode) {
            this.message.info(this.localePipe.transform('component.editComponentParameter.curComponent'));
            return false;
        }
        else if (this.location !== 'autoActivity' && !this.curComponent.executionTime) {
            this.message.info(this.localePipe.transform('component.editComponentParameter.executionTime'));
            return false;
        }
        else {
            /** @type {?} */
            let codeList = '';
            for (const param of this.curComponent.actualParameters) {
                if (param.required && !param.value) {
                    codeList = codeList + `，${param.code}`;
                }
            }
            if (codeList.length > 0) {
                codeList = codeList.slice(1, codeList.length);
                this.message.info(this.localePipe.transform('component.editComponentParameter.para') + '【' + codeList + this.localePipe.transform('component.editComponentParameter.paraRequired'));
                return false;
            }
        }
        return true;
    }
}
EditComponentParameterComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-edit-component-parameter',
                template: "<div *ngIf=\"curComponent\" class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n    <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n      <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n        <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n          <div class=\"farris-group-wrap mx-3\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-info text-danger\">*</span>\r\n                <span class=\"farris-label-text\">{{'component.editComponentParameter.componentSelection' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap ml-2\">\r\n                <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" name=\"method\" [showButtonWhenDisabled]=\"false\"\r\n                [enableClear]=\"false\" [editable]=\"false\" (clickHandle)=\"componentSelect()\" [groupText]=\"groupIcon\" [(ngModel)]=\"curComponent.name\" [disabled]=\"editState==='edit'\"></input-group>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"location!=='autoActivity'\">\r\n          <div class=\"farris-form-controls-inline farris-form-auto\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.editComponentParameter.execuTime' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <farris-combo-list name=\"executionTime\" [idField]=\"'value'\" [(ngModel)]=\"curComponent.executionTime\"\r\n                    [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"executionTimingList\" [panelHeight]=\"'auto'\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </form>\r\n    <ng-container>\r\n      <farris-tabs class=\"f-utils-fill pr-2 pl-2\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n        <farris-tab title=\"{{'component.editComponentParameter.parameterList'|wfLocale}}\" [id]=\"'parameters'\">\r\n          <ng-template #content>\r\n            <div class=\"f-utils-fill-flex-column h-100\">\r\n              <farris-datagrid #paramlist [data]=\"curComponent.actualParameters\" [columns]=\"paramColumns\"\r\n                [idField]=\"'code'\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [afterEdit]=\"paramAfterEdit\"\r\n                [closeOtherGridEditor]=\"true\">\r\n              </farris-datagrid>\r\n            </div>\r\n          </ng-template>\r\n        </farris-tab>\r\n      </farris-tabs>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.editComponentParameter.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.editComponentParameter.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EditComponentParameterComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: SessionService },
    { type: CommonComponentUiRTService },
    { type: BsModalService },
    { type: MessagerService },
    { type: ChangeDetectorRef },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EditComponentParameterComponent.propDecorators = {
    editState: [{ type: Input }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    paramlist: [{ type: ViewChild, args: ['paramlist',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    curComponent: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityComponentComponent {
    /**
     * @param {?} uistate
     * @param {?} viewModel
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} componentService
     * @param {?} repository
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uistate, viewModel, designerState, expr, resolver, injector, modalService, componentService, repository, message, cdr, localeId, resources, localePipe) {
        this.uistate = uistate;
        this.viewModel = viewModel;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.componentService = componentService;
        this.repository = repository;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.exBizTips = false;
        this.modalConfig = {
            title: this.localePipe.transform('component.activityComponent.component'),
            width: 960,
            height: 506,
            showButtons: true
        };
        this.buttonGroupData = [
            {
                id: 'edit',
                text: this.localePipe.transform('component.activityComponent.edit'),
            },
            {
                id: 'deleteRow',
                text: this.localePipe.transform('component.activityComponent.deleteRow'),
            }
        ];
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.isPreExternalProcessCmps = false;
        this.columns = [];
        this.paramColumns = [];
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} cpts
     * @return {?}
     */
    set value(cpts) {
        if (cpts && cpts.length > 0) {
            /** @type {?} */
            let metaDataIdList = new Array();
            for (const cmp of cpts) {
                if (metaDataIdList.indexOf(cmp.metadataId) == -1) {
                    metaDataIdList.push(cmp.metadataId);
                }
            }
            if (metaDataIdList.length > 0) {
                forkJoin(metaDataIdList.map((/**
                 * @param {?} metaDataId
                 * @return {?}
                 */
                (metaDataId) => this.designerState.getHelpMetaData(metaDataId, '')))).subscribe((/**
                 * @param {?} cmpMetas
                 * @return {?}
                 */
                cmpMetas => {
                    for (const cpt of cpts) {
                        /** @type {?} */
                        const bizComponent = new BizComponentEntity(cpt.name, cpt.metadataId, cpt.methodCode);
                        bizComponent.executionTime = cpt.executionTime,
                            bizComponent.id = cpt.id;
                        bizComponent.isForCompensation = cpt.isForCompensation;
                        bizComponent.actualParameters = new Array();
                        bizComponent.scopeType = cpt.scopeType || null;
                        /** @type {?} */
                        const meta = cmpMetas.find((/**
                         * @param {?} m
                         * @return {?}
                         */
                        m => m.id === cpt.metadataId));
                        /** @type {?} */
                        const content = JSON.parse(meta.content);
                        /** @type {?} */
                        const operation = content.operations.find((/**
                         * @param {?} o
                         * @return {?}
                         */
                        o => o.code === cpt.methodCode));
                        if (operation) {
                            bizComponent.actualParameters = cpt.actualParameters.map((/**
                             * @param {?} a
                             * @return {?}
                             */
                            a => {
                                /** @type {?} */
                                const p = operation.parameters.find((/**
                                 * @param {?} i
                                 * @return {?}
                                 */
                                i => i.code === a.code));
                                if (p) {
                                    return {
                                        code: a.code,
                                        name: a.name,
                                        value: a.value,
                                        required: a.code.toLowerCase() === 'wfcontext' ? false : p.required
                                    };
                                }
                                else {
                                    console.error(this.localePipe.transform('component.activityComponent.method') + cpt.methodCode + this.localePipe.transform('component.activityComponent.inconsistentParameters'));
                                    return {
                                        code: a.code,
                                        name: a.name,
                                        value: a.value,
                                        required: false
                                    };
                                }
                            }));
                        }
                        else {
                            console.error(this.localePipe.transform('component.activityComponent.longerExists') + cpt.methodCode + this.localePipe.transform('component.activityComponent.pleaseCheck'));
                        }
                        this.uistate.components.push(bizComponent);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 2023-5-25 网速慢的时候会导致加载不出来流程构件，因此加个延时
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.restart();
        }), 300);
    }
    /**
     * @return {?}
     */
    restart() {
        if (this.designerState.startMode === 'EXTERNAL_PROCESS') {
            this.repository.getBizCmp((/**
             * @param {?} cmps
             * @return {?}
             */
            (cmps) => {
                if (cmps && cmps.length > 0) {
                    // 此处标记有外部流程通用构件
                    for (const c of cmps) {
                        if (c.scopeType === 'ExternalProcess') {
                            this.exBizTips = true;
                            break;
                        }
                    }
                }
            }));
        }
        this.location = this.editorParams.location;
        if (this.location === 'activity') {
            this.uistate.executionCollection = this.uistate.activityCollection;
            this.columns = [
                {
                    field: 'executionTime', width: 100, title: this.localePipe.transform('component.activityComponent.executionTime'),
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: { data: this.uistate.executionCollection, groupField: 'text', valueField: 'value', textField: 'text', idField: 'value', panelHeight: 'auto' }
                    },
                    formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @param {?} i
                     * @return {?}
                     */
                    (v, d, i) => {
                        if (v) {
                            return this.uistate.executionCollection.find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            item => item.value === v)).text;
                        }
                        else {
                            return '';
                        }
                    }),
                    validators: [
                        { type: 'required', messager: '必填' }
                    ]
                },
                {
                    field: 'name', width: 100, title: this.localePipe.transform('component.activityComponent.cmpName')
                },
                { field: 'metadataId', width: 100, title: this.localePipe.transform('component.activityComponent.metadataId') },
                { field: 'methodCode', width: 100, title: this.localePipe.transform('component.activityComponent.methodCode') },
                {
                    field: 'isForCompensation', width: 50, title: this.localePipe.transform('component.activityComponent.isForCompensation'),
                    editor: { type: EditorTypes.SWITCH, options: {} },
                    formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.activityComponent.yes'), falseText: this.localePipe.transform('component.activityComponent.no') } }
                },
                { title: this.localePipe.transform('component.activityComponent.operate'), width: 70, template: this.btnTemplate }
            ];
        }
        else if (this.location === 'autoActivity') {
            this.columns = [
                {
                    field: 'name', width: 100, title: this.localePipe.transform('component.activityComponent.cmpName')
                },
                { field: 'metadataId', width: 100, title: this.localePipe.transform('component.activityComponent.metadataId') },
                { field: 'methodCode', width: 100, title: this.localePipe.transform('component.activityComponent.methodCode') },
                {
                    field: 'isForCompensation', width: 50, title: this.localePipe.transform('component.activityComponent.isForCompensation'),
                    editor: { type: EditorTypes.SWITCH, options: {} },
                    formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.activityComponent.yes'), falseText: this.localePipe.transform('component.activityComponent.no') } }
                },
                { title: this.localePipe.transform('component.activityComponent.operate'), width: 70, template: this.btnTemplate }
            ];
        }
        else {
            this.columns = [
                {
                    field: 'executionTime', width: 100, title: this.localePipe.transform('component.activityComponent.executionTime'),
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: { data: this.uistate.executionCollection, groupField: 'text', valueField: 'value', textField: 'text', idField: 'value', panelHeight: 'auto' }
                    },
                    formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @param {?} i
                     * @return {?}
                     */
                    (v, d, i) => {
                        if (v) {
                            return this.uistate.executionCollection.find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            item => item.value === v)).text;
                        }
                        else {
                            return '';
                        }
                    }),
                    validators: [
                        { type: 'required', messager: '必填' }
                    ]
                },
                {
                    field: 'name', width: 100, title: this.localePipe.transform('component.activityComponent.cmpName')
                },
                { field: 'metadataId', width: 100, title: this.localePipe.transform('component.activityComponent.metadataId') },
                { field: 'methodCode', width: 100, title: this.localePipe.transform('component.activityComponent.methodCode') },
                { title: this.localePipe.transform('component.activityComponent.operate'), width: 70, template: this.btnTemplate }
            ];
        }
        if (this.uistate.components && this.uistate.components.length > 0) {
            this.cmplist.selectRow(this.uistate.components[0].id, true);
        }
        this.paramColumns = [
            { field: 'code', width: 50, title: this.localePipe.transform('component.activityComponent.code') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.activityComponent.name') },
            {
                field: 'value', width: 100, title: this.localePipe.transform('component.activityComponent.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        // 选中当前行
        this.repository.subject.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        cmp => {
            this.cmplist.loadData(this.uistate.components);
            if (cmp) {
                this.cmplist.selectRow(cmp.id, true);
            }
            else {
                this.uistate.curComponent = null;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.uistate.components && this.uistate.components.length > 0) {
            this.cmplist.selectRow(this.uistate.components[0].id, true);
        }
    }
    /**
     * @return {?}
     */
    edit() {
        this.editState = 'edit';
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(EditComponentParameterComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.activityComponent.editComponent'),
            width: 700,
            height: 400,
            buttons: compRef.instance.editFooter,
            showButtons: true,
            initialState: {
                curComponent: JSON.parse(JSON.stringify(this.uistate.curComponent))
            }
        };
        /** @type {?} */
        const editDialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.canEdit = false;
        compRef.instance.editState = this.editState;
        compRef.instance.location = this.location;
        compRef.instance.executionTimingList = this.uistate.executionCollection;
        // compRef.instance.curComponent = JSON.parse(JSON.stringify(this.uistate.curComponent));
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        cmp => {
            /** @type {?} */
            const i = this.uistate.components.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === cmp.id));
            this.uistate.components[i] = cmp;
            this.cmplist.loadData(this.uistate.components);
            editDialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            editDialog.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            compRef.instance.cd.detectChanges();
        }));
    }
    /**
     * @return {?}
     */
    deleteRow() {
        this.message.confirm(this.localePipe.transform('component.activityComponent.confirmDelete')).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            if (v) {
                this.closeCellEdit();
                this.viewModel.deleteRow();
                this.cmplist.loadData(this.uistate.components);
            }
        }));
    }
    /**
     * @return {?}
     */
    moveUp() {
        if (!this.uistate.curComponent) {
            this.message.info(this.localePipe.transform('component.activityComponent.curComponent'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.uistate.curComponent.id;
        /** @type {?} */
        const i = this.uistate.components.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.id === curCmpId));
        if (i === 0) {
            return;
        }
        this.repository.swapArray(this.uistate.components, i, i - 1);
        this.cmplist.loadData(this.uistate.components);
        this.cmplist.selectRow(curCmpId, true);
    }
    /**
     * @return {?}
     */
    moveDown() {
        if (!this.uistate.curComponent) {
            this.message.info(this.localePipe.transform('component.activityComponent.curComponent'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.uistate.curComponent.id;
        /** @type {?} */
        const i = this.uistate.components.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.id === curCmpId));
        if (i === this.uistate.components.length - 1) {
            return;
        }
        this.repository.swapArray(this.uistate.components, i, i + 1);
        this.cmplist.loadData(this.uistate.components);
        this.cmplist.selectRow(curCmpId, true);
    }
    /**
     * @param {?} buttonId
     * @param {?} ctx
     * @return {?}
     */
    clickAction(buttonId, ctx) {
        this.uistate.curComponent = ctx.rowData;
        switch (buttonId) {
            case 'edit':
                this.edit();
                break;
            case 'deleteRow':
                this.deleteRow();
                break;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.closeCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.uistate.components, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    componentSelect() {
        this.editState = 'new';
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(EditComponentParameterComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.activityComponent.newComponent'),
            width: 700,
            height: 400,
            buttons: compRef.instance.editFooter,
            showButtons: true
        };
        /** @type {?} */
        const editDialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.canEdit = true;
        compRef.instance.editState = this.editState;
        compRef.instance.location = this.location;
        compRef.instance.executionTimingList = this.uistate.executionCollection;
        compRef.instance.curComponent = new BizComponentEntity();
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        cmp => {
            this.uistate.components.push(cmp);
            this.cmplist.loadData(this.uistate.components);
            editDialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            editDialog.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            compRef.instance.cd.detectChanges();
        }));
    }
    /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                this.viewModel.componentSelect(result);
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.location === 'activity') {
            for (const variable of this.designerState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.location === 'activity') {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectionChange(data) {
        this.uistate.curComponent = data.data;
    }
    /**
     * @private
     * @return {?}
     */
    closeCellEdit() {
        this.cmplist.endCellEdit();
        if (this.paramlist) {
            this.paramlist.endCellEdit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        // 校验是否存在重复的构件
        /** @type {?} */
        const cache = [];
        for (const cmp of this.uistate.components) {
            if (cache.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.methodCode === cmp.methodCode && JSON.stringify(c.actualParameters) === JSON.stringify(cmp.actualParameters) &&
                c.executionTime === cmp.executionTime))) {
                console.log(cmp.actualParameters);
                this.message.warning(this.localePipe.transform('component.activityComponent.sameCmp') + `${cmp.name}` + this.localePipe.transform('component.activityComponent.cmpMethod') + cmp.methodCode + this.localePipe.transform('component.activityComponent.pleaseCheck'));
                return false;
            }
            cache.push(cmp);
            if (!cmp.executionTime && this.location !== 'autoActivity') {
                this.message.warning(this.localePipe.transform('component.activityComponent.executionTimeNotNull'));
                return false;
            }
            for (const param of cmp.actualParameters) {
                if (param.required && !param.value) {
                    this.message.warning(this.localePipe.transform('component.activityComponent.component') + `【${cmp.name}】` + this.localePipe.transform('component.activityComponent.param') + `【${param.code}】` + this.localePipe.transform('component.activityComponent.required'));
                    return false;
                }
            }
        }
        return true;
    }
}
ActivityComponentComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-activity-component',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n              <ng-container *ngIf=\"exBizTips\">\r\n                <div  class=\"f-component-wizard-page-detail-header\">\r\n                  <div class=\"page-friendly-reminder\" style=\"background:#E6F7FF;padding: 0.5rem!important\">\r\n                    <div class=\"reminder-message\">\r\n                      <span class=\"reminder-title\">\r\n                        <span class=\"f-icon f-icon-info\">\r\n                        </span>\r\n                        <span class=\"reminder-name\" style=\"padding-left: 0.25rem\">{{'component.activityComponent.tips' | wfLocale}}\r\n                        </span>\r\n                      </span>\r\n                      <span class=\"message\">{{'component.activityComponent.prefabricated' | wfLocale}}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </ng-container>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"componentSelect()\">{{'component.activityComponent.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"moveUp()\">{{'component.activityComponent.moveUp' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"moveDown()\">{{'component.activityComponent.moveDown' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;margin-left: 6px;margin-right: 6px;\">\r\n      <div [style.height.%]=\"uistate.curComponent?100:100\">\r\n        <farris-datagrid #cmplist [data]=\"uistate.components\" [idField]=\"'id'\" [columns]=\"columns\" [fit]=\"true\"\r\n          [showGroupColumn]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n          [showCheckbox]=\"false\" [groupRows]=\"true\" [multiSelect]=\"false\" (selectChanged)=\"selectionChange($event)\"\r\n          [closeOtherGridEditor]=\"true\" [mergeCell]=\"true\" [mergeFields]=\"['executionTime']\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #buttonsTemplate let-ctx>\r\n  <farris-button-group [count]=\"2\" [data]=\"buttonGroupData\" (change)=\"clickAction($event, ctx)\">\r\n  </farris-button-group>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.activityComponent.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.activityComponent.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [ActivityComponentRepository, ActivityComponentUIState, ActivityComponentViewModel,
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ActivityComponentComponent.ctorParameters = () => [
    { type: ActivityComponentUIState },
    { type: ActivityComponentViewModel },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: CommonComponentUiRTService },
    { type: ActivityComponentRepository },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ActivityComponentComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    btnTemplate: [{ type: ViewChild, args: ['buttonsTemplate',] }],
    cmplist: [{ type: ViewChild, args: ['cmplist',] }],
    paramlist: [{ type: ViewChild, args: ['paramlist',] }],
    value: [{ type: Input }]
};
class ActivityComponentConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.activityComponent.set");
        }
        else {
            return this.localePipe.transform("component.activityComponent.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteFormsUIState {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
        this.formTypeCollection = [
            { text: this.localePipe.transform('component.executeForms.processEmbeddedForm'), value: '0' },
            { text: this.localePipe.transform('component.executeForms.formEmbedProcess'), value: '1' },
        ];
    }
}
ExecuteFormsUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExecuteFormsUIState.ctorParameters = () => [
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteFormsViewModel {
}
ExecuteFormsViewModel.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteFormsRepository {
}
ExecuteFormsRepository.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteFormModel {
}
class ActualParameter$1 {
}
/** @enum {string} */
const TerminalType = {
    PC: 'PC',
    MOBILE: 'MOBILE',
    ALL: 'ALL',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormFormatService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = JSON.parse(params.searchValue);
        /** @type {?} */
        const terminal = customData.tab === 'web' ? 'PC' : 'Mobile';
        /** @type {?} */
        let query = '?param=';
        /** @type {?} */
        let filter = `{"terminal":"${terminal}"`;
        if (searchValue.searchValue) {
            if (searchValue.searchField === '*') {
                filter += `,"allColumns":"${searchValue.searchValue}"`;
            }
            else {
                filter += `,"${searchValue.searchField}":"${searchValue.searchValue}"`;
            }
        }
        filter += '}';
        filter = encodeURIComponent(filter);
        query += (filter + `&pageNum=${index}&pageSize=${size}`);
        url += query;
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }))));
    }
}
FormFormatService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormFormatService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteForm$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AddExecuteFormComponent {
    /**
     * @param {?} state
     * @param {?} http
     * @param {?} session
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(state, http, session, message, cdr, localeId, resources, localePipe) {
        this.state = state;
        this.http = http;
        this.session = session;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new Subject();
        this.cancel = new Subject();
        this.forms = new Array();
        // private formTypeCollection = [
        //   { text: '流程嵌表单', value: '0' },
        //   { text: '表单嵌流程', value: '1' },
        // ];
        this.columns = [
            { field: 'code', width: 100, title: this.localePipe.transform('component.executeForms.code') },
            {
                field: 'name', width: 100, title: this.localePipe.transform('component.executeForms.name'),
            },
            {
                field: 'tag', width: 80, title: this.localePipe.transform('component.executeForms.apptag'),
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    if (d.appId) {
                        return this.localePipe.transform('component.executeForms.functionMenu');
                    }
                    else if (d.formFormatId) {
                        return this.localePipe.transform('component.executeForms.formFormat');
                    }
                })
            }
            // {
            //   field: 'formType', width: 80, title: '联查类型',
            //   formatter: {
            //     type: 'enum',
            //     options: { valueField: 'value', textField: 'text', data: this.formTypeCollection }
            //   },
            // },
        ];
        // 表单格式显示列
        this.cols = [
            {
                field: 'code', width: 100, title: this.localePipe.transform('component.executeForms.docFormatNumber'), searchField: 'code'
            }, {
                field: 'name', width: 100, title: this.localePipe.transform('component.executeForms.docFormatName'), searchField: 'name'
            }
        ];
        this.dataUri = '/api/runtime/wf/v1.0/formFormat/page';
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getAllExecuteForms();
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.grid.selectedRow) {
            /** @type {?} */
            const form = this.grid.selectedRow.data;
            /** @type {?} */
            const model = new ExecuteFormModel();
            model.Id = ProcessDeUtil.GenerateElementId();
            model.Name = form.name;
            model.ComponentId = form.appId;
            model.FormType = form.formType;
            model.formFormatId = form.formFormatId;
            model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
            model.ActualParameters = form.actualParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                /** @type {?} */
                const a = new ActualParameter$1();
                a.Name = p.code;
                a.Tag = p.valueType ? p.valueType : this.initVariableType(p.value);
                a.Value = p.value;
                return a;
            }));
            this.submit.next(model);
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.selectedRow'));
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
    // selectOtherFormFormat() {
    //   this.lookUp.showDialog();
    // }
    // dictPicking = (arg) => {
    //   return of({
    //     showDialog: true, data: {
    //       tab: this.tab
    //     }
    //   });
    // }
    // dictPicked = (data: any): Observable<PickedResult> => {
    //   const model = new ExecuteFormModel();
    //   model.Id = ProcessDeUtil.GenerateElementId();
    //   model.Name = data.name;
    //   model.ComponentId = null;
    //   model.FormType = '0';
    //   model.formFormatId = data.id;
    //   model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
    //   model.ActualParameters = data.urlParameters.map(p => {
    //     const a = new ActualParameter();
    //     a.Name = p.code;
    //     a.Value = p.value;
    //     return a;
    //   });
    //   this.submit.next(model);
    //   return of({ closeDialog: true });
    // }
    // selectOtherFunc() {
    //   this.appHelper.showHelp(this.session.getUserSessionId());
    // }
    // funcSelected(apps: RtfApp[]) {
    //   if (apps && apps.length > 0) {
    //     const model = new ExecuteFormModel();
    //     model.Id = ProcessDeUtil.GenerateElementId();
    //     model.Name = apps[0].Name;
    //     model.ComponentId = apps[0].Id;
    //     model.FormType = '0';
    //     model.formFormatId = null;
    //     model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
    //     model.ActualParameters = [];
    //     if (apps[0].InvokingConfig['entityParams']) {
    //       const paras = JSON.parse(apps[0].InvokingConfig['entityParams']);
    //       model.ActualParameters = paras.map(p => ({
    //         Name: p.name,
    //         Value: ''
    //       }));
    //     }
    //     setTimeout(() => {
    //       this.submit.next(model);
    //     }, 0);
    //   }
    // }
    /**
     * @private
     * @return {?}
     */
    getAllExecuteForms() {
        forkJoin(this.getExecuteForms(), this.getFormFormats()).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re[0]) {
                this.forms = re[0];
            }
            if (re[1] && re[1].length > 0) {
                /** @type {?} */
                const formFormats = re[1];
                for (const format of formFormats) {
                    if (this.forms.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.formFormatId && f.formFormatId === format.id)) === -1) {
                        /** @type {?} */
                        const executeForm = new ExecuteForm$1();
                        executeForm.id = ProcessDeUtil.createNM();
                        executeForm.flowFormKey = this.state.flowFormInfo.flowForm.id;
                        executeForm.appId = null;
                        executeForm.code = format.code;
                        executeForm.name = format.name;
                        executeForm.actualParameters = [];
                        executeForm.isDefault = false;
                        executeForm.formType = '0';
                        executeForm.terminal = 'web';
                        executeForm.formFormatId = format.id;
                        executeForm.sysInit = 0;
                        executeForm.remarks = '';
                        if (format.urlParameters && format.urlParameters.length > 0) {
                            /** @type {?} */
                            const actPList = format.urlParameters.map((/**
                             * @param {?} p
                             * @return {?}
                             */
                            p => ({
                                code: p.code,
                                name: p.name,
                                valueType: p.valueType ? p.valueType : this.initVariableType(p.value),
                                value: p.value
                            })));
                            executeForm.actualParameters = actPList;
                        }
                        this.forms.push(executeForm);
                    }
                }
            }
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    initVariableType(value) {
        if (value) {
            if (value.length >= 8 && value.slice(0, 8) === `{"expr":`) {
                return 'expression';
            }
            else {
                return 'constant';
            }
        }
        else {
            return 'variable';
        }
    }
    /**
     * @private
     * @return {?}
     */
    getExecuteForms() {
        if (this.state.flowFormInfo.flowForm.id && this.tab) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/excuteForm?flowFormKey=${this.state.flowFormInfo.flowForm.id}`;
            return this.http.get(url).pipe(map((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (this.tab === 'web') {
                    return re.filter((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.terminal.indexOf('web') > -1));
                }
                else if (this.tab === 'mobile') {
                    return re.filter((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.terminal.indexOf('app') > -1));
                }
            })));
        }
        else {
            return from(new Array());
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormats() {
        if (this.state.flowFormInfo.flowForm.businessObjectId && this.tab) {
            /** @type {?} */
            const terminal = this.tab === 'web' ? 'PC' : 'Mobile';
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/query?param=`;
            /** @type {?} */
            let param = `{"bizCategory":"${this.state.flowFormInfo.flowForm.businessObjectId}","terminal":"${terminal}"}`;
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    }
}
AddExecuteFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-add-execute-form',
                template: "<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main my-0\">\r\n    <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist p-2\" [showHeader]=\"false\">\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"forms\" #grid\r\n          [idField]=\"'id'\" [showLineNumber]=\"true\" [striped]=\"true\"\r\n          [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\">\r\n        </farris-datagrid>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<!--\r\n<app-rtf-app-help #appHelper (afterHelpConfirm)=\"funcSelected($event)\" [isLayeredLoad]=\"true\">\r\n</app-rtf-app-help>\r\n\r\n<farris-lookup-grid #lookup style=\"display: none;\" [editable]=\"false\" [columns]=\"cols\" [singleSelect]=\"true\"\r\n  title=\"'\u5355\u636E\u683C\u5F0F'\" [displayType]=\"'List'\" [uri]=\"dataUri\" [idField]=\"'id'\" [pageIndex]=\"1\" [pageSize]=\"20\"\r\n  [pagination]=\"true\" [valueField]=\"'id'\" [textField]=\"'name'\" [dialogWidth]=\"550\" [dictPicked]=\"dictPicked\"\r\n  [dictPicking]=\"dictPicking\">\r\n</farris-lookup-grid> -->\r\n",
                providers: [{
                        provide: ServerSideToken, useClass: FormFormatService
                    },
                    WfLocalePipe
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AddExecuteFormComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: HttpService },
    { type: SessionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AddExecuteFormComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormFormat {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormFormatConfig {
    constructor() {
        this.id = ProcessDeUtil.createNM();
        this.formMethodConfigs = new Array();
    }
}
class FormButtonConfig {
}
class FormFieldConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const workFlowActions = [
    { text: '正向', value: 'Forward' },
    { text: '反向', value: 'Backward' },
    { text: '终止', value: 'Abort' }
];
/** @type {?} */
const executionTime = [
    { text: '流转前', value: 'Pre' },
    { text: '流转后', value: 'Post' }
];
class FormMethodConfig {
    constructor() {
        this.id = ProcessDeUtil.createNM();
        this.workFlowAction = workFlowActions[0].value;
        this.executionTime = executionTime[0].value;
        this.sortOrder = 1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariableGridComponent {
    /**
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(cdr, localeId, resources, localePipe) {
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cancel = new EventEmitter();
        this.submit = new EventEmitter();
        this.data = [];
        this.columns = [
            { field: 'key', width: 50, title: this.localePipe.transform('component.executeForms.key') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.executeForms.name') }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const selectedRow = this.grid.selectedRow;
        console.log(selectedRow);
        if (!selectedRow) {
            this.submit.next(null);
        }
        else {
            this.submit.next(selectedRow.data);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
}
VariableGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-variable-grid',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'key'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.executeForms.lineNumber' | wfLocale}}\"\r\n         [lineNumberWidth]=\"50\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
VariableGridComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
VariableGridComponent.propDecorators = {
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    buttonRef: [{ type: ViewChild, args: ['buttonRef',] }],
    cancel: [{ type: Output }],
    submit: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParameterSettingComponent {
    /**
     * @param {?} expr
     * @param {?} designerState
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(expr, designerState, resolver, modalService, injector, cdr, localeId, resources, localePipe) {
        this.expr = expr;
        this.designerState = designerState;
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.idField = 'Name';
        this._mode = 'bpmn';
        this.submit = new Subject();
        this.cancel = new Subject();
        this.formTypeCollection = [
            { text: this.localePipe.transform('component.executeForms.processEmbeddedForm'), value: '0' },
            { text: this.localePipe.transform('component.executeForms.formEmbedProcess'), value: '1' },
        ];
        this.valueTypeCollection = [
            { text: this.localePipe.transform('component.executeForms.variable'), value: 'variable' },
            { text: this.localePipe.transform('component.executeForms.constant'), value: 'constant' },
            { text: this.localePipe.transform('component.executeForms.expression'), value: 'expression' }
        ];
        this.cols = new Array();
        this.parameters = new Array();
        this.formType = this.formTypeCollection[0].value;
        this.showFormType = false;
        this.allParameters = new Array();
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            if (this.mode === 'usual') {
                return of$1(true);
            }
            else {
                if (param.column.field === 'Value') {
                    /** @type {?} */
                    const rowData = (/** @type {?} */ (param.rowData));
                    switch (rowData.Tag) {
                        case 'expression':
                            param.column.editor = {
                                type: 'input-group',
                                options: {
                                    groupText: '<i class="f-icon f-icon-lookup"></i>',
                                    editable: false,
                                    clickHandle: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                        this.showExprHelp(e);
                                    }),
                                    clear: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        console.log('clear', e);
                                    })
                                }
                            };
                            break;
                        case 'variable':
                            param.column.editor = {
                                type: 'input-group',
                                options: {
                                    groupText: '<i class="f-icon f-icon-lookup"></i>',
                                    editable: true,
                                    clickHandle: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        this.selectVariable(e);
                                    }),
                                    clear: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        console.log('clear', e);
                                    })
                                }
                            };
                            break;
                        case 'constant':
                            param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                            break;
                    }
                }
                return of$1(true);
            }
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set mode(m) {
        this._mode = m;
        if (m === 'bpmn') {
            this.idField = 'Name';
            this.cols = [
                { field: 'Name', width: 50, title: this.localePipe.transform('component.executeForms.code') },
                { field: 'Tag', width: 50, title: this.localePipe.transform('component.executeForms.tag'), formatter: {
                        type: 'enum',
                        options: { valueField: 'value', textField: 'text', data: this.valueTypeCollection }
                    },
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: {
                            valueField: 'value', textField: 'text', data: this.valueTypeCollection, idField: 'value', panelHeight: 'auto', enableClear: false,
                            selectChange: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                this.valueTypeChange(e);
                            })
                        }
                    } },
                {
                    field: 'Value', width: 100, title: this.localePipe.transform('component.executeForms.value'),
                    editor: {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    }
                }
            ];
        }
        else {
            this.idField = 'code';
            this.cols = [
                { field: 'code', width: 50, title: this.localePipe.transform('component.executeForms.code') },
                { field: 'name', width: 50, title: this.localePipe.transform('component.executeForms.name') },
                {
                    field: 'value', width: 100, title: this.localePipe.transform('component.executeForms.value'),
                    editor: {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    }
                }
            ];
        }
    }
    /**
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d) {
                e.formControl.setValue(d);
                e.instance.cd.detectChanges();
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        this.submit.next({ parameters: this.parameters, formType: this.formType });
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    valueTypeChange(e) {
        /** @type {?} */
        const param = this.parameters.find((/**
         * @param {?} p
         * @return {?}
         */
        p => p.Name === e.rowData.Name));
        param.Value = '';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    selectVariable(e) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(VariableGridComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.data = this.allParameters; // 目前只能根据元数据类型过滤，后续添加标签过滤
        // 目前只能根据元数据类型过滤，后续添加标签过滤
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.executeForms.variable'),
            width: 460,
            height: 450,
            showButtons: true,
            buttons: compRef.instance.buttonRef
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                e.formControl.setValue(data.key);
                e.instance.cd.detectChanges();
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => dialog.close()));
    }
}
ParameterSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-parameter-setting',
                template: "\r\n<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main my-0\">\r\n    <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist px-0\" [showHeader]=\"showFormType\" mainTitle=\"{{'component.executeForms.parametersSet' | wfLocale}}\" [enableMaximize]=\"false\">\r\n        <ng-template farrisSectionToolbar>\r\n          <farris-combo-list [(ngModel)]=\"formType\" name=\"formType\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n            [enableClear]=\"false\" [valueField]=\"'value'\" [data]=\"formTypeCollection\" [panelHeight]=\"'auto'\" [editable]=\"false\"\r\n            style=\"width: 130px;\">\r\n          </farris-combo-list>\r\n        </ng-template>\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"cols\" [data]=\"parameters\" #grid\r\n          [idField]=\"idField\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n          [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" [striped]=\"true\" [beforeEdit]=\"beforeEdit\"\r\n          [virtualized]=\"true\">\r\n        </farris-datagrid>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ParameterSettingComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: ProcessDesignerUIState },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ParameterSettingComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormOperationConfigComponent {
    /**
     * @param {?} http
     * @param {?} message
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, message, resolver, injector, modalService, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.operations = new Array();
        this.cols = new Array();
        this.methodCols = [
            { field: 'method', width: 100, title: this.localePipe.transform("component.executeForms.method"), showTips: true },
            { field: 'methodName', width: 80, title: this.localePipe.transform("component.executeForms.methodName"), showTips: true },
            { field: 'description', width: 120, title: this.localePipe.transform("component.executeForms.description"), showTips: true }
        ];
        this.formMethods = new Array();
        this.state = 'add';
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set formFormatId(v) {
        this._fromFormatId = v;
        if (this._fromFormatId) {
            this.getFormMethods();
        }
    }
    /**
     * @return {?}
     */
    get formFormatId() {
        return this._fromFormatId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cols = [
            {
                field: 'workFlowAction', width: 80, title: this.localePipe.transform("component.executeForms.workFlowAction"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: workFlowActions, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'method', width: 100, title: this.localePipe.transform("component.executeForms.formOperations"),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.e = e;
                            this.methodsDialog.show();
                            this.state = 'edit';
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                },
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    if (v) {
                        /** @type {?} */
                        const m = this.formMethods.find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.method === v));
                        if (m) {
                            return m.methodName;
                        }
                        else {
                            return '';
                        }
                    }
                    else {
                        return '';
                    }
                }),
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'executionTime', width: 80, title: this.localePipe.transform("component.executeForms.executionTime"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: executionTime }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: executionTime, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'sortOrder', width: 60, title: this.localePipe.transform("component.executeForms.sortOrder"),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
                formatter: { type: 'number', options: { precision: 0 } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'methodParameters', width: 80, title: this.localePipe.transform("component.executeForms.methodParameters"),
                template: this.cell,
                halign: 'center', align: 'center'
            }
        ];
    }
    /**
     * @return {?}
     */
    add() {
        this.methodsDialog.show();
        this.state = 'add';
    }
    /**
     * @return {?}
     */
    delete() {
        if (this.grid.selectedRow) {
            this.operations = this.operations.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o.id !== this.grid.selectedRow.id));
        }
        else {
            this.message.info(this.localePipe.transform("component.executeForms.selectFormActionConfig"));
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    editParam(ctx) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'usual';
        compRef.instance.showFormType = false;
        if (ctx.rowData.methodParameters) {
            compRef.instance.parameters = [...ctx.rowData.methodParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => Object.assign({}, p)))];
        }
        else {
            compRef.instance.parameters = new Array();
        }
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.executeForms.parameterSettings"),
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            for (const o of this.operations) {
                if (o.id === ctx.rowData.id) {
                    o.methodParameters = re.parameters;
                }
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
    }
    /**
     * @return {?}
     */
    methodSelected() {
        if (this.methodGrid.selectedRow) {
            /** @type {?} */
            const data = this.methodGrid.selectedRow.data;
            if (this.state === 'edit') {
                if (this.e) {
                    this.e.formControl.setValue(data.method);
                    this.e.instance.cd.detectChanges();
                    for (const o of this.operations) {
                        if (o.id === data.id) {
                            o.method = data.method;
                            o.sortOrder = data.sortOrder;
                            o.methodParameters = data.methodParameters;
                        }
                    }
                }
            }
            else {
                /** @type {?} */
                const operation = new FormMethodConfig();
                operation.formFormatConfigId = this.formFormatConfigId;
                operation.method = data.method;
                operation.sortOrder = data.sortOrder;
                operation.methodParameters = data.methodParameters;
                this.operations = this.operations.concat([operation]);
            }
            this.methodsDialog.close();
        }
        else {
            this.message.info(this.localePipe.transform("component.executeForms.selectFormAction"));
        }
    }
    /**
     * @return {?}
     */
    validator() {
        this.grid.endCellEdit();
        for (const o of this.operations) {
            if (!o.method) {
                this.message.info(this.localePipe.transform("component.executeForms.selectFormAction"));
                return false;
            }
        }
        return true;
    }
    /**
     * @private
     * @return {?}
     */
    getFormMethods() {
        if (this.formFormatId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/formOperation?formFormatId=${this.formFormatId}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re) {
                    this.formMethods = re;
                }
            }));
        }
    }
}
FormOperationConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-form-operation-config',
                template: "<div class=\"f-utils-fill-flex-column h-100\" style=\"background: #FFF;\">\r\n  <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"cols\" [data]=\"operations\" #grid\r\n    [idField]=\"'id'\" [showLineNumber]=\"true\" [fitColumns]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\"\r\n    [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\"\r\n    [editable]=\"true\" [editMode]=\"'cell'\" >\r\n  </farris-datagrid>\r\n  <ng-template #cell let-ctx>\r\n    <a href=\"javascript: void(0);\" title=\"{{'component.executeForms.parameterSettings'|wfLocale}}\" (click)=\"editParam(ctx)\">{{'component.executeForms.editParam'|wfLocale}}</a>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"methodsDialog.close()\">{{'component.executeForms.clickCancel'|wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"methodSelected()\">{{'component.executeForms.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #methodsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"500\" title=\"{{'component.executeForms.formEvents'|wfLocale}}\">\r\n  <div class=\"f-page f-page-is-managelist\">\r\n    <div class=\"f-page-main\">\r\n      <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n        <farris-section class=\"f-section-grid f-section-in-managelist p-0\" [showHeader]=\"false\">\r\n          <farris-datagrid class=\"f-component-grid\" [columns]=\"methodCols\" [data]=\"formMethods\" #methodGrid [idField]=\"'id'\"\r\n            [showLineNumber]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\"\r\n            [fit]=\"true\" [fitColumns]=\"true\">\r\n          </farris-datagrid>\r\n        </farris-section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
FormOperationConfigComponent.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
FormOperationConfigComponent.propDecorators = {
    formFormatId: [{ type: Input }],
    formFormatConfigId: [{ type: Input }],
    operations: [{ type: Input }],
    methodsDialog: [{ type: ViewChild, args: ['methodsDialog',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    methodGrid: [{ type: ViewChild, args: ['methodGrid',] }],
    cell: [{ type: ViewChild, args: ['cell',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormFormatConfigComponent {
    /**
     * @param {?} http
     * @param {?} message
     * @param {?} notify
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, message, notify, injector, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.notify = notify;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.config = new FormFormatConfig();
        this.formFormat = new FormFormat();
        this.state = 'edit';
        this.showMethodTab = true;
        this.buttonCols = [];
        this.buttonConfigs = new Array();
        this.fieldCols = [];
        this.fieldConfigs = new Array();
        this.formatFieldList = new Array();
        this.showExtendTab = false;
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        /** @type {?} */
        let serchFields = {
            label: this.localePipe.transform('component.executeForms.fieldName'),
            value: 'fieldName'
        };
        if (this.searchFields) {
            if (!this.searchFields.some((/**
             * @param {?} x
             * @return {?}
             */
            x => x.value === serchFields.value))) {
                this.searchFields = this.searchFields.concat(serchFields);
            }
        }
        else {
            this.searchFields = [];
            this.searchFields = this.searchFields.concat(serchFields);
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set formFormatId(v) {
        this._formFormatId = v;
        this.config.formFormatId = v;
    }
    /**
     * @return {?}
     */
    get formFormatId() {
        return this._formFormatId;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set formatConfigId(v) {
        this._formatConfigId = v;
        if (!v) {
            this.state = 'new';
        }
    }
    /**
     * @return {?}
     */
    get formatConfigId() {
        return this._formatConfigId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buttonCols = [
            { field: 'buttonName', width: 100, title: this.localePipe.transform('component.executeForms.buttonName'), filter: true },
            // { field: 'buttonId', width: 100, title: '按钮标识' },
            {
                title: this.localePipe.transform('component.executeForms.enable'),
                field: 'enable',
                width: 80,
                template: this.btnEnable,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.disabled'),
                field: 'disabled',
                width: 80,
                template: this.btnDisabled,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.hidden'),
                field: 'hidden',
                width: 80,
                template: this.btnHidden,
                align: 'center',
                hAlign: 'center'
            }
        ];
        this.fieldCols = [
            { field: 'fieldName', width: 100, title: this.localePipe.transform('component.executeForms.fieldName') },
            // { field: 'fieldId', width: 100, title: '字段标识' },
            {
                title: this.localePipe.transform('component.executeForms.editable'),
                field: 'editable',
                width: 80,
                template: this.fieldEditable,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.readonly'),
                field: 'readonly',
                width: 80,
                template: this.fieldReadonly,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.hidden'),
                field: 'hidden',
                width: 80,
                template: this.fieldHidden,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.required'),
                field: 'required',
                width: 80,
                template: this.fieldRequired,
                align: 'center',
                hAlign: 'center'
            }
        ];
        this.getConfig();
    }
    /**
     * @return {?}
     */
    submit() {
        /** @type {?} */
        const subject = new Subject();
        this.validator().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re) {
                this.setBtnAndFieldConfigs();
                if (this.extendComponentRef) {
                    this.extendComponentRef.instance.submit().subscribe((/**
                     * @param {?} configId
                     * @return {?}
                     */
                    configId => {
                        if (configId) {
                            this.config.id = configId;
                            this.saveConfig(this.config).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            re => {
                                subject.next({ result: true, configId: this.config.id });
                            }), (/**
                             * @param {?} err
                             * @return {?}
                             */
                            err => {
                                this.message.error(this.localePipe.transform('component.executeForms.saveFail'));
                                subject.next({ result: false, configId: this.config.id });
                            }));
                        }
                        else {
                            if (this.state === 'new' &&
                                this.config.formButtonConfigs.length === 0 &&
                                this.config.formFieldConfigs.length === 0 &&
                                this.operationConfig.operations.length === 0) {
                                setTimeout((/**
                                 * @return {?}
                                 */
                                () => {
                                    subject.next({ result: true, configId: null });
                                }), 10);
                            }
                            else {
                                this.saveConfig(this.config).subscribe((/**
                                 * @param {?} re
                                 * @return {?}
                                 */
                                re => {
                                    subject.next({ result: true, configId: this.config.id });
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                err => {
                                    this.message.error(this.localePipe.transform('component.executeForms.saveFail'));
                                    subject.next({ result: false, configId: this.config.id });
                                }));
                            }
                        }
                    }));
                }
                else {
                    if (this.state === 'new' &&
                        this.config.formButtonConfigs.length === 0 &&
                        this.config.formFieldConfigs.length === 0 &&
                        this.operationConfig.operations.length === 0) {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            subject.next({ result: true, configId: null });
                        }), 10);
                    }
                    else {
                        this.saveConfig(this.config).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            subject.next({ result: true, configId: this.config.id });
                        }), (/**
                         * @param {?} err
                         * @return {?}
                         */
                        err => {
                            this.message.error(this.localePipe.transform('component.executeForms.saveFail'));
                            subject.next({ result: false, configId: this.config.id });
                        }));
                    }
                }
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    subject.next({ result: false });
                }), 10);
            }
        }));
        return subject.asObservable();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    searchField(data) {
        data.field = 'fieldName';
        /** @type {?} */
        let searchData = {
            field: 'fieldName',
            value: data.value
        };
        this.fieldTree.searchData = searchData;
        // this.fieldTree.searchData.field = 'fieldName';
        /** @type {?} */
        let serchFields = {
            label: this.localePipe.transform('component.executeForms.fieldName'),
            value: 'fieldName'
        };
        if (this.fieldTree.searchFields) {
            if (!this.fieldTree.searchFields.some((/**
             * @param {?} x
             * @return {?}
             */
            x => x.value === serchFields.value))) {
                this.fieldTree.searchFields = this.fieldTree.searchFields.concat(serchFields);
            }
        }
        else {
            this.fieldTree.searchFields = [];
            this.fieldTree.searchFields = this.fieldTree.searchFields.concat(serchFields);
        }
        this.fieldTree.searchHandle.search(data.field, data.value, 'client');
    }
    /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    btnConfigChange(bool, field, id) {
        if (bool) {
            for (const b of this.buttonConfigs) {
                if (b.id === id) {
                    switch (field) {
                        case 'enable':
                            b.enable = bool;
                            b.disabled = false;
                            b.hidden = false;
                            break;
                        case 'disabled':
                            b.disabled = bool;
                            b.enable = false;
                            b.hidden = false;
                            break;
                        case 'hidden':
                            b.hidden = bool;
                            b.disabled = false;
                            b.enable = false;
                            break;
                    }
                    this.btnGrid.updateRow(id, b);
                }
            }
        }
        this.btnGrid.cd.detectChanges();
    }
    /**
     * @param {?} operation
     * @return {?}
     */
    btnBatchOperate(operation) {
        /** @type {?} */
        const checkeds = this.btnGrid.checkedRows;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                this.btnConfigChange(true, operation, c.id);
            }
            this.btnGrid.cd.detectChanges();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkedRows'));
        }
    }
    /**
     * @return {?}
     */
    btnBatchReset() {
        /** @type {?} */
        const checkeds = this.btnGrid.checkedRows;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                /** @type {?} */
                const button = this.formFormat.formButtons.find((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => b.id === c.id));
                for (const b of this.buttonConfigs) {
                    if (b.id === c.id) {
                        b.enable = button.buttonState === 'Enable' ? true : false;
                        b.disabled = button.buttonState === 'Disabled' ? true : false;
                        b.hidden = button.buttonState === 'Hidden' ? true : false;
                    }
                    this.btnGrid.updateRow(b.id, b);
                }
            }
            this.btnGrid.cd.detectChanges();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkedRows'));
        }
    }
    /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @param {?=} search
     * @return {?}
     */
    fieldConfigChange(bool, field, id, search = true) {
        if (bool) {
            this.fieldSwitchChange(this.fieldConfigs, field, id);
        }
        if (search) {
            this.fieldTree.searchHandle['research']();
        }
    }
    /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    fieldSwitchChange(fieldConfigs, field, id) {
        if (fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.data.id === id) {
                    switch (field) {
                        case 'editable':
                            f.data.editable = true;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'readonly':
                            f.data.editable = false;
                            f.data.readonly = true;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'hidden':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = true;
                            f.data.required = false;
                            break;
                        case 'required':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = true;
                            break;
                    }
                    return;
                }
                else {
                    if (f.children && f.children.length > 0) {
                        this.fieldSwitchChange(f.children, field, id);
                    }
                }
            }
        }
    }
    /**
     * @param {?} operation
     * @return {?}
     */
    fieldBatchOperate(operation) {
        /** @type {?} */
        const checkeds = this.fieldTree.checkeds;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                this.fieldConfigChange(true, operation, c.data.id, false);
            }
            this.fieldTree.searchHandle['research']();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkeds'));
        }
    }
    /**
     * @return {?}
     */
    fieldBatchReset() {
        /** @type {?} */
        const checkeds = this.fieldTree.checkeds;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                /** @type {?} */
                const field = this.formatFieldList.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.id === c.data.id));
                this.resetFieldConfig(this.fieldConfigs, c.data.id, field);
            }
            this.fieldTree.searchHandle['research']();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkeds'));
        }
    }
    /**
     * @param {?} fieldConfigs
     * @param {?} id
     * @param {?} field
     * @return {?}
     */
    resetFieldConfig(fieldConfigs, id, field) {
        if (fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.leaf === true && f.data.id === id) {
                    f.data.editable = field.fieldState === 'Editable' ? true : false;
                    f.data.readonly = field.fieldState === 'Readonly' ? true : false;
                    f.data.hidden = field.fieldState === 'Hidden' ? true : false;
                    f.data.required = field.fieldState === 'Required' ? true : false;
                    return;
                }
                else {
                    if (f.children && f.children.length > 0) {
                        this.resetFieldConfig(f.children, id, field);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (this.extendComponentRef) {
            /** @type {?} */
            const result$ = this.extendComponentRef.instance.validator();
            if (result$ instanceof Observable) {
                return result$.pipe(switchMap((/**
                 * @param {?} b
                 * @return {?}
                 */
                (b) => {
                    if (b && this.innerValidator()) {
                        return of$1(true);
                    }
                    else {
                        return of$1(false);
                    }
                })));
            }
            else {
                if (result$) {
                    return of$1(this.innerValidator());
                }
                else {
                    return of$1(false);
                }
            }
        }
        else {
            return of$1(this.innerValidator());
        }
    }
    /**
     * @private
     * @return {?}
     */
    innerValidator() {
        return this.operationConfig.validator();
    }
    /**
     * @private
     * @return {?}
     */
    setBtnAndFieldConfigs() {
        this.config.formButtonConfigs = new Array();
        for (const btn of this.buttonConfigs) {
            /** @type {?} */
            const button = this.formFormat.formButtons.find((/**
             * @param {?} b
             * @return {?}
             */
            b => b.buttonId === btn.buttonId));
            /** @type {?} */
            const btnConfig = new FormButtonConfig();
            btnConfig.buttonId = btn.buttonId;
            if (btn.enable) {
                btnConfig.buttonState = 'Enable';
            }
            else if (btn.disabled) {
                btnConfig.buttonState = 'Disabled';
            }
            else if (btn.hidden) {
                btnConfig.buttonState = 'Hidden';
            }
            else {
                continue;
            }
            if (!button.buttonState && btnConfig.buttonState) {
                this.config.formButtonConfigs.push(btnConfig);
            }
            if (button.buttonState && button.buttonState !== btnConfig.buttonState) {
                this.config.formButtonConfigs.push(btnConfig);
            }
        }
        this.config.formFieldConfigs = new Array();
        this.getFieldConfigs(this.fieldConfigs);
        this.config.formMethodConfigs = this.operationConfig.operations || new Array();
    }
    /**
     * @private
     * @param {?} fieldConfigs
     * @return {?}
     */
    getFieldConfigs(fieldConfigs) {
        if (fieldConfigs && fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.children && f.children.length > 0) {
                    this.getFieldConfigs(f.children);
                }
                if (f.leaf === false) {
                    continue;
                }
                /** @type {?} */
                const field = this.formatFieldList.find((/**
                 * @param {?} fd
                 * @return {?}
                 */
                fd => fd.fieldId === f.data.fieldId));
                /** @type {?} */
                const fieldConfig = new FormFieldConfig();
                fieldConfig.fieldId = f.data.fieldId;
                if (f.data.editable) {
                    fieldConfig.fieldState = 'Editable';
                }
                else if (f.data.readonly) {
                    fieldConfig.fieldState = 'Readonly';
                }
                else if (f.data.hidden) {
                    fieldConfig.fieldState = 'Hidden';
                }
                else if (f.data.required) {
                    fieldConfig.fieldState = 'Required';
                }
                else {
                    continue;
                }
                if (!field.fieldState && fieldConfig.fieldState) {
                    this.config.formFieldConfigs.push(fieldConfig);
                }
                if (field.fieldState && field.fieldState !== fieldConfig.fieldState) {
                    this.config.formFieldConfigs.push(fieldConfig);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getConfig() {
        if (this.formFormatId) {
            forkJoin(this.getFormFormatType(), this.getFormFormat(), this.getFormFormatConfig()).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const formFormatType = (/** @type {?} */ (re[0]));
                if (formFormatType) {
                    this.formFormatType = formFormatType;
                    if (this.formFormatType.extendImpl) {
                        this.showExtendTab = true;
                        this.createExtendComponent(this.formFormatType.extendImpl);
                    }
                    else {
                        this.showExtendTab = false;
                    }
                }
                /** @type {?} */
                const formFormat = (/** @type {?} */ (re[1]));
                if (formFormat) {
                    this.formFormat = this.convertFormFormat(formFormat);
                }
                /** @type {?} */
                const config = (/** @type {?} */ (re[2]));
                if (config) {
                    this.config = config;
                }
                if (this.formFormat.formButtons) {
                    this.buttonConfigs = this.formFormat.formButtons.map((/**
                     * @param {?} b
                     * @return {?}
                     */
                    b => Object.assign({}, b, {
                        enable: b.buttonState === 'Enable' ? true : false,
                        disabled: b.buttonState === 'Disabled' ? true : false,
                        hidden: b.buttonState === 'Hidden' ? true : false
                    })));
                    /** @type {?} */
                    let btnConfigs = new Array();
                    if (config && config.formButtonConfigs) {
                        btnConfigs = config.formButtonConfigs;
                    }
                    for (const b of btnConfigs) {
                        for (const btn of this.buttonConfigs) {
                            if (btn.buttonId === b.buttonId) {
                                switch (b.buttonState) {
                                    case 'Enable':
                                        btn.enable = true;
                                        btn.disabled = false;
                                        btn.hidden = false;
                                        break;
                                    case 'Disabled':
                                        btn.enable = false;
                                        btn.disabled = true;
                                        btn.hidden = false;
                                        break;
                                    case 'Hidden':
                                        btn.enable = false;
                                        btn.disabled = false;
                                        btn.hidden = true;
                                        break;
                                }
                                break;
                            }
                        }
                    }
                }
                if (this.formFormat.formFields) {
                    this.fieldConfigs = [...this.formFormat.formFields];
                    this.orgFieldConfigs(this.fieldConfigs);
                    /** @type {?} */
                    let configs = new Array();
                    if (config && config.formFieldConfigs) {
                        configs = config.formFieldConfigs;
                    }
                    for (const f of configs) {
                        this.setFieldConfig(this.fieldConfigs, f);
                    }
                }
            }));
        }
    }
    /**
     * @param {?} extendImpl
     * @return {?}
     */
    createExtendComponent(extendImpl) {
        /** @type {?} */
        const url = extendImpl.split('#')[0];
        /** @type {?} */
        const selectorCmp = extendImpl.split('#')[1];
        System.import(url)
            .then((/**
         * @param {?} moduleFactorys
         * @return {?}
         */
        (moduleFactorys) => {
            /** @type {?} */
            const moduleFactory = Object.values(moduleFactorys)[0];
            /** @type {?} */
            const moduleRef = moduleFactory.create(this.injector);
            if (selectorCmp) {
                /** @type {?} */
                let facMap = moduleRef.componentFactoryResolver['_factories'];
                facMap.forEach((/**
                 * @param {?} value
                 * @param {?} key
                 * @param {?} map
                 * @return {?}
                 */
                (value, key, map$$1) => {
                    /** @type {?} */
                    const selector = value.selector;
                    if (selectorCmp == selector) {
                        /** @type {?} */
                        const cmpFactory = moduleRef.componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (key)));
                        this.extendComponentRef = cmpFactory.create(moduleRef.injector);
                        this.extendComponentRef.instance.formFormatId = this.formFormatId;
                        this.extendComponentRef.instance.formatConfigId = this.formatConfigId;
                        this.container.clear();
                        this.container.insert(this.extendComponentRef.hostView);
                    }
                }));
            }
            else {
                /** @type {?} */
                const bootstrapComponent = moduleRef['_bootstrapComponents'][0];
                if (bootstrapComponent) //先找bootstrapComponent数组有无组件
                 {
                    /** @type {?} */
                    const cmpFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(bootstrapComponent);
                    this.extendComponentRef = cmpFactory.create(moduleRef.injector);
                    this.extendComponentRef.instance.formFormatId = this.formFormatId;
                    this.extendComponentRef.instance.formatConfigId = this.formatConfigId;
                    this.container.clear();
                    this.container.insert(this.extendComponentRef.hostView);
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    orgFieldConfigs(formFields) {
        if (formFields.length > 0) {
            for (const d of formFields) {
                d.data = Object.assign({}, d.data, {
                    editable: d.data.fieldState === 'Editable' ? true : false,
                    readonly: d.data.fieldState === 'Readonly' ? true : false,
                    hidden: d.data.fieldState === 'Hidden' ? true : false,
                    required: d.data.fieldState === 'Required' ? true : false
                });
                if (d.children && d.children) {
                    this.orgFieldConfigs(d.children);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} config
     * @return {?}
     */
    setFieldConfig(fieldConfigs, config) {
        if (fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.data.fieldId === config.fieldId) {
                    switch (config.fieldState) {
                        case 'Editable':
                            f.data.editable = true;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'Readonly':
                            f.data.editable = false;
                            f.data.readonly = true;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'Hidden':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = true;
                            f.data.required = false;
                            break;
                        case 'Required':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = true;
                            break;
                    }
                    return;
                }
                else {
                    if (f.children && f.children.length > 0) {
                        this.setFieldConfig(f.children, config);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    saveConfig(config) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/formFormatConfig';
        return this.http.post(url, config);
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormat() {
        if (this.formFormatId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/${this.formFormatId}`;
            url = encodeURI(url);
            return this.http.get(url);
        }
        else {
            return of$1(null);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormatType() {
        if (this.formFormatId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/formFormatType/formFormat?formFormat=${this.formFormatId}`;
            return this.http.get(url);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormatConfig() {
        if (this.formatConfigId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormatConfig/${this.formatConfigId}`;
            url = encodeURI(url);
            return this.http.get(url);
        }
        else {
            return of$1(null);
        }
    }
    /**
     * @private
     * @param {?} formFormat
     * @return {?}
     */
    convertFormFormat(formFormat) {
        if (!formFormat.status) {
            formFormat.status = 0;
        }
        this.convertformFields(formFormat.formFields);
        this.getFormatFieldList(formFormat.formFields, this.formatFieldList);
        return formFormat;
    }
    /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    convertformFields(formFields) {
        if (formFields && formFields.length > 0) {
            for (const d of formFields) {
                if (typeof (d.leaf) !== 'boolean' && (d.leaf == null || d.leaf === undefined)) {
                    d.leaf = true;
                }
                if (d.children && d.children) {
                    this.orgFieldConfigs(d.children);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} formFields
     * @param {?} array
     * @return {?}
     */
    getFormatFieldList(formFields, array) {
        if (formFields && formFields.length > 0) {
            for (const d of formFields) {
                array.push(d.data);
                if (d.children && d.children) {
                    this.getFormatFieldList(d.children, array);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} formFields
     * @param {?} fieldId
     * @return {?}
     */
    getFormatField(formFields, fieldId) {
        for (const f of formFields) {
            if (f.data.fieldId === fieldId) {
                return f;
            }
            if (f.children && f.children.length > 0) {
                return this.getFormatField(f.children, fieldId);
            }
        }
    }
}
FormFormatConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-form-format-config',
                template: "\r\n<!--\u9700\u8981\u5D4C\u5957\u7684\u5C42-----------\u6807\u7B7E\u9875---------------->\r\n<farris-tabs class=\"h-100 f-component-tabs f-tabs-has-grid\" [value]=\"'buttonConfig'\" [contentFill]=\"true\">\r\n  <farris-tab title=\"{{'component.executeForms.formBtn'|wfLocale}}\" [id]=\"'buttonConfig'\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('enable')\">\r\n        {{'component.executeForms.enableBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('disabled')\">\r\n        {{'component.executeForms.disabledBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('hidden')\">\r\n        {{'component.executeForms.hiddenBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchReset()\">\r\n        {{'component.executeForms.btnBatchReset'|wfLocale}}\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <div class=\"f-utils-fill-flex-column\" style=\"background: #FFF;\">\r\n        <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"buttonCols\" [data]=\"buttonConfigs\" #btnGrid\r\n          [idField]=\"'id'\" [showLineNumber]=\"false\" [fitColumns]=\"true\" [striped]=\"true\"\r\n          [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\" [showAllCheckbox]=\"true\"\r\n          [showCheckbox]=\"true\" [multiSelect]=\"true\" [enableFilterRow]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab title=\"{{'component.executeForms.formfield'|wfLocale}}\" [id]=\"'fieldConfig'\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('editable')\">\r\n        {{'component.executeForms.editableBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('readonly')\">\r\n        {{'component.executeForms.readonlyBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('hidden')\">\r\n        {{'component.executeForms.hiddenBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('required')\">\r\n        {{'component.executeForms.requiredBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchReset()\">\r\n        {{'component.executeForms.btnBatchReset'|wfLocale}}\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <div class=\"f-utils-fill-flex-column\" style=\"background: #FFF;\">\r\n        <farris-treetable #fieldTree [columns]=\"fieldCols\" [showFilterBar]=\"true\" [searchFields] = \"searchFields\"\r\n          [showBorder]=\"false\" [showHeader]=\"true\" [data]=\"fieldConfigs\" [fit]=\"true\" [fitColumns]=\"true\"\r\n          [idField]=\"'id'\" [virtualized]=\"false\" [singleSelect]=\"false\" [showCheckbox]=\"true\"\r\n          [showCheckAll]=\"true\" [striped]=\"true\" [fixedHeader]=\"true\" (search)=\"searchField($event)\">\r\n        </farris-treetable>\r\n      </div>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab title=\"{{'component.executeForms.formEvents'|wfLocale}}\" [id]=\"'operationConfig'\" [show]=\"showMethodTab\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"operationConfig.add()\">\r\n        {{'component.executeForms.add'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"operationConfig.delete()\">\r\n        {{'component.executeForms.delete'|wfLocale}}\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <lib-form-operation-config\r\n        [formFormatId]=\"formFormatId\"\r\n        [formFormatConfigId]=\"config.id\"\r\n        [operations]=\"config.formMethodConfigs\"\r\n        class=\"h-100\"></lib-form-operation-config>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab title=\"{{'component.executeForms.other'|wfLocale}}\" [id]=\"'extendConfig'\" [show]=\"showExtendTab\">\r\n    <ng-template #content>\r\n      <ng-container #container></ng-container>\r\n    </ng-template>\r\n  </farris-tab>\r\n</farris-tabs>\r\n<!--Tab\u533A\u57DF-->\r\n\r\n  <!-- </section>\r\n</div> -->\r\n\r\n<ng-template #btnEnable let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.enable\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #btnDisabled let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.disabled\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #btnHidden let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.hidden\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #fieldEditable let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.editable\"\r\n  (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldReadonly let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.readonly\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldHidden let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.hidden\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldRequired let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.required\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
FormFormatConfigComponent.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService },
    { type: NotifyService },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
FormFormatConfigComponent.propDecorators = {
    btnEnable: [{ type: ViewChild, args: ['btnEnable',] }],
    btnDisabled: [{ type: ViewChild, args: ['btnDisabled',] }],
    btnHidden: [{ type: ViewChild, args: ['btnHidden',] }],
    fieldEditable: [{ type: ViewChild, args: ['fieldEditable',] }],
    fieldReadonly: [{ type: ViewChild, args: ['fieldReadonly',] }],
    fieldHidden: [{ type: ViewChild, args: ['fieldHidden',] }],
    fieldRequired: [{ type: ViewChild, args: ['fieldRequired',] }],
    btnGrid: [{ type: ViewChild, args: ['btnGrid',] }],
    fieldTree: [{ type: ViewChild, args: ['fieldTree',] }],
    operationConfig: [{ type: ViewChild, args: [FormOperationConfigComponent,] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    showMethodTab: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormConfigContainerComponent {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} http
     */
    constructor(injector, cfr, http) {
        this.injector = injector;
        this.cfr = cfr;
        this.http = http;
        this.showMethodTab = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.showComponentRef();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['formFormatId'] && changes['formFormatId'].currentValue) {
            this.showComponentRef();
        }
        else { // 功能菜单时
            this.componentRef = this.createWFComponentRef();
            this.componentRef.instance.formFormatId = null;
            this.componentRef.instance.formatConfigId = null;
            this.componentRef.instance.showMethodTab = this.showMethodTab;
            this.container.clear();
            this.container.insert(this.componentRef.hostView);
        }
    }
    /**
     * @return {?}
     */
    submit() {
        return this.componentRef.instance.submit();
    }
    /**
     * @private
     * @return {?}
     */
    showComponentRef() {
        this.componentRef = this.createWFComponentRef();
        this.componentRef.instance.formFormatId = this.formFormatId;
        this.componentRef.instance.formatConfigId = this.formatConfigId;
        this.componentRef.instance.showMethodTab = this.showMethodTab;
        this.container.clear();
        this.container.insert(this.componentRef.hostView);
        // if (this.formFormatId) {
        // this.getFormFormatType().subscribe((re: FormFormatType) => {
        // if (re.code === 'wf') {
        // } else {
        //   System.import(re.customImpl)
        //     .then((moduleFactorys: any) => {
        //       const moduleFactory: any = Object.values(moduleFactorys)[0];
        //       const moduleRef = moduleFactory.create(this.injector);
        //       this.componentRef = moduleRef.instance.createCustomComponentRef(this.injector);
        //       this.componentRef.instance.formFormatId = this.formFormatId;
        //       this.componentRef.instance.formatConfigId = this.formatConfigId;
        //       this.componentRef.instance.showMethodTab = this.showMethodTab;
        //       this.container.clear();
        //       this.container.insert(this.componentRef.hostView);
        //     });
        // }
        // });
        // }
    }
    /**
     * @private
     * @return {?}
     */
    createWFComponentRef() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(FormFormatConfigComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.injector);
        return cmpR;
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormatType() {
        if (this.formFormatId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/formFormatType/formFormat?formFormat=${this.formFormatId}`;
            return this.http.get(url);
        }
    }
}
FormConfigContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-form-config-container',
                template: "<ng-container #container></ng-container>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FormConfigContainerComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: HttpService }
];
FormConfigContainerComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    formFormatId: [{ type: Input }],
    formatConfigId: [{ type: Input }],
    showMethodTab: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExecuteFormsComponent {
    // *******************************************************
    /**
     * @param {?} formBuilder
     * @param {?} uistate
     * @param {?} viewmodel
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} designerState
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(formBuilder, uistate, viewmodel, resolver, injector, modalService, designerState, message, cdr, localeId, resources, localePipe) {
        this.formBuilder = formBuilder;
        this.uistate = uistate;
        this.viewmodel = viewmodel;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.designerState = designerState;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.modalConfig = {
            title: this.localePipe.transform('component.executeForms.executeForms'),
            width: 760,
            height: 532,
            showButtons: true
        };
        this.cls = 'farris-main-area flex-column';
        this.style = '#FFF';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.tab = 'web';
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.cols = [];
        this.showMethodTab = true;
        this.allParameters = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.form = new ExecuteFormModel();
        this.allParameters = this.getVariableList();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    set value(item) {
        if (item) {
            /** @type {?} */
            const paramArray = new Array();
            item.ActualParameters.forEach((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                /** @type {?} */
                const para = new ActualParameter$1();
                para.Name = a.Name;
                para.Tag = a.Tag ? a.Tag : this.initVariableType(a.Value);
                para.Value = a.Value;
                paramArray.push(para);
            }));
            this.form.ActualParameters = paramArray;
            this.form.Id = item.Id;
            this.form.Name = item.Name;
            this.form.ComponentId = item.ComponentId;
            this.form.formFormatId = item.formFormatId;
            this.form.formatConfigId = item.formatConfigId;
            this.form.FormType = item.FormType;
            this.form.TerminalType = item.TerminalType;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.location = this.editorParams.location;
        this.tab = this.editorParams.tab;
        if (this.location === 'userActivity') {
            this.showMethodTab = true;
        }
        else {
            this.showMethodTab = false;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        let data = new ExecuteFormModel();
        this.getForm().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (!re.result) {
                return;
            }
            data = re.form;
            if (this.validator(data)) {
                /** @type {?} */
                let parameters = null;
                // 如果存在变量类型参数在流程变量上不存在，需要同步流程变量
                if (data && data.ActualParameters && data.ActualParameters.length > 0) {
                    /** @type {?} */
                    const formalParameters = this.designerState.flowFormInfo.formalParameters.filter((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.dataType !== 'CDTSchema'));
                    for (const parameter of data.ActualParameters) {
                        if (parameter.Tag === 'variable' && parameter.Value && !this.allParameters.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.key === parameter.Value)) && formalParameters.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.code === parameter.Value))) {
                            parameters = formalParameters;
                            break;
                        }
                    }
                }
                /** @type {?} */
                const object = { value: data, parameters };
                this.submitModal.emit(object);
            }
        }));
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    validator(form) {
        if (form && form.ActualParameters && form.ActualParameters.length > 0) {
            /** @type {?} */
            const formalParameters = this.designerState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.dataType !== 'CDTSchema'));
            for (const parameter of form.ActualParameters) {
                if (parameter.Tag === 'variable' && parameter.Value && !this.allParameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.key === parameter.Value)) && !formalParameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.code === parameter.Value))) {
                    this.message.error(this.localePipe.transform('component.executeForms.parameters') + parameter.Name + this.localePipe.transform('component.executeForms.typeAsvariable'));
                    return false;
                }
            }
        }
        return true;
    }
    // tabChange(data) {
    //   this.tab = data.nextId;
    // }
    // editCSS() {
    //   this.configSection.nativeElement.querySelector('div.f-section-header').classList.add('mb-0');
    // }
    /**
     * @private
     * @return {?}
     */
    getForm() {
        if (this.form.ComponentId) {
            return of({ result: true, form: this.form });
        }
        else if (this.form.formFormatId) {
            return this.configContainer.submit().pipe(switchMap((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re.result) {
                    this.form.formatConfigId = re.configId;
                    return of({ result: true, form: this.form });
                }
                else {
                    return of({ result: false, form: this.form });
                }
            })));
        }
        else {
            return of({ result: true, form: null });
        }
    }
    /**
     * 参数设置
     * @return {?}
     */
    parametersSet() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'bpmn';
        compRef.instance.allParameters = this.allParameters;
        if (this.tab === 'web') {
            if (this.form.ComponentId) {
                compRef.instance.showFormType = true;
                compRef.instance.formType = this.form.FormType;
            }
            compRef.instance.parameters = [...this.form.ActualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => Object.assign({}, p)))];
        }
        else {
            compRef.instance.parameters = [...this.form.ActualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => Object.assign({}, p)))];
        }
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.executeForms.parameterSettings'),
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (this.tab === 'web') {
                this.form.ActualParameters = re.parameters;
                this.form.FormType = re.formType;
            }
            else {
                this.form.ActualParameters = re.parameters;
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
    }
    /**
     * 选择表单定义
     * @return {?}
     */
    selectExecuteForm() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AddExecuteFormComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.tab = this.tab;
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.executeForms.formDefinitionList'),
            width: 650,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.form = re;
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
    }
    /**
     * @return {?}
     */
    clear() {
        this.form = new ExecuteFormModel();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    initVariableType(value) {
        if (value) {
            if (value.length >= 8 && value.slice(0, 8) === `{"expr":`) {
                return 'expression';
            }
            else {
                return 'constant';
            }
        }
        else {
            return 'variable';
        }
    }
    /**
     * @private
     * @return {?}
     */
    getVariableList() {
        /** @type {?} */
        const context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                context.push(variable);
            }
        }
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        return context;
    }
}
ExecuteFormsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-execute-forms',
                template: "\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #empty>\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-datagrid-norecords\" style=\"height: 100%;\">\r\n      <div class=\"f-datagrid-norecords-content w-100\">{{'component.executeForms.noForm'|wfLocale}}</div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main mx-3\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <div class=\"farris-form farris-form-controls-inline farris-form-auto f-form-lable-auto\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"col-12 col-md-5 px-0 my-2\" style=\"margin-left: 50px;\">\r\n          <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group mb-0\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.executeForms.form'|wfLocale}}</span>\r\n              </label>\r\n              <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"true\"\r\n                [showButtonWhenDisabled]=\"false\" [(ngModel)]=\"form.Name\" name=\"form\" placeholder=\"{{'component.executeForms.placeholder'|wfLocale}}\"\r\n                [editable]=\"false\" (clickHandle)=\"selectExecuteForm()\" (clear)=\"clear()\" [groupText]=\"groupIcon\">\r\n              </input-group>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12 col-md-2 my-2 px-0\">\r\n          <div class=\"farris-group-wrap\" style=\"padding-top: 2px;\">\r\n            <div class=\"form-group farris-form-group mb-0\">\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-button [disabled]=\"!form.ComponentId && !form.formFormatId\" [type]=\"'link'\" (click)=\"parametersSet()\">\r\n                  {{'component.executeForms.parametersSet'|wfLocale}}\r\n                </farris-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"h-100 mx-3\">\r\n    <lib-form-config-container #configContainer\r\n      [formFormatId]=\"form.formFormatId\" [formatConfigId]=\"form.formatConfigId\" [showMethodTab]=\"showMethodTab\"\r\n      class=\"h-100\"></lib-form-config-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n",
                providers: [
                    ExecuteFormsUIState, ExecuteFormsViewModel, ExecuteFormsRepository,
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ExecuteFormsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ExecuteFormsUIState },
    { type: ExecuteFormsViewModel },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ExecuteFormsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    style: [{ type: HostBinding, args: ['style.background',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    configContainer: [{ type: ViewChild, args: ['configContainer',] }],
    configSection: [{ type: ViewChild, args: ['configSection', { read: ElementRef },] }]
};
class ExecuteFormsConverter {
    /**
     * @param {?} params
     * @param {?} localePipe
     */
    constructor(params, localePipe) {
        this.localePipe = localePipe;
        this.params = params;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data.Name;
        }
        else {
            if (this.params.location === 'process') {
                return this.localePipe.transform('component.executeForms.notSet');
            }
            else {
                return this.localePipe.transform('component.executeForms.default');
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TitleExpressionComponent {
    /**
     * @param {?} expr
     * @param {?} injector
     * @param {?} designerState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(expr, injector, designerState, cdr, localeId, resources, localePipe) {
        this.expr = expr;
        this.injector = injector;
        this.designerState = designerState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.textWithMultiLanguage = new Map();
        this.editorParams = {};
        this.language = 'zh-CHS';
        this.languageOptions = [
            { value: 'zh-CHS', text: this.localePipe.transform("component.titleExpression.zh-CHS") },
            { value: 'zh-CHT', text: this.localePipe.transform("component.titleExpression.zh-CHT") },
            { value: 'en', text: this.localePipe.transform("component.titleExpression.en") }
        ];
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: this.localePipe.transform("component.titleExpression.taskDescription"),
            width: 1140,
            height: 720,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
        this.language = this.injector.get(LOCALE_ID, null) || this.language;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 构造多语表达式编辑器的数据源，兼容历史
        if (this.value != null) {
            if (typeof (this.value) === 'string') {
                this.textWithMultiLanguage.set('zh-CHS', this.value);
            }
            else {
                this.textWithMultiLanguage = new Map(Object.entries(this.value));
            }
        }
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                this.contextEntities = this.contextEntities.concat([variable]);
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.value = this.editor.getExprWithMultiLanguage();
        /** @type {?} */
        const obj = [...this.value.entries()].reduce((/**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */
        (obj, [key, value]) => (obj[key] = value == null ? '' : value, obj)), {});
        /** @type {?} */
        const object = { value: obj, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    convertToValue(val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
}
TitleExpressionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-title-expression',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <div class=\"col-12 farris-group-auto pr-5\">\r\n          <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group\" style=\"display:flex\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.titleExpression.currentLanguage' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-combo-list [data]=\"languageOptions\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                  [idField]=\"'value'\" [(ngModel)]=\"language\" style=\"flex: 1;\" [enableClear]=\"false\">\r\n                </farris-combo-list>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <app-expressioneditor class=\"h-100\" [isPanel]=\"true\" [contextEntities]=\"contextEntities\" [text]=\"value\"\r\n        [customSchemaName]=\"'Schema'\" [customSchema]=\"schema\" [injectName]=\"injectName\" [injectSchemaName]=\"'Schema'\"\r\n        [injectNameInSchema]=\"injectName\" [language]=\"language\" [textWithMultiLanguage]=\"textWithMultiLanguage\">\r\n      </app-expressioneditor>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.titleExpression.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOK()\">{{'component.titleExpression.clickOK' | wfLocale}}</button>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
TitleExpressionComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: Injector },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
TitleExpressionComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editorParams: [{ type: Input }],
    editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }]
};
class TitleExpressionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && typeof data === 'string') {
            return data;
        }
        else if (data && Object.keys(data).length > 0) {
            return this.areAllPropertiesEmpty(data)
                ? this.localePipe.transform("component.titleExpression.notSet")
                : this.localePipe.transform("component.titleExpression.set");
        }
        else {
            return this.localePipe.transform("component.titleExpression.notSet");
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    areAllPropertiesEmpty(obj) {
        for (let key in obj) {
            if (obj.hasOwnProperty(key) && obj[key] !== '') {
                return false;
            }
        }
        return true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomizeAciton {
    /**
     * @param {?=} id
     * @param {?=} code
     * @param {?=} name
     */
    constructor(id, code, name) {
        this.id = id;
        this.code = code;
        this.name = name;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomizeActionListComponent {
    /**
     * @param {?} designerUIState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.terminalList = [
            { value: 'app', text: this.localePipe.transform('component.customizeAction.app') },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: this.localePipe.transform('component.customizeAction.all') }
        ];
        this.cols = [
            { field: 'code', width: 100, title: this.localePipe.transform('component.customizeAction.code') },
            { field: 'name', width: 100, title: this.localePipe.transform('component.customizeAction.name') },
            {
                field: 'terminal', width: 100, title: this.localePipe.transform('component.customizeAction.terminalType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
            {
                field: 'isAll', width: 100, title: this.localePipe.transform('component.customizeAction.isAll'),
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.customizeAction.yes'), falseText: this.localePipe.transform('component.customizeAction.no') } }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.customActionList = this.designerUIState.flowFormInfo.customizeActions || [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const selections = [];
        /** @type {?} */
        const checkeds = this.grid.checkeds;
        if (checkeds && checkeds.length > 0) {
            checkeds.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                const item = new CustomizeAciton(action.data.id, action.data.code, action.data.name);
                item.terminalType = action.data.terminal;
                // item.enable = true;
                item.actualParameters = [];
                if (action.data.actualParameters && action.data.actualParameters.length > 0) {
                    for (const p of action.data.actualParameters) {
                        /** @type {?} */
                        const param = (/** @type {?} */ ({
                            Name: p.code,
                            Value: p.value,
                            ValueText: p.name,
                            Tag: 'expression'
                        }));
                        item.actualParameters.push(param);
                    }
                }
                selections.push(item);
            }));
        }
        this.submit.emit(selections);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.emit(true);
    }
}
CustomizeActionListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-customize-action-list',
                template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n  <farris-datagrid #grid [columns]=\"cols\" [data]=\"customActionList\" [idField]=\"'id'\" [fit]=\"true\"\r\n    [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\r\n    [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n  </farris-datagrid>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.customizeAction.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.customizeAction.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CustomizeActionListComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CustomizeActionListComponent.propDecorators = {
    grid: [{ type: ViewChild, args: ['grid',] }],
    footer: [{ type: ViewChild, args: ['footer',] }],
    submit: [{ type: Output }],
    cancel: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomizeActionComponent {
    /**
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerState, expr, resolver, injector, modalService, message, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.customizeAction.customizeAction'),
            width: 800,
            height: 520,
            showButtons: true
        };
        this.terminalList = [
            { value: 'app', text: this.localePipe.transform('component.customizeAction.app') },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: this.localePipe.transform('component.customizeAction.') }
        ];
        this.actions = [];
        this.columns = [
            { field: 'code', width: 100, title: this.localePipe.transform('component.customizeAction.code') },
            { field: 'name', width: 100, title: this.localePipe.transform('component.customizeAction.name') },
            {
                field: 'terminalType', width: 100, title: this.localePipe.transform('component.customizeAction.terminalType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
        ];
        this.paramColumns = [
            { field: 'Name', width: 50, title: this.localePipe.transform('component.customizeAction.paramName') },
            { field: 'ValueText', width: 50, title: this.localePipe.transform('component.customizeAction.valueText') },
            {
                field: 'Value', width: 100, title: this.localePipe.transform('component.customizeAction.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data && data.length > 0) {
            for (const d of data) {
                /** @type {?} */
                const action = new CustomizeAciton(d.id, d.code, d.name);
                action.terminalType = d.terminalType;
                action.actualParameters = [];
                if (d.actualParameters && d.actualParameters.length > 0) {
                    for (const a of d.actualParameters) {
                        /** @type {?} */
                        const p = new ActualParameter$1();
                        p.Name = a.Name;
                        p.Value = a.Value;
                        p.ValueText = a.ValueText;
                        p.Tag = a.Tag;
                        action.actualParameters.push(p);
                    }
                }
                this.actions.push(action);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.loadData();
        // this.actionlist.loadData(this.actions);
        // if (this.actions && this.actions.length > 0) {
        //   this.actionlist.selectRow(this.actions[0].id, true);
        // }
    }
    /**
     * @return {?}
     */
    addActions() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(CustomizeActionListComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.customizeAction.addActions'),
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length > 0) {
                for (const a of data) {
                    /** @type {?} */
                    const index = this.actions.findIndex((/**
                     * @param {?} act
                     * @return {?}
                     */
                    act => act.code === a.code));
                    if (index > -1) {
                        this.message.info(this.localePipe.transform('component.customizeAction.actionExisted'));
                        this.actions.splice(index, 1);
                    }
                    this.actions.push(a);
                }
                this.loadData();
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @return {?}
     */
    delete() {
        this.actionlist.endCellEdit();
        if (this.actionlist.selectedRow && this.actionlist.selectedRow.data) {
            /** @type {?} */
            const i = this.actions.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.code === this.actionlist.selectedRow.data.code));
            this.actions.splice(i, 1);
            this.loadData();
            // this.actionlist.loadData(this.actions);
            // if (this.actions && this.actions.length > 0) {
            //   this.actionlist.selectRow(this.actions[0].id, true);
            // } else {
            //   this.curAction = null;
            // }
        }
        else {
            this.message.info(this.localePipe.transform('component.customizeAction.selectedRow'));
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.actionlist.endCellEdit();
        this.paramlist && this.paramlist.endCellEdit();
        /** @type {?} */
        const object = { value: this.actions, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    loadData() {
        this.actionlist.loadData(this.actions);
        if (this.actions.length > 0 && (!this.actionlist.selectedRow || !this.actionlist.selectedRow.data)) {
            this.actionlist.selectRow(this.actions[0].id, true);
        }
        else {
            this.curAction = null;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectChanged(data) {
        this.curAction = data.data;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        // if (e.instance.value) {
        this.expr.addExpressionText(e.instance.value);
        // }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
CustomizeActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-customize-action',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <!-- <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span> -->\r\n        <!-- <h4 class=\"f-title-text\">\u5217\u8868</h4> -->\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"addActions()\">{{'component.customizeAction.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.customizeAction.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <div [style.height.%]=\"curAction?45:100\">\r\n        <farris-datagrid #actionlist [data]=\"actions\" [idField]=\"'id'\"\r\n          [columns]=\"columns\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\"\r\n          [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"\r\n          (selectChanged)=\"selectChanged($event)\" [closeOtherGridEditor]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n      <ng-container *ngIf=\"curAction\">\r\n        <farris-tabs class=\"f-utils-fill\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n          <farris-tab title=\"{{'component.customizeAction.parameterList'|wfLocale}}\" [id]=\"'parameters'\">\r\n            <ng-template #content>\r\n              <div class=\"f-utils-fill-flex-column h-100\">\r\n                <farris-datagrid #paramlist [data]=\"curAction.actualParameters\" [columns]=\"paramColumns\"\r\n                  [idField]=\"'Name'\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                  [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [closeOtherGridEditor]=\"true\">\r\n                </farris-datagrid>\r\n              </div>\r\n            </ng-template>\r\n          </farris-tab>\r\n        </farris-tabs>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.customizeAction.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.customizeAction.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CustomizeActionComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CustomizeActionComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    value: [{ type: Input }],
    actionlist: [{ type: ViewChild, args: ['actionlist',] }],
    paramlist: [{ type: ViewChild, args: ['paramlist',] }]
};
class CustomizeActionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.customizeAction.set");
        }
        else {
            return this.localePipe.transform("component.customizeAction.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessVariable {
    constructor() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.basicType = 'String';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConstantEditComponent {
    /**
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(cdr, localeId, resources, localePipe) {
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.submitEmitter.emit(this.value);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
}
ConstantEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-constant-edit',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <textarea class=\"form-control\" type=\"text\" value=\"message\" [(ngModel)]=\"value\"\r\n        name=\"message\" style=\"height: 100%;\"></textarea>\r\n      <div class=\"farris-feedback valid-feedback\"></div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.optins.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.optins.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ConstantEditComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ConstantEditComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    value: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentEditLookUpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = params.searchValue;
        if (customData.helpId) {
            /** @type {?} */
            let query = `?helpId=${customData.helpId}&pageIndex=${index}&pageSize=${size}`;
            if (searchValue) {
                query += `&searchValue=${searchValue}`;
            }
            url += query;
            return this.http.get(url);
        }
    }
}
ComponentEditLookUpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComponentEditLookUpService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentEditService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    getHelpMetaData(helpId, su) {
        /** @type {?} */
        const url = `/api/runtime/lcm/v1.0/rt-metadatas/${helpId}`;
        return this.http.get(url);
    }
}
ComponentEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComponentEditService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentEntity {
    constructor() {
        this.Id = ProcessDeUtil.GenerateElementId();
        this.ActualParameters = new Array();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentEditComponent {
    /**
     * @param {?} formBuilder
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} sessionSrc
     * @param {?} modalService
     * @param {?} componentService
     * @param {?} ngZone
     * @param {?} service
     * @param {?} util
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(formBuilder, designerState, expr, resolver, injector, sessionSrc, modalService, componentService, ngZone, service, util, message, cdr, localeId, resources, localePipe) {
        this.formBuilder = formBuilder;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.ngZone = ngZone;
        this.service = service;
        this.util = util;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.showClearButton = false;
        this._component = new ComponentEntity();
        this.columns = [
            { field: 'Name', width: 100, title: this.localePipe.transform("component.variableSetting.parameterName") },
            {
                field: 'Value', width: 100, title: this.localePipe.transform("component.variableSetting.parameterValue"),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.helpFields = {
            idField: '',
            valueField: '',
            textField: ''
        };
        this.dataUri = '/api/runtime/wf/v1.0/dtProcDefs/getHelpData';
        this.helpCols = [];
        this.displayType = 'List';
        this.title = '';
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            switch (rowData.fetchValueMode) {
                case ParameterFetchValueMode.express:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.none:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.const:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.enum:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.help:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                this.cell = e;
                                this.helpId = ((/** @type {?} */ (rowData.fetchValueSetting))).helpId;
                                this.su = ((/** @type {?} */ (rowData.fetchValueSetting))).serviceUnit;
                                this.getHelpInfo().subscribe((/**
                                 * @param {?} re
                                 * @return {?}
                                 */
                                re => {
                                    console.log(re);
                                    /** @type {?} */
                                    const meta = re;
                                    /** @type {?} */
                                    const help = (/** @type {?} */ (JSON.parse(meta.content)));
                                    this.helpCols = help.dataSource.columns;
                                    this.displayType = help.displayType;
                                    this.helpFields = {
                                        idField: help.idField,
                                        valueField: help.valueField,
                                        textField: help.textField
                                    };
                                    this.lookup.onClear();
                                    this.lookup.showDialog();
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                err => {
                                    this.message.error(this.localePipe.transform("component.variableSetting.metadataNotExist"));
                                }));
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
            }
            return of$1(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of$1(true);
        });
        this.dictPicking = (/**
         * @return {?}
         */
        () => {
            return of$1({
                showDialog: true, data: {
                    helpId: this.helpId
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            if (this.cell) {
                console.log(rowData);
                this.cell.formControl.setValue(this.util.getValue(rowData, this.helpFields.valueField));
                this.cell.instance.cd.detectChanges();
                return of$1(true);
            }
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set component(cmp) {
        if (cmp && cmp.MethodCode) {
            this.service.getHelpMetaData(cmp.MetadataId, '').subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                /** @type {?} */
                const c = JSON.parse(re.content);
                /** @type {?} */
                const operation = c.operations.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.code === cmp.MethodCode));
                if (operation) {
                    cmp.ActualParameters = cmp.ActualParameters.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        /** @type {?} */
                        const p = operation.parameters.find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        i => i.code === a.Name));
                        if (p) {
                            return Object.assign({}, a, { fetchValueMode: p.fetchValueMode, fetchValueSetting: p.fetchValueSetting });
                        }
                        else {
                            throw new Error(this.localePipe.transform("component.variableSetting.inconsistentParameters"));
                        }
                    }));
                    this._component = cmp;
                }
                else {
                    throw new Error(this.localePipe.transform("component.variableSetting.methodNotExist"));
                }
            }));
        }
        else {
            this._component = new ComponentEntity();
        }
    }
    /**
     * @return {?}
     */
    get component() {
        return this._component;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.validator()) {
            this.submitEmitter.emit(this.component);
        }
        else {
            this.message.info(this.localePipe.transform("component.variableSetting.methodnotSelected"));
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.component.MethodCode || !this.component.MetadataId) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    clear() {
        this.component = new ComponentEntity();
    }
    /**
     * @return {?}
     */
    selectComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            try {
                /** @type {?} */
                const meta = $event.metadata;
                this.openComponentSelectorNew(meta.id, this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error(this.localePipe.transform("component.variableSetting.errorObtainComponent") + $event);
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.variableSetting.componentSelection"),
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.component.Name = result.name;
                    this.component.MetadataId = result.id;
                    this.component.MethodCode = result.operations[0].code;
                    // this.component.methodName = result.operations[0].name;
                    this.component.ActualParameters = [];
                    if (result.operations[0].parameters && result.operations[0].parameters.length > 0) {
                        this.component.ActualParameters = result.operations[0].parameters
                            .map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        (p) => ({
                            Name: p.code, Value: '', Tag: p.fetchValueMode.indexOf('express,none') > -1 ? 'expression' : 'constant',
                            fetchValueMode: p.fetchValueMode,
                            fetchValueSetting: p.fetchValueSetting
                        })));
                    }
                }
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            e.formControl.setValue(d);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getHelpInfo() {
        return this.service.getHelpMetaData(this.helpId, this.su);
    }
}
ComponentEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-component-edit',
                template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\" style=\"background:#FFF;\">\r\n  <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n    <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n      <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n        <div class=\"farris-group-wrap mx-3\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">{{ 'component.variableSetting.parameterName' | wfLocale }}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-2\">\r\n              <input type=\"text\" class=\"k-textbox form-control\" name=\"name\" [(ngModel)]=\"component.Name\" />\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"farris-form-controls-inline farris-form-auto\">\r\n        <div class=\"farris-group-wrap mx-3\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">{{ 'component.variableSetting.componentSelection' | wfLocale }}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-2\">\r\n              <div #inputGroup class=\"input-group\">\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"component.MethodCode\" name=\"methodCode\"\r\n                  [readOnly]=\"true\" />\r\n                <div class=\"input-group-append\">\r\n                  <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                    (click)=\"clear()\">\r\n                    <i class=\"f-icon modal_close\"></i>\r\n                  </span>\r\n                  <span class=\"input-group-text\" (click)=\"selectComponent()\" style=\"background: #FFF;\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <farris-tabs class=\"f-utils-fill\" #params [value]=\"'params'\" [contentFill]=\"true\">\r\n    <farris-tab title=\"{{'component.variableSetting.parameterList' | wfLocale}}\" [id]=\"'params'\">\r\n      <ng-template #content>\r\n        <div class=\"f-utils-fill-flex-column h-100\">\r\n          <farris-datagrid #grid [data]=\"component.ActualParameters\" [columns]=\"columns\" [idField]=\"'Name'\" [fit]=\"true\"\r\n            [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [striped]=\"true\"\r\n            [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" [beforeEdit]=\"beforeEdit\"></farris-datagrid>\r\n        </div>\r\n      </ng-template>\r\n    </farris-tab>\r\n  </farris-tabs>\r\n</div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" #lookup [(ngModel)]=\"value\" [editable]=\"false\" [columns]=\"helpCols\"\r\n  [singleSelect]=\"true\" title=\"title\" [displayType]=\"displayType\" [uri]=\"dataUri\"\r\n  [idField]=\"helpFields.idField\" [pagination]=\"true\" [valueField]=\"helpFields.valueField\"\r\n  [textField]=\"helpFields.textField\" [dictPicking]=\"dictPicking\" [dictPicked]=\"dictPicked\">\r\n</farris-lookup-grid>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.variableSetting.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.variableSetting.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    ComponentEditService,
                    { provide: ServerSideToken, useClass: ComponentEditLookUpService },
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ComponentEditComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: SessionService },
    { type: BsModalService },
    { type: CommonComponentUiRTService },
    { type: NgZone },
    { type: ComponentEditService },
    { type: ProcessDeUtil },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ComponentEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
    footer: [{ type: ViewChild, args: ['footer',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    component: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessVariablesComponent {
    /**
     * @param {?} message
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} uistate
     * @param {?} expr
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, resolver, injector, modalService, uistate, expr, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.uistate = uistate;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.variableSetting = false;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.variableSetEmitter = new EventEmitter();
        this.value = new Array();
        this.selectedValue = new Array();
        this.editorParams = {};
        this.basicTypes = [
            { value: 'String', text: this.localePipe.transform('component.processVariables.string') },
            { value: 'Integer', text: this.localePipe.transform('component.processVariables.integer') },
            { value: 'Decimal', text: this.localePipe.transform('component.processVariables.decimal') },
            { value: 'Boolean', text: this.localePipe.transform('component.processVariables.boolean') },
        ];
        this.tags = [
            { value: 'constant', text: this.localePipe.transform('component.processVariables.constant') },
            { value: 'expression', text: this.localePipe.transform('component.processVariables.expression') },
            { value: 'component', text: this.localePipe.transform('component.processVariables.component') }
        ];
        this.columns = [
            {
                field: 'name', width: 80, title: this.localePipe.transform('component.processVariables.name'), sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'documentation', width: 80, title: this.localePipe.transform('component.processVariables.documentation'), sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'basicType', width: 60, title: this.localePipe.transform('component.processVariables.basicType'), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'description', width: 100, title: this.localePipe.transform('component.processVariables.description'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'tag', width: 60, title: this.localePipe.transform('component.processVariables.tag'), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto',
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.value = this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.value = this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                }
            }, {
                field: 'valueText', width: 120, title: this.localePipe.transform('component.processVariables.valueText'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.processVariables.processVariables'),
            width: 1070,
            height: 510,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            const column = param.column;
            if (column.field === 'valueText') {
                if (!((/** @type {?} */ (rowData))).tag) {
                    return of$1(false);
                }
                if (((/** @type {?} */ (rowData))).tag === this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.variableSetting) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field !== 'tag'
                && c.field !== 'valueText' && c.field !== 'description'));
        }
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const variable = new ProcessVariable();
        this.value = this.value.concat([variable]);
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        /** @type {?} */
        const selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info(this.localePipe.transform('component.processVariables.notSelected'));
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v.id !== selected.data.id));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.variableSetting) {
            /** @type {?} */
            const selecteds = this.grid.checkeds;
            if (selecteds.length > 0) {
                if (this.varValidator()) {
                    this.variableSetEmitter.emit(selecteds);
                }
            }
            else {
                this.message.info(this.localePipe.transform('component.processVariables.notSelected'));
            }
        }
        else {
            this.grid.endCellEdit();
            if (this.validator()) {
                /** @type {?} */
                const object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    endEdit(data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    valueEdit(e) {
        /** @type {?} */
        const rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[0].value:
                this.editConstant(e);
                break;
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editConstant(e) {
        /** @type {?} */
        const data = e.rowData;
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ConstantEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = data.value;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.processVariables.constant'),
            width: 340,
            height: 280,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editExpression(e) {
        // this.expr.clearContext();
        /** @type {?} */
        const data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            e.form.bindingData.value = re;
            e.form.value.value = re;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editComponent(e) {
        /** @type {?} */
        const data = e.rowData;
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            e.form.bindingData.value = re.Id;
            e.form.value.value = re.Id;
            e.form.value.component = re;
            e.form.bindingData.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.processVariables.component'),
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        for (const item of this.value) {
            if (!item.name) {
                this.message.warning(this.localePipe.transform('component.processVariables.variableNumberEmpty'));
                return false;
            }
            if (!item.documentation) {
                this.message.warning(this.localePipe.transform('component.processVariables.variableNameEmpty'));
                return false;
            }
            if (!this.IsMatchVariableNameRules(item.name)) {
                this.message.warning(this.localePipe.transform('component.processVariables.variableNumberNotStandard'));
                return false;
            }
            if (item.value && !item.tag) {
                this.message.warning(this.localePipe.transform('component.processVariables.tagNotEmpty'));
                return false;
            }
        }
        if (this.value.length > 1) {
            for (let i = 0; i < this.value.length; i++) {
                /** @type {?} */
                const code1 = this.value[i].name;
                for (let j = i + 1; j < this.value.length; j++) {
                    /** @type {?} */
                    const code2 = this.value[j].name;
                    if (code1 === code2) {
                        this.message.warning(this.localePipe.transform('component.processVariables.codeDuplicates'));
                        return false;
                    }
                }
            }
        }
        return true;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    IsMatchVariableNameRules(str) {
        /** @type {?} */
        const Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;
        if (Regx.test(str)) {
            return true;
        }
        else {
            return false;
        }
    }
    // 变量赋值专用校验
    /**
     * @private
     * @return {?}
     */
    varValidator() {
        for (const item of this.grid.checkeds) {
            if (this.selectedValue.length && this.selectedValue.length > 0) {
                if (this.selectedValue.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => v.variableCode === item.data.name)).length > 0) {
                    this.message.warning(this.localePipe.transform('component.processVariables.alreadyExists'));
                    return false;
                }
            }
        }
        return true;
    }
}
ProcessVariablesComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-process-variables',
                template: "<div class=\"f-page\">\r\n  <div *ngIf=\"!variableSetting\" class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"delete()\">{{'component.processVariables.delete' | wfLocale}}</button>\r\n        <button class=\"btn btn-primary\" (click)=\"add()\">{{'component.processVariables.add' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"!variableSetting\" [editMode]=\"'cell'\" [pagination]=\"false\" (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\"\r\n        [showCheckbox]=\"variableSetting\" [multiSelect]=\"variableSetting\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"variableSetting\"\r\n        [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.processVariables.number' | wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.processVariables.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.processVariables.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ProcessVariablesComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ProcessVariablesComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    variableSetting: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    variableSetEmitter: [{ type: Output }],
    value: [{ type: Input }],
    selectedValue: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
class ProcessVariablesConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.processVariables.set");
        }
        else {
            return this.localePipe.transform("component.processVariables.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeLimitInfo {
    constructor() {
        this.tag = 'constant';
        this.enable = false;
        this.timeUnit = 'day';
        this.expireOperations = new Array();
    }
}
class ExpireOperation {
    constructor() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.durationType = 'BeforeDuration';
        this.timeDuration = 0;
        this.timeUnit = 'day';
        // 默认操作类型是发送预警消息
        this.operationTypeName = 'SendMessageExpireOperation';
    }
}
/**
 * 发送预警信息方式
 */
class SendMessage extends ExpireOperation {
    /**
     * @param {?} location
     * @param {?} localePipe
     */
    constructor(location, localePipe) {
        super();
        this.localePipe = localePipe;
        this.cycleEnable = false;
        this.cycleTimeUnit = 'day';
        this.receiver = location === 'activity' ? 'workItemParticipant' : 'procInstCreator';
        this.receiverText = location === 'activity' ? this.localePipe.transform('component.timeLimitControl.workItemParticipant') : this.localePipe.transform('component.timeLimitControl.procInstCreator');
        this.subject = `{"expr":"\'` + this.localePipe.transform('component.timeLimitControl.SendMessageExpireOperation') + `\'","sexpr":""}`;
        this.message = `{"expr":"\'` + (location === 'activity' ? this.localePipe.transform('component.timeLimitControl.to-doMessageTimeOut') : this.localePipe.transform('component.timeLimitControl.messageTimeOut')) + `\'","sexpr":""}`;
    }
}
class AutoHandle extends ExpireOperation {
    /**
     * @param {?} type
     * @param {?} localePipe
     */
    constructor(type, localePipe) {
        super();
        this.localePipe = localePipe;
        this.autoHandleType = type;
        this.message = this.localePipe.transform('component.timeLimitControl.agree');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmsMessageTemplate$1 {
    constructor() {
        this.smsMessageVariables = new Array();
    }
}
class SmsMessageVariable$1 {
    constructor() {
        this.tag = 'expression';
        this.id = ProcessDeUtil.createNM();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmsMessageTemplateComponent {
    /**
     * @param {?} designerState
     * @param {?} expr
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerState, expr, message, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.smsVariableList = new Array();
        this.smsVariableCols = new Array();
        this.smsTemplateContent = this.localePipe.transform('component.smsMessageTemplate.smsTemplateContent');
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.smsMessageTemplate = new SmsMessageTemplate$1();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.smsVariableCols = [{
                field: 'code', width: 80, title: this.localePipe.transform('component.smsMessageTemplate.code'), editor: { type: EditorTypes.TEXTBOX, options: {} }
            }, {
                field: 'value', width: 100, title: this.localePipe.transform('component.smsMessageTemplate.value'), showTips: true, editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }];
        console.log(this.smsMessageTemplate);
    }
    /**
     * @return {?}
     */
    addSmsVariable() {
        /** @type {?} */
        const variable = new SmsMessageVariable$1();
        this.smsMessageTemplate.smsMessageVariables.push(variable);
        this.grid.loadData(this.smsMessageTemplate.smsMessageVariables);
    }
    /**
     * @return {?}
     */
    deleteSmsVariable() {
        this.endGridEdit();
        /** @type {?} */
        const selectedVariable = this.grid.selectedRow;
        if (!selectedVariable) {
            this.message.info(this.localePipe.transform('component.smsMessageTemplate.noRowsSelected'));
            return;
        }
        /** @type {?} */
        const index = this.smsMessageTemplate.smsMessageVariables.findIndex((/**
         * @param {?} variable
         * @return {?}
         */
        variable => variable.id === selectedVariable.id));
        if (index > -1) {
            this.smsMessageTemplate.smsMessageVariables.splice(index, 1);
            this.grid.loadData(this.smsMessageTemplate.smsMessageVariables);
        }
    }
    /**
     * @return {?}
     */
    endGridEdit() {
        this.grid.endCellEdit();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
SmsMessageTemplateComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-sms-message-template',
                template: "<div class=\"w-100\">\r\n  <farris-section class=\"py-0 \" [enableAccordion]=\"''\" [enableMaximize]=\"false\">\r\n    <ng-template farrisSectionHeader>\r\n      <div class=\"f-title\">\r\n        <h4 class=\"f-title-text\">{{'component.smsMessageTemplate.smsMessageTemplate'|wfLocale}}</h4>\r\n        <span farrisPopover class=\"f-icon f-icon-message_help\" style=\"color:#FBB902\" [container]=\"'body'\"\r\n          [triggers]=\"'hover'\" [placement]=\"'right'\" [popover]=\"poptmpl\">\r\n        </span>\r\n        <ng-template #poptmpl let-infos>\r\n          <div style=\"padding:10px 10px 10px 10px;font-size: 12px;color: black;width: 260px;\">\r\n            <h4 style=\"font-weight: 600;font-size: 16px;color: saddlebrown;\">{{'component.smsMessageTemplate.smsMessageTemplate'|wfLocale}}</h4>\r\n            <p style=\"margin: 0 0 10px;\">{{'component.smsMessageTemplate.tips1'|wfLocale}}</p>\r\n            <h4 style=\"font-weight: 600;font-size: 16px;color: saddlebrown;\">{{'component.smsMessageTemplate.smsTemplateNumber'|wfLocale}}</h4>\r\n            <p style=\"margin: 0 0 10px;\">{{'component.smsMessageTemplate.tips2'|wfLocale}}</p>\r\n            <!-- <h4 style=\"font-weight: 600;font-size: 16px;color: saddlebrown;\">\u77ED\u4FE1\u6A21\u677F\u5185\u5BB9</h4>\r\n            <p style=\"margin: 0 0 10px;\">{{smsTemplateContent}}</p> -->\r\n            <h4 style=\"font-weight: 600;font-size: 16px;color: saddlebrown;\">{{'component.smsMessageTemplate.smsVariableBinding'|wfLocale}}</h4>\r\n            <p style=\"margin: 0 0 10px;\">{{'component.smsMessageTemplate.tips3'|wfLocale}}</p>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </ng-template>\r\n    <div class=\"f-form-layout farris-form  farris-form-controls-inline f-form-lable-auto farris-form-auto\">\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">{{'component.smsMessageTemplate.smsTemplateNumber'|wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-1\">\r\n              <input [(ngModel)]=\"smsMessageTemplate.code\" class=\"form-control\" name=\"tempCode\" type=\"text\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\" style=\"visibility: hidden;\">*</span>\r\n              <span class=\"farris-label-text\">\u77ED\u4FE1\u6A21\u677F\u5185\u5BB9</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-1\">\r\n              <textarea [(ngModel)]=\"smsMessageTemplate.content\"  class=\"form-control \" cols=\"10\" id=\"textobj\" name=\"tempText\" rows=\"3\"> </textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> -->\r\n    </div>\r\n  </farris-section>\r\n</div>\r\n<div class=\"w-100\">\r\n  <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\"\r\n    enableAccordion=\"{{'component.smsMessageTemplate.smsTemplateNumber'|wfLocale}}\" [enableMaximize]=\"false\" [mainTitle]=\"''\">\r\n    <!-- <ng-template farrisSectionTitle>\r\n      <div class=\"farris-label-text\">\u77ED\u4FE1\u53D8\u91CF\u7ED1\u5B9A</div>\r\n    </ng-template> -->\r\n    <ng-template farrisSectionToolbar>\r\n      <farris-button [type]=\"'link'\" (click)=\"addSmsVariable()\">\r\n        <span class=\"f-icon f-icon-add\"></span>\r\n        {{'component.smsMessageTemplate.addSmsVariable'|wfLocale}}</farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"deleteSmsVariable()\">\r\n        <span class=\"f-icon f-icon-delete\"></span>\r\n        {{'component.smsMessageTemplate.deleteSmsVariable'|wfLocale}}</farris-button>\r\n    </ng-template>\r\n    <div style=\"height: 180px\">\r\n      <farris-datagrid #grid [data]=\"smsMessageTemplate.smsMessageVariables\" [idField]=\"'id'\" [columns]=\"smsVariableCols\"\r\n        [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n        [showLineNumber]=\"true\" [showCheckbox]=\"false\" [multiSelect]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </farris-section>\r\n</div>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SmsMessageTemplateComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
SmsMessageTemplateComponent.propDecorators = {
    grid: [{ type: ViewChild, args: ['grid',] }],
    smsMessageTemplate: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SendMessageOperationComponent {
    /**
     * @param {?} injector
     * @param {?} message
     * @param {?} uistate
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?} expr
     */
    constructor(injector, message, uistate, cdr, localeId, resources, localePipe, expr) {
        this.injector = injector;
        this.message = message;
        this.uistate = uistate;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.expr = expr;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        // operation: ExpireOperation = new ExpireOperation();
        this.operation = new SendMessage('activity', this.localePipe);
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        m => ({ value: m.code, name: m.name })));
        this.receiverVariables = [
            { value: 'procInstCreator', name: this.localePipe.transform("component.sendMessageOperation.procInstCreator") }
        ];
        this.activityReceiverVariables = [
            { value: 'workItemParticipant', name: this.localePipe.transform("component.sendMessageOperation.workItemParticipant") },
            { value: 'procInstCreator', name: this.localePipe.transform("component.sendMessageOperation.procInstCreator") },
            { value: 'preActExecutors', name: this.localePipe.transform("component.sendMessageOperation.preActExecutors") }
        ];
        this.placeholder = '';
        this.placeholder2 = '';
        this.hasSmsTemplate = false;
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            // console.log(val);
            return Number(val);
        });
        this.timeUnitCollection = [
            { value: 'day', text: this.localePipe.transform("component.sendMessageOperation.day") },
            { value: 'hour', text: this.localePipe.transform("component.sendMessageOperation.hour") },
            { value: 'minute', text: this.localePipe.transform("component.sendMessageOperation.minute") }
        ];
        this.location = 'activity';
        this.activityReceiverVar = '';
        this.bindingData = {};
    }
    /**
     * @param {?} info
     * @return {?}
     */
    set value(info) {
        this.operation = JSON.parse(JSON.stringify(info));
        if (this.operation.sendType === undefined) {
            /** @type {?} */
            const sendMessage = new SendMessage(this.location, this.localePipe);
            this.operation.cycleEnable = sendMessage.cycleEnable;
            this.operation.cycleTimeUnit = sendMessage.cycleTimeUnit;
            this.operation.receiver = sendMessage.receiver;
            this.operation.subject = sendMessage.subject;
            this.operation.message = sendMessage.message;
        }
        if (this.operation.receiver && this.operation.receiver.length > 0) {
            /** @type {?} */
            let array = this.operation.receiver.split(',');
            if (array.indexOf('workItemParticipant') > -1) {
                this.receiverVari = 'workItemParticipant';
                this.activityReceiverVar += 'workItemParticipant,';
            }
            if (array.indexOf('procInstCreator') > -1) {
                this.receiverVari = 'procInstCreator';
                this.activityReceiverVar += 'procInstCreator,';
            }
            if (array.indexOf('preActExecutors') > -1) {
                this.activityReceiverVar += 'preActExecutors,';
            }
            if (this.activityReceiverVar.length > 0) {
                this.activityReceiverVar = this.activityReceiverVar.substring(0, this.activityReceiverVar.length - 1);
            }
            if (array.length > 0) {
                array = array.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a !== 'procInstCreator'));
                this.bindingData.id = '';
                for (const r of array) {
                    this.bindingData.id += r + ',';
                }
                if (this.bindingData.id) {
                    this.bindingData.id = this.bindingData.id.substring(0, this.bindingData.id.length - 1);
                }
            }
        }
        if (this.operation.receiverText && this.operation.receiverText.length > 0) {
            /** @type {?} */
            let array = this.operation.receiverText.split(',');
            if (array.length > 0) {
                array = array.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a !== '流程发起人'));
                this.bindingData.name = '';
                for (const r of array) {
                    this.bindingData.name += r + ',';
                }
                if (this.bindingData.name) {
                    this.bindingData.name = this.bindingData.name.substring(0, this.bindingData.name.length - 1);
                }
            }
        }
        if (this.hasSmsMessage(this.operation.sendType)) {
            this.hasSmsTemplate = true;
            if (!this.operation.smsMessageTemplate) {
                this.operation.smsMessageTemplate = new SmsMessageTemplate$1();
            }
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this.operation;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    contentExpr(data) {
        this.showContentHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    titleExpr(data) {
        this.showTitleHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showContentHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.operation.message && this.operation.message.length > 0) {
            if (!this.operation.message.startsWith("{\"" + "expr\"" + ":\"")) {
                this.expr.addExpressionText("\'" + this.operation.message + "\'");
            }
            else {
                this.expr.addExpressionText(this.operation.message);
            }
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.operation.message = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showTitleHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.operation.subject && this.operation.subject.length > 0) {
            if (!this.operation.subject.startsWith("{\"" + "expr\"" + ":\"")) {
                this.expr.addExpressionText("\'" + this.operation.subject + "\'");
            }
            else {
                this.expr.addExpressionText(this.operation.subject);
            }
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.operation.subject = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.SmsTemplate) {
            this.SmsTemplate.endGridEdit();
        }
        this.operation.cycleTime += '';
        if (this.location === 'process') {
            this.setReceiver();
        }
        if (this.location === 'activity') {
            this.setActivityReceiver();
        }
        if (this.hasSmsTemplate) {
            this.operation.smsMessageTemplate = this.SmsTemplate.smsMessageTemplate;
            if (this.operation.smsMessageTemplate.smsMessageVariables && this.operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                this.operation.smsMessageTemplate.smsMessageVariables = this.operation.smsMessageTemplate.smsMessageVariables.filter((/**
                 * @param {?} variable
                 * @return {?}
                 */
                variable => variable.code));
            }
        }
        else {
            this.operation.smsMessageTemplate = null;
        }
        if (this.validator()) {
            this.submitEmitter.emit(this.operation);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @return {?}
     */
    clear() {
        this.bindingData = {};
    }
    /**
     * @param {?} sendType
     * @return {?}
     */
    sendTypeChange(sendType) {
        if (this.hasSmsMessage(sendType)) {
            this.hasSmsTemplate = true;
            if (!this.operation.smsMessageTemplate) {
                this.operation.smsMessageTemplate = new SmsMessageTemplate$1();
            }
        }
        else {
            this.hasSmsTemplate = false;
            this.operation.smsMessageTemplate = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setReceiver() {
        /** @type {?} */
        let receiver = '';
        /** @type {?} */
        let receiverText = '';
        if (this.receiverVari) {
            receiver += this.receiverVari + ',';
            /** @type {?} */
            const array = this.receiverVari.split(',');
            if (array.length > 0) {
                for (const a of array) {
                    /** @type {?} */
                    const t = this.receiverVariables.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    v => v.value === a)).name;
                    receiverText += t + ',';
                }
            }
        }
        if (this.bindingData.id) {
            receiver += this.bindingData.id + ',';
            receiverText += this.bindingData.name + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        if (receiverText) {
            receiverText = receiverText.substring(0, receiverText.length - 1);
        }
        this.operation.receiver = receiver;
        this.operation.receiverText = receiverText;
    }
    /**
     * @return {?}
     */
    setActivityReceiver() {
        /** @type {?} */
        let receiver = '';
        if (this.activityReceiverVar) {
            receiver += this.activityReceiverVar + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        this.operation.receiver = receiver;
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        // 2023-5-22 如果没有启用循环预警则不进行校验
        if (this.operation.cycleEnable) {
            if (this.operation.cycleTime === 'undefined') {
                this.message.info(this.localePipe.transform("component.sendMessageOperation.cycleTimeNotEmpty"));
                return false;
            }
        }
        if (!this.operation.sendType) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.sendMethodNotEmpty"));
            return false;
        }
        if (!this.operation.subject) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.subjectNotEmpty"));
            return false;
        }
        if (!this.operation.message) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.contentNotEmpty"));
            return false;
        }
        if (!this.operation.receiver) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.recipientNotEmpty"));
            return false;
        }
        //去除消息模板编号校验
        // if (this.hasSmsTemplate) {
        //   if (!this.operation.smsMessageTemplate) {
        //     this.message.info(this.localePipe.transform("component.sendMessageOperation.messageTemplate"));
        //     return false;
        //   }
        //   if (!this.operation.smsMessageTemplate.code) {
        //     this.message.info(this.localePipe.transform("component.sendMessageOperation.smsTemplateNumberNotEmpty"));
        //     return false;
        //   }
        // }
        return true;
    }
    /**
     * @private
     * @param {?} sendType
     * @return {?}
     */
    hasSmsMessage(sendType) {
        if (sendType) {
            /** @type {?} */
            const sendTypeList = sendType.split(',');
            /** @type {?} */
            let messageChannel = sendTypeList.find((/**
             * @param {?} val
             * @return {?}
             */
            val => this.uistate.messageChannels.find((/**
             * @param {?} channel
             * @return {?}
             */
            channel => channel.code == val && channel.channelType == 'Sms'))));
            if (messageChannel) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    showExpr() {
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        return context;
    }
}
SendMessageOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-send-message-operation',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <perfect-scrollbar [config]=\"{}\">\r\n      <form class=\"h-100\">\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline farris-form-auto\" style=\"padding-right: 0.875rem; padding-left: 0.875rem;\">\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label pl-1 mr-3\">\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.cycleEnable' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-5\">\r\n                  <farris-switch [(ngModel)]=\"operation.cycleEnable\" name=\"cycleEnable\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-7 mt-2 pr-1\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\" style=\"width: 100%;\">\r\n                <label class=\"col-form-label pl-1 mr-3\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.cycleTime' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-1\" style=\"width: 35%;\">\r\n                  <farris-number-spinner [(ngModel)]=\"operation.cycleTime\" name=\"cycleTime\"\r\n                                          [editable]=\"true\" [precision]=\"0\" [parser]=\"parser\"\r\n                                          [min]=\"0\"></farris-number-spinner>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-3 mt-2 pl-1\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\" style=\"width: 100%;\">\r\n                <div class=\"farris-input-wrap mr-5\" style=\"width: 30%;\">\r\n                  <farris-combo-list [(ngModel)]=\"operation.cycleTimeUnit\" name=\"cycleTimeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                      [valueField]=\"'value'\" [data]=\"timeUnitCollection\" [panelHeight]=\"'auto'\"\r\n                                      [editable]=\"false\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.sendType' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"operation.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                    [data]=\"typeGroup\" (changeValue)=\"sendTypeChange($event)\">\r\n                  </farris-checkboxgroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.subject' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                    <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                    [(value)]=\"operation.subject\" (clickHandle)=\"titleExpr($event)\">\r\n                    </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.message' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                    <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                    [(value)]=\"operation.message\" (clickHandle)=\"contentExpr($event)\">\r\n                    </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div *ngIf=\"location==='process'\" class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.receiverVari' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <div class=\"pb-2\">\r\n                    <farris-checkboxgroup #receiverVariable [(ngModel)]=\"receiverVari\" name=\"receiverVariable\"\r\n                      [horizontal]=\"true\" [data]=\"receiverVariables\">\r\n                    </farris-checkboxgroup>\r\n                  </div>\r\n                  <div>\r\n                    <sys-farris-grid-lookup #userHelp [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\" [pagination]=\"true\"\r\n                      [pageSize]=\"20\" title=\"{{'component.sendMessageOperation.sysUsers' | wfLocale}}\" [sourceType]=\"'user'\" [bindingData]=\"bindingData\"\r\n                      [filter]=\"{notGetCurrentUser:false, notGetStopUser:true}\" [typeMode]=\"1\" (clear)=\"clear()\">\r\n                    </sys-farris-grid-lookup>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"location==='activity'\" class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.receiverVari' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <div class=\"pb-2\">\r\n                    <farris-checkboxgroup #receiverVariable1 [(ngModel)]=\"activityReceiverVar\" name=\"ActivityReceiverVariable\"\r\n                                          [horizontal]=\"true\" [data]=\"activityReceiverVariables\">\r\n                    </farris-checkboxgroup>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <lib-sms-message-template *ngIf=\"hasSmsTemplate\" [smsMessageTemplate]=\"operation.smsMessageTemplate\"></lib-sms-message-template>\r\n      </form>\r\n    </perfect-scrollbar>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.sendMessageOperation.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.sendMessageOperation.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SendMessageOperationComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: ExpressionService }
];
SendMessageOperationComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    SmsTemplate: [{ type: ViewChild, args: [SmsMessageTemplateComponent,] }],
    value: [{ type: Input }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutoHandleOperationComponent {
    /**
     * @param {?} message
     * @param {?} uiState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, uiState, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.uiState = uiState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.placeholder = '';
        this.operation = new AutoHandle('Pass', this.localePipe);
        this.submitEmitter = new EventEmitter();
        this.closeEmitter = new EventEmitter();
        this.autoHandleType = [
        // { value: 'autoPass', text: '自动通过' },
        // { value: 'autoBack', text: '自动驳回' }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        for (const item of this.uiState.propertyData.ApprovalItems) {
            this.autoHandleType.push({ value: item.Value, text: item.Text });
        }
    }
    /**
     * @param {?} info
     * @return {?}
     */
    set value(info) {
        this.operation = Object.assign({}, info);
        if (this.operation.autoHandleType === undefined) {
            /** @type {?} */
            const autoHandle = new AutoHandle(this.autoHandleType[0].value, this.localePipe);
            this.operation.autoHandleType = autoHandle.autoHandleType;
            this.operation.message = autoHandle.message;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this.operation;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validator()) {
            this.submitEmitter.emit(this.operation);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.operation.message) {
            this.message.info(this.localePipe.transform('component.sendMessageOperation.opinionsNotEmpty'));
            return false;
        }
        if (!this.operation.autoHandleType) {
            this.message.info(this.localePipe.transform('component.sendMessageOperation.processingNotEmpty'));
            return false;
        }
        return true;
    }
}
AutoHandleOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-auto-handle-operation',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{'component.sendMessageOperation.automaticProcessSet' | wfLocale}}</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">{{'component.sendMessageOperation.automaticProcessMethod' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-combo-list [(ngModel)]=\"operation.autoHandleType\" name=\"cycleTimeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                       [valueField]=\"'value'\" [data]=\"autoHandleType\" [panelHeight]=\"'auto'\"\r\n                                       [editable]=\"false\" [enableClear]=\"false\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">{{'component.sendMessageOperation.automaticOpinionHandle' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <textarea class=\"form-control\" type=\"text\" value=\"message\" [(ngModel)]=\"operation.message\" name=\"message\"\r\n                              [placeholder]=\"placeholder\" style=\"height: 100px;\"></textarea>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.sendMessageOperation.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.sendMessageOperation.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AutoHandleOperationComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AutoHandleOperationComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    value: [{ type: Input }],
    submitEmitter: [{ type: Output }],
    closeEmitter: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeLimitControlComponent {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(resolver, injector, modalService, message, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform("component.timeLimitControl.timedOutOperation"),
            width: 760,
            height: 532,
            showButtons: true
        };
        this.timeLimitInfo = new TimeLimitInfo();
        this.tagCollection = [
            { value: 'constant', text: this.localePipe.transform("component.timeLimitControl.constant") },
            { value: 'scope', text: this.localePipe.transform("component.timeLimitControl.scope") }
        ];
        this.timeUnitCollection = [
            { value: 'day', text: this.localePipe.transform("component.timeLimitControl.day") },
            { value: 'hour', text: this.localePipe.transform("component.timeLimitControl.hour") },
            { value: 'minute', text: this.localePipe.transform("component.timeLimitControl.minute") }
        ];
        this.durationTypeCollection = [
            { value: 'BeforeDuration', text: this.localePipe.transform("component.timeLimitControl.BeforeDuration") },
            { value: 'OnDuration', text: this.localePipe.transform("component.timeLimitControl.OnDuration") },
            { value: 'AfterDuration', text: this.localePipe.transform("component.timeLimitControl.AfterDuration") }
        ];
        this.activityOperationTypeName = [
            { value: 'SendMessageExpireOperation', text: this.localePipe.transform("component.timeLimitControl.SendMessageExpireOperation") },
            { value: 'AutoHandleExpireOperation', text: this.localePipe.transform("component.timeLimitControl.AutoHandleExpireOperation") }
        ];
        this.processOperationTypeName = [
            { value: 'SendMessageExpireOperation', text: this.localePipe.transform("component.timeLimitControl.SendMessageExpireOperation") }
        ];
        this.operationTypeName = [];
        this.timeScopeCollection = [
            { value: 'curDay', name: this.localePipe.transform("component.timeLimitControl.curDay") }
        ];
        this.timeScopeValue = this.timeScopeCollection[0].value;
        this.cols = [];
        this.location = 'activity';
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return Number(val);
        });
        this.durationTypeChange = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.value && data.value.value === this.durationTypeCollection[1].value) {
                /** @type {?} */
                const operation = this.timeLimitInfo.expireOperations.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.id === data.rowData.id));
                operation.timeDuration = 0;
            }
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v) {
            this.timeLimitInfo = v;
        }
        else {
            this.timeLimitInfo = new TimeLimitInfo();
        }
        // 兼容历史数据中的操作类型
        for (const operation of this.timeLimitInfo.expireOperations) {
            if (operation.operationTypeName === undefined) {
                operation.operationTypeName = 'SendMessageExpireOperation';
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.location = this.editorParams.location;
        if (this.location === 'activity') {
            this.operationTypeName = this.activityOperationTypeName;
        }
        else {
            this.operationTypeName = this.processOperationTypeName;
        }
        this.cols = [
            {
                field: 'durationType', width: 80, title: this.localePipe.transform("component.timeLimitControl.durationType"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.durationTypeCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.durationTypeCollection, idField: 'value', panelHeight: 'auto',
                        valueChange: this.durationTypeChange, showClear: false
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'timeDuration', width: 60, title: this.localePipe.transform("component.timeLimitControl.timeDuration"),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: { min: 0 },
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'timeUnit', width: 60, title: this.localePipe.transform("component.timeLimitControl.timeUnit"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.timeUnitCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.timeUnitCollection, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'operationTypeName', width: 100, title: this.localePipe.transform("component.timeLimitControl.operationTypeName"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.operationTypeName }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.operationTypeName, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'sendType', width: 80, title: this.localePipe.transform("component.timeLimitControl.sendType"), template: this.cell,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }
        ];
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        this.timeLimitInfo.dueTime += '';
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.timeLimitInfo, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if ((this.timeLimitInfo.dueTime).indexOf('.') > -1) {
            console.log(this.timeLimitInfo.dueTime);
            this.message.info(this.localePipe.transform("component.timeLimitControl.onlyBeInteger"));
            return false;
        }
        if (this.timeLimitInfo.expireOperations
            && this.timeLimitInfo.expireOperations.length > 0) {
            for (const e of this.timeLimitInfo.expireOperations) {
                if (e.operationTypeName === 'SendMessageExpireOperation') {
                    /** @type {?} */
                    const a = (/** @type {?} */ (e));
                    if (!a.sendType) {
                        this.message.info(this.localePipe.transform("component.timeLimitControl.setOperation"));
                        return false;
                    }
                }
                if (e.operationTypeName === 'AutoHandleExpireOperation') {
                    /** @type {?} */
                    const a = (/** @type {?} */ (e));
                    if (!a.autoHandleType) {
                        this.message.info(this.localePipe.transform("component.timeLimitControl.setType"));
                        return false;
                    }
                    if (!a.message) {
                        this.message.info(this.localePipe.transform("component.timeLimitControl.setComments"));
                        return false;
                    }
                }
                if (e.durationType === 'OnDuration' && e.timeDuration !== 0) {
                    e.timeDuration = 0;
                }
            }
        }
        return true;
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        let operation = new ExpireOperation();
        this.timeLimitInfo.expireOperations.push(operation);
        this.grid.loadData(this.timeLimitInfo.expireOperations);
        this.grid.selectRow(operation.id);
    }
    /**
     * @return {?}
     */
    remove() {
        this.grid.endCellEdit();
        /** @type {?} */
        const curItem = this.grid.selectedRow;
        if (!curItem) {
            this.message.info(this.localePipe.transform("component.timeLimitControl.selectedOperation"));
            return;
        }
        /** @type {?} */
        const i = this.timeLimitInfo.expireOperations.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id === curItem.data.id));
        if (i > -1) {
            this.timeLimitInfo.expireOperations.splice(i, 1);
            this.grid.loadData(this.timeLimitInfo.expireOperations);
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    editOperation(ctx) {
        this.grid.endCellEdit();
        if (ctx.rowData.operationTypeName === 'SendMessageExpireOperation') {
            this.sendMassageOperation(ctx);
        }
        if (ctx.rowData.operationTypeName === 'AutoHandleExpireOperation') {
            this.message.confirm(this.localePipe.transform("component.timeLimitControl.notSupportAutomatic")).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => re === true ? this.autoHandleOperation(ctx) : null));
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    sendMassageOperation(ctx) {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SendMessageOperationComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        compRef.instance.value = Object.assign({}, ctx.rowData);
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            /** @type {?} */
            let operation = this.timeLimitInfo.expireOperations.find((/**
             * @param {?} o
             * @return {?}
             */
            o => o.id === re.id));
            operation = Object.assign(operation, re);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.timeLimitControl.warningMessage"),
            width: 800,
            height: 515,
            buttons: compRef.instance.footer,
            showButtons: true
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    autoHandleOperation(ctx) {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AutoHandleOperationComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = Object.assign({}, ctx.rowData);
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            /** @type {?} */
            let operation = this.timeLimitInfo.expireOperations.find((/**
             * @param {?} o
             * @return {?}
             */
            o => o.id === re.id));
            operation = Object.assign(operation, re);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.timeLimitControl.automaticProcessing"),
            width: 500,
            height: this.location === 'activity' ? 390 : 460,
            buttons: compRef.instance.footer,
            showButtons: true
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    tagSelectChange(data) {
        if (data.data.value === 'constant') {
            this.timeLimitInfo.timeUnit = "day";
        }
        else if (data.data.value === 'scope') {
            this.timeLimitInfo.timeUnit = '';
            this.timeLimitInfo.dueTime = this.timeScopeValue;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    changeTimeScope(data) {
        this.timeScopeValue = data;
        this.timeLimitInfo.dueTime = this.timeScopeValue;
    }
}
TimeLimitControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-time-limit-control',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{ 'component.timeLimitControl.timelinessControl' | wfLocale }}</h4><span class=\"title-line\"></span>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"f-utils-fill-flex-column h-100\">\r\n            <div class=\"farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"col-form-label pl-1 mr-3\">\r\n                    <span class=\"farris-label-text\">{{ 'component.timeLimitControl.isEnable' | wfLocale }}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mr-5\">\r\n                    <farris-switch [(ngModel)]=\"timeLimitInfo.enable\" name=\"enable\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\" style=\"width: 100%;\">\r\n                  <label class=\"col-form-label pl-1 mr-3\">\r\n                    <span class=\"farris-label-text\">{{ 'component.timeLimitControl.taskDeadline' | wfLocale }}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mr-1\" style=\"width: 35%;\"><!--name=\"tag\"-->\r\n                    <farris-combo-list [(ngModel)]=\"timeLimitInfo.tag\" [idField]=\"'value'\" [textField]=\"'text'\" name=\"tag\"\r\n                                       [valueField]=\"'value'\" [data]=\"tagCollection\" [panelHeight]=\"'auto'\"\r\n                                       [editable]=\"false\" [enableClear]=\"false\" (selectChange)=\"tagSelectChange($event)\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <div *ngIf=\"timeLimitInfo.tag === 'constant'\" class=\"farris-input-wrap mr-1\" style=\"width: 35%;\">\r\n                    <farris-number-spinner [(ngModel)]=\"timeLimitInfo.dueTime\" name=\"dueTime\"\r\n                      [editable]=\"true\" [precision]=\"0\" [parser]=\"parser\"\r\n                      [min]=\"0\"></farris-number-spinner>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <div *ngIf=\"timeLimitInfo.tag === 'constant'\" class=\"farris-input-wrap mr-5\" style=\"width: 30%;\">\r\n                    <farris-combo-list [(ngModel)]=\"timeLimitInfo.timeUnit\" name=\"timeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"timeUnitCollection\" [panelHeight]=\"'auto'\"\r\n                    [editable]=\"false\" [enableClear]=\"false\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <div *ngIf=\"timeLimitInfo.tag === 'scope'\" class=\"farris-input-wrap mr-1\" style=\"width: 65%;\">\r\n                    <farris-radiogroup [(ngModel)]=\"timeLimitInfo.dueTime\" name=\"scope\"\r\n                                       [data]=\"timeScopeCollection\"\r\n                                       (changeValue)=\"changeTimeScope($event)\">\r\n                    </farris-radiogroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"mx-2 mt-3\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">{{ 'component.timeLimitControl.timelyOperation' | wfLocale }}</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mx-2 h-100\">\r\n              <farris-tabs class=\"f-utils-fill h-100\" [value]=\"'operation'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n                <farris-tab title=\"{{'component.timeLimitControl.timelyOperation' | wfLocale}}\" [id]=\"'operation'\">\r\n                  <ng-template farrisTabsExtend>\r\n                    <div class=\"mx-2\">\r\n                      <button type=\"button\" (click)=\"add()\"\r\n                        class=\"btn btn-primary mr-2\">{{ 'component.timeLimitControl.add' | wfLocale }}</button>\r\n                      <button type=\"button\" (click)=\"remove()\"\r\n                        class=\"btn btn-secondary\">{{ 'component.timeLimitControl.remove' | wfLocale }}</button>\r\n                    </div>\r\n                  </ng-template>\r\n                  <ng-template #content>\r\n                    <div class=\"f-utils-fill-flex-column h-100\" style=\"background: #FFF;\">\r\n                      <farris-datagrid #grid [data]=\"timeLimitInfo.expireOperations\" [idField]=\"'id'\" [columns]=\"cols\"\r\n                        [fit]=\"true\" [editMode]=\"'cell'\" [editable]=\"true\"\r\n                        [fitColumns]=\"true\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"><!--[beforeEdit]=\"beforeEdit\" [afterEdit]=\"afterEdit\"-->\r\n                      </farris-datagrid>\r\n                    </div>\r\n                  </ng-template>\r\n                </farris-tab>\r\n              </farris-tabs>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #cell let-ctx>\r\n  <span (click)=\"editOperation(ctx)\" *ngIf=\"ctx.rowData.operationTypeName === 'SendMessageExpireOperation'\" class=\"link\">\r\n    {{ ctx.rowData.sendType?('component.timeLimitControl.set' | wfLocale): ('component.timeLimitControl.notSet' | wfLocale) }}\r\n  </span>\r\n  <span (click)=\"editOperation(ctx)\" *ngIf=\"ctx.rowData.operationTypeName === 'AutoHandleExpireOperation'\" class=\"link\">\r\n    {{ (ctx.rowData.autoHandleType && ctx.rowData.message)?('component.timeLimitControl.set' | wfLocale): ('component.timeLimitControl.notSet' | wfLocale) }}\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.timeLimitControl.clickCancel' | wfLocale }}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.timeLimitControl.clickOK' | wfLocale }}</button>\r\n</ng-template>",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:760px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}.link{color:#1206bb;font-size:14px}.link:hover{color:#5d478b;font-size:14px}"]
            }] }
];
/** @nocollapse */
TimeLimitControlComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
TimeLimitControlComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    cell: [{ type: ViewChild, args: ['cell',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
class TimeLimitControlConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.enable) {
            return this.localePipe.transform("component.timeLimitControl.set");
        }
        else {
            return this.localePipe.transform("component.timeLimitControl.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageNotice$1 {
    constructor() {
        /**
         * 接收人列表
         */
        this.receivers = new Array();
        this.id = ProcessDeUtil.GenerateElementId();
        this.subject = '消息通知';
        // this.sendType = 'email';
        this.content = `{"expr":"\'您有一条消息通知。\'","sexpr":""}`;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageReceiver {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityListComponent {
    /**
     * @param {?} designerUIState
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, message, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.multiSelect = true;
        this.showCheckbox = true;
        this.data = new Array();
        this.columns = [
            { title: this.localePipe.transform('component.activityList.name'), field: 'Name', width: 60 },
            { title: 'ID', field: 'Id', width: 90 }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.data = this.designerUIState.userActList;
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const result = this.grid.checkeds;
        if (!result || result.length === 0) {
            this.message.info(this.localePipe.transform('component.activityList.checkeds'));
            return;
        }
        this.submitEmitter.emit(result);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
}
ActivityListComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-activity-list',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"showCheckbox\" [multiSelect]=\"multiSelect\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.activityList.checkeds' | wfLocale}}\"\r\n         [lineNumberWidth]=\"50\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.activityList.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.activityList.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ActivityListComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ActivityListComponent.propDecorators = {
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    buttonRef: [{ type: ViewChild, args: ['buttonRef',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerEntity {
    /**
     * @param {?=} id
     * @param {?=} name
     * @param {?=} type
     */
    constructor(id, name, type) {
        this.id = '_' + ProcessDeUtil.GenerateElementId();
        this.performerId = id;
        this.performerName = name;
        this.type = type;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PositionPerformerEntity extends PerformerEntity {
    constructor() {
        super();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PositionsNamePipe {
    constructor() { }
    /**
     * @param {?} positions
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(positions, defaultVal = '') {
        /** @type {?} */
        let r = '';
        console.log(positions);
        positions.forEach((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            r += u.performerName + '，';
        }));
        if (r) {
            r = r.substring(0, r.length - 1);
        }
        console.log(r);
        return r ? r : defaultVal;
    }
}
PositionsNamePipe.decorators = [
    { type: Pipe, args: [{ name: 'positionsName' },] }
];
/** @nocollapse */
PositionsNamePipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PositionPerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} ngZone
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?} positionsNamePipe
     */
    constructor(designerUIState, expr, ngZone, resolver, injector, modalService, cdr, localeId, resources, localePipe, positionsNamePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.positionsNamePipe = positionsNamePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.showClearButton = false;
        this.isRequired = false;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.positionTypes = [
            { value: '0', text: this.localePipe.transform('component.positionPerformer.orgPosition') },
            { value: '1', text: this.localePipe.transform('component.positionPerformer.generalPosition') }
        ];
        this.performerName = '';
        this.style = { background: '#FFF' };
        this.newFilter = {};
        this.treeFilter = {};
        this.curPosIdList = [];
        this.editState = true;
        this.showCondition = true;
        this.positions = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.position = this.position || new PositionPerformerEntity();
        this.performerName = this.performerName || (this.positions && this.positions.length ? this.positionsNamePipe.transform(this.positions) : this.position.performerName || '');
        if (this.designerUIState.scene === 'inSuite') {
            this.position.positionType = '1';
            this.newFilter = { positionType: '1' };
            this.style = { background: '#FFF', height: '150px' };
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.designerUIState.getOrgConfig().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re && re.currentValue === 'true') {
                this.isRequired = true;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.submitEmitter.emit(this.position);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @return {?}
     */
    clear() {
        this.position.performerId = null;
        this.position.performerName = null;
        this.performerName = '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    positionTypeChange(data) {
        if (data.value === '0') {
            this.newFilter = { positionType: '0' };
            this.positionType = '0';
        }
        else {
            this.newFilter = { positionType: '1' };
            this.positionType = '1';
        }
        this.clear();
        this.position.orgType = null;
        this.position.orgId = null;
    }
    /**
     * @return {?}
     */
    selectOrganition() {
        // this.expr.clearContext();
        if (this.position.positionType === '1') {
            if (this.designerUIState.schemas.length > 0) {
                for (const schema of this.designerUIState.schemas) {
                    this.expr.addSchema('Schema', schema);
                }
                if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                    /** @type {?} */
                    const entityType = this.designerUIState.schemas[0].entityTypes[0];
                    this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
                }
            }
            /** @type {?} */
            const context = new Array();
            if (this.designerUIState.subActivityContext.length > 0) {
                for (const variable of this.designerUIState.subActivityContext) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (context.length > 0) {
                for (const v of context) {
                    this.expr.addContext(v);
                }
            }
            this.expr.setEditPattern(ExprEditMode.Advanced);
            this.expr.addExpressionText(this.position.orgId);
            this.expr.buildExpression().then((/**
             * @param {?} expr
             * @return {?}
             */
            (expr) => {
                this.position.orgId = expr;
                //点击确定后，去除表达式里面的新增的上下文变量
                if (context.length > 0) {
                    this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => !context.some((/**
                     * @param {?} y
                     * @return {?}
                     */
                    y => y.key === x.key))));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    selectPosition() {
        this.setPosition();
    }
    /**
     * @return {?}
     */
    editCondition() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.position.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.position.condition = expressioninfo;
            for (const p of this.positions) {
                p.condition = expressioninfo;
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} re
     * @return {?}
     */
    orgTypeChange(re) {
        this.position.orgType = re.data.value;
    }
    /**
     * @return {?}
     */
    clearOrgType() {
        this.position.orgType = null;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    positionsSelected(data) {
        this.positions = [];
        if (data || data.data.length > 0) {
            /** @type {?} */
            const positions = [];
            for (const dataSelected of data.data) {
                if (this.editState) {
                    this.position = new PositionPerformerEntity();
                    this.position.performerId = dataSelected.id;
                    this.position.performerName = dataSelected.name;
                    this.position.type = 'wf.PositionParticipantExpression';
                    if (!this.position.positionType) {
                        this.position.positionType = dataSelected.posType + '';
                        this.newFilter = {
                            positionType: dataSelected.posType
                        };
                    }
                    this.position.isRequired = this.isRequired;
                    this.position.condition = this.condition ? this.condition : "";
                    positions.push(this.position);
                }
                else {
                    this.position.performerId = dataSelected.id;
                    this.position.performerName = dataSelected.name;
                    this.position.type = 'wf.PositionParticipantExpression';
                    if (!this.position.positionType) {
                        this.position.positionType = dataSelected.posType + '';
                        this.newFilter = {
                            positionType: dataSelected.posType
                        };
                    }
                    this.position.isRequired = this.isRequired;
                    this.position.condition = this.condition ? this.condition : "";
                    positions.push(this.position);
                }
            }
            this.positions = [...positions];
            this.performerName = this.positions && this.positions.length ? (this.positionsNamePipe.transform(this.positions)) : (this.position.performerName ? this.position.performerName : '');
        }
    }
    /**
     * @return {?}
     */
    setPosition() {
        this.positions = [];
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SysLookupDetailComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.initGridIdList = this.curPosIdList;
        compRef.instance.treeFilter = this.treeFilter;
        compRef.instance.listFilter = this.newFilter;
        compRef.instance.sourceType = 'position';
        compRef.instance.multiSelect = false;
        // 编辑状态下只能单选
        if (this.positionType === "0" && this.editState) {
            compRef.instance.multiSelect = true;
        }
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.positionPerformer.sysPositions'),
            width: 1000,
            height: 550,
            showButtons: true,
            buttons: compRef.instance.btnTemplateRef,
            showMaxButton: true,
            resizable: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 取消后
        compRef.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            dialog.close();
        }));
        // 确认后
        compRef.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.positionsSelected(res);
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        if (!this.editState) {
            this.positions.push(this.position);
        }
        return this.positions;
    }
}
PositionPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-position-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\">\r\n    <div class=\"d-flex m-2 flex-column w-100\" style=\"margin-top: 20px!important;\">\r\n      <div class=\"d-flex flex-column\" [ngStyle]=\"style\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div *ngIf=\"designerUIState.scene!=='inSuite'\" class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.positionType'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"position.positionType\" name=\"positionType\" [panelHeight]=\"'auto'\" [idField]=\"'value'\"\r\n                    [textField]=\"'text'\" [data]=\"positionTypes\" (valueChange)=\"positionTypeChange($event)\"\r\n                    [panelHeight]=\"'auto'\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{designerUIState.scene==='inSuite'?('component.positionPerformer.role'|wfLocale):('component.positionPerformer.position'|wfLocale)}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"performerName\" name=\"positionName\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectPosition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"designerUIState.scene!=='inSuite' && position.positionType === '1'\" class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <ng-container *ngIf=\"isRequired&&position.positionType==='1'\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                  </ng-container>\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.sysType'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"position.orgType\" name=\"orgType\" [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                    [data]=\"designerUIState.orgTypeCollection\" [panelHeight]=\"'auto'\" (clear)=\"clearOrgType()\"\r\n                    (selectChange)='orgTypeChange($event)' [readonly]=\"!(position.positionType==='1')\" placeholder=\"{{position.positionType==='1'?('component.positionPerformer.placeholder'|wfLocale):''}}\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"designerUIState.scene!=='inSuite' && position.positionType === '1'\" class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <ng-container *ngIf=\"isRequired&&position.positionType==='1'\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                  </ng-container>\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.orgId'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                    [showButtonWhenDisabled]=\"false\" [readonly]=\"!(position.positionType==='1')\"\r\n                    [(ngModel)]=\"position.orgId\" name=\"organization\" placeholder=\"{{position.positionType==='1'?('component.positionPerformer.placeholder'|wfLocale):''}}\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectOrganition()\" [groupText]=\"groupIcon\"></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"showCondition\" class=\"d-flex flex-column\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"this.position.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.positionPerformer.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.positionPerformer.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
PositionPerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: NgZone },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: PositionsNamePipe }
];
PositionPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    posiHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    buttonRef: [{ type: ViewChild, args: ['buttonRef',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageNoticeEditComponent {
    /**
     * @param {?} message
     * @param {?} uistate
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} designerUIState
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, uistate, expr, resolver, injector, modalService, designerUIState, http, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.designerUIState = designerUIState;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.exprAble = false;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this._location = 'activity';
        this.messageNotice = new MessageNotice$1();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        m => ({ value: m.code, name: m.name })));
        this.receiverVariables = [
            { value: 'workItemParticipant', name: this.localePipe.transform('component.messageNoticeEdit.workItemParticipant') }
        ];
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.messageNoticeEdit.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.messageNoticeEdit.administrative_organization'), value: 'Administrative_organization' }
        ];
        this.sendTimes = [];
        this.bindingData = {};
        this.receiverTypes = [
            { value: 'processParticipant', text: this.localePipe.transform('component.MessageNotice.processParticipant') },
            { value: 'variableParticipant', text: this.localePipe.transform('component.MessageNotice.variableParticipant') },
            { value: 'userParticipant', text: this.localePipe.transform('component.MessageNotice.userParticipant') },
            { value: 'positionParticipant', text: this.localePipe.transform('component.MessageNotice.positionParticipant') },
        ];
        this.processParticipantTypes = [
            { value: 'procInstCreator', text: this.localePipe.transform('component.MessageNotice.procInstCreator') },
            { value: 'workItemParticipant', text: this.localePipe.transform('component.MessageNotice.workItemParticipant') },
            { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.MessageNotice.activityExecutorParticipant') },
        ];
        this.userTypeButtonNeedShow = false; // 用户类型单选按钮是否需要显示
        this.hasSmsTemplate = false;
        this.disableAdd = (/**
         * @return {?}
         */
        () => {
            if (this.messageNotice.sendTime === 'WORKITEM_CREATED' && this.messageNotice.receivers.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.type)).length > 0) {
                return true;
            }
            else {
                return false;
            }
        });
        // 由于需要实现国际化，此处定义不能提取；
        this.processSendTime = [
            { value: 'PROCESSINSTANCE_COMPLETED', text: this.localePipe.transform('component.MessageNotice.procComplete') },
            { value: 'PROCESSINSTANCE_ABORTED', text: this.localePipe.transform('component.MessageNotice.procAborted') },
            { value: 'PROCESSINSTANCE_ROLLBACK', text: this.localePipe.transform('component.MessageNotice.procRollBack') }
        ];
        this.ReceiverType = [
            { value: 'processParticipant', text: this.localePipe.transform('component.MessageNotice.processParticipant') },
            { value: 'variableParticipant', text: this.localePipe.transform('component.MessageNotice.variableParticipant') },
            { value: 'userParticipant', text: this.localePipe.transform('component.MessageNotice.userParticipant') },
            { value: 'positionParticipant', text: this.localePipe.transform('component.MessageNotice.positionParticipant') },
        ];
        this.activitySendTime = [
            { value: 'WORKITEM_CREATED', text: this.localePipe.transform('component.MessageNotice.workCreated') },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform('component.MessageNotice.actComplete') },
            { value: 'ACTIVITY_ABORTED', text: this.localePipe.transform('component.MessageNotice.actAborted') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} l
     * @return {?}
     */
    set location(l) {
        this._location = l;
        if (this.location !== 'activity') {
            this.processParticipantTypes = [
                { value: 'procInstCreator', text: this.localePipe.transform('component.messageNoticeEdit.procInstCreator') },
                { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.messageNoticeEdit.activityExecutorParticipant') }
            ];
        }
    }
    /**
     * @return {?}
     */
    get location() {
        return this._location;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set value(m) {
        // 深拷贝处理messageNotice 2022-12-1
        /** @type {?} */
        const jsonMessageNotice = JSON.stringify(Object.assign({}, m));
        this.messageNotice = JSON.parse(jsonMessageNotice);
        this.exprAble = this.messageNotice.subject.charAt(0) === '{';
        if (this.hasSmsMessage(this.messageNotice.sendType)) {
            this.hasSmsTemplate = true;
            if (!this.messageNotice.smsMessageTemplate) {
                this.messageNotice.smsMessageTemplate = new SmsMessageTemplate$1();
            }
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this.messageNotice;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.location === 'activity') {
            this.sendTimes = this.activitySendTime;
            if (this.messageNotice.sendTime === this.activitySendTime[0].value) {
                this.receiverTypes = [
                    { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') }
                ];
                this.processParticipantTypes = [
                    { value: 'workItemParticipant', text: this.localePipe.transform('component.messageNoticeEdit.workItemReceiveParticipant') }
                ];
            }
            else {
                this.receiverTypes = [
                    { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') },
                    { value: 'variableParticipant', text: this.localePipe.transform('component.messageNoticeEdit.variableParticipant') },
                    { value: 'userParticipant', text: this.localePipe.transform('component.messageNoticeEdit.userParticipant') },
                    { value: 'positionParticipant', text: this.localePipe.transform('component.messageNoticeEdit.positionParticipant') },
                ];
                this.processParticipantTypes = [
                    { value: 'procInstCreator', text: this.localePipe.transform('component.messageNoticeEdit.procInstCreator') },
                    { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.messageNoticeEdit.activityExecutorParticipant') }
                ];
            }
        }
        else {
            this.sendTimes = this.processSendTime;
        }
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.hasAdminOrg = data;
            // inSuite场景，变量参与者场景下显示用户类型
            if (this.designerUIState.scene === 'inSuite') {
                this.userTypeButtonNeedShow = true;
            }
            else {
                this.userTypeButtonNeedShow = data;
            }
            if (!this.userTypeButtonNeedShow) {
                this.variableOrgTypes = [{ name: this.localePipe.transform('component.messageNoticeEdit.sys'), value: 'Sys' }];
            }
        }));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.SmsTemplate) {
            this.SmsTemplate.endGridEdit();
        }
        this.setReceiver();
        if (this.hasSmsTemplate) {
            this.messageNotice.smsMessageTemplate = this.SmsTemplate.smsMessageTemplate;
            if (this.messageNotice.smsMessageTemplate.smsMessageVariables && this.messageNotice.smsMessageTemplate.smsMessageVariables.length > 0) {
                this.messageNotice.smsMessageTemplate.smsMessageVariables = this.messageNotice.smsMessageTemplate.smsMessageVariables.filter((/**
                 * @param {?} variable
                 * @return {?}
                 */
                variable => variable.code));
            }
        }
        else {
            this.messageNotice.smsMessageTemplate = null;
        }
        if (this.validator()) {
            this.submitEmitter.emit(this.messageNotice);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    sendTimeChange(data) {
        if (data.data.value === this.activitySendTime[0].value) {
            /** @type {?} */
            const messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'workItemParticipant';
            this.messageNotice.receivers = [messageReceiver];
            this.receiverTypes = [
                { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') }
            ];
            this.processParticipantTypes = [
                { value: 'workItemParticipant', text: this.localePipe.transform('component.messageNoticeEdit.workItemParticipant') }
            ];
        }
        else {
            for (const r of this.messageNotice.receivers) {
                if (r.type === 'processParticipant' && r.processParticipant === 'workItemParticipant') {
                    r.processParticipant = 'procInstCreator';
                }
            }
            this.receiverTypes = [
                { value: 'processParticipant', text: this.localePipe.transform('component.messageNoticeEdit.processParticipant') },
                { value: 'variableParticipant', text: this.localePipe.transform('component.messageNoticeEdit.variableParticipant') },
                { value: 'userParticipant', text: this.localePipe.transform('component.messageNoticeEdit.userParticipant') },
                { value: 'positionParticipant', text: this.localePipe.transform('component.messageNoticeEdit.positionParticipant') },
            ];
            this.processParticipantTypes = [
                { value: 'procInstCreator', text: this.localePipe.transform('component.messageNoticeEdit.procInstCreator') },
                { value: 'activityExecutorParticipant', text: this.localePipe.transform('component.messageNoticeEdit.activityExecutorParticipant') }
            ];
        }
    }
    /**
     * @param {?} sendType
     * @return {?}
     */
    sendTypeChange(sendType) {
        if (this.hasSmsMessage(sendType)) {
            this.hasSmsTemplate = true;
            if (!this.messageNotice.smsMessageTemplate) {
                this.messageNotice.smsMessageTemplate = new SmsMessageTemplate$1();
            }
        }
        else {
            this.hasSmsTemplate = false;
            this.messageNotice.smsMessageTemplate = null;
        }
    }
    /**
     * @private
     * @param {?} sendType
     * @return {?}
     */
    hasSmsMessage(sendType) {
        if (sendType) {
            /** @type {?} */
            const sendTypeList = sendType.split(',');
            /** @type {?} */
            let messageChannel = sendTypeList.find((/**
             * @param {?} val
             * @return {?}
             */
            val => this.uistate.messageChannels.find((/**
             * @param {?} channel
             * @return {?}
             */
            channel => channel.code == val && channel.channelType == 'Sms'))));
            if (messageChannel) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    usersSelect(data) {
        this.messageNotice.receivers[this.index].userIds = '';
        this.messageNotice.receivers[this.index].userNames = '';
        if (data && data.length > 0) {
            /** @type {?} */
            let userIds = '';
            for (const d of data) {
                userIds += d.id + ',';
            }
            if (userIds) {
                this.messageNotice.receivers[this.index].userIds = userIds.substring(0, userIds.length - 1);
            }
            /** @type {?} */
            let userNames = '';
            for (const d of data) {
                userNames += d.name + ',';
            }
            if (userNames) {
                this.messageNotice.receivers[this.index].userNames = userNames.substring(0, userNames.length - 1);
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    clearUsers(index) {
        this.messageNotice.receivers[index].userIds = '';
        this.messageNotice.receivers[index].userNames = '';
    }
    /**
     * @param {?} index
     * @return {?}
     */
    clearPosition(index) {
        this.messageNotice.receivers[index].positionId = '';
        this.messageNotice.receivers[index].positionName = '';
        this.messageNotice.receivers[index].positionType = '';
        this.messageNotice.receivers[index].orgId = '';
        this.messageNotice.receivers[index].orgType = '';
    }
    /**
     * @param {?} index
     * @return {?}
     */
    clearActivityExecutor(index) {
        this.messageNotice.receivers[index].activityDefId = '';
        this.messageNotice.receivers[index].activityDefName = '';
    }
    /**
     * @param {?} index
     * @return {?}
     */
    clearVariableParticipant(index) {
        this.messageNotice.receivers[index].variableParticipant = '';
        this.messageNotice.receivers[index].variableName = '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    changeValue(data) {
    }
    /**
     * @return {?}
     */
    clear() {
        this.bindingData = {};
    }
    /**
     * @private
     * @return {?}
     */
    setReceiver() {
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.messageNotice.sendType) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.sendType'));
            return false;
        }
        //去除消息模板编号校验
        // if (this.hasSmsTemplate) {
        //   if (!this.messageNotice.smsMessageTemplate) {
        //     this.message.info(this.localePipe.transform('component.messageNoticeEdit.smsMessageTemplate'));
        //     return;
        //   }
        //   if (!this.messageNotice.smsMessageTemplate.code) {
        //     this.message.info(this.localePipe.transform('component.messageNoticeEdit.smsMessageTemplateCode'));
        //     return;
        //   }
        // }
        if (this.location !== 'messageActivity' && !this.messageNotice.sendTime) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.sendTime'));
            return false;
        }
        if (!this.messageNotice.subject) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.subject'));
            return false;
        }
        if (!this.messageNotice.content) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.content'));
            return false;
        }
        this.messageNotice.receivers = this.messageNotice.receivers.filter((/**
         * @param {?} r
         * @return {?}
         */
        r => r.type));
        if (!this.messageNotice.receivers || this.messageNotice.receivers.length === 0) {
            this.message.info(this.localePipe.transform('component.messageNoticeEdit.receivers'));
            return false;
        }
        else {
            for (const r of this.messageNotice.receivers) {
                switch (r.type) {
                    case 'processParticipant':
                        if (!r.processParticipant) {
                            this.message.info(this.localePipe.transform('component.messageNoticeEdit.processParticipantNotNull'));
                            return false;
                        }
                        else if (r.processParticipant === 'activityExecutorParticipant' && !r.activityDefId) {
                            this.message.info(this.localePipe.transform('component.messageNoticeEdit.activityDefIdNotNull'));
                            return false;
                        }
                        break;
                    case 'variableParticipant':
                        if (!r.variableParticipant) {
                            this.message.info(this.localePipe.transform('component.messageNoticeEdit.variableParticipantNotNull'));
                            return false;
                        }
                        if (!r.orgType) {
                            this.message.info(this.localePipe.transform('component.messageNoticeEdit.orgType'));
                            return false;
                        }
                        break;
                    case 'userParticipant':
                        if (!r.userIds) {
                            this.message.info(this.localePipe.transform('component.messageNoticeEdit.userIds'));
                            return false;
                        }
                        break;
                    case 'positionParticipant':
                        if (!r.positionId) {
                            this.message.info(this.localePipe.transform('component.messageNoticeEdit.positionId'));
                            return false;
                        }
                        break;
                }
            }
        }
        return true;
    }
    /**
     * @return {?}
     */
    addReceiver() {
        if (this.disableAdd()) {
            return;
        }
        /** @type {?} */
        const receivers = this.messageNotice.receivers.filter((/**
         * @param {?} r
         * @return {?}
         */
        r => r.type));
        if (receivers && receivers.length > 0) {
            /** @type {?} */
            const userParticipant = new MessageReceiver();
            userParticipant.type = 'userParticipant';
            this.messageNotice.receivers = this.messageNotice.receivers.concat([userParticipant]);
        }
        else {
            if (this.location !== 'activity') {
                /** @type {?} */
                const procInstCreator = new MessageReceiver();
                procInstCreator.type = 'processParticipant';
                procInstCreator.processParticipant = 'procInstCreator';
                this.messageNotice.receivers = this.messageNotice.receivers.concat([procInstCreator]);
            }
            else {
                /** @type {?} */
                const workItemParticipant = new MessageReceiver();
                workItemParticipant.type = 'processParticipant';
                workItemParticipant.processParticipant = 'workItemParticipant';
                this.messageNotice.receivers = this.messageNotice.receivers.concat([workItemParticipant]);
            }
        }
    }
    /**
     * @param {?} activityDefId
     * @param {?} index
     * @return {?}
     */
    selectActivityExecutorParticipant(activityDefId, index) {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ActivityListComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            /** @type {?} */
            const acticity = re.shift();
            this.messageNotice.receivers[index].activityDefId = acticity.id;
            this.messageNotice.receivers[index].activityDefName = acticity.data.Name;
            if (re && re.length > 0) {
                for (const a of re) {
                    /** @type {?} */
                    const receiver = new MessageReceiver();
                    receiver.type = 'processParticipant';
                    receiver.processParticipant = 'activityExecutorParticipant';
                    receiver.activityDefId = a.id;
                    receiver.activityDefName = a.data.Name;
                    this.messageNotice.receivers = this.messageNotice.receivers.concat([receiver]);
                }
            }
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.messageNoticeEdit.activityList'),
            width: 490,
            height: 490,
            showButtons: true,
            buttons: compRef.instance.buttonRef
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @param {?} variableParticipant
     * @param {?} index
     * @return {?}
     */
    selectVariableParticipant(variableParticipant, index) {
        /** @type {?} */
        const context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (variableParticipant) {
            this.expr.addExpressionText(variableParticipant);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.messageNotice.receivers[index].variableParticipant = expressioninfo;
            this.messageNotice.receivers[index].variableName = this.variableParticipantName(expressioninfo);
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} receiver
     * @param {?} index
     * @return {?}
     */
    selectUserParticipant(receiver, index) {
        this.index = index;
        this.bindingData = {};
        if (receiver.userIds && receiver.userIds.length > 0) {
            this.bindingData.id = receiver.userIds;
            this.bindingData.name = receiver.userNames;
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.userHelp.showHelp();
        }), 0);
    }
    /**
     * @param {?} receiver
     * @param {?} index
     * @return {?}
     */
    selectPositionParticipant(receiver, index) {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(PositionPerformerComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.showCondition = false;
        compRef.instance.position.performerId = this.messageNotice.receivers[index].positionId;
        compRef.instance.position.performerName = this.messageNotice.receivers[index].positionName;
        compRef.instance.position.positionType = this.messageNotice.receivers[index].positionType;
        compRef.instance.position.orgId = this.messageNotice.receivers[index].orgId;
        compRef.instance.position.orgType = this.messageNotice.receivers[index].orgType;
        if (compRef.instance.position.positionType === '0') {
            compRef.instance.newFilter = { positionType: '0' };
        }
        else {
            compRef.instance.newFilter = { positionType: '1' };
        }
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (re.performerId) {
                this.messageNotice.receivers[index].positionId = re.performerId;
                this.messageNotice.receivers[index].positionName = re.performerName;
                this.messageNotice.receivers[index].positionType = re.positionType;
                this.messageNotice.receivers[index].orgId = re.orgId;
                this.messageNotice.receivers[index].orgType = re.orgType;
            }
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.messageNoticeEdit.position'),
            width: 700,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.buttonRef
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    titleExpr(data) {
        this.showTitleHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    contentExpr(data) {
        this.showContentHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showContentHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.messageNotice.content && this.messageNotice.content.length > 0) {
            this.expr.addExpressionText(this.messageNotice.content);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.messageNotice.content = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showTitleHelp(data) {
        if (this.messageNotice.subject && this.messageNotice.subject.charAt(0) !== '{') {
            this.messageNotice.subject = '';
        }
        /** @type {?} */
        const context = this.showExpr();
        if (this.messageNotice.subject && this.messageNotice.subject.length > 0) {
            this.expr.addExpressionText(this.messageNotice.subject);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.messageNotice.subject = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    showExpr() {
        /** @type {?} */
        const context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        return context;
    }
    /**
     * @return {?}
     */
    tranExpr() {
        this.messageNotice.subject = '';
    }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return JSON.parse(expr).expr;
    }
}
MessageNoticeEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-message-notice-edit',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"f-form-layout farris-form  farris-form-controls-inline f-form-label-sm\">\r\n              <div *ngIf=\"location!=='messageActivity'\" class=\"col-12 col-md-6 mt-3\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.MessageNotice.sendTime'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-combo-list [(ngModel)]=\"messageNotice.sendTime\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                        [enableClear]=\"false\" [data]=\"sendTimes\" name=\"sendTime\" [editable]=\"false\"\r\n                        (selectChange)=\"sendTimeChange($event)\">\r\n                      </farris-combo-list>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.messSendType'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"messageNotice.sendType\" name=\"sendType\"\r\n                        [horizontal]=\"true\" [data]=\"typeGroup\" (changeValue)=\"sendTypeChange($event)\">\r\n                      </farris-checkboxgroup>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-8 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.messSubject'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\" *ngIf=\"!exprAble; else disabled\">\r\n                      <input class=\"form-control\" type=\"text\" value=\"subject\" [(ngModel)]=\"messageNotice.subject\"\r\n                        name=\"subject\" />\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                    <ng-template #disabled>\r\n                      <div class=\"farris-input-wrap ml-1\">\r\n                        <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                          [(value)]=\"messageNotice.subject\" (clickHandle)=\"titleExpr($event)\">\r\n                        </input-group>\r\n                      </div>\r\n                    </ng-template>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-4 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.enable'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <farris-switch [(ngModel)]=\"exprAble\" name=\"enable\" (click)=\"tranExpr()\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.messContent'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                        [(value)]=\"messageNotice.content\" (clickHandle)=\"contentExpr($event)\">\r\n                      </input-group>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 farris-group-auto mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.messageNoticeEdit.recipient'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <div class=\"text-right mb-2\">\r\n                        <farris-button [type]=\"'link'\" (click)=\"addReceiver()\" [disabled]=\"disableAdd()\">\r\n                          <span class=\"f-icon f-icon-add\"></span>\r\n                          {{'component.messageNoticeEdit.addReceiver'|wfLocale}}</farris-button>\r\n                      </div>\r\n                      <div *ngFor=\"let receiver of messageNotice.receivers; let i=index\" class=\"col-12 d-flex px-0\">\r\n                        <div class=\"farris-group-wrap col-4 pl-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list [(ngModel)]=\"receiver.type\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                [enableClear]=\"true\" [data]=\"receiverTypes\" [name]=\"'receiverType'+i\"\r\n                                [editable]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='processParticipant'\" class=\"farris-group-wrap col-4 pl-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list [(ngModel)]=\"receiver.processParticipant\" [idField]=\"'value'\"\r\n                                [textField]=\"'text'\" [enableClear]=\"false\" [data]=\"processParticipantTypes\"\r\n                                [name]=\"'processParticipantType'+i\" [editable]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          *ngIf=\"receiver.type==='processParticipant' && receiver.processParticipant==='activityExecutorParticipant'\"\r\n                          class=\"farris-group-wrap col-4 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [enableClear]=\"true\" (clear)=\"clearActivityExecutor(i)\"\r\n                                [(value)]=\"receiver.activityDefName\"\r\n                                (clickHandle)=\"selectActivityExecutorParticipant(receiver.activityDefId, i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='variableParticipant'\" class=\"farris-group-wrap col-5 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [enableClear]=\"true\" (clear)=\"clearVariableParticipant(i)\"\r\n                                [(value)]=\"receiver.variableName\"\r\n                                (clickHandle)=\"selectVariableParticipant(receiver.variableParticipant, i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='variableParticipant'\" class=\"farris-group-wrap col-3 px-0 pl-3\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <farris-combo-list [(ngModel)]=\"receiver.orgType\" [idField]=\"'value'\" [textField]=\"'name'\"\r\n                                [enableClear]=\"false\" [data]=\"variableOrgTypes\" [name]=\"'variableParticipantOrgType'+i\"\r\n                                [editable]=\"false\">\r\n                              </farris-combo-list>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='userParticipant'\" class=\"farris-group-wrap col-8 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [(value)]=\"receiver.userNames\" (clickHandle)=\"selectUserParticipant(receiver, i)\"\r\n                                (clear)=\"clearUsers(i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div *ngIf=\"receiver.type==='positionParticipant'\" class=\"farris-group-wrap col-8 px-0\">\r\n                          <div class=\"form-group farris-form-group\">\r\n                            <div class=\"farris-input-wrap\">\r\n                              <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                [enableClear]=\"true\" (clear)=\"clearPosition(i)\"\r\n                                [value]=\"receiver.positionId?('component.messageNoticeEdit.posi'|wfLocale)+receiver.positionName+'\uFF1B'+(receiver.orgId?(('component.messageNoticeEdit.organization'|wfLocale))+receiver.orgId:''):''\"\r\n                                (clickHandle)=\"selectPositionParticipant(receiver, i)\">\r\n                              </input-group>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <lib-sms-message-template *ngIf=\"hasSmsTemplate\" [smsMessageTemplate]=\"this.messageNotice.smsMessageTemplate\"></lib-sms-message-template>\r\n          </form>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.messageNoticeEdit.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.messageNoticeEdit.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<sys-farris-grid-lookup #userHelp style=\"display: none;\" [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\"\r\n  [pagination]=\"true\" [pageSize]=\"20\" title=\"{{'component.messageNoticeEdit.sys'|wfLocale}}\" [sourceType]=\"'user'\" (afterConfirm)=\"usersSelect($event)\"\r\n  [bindingData]=\"bindingData\" [filter]=\"{notGetCurrentUser:false, notGetStopUser: true}\" [typeMode]=\"1\"\r\n  [required]=\"false\">\r\n</sys-farris-grid-lookup>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".help-tip{text-align:center;background-color:#bcdbea;border-radius:50%;width:20px;height:20px;font-size:6px;cursor:default}"]
            }] }
];
/** @nocollapse */
MessageNoticeEditComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ProcessDesignerUIState },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
MessageNoticeEditComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    SmsTemplate: [{ type: ViewChild, args: [SmsMessageTemplateComponent,] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    userHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    location: [{ type: Input }],
    value: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageNoticeBatchSet {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageNoticeCopyComponent {
    /**
     * @param {?} uistate
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uistate, message, cdr, localeId, resources, localePipe) {
        this.uistate = uistate;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.cols = [
            { title: this.localePipe.transform('component.MessageNotice.name'), field: 'Name', width: 60, searchField: 'Name' },
            { title: 'ID', field: 'Id', width: 90, searchField: 'Id' }
        ];
        // ==========================================================
        this.actis = [];
        this.fullActis = [];
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.messageNotice = [];
        this.messageNoticeValue = [];
        this.targetNodeID = [];
        this.activitySendTime = [
            { value: 'WORKITEM_CREATED', text: this.localePipe.transform('component.MessageNotice.workCreated') },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform('component.MessageNotice.actComplete') },
            { value: 'ACTIVITY_ABORTED', text: this.localePipe.transform('component.MessageNotice.actAborted') },
        ];
        this.columns = [
            {
                field: 'subject', width: 100, title: this.localePipe.transform('component.MessageNotice.subject'),
            }, {
                field: 'content', width: 150, title: this.localePipe.transform('component.MessageNotice.content'), showTips: true,
            }, {
                field: 'sendTime', width: 100, title: this.localePipe.transform('component.MessageNotice.sendTime'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.activitySendTime }
                },
            }, {
                field: 'sendType', width: 100, title: this.localePipe.transform('component.MessageNotice.sendType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'name', data: this.uistate.messageChannels.map((/**
                         * @param {?} m
                         * @return {?}
                         */
                        m => ({ value: m.code, name: m.name }))) }
                },
            }, {
                field: 'receiverText', width: 120, title: this.localePipe.transform('component.MessageNotice.receiverText'), showTips: true
            }
        ];
        this.actisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            for (const r of rowData) {
                this.targetNodeID.push(r.Id);
            }
            return of$1({
                closeDialog: true
            });
        });
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            console.log(rowData);
            console.log(rowIndex);
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} e
     * @return {?}
     */
    endEdit(e) {
        console.log(e);
    }
    /**
     * @return {?}
     */
    get messageNotices() {
        return this.messageNotice;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set messageNotices(m) {
        this.messageNotice = m;
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (!this.targetNodeID && this.targetNodeID.length === 0) {
            this.message.info(this.localePipe.transform('component.MessageNotice.noTargetNode'));
            return;
        }
        if (!this.messageNotice && this.messageNotice.length === 0) {
            this.message.info(this.localePipe.transform('component.MessageNotice.noMessageNotifyAttribute'));
            return;
        }
        /** @type {?} */
        const batchSetValue = new MessageNoticeBatchSet();
        batchSetValue.messageNotice = this.messageNotice;
        batchSetValue.targetNodeID = this.targetNodeID;
        batchSetValue.isBatchCopy = true;
        /** @type {?} */
        const object = { value: batchSetValue, parameters: null };
        this.submitEmitter.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
}
MessageNoticeCopyComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-message-notice-copy',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"f-utils-fill-flex-column h-100\">\r\n            <!-- \u53EF\u9009\u8282\u70B9\u76EE\u6807\u5C0F\u6807\u9898 -->\r\n            <div class=\"mx-2 mt-1\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">{{'component.messageNoticeEdit.optionalNodes'|wfLocale}}</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-2 mx-4 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <!-- \u9644\u52A0\u8282\u70B9\u5E2E\u52A9 -->\r\n                <farris-lookup-grid #userActisDialog [items]=\"uistate.userActList\" [columns]=\"cols\" [resizable]=\"true\"\r\n                  [singleSelect]=\"false\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"actis\" [valueField]=\"'Id'\"\r\n                  [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\" name=\"defaultActivities\"\r\n                  [pageSize]=\"pageInfo.pageSize\" [pageList]=\"pageInfo.pageList\" [total]=\"total\" [enableClear]=\"false\"\r\n                  title=\"{{'component.messageNoticeEdit.targetNodeList'|wfLocale}}\" [displayType]=\"'List'\" [remoteSearch]='false' [enableToSelect]=\"false\"\r\n                  placeholder=\"{{'component.messageNoticeEdit.placeholder'|wfLocale}}\" [dictPicked]=\"actisSelect\" [nosearch]=\"true\" [showFilterBar]=\"false\">\r\n                </farris-lookup-grid>\r\n              </div>\r\n            </div>\r\n            <!-- \u53EF\u9009\u5C5E\u6027\u76EE\u6807\u5C0F\u6807\u9898 -->\r\n            <div class=\"mx-2 mt-1\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">{{'component.messageNoticeEdit.optionalAttribute'|wfLocale}}</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <!-- \u6D88\u606F\u901A\u77E5\u5C5E\u6027 -->\r\n            <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n              <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n                <farris-datagrid #grid [data]=\"messageNotices\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n                  [fitColumns]=\"true\" [editable]=\"false\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n                  [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.messageNoticeEdit.lineNumber'|wfLocale}}\" [lineNumberWidth]=\"50\"\r\n                  [striped]=\"true\" [showAllCheckbox]=\"false\" [afterEdit]=\"paramAfterEdit\" (endEdit)=\"endEdit($event)\">\r\n                </farris-datagrid>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.messageNoticeEdit.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.messageNoticeEdit.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:760px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
            }] }
];
/** @nocollapse */
MessageNoticeCopyComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
MessageNoticeCopyComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    allActisTable: [{ type: ViewChild, args: ['allActisTable',] }],
    allActisDialog: [{ type: ViewChild, args: ['allActisDialog',] }],
    actTable: [{ type: ViewChild, args: ['actTable',] }],
    lookup: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageNoticeComponent {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} uistate
     * @param {?} viewModel
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(resolver, injector, modalService, message, uistate, viewModel, http, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.viewModel = viewModel;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.notify'),
            width: 760,
            height: 480,
            showButtons: true
        };
        this.messageNotices = new Array();
        this.columns = [];
        this.location = 'activity';
        this.processSendTime = [
            { value: 'PROCESSINSTANCE_COMPLETED', text: this.localePipe.transform('component.MessageNotice.procComplete') },
            { value: 'PROCESSINSTANCE_ABORTED', text: this.localePipe.transform('component.MessageNotice.procAborted') },
            { value: 'PROCESSINSTANCE_ROLLBACK', text: this.localePipe.transform('component.MessageNotice.procRollBack') }
        ];
        this.activitySendTime = [
            { value: 'WORKITEM_CREATED', text: this.localePipe.transform('component.MessageNotice.workCreated') },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform('component.MessageNotice.actComplete') },
            { value: 'ACTIVITY_ABORTED', text: this.localePipe.transform('component.MessageNotice.actAborted') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    /**
     * @param {?} notices
     * @return {?}
     */
    set value(notices) {
        if (notices && notices.length > 0) {
            this.messageNotices = notices.map((/**
             * @param {?} n
             * @return {?}
             */
            n => ({
                id: ProcessDeUtil.GenerateElementId(),
                content: n.content,
                sendTime: n.sendTime,
                sendType: n.sendType,
                subject: n.subject,
                receiver: n.receiver,
                receiverText: n.receiverText,
                receivers: n.receivers ? n.receivers : new Array(),
                smsMessageTemplate: n.smsMessageTemplate
            })));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.location = this.editorParams.location;
        this.columns = [
            {
                field: 'subject', width: 100, title: this.localePipe.transform('component.MessageNotice.subject'),
            }, {
                field: 'content', width: 150, title: this.localePipe.transform('component.MessageNotice.content'), showTips: true,
            }, {
                field: 'sendTime', width: 100, title: this.localePipe.transform('component.MessageNotice.sendTime'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.location === 'process' ? this.processSendTime : this.activitySendTime }
                },
            }, {
                field: 'sendType', width: 100, title: this.localePipe.transform('component.MessageNotice.sendType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'name', data: this.uistate.messageChannels.map((/**
                         * @param {?} m
                         * @return {?}
                         */
                        m => ({ value: m.code, name: m.name }))) }
                },
            }, {
                field: 'receiverText', width: 120, title: this.localePipe.transform('component.MessageNotice.receiverText'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    /** @type {?} */
                    let receiverText = '';
                    if (d.receivers && d.receivers.length > 0) {
                        for (const receiver of d.receivers) {
                            if (receiver.type === 'processParticipant') {
                                if (receiver.processParticipant === 'procInstCreator') {
                                    receiverText += this.localePipe.transform('component.MessageNotice.procInstCreator');
                                }
                                else if (receiver.processParticipant === 'workItemParticipant') {
                                    receiverText += this.localePipe.transform('component.MessageNotice.workItemParticipant');
                                }
                                else if (receiver.processParticipant === 'activityExecutorParticipant') {
                                    receiverText += (receiver.activityDefName + '，');
                                }
                            }
                            else if (receiver.type === 'userParticipant') {
                                receiverText += (receiver.userNames + '，');
                            }
                            else if (receiver.type === 'variableParticipant') {
                                receiverText += (receiver.variableName + '，');
                            }
                            else if (receiver.type === 'positionParticipant') {
                                receiverText += (receiver.positionName + '，');
                            }
                        }
                    }
                    if (receiverText) {
                        receiverText = receiverText.substring(0, receiverText.length - 1);
                    }
                    return receiverText;
                }),
            }
        ];
        if (this.location === 'messageActivity') {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field !== 'sendTime'));
        }
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        /** @type {?} */
        const messageNotice = new MessageNotice$1();
        if (this.location === 'activity') {
            messageNotice.sendTime = 'WORKITEM_CREATED';
            /** @type {?} */
            const messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'workItemParticipant';
            messageNotice.receivers = [messageReceiver];
        }
        else if (this.location === 'process') {
            messageNotice.sendTime = 'PROCESSINSTANCE_COMPLETED';
            /** @type {?} */
            const messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'procInstCreator';
            messageNotice.receivers = [messageReceiver];
        }
        else if (this.location === 'messageActivity') {
            /** @type {?} */
            const messageReceiver = new MessageReceiver();
            messageReceiver.type = 'processParticipant';
            messageReceiver.processParticipant = 'procInstCreator';
            messageNotice.receivers = [messageReceiver];
        }
        compRef.instance.value = messageNotice;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.messageNotices = this.messageNotices.concat([re]);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.messageSet'),
            width: 760,
            height: 480,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    edit() {
        if (!this.grid.selectedRow) {
            this.message.info(this.localePipe.transform('component.MessageNotice.selectedRow'));
            return;
        }
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        compRef.instance.value = this.grid.selectedRow.data;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.messageNotices = this.messageNotices.map((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                if (m.id === re.id) {
                    return re;
                }
                return m;
            }));
            this.grid.unSelectRow(this.grid.selectedRow.data.id, true);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.messageSet'),
            width: 760,
            height: 480,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    batchCopy() {
        if (!this.messageNotices) {
            this.message.info(this.localePipe.transform('component.MessageNotice.noCopy'));
            return;
        }
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(MessageNoticeCopyComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.messageNotices = this.messageNotices;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.viewModel.copy(ResourceKeys.batchCopyProperty, data);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.MessageNotice.batchCopy'),
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    delete() {
        /** @type {?} */
        const selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info(this.localePipe.transform('component.MessageNotice.selectedRow'));
            return;
        }
        this.messageNotices = this.messageNotices.filter((/**
         * @param {?} m
         * @return {?}
         */
        m => m.id !== selected.id));
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const object = { value: this.messageNotices, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    GetOrganizationType() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.uistate.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ value: d.id, text: d.name })))));
    }
}
MessageNoticeComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-message-notice',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">{{'component.MessageNotice.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"edit()\">{{'component.MessageNotice.edit' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" [disabled]=\"location!=='activity'\" (click)=\"batchCopy()\">{{'component.MessageNotice.batchCopy' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.MessageNotice.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <farris-datagrid #grid [data]=\"messageNotices\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"false\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.MessageNotice.lineNumber'|wfLocale}}\" [lineNumberWidth]=\"50\"\r\n        [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.MessageNotice.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.MessageNotice.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
MessageNoticeComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerViewModel },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
MessageNoticeComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
/** @enum {string} */
const ResourceKeys = {
    batchCopyProperty: 'batchCopyProperty',
};
class MessageNoticeConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.MessageNotice.set");
        }
        else {
            return this.localePipe.transform("component.MessageNotice.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendPropertyComponent {
    /**
     * @param {?} uiState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uiState, cdr, localeId, resources, localePipe) {
        this.uiState = uiState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform("component.extendProperty.extendProperty"),
            width: 430,
            height: 370,
            showButtons: true
        };
        this.procExtendProperty = new Array();
        this.booleanlist = [
            { key: this.localePipe.transform("component.extendProperty.true"), value: 'true' },
            { key: this.localePipe.transform("component.extendProperty.false"), value: 'false' }
        ];
        this.extendPropertyList = {
            key: '',
            value: ''
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} property
     * @return {?}
     */
    set value(property) {
        if (property && property.length > 0) {
            this.procExtendProperty = property.map((/**
             * @param {?} p
             * @return {?}
             */
            p => ({
                id: p.id,
                code: p.code,
                parentId: p.parentId,
                sortOrder: p.sortOrder,
                propertyNote: p.propertyNote,
                propertyTitle: p.propertyTitle,
                propertyLocation: p.propertyLocation,
                propertyType: p.propertyType,
                enumValue: p.enumValue,
                bizDefKey: p.bizDefKey,
                bizCategoryId: p.bizCategoryId,
                startMode: p.startMode,
                value: p.value,
            })));
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = obj.propertyConfig;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const value = this.procExtendProperty;
        /** @type {?} */
        const object = { value, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    cancel() {
        this.closeModal.emit();
    }
}
ExtendPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-extend-property',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main\">\r\n    <section class=\"\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n      </div>\r\n      <div class=\"f-section-content\">\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n          <fieldset class=\"f-section-formgroup\"\r\n            style=\"flex-grow: 1; overflow-y: auto; height: 210px;\">\r\n            <div class=\"f-section-formgroup-inputs\">\r\n              <ng-container *ngFor=\"let data of procExtendProperty\">\r\n                <!-- \u6587\u672C\u578B\u5C5E\u6027\u6846 -->\r\n                <div *ngIf=\"data.propertyType === 'text'\" class=\"col-12 farris-group-auto pr-5\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{data.propertyTitle}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap ml-1\" style=\"padding-right: 30px\">\r\n                        <input-group [(ngModel)]=\"data.value\"></input-group>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                      <span class=\"f-icon f-icon-info\" farrisPopover popoverTitle=\"{{'component.extendProperty.extendProperty'|wfLocale}}\"\r\n                        [popover]=\"data.propertyNote\" [container]=\"'body'\" [triggers]=\"'hover'\"\r\n                        [placement]=\"'left'\"></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!-- \u679A\u4E3E\u578B\u5C5E\u6027\u6846 -->\r\n                  <div *ngIf=\"data.propertyType === 'enum'\" class=\"col-12 farris-group-auto pr-5\">\r\n                    <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{data.propertyTitle}}</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap ml-1\" style=\"padding-right: 30px\">\r\n                          <farris-combo-list autoHeight=\"true\" [(ngModel)]=\"data.value\" name=\"booleanProperty\"\r\n                            [idField]=\"'value'\" [textField]=\"'key'\" [valueField]=\"'value'\" [data]=\"data.enumValue\"\r\n                            placeholder=\"{{'component.extendProperty.placeholder'|wfLocale}}\">\r\n                          </farris-combo-list>\r\n                          <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                        <span class=\"f-icon f-icon-info\" farrisPopover popoverTitle=\"{{'component.extendProperty.illustrate'|wfLocale}}\"\r\n                          [popover]=\"data.propertyNote\" [container]=\"'body'\" [triggers]=\"'hover'\"\r\n                          [placement]=\"'left'\"></span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                <!-- \u5E03\u5C14\u578B\u5C5E\u6027\u6846 mt-4 -->\r\n                  <div *ngIf=\"data.propertyType === 'boolean'\" class=\"col-12 farris-group-auto pr-5\">\r\n                    <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{data.propertyTitle}}</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap ml-1\" style=\"padding-right: 30px\">\r\n                          <farris-combo-list autoHeight=\"true\" [(ngModel)]=\"data.value\" name=\"booleanProperty\"\r\n                            [idField]=\"'value'\" [textField]=\"'key'\" [valueField]=\"'value'\" [data]=\"booleanlist\"\r\n                            placeholder=\"{{'component.extendProperty.placeholder'|wfLocale}}\">\r\n                          </farris-combo-list>\r\n                          <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                        <span class=\"f-icon f-icon-info\" farrisPopover popoverTitle=\"{{'component.extendProperty.illustrate'|wfLocale}}\"\r\n                          [popover]=\"data.propertyNote\" [container]=\"'body'\" [triggers]=\"'hover'\"\r\n                          [placement]=\"'left'\"></span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n              </ng-container>\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"cancel()\">{{'component.extendProperty.cancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.extendProperty.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ExtendPropertyComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ExtendPropertyComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    value: [{ type: Input }]
};
class ExtendPropertyConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data instanceof Array && data.some((/**
         * @param {?} item
         * @return {?}
         */
        item => item.value))) {
            return this.localePipe.transform("component.extendProperty.set");
        }
        return this.localePipe.transform("component.extendProperty.notSet");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageSetting {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageSetComponent {
    /**
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.imageSet.imageSet'),
            width: 520,
            height: 360,
            showButtons: true
        };
        // 影像操作权限选项列表
        this.operationList = [
            { value: 'onlyView', name: this.localePipe.transform('component.imageSet.onlyView') },
            { value: 'edit', name: this.localePipe.transform('component.imageSet.edit') },
            { value: 'reScanStart', name: this.localePipe.transform('component.imageSet.reScanStart') },
            { value: 'reScanComplete', name: this.localePipe.transform('component.imageSet.reScanComplete') }
        ];
        // 影像操作权限
        this.imageSetting = new ImageSetting();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} setValue
     * @return {?}
     */
    set value(setValue) {
        if (setValue) {
            this.imageSetting.imageOperation = setValue.imageOperation;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    changeValue(data) {
        // 先选0再选123的时候，暂时置为0？先选123再选0则置为0√
        if (data.indexOf('onlyView') > -1) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.message.info(this.localePipe.transform('component.imageSet.mutualExclusion'));
                this.imageSetting.imageOperation = 'onlyView';
            }), 100);
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const value = this.imageSetting;
        /** @type {?} */
        const object = { value, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
}
ImageSetComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-image-set',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <!-- <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u5F71\u50CF\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div> -->\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.imageSet.imageOperation'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-checkboxgroup [data]=\"operationList\" [(ngModel)]=\"imageSetting.imageOperation\" [horizontal]=\"true\"\r\n                  [isStringValue]=true (changeValue)=\"changeValue($event)\">\r\n                  </farris-checkboxgroup>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.imageSet.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.imageSet.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ImageSetComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ImageSetComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
class ImageSetConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.imageOperation) {
            return this.localePipe.transform('component.imageSet.set');
        }
        return this.localePipe.transform('component.imageSet.notSet');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BIF_LANG_RESOURCES = new InjectionToken("BIF_LANG_RESOURCES");
class AifLocalePipe {
    /**
     * @param {?} localeId
     * @param {?} resources
     */
    constructor(localeId, resources) {
        this.defaultLang = "zh-CHS";
        this.langCode = localeId || this.defaultLang;
        this.resources = resources || {};
        this.lang = resources[this.langCode] || resources[this.defaultLang] || {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        return this.lang[name] || name;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    instant(name) {
        return this.transform(name);
    }
}
AifLocalePipe.decorators = [
    { type: Pipe, args: [{ name: 'aifLocale' },] }
];
/** @nocollapse */
AifLocalePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [BIF_LANG_RESOURCES,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StartConditionService {
    /**
     * @return {?}
     */
    createConditionEntity() {
        /** @type {?} */
        const entity = new ConditionEntity();
        entity.id = this.generateGUID();
        entity.isEnabled = true;
        entity.type = ConditionType.COMPONENT;
        return entity;
    }
    /**
     * @return {?}
     */
    generateGUID() {
        /** @type {?} */
        let d = new Date().getTime();
        /** @type {?} */
        let guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            /** @type {?} */
            let r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        }));
        return guid;
    }
}
StartConditionService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class AbstractDatagridComponent {
    /**
     * @param {?} messager
     * @param {?} notify
     * @param {?} metadataService
     * @param {?} modalService
     * @param {?} localePipe
     * @param {?} injector
     * @param {?} resolver
     * @param {?} cdf
     */
    constructor(messager, notify, metadataService, modalService, localePipe, injector, resolver, cdf) {
        this.messager = messager;
        this.notify = notify;
        this.metadataService = metadataService;
        this.modalService = modalService;
        this.localePipe = localePipe;
        this.injector = injector;
        this.resolver = resolver;
        this.cdf = cdf;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.toolbarData = [
            {
                id: 'btn-add',
                text: this.localePipe.instant("add"),
                class: 'btn btn-secondary',
                disabled: false
            },
            {
                id: 'btn-remove',
                text: this.localePipe.instant("remove"),
                class: 'btn btn-secondary',
                disabled: false
            },
        ];
        this.dgIdField = "id";
        this.editingRowId = null;
    }
    /**
     * @return {?}
     */
    get dgTotal() {
        return this.dgData.length || 0;
    }
    /**
     * @param {?} args
     * @return {?}
     */
    toolbarClickHandler(args) {
        switch (args.id) {
            case 'btn-add':
                this.add();
                break;
            case 'btn-remove':
                this.remove(null);
                break;
        }
    }
    /**
     * 开始行编辑
     * @param {?=} ctx
     * @return {?}
     */
    startRowEdit(ctx) {
        this.dg.editRow(ctx.rowData.id);
        this.editingRowId = ctx.rowData.id;
        this.cdf.detectChanges();
        return false;
    }
    /**
     * 取消行编辑
     * @param {?=} ctx
     * @return {?}
     */
    cancelRowEdit(ctx) {
        this.dg.cancelEdit(ctx.rowData.id);
        this.editingRowId = null;
        this.cdf.detectChanges();
        return false;
    }
    /**
     * 结束行编辑
     * @param {?=} ctx
     * @return {?}
     */
    endRowEdit(ctx) {
        this.dg.endRowEdit();
        this.editingRowId = null;
        this.cdf.detectChanges();
        return false;
    }
    /**
     * 行删除
     * @param {?} evt
     * @param {?=} ctx
     * @return {?}
     */
    remove(evt, ctx) {
        /** @type {?} */
        const ids = [];
        if (ctx == null) {
            // 批量删除
            this.dg.checkeds.forEach((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                ids.push(it.id);
            }));
        }
        else {
            // 行内删除
            ids.push(ctx.rowData.id);
        }
        if (ids.length == 0) {
            this.notify.warning(this.localePipe.instant("pleaseSelectOneItemAtLeast"));
            if (evt != null) {
                evt.stopPropagation();
            }
            return false;
        }
        for (let id of ids) {
            this.dg.deleteRow(id);
        }
        this.dgData = this.dg.data;
        if (this.editingRowId != null) {
            if (ids.includes(this.editingRowId)) {
                this.editingRowId = null;
            }
            else {
                this.dg.editRow(this.editingRowId);
            }
        }
        this.cdf.detectChanges();
        if (evt != null) {
            evt.stopPropagation();
        }
        return false;
    }
    /**
     * 行移动
     * @param {?} evt
     * @param {?} ctx datagrid上下文
     * @param {?} direction -1: 上移， 1：下移
     * @return {?}
     */
    rowMove(evt, ctx, direction) {
        // const arr = dg.data;
        /** @type {?} */
        const arr = this.dgData;
        /** @type {?} */
        const index = this.findIndex(arr, ctx.rowData.id);
        if (index == -1 || (direction == 1 && index == arr.length - 1) || (direction == -1 && index == 0)) {
            return;
        }
        arr[index] = [arr[index + direction], arr[index + direction] = arr[index]][0];
        this.dgData = [...this.dgData];
        this.cdf.detectChanges();
        if (evt != null) {
            evt.stopPropagation();
        }
        return false;
    }
    /**
     * 查找数组中指定id的元素下标
     * @protected
     * @param {?} arr 数组
     * @param {?} id 数组唯一标识
     * @return {?} 元素下标
     */
    findIndex(arr, id) {
        /** @type {?} */
        let index = -1;
        for (let i = 0; i < arr.length; i++) {
            /** @type {?} */
            const elt = arr[i];
            if (elt.id == id) {
                index = i;
                break;
            }
        }
        return index;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LANG_RESOURCES = {
    "zh-CHS": {
        "startCondition": "启动条件",
        "yes": "是",
        "no": "否",
        "confirm": "确定",
        "edit": "编辑",
        "moveUp": "上移",
        "moveDown": "下移",
        "add": "新增",
        "remove": "删除",
        "isEnabled": "是否启用",
        "type": "类型",
        "commonComponent": "通用构件",
        "expression": "表达式",
        "billAction": "业务动作",
        "content": "内容",
        "description": "描述",
        "operation": "操作",
        "typeMustNotBeNull": "类型不可为空",
        "contentMustNotBeNull": "内容不可为空",
        "commonComponentMetadataSelector": "通用构件选择",
        "pleaseSelectOneItemAtLeast": "请至少选择一条数据",
        "pleaseEndCurrentRowEditing": "请先结束当前行编辑",
    },
    "en": {
        "startCondition": "Start Condition",
        "yes": "Yes",
        "no": "No",
        "confirm": "Confirm",
        "edit": "Edit",
        "moveUp": "Move Up",
        "moveDown": "Move Down",
        "add": "Add",
        "remove": "Remove",
        "isEnabled": "Is Enabled",
        "type": "Type",
        "commonComponent": "Common Component",
        "expression": "Expression",
        "billAction": "Bill Action",
        "content": "Content",
        "description": "Description",
        "operation": "Operation",
        "typeMustNotBeNull": "Type must not be null",
        "contentMustNotBeNull": "Content must not be null",
        "commonComponentMetadataSelector": "Common Component Selector",
        "pleaseSelectOneItemAtLeast": "Please select one item at least",
        "pleaseEndCurrentRowEditing": "Please end current row editing",
    },
    "zh-CHT": {
        "startCondition": "啓動條件",
        "yes": "是",
        "no": "否",
        "confirm": "確定",
        "edit": "編輯",
        "moveUp": "上移",
        "moveDown": "下移",
        "add": "新增",
        "remove": "刪除",
        "isEnabled": "是否啓用",
        "type": "類型",
        "commonComponent": "通用構件",
        "expression": "表達式",
        "billAction": "業務動作",
        "content": "內容",
        "description": "描述",
        "operation": "操作",
        "typeMustNotBeNull": "類型不可爲空",
        "contentMustNotBeNull": "內容不可爲空",
        "commonComponentMetadataSelector": "通用構件選擇",
        "pleaseSelectOneItemAtLeast": "請至少選擇壹條數據",
        "pleaseEndCurrentRowEditing": "請先結束當前行編輯",
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = LANG_RESOURCES;
class StartConditionComponent extends AbstractDatagridComponent {
    /**
     * @param {?} startConditionService
     * @param {?} designerState
     * @param {?} metadata
     * @param {?} expr
     * @param {?} des
     * @param {?} messager
     * @param {?} notify
     * @param {?} modal
     * @param {?} framework
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} loading
     * @param {?} localeId
     * @param {?} localePipe
     * @param {?} cfr
     * @param {?} cdf
     * @param {?} inj
     */
    constructor(startConditionService, designerState, metadata, expr, des, messager, notify, modal, framework, router, activatedRoute, loading, localeId, localePipe, cfr, cdf, inj) {
        super(messager, notify, metadata, modal, localePipe, inj, cfr, cdf);
        this.startConditionService = startConditionService;
        this.designerState = designerState;
        this.metadata = metadata;
        this.expr = expr;
        this.des = des;
        this.messager = messager;
        this.notify = notify;
        this.modal = modal;
        this.framework = framework;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.localePipe = localePipe;
        this.cfr = cfr;
        this.cdf = cdf;
        this.inj = inj;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '启动条件',
            width: 900,
            height: 400,
            showButtons: true,
            showHeader: false
        };
        this.dgIdField = "id";
        this.designedConditionEntities = new Array();
        this.editingRowId = null;
        this.canEdit = true;
        this.beforeEdit = (/**
         * @param {...?} args
         * @return {?}
         */
        (...args) => {
            // console.log('Before Edit', args);
            return of$1(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {...?} args
         * @return {?}
         */
        (rowIndex, rowData, ...args) => {
            if (rowData.component && rowData.component.compMetadataId) {
                return of$1(true);
            }
            else if (rowData.expression && rowData.expression.exprContent) {
                return of$1(true);
            }
            else {
                this.notify.warning(this.localePipe.instant("eventRouterConditionsContentCantBeEmpty"));
                return of$1(false);
            }
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        data = data ? data : '[]';
        /** @type {?} */
        const conditionEntities = data ? [] : BpmnModelJsonHelper.FromJson(data, ConditionEntity);
        this.designedConditionEntities = conditionEntities.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            const entity = {
                id: item.id,
                isEnabled: item.isEnabled,
                name: item.name,
                type: item.type,
                remarks: item.remarks,
                component: {},
                expression: {},
            };
            if (entity.type == ConditionType.COMPONENT) {
                /** @type {?} */
                const compCondCont = new ComponentConditionContent();
                compCondCont.LoadFromJson(item.content);
                entity.component.compId = compCondCont.componentId;
                entity.component.compMetadataId = compCondCont.componentMetadataId;
                entity.component.compName = compCondCont.name;
                entity.displayedContent = entity.component.compName;
            }
            else if (entity.type == ConditionType.EXPRESSION) {
                /** @type {?} */
                const exprContent = new ExpressionConditionContent();
                exprContent.LoadFromJson(item.content);
                entity.expression.exprContent = exprContent.expressionContent;
                entity.displayedContent = entity.expression.exprContent;
            }
            return entity;
        }));
    }
    /**
     * @return {?}
     */
    get dgData() {
        return this.designedConditionEntities;
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    set dgData(arr) {
        this.designedConditionEntities = arr;
    }
    /**
     * @return {?}
     */
    get dgTotal() {
        return this.dgData.length || 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.configDgColumns();
    }
    /**
     * @return {?}
     */
    clickOk() {
        if (this.dg.isEditing() || this.editingRowId != null) {
            return;
        }
        /** @type {?} */
        const conditionEntities = this.designedConditionEntities.map((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            /** @type {?} */
            const item = new ConditionEntity();
            item.id = entity.id;
            item.isEnabled = entity.isEnabled;
            item.name = entity.name;
            item.type = entity.type;
            item.remarks = entity.remarks;
            if (entity.type == ConditionType.COMPONENT) {
                /** @type {?} */
                const compCondCont = new ComponentConditionContent();
                compCondCont.name = entity.component.compName;
                compCondCont.componentId = entity.component.compId;
                compCondCont.componentMetadataId = entity.component.compMetadataId;
                item.content = compCondCont.ConvertToJson();
            }
            else if (entity.type == ConditionType.EXPRESSION) {
                /** @type {?} */
                const exprContent = new ExpressionConditionContent();
                exprContent.expressionContent = entity.expression.exprContent;
                item.content = exprContent.ConvertToJson();
            }
            return item;
        }));
        /** @type {?} */
        const val = BpmnModelJsonHelper.ToJson(conditionEntities);
        /** @type {?} */
        const obj = { value: val, parameters: null };
        this.submitModal.emit(obj);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    load() {
        throw new Error('Method not implemented.');
    }
    /**
     * @param {?} args
     * @return {?}
     */
    toolbarClickHandler(args) {
        switch (args.id) {
            case 'btn-add':
                this.add();
                break;
            case 'btn-remove':
                this.remove(null);
                break;
        }
    }
    /**
     * @return {?}
     */
    add() {
        if (this.dg.isEditing() == false || this.dg.isEditing() == null) {
            /** @type {?} */
            const newItem = this.startConditionService.createConditionEntity();
            /** @type {?} */
            const newEntity = {
                id: newItem.id,
                name: newItem.name,
                type: newItem.type,
                isEnabled: newItem.isEnabled,
                remarks: newItem.remarks,
                component: {},
                expression: {},
            };
            this.dgData = [...this.dgData, newEntity];
            this.cdf.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.dg.editRow(newItem.id);
                this.editingRowId = newItem.id;
            }), 0);
        }
        else {
            this.notify.warning(this.localePipe.instant("pleaseEndCurrentRowEditing"));
        }
    }
    /**
     * 行删除
     * @param {?} evt
     * @param {?=} ctx
     * @return {?}
     */
    remove(evt, ctx) {
        /** @type {?} */
        const ids = [];
        if (ctx == null) {
            // 批量删除
            this.dg.checkeds.forEach((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                ids.push(it.id);
            }));
        }
        else {
            // 行内删除
            ids.push(ctx.rowData.id);
        }
        if (ids.length == 0) {
            this.notify.warning(this.localePipe.instant("pleaseSelectOneItemAtLeast"));
            if (evt != null) {
                evt.stopPropagation();
            }
            return false;
        }
        for (let id of ids) {
            this.dg.deleteRow(id);
        }
        this.dgData = this.dg.data;
        if (this.editingRowId != null) {
            if (ids.includes(this.editingRowId)) {
                this.editingRowId = null;
            }
            else {
                this.dg.editRow(this.editingRowId);
            }
        }
        this.cdf.detectChanges();
        if (evt != null) {
            evt.stopPropagation();
        }
        return false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    selectContent(e) {
        switch (e.form.value.type) {
            case ConditionType.COMPONENT:
                this.selectCommonComp(e);
                break;
            case ConditionType.EXPRESSION:
                this.showExpression(e);
                break;
            // case ConditionType.FULL_EXPRESSION:
            //   this.showExpression(e);
            //   break;
            // case ConditionType.INCREMENTAL_EXPRESSION:
            //   this.showExpression(e);
            //   break;
            case ConditionType.VOACTION:
                this.selectVOAction(e);
                break;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    selectCommonComp(e) {
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.inj);
        compRef.instance.typeList = "CommonComponent";
        // compRef.instance.boId = `${this.processContent.upBillBoId},${this.processContent.downBillBoId}`;
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        (metadata4RefDto) => {
            /** @type {?} */
            const content = new ComponentConditionContent();
            /** @type {?} */
            const metadata = metadata4RefDto.metadata;
            /** @type {?} */
            const entity = e.form.bindingData;
            entity.component.compName = metadata.name;
            entity.component.compMetadataId = metadata.id;
            /** @type {?} */
            const metadataContent = JSON.parse(metadata.content);
            entity.component.compId = metadataContent.id || metadataContent.Id || metadataContent.ID || metadata.id;
            entity.displayedContent = entity.component.compName;
            e.formControl.setValue(entity.displayedContent);
            e.instance.cd.detectChanges();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.instant("commonComponentMetadataSelector"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modal.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    selectVOAction(e) {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExpression(e) {
        // this.expr.clearContext();
        /** @type {?} */
        const context = new Array();
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.formControl.value);
        this.configExpressionExpendFuncs();
        /** @type {?} */
        let schema$ = this.des.getSchemaById(this.editorParams.voId);
        schema$.subscribe((/**
         * @param {?} schema
         * @return {?}
         */
        (schema) => {
            this.expr.addNewSchema(schema.name, schema);
            this.expr.addInjectedEntity(schema.entityTypes[0].code, schema.name, schema.entityTypes[0].code, InjectedType.EntityType);
            this.expr.buildExpression(!this.canEdit).then((/**
             * @param {?} expressioninfo
             * @return {?}
             */
            expressioninfo => {
                /** @type {?} */
                const content = new ExpressionConditionContent();
                /** @type {?} */
                let temp = expressioninfo;
                /** @type {?} */
                const entity = e.form.bindingData;
                entity.expression.exprContent = temp;
                entity.displayedContent = entity.expression.exprContent;
                e.formControl.setValue(entity.displayedContent);
                e.instance.cd.detectChanges();
                //点击确定后，去除表达式里面的新增的上下文变量
                if (context.length > 0) {
                    this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => !context.some((/**
                     * @param {?} y
                     * @return {?}
                     */
                    y => y.key === x.key))));
                }
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    clearContent(e) {
        /** @type {?} */
        const entity = e.form.bindingData;
        entity.displayedContent = null;
        //构件
        entity.component.compName = null;
        entity.component.compMetadataId = null;
        entity.component.compId = null;
        //表达式
        entity.expression.exprContent = null;
        //VO动作
        e.formControl.setValue(null);
        e.instance.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    configDgColumns() {
        this.dgColumns = [
            // { field: 'id', title: this.localePipeService.instant("id"), width: 160 },
            {
                field: 'isEnabled', title: this.localePipe.instant("isEnabled"), width: 100, template: this.dgIsEnabledStateCell,
            },
            {
                field: 'type', title: this.localePipe.instant("type"), width: 120,
                editor: {
                    type: EditorTypes.SELECT,
                    options: {
                        idField: "value",
                        valueField: 'value',
                        textField: 'text',
                        data: [
                            // { value: ConditionType.VOACTION, text: this.localePipeService.instant("billAction") },
                            // { value: ConditionType.EXPRESSION, text: this.localePipe.instant("expression") },
                            { value: ConditionType.COMPONENT, text: this.localePipe.instant("commonComponent") },
                        ]
                    },
                    validators: [
                        { type: 'required', messager: this.localePipe.instant("typeMustNotBeNull") },
                    ]
                },
                validators: [
                    { type: 'required' },
                ],
                formatter: (/**
                 * @param {?} value
                 * @param {?} rowData
                 * @param {?} rowIndex
                 * @return {?}
                 */
                (value, rowData, rowIndex) => {
                    switch (value) {
                        case ConditionType.COMPONENT:
                            return this.localePipe.instant("commonComponent");
                        case ConditionType.EXPRESSION:
                            return this.localePipe.instant("expression");
                        // case ConditionType.FULL_EXPRESSION:
                        //   return this.localePipe.instant("fullExpression");
                        // case ConditionType.INCREMENTAL_EXPRESSION:
                        //   return this.localePipe.instant("incrementalExpression");
                        case ConditionType.VOACTION:
                            return this.localePipe.instant("billAction");
                        default:
                            return "Unknown";
                    }
                })
            },
            {
                field: "displayedContent", title: this.localePipe.instant("content"), width: 200,
                editor: {
                    type: EditorTypes.INPUTGROUP,
                    options: {
                        groupText: this.groupIcon,
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.selectContent(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.clearContent(e);
                        }),
                    },
                    validators: [
                        { type: 'required', messager: this.localePipe.instant("contentMustNotBeNull") }
                    ]
                },
                validators: [
                    { type: 'required' },
                ],
            },
            {
                field: 'remarks', title: this.localePipe.instant("description"), width: 200,
                editor: {
                    type: EditorTypes.TEXTAREA, options: {},
                }
            },
            { field: null, title: this.localePipe.instant("operation"), width: 250, template: this.dgOpCell, halign: 'center', align: 'center' },
        ];
    }
    /**
     * @param {?} param
     * @return {?}
     */
    beginEdit(param) {
        // console.log('Begin Edit', param);
        this.editingRowId = param.rowData.id;
        /** @type {?} */
        const editors = param.gridInstance.getEditors();
        /** @type {?} */
        const select = editors[0];
        select.instance.formControl.valueChanges.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            if (select.instance.dr.form.bindingData.type != val) {
                select.instance.group.bindingData.displayedContent = null;
                select.instance.group.controls.displayedContent.setValue(null);
                select.instance.group.bindingData.remarks = null;
                select.instance.group.controls.remarks.setValue(null);
                select.instance.dr.cd.detectChanges();
            }
        }));
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    endEdit(...args) {
        // console.log('End Edit', args);
        this.editingRowId = null;
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    cancelEdited(...args) {
        // console.log('取消编辑', args);
        this.editingRowId = null;
    }
    /**
     * @return {?}
     */
    configExpressionExpendFuncs() {
        // let changeDetails: VarEntity =
        // {
        //   key: "changeDetails",
        //   name: "业务实体变更集列表",
        //   description: "业务实体变更集列表"
        // }
        // this.expr.addContext(changeDetails);
    }
}
StartConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-start-condition',
                template: "<div class=\"f-page f-page-is-managelist p-2\">\r\n  <div class=\"f-page-header-base\" style=\"min-height: unset;\">\r\n    <div class=\"f-title\">\r\n      <span class=\"f-title-icon f-text-orna-param\">\r\n        <i class=\"f-icon f-icon-clock\"></i>\r\n      </span>\r\n      <h4 class=\"f-title-text\" style=\"font-size: 1rem;\">\r\n        {{ 'startCondition' | aifLocale }}\r\n      </h4>\r\n    </div>\r\n    <f-response-toolbar class=\"f-toolbar\" #toolbar [datas]=\"toolbarData\" (rtClickEvent)=\"toolbarClickHandler($event)\"\r\n      [style.display]=\"canEdit==false?'none':null\">\r\n    </f-response-toolbar>\r\n  </div>\r\n  <div class=\"f-utils-fill-flex-column\">\r\n    <farris-datagrid #dg=\"datagrid\" [columns]=\"dgColumns\" [data]=\"dgData\" [editable]=\"canEdit\" [editMode]=\"'row'\"\r\n      [idField]=\"dgIdField\" [showLineNumber]=\"true\" [striped]=\"false\" [showBorder]=\"true\" [pagination]=\"false\"\r\n      [showAllCheckbox]=\"true\" [selectOnCheck]=\"false\" [checkOnSelect]=\"false\" [onlySelectSelf]=\"true\"\r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [keepSelect]=\"true\" [fitColumns]=\"true\" [fit]=\"true\"\r\n      [virtualized]=\"false\" [clickToEdit]=\"false\" [beforeEdit]=\"beforeEdit\" (beginEdit)=\"beginEdit($event)\"\r\n      [afterEdit]=\"afterEdit\" (endEdit)=\"endEdit($event)\" (cancelEdited)=\"cancelEdited($event)\">\r\n    </farris-datagrid>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #dgIsEnabledStateCell let-ctx>\r\n  <div class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"line-height: 100%;\">\r\n    <farris-switch checked id=\"isEnabled\" [disabled]=\"!canEdit\" checkedLabel=\"{{'yes'|aifLocale}}\"\r\n      uncheckedLabel=\"{{'no'|aifLocale}}\" [(ngModel)]=\"ctx.rowData.isEnabled\"></farris-switch>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #dgOpCell let-ctx>\r\n  <ng-container\r\n    *ngIf=\"dg.isEditing()!=false&&dg.isEditing()!=null&&dg.selectedRow.id==ctx.rowData.id; else elseTemplate\">\r\n    <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"endRowEdit(ctx)\" title=\"{{'confirm'|aifLocale}}\">\r\n      <span class=\"f-icon f-icon-check\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n        style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n    </button>\r\n  </ng-container>\r\n  <ng-template #elseTemplate>\r\n    <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"startRowEdit(ctx)\" title=\"{{'edit'|aifLocale}}\">\r\n      <span class=\"f-icon f-icon-edit-button\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n        style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n    </button>\r\n  </ng-template>\r\n  <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"rowMove($event, ctx, -1)\"\r\n    title=\"{{'moveUp'|aifLocale}}\">\r\n    <span class=\"f-icon f-icon-arrow-seek-up\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n      style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n  </button>\r\n  <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"rowMove($event, ctx, 1)\"\r\n    title=\"{{'moveDown'|aifLocale}}\">\r\n    <span class=\"f-icon f-icon-arrow-seek-down\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n      style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n  </button>\r\n  <button class=\"btn btn-link mr-2\" [disabled]=\"!canEdit\" (click)=\"remove($event, ctx)\" title=\"{{'remove'|aifLocale}}\">\r\n    <span class=\"f-icon f-icon-delete\" [ngClass]=\"{'f-pretend-link': canEdit}\"\r\n      style=\"width: 20px; height: 20px; font-size: 20px;\"></span>\r\n  </button>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">\u786E\u5B9A</button>\r\n</ng-template>\r\n",
                providers: [
                    { provide: BIF_LANG_RESOURCES, useValue: ɵ0 },
                    AifLocalePipe,
                    StartConditionService,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
StartConditionComponent.ctorParameters = () => [
    { type: StartConditionService },
    { type: ProcessDesignerUIState },
    { type: GSPMetadataRTService },
    { type: ExpressionService },
    { type: DataEntityService },
    { type: MessagerService },
    { type: NotifyService },
    { type: BsModalService },
    { type: FrameworkService },
    { type: Router },
    { type: ActivatedRoute },
    { type: LoadingService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: AifLocalePipe },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: Injector }
];
StartConditionComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    dg: [{ type: ViewChild, args: ["dg",] }],
    dgIsEnabledStateCell: [{ type: ViewChild, args: ["dgIsEnabledStateCell",] }],
    dgOpCell: [{ type: ViewChild, args: ["dgOpCell",] }]
};
class StartConditionConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.StartCondition) {
            return '（已设置）';
        }
        return '（未设置）';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ProcessPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    Key: "Key",
    /**
     * 分支条件
     */
    ConditionExpression: 'ConditionExpression',
    /**
     * 流程备注
     */
    wf_TitleExpression: 'wf_TitleExpression',
    /**
     * 默认分支
     */
    Default: 'Default',
    startMode: "startMode",
    wf_ExecuteForms_PC: "wf_ExecuteForms_PC",
    wf_ExecuteForms_Mobile: "wf_ExecuteForms_Mobile",
    wf_Component: "wf_Component",
    processVariables: "processVariables",
    wf_CustomizeAction: "wf_CustomizeAction",
    enablePriority: "enablePriority",
    imageSettings: "imageSettings",
    timeLimitControl: "timeLimitControl",
    messageNotice: "messageNotice",
    allowPreAssign: "allowPreAssign",
    EntryForm: "EntryForm",
    DisplayTerminal: "DisplayTerminal",
    StartCondition: "StartCondition",
    /**
     * 整单撤回审核中单据
     */
    enableWholeOrderRetrieve: 'enableWholeOrderRetrieve',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BpmnProcessViewModel {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProcessProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.ProcessVariables = this.uiState.propertyData[ProcessPropertyKeys.processVariables];
        this.uiState.propertyConfig = this.setProcessConfig(obj.propertyConfig);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProcessConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setProcessEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setProcessEntity(obj) {
        if (obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case ProcessPropertyKeys.Key: // 标识
                        break;
                    case ProcessPropertyKeys.EntryForm: // 流程分类
                        item.editor = EntryFormEditorComponent;
                        item.converter = new FlowFormConverter();
                        // item.editorParams = {
                        //     flowForms: [this.uiState.flowFormInfo.flowForm]
                        // };
                        break;
                    case ProcessPropertyKeys.wf_Component:
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter(this.localPipe);
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ProcessPropertyKeys.wf_ExecuteForms_PC:
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const params = {
                            location: 'process',
                            tab: 'web'
                        };
                        item.converter = new ExecuteFormsConverter(params, this.localPipe);
                        item.editorParams = params;
                        break;
                    case ProcessPropertyKeys.wf_ExecuteForms_Mobile:
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const editorParams = {
                            location: 'process',
                            tab: 'mobile'
                        };
                        item.converter = new ExecuteFormsConverter(editorParams, this.localPipe);
                        item.editorParams = editorParams;
                        break;
                    case ProcessPropertyKeys.wf_TitleExpression:
                        item.editor = TitleExpressionComponent;
                        item.converter = new TitleExpressionConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.allowPreAssign:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ProcessPropertyKeys.enablePriority:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ProcessPropertyKeys.enableWholeOrderRetrieve:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ProcessPropertyKeys.startMode:
                        item.iterator = this.uiState.startModeIterator;
                        break;
                    case ProcessPropertyKeys.DisplayTerminal:
                        item.iterator = this.uiState.displayTerminal;
                        break;
                    case ProcessPropertyKeys.wf_CustomizeAction:
                        item.editor = CustomizeActionComponent;
                        item.converter = new CustomizeActionConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.processVariables:
                        item.editor = ProcessVariablesComponent;
                        item.converter = new ProcessVariablesConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.timeLimitControl:
                        item.editor = TimeLimitControlComponent;
                        item.converter = new TimeLimitControlConverter(this.localPipe);
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ProcessPropertyKeys.messageNotice:
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter(this.localPipe);
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ProcessPropertyKeys.imageSettings:
                        item.editor = ImageSetComponent;
                        item.converter = new ImageSetConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.StartCondition:
                        item.editor = StartConditionComponent;
                        item.editorParams = {};
                        item.converter = new StartConditionConverter();
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter(this.localPipe);
                        break;
                }
            }));
        }
    }
}
BpmnProcessViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BpmnProcessViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovalItemEntity {
    /**
     * @param {?=} value
     * @param {?=} text
     * @param {?=} wfAction
     */
    constructor(value, text, wfAction) {
        this.isDefault = false;
        this.commentNecessary = false;
        this.certification = false;
        this.attachmentNecessary = false;
        this.signatureNecessary = false;
        this.value = value;
        this.text = text;
        this.workFlowAction = wfAction;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SignRuleEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SignRuleComponent {
    /**
     * @param {?} formBuilder
     * @param {?} message
     * @param {?} exprService
     * @param {?} designerUIState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(formBuilder, message, exprService, designerUIState, cdr, localeId, resources, localePipe) {
        this.formBuilder = formBuilder;
        this.message = message;
        this.exprService = exprService;
        this.designerUIState = designerUIState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.signRule.countersignRules'),
            width: 800,
            height: 520,
            showButtons: true
        };
        this.editCondition = false;
        this.data = [];
        this.calculationMethods = [
            { text: this.localePipe.transform('component.signRule.byNumber'), value: 'byNumber' },
            { text: this.localePipe.transform('component.signRule.byProportion'), value: 'byProportion' },
            { text: this.localePipe.transform('component.signRule.customConditions'), value: 'null' },
        ];
        this.counterSignVariables = [];
        this.bpmnModel = this.designerUIState.bpmnModel;
        /**
         * **** 审批项帮助参数 ********************************************************
         */
        this.approvalCols = [{ title: this.localePipe.transform('component.signRule.value'), field: 'value', width: 80 },
            { title: this.localePipe.transform('component.signRule.text'), field: 'text', width: 90 }];
        this.approvalItems = [];
        this.approvalItems1 = [
            { value: 'Forward', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.forward') },
            { value: 'Backward', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.backward') },
            { value: 'Abort', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.abort') }
        ];
        /**
         * ********************************
         */
        this.columns = [
            { field: 'conclusionName', width: 25, title: this.localePipe.transform('component.signRule.conclusionName') },
            { field: 'conclusionValue', width: 25, title: this.localePipe.transform('component.signRule.conclusionValue') },
            { field: 'calculateType', width: 40, title: this.localePipe.transform('component.signRule.calculateType'),
                formatter: { type: 'enum', options: { valueField: 'value', textField: 'text', data: this.calculationMethods } },
                editor: { type: EditorTypes.COMBOLIST, options: { valueField: 'value', textField: 'text', data: this.calculationMethods, idField: 'value', panelHeight: 'auto' } }
            },
            { field: 'conditionValue', width: 25, title: this.localePipe.transform('component.signRule.conditionValue'),
                editor: { type: EditorTypes.NUMBERBOX, options: {} },
                formatter: { type: 'number', options: { precision: 0, min: 0 } }
            },
            { field: 'waitAllVotes', width: 35, title: this.localePipe.transform('component.signRule.waitAllVotes'),
                editor: { type: EditorTypes.SWITCH, options: {} },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.signRule.yes'), falseText: this.localePipe.transform('component.signRule.no') } }
            },
            { field: 'completionCondition', width: 50, title: this.localePipe.transform('component.signRule.customConditions'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        /**
         * 结束编辑前事件
         */
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            this.preValue = JSON.parse(JSON.stringify(rowData));
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    //会签规则打开页面
    /**
     * @param {?} rules
     * @return {?}
     */
    set value(rules) {
        if (rules && rules.length > 0) {
            for (const rule of rules) {
                /** @type {?} */
                const val = new SignRuleEntity();
                val.id = ProcessDeUtil.GenerateElementId();
                val.conclusionValue = rule.ConclusionValue;
                val.conclusionName = rule.ConclusionName;
                val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition._value : null;
                this.data.push(val);
            }
        }
        else { // 如果模型上没有会签规则，自动带入所有的审批选项
            this.deleteRow();
        }
    }
    //多实例打开完成规则页面
    /**
     * @param {?} rules
     * @return {?}
     */
    set value1(rules) {
        this.editCondition = true;
        if (rules && rules.length > 0) {
            for (const rule of rules) {
                /** @type {?} */
                const val = new SignRuleEntity();
                val.id = BpmnModelHelper.GenerateElementId();
                val.conclusionValue = rule.ConclusionValue;
                // val.conclusionName = rule.conclusionName;
                val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition.Value : null;
                this.data.push(val);
            }
            this.data = this.setName1(this.data);
        }
        else { // 如果模型上没有会签规则，自动带入所有的审批选项
            this.deleteRow1();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.counterSignVariables = this.designerUIState.counterSignVariables || [];
        this.approvalItems = this.designerUIState.approvalItems || [];
    }
    // 重置动作
    /**
     * @return {?}
     */
    deleteRow() {
        this.data = [];
        /** @type {?} */
        const ruleItems = this.designerUIState.approvalItems || [];
        if (ruleItems && ruleItems.length > 0) {
            for (const ruleItem of ruleItems) {
                /** @type {?} */
                const val = new SignRuleEntity();
                if (ruleItem.value === 'Pass') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byProportion';
                    val.conditionValue = '100';
                    val.waitAllVotes = true;
                }
                else if (ruleItem.value === 'Back') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byNumber';
                    val.conditionValue = '1';
                    val.waitAllVotes = true;
                }
                else {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'null';
                    val.conditionValue = '0';
                    val.waitAllVotes = true;
                }
                this.data.push(val);
            }
        }
    }
    // 重置动作
    /**
     * @return {?}
     */
    deleteRow1() {
        this.data = [];
        if (this.approvalItems1 && this.approvalItems1.length > 0) {
            for (const ruleItem of this.approvalItems1) {
                /** @type {?} */
                const val = new SignRuleEntity();
                if (ruleItem.value === 'Forward') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byProportion';
                    val.conditionValue = '100';
                    val.waitAllVotes = true;
                }
                else if (ruleItem.value === 'Backward' || ruleItem.value === 'Abort') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byNumber';
                    val.conditionValue = '1';
                    val.waitAllVotes = true;
                }
                else {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'null';
                    val.conditionValue = '0';
                    val.waitAllVotes = true;
                }
                this.data.push(val);
            }
        }
    }
    // 给个名字
    /**
     * @param {?} signRuleEntity
     * @return {?}
     */
    setName1(signRuleEntity) {
        if (signRuleEntity && signRuleEntity.length > 0) {
            for (var i = 0; i < signRuleEntity.length; i++) {
                if (signRuleEntity[i].conclusionValue === 'Forward') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.forward');
                }
                else if (signRuleEntity[i].conclusionValue === 'Backward') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.backward');
                }
                else if (signRuleEntity[i].conclusionValue === 'Abort') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.abort');
                }
            }
        }
        return signRuleEntity;
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning(this.localePipe.transform('component.signRule.notEmpty'));
        }
        else {
            /** @type {?} */
            const object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickOK1() {
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning(this.localePipe.transform('component.signRule.notEmpty'));
        }
        else {
            /** @type {?} */
            let counterSignRules = new Array();
            this.data.forEach((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                /** @type {?} */
                let counterSignRule = new CounterSignRule(this.bpmnModel);
                counterSignRule.CalculateType = d.calculateType;
                counterSignRule.ConclusionValue = d.conclusionValue;
                counterSignRule.ConditionValue = d.conditionValue;
                counterSignRule.WaitAllVotes = d.waitAllVotes;
                counterSignRule.CompletionCondition = new Condition(this.bpmnModel);
                counterSignRule.CompletionCondition.Value = d.completionCondition;
                counterSignRules.push(counterSignRule);
            }));
            // let counterSignRules = new CounterSignRule(this.bpmnModel);
            this.submitModal.emit(counterSignRules);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        // this.exprService.clearContext();
        /** @type {?} */
        const context = new Array();
        if (this.editCondition) {
            if (this.designerUIState.multiCounterSignVariables.length > 0) {
                for (const variable of this.designerUIState.multiCounterSignVariables) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (context.length > 0) {
                for (const v of context) {
                    this.exprService.addContext(v);
                }
            }
        }
        else {
            if (this.counterSignVariables && this.counterSignVariables.length > 0) {
                for (const variable of this.counterSignVariables) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (this.designerUIState.subActivityContext.length > 0) {
                for (const variable of this.designerUIState.subActivityContext) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (context.length > 0) {
                for (const v of context) {
                    this.exprService.addContext(v);
                }
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版（会签规则需要上下文变量）
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.exprService.exprEntity.contextEntities = this.exprService.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * 选中审批项
     * @return {?}
     */
    approvalSelect() {
        /** @type {?} */
        const selections = this.apvlItemsGrid.checkeds;
        if (selections && selections.length > 0) {
            for (const selection of selections) {
                /** @type {?} */
                const signRule = new SignRuleEntity();
                signRule.id = ProcessDeUtil.GenerateElementId();
                signRule.conclusionValue = selection.data.value;
                signRule.conclusionName = selection.data.text;
                this.data.push(signRule);
            }
            this.grid.loadData(this.data);
            this.apvlItemDialog.close();
        }
        else {
            this.message.info(this.localePipe.transform('component.signRule.pleaseSelect'));
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    endEdit(e) {
        this.curValue = e.rowData;
        // 自定义会签规则和预置会签规则互斥
        if (this.preValue.completionCondition !== this.curValue.completionCondition &&
            !(this.isEmpty(this.preValue.completionCondition) && this.isEmpty(this.curValue.completionCondition))) {
            this.data[e.rowIndex].calculateType = 'null',
                this.data[e.rowIndex].conditionValue = '0';
            this.data[e.rowIndex].waitAllVotes = false;
        }
        else if (this.preValue.calculateType !== this.curValue.calculateType ||
            this.preValue.conditionValue !== this.curValue.conditionValue ||
            this.preValue.waitAllVotes !== this.curValue.waitAllVotes) {
            this.data[e.rowIndex].completionCondition = null;
        }
        if (e.column.field === 'conditionValue' && this.data[e.rowIndex].calculateType === 'byProportion'
            && Number.parseInt(e.value) > 100) {
            this.message.info(this.localePipe.transform('component.signRule.maxConditionValue'));
            this.data[e.rowIndex].conditionValue = '100';
        }
        else if (e.column.field === 'conditionValue' && Number.parseInt(e.value) < 0) {
            this.message.info(this.localePipe.transform('component.signRule.minConditionValue'));
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if ((e.column.field === 'calculateType' || e.column.field === 'conditionValue') && (this.data[e.rowIndex].calculateType === 'oneVote' ||
            this.data[e.rowIndex].calculateType === 'fullVote') && Number.parseInt(this.data[e.rowIndex].conditionValue) !== 0) {
            this.message.info(this.localePipe.transform('component.signRule.noConditional'));
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if (e.column.field === 'calculateType' && this.data[e.rowIndex].calculateType === 'byProportion' &&
            Number.parseInt(this.data[e.rowIndex].conditionValue) > 100) {
            this.message.info(this.localePipe.transform('component.signRule.maxConditionValue'));
            this.data[e.rowIndex].conditionValue = '100';
        }
    }
    /**
     * @param {?} s
     * @return {?}
     */
    isEmpty(s) {
        if (!s || s.length == 0) {
            return true;
        }
        else {
            return false;
        }
    }
}
SignRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sign-rule',
                template: "  <div class=\"f-page\">\r\n    <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n        <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n          [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n          [multiSelect]=\"false\" [afterEdit]='afterEdit' (endEdit)=\"endEdit($event)\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </div>\r\n  </div>\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow()\">{{'component.signRule.deleteRow' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #iconSelectFooter1>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow1()\">{{'component.signRule.deleteRow' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK1()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<farris-dialog #approvalItemDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.signRule.approvalOptions'| wfLocale}}\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n      <farris-datagrid #approvalTable [columns]=\"approvalCols\" [data]=\"approvalItems\" [idField]=\"'value'\"\r\n        [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\"\r\n        [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n      </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"approvalItemDialog.close()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3 mx-2\" (click)=\"approvalSelect()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SignRuleComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MessagerService },
    { type: ExpressionService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
SignRuleComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    value1: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    modalFooter1: [{ type: ViewChild, args: ['iconSelectFooter1',] }],
    apvlItemsGrid: [{ type: ViewChild, args: ['approvalTable',] }],
    apvlItemDialog: [{ type: ViewChild, args: ['approvalItemDialog',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
class SignRuleConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        // 会签规则只要启用就有默认值，所以始终置为'已设置';
        return this.localePipe.transform("component.signRule.set");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovelItemsComponent {
    /**
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} uiState
     * @param {?} resolver
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, util, http, uiState, resolver, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.util = util;
        this.http = http;
        this.uiState = uiState;
        this.resolver = resolver;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.approvelItems.approvalOptions'),
            width: 1100,
            height: 515,
            showButtons: true
        };
        this.workFlowActions = [
            { text: this.localePipe.transform('component.approvelItems.forward'), value: 'Forward' },
            { text: this.localePipe.transform('component.approvelItems.backward'), value: 'Backward' },
            { text: this.localePipe.transform('component.approvelItems.abort'), value: 'Abort' }
        ];
        this.columns = [
            {
                field: 'value', width: 80, title: this.localePipe.transform('component.approvelItems.value'),
            },
            { field: 'text', width: 80, title: this.localePipe.transform('component.approvelItems.text') },
            {
                field: 'workFlowAction', width: 80, title: this.localePipe.transform('component.approvelItems.workFlowAction'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.workFlowActions, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'isDefault', width: 60, title: this.localePipe.transform('component.approvelItems.isDefault'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'commentNecessary', width: 60, title: this.localePipe.transform('component.approvelItems.commentNecessary'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'attachmentNecessary', width: 60, title: this.localePipe.transform('component.approvelItems.attachmentNecessary'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'certification', width: 60, title: this.localePipe.transform('component.approvelItems.certification'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'signatureNecessary', width: 60, title: this.localePipe.transform('component.approvelItems.signatureNecessary'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: []
            },
            {
                field: 'defaultComment', isMultilingualField: true, width: 70, title: this.localePipe.transform('component.approvelItems.defaultComment'),
                editor: {
                    type: EditorTypes.LANGUAGETEXTBOX, options: {
                        languages: [
                            { code: 'zh-CHS', name: this.localePipe.transform('component.approvelItems.zh-CHS') },
                            { code: 'zh-CHT', name: this.localePipe.transform('component.approvelItems.zh-CHT') },
                            { code: 'en', name: this.localePipe.transform('component.approvelItems.en') }
                        ]
                    }
                },
            }
        ];
        this.data = [];
        this.actionsCols = [
            { title: this.localePipe.transform('component.approvelItems.value'), field: 'code', width: 80 },
            { title: this.localePipe.transform('component.approvelItems.text'), field: 'name', width: 90 }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set value(items) {
        if (items && items.length > 0) {
            for (const item of items) {
                /** @type {?} */
                const approval = new ApprovalItemEntity();
                approval.value = item.Value;
                approval.text = item.Text;
                approval.workFlowAction = item.WorkFlowAction;
                approval.isDefault = item.IsDefault;
                if (item.commentNecessary === null || item.commentNecessary === undefined) {
                    approval.commentNecessary = (item.Value === 'Back' ? true : false);
                }
                else {
                    approval.commentNecessary = item.commentNecessary;
                }
                approval.certification = item.certification ? item.certification : false;
                approval.attachmentNecessary = item.attachmentNecessary ? item.attachmentNecessary : false;
                approval.signatureNecessary = item.signatureNecessary ? item.signatureNecessary : false;
                approval.defaultComment = item.defaultComment ? JSON.parse(item.defaultComment) : null;
                this.data.push(approval);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getActionsList();
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const actionList = [];
            // 将多语的默认意见转成String
            for (const action of this.data) {
                if (action.defaultComment != null) {
                    action.defaultComment = JSON.stringify(action.defaultComment);
                }
                actionList.push(action);
            }
            console.log(actionList);
            /** @type {?} */
            const object = { value: actionList, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => !d.workFlowAction)) > -1) {
            this.message.warning(this.localePipe.transform('component.approvelItems.workFlowActionNotNull'));
            return false;
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectChanged(data) { }
    /**
     * @return {?}
     */
    deleteRow() {
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            const i = this.data.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.value === this.grid.selectedRow.data.value));
            this.data.splice(i, 1);
            this.grid.loadData(this.data);
        }
        else {
            this.message.info(this.localePipe.transform('component.approvelItems.deleteRow'));
        }
    }
    /**
     * @private
     * @return {?}
     */
    getActionsList() {
        /** @type {?} */
        let url = this.util.getApprovalActionWebApi() + '?';
        if (this.uiState.bizActivityId) {
            url += `bizActivityId=${this.uiState.bizActivityId}`;
        }
        else {
            url += `bizActivityId=`;
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            data = data.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => this.actionValidate(a)));
            this.actions = data;
        }));
    }
    /**
     * @return {?}
     */
    actionsSelect() {
        /** @type {?} */
        const selections = this.actionsTable.checkeds;
        if (selections && selections.length > 0) {
            selections.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                const item = new ApprovalItemEntity(action.data.code, action.data.name, action.data.workFlowAction);
                /** @type {?} */
                const index = this.data.findIndex((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.value === action.data.code));
                if (index > -1) {
                    this.data.splice(index, 1);
                }
                this.data.push(item);
            }));
            this.grid.loadData(this.data);
        }
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable.clearCheckeds(true);
        this.actionsDialog.close();
    }
    /**
     * @return {?}
     */
    SelectCancel() {
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable.clearCheckeds(true);
        this.actionsDialog.close();
    }
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    actionValidate(action) {
        /** @type {?} */
        const arr = ['ViewBizLog', 'ViewFlowChart', 'AssignUser', 'Claim', 'Unclaim', 'Retrieve', 'Resubmit', 'Obsolete', 'Transfer', 'AddSignFront', 'ViewExecuteForm'];
        return arr.indexOf(action.code.trim()) === -1;
    }
}
ApprovelItemsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-approvel-items',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      <button class=\"btn btn-primary mr-2\" (click)=\"actionsDialog.show()\">{{'component.approvelItems.add' | wfLocale}}</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"deleteRow()\">{{'component.approvelItems.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'value'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" (selectChanged)=\"selectChanged($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"SelectCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"actionsSelect()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #actionsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.approvelItems.approvalAction' | wfLocale}}\">\r\n  <!-- 2023-6-1 \u89E3\u51B3\u5BA1\u6279\u52A8\u4F5C\u5F39\u7A97\u53CC\u6EDA\u52A8\u6761\u7684\u95EE\u9898 -->\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-hidden h-100\" style=\"margin-left: 8px;margin-right: 8px;\">\r\n    <farris-datagrid #actionsTable [columns]=\"actionsCols\" [data]=\"actions\"\r\n      [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false'\r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"true\"\r\n      [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.approvelItems.lineNumber' | wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ApprovelItemsComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ApprovelItemsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    actionsTable: [{ type: ViewChild, args: ['actionsTable',] }],
    actionsDialog: [{ type: ViewChild, args: ['actionsDialog',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
class ApprovelItemsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform('component.approvelItems.set');
        }
        else {
            return this.localePipe.transform('component.approvelItems.notSet');
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionEditorComponent {
    /**
     * @param {?} expr
     * @param {?} designerState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(expr, designerState, cdr, localeId, resources, localePipe) {
        this.expr = expr;
        this.designerState = designerState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: this.localePipe.transform('component.expressionEditor.expressionEditor'),
            width: 1036,
            height: 530,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                this.contextEntities = this.contextEntities.concat([variable]);
            }
        }
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.activityComponentContext.length > 0) {
            for (const variable of this.designerState.activityComponentContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const result = this.compute.getExpr();
        this.value = this.convertToValue(result.text);
        /** @type {?} */
        const object = { value: this.value, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * 切换表达式类型（简易表达式<--->高级表达式）
     * @return {?}
     */
    changeType() {
        this.compute.changeType();
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    convertToValue(val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
}
ExpressionEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-editor',
                template: "<div class=\"mx-3 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <app-compute-rule-editor #compute\r\n  [text]=\"value\"\r\n  [advancedContexts]=\"contextEntities\"\r\n  [injectName]=\"injectName\"\r\n  [injectSchemaName]=\"'Schema'\"\r\n  [injectNameInSchema]=\"injectName\"\r\n  [schema]=\"schema\"\r\n  [schemaName]=\"'Schema'\">\r\n</app-compute-rule-editor>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm mr-2\" (click)=\"clickCancel()\">{{'component.expressionEditor.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm mr-2\" (click)=\"changeType()\">{{'component.expressionEditor.changeType' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm\" (click)=\"clickOK()\">{{'component.expressionEditor.clickOK' | wfLocale}}</button>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionEditorComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ExpressionEditorComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editorParams: [{ type: Input }],
    editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }],
    compute: [{ type: ViewChild, args: ['compute',] }]
};
class ExpressionEditorConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data;
        }
        else {
            return this.localePipe.transform("component.expressionEditor.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JumpScopeComponent {
    /**
     * @param {?} uistate
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uistate, message, cdr, localeId, resources, localePipe) {
        this.uistate = uistate;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.jumpScope.targetNodeOptions'),
            width: 520,
            height: 460,
            showButtons: true
        };
        this.cols = [
            { title: this.localePipe.transform('component.jumpScope.name'), field: 'Name', width: 60, searchField: 'Name' },
            { title: 'ID', field: 'Id', width: 90, searchField: 'Id' }
        ];
        // ==========================================================
        this.actis = [];
        this.fullActis = [];
        this.defaultacty = '';
        this.categoryListItems = [
            { value: 'OutConnectNode', name: this.localePipe.transform('component.jumpScope.outConnectNode') },
            { value: 'Global', name: this.localePipe.transform('component.jumpScope.global') },
            { value: 'AfterNodes', name: this.localePipe.transform('component.jumpScope.afterNodes') },
            { value: 'SpecifiedSet', name: this.localePipe.transform('component.jumpScope.specifiedSet') }
        ];
        this.category = '';
        this.defaultType = '';
        this.defaultTypeListItems = [
            { value: 'FirstNode', name: this.localePipe.transform('component.jumpScope.firstNode') },
            { value: 'NullNode', name: this.localePipe.transform('component.jumpScope.nullNode') },
            { value: 'SpecifyNode', name: this.localePipe.transform('component.jumpScope.specifyNode') }
        ];
        this.defaultActivity = '';
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.actisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            // 附加节点的帮助后事件，把选中的数据赋给fullActis（此处处理的目的是为了显示Name同时取Id值）
            // console.log(rowData);
            this.fullActis = rowData;
            return of$1({
                closeDialog: true
            });
        });
        this.defaultActivitySelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            // 默认节点的帮助后事件，把选中的id赋给defaultActivity（此处处理的目的是为了显示Name同时取Id值）
            this.defaultActivity = rowData.Id;
            return of$1({
                closeDialog: true
            });
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.category = data.Category;
            this.defaultType = data.DefaultType;
            // 取到DefaultActivity的节点Id，遍历出Name绑定到radiogroup上去（defaultacty）
            /** @type {?} */
            const acty = data.DefaultActivity;
            if (acty != null) {
                for (const act of this.uistate.allActList) {
                    if (act.Id === acty) {
                        this.defaultacty = act.Name;
                    }
                }
            }
            // 取到DestinationActivities的节点Id，遍历出Id和Name绑定到radiogroup上去（actis）
            /** @type {?} */
            const strs = data.DestinationActivities;
            if (strs && strs.length > 0) {
                for (const str of strs) {
                    /** @type {?} */
                    const name = this.uistate.allActList.filter((/**
                     * @param {?} act
                     * @return {?}
                     */
                    act => act.Id === str))[0].Name;
                    // const acti = { Id: str, Name: name };
                    this.actis.push(name);
                }
            }
        }
        else {
            this.category = 'OutConnectNode';
            this.defaultType = 'FirstNode';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validator()) {
            /** @type {?} */
            let value;
            /** @type {?} */
            const list = [];
            // 重新打开设置界面，没有进行节点配置的情况（DefaultActivity）
            if (this.defaultActivity === '' && this.defaultacty !== '') {
                for (const defAct of this.uistate.allActList) {
                    if (defAct.Name === this.defaultacty) {
                        this.defaultActivity = defAct.Id;
                    }
                }
            }
            // 重新打开设置界面，没有进行节点配置的情况（DestinationActivities）
            if (this.fullActis.length === 0 && this.actis.length > 0) {
                for (const act of this.actis) {
                    for (const allAct of this.uistate.allActList) {
                        if (act === allAct.Name) {
                            list.push(allAct.Id);
                        }
                    }
                }
            }
            else if (this.category === 'SpecifiedSet' && this.fullActis && this.fullActis.length > 0) {
                // 附加节点的id传给模型上的DestinationActivities
                this.fullActis.forEach((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => list.push(act.Id)));
            }
            value = {
                Category: this.category,
                DefaultType: this.defaultType,
                DefaultActivity: this.defaultActivity,
                DestinationActivities: list,
            };
            /** @type {?} */
            const object = { value, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.category) {
            this.message.warning(this.localePipe.transform('component.jumpScope.noSetTargetNode'));
            return false;
        }
        // if (this.category === 'SpecifiedSet' && Object.prototype.isPrototypeOf(this.actis)) {
        //   this.message.info('尚未选择附加节点，请了解！');
        //   return false;
        // }
        if (this.defaultType === 'SpecifyNode' && this.defaultacty === '') {
            this.message.warning(this.localePipe.transform('component.jumpScope.noSetSpecifyNode'));
            return false;
        }
        return true;
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    searchDefault(arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        const search = arg.search;
        this.loadDefault(search);
    }
    /**
     * @param {?=} search
     * @return {?}
     */
    loadDefault(search) {
        /** @type {?} */
        const start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        const end = start + this.pageInfo.pageSize;
        /** @type {?} */
        let items = [];
        if (search && search.value) {
            if (search.field === '*') {
                items = this.uistate.allActList.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1));
            }
            else {
                items = this.uistate.allActList.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f[search.field].indexOf(search.value) > -1));
            }
        }
        else {
            items = this.uistate.allActList;
        }
        this.total = items.length;
        // this.items = items;
        if (items) {
            this.allActisTable.componentRef.instance.loadData({
                data: items
            });
        }
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    searchSelect(arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        const search = arg.search;
        this.loadSelect(search);
    }
    /**
     * @param {?=} search
     * @return {?}
     */
    loadSelect(search) {
        /** @type {?} */
        const start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        const end = start + this.pageInfo.pageSize;
        /** @type {?} */
        let items = [];
        if (search && search.value) {
            if (search.field === '*') {
                items = this.uistate.allActList.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1));
            }
            else {
                items = this.uistate.allActList.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f[search.field].indexOf(search.value) > -1));
            }
        }
        else {
            items = this.uistate.allActList;
        }
        this.total = items.length;
        // this.items = items;
        if (items) {
            this.userActis.componentRef.instance.loadData({
                data: items
            });
        }
    }
    /**
     * @return {?}
     */
    deleteRow() {
        if (this.actTable.selectedRow && this.actTable.selectedRow.data) {
            /** @type {?} */
            const i = this.actis.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.id === this.actTable.selectedRow.data.id));
            this.actis.splice(i, 1);
            this.actTable.loadData(this.actis);
        }
        else {
            this.message.info(this.localePipe.transform('component.jumpScope.selectedRow'));
        }
    }
}
JumpScopeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-jump-scope',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"f-utils-fill-flex-column h-100\">\r\n            <!-- \u5141\u8BB8\u9009\u62E9\u76EE\u6807\u8282\u70B9\u5355\u9009\u9879 -->\r\n            <!-- <div class=\"mx-4 mt-3 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" name=\"submitterAutoPass\" type=\"checkbox\"\r\n                        id=\"submitterAutoPass\" [(ngModel)]=\"outConnectNode\" />\r\n                      <label class=\"custom-control-label\" for=\"submitterAutoPass\">\u5141\u8BB8\u9009\u62E9\u76EE\u6807\u8282\u70B9</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n            <!-- \u53EF\u9009\u8282\u70B9\u5C0F\u6807\u9898 -->\r\n            <div class=\"mx-2 mt-1\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">{{'component.jumpScope.optionalNodes'|wfLocale}}</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-2 mx-4 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <!-- \u7AD6\u5217\u679A\u4E3E\u7684category\u9009\u9879 -->\r\n                  <farris-radiogroup [(ngModel)]=\"category\" [data]=\"categoryListItems\" name=\"category\"\r\n                    [horizontal]=false>\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <!-- \u9644\u52A0\u8282\u70B9\u5E2E\u52A9 -->\r\n                <farris-lookup-grid #userActisDialog\r\n                  [items]=\"uistate.allActList | jumpScopePipe:uistate.propertyData.Id \" [columns]=\"cols\"\r\n                  [disabled]=\"!(category === 'SpecifiedSet')\" [resizable]=\"true\" [singleSelect]=\"false\" [idField]=\"'Id'\"\r\n                  [textField]=\"'Name'\" [(ngModel)]=\"actis\" [valueField]=\"'Id'\" [pagination]=\"true\"\r\n                  [pageIndex]=\"pageInfo.pageIndex\" name=\"defaultActivities\" [pageSize]=\"pageInfo.pageSize\" (search)=\"searchSelect($event)\"\r\n                  [pageList]=\"pageInfo.pageList\" [total]=\"total\" [enableClear]=\"false\" title=\"{{'component.jumpScope.listOfAdditional'|wfLocale}}\"\r\n                  [displayType]=\"'List'\" [remoteSearch]='false' [enableToSelect]=\"false\" placeholder=\"{{'component.jumpScope.pleaseSelect1'|wfLocale}}\" [dictPicked]=\"actisSelect\">\r\n                </farris-lookup-grid>\r\n              </div>\r\n            </div>\r\n            <!-- \u9ED8\u8BA4\u8282\u70B9\u5C0F\u6807\u9898 -->\r\n            <div class=\"mx-2 mt-1\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">{{'component.jumpScope.defaultNode'|wfLocale}}</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-2 mx-4 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <!-- \u7AD6\u5217\u679A\u4E3E\u7684DefaultType\u9009\u9879 -->\r\n                  <farris-radiogroup [(ngModel)]=\"defaultType\" [data]=\"defaultTypeListItems\" name=\"defaultType\"\r\n                    [horizontal]=false>\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <!-- \u9ED8\u8BA4\u8282\u70B9\u5E2E\u52A9 -->\r\n                <farris-lookup-grid #allActisTable [items]=\"uistate.allActList | jumpScopePipe:uistate.propertyData.Id \"\r\n                  [columns]=\"cols\" [disabled]=\"!(defaultType === 'SpecifyNode')\" [resizable]=\"true\"\r\n                  [singleSelect]=\"true\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"defaultacty\"\r\n                  [valueField]=\"'Id'\" [pagination]=\"true\" placeholder=\"{{'component.jumpScope.pleaseSelect2'|wfLocale}}\" [pageIndex]=\"pageInfo.pageIndex\"\r\n                  name=\"defaultActivity\" [pageSize]=\"pageInfo.pageSize\" [pageList]=\"pageInfo.pageList\" [total]=\"total\"\r\n                  [enableClear]=\"false\" title=\"{{'component.jumpScope.defaultNodeList'|wfLocale}}\" (search)=\"searchDefault($event)\" [displayType]=\"'List'\" [remoteSearch]='false' [dictPicked]=\"defaultActivitySelect\">\r\n                </farris-lookup-grid>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.jumpScope.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.jumpScope.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n<!-- <ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary mx-2\" (click)=\"actisSelect()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default\" (click)=\"allActisDialog.close()\">\u53D6\u6D88</button>\r\n</ng-template> -->\r\n<!-- <farris-dialog #allActisDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"'\u6D3B\u52A8\u5217\u8868'\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n    <farris-datagrid #allActisTable [columns]=\"cols\"\r\n      [data]=\"uistate.userActList | jumpScopePipe:uistate.propertyData.Id\" [idField]=\"'Id'\" [fit]=\"true\"\r\n      [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\r\n      [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog> -->\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:760px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
            }] }
];
/** @nocollapse */
JumpScopeComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
JumpScopeComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    allActisTable: [{ type: ViewChild, args: ['allActisTable',] }],
    allActisDialog: [{ type: ViewChild, args: ['allActisDialog',] }],
    actTable: [{ type: ViewChild, args: ['actTable',] }],
    lookup: [{ type: ViewChild, args: ['lookup',] }],
    userActis: [{ type: ViewChild, args: ['userActisDialog',] }]
};
class JumpScopeConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @return {?}
     */
    convertTo() {
        return this.localePipe.transform('component.jumpScope.set');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ResubmitEffect = {
    sequence: 'sequence',
    backToMe: 'backToMe',
    backToCurrentNode: 'backToCurrentNode',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BackwardRuleComponent {
    /**
     * @param {?} uiState
     * @param {?} message
     * @param {?} notify
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uiState, message, notify, cdr, localeId, resources, localePipe) {
        this.uiState = uiState;
        this.message = message;
        this.notify = notify;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.nodeType = 'UserActivity';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.backwardRule.backwardRule'),
            width: 760,
            height: 505,
            showButtons: true
        };
        this.displayTestText = [];
        this.fullActs = [];
        this.listItems = [
            { Id: 'InitialActityId', Name: this.localePipe.transform('component.backwardRule.initialActityId') },
            { Id: 'PrecursorActivityId', Name: this.localePipe.transform('component.backwardRule.precursorActivityId') },
            { Id: 'Empty', Name: this.localePipe.transform('component.backwardRule.empty') }
        ];
        this.items = [];
        this.itemsTemp = [];
        this.itemsBackScope = [];
        this.itemsBackScopeTemp = [];
        this.columns = [
            { title: this.localePipe.transform('component.backwardRule.name'), field: 'Name', width: 100, searchField: 'Name' },
            { title: this.localePipe.transform('component.backwardRule.id'), field: 'Id', width: 100, searchField: 'Id' },
        ];
        this.selectAbleChecked = false;
        this.waitReturnChecked = false;
        this.resubmitEffectOptions = [
            { value: ResubmitEffect.sequence, text: this.localePipe.transform('component.backwardRule.sequence') },
            { value: ResubmitEffect.backToMe, text: this.localePipe.transform('component.backwardRule.backToMe') },
            { value: ResubmitEffect.backToCurrentNode, text: this.localePipe.transform('component.backwardRule.backToCurrentNode') },
        ];
        this.dynamicBackWardRuleAbleChecked = false;
        this.targetRef = this.listItems[0].Id;
        this.selectTargetList = new Array();
        this.popover = '1.顺序流转:按照流转线顺序进行流转; 2.返回我:完成策略为抢占：只给驳回人创建任务,完成策略为会签：驳回人与未审批人收到新任务，已审批人员自动审批通过; 3.返回本节点:实际效果受“再次进入节点时，办理人是否是节点已办人员影响”选项的影响';
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            this.targetRef = arg.Id;
            this.displayText = arg.Name;
            if (arg.Id === 'Empty' && !this.selectAbleChecked) {
                this.selectAbleChecked = true;
                this.notify.info(this.localePipe.transform('component.backwardRule.dictPicked'));
            }
            return of$1({ closeDialog: true });
        });
        this.dictPickedTest = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            this.fullActs = arg;
            return of$1({ closeDialog: true });
        });
        this.beforeOpen = (/**
         * @return {?}
         */
        () => {
            this.items = this.deepCloneBackDefine(this.itemsTemp);
            return of$1(true);
        });
        this.beforeOpenTest = (/**
         * @return {?}
         */
        () => {
            this.itemsBackScope = this.deepCloneBackDefine(this.itemsBackScopeTemp);
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.listItems = this.listItems.concat(this.uiState.userActList);
        this.items = this.listItems;
        this.itemsBackScope = this.listItems;
        this.total = this.listItems.length;
        this.totalBackScope = this.listItems.length;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.selectAbleChecked = data.SelectTargetAble;
            if (!data.SelectTargetAble) {
                this.selectTargetList = new Array();
            }
            else {
                this.selectTargetList = data.SelectTargetList;
            }
            this.waitReturnChecked = data.WaitReturn;
            this.dynamicBackWardRuleAbleChecked = data.DynamicBackWardRuleAble;
            this.resubmitEffect = data.ResubmitEffect;
            if (!data.TargetRef) {
                this.targetRef = 'Empty';
            }
            else {
                this.targetRef = data.TargetRef;
            }
            if (this.resubmitEffect === null) {
                this.resubmitEffect = ResubmitEffect.sequence;
            }
            /** @type {?} */
            const strs = data.SelectTargetList;
            if (strs && strs.length > 0) {
                for (const str of strs) {
                    if (this.listItems.filter((/**
                     * @param {?} act
                     * @return {?}
                     */
                    act => act.Id === str))[0]) {
                        /** @type {?} */
                        const name = this.listItems.filter((/**
                         * @param {?} act
                         * @return {?}
                         */
                        act => act.Id === str))[0].Name;
                        this.displayTestText.push(name);
                    }
                    // const acti = { Id: str, Name: name };
                }
            }
            /** @type {?} */
            const act = this.listItems.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.Id === this.targetRef));
            if (act) {
                this.displayText = act.Name;
            }
            else {
                this.displayText = '';
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.message.warning(this.localePipe.transform('component.backwardRule.reEdit'));
                }), 500);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nodeType = this.editorParams.nodeType;
        if (this.nodeType !== 'UserActivity') {
            this.listItems = this.listItems.filter((/**
             * @param {?} i
             * @return {?}
             */
            i => i.Id !== 'Empty'));
            this.items = this.listItems;
            this.total = this.listItems.length;
        }
        this.itemsBackScope = this.listItems.filter((/**
         * @param {?} i
         * @return {?}
         */
        i => i.Id !== 'Empty' && i.Id !== 'PrecursorActivityId'));
        this.totalBackScope = this.itemsBackScope.length;
        this.itemsTemp = this.deepCloneDefine(this.items);
        this.itemsBackScopeTemp = this.deepCloneDefine(this.itemsBackScope);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    selectAbleClick() {
        if (this.uiState.propertyData.ClrTypeID === 'wf.UserActivity'
            && this.uiState.propertyData.CompleteStrategy !== this.uiState.completeIterator[0].key
            && this.selectAbleChecked === true) {
            this.message.info(this.localePipe.transform('component.backwardRule.selectAbleClick'), (/**
             * @return {?}
             */
            () => {
                this.selectAbleChecked = false;
            }));
        }
        if (this.selectAbleChecked == false) {
            this.displayTestText = [];
        }
    }
    /**
     * @return {?}
     */
    waitReturnClick() {
        this.waitReturnChecked = !this.waitReturnChecked;
    }
    /**
     * @return {?}
     */
    dynamicBackWardRuleAbleClick() {
        this.dynamicBackWardRuleAbleChecked = !this.dynamicBackWardRuleAbleChecked;
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const list = [];
        // 重新打开设置界面，没有进行节点配置的情况（DestinationActivities）
        if (this.fullActs.length === 0 && this.displayTestText.length > 0) {
            for (const act of this.displayTestText) {
                for (const allAct of this.listItems) {
                    if (act === allAct.Name) {
                        list.push(allAct.Id);
                    }
                }
            }
        }
        else if (this.fullActs && this.fullActs.length > 0) {
            // 附加节点的id传给模型上的DestinationActivities
            this.fullActs.forEach((/**
             * @param {?} act
             * @return {?}
             */
            act => {
                if (this.uiState.userActList.some((/**
                 * @param {?} u
                 * @return {?}
                 */
                u => u.Id == act.Id))) {
                    list.push(act.Id);
                }
            }));
        }
        /** @type {?} */
        const backWardRule = {
            TargetRef: this.getTargetRef(),
            SelectTargetAble: this.selectAbleChecked,
            WaitReturn: this.waitReturnChecked,
            DynamicBackWardRuleAble: this.dynamicBackWardRuleAbleChecked,
            SelectTargetList: list,
            ResubmitEffect: this.resubmitEffect
        };
        /** @type {?} */
        const object = { value: backWardRule, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pagerChanged(arg) {
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.load(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pagerChangedBackScope(arg) {
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.loadBackScope(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pageSizeChange(arg) {
        console.log(arg);
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.load(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pageSizeChangeBackScope(arg) {
        console.log(arg);
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.loadBackScope(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    search(arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        const search = arg.search;
        this.load(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    searchBackScope(arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        const search = arg.search;
        this.loadBackScope(search);
    }
    /**
     * @param {?=} search
     * @return {?}
     */
    load(search) {
        /** @type {?} */
        const start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        const end = start + this.pageInfo.pageSize;
        /** @type {?} */
        let items = [];
        if (search) {
            if (search.field === '*') {
                items = this.listItems.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1));
            }
            else {
                items = this.listItems.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f[search.field].indexOf(search.value) > -1));
            }
        }
        else {
            items = this.listItems;
        }
        this.total = items.length;
        this.items = items;
        this.hlp.componentRef.instance.loadData({
            data: this.items
        });
    }
    /**
     * @param {?=} search
     * @return {?}
     */
    loadBackScope(search) {
        /** @type {?} */
        const start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        const end = start + this.pageInfo.pageSize;
        /** @type {?} */
        let itemsBackScope = [];
        if (search) {
            if (search.field === '*') {
                itemsBackScope = this.listItems.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1));
            }
            else {
                itemsBackScope = this.listItems.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f[search.field].indexOf(search.value) > -1));
            }
        }
        else {
            itemsBackScope = this.listItems;
        }
        this.totalBackScope = itemsBackScope.length;
        this.itemsBackScope = itemsBackScope;
        this.hlpScope.componentRef.instance.loadData({
            data: this.itemsBackScope
        });
    }
    /**
     * @private
     * @return {?}
     */
    getTargetRef() {
        if (this.targetRef === 'Empty') {
            return '';
        }
        else {
            return this.targetRef;
        }
    }
    //为了打开后仍然显示最初数据，而不是过滤后的数据
    /**
     * @param {?} target
     * @return {?}
     */
    deepCloneDefine(target) {
        /** @type {?} */
        let result = [];
        target.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => result.push(JSON.stringify(t))));
        return result;
    }
    /**
     * @param {?} target
     * @return {?}
     */
    deepCloneBackDefine(target) {
        /** @type {?} */
        let result = [];
        target.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => result.push(JSON.parse(t))));
        return result;
    }
}
BackwardRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'procDesigner-backward-rule',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.backwardRule.rejectedTo:' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"padding-right: 30px\">\r\n                  <farris-lookup-grid #hlp [items]=\"items\" [columns]=\"columns\" [resizable]=\"true\" [singleSelect]=\"true\"\r\n                    [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"displayText\" [valueField]=\"'Id'\"  [beforeOpen] = \"beforeOpen\"\r\n                    [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\" [pageSize]=\"pageInfo.pageSize\"\r\n                    [pageList]=\"pageInfo.pageList\" [total]=\"total\" title=\"{{'component.backwardRule.title' | wfLocale}}\" [displayType]=\"'List'\"\r\n                    [dictPicked]=\"dictPicked\" [remoteSearch]='false' (pagerChanged)=\"pagerChanged($event)\"\r\n                    (search)=\"search($event)\" [enableClear]=\"false\" (pageSizeChange)=\"pageSizeChange($event)\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"nodeType==='UserActivity'\">\r\n            <div class=\"col-12 farris-group-auto my-3\">\r\n              <div class=\"farris-group-wrap\" style=\"padding-left: 2.75rem!important\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" name=\"selectAble\" type=\"checkbox\" id=\"selectAble\"\r\n                        [(ngModel)]=\"selectAbleChecked\" (change)=\"selectAbleClick()\" />\r\n                      <label class=\"custom-control-label\" for=\"selectAble\">{{'component.backwardRule.dynamicSelection' | wfLocale}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3 pr-5\" *ngIf=\"selectAbleChecked\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.backwardRule.backScope' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"padding-right: 30px;\">\r\n                    <farris-lookup-grid #hlpScope [items]=\"itemsBackScope\" [columns]=\"columns\" [disabled]=\"!(selectAbleChecked)\"  [beforeOpen] = \"beforeOpenTest\"\r\n                      [resizable]=\"true\" [singleSelect]=\"false\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"displayTestText\" [valueField]=\"'Id'\"\r\n                      [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\" [pageSize]=\"pageInfo.pageSize\"\r\n                      [pageList]=\"pageInfo.pageList\" [total]=\"totalBackScope\" title=\"{{'component.backwardRule.title' | wfLocale}}\" [displayType]=\"'List'\"\r\n                      [dictPicked]=\"dictPickedTest\" [remoteSearch]='false' (pagerChanged)=\"pagerChangedBackScope($event)\"\r\n                      placeholder=\"{{'component.backwardRule.defaultPrompt' | wfLocale}}\" [enableToSelect]=\"false\"\r\n                      (search)=\"searchBackScope($event)\" [enableClear]=\"false\" (pageSizeChange)=\"pageSizeChangeBackScope($event)\">\r\n                    </farris-lookup-grid>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.backwardRule.resubmitEffectOptions' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"padding-right: 30px\">\r\n                    <farris-combo-list [data]=\"resubmitEffectOptions\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                      [idField]=\"'value'\" [(ngModel)]=\"resubmitEffect\" style=\"flex: 1;\" [enableClear]=\"false\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\"></span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"padding-right: 30px;border-radius:15px\">\r\n                    <div class=\"page-friendly-reminder\" style=\"background:#ECF4FF;padding: 0.5rem!important;border-radius:6px\">\r\n                      <div class=\"reminder-message\">\r\n                        <span class=\"reminder-title\">\r\n                          <span class=\"f-icon f-icon-info\">\r\n                          </span>\r\n                          <span class=\"reminder-name\" style=\"padding-left: 0.25rem\">\r\n                          </span>\r\n                        </span>\r\n                        <span class=\"message\"><br/>{{'component.backwardRule.popover1' | wfLocale}}<br/>\r\n                          {{'component.backwardRule.popover2' | wfLocale}}<br/>\r\n                          {{'component.backwardRule.popover3' | wfLocale}}<br/>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3\">\r\n              <div class=\"farris-group-wrap\" style=\"padding-left: 2.75rem!important\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" name=\"dynamicBackWardRuleAble\" type=\"checkbox\"\r\n                        id=\"dynamicBackWardRuleAble\" [checked]=\"dynamicBackWardRuleAbleChecked\"\r\n                        (change)=\"dynamicBackWardRuleAbleClick()\" />\r\n                      <label class=\"custom-control-label\" for=\"dynamicBackWardRuleAble\">{{'component.backwardRule.allowModification' | wfLocale}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.backwardRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.backwardRule.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".item-header{padding:1rem}.item{padding:.5rem 5rem}"]
            }] }
];
/** @nocollapse */
BackwardRuleComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: NotifyService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
BackwardRuleComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }],
    nodeType: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    hlp: [{ type: ViewChild, args: ['hlp',] }],
    hlpScope: [{ type: ViewChild, args: ['hlpScope',] }]
};
class BackwardRuleConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return this.localePipe.transform('component.backwardRule.set');
        }
        return this.localePipe.transform('component.backwardRule.notSet');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerUIState {
    /**
     * @param {?} uiState
     */
    constructor(uiState) {
        this.uiState = uiState;
        this.performersList = [];
        this.typeCollection = [
            { text: '用户', value: 'wf.UserParticipantExpression' },
            { text: '变量参与者', value: 'wf.VariableParticipantExpression' },
            { text: '岗位', value: 'wf.PositionParticipantExpression' },
            { text: '构件参与者', value: 'wf.ComponentParticipantExpression' },
            { text: '汇报关系', value: 'wf.ReportingLineParticipantExpression' },
            { text: '矩阵', value: 'wf.MatrixParticipantExpression' },
            { text: '历史活动办理人', value: 'wf.ActivityExecutorParticipantExpression' },
            { text: '单位/部门', value: 'wf.OrganizationParticipantExpression' }
        ];
        this.performerInfo = {
            performers: [],
            variablePerformers: [],
            components: [],
            reportingLines: [],
            matrixParticipants: [],
            activityExecutors: [],
            organizationParticipants: [],
            options: null,
            isAllScope: false
        };
        if (this.uiState.scene === 'inSuite') {
            this.typeCollection = [
                { text: '用户', value: 'wf.UserParticipantExpression' },
                { text: '变量参与者', value: 'wf.VariableParticipantExpression' },
                { text: '角色', value: 'wf.PositionParticipantExpression' },
                { text: '构件参与者', value: 'wf.ComponentParticipantExpression' },
                { text: '汇报关系', value: 'wf.ReportingLineParticipantExpression' },
                { text: '矩阵', value: 'wf.MatrixParticipantExpression' },
                { text: '历史活动办理人', value: 'wf.ActivityExecutorParticipantExpression' },
                { text: '单位/部门', value: 'wf.OrganizationParticipantExpression' }
            ];
        }
        else {
            this.typeCollection = [
                { text: '用户', value: 'wf.UserParticipantExpression' },
                { text: '变量参与者', value: 'wf.VariableParticipantExpression' },
                { text: '岗位', value: 'wf.PositionParticipantExpression' },
                { text: '构件参与者', value: 'wf.ComponentParticipantExpression' },
                { text: '汇报关系', value: 'wf.ReportingLineParticipantExpression' },
                { text: '矩阵', value: 'wf.MatrixParticipantExpression' },
                { text: '历史活动办理人', value: 'wf.ActivityExecutorParticipantExpression' },
                { text: '单位/部门', value: 'wf.OrganizationParticipantExpression' }
            ];
        }
    }
    /**
     * @return {?}
     */
    clearPerformer() {
        this.performerInfo.performers = new Array();
        this.performerInfo.components = new Array();
        this.performerInfo.reportingLines = new Array();
        this.performerInfo.matrixParticipants = new Array();
        this.performerInfo.activityExecutors = new Array();
        this.performerInfo.organizationParticipants = new Array();
        this.performersList = new Array();
    }
}
PerformerUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PerformerUIState.ctorParameters = () => [
    { type: ProcessDesignerUIState }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerRepository {
}
PerformerRepository.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerViewModel {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     */
    constructor(resolver, injector, modalService) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
    }
}
PerformerViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PerformerViewModel.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserPerformerEntity extends PerformerEntity {
    // 固定用户还是变量参与者
    /**
     * @param {?=} id
     * @param {?=} name
     * @param {?=} type
     */
    constructor(id, name, type) {
        super(id, name, type);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerConfigService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.lookupConfig = new ReplaySubject();
        // let rootPath = '';
        // try {
        //     rootPath = (window as any).gspframeworkService.common.getBasePath.get();
        // } catch (error) {
        // }
        // this.http.get(rootPath + '/platform/runtime/wf/web/wf-proc-designer/assets/config/performerlookupconfig.json').subscribe((data) => {
        this.http.get('/platform/runtime/wf/web/wf-proc-designer/assets/config/performerlookupconfig.json').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.lookupConfig.next(data);
        }));
    }
    /**
     * @return {?}
     */
    getLookupConfig() {
        return this.lookupConfig.asObservable();
    }
}
PerformerConfigService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PerformerConfigService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserPerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} injector
     * @param {?} lookupConfig
     * @param {?} ngZone
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?=} http
     * @param {?=} message
     */
    constructor(designerUIState, expr, injector, lookupConfig, ngZone, cdr, localeId, resources, localePipe, http, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.injector = injector;
        this.lookupConfig = lookupConfig;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.http = http;
        this.message = message;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.bindingData = {};
        this.farrisUserHelpShowTabIds = 'recent,organization';
        this.activeTabId = 'organization';
        this.selectedUserIds = '';
        this.userTypeCollection = [
            { text: this.localePipe.transform('component.userPerformer.regularUser'), value: 'user' },
            { text: this.localePipe.transform('component.userPerformer.variablePart'), value: 'variable' }
        ];
        this.userType = this.userTypeCollection[0].value;
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.userPerformer.administrative_organization'), value: 'Administrative_organization' }
        ];
        this.curOrgType = this.variableOrgTypes[0].value;
        this.hasAdminOrg = false;
        this.userTypeButtonNeedShow = false; // 用户类型单选按钮是否需要显示
        // 用户类型单选按钮是否需要显示
        this.multiSelect = true; //选人组件是否支持多选（编辑用户时只能单选）
        this.users = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.hasAdminOrg = data;
            // inSuite场景，变量参与者场景下显示用户类型
            if (this.designerUIState.scene === 'inSuite' && this.userType === 'variable') {
                this.userTypeButtonNeedShow = true;
            }
            else {
                this.userTypeButtonNeedShow = data && (this.userType === 'variable' || this.userType === null);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.bindingData = {};
        this.users = [];
        this.selectedUserIds = '';
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.userPerformer.administrative_organization'), value: 'Administrative_organization' }
        ];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        // 固定用户
        if (this.userType === this.userTypeCollection[0].value) {
            this.lookupConfig.getLookupConfig().subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                // 项目配置了自己的帮助时
                if (re.user && re.user.impl) {
                    System.import(re.user.impl)
                        .then((/**
                     * @param {?} moduleFactorys
                     * @return {?}
                     */
                    (moduleFactorys) => {
                        /** @type {?} */
                        const moduleFactory = Object.values(moduleFactorys)[0];
                        /** @type {?} */
                        const moduleRef = moduleFactory.create(this.injector);
                        moduleRef.instance.showHelp().subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        data => {
                            if (data && data.length > 0) {
                                this.users = data.map((/**
                                 * @param {?} u
                                 * @return {?}
                                 */
                                u => {
                                    /** @type {?} */
                                    const user = new UserPerformerEntity(u.id, u.name, 'wf.UserParticipantExpression');
                                    user.orgId = u.orgId;
                                    user.orgName = u.orgName;
                                    user.userType = this.userTypeCollection[0].value;
                                    return user;
                                }));
                            }
                        }));
                    }));
                }
                else { // 加载默认帮助
                    this.userHelp.farrisDialogshow();
                }
            }));
        }
        else {
            this.showExprHelp();
        }
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    usersSelect(event) {
        this.users = event.data.map((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            /** @type {?} */
            const user = new UserPerformerEntity(u.userId, u.name, 'wf.UserParticipantExpression');
            user.orgId = u.defaultOrgId;
            user.orgName = u.orgAllPath;
            user.userType = this.userTypeCollection[0].value;
            return user;
        }));
    }
    /**
     * @return {?}
     */
    showExprHelp() {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (this.users.length > 0) {
            this.expr.addExpressionText(this.users[0].performerId);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            /** @type {?} */
            const user = new UserPerformerEntity(expressioninfo, '', 'wf.UserParticipantExpression');
            user.tag = 'expression';
            user.performerName = this.variableParticipantName(expressioninfo);
            user.userType = this.userTypeCollection[1].value;
            if (this.variableParticipantName(expressioninfo) === '') {
                this.message.error(this.localePipe.transform('component.userPerformer.cantUseContext'));
                this.users = [];
            }
            else {
                this.users = [user];
            }
            for (const c of this.designerUIState.participantContext) { // 根据表达式中的函数名判断是否使用的是上下文变量,除三种特殊上下文变量其余放开限制
                if (user.performerId.indexOf(c.key) >= 0) {
                    this.variableOrgTypes = [
                        { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' }
                    ];
                    break;
                }
                else {
                    this.variableOrgTypes = [
                        { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' },
                        { name: this.localePipe.transform('component.userPerformer.administrative_organization'), value: 'Administrative_organization' }
                    ];
                }
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.users.map((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            if (user.orgId === undefined) {
                user.orgType = this.curOrgType;
                return user;
            }
        }));
        if (!this.condition) {
            this.condition = '';
        }
        if (this.condition || this.condition === '') {
            this.users = this.users.map((/**
             * @param {?} user
             * @return {?}
             */
            user => {
                user.condition = this.condition;
                return user;
            }));
        }
        return this.users;
    }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                if (this.curOrgType !== 'Sys') { // 行政人员类型不允许使用上下文变量
                    return '';
                }
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return JSON.parse(expr).expr;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.curOrgType = this.variableOrgTypes[0].value;
        }
        else {
            this.curOrgType = this.variableOrgTypes[1].value;
        }
    }
}
UserPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-user-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\" *ngIf=\"userType === 'user'\">{{'component.userPerformer.user'|wfLocale}}</span>\r\n                  <span class=\"farris-label-text\" *ngIf=\"userType === 'variable'\">{{'component.userPerformer.variable'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div *ngIf=\"multiSelect\" class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                        (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.userPerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<farris-personnel-selector #userHelp style=\"display: none\" [readonly]=\"false\" [width]=\"'100%'\"\r\n  [multiSelect]=\"multiSelect\" [includeJobLeavers]=\"false\" [includeCurrentUser]=\"true\" [unSelectedUserIds]=\"users | usersId \"\r\n  [enableChildHierarchy]=\"true\" [showTabIds]=\"farrisUserHelpShowTabIds\" [activeTabId]=\"activeTabId\"\r\n  [userIds]=\"selectedUserIds\" [personnelOrderField]=\"'orderby_ordernum'\" [userTypeMode]=\"'WfMode'\"\r\n  [includeStopUser]=\"false\" (selectionsChange)=\"usersSelect($event)\">\r\n</farris-personnel-selector>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
UserPerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: Injector },
    { type: PerformerConfigService },
    { type: NgZone },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: HttpService },
    { type: MessagerService }
];
UserPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    userHelp: [{ type: ViewChild, args: [PersonnelSelectorComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentPerformerService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @param {?} pageIndex
     * @param {?} pageSiza
     * @param {?=} search
     * @return {?}
     */
    getLookUpData(helpId, su, pageIndex, pageSiza, search) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/dtProcDefs/getHelpData?helpId=${helpId}&pageIndex=${pageIndex}&pageSize=${pageSiza}`;
        if (search) {
            url += `&searchValue=${JSON.stringify(search)}`;
        }
        return this.http.get(url);
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    getHelpMetaData(helpId, su) {
        /** @type {?} */
        const url = `/api/runtime/lcm/v1.0/rt-metadatas/${helpId}`;
        return this.http.get(url);
    }
}
ComponentPerformerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComponentPerformerService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentPerformer {
    constructor() {
        this.id = ProcessDeUtil.GenerateElementId();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentPerformerComponent {
    /**
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} sessionSrc
     * @param {?} modalService
     * @param {?} componentService
     * @param {?} ngZone
     * @param {?} service
     * @param {?} util
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerState, expr, resolver, injector, sessionSrc, modalService, componentService, ngZone, service, util, http, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.ngZone = ngZone;
        this.service = service;
        this.util = util;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.showClearButton = false;
        this.helpId = '';
        this.lookupDisplayText = '';
        this.columns = [
            { field: 'code', width: 60, title: this.localePipe.transform('component.componentPerformer.code') },
            { field: 'name', width: 60, title: this.localePipe.transform('component.componentPerformer.name') },
            { field: 'description', width: 60, title: this.localePipe.transform('component.componentPerformer.description'), showTips: true },
            {
                field: 'valueText', width: 100, title: this.localePipe.transform('component.componentPerformer.valueText'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            // 清理valueText，也应该清理value
                            e.rowData.value = '';
                            for (const p of this.component.actualParameters) {
                                if (p.code === e.rowId) {
                                    p.value = '';
                                }
                            }
                        })
                    }
                }
            }
        ];
        this.helpInfo = {
            helpId: '',
            su: '',
            columns: [],
            displayType: 'List',
            items: [],
            pageInfo: {
                pageIndex: 1,
                pageList: [10, 20, 30, 50],
                pageSize: 20
            },
            search: { category: 'all' },
            title: this.localePipe.transform('component.componentPerformer.help'),
            total: 100,
            fieldInfo: {
                idField: 'id',
                textField: 'name',
                valueField: 'id'
            }
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            this.curParameter = rowData;
            switch (rowData.fetchValueMode) {
                case ParameterFetchValueMode.express:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                for (const p of this.component.actualParameters) {
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.none:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                for (const p of this.component.actualParameters) {
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.const:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.enum:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.help:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                this.cell = e;
                                this.helpInfo.helpId = ((/** @type {?} */ (rowData.fetchValueSetting))).helpId;
                                this.helpInfo.su = ((/** @type {?} */ (rowData.fetchValueSetting))).serviceUnit;
                                this.helpInfo.pageInfo = {
                                    pageIndex: 1,
                                    pageList: [10, 20, 30, 50],
                                    pageSize: 20
                                };
                                this.helpInfo.search = { category: 'all' };
                                this.getHelpInfo();
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                for (const p of this.component.actualParameters) {
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            })
                        }
                    };
                    break;
            }
            return of$1(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of$1(true);
        });
        /**
         * 帮助前事件
         * @param e
         * @return
         */
        this.onDictPicking = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.instance.http = {
                getData: (/**
                 * @param {?} url
                 * @param {?} params
                 * @return {?}
                 */
                (url, params) => {
                    /** @type {?} */
                    const _url = `/api/runtime/bcc/v1.0/help/data/${this.helpInfo.helpId}`;
                    params = Object.assign(params || {}, { withSpecificField: true });
                    return this.http.put(_url, params).pipe(catchError((/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        if (e.error && e.error.innerMessage && e.error.innerMessage.indexOf('Could not find metadata') > -1) {
                            e.error.Message = this.localePipe.transform('component.componentPerformer.serverSideNotFound');
                        }
                        return throwError(e);
                    })));
                })
            };
            return of$1(true);
        });
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            if (this.cell) {
                this.cell.formControl.setValue(this.util.getValue(rowData, this.helpInfo.fieldInfo.textField));
                this.cell.instance.cd.detectChanges();
                this.cell.rowData.value = this.util.getValue(rowData, this.helpInfo.fieldInfo.valueField);
                for (const p of this.component.actualParameters) {
                    if (p.code === this.cell.rowId) {
                        p.value = this.util.getValue(rowData, this.helpInfo.fieldInfo.valueField);
                    }
                }
                return of$1(true);
            }
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set component(cmp) {
        if (cmp && cmp.methodCode) {
            this.service.getHelpMetaData(cmp.metadataId, '').subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                /** @type {?} */
                const c = JSON.parse(re.content);
                /** @type {?} */
                const operation = c.operations.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.code === cmp.methodCode));
                if (operation) {
                    cmp.actualParameters = cmp.actualParameters.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        /** @type {?} */
                        const p = operation.parameters.find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        i => i.code === a.code));
                        if (p) {
                            return {
                                code: a.code,
                                name: p.name,
                                value: a.value,
                                valueText: a.valueText ? a.valueText : a.value,
                                description: p.description,
                                tag: a.tag,
                                fetchValueMode: p.fetchValueMode,
                                fetchValueSetting: p.fetchValueSetting
                            };
                        }
                        else {
                            throw new Error(this.localePipe.transform('component.componentPerformer.componentMethod'));
                        }
                    }));
                    this.componentPerformer = cmp;
                }
                else {
                    throw new Error(this.localePipe.transform('component.componentPerformer.methodNotExist'));
                }
            }));
        }
        else {
            this.componentPerformer = new ComponentPerformer();
        }
    }
    /**
     * @return {?}
     */
    get component() {
        return this.componentPerformer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectChanged(event) {
        this.curParameter = event.data;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    endEdit(e) {
        // 文本框编辑同时修改value
        if (e.rowData.fetchValueMode === ParameterFetchValueMode.const || e.rowData.fetchValueMode === ParameterFetchValueMode.enum) {
            this.component.actualParameters[e.rowIndex].value = this.component.actualParameters[e.rowIndex].valueText;
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.componentPerformer.name = '';
        this.componentPerformer.metadataId = '';
        this.componentPerformer.methodCode = '';
        this.componentPerformer.methodName = '';
        this.componentPerformer.condition = '';
        this.componentPerformer.actualParameters = new Array();
    }
    /**
     * @return {?}
     */
    selectComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            try {
                /** @type {?} */
                const meta = $event.metadata;
                this.openComponentSelectorNew(meta.id, this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error(this.localePipe.transform('component.componentPerformer.errorObtaining') + $event);
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.componentPerformer.componentSelection'),
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.component.name = result.name;
                    this.component.metadataId = result.id;
                    this.component.methodCode = result.operations[0].code;
                    this.component.methodName = result.operations[0].name;
                    this.component.actualParameters = [];
                    if (result.operations[0].parameters && result.operations[0].parameters.length > 0) {
                        this.component.actualParameters = result.operations[0].parameters
                            .map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        (p) => (/** @type {?} */ (({
                            code: p.code,
                            name: p.name,
                            value: '',
                            valueText: '',
                            description: p.description,
                            fetchValueMode: p.fetchValueMode,
                            fetchValueSetting: p.fetchValueSetting
                        })))));
                    }
                }
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d) {
                e.formControl.setValue(d);
                e.instance.cd.detectChanges();
                e.rowData.value = d;
                for (const p of this.component.actualParameters) {
                    if (p.code === e.rowId) {
                        p.value = d;
                    }
                }
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.grid.endCellEdit();
        console.log(this.component);
        return this.component;
    }
    /**
     * @private
     * @return {?}
     */
    getHelpInfo() {
        // 2023年6月29日 此处获取帮助的结构
        this.service.getHelpMetaData(this.helpInfo.helpId, this.helpInfo.su).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re) {
                /** @type {?} */
                const meta = re;
                /** @type {?} */
                const help = (/** @type {?} */ (JSON.parse(meta.content)));
                this.helpInfo.columns = help.dataSource.columns;
                this.helpInfo.displayType = help.displayType;
                this.helpInfo.fieldInfo = {
                    idField: help.idField,
                    valueField: help.valueField,
                    textField: help.textField
                };
            }
            else {
                throw new Error(this.localePipe.transform('component.componentPerformer.metadataNotExist'));
            }
        }));
        // 打开帮助
        this.lookup.showDialog();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    pagerChanged(data) {
        if (data) {
            this.helpInfo.pageInfo.pageIndex = data.pageIndex;
            this.helpInfo.pageInfo.pageSize = data.pageSize;
            this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)
                .subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.helpInfo.items = re.items;
                this.helpInfo.title = re.title;
                this.helpInfo.total = re.total;
                this.lookup.loadData(re);
            }));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    search(data) {
        console.log(data);
        this.helpInfo.search = { category: 'search' };
        if (data) {
            /** @type {?} */
            const searchInfo = {
                searchField: data.field || data.search.field,
                searchValue: data.value || data.search.value
            };
            this.helpInfo.search = Object.assign(this.helpInfo.search, searchInfo);
            this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)
                .subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.helpInfo.items = re.items;
                this.helpInfo.title = re.title;
                this.helpInfo.total = re.total;
                this.lookup.loadData(re);
            }));
        }
    }
}
ComponentPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-component-performer',
                template: "\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100 mx-3\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n        <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n          <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.componentPerformer.componentName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <input type=\"text\" class=\"k-textbox form-control\" name=\"name\"\r\n                    [(ngModel)]=\"component.name\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"farris-form-controls-inline farris-form-auto\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.componentPerformer.componentSelect'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"component.methodCode\" name=\"methodCode\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectComponent()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <farris-tabs class=\"f-utils-fill mx-3\" #params [value]=\"'params'\" [contentFill]=\"true\">\r\n        <farris-tab title=\"{{'component.componentPerformer.parameterList' | wfLocale}}\" [id]=\"'params'\">\r\n          <ng-template #content>\r\n            <div class=\"f-utils-fill-flex-column h-100\">\r\n              <farris-datagrid #grid [data]=\"component.actualParameters\" [columns]=\"columns\" [idField]=\"'code'\" [fit]=\"true\"\r\n                [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n                [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" [beforeEdit]=\"beforeEdit\"\r\n                (selectChanged)=\"selectChanged($event)\" (endEdit)=\"endEdit($event)\"></farris-datagrid>\r\n            </div>\r\n          </ng-template>\r\n        </farris-tab>\r\n      </farris-tabs>\r\n    </div>\r\n    </div>\r\n\r\n<!-- <farris-lookup-grid style=\"display: none;\" [items]=\"helpInfo.items\" [columns]=\"helpInfo.columns\" [resizable]=\"true\"\r\n  [singleSelect]=\"true\" [idField]=\"helpInfo.fieldInfo.idField\" [textField]=\"helpInfo.fieldInfo.textField\"\r\n  [valueField]=\"helpInfo.fieldInfo.valueField\" [pagination]=\"true\" [pageIndex]=\"helpInfo.pageInfo.pageIndex\"\r\n  [pageSize]=\"helpInfo.pageInfo.pageSize\" [pageList]=\"helpInfo.pageInfo.pageList\" [total]=\"helpInfo.total\"\r\n  title=\"helpInfo.title\" [displayType]=\"helpInfo.displayType\" [dictPicked]=\"dictPicked\" [remoteSearch]='false'\r\n  (pagerChanged)=\"pagerChanged($event)\" (search)=\"search($event)\">\r\n</farris-lookup-grid> -->\r\n<!-- 2023-6-28 DD\u9700\u6C42\uFF0C\u76F4\u63A5\u7528\u5E2E\u52A9id\u6253\u5F00\u800C\u4E0D\u662F\u81EA\u5DF1\u7EC4\u7EC7\u6570\u636E\u6E90\uFF0C\u4EE5\u5B9E\u73B0\u5206\u5C42\u52A0\u8F7D -->\r\n<farris-lookup-grid\r\nstyle=\"display: none;\"\r\n[uri]=\"'testLookupUri'\"\r\n[displayType]=\"'List'\"\r\n[idField]=\"'id'\"\r\n[pagination]=\"true\"\r\n[editable]=\"false\"\r\n[singleSelect]=\"true\"\r\n[textField]=\"'name'\"\r\n[helpId]=\"helpId\"\r\n[dictPicking]=\"onDictPicking\"\r\n[dictPicked]=\"dictPicked\"\r\n>\r\n</farris-lookup-grid>\r\n",
                providers: [
                    ComponentPerformerService,
                    WfLocalePipe
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ComponentPerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: SessionService },
    { type: BsModalService },
    { type: CommonComponentUiRTService },
    { type: NgZone },
    { type: ComponentPerformerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ComponentPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    component: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReportingLineDataEntity extends PerformerEntity {
    /**
     * @param {?=} id
     * @param {?=} name
     * @param {?=} type
     */
    constructor(id, name, type) {
        super(id, name, type);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfReportDefHelpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            let query = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    query += `"codeOrNameLike":"${searchValue.searchValue}",`;
                }
                else {
                    query += `"${searchValue.searchField}":"${searchValue.searchValue}",`;
                }
            }
            if (customData.filter) {
                /** @type {?} */
                const keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    for (const key of keys) {
                        if (customData.filter[key]) {
                            query += `"${key}":"${customData.filter[key]}",`;
                        }
                    }
                }
            }
            if (query.substr(query.length - 1, 1) === ',') {
                query = query.substring(0, query.length - 1);
            }
            query += '}';
            query = encodeURIComponent(query);
            query += `&pageIndex=${index}&pageSize=${size}`;
            url += '?pageFilter=' + query;
        }
        else {
            url += `?pageIndex=${index}&pageSize=${size}`;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }))));
    }
}
WfReportDefHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WfReportDefHelpService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfReportDefHelpComponent {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
        /**
         * 宽度
         */
        this.width = 550;
        /**
         * 只读
         */
        this.disabled = false;
        /**
         * 是否单选
         */
        this.singleSelect = true;
        /**
         * 是否分页，默认true
         */
        this.pagination = true;
        /**
         * 首次加载第几页，默认1
         */
        this.pageIndex = 1;
        /**
         * 每页加载数，默认20
         */
        this.pageSize = 20;
        /**
         * 过滤条件
         */
        this.filter = {};
        // @Input() beforeClose: (selectData: any) => Observable<PickedResult>;
        /**
         * 帮助选择后事件
         */
        this.afterConfirm = new EventEmitter();
        this.dialogClosed = new EventEmitter();
        this.clear = new EventEmitter();
        this.columns = [];
        /**
         * 帮助前事件,强行传递过滤条件
         */
        this.beforeOpen = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            // 把过滤数据和当前的数据传递到service层
            return of$1({
                showDialog: true, data: {
                    filter: this.filter
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            this.afterConfirm.next(arg);
            return of$1({ closeDialog: true });
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { title: this.localePipe.transform('component.reportingLine.code'), field: 'code', width: '80', searchField: 'code', },
            { title: this.localePipe.transform('component.reportingLine.name'), field: 'name', width: '100', searchField: 'name', }
        ];
        // this.dataUri = this.uiState.dataUri;
        this.dataUri = '/api/runtime/wf/v1.0/reportingLineDefinitions/query';
        // 必须要有，否则初始选中不起作用
        this.lookUp.mapFields = { id: 'id', name: 'name' };
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    afterClear(arg) {
        this.clear.next(arg);
    }
    /**
     * 手动显示帮助
     * @return {?}
     */
    showHelp() {
        this.lookUp.showDialog();
    }
}
WfReportDefHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-wf-report-def-help',
                template: `
    <farris-lookup-grid #lookup
      [disabled]="disabled"
      [editable]="false"
      [bindingData]="bindingData"
      [(ngModel)]="displayTxt"
      [columns]="columns"
      [singleSelect]="singleSelect"
      title="title"
      [displayType]="'List'"
      [uri]="dataUri"
      [idField]="'id'"
      [pageIndex]="pageIndex"
      [pageSize]="pageSize"
      [pagination]="pagination"
      [valueField]="'id'"
      [textField]="'name'"
      (clear)="afterClear($event)"
      [dialogWidth]="width"
      [dictPicking]="beforeOpen"
      [dictPicked]="dictPicked">
    </farris-lookup-grid>
  `,
                providers: [{ provide: ServerSideToken, useClass: WfReportDefHelpService }]
            }] }
];
/** @nocollapse */
WfReportDefHelpComponent.ctorParameters = () => [
    { type: WfLocalePipe }
];
WfReportDefHelpComponent.propDecorators = {
    title: [{ type: Input }],
    width: [{ type: Input }],
    sourceType: [{ type: Input }],
    disabled: [{ type: Input }],
    singleSelect: [{ type: Input }],
    pagination: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    displayTxt: [{ type: Input }],
    bindingData: [{ type: Input }],
    filter: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    dialogClosed: [{ type: Output }],
    clear: [{ type: Output }],
    lookUp: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReportingLineComponent {
    /**
     * @param {?} http
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} ngZone
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, designerUIState, expr, ngZone, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.treeFilter = '';
        this.display = 'none';
        this.typeReadOnly = false;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.defName = '';
        /**
         * 汇报关系数据
         */
        this.reportingLineDataEntity = new ReportingLineDataEntity();
        /**
         * 汇报关系定义列表
         */
        this.reportingLineDefinitionList = [];
        this.reportingLineDimension = [];
        this.showClearButton = false;
        this.items = [];
        this.users = [];
        this.departments = [];
        this.pageIndex = 1;
        this.pageSize = 20;
        this.pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        /**
         * 汇报类型显示列
         */
        this.columns = [
            { title: this.localePipe.transform('component.reportingLine.code'), field: 'code', width: 100 },
            { title: this.localePipe.transform('component.reportingLine.name'), field: 'name', width: 100 }
        ];
        /**
         *  参与者列表汇报关系显示字段
         */
        this.reportingReferObjects = [
            { name: this.localePipe.transform('component.reportingLine.dept'), value: 'dept' },
            { name: this.localePipe.transform('component.reportingLine.sysUser'), value: 'sysUser' },
            { name: this.localePipe.transform('component.reportingLine.employee'), value: 'employee' }
        ];
        this.curReportingRefer = this.reportingReferObjects[0].value;
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.getReportingLineType();
    }
    /**
     * @param {?} dataEntity
     * @return {?}
     */
    set setReportingLineDataEntity(dataEntity) {
        this.defName = dataEntity.reportingLineDefName;
        this.reportingLineDataEntity = dataEntity;
        /** @type {?} */
        const defUrl = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + dataEntity.reportingLineDefId;
        this.http.get(defUrl).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.reportingLineDefinition = re;
            this.designerUIState.dimensions = [
                { value: 'higherSuperior', text: this.localePipe.transform('component.reportingLine.higherSuperior') }
            ];
            // 兼容历史数据
            if (JSON.parse(this.reportingLineDefinition.dimensions)[0].code !== 'directSuperior') {
                /** @type {?} */
                const di = {
                    value: 'directSuperior',
                    text: this.localePipe.transform('component.reportingLine.directSuperior')
                };
                this.designerUIState.dimensions.push(di);
            }
            for (const dimension of JSON.parse(this.reportingLineDefinition.dimensions)) {
                /** @type {?} */
                const di = {
                    value: dimension.code,
                    text: dimension.name
                };
                this.designerUIState.dimensions.push(di);
            }
        }));
        this.users = [dataEntity];
        if (dataEntity.refUserId) {
            this.users[0].performerName = this.variableParticipantName(dataEntity.refUserId);
            this.curReportingRefer = this.reportingReferObjects[1].value;
            this.display = 'block';
        }
        else if (dataEntity.refEmployeeId) {
            this.users[0].performerName = dataEntity.refEmployeeId;
            this.curReportingRefer = this.reportingReferObjects[2].value;
            this.display = 'block';
        }
        else {
            this.curReportingRefer = this.reportingReferObjects[0].value;
        }
        if (dataEntity.reportingLineDefId) {
            this.typeReadOnly = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 获取汇报关系类型
     * @return {?}
     */
    getReportingLineType() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingLineDefinitions';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.reportingLineDefinitionList = re;
            this.items = this.reportingLineDefinitionList.slice(0, this.pageSize);
            this.total = this.reportingLineDefinitionList.length;
        }));
    }
    /**
     * @return {?}
     */
    onclear() {
        this.reportingLineDataEntity = new ReportingLineDataEntity();
    }
    // 参照类型改变
    /**
     * @param {?} data
     * @return {?}
     */
    referObjectChange(data) {
        if (data === 'dept') {
            this.display = 'none';
            this.curReportingRefer = this.reportingReferObjects[0].value;
            this.reportingLineDataEntity.refUserId = null;
            this.reportingLineDataEntity.refEmployeeId = null;
        }
        else if (data === 'sysUser') {
            this.display = 'block';
            this.curReportingRefer = this.reportingReferObjects[1].value;
            this.reportingLineDataEntity.refOrgId = null;
            this.reportingLineDataEntity.refOrgName = null;
            this.reportingLineDataEntity.refEmployeeId = null;
        }
        else { // 员工的情况
            this.display = 'block';
            this.curReportingRefer = this.reportingReferObjects[2].value;
            this.reportingLineDataEntity.refOrgId = null;
            this.reportingLineDataEntity.refOrgName = null;
            this.reportingLineDataEntity.refUserId = null;
        }
        // 参照对象切换时，清空user和department
        this.users = [];
        this.departments = [];
    }
    /**
     * 参照用户改变
     * @param {?} data
     * @return {?}
     */
    referUserChange(data) {
        console.log(data);
    }
    /**
     * 维度改变
     * @param {?} data
     * @return {?}
     */
    reportingDimensionChange(data) {
    }
    /**
     * 组织帮助选完后
     * @param {?} org
     * @return {?}
     */
    orgSelected(org) {
        this.reportingLineDataEntity.refOrgId = org.id;
        this.reportingLineDataEntity.refOrgName = org.name;
    }
    /**
     * 编辑条件
     * @return {?}
     */
    editCondition() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.reportingLineDataEntity.condition); // this.reportingLineDataEntity.condition
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.reportingLineDataEntity.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getReportingTypes(value) {
        /** @type {?} */
        const start = (this.pageIndex - 1) * this.pageSize;
        /** @type {?} */
        const end = start + this.pageSize;
        /** @type {?} */
        let items = [];
        if (value) {
            items = this.reportingLineDefinitionList.filter((/**
             * @param {?} f
             * @return {?}
             */
            f => f.name.indexOf(value) > -1 || f.code.indexOf(value) > -1));
        }
        else {
            items = this.reportingLineDefinitionList;
        }
        this.total = items.length;
        this.items = items.slice(start, end);
        this.lookup.componentRef.instance.loadData({
            total: this.total,
            pageSize: this.pageSize,
            pageIndex: this.pageIndex,
            data: this.items
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
            this.inputGroup1.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup1.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.reportingLineDataEntity.refOrgId = '';
        this.reportingLineDataEntity.refOrgName = '';
    }
    /**
     * @return {?}
     */
    clearUser() {
        this.users = [];
        this.reportingLineDataEntity.refUserId = '';
        this.reportingLineDataEntity.refEmployeeId = '';
    }
    /**
     * @return {?}
     */
    clearOrg() {
        this.departments = [];
        this.reportingLineDataEntity.refOrgId = '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectOrg(data) {
        this.showExprHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        this.showExprHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showExprHelp(data) {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (data === 'sysUser') {
            if (this.reportingLineDataEntity.refUserId && this.reportingLineDataEntity.refUserId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refUserId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'org') {
            if (this.reportingLineDataEntity.refOrgId && this.reportingLineDataEntity.refOrgId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refOrgId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else { // 员工及其他汇报对象类型
            if (this.reportingLineDataEntity.refEmployeeId && this.reportingLineDataEntity.refEmployeeId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refEmployeeId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            if (data === 'sysUser') {
                /** @type {?} */
                const user = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipantExpression');
                user.tag = 'expression';
                user.performerName = this.variableParticipantName(expressionInfo);
                this.reportingLineDataEntity.refUserId = user.performerId;
                this.reportingLineDataEntity.tag = user.tag;
                this.reportingLineDataEntity.performerName = user.performerName;
                this.users = [this.reportingLineDataEntity];
            }
            else if (data === 'org') {
                /** @type {?} */
                const dept = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipantExpression');
                dept.tag = 'expression';
                this.reportingLineDataEntity.refOrgName = expressionInfo;
                this.reportingLineDataEntity.refOrgId = expressionInfo;
                this.departments = [this.reportingLineDataEntity];
            }
            else {
                /** @type {?} */
                const employee = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipantExpression');
                employee.performerName = expressionInfo;
                employee.tag = 'expression';
                this.reportingLineDataEntity.refEmployeeId = expressionInfo;
                this.reportingLineDataEntity.performerName = employee.performerName;
                this.users = [this.reportingLineDataEntity];
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return this.localePipe.transform('component.reportingLine.businessFields');
    }
    /**
     * @return {?}
     */
    defChanged() {
        System.import('/platform/runtime/wf/web/wf-reporting-data/reportingLineDefHelp.js?v=20231123').then((/**
         * @return {?}
         */
        () => {
            ((/** @type {?} */ (window))).gspWfReportingLineDef.ReportingLineDefHelpUtil.getReportingLineHelp().then((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.defSelected(data);
            }));
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    defSelected(data) {
        this.defName = data.name;
        this.reportingLineDataEntity.reportingLineDefId = data.id;
        this.reportingLineDataEntity.reportingLineDefName = data.name;
        this.reportingLineDimension = JSON.parse(data.dimensions);
        this.designerUIState.dimensions = [
            { value: 'higherSuperior', text: this.localePipe.transform('component.reportingLine.higherSuperior') }
        ];
        // 兼容历史数据
        if (this.reportingLineDimension[0].code !== 'directSuperior') {
            /** @type {?} */
            const di = {
                value: 'directSuperior',
                text: this.localePipe.transform('component.reportingLine.directSuperior')
            };
            this.designerUIState.dimensions.push(di);
        }
        for (const dimension of this.reportingLineDimension) {
            /** @type {?} */
            const di = {
                value: dimension.code,
                text: dimension.name
            };
            this.designerUIState.dimensions.push(di);
        }
        // 定义切换后，默认是参照组织
        this.curReportingRefer = this.reportingReferObjects[0].value;
        // 下边的参照人也得隐藏 2023-5-18
        this.display = 'none';
        this.reportingLineDataEntity.refUserId = null;
        this.reportingLineDataEntity.refEmployeeId = null;
        return of$1(true);
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.reportingLineDataEntity.type = 'wf.ReportingLineParticipantExpression';
        this.reportingLineDataEntity.reportingReferObject = this.curReportingRefer;
        return this.reportingLineDataEntity;
    }
}
ReportingLineComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-reporting-line',
                template: "<sys-farris-tree-help class=\"flex-fill\" #orgHelp style=\"display: none;\"\r\n                      [singleSelect]=\"true\" [sourceType]=\"'org'\" [disabled]=\"false\" [filter]=\"treeFilter\"\r\n                      [useBeforeCloseEvent]=\"false\" [async]=\"true\"\r\n                      (afterConfirm)=\"orgSelected($event)\">\r\n</sys-farris-tree-help>\r\n\r\n<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%\">\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.defName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(value)]=\"defName\"\r\n                               (clickHandle)=\"defChanged()\" [enableClear]=\"false\"\r\n                  ></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.dimension'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"reportingLineDataEntity.dimension\" name=\"dimension\" [panelHeight]=\"200\"\r\n                                     [idField]=\"'value'\" [textField]=\"'text'\" [data]=\"this.designerUIState.dimensions\" (valueChange)=\"reportingDimensionChange($event)\"\r\n                                     ></farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.curReportingRefer'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-radiogroup [data]=\"reportingReferObjects\" [horizontal]=\"true\"\r\n                                     [(ngModel)]=\"curReportingRefer\" name=\"referObject\"\r\n                                     (changeValue)=\"referObjectChange($event)\"\r\n                  ></farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" [ngStyle]=\"{'display':display}\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.usersName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup1 class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" [(ngModel)]=\"reportingLineDataEntity.performerName\" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clearUser()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span *ngIf=\"curReportingRefer === 'sysUser'\" class=\"input-group-text\" (click)=\"selectUsers('sysUser')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                      <span *ngIf=\"curReportingRefer === 'employee'\" class=\"input-group-text\" (click)=\"selectUsers('employee')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\" [ngStyle]=\"{'display':display === 'none' ? 'block':'none'}\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.refOrgId'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportingLineDataEntity.refOrgId\" name=\"dept\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clearOrg()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectOrg('org')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportingLineDataEntity.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<app-wf-report-def-help style=\"display: none;\" [singleSelect]=\"true\" title=\"{{'component.reportingLine.definitionOfReport'|wfLocale}}\" (afterConfirm)=\"defSelected($event)\">\r\n\r\n</app-wf-report-def-help>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ReportingLineComponent.ctorParameters = () => [
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: NgZone },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ReportingLineComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    reportingLineDefHelp: [{ type: ViewChild, args: [WfReportDefHelpComponent,] }],
    setReportingLineDataEntity: [{ type: Input }],
    lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
    orgHelp: [{ type: ViewChild, args: [SysFarrisTreeHelpComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    inputGroup1: [{ type: ViewChild, args: ['inputGroup1',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixDefInfoEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixDataInfoEntity extends PerformerEntity {
    /**
     * @param {?=} id
     * @param {?=} name
     * @param {?=} type
     */
    constructor(id, name, type) {
        super(id, name, type);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumListComponent {
    /**
     * @param {?} messageService
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(messageService, injector, cdr, localeId, resources, localePipe) {
        this.messageService = messageService;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { field: 'key', width: 100, title: this.localePipe.transform('component.matrixPerformer.key') },
            { field: 'value', width: 100, title: this.localePipe.transform('component.matrixPerformer.value') }
        ];
        this.confirm = new Subject$1();
        this.closeModalEmitter = new Subject$1();
        /**
         * 显示值
         */
        this.data = new Array();
        this.selectedIds = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    load(enumValues) {
        this.data = [...enumValues];
    }
    /**
     * 确认
     * @return {?}
     */
    onConfirm() {
        if (this.selectedIds.length === 0) {
            this.messageService.warning(this.localePipe.transform('component.matrixPerformer.notSelectEnum'));
        }
        /** @type {?} */
        const enumValues = this.data.filter((/**
         * @param {?} d
         * @return {?}
         */
        d => this.selectedIds.findIndex((/**
         * @param {?} id
         * @return {?}
         */
        id => id === d.key)) > -1));
        this.confirm.next(enumValues);
        this.closeModalEmitter.next();
    }
    /**
     * 取消
     * @return {?}
     */
    cancel() {
        this.closeModalEmitter.next();
    }
}
EnumListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-enum-list',
                template: "<ng-template #buttons>\r\n  <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'component.matrixPerformer.cancel'|wfLocale}}</button>\r\n  <button class=\"btn btn-primary\" (click)=\"onConfirm()\">{{'component.matrixPerformer.onConfirm'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid [data]=\"data\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\"\r\n                       [idField]=\"'key'\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [(checkValues)]=\"selectedIds\"\r\n                       [showAllCheckbox]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"false\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"\r\n                       lineNumberTitle=\"{{'component.matrixPerformer.lineNumber'|wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\" [virtualized]=\"true\" [pagination]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EnumListComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EnumListComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    dg: [{ type: ViewChild, args: ['dg',] }],
    btnRef: [{ type: ViewChild, args: ['buttons',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixDefHelpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        if (url.indexOf('getMatrixDef') > -1) {
            /** @type {?} */
            const index = params.pageIndex || 1;
            /** @type {?} */
            const size = params.pageSize || 20;
            /** @type {?} */
            const searchValue = JSON.parse(params.searchValue);
            if (searchValue.searchValue) {
                /** @type {?} */
                let query = '{';
                if (searchValue.searchValue) {
                    if (searchValue.searchField === '*') {
                        query += `"codeOrNameLike":"${searchValue.searchValue}",`;
                    }
                    else {
                        query += `"${searchValue.searchField}":"${searchValue.searchValue}",`;
                    }
                }
                if (query.substr(query.length - 1, 1) === ',') {
                    query = query.substring(0, query.length - 1);
                }
                query += '}';
                query = encodeURIComponent(query);
                query += `&pageIndex=${index}&pageSize=${size}`;
                url += '?searchValue=' + query;
            }
            else {
                url += `?pageIndex=${index}&pageSize=${size}`;
            }
            return this.http.get(url).pipe(map((/**
             * @param {?} re
             * @return {?}
             */
            (re) => ({
                items: re.content,
                total: re.totalElements,
                pageInfo: {
                    pageIndex: re.pageable.pageNumber + 1,
                    pageSize: re.pageable.pageSize,
                    pageList: [20, 40, 60, 80, 100],
                    enablePager: true
                }
            }))));
        }
    }
}
MatrixDefHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MatrixDefHelpService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixPerformerComponent {
    /**
     * @param {?} http
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     * @param {?} matDefService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, designerUIState, expr, modalService, resolver, injector, matDefService, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.matDefService = matDefService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.display = 'none';
        this.typeReadOnly = false;
        this.items = [];
        this.pageIndex = 1;
        this.pageSize = 20;
        this.pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.fieldId = '';
        /**
         * 矩阵定义显示列
         */
        this.columns = [
            { title: this.localePipe.transform('component.matrixPerformer.code'), field: 'code', width: 100 },
            { title: this.localePipe.transform('component.matrixPerformer.name'), field: 'name', width: 100 }
        ];
        this.users = [];
        this.dataFieldAndValues = []; // { text: '部门', value: 'department' },
        // { text: '部门', value: 'department' },
        this.curDataFieldValue = '';
        this.matrixDefEntityList = [];
        this.curMatrixDefEntity = new MatrixDefInfoEntity();
        this.curMatrixDataEntity = new MatrixDataInfoEntity();
        this.conditionFields = [];
        this.exprGroup = [
            { name: this.localePipe.transform('component.matrixPerformer.help'), value: 'help' }
        ];
        this.mulGroup = [
            { name: this.localePipe.transform('component.matrixPerformer.multivalue'), value: 'Multivalue' }
        ];
        this.condition1ExprAble = true;
        this.condition2ExprAble = true;
        this.condition3ExprAble = true;
        this.condition1Multivalue = false;
        this.condition2Multivalue = false;
        this.condition3Multivalue = false;
        /**
         * 编辑器页面显示文字，防范浅拷贝问题（对于条件字段的值和显示文字都不要在当前实体中进行修改只有点击确定时，才将其保存至当前实体并返回）
         */
        this.condition1Text = '';
        this.condition1Value = '';
        this.condition2Text = '';
        this.condition2Value = '';
        this.condition3Text = '';
        this.condition3Value = '';
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            // 先将当前绑定的数据清空
            this.curMatrixDataEntity = new MatrixDataInfoEntity();
            this.curDataFieldValue = '';
            this.curMatrixDefEntity = rowData;
            this.curMatrixDataEntity.matrixDefId = rowData.id;
            this.curMatrixDataEntity.matrixDefName = rowData.name;
            this.setFields();
            return of$1(true);
        });
        this.dictHelpPicked = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.value = null;
            return of$1({ closeDialog: true });
        });
        this.onBeforeHelp = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const lookupIns = e.instance;
            if (lookupIns) {
                /** @type {?} */
                const getDataFn = lookupIns.http.getData;
                lookupIns.http.getData = this.matDefService.getData;
                lookupIns.dialogClosed.subscribe((/**
                 * @return {?}
                 */
                () => {
                    lookupIns.http.getData = getDataFn;
                }));
            }
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        // this.getMatrixLineType();
    }
    /**
     * @param {?} dataEntity
     * @return {?}
     */
    set setMatrixDataEntity(dataEntity) {
        this.curMatrixDataEntity = dataEntity;
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/matrixDefinition/' + dataEntity.matrixDefId;
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.curMatrixDefEntity = re;
            this.setFields();
            this.curDataFieldValue = dataEntity.dataFieldAlias;
        }));
        if (dataEntity.matrixDefId) {
            this.typeReadOnly = true;
        }
        if (!this.curMatrixDataEntity.conditionField1) {
            this.condition1 = 'expr';
            this.condition1ExprAble = true;
        }
        else if (this.curMatrixDataEntity.conditionField1.charAt(0) === '{') {
            this.condition1 = 'expr';
            this.condition1ExprAble = true;
        }
        else {
            this.condition1 = 'help';
            this.condition1ExprAble = false;
        }
        if (!this.curMatrixDataEntity.conditionField2) {
            this.condition2 = 'expr';
            this.condition2ExprAble = true;
        }
        else if (this.curMatrixDataEntity.conditionField2.charAt(0) === '{') {
            this.condition2 = 'expr';
            this.condition2ExprAble = true;
        }
        else {
            this.condition2 = 'help';
            this.condition2ExprAble = false;
        }
        if (!this.curMatrixDataEntity.conditionField3) {
            this.condition3 = 'expr';
            this.condition3ExprAble = true;
        }
        else if (this.curMatrixDataEntity.conditionField3.charAt(0) === '{') {
            this.condition3 = 'expr';
            this.condition3ExprAble = true;
        }
        else {
            this.condition3 = 'help';
            this.condition3ExprAble = false;
        }
        if (this.curMatrixDataEntity.multivaluedCondition === 'condition1') {
            this.MultivalueOption1 = 'Multivalue';
            this.condition1Multivalue = true;
        }
        else if (this.curMatrixDataEntity.multivaluedCondition === 'condition2') {
            this.MultivalueOption2 = 'Multivalue';
            this.condition2Multivalue = true;
        }
        else if (this.curMatrixDataEntity.multivaluedCondition === 'condition3') {
            this.MultivalueOption3 = 'Multivalue';
            this.condition3Multivalue = true;
        }
        this.condition1Text = this.curMatrixDataEntity.conditionFieldText1 ? this.curMatrixDataEntity.conditionFieldText1 : '';
        this.condition1Value = this.curMatrixDataEntity.conditionField1 ? this.curMatrixDataEntity.conditionField1 : '';
        this.condition2Text = this.curMatrixDataEntity.conditionFieldText2 ? this.curMatrixDataEntity.conditionFieldText2 : '';
        this.condition2Value = this.curMatrixDataEntity.conditionField2 ? this.curMatrixDataEntity.conditionField2 : '';
        this.condition3Text = this.curMatrixDataEntity.conditionFieldText3 ? this.curMatrixDataEntity.conditionFieldText3 : '';
        this.condition3Value = this.curMatrixDataEntity.conditionField3 ? this.curMatrixDataEntity.conditionField3 : '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let rootPath = '';
        try {
            rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
        this.dataUri = rootPath + '/api/runtime/wf/v1.0/matrixDefinition/getMatrixDef';
    }
    /**
     * 获取矩阵定义
     * @return {?}
     */
    getMatrixLineType() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/matrixDefinition';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.matrixDefEntityList = re;
            this.items = this.matrixDefEntityList.slice(0, this.pageSize);
            this.total = this.matrixDefEntityList.length;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setFields() {
        this.conditionFields = [];
        this.dataFieldAndValues = [];
        // 先对条件字段按照排序号进行排序
        this.curMatrixDefEntity.conditionField.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        // 将排序后的条件放入条件字段数组中
        for (const condition of this.curMatrixDefEntity.conditionField) {
            this.conditionFields.push(condition);
        }
        // 先对数据字段按照排序号进行排序
        this.curMatrixDefEntity.dataField.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        // 填充数据字段的下拉列表
        for (const data of this.curMatrixDefEntity.dataField) {
            /** @type {?} */
            const temp = {
                text: data.alias,
                value: data.alias
            };
            this.dataFieldAndValues.push(temp);
        }
    }
    /**
     * @return {?}
     */
    onClear() {
        this.curMatrixDataEntity = new MatrixDataInfoEntity();
    }
    /**
     * 编辑条件
     * @return {?}
     */
    editCondition() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.curMatrixDataEntity.condition); // this.reportingLineDataEntity.condition
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.curMatrixDataEntity.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @param {?} index
     * @param {?} id
     * @return {?}
     */
    onHelpSearch(data, index, id) {
        this.index = index;
        this.fieldId = id;
        this.helpId = this.curMatrixDefEntity.conditionField[this.index].smartHelp;
        this.lookUp.onClear();
        this.lookUp.showDialog();
    }
    /**
     * @param {?} index
     * @param {?} id
     * @return {?}
     */
    openEnumValue(index, id) {
        this.index = index;
        this.fieldId = id;
        this.showEnumList(JSON.parse(this.curMatrixDefEntity.conditionField[this.index].enumList));
    }
    /**
     * @private
     * @param {?} enumList
     * @return {?}
     */
    showEnumList(enumList) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(EnumListComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.matrixPerformer.enumSelection'),
            width: 650,
            height: 450,
            showButtons: true,
            buttons: compRef.instance.btnRef,
        };
        if (enumList && enumList.length > 0) {
            compRef.instance.load(enumList);
        }
        compRef.instance.confirm.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (this.index === 0) {
                this.condition1Text = re[0].value;
                this.condition1Value = re[0].value;
            }
            else if (this.index === 1) {
                this.condition2Text = re[0].value;
                this.condition2Value = re[0].value;
            }
            else if (this.index === 2) {
                this.condition3Text = re[0].value;
                this.condition3Value = re[0].value;
            }
        }));
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @return {?}
         */
        () => {
            dialog.close();
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    dataFieldChange(data) {
        this.curMatrixDataEntity.dataFieldAlias = data.data.value;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectedDataHandler(data) {
        if (this.index === 0) {
            this.condition1Text = data.name;
            this.condition1Value = data.id;
        }
        else if (this.index === 1) {
            this.condition2Text = data.name;
            this.condition2Value = data.id;
        }
        else if (this.index === 2) {
            this.condition3Text = data.name;
            this.condition3Value = data.id;
        }
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.curMatrixDataEntity.type = 'wf.MatrixParticipantExpression';
        this.curMatrixDataEntity.conditionFieldText1 = this.condition1Text;
        this.curMatrixDataEntity.conditionField1 = this.condition1Text === '' ? '' : this.condition1Value;
        this.curMatrixDataEntity.conditionFieldText2 = this.condition2Text;
        this.curMatrixDataEntity.conditionField2 = this.condition2Text === '' ? '' : this.condition2Value;
        this.curMatrixDataEntity.conditionFieldText3 = this.condition3Text;
        this.curMatrixDataEntity.conditionField3 = this.condition3Text === '' ? '' : this.condition3Value;
        if (this.condition1Multivalue) {
            this.curMatrixDataEntity.multivaluedCondition = 'condition1';
        }
        else if (this.condition2Multivalue) {
            this.curMatrixDataEntity.multivaluedCondition = 'condition2';
        }
        else if (this.condition3Multivalue) {
            this.curMatrixDataEntity.multivaluedCondition = 'condition3';
        }
        return this.curMatrixDataEntity;
    }
    /**
     * 打开表达式编辑器
     * @param {?} data 编辑第几个条件字段，值为（condition1，condition2，condition3）
     * @return {?}
     */
    showExprHelp(data) {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (data === 'condition1') {
            if (this.curMatrixDataEntity.conditionField1) {
                this.expr.addExpressionText(this.curMatrixDataEntity.conditionField1);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'condition2') {
            if (this.curMatrixDataEntity.conditionField2) {
                this.expr.addExpressionText(this.curMatrixDataEntity.conditionField2);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'condition3') {
            if (this.curMatrixDataEntity.conditionField3) {
                this.expr.addExpressionText(this.curMatrixDataEntity.conditionField3);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            if (data === 'condition1') {
                this.condition1Text = expressionInfo;
                this.condition1Value = expressionInfo;
            }
            else if (data === 'condition2') {
                this.condition2Text = expressionInfo;
                this.condition2Value = expressionInfo;
            }
            else {
                this.condition3Text = expressionInfo;
                this.condition3Value = expressionInfo;
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    condition1Expr(data) {
        this.showExprHelp(data);
    }
    /**
     * @return {?}
     */
    condition1ExprClick() {
        this.condition1ExprAble = !this.condition1ExprAble;
        this.condition1Multivalue = false;
        this.MultivalueOption1 = '';
        this.condition1Text = '';
        this.condition1Value = '';
    }
    /**
     * @return {?}
     */
    condition1MulClick() {
        this.MultivalueOption2 = '';
        this.MultivalueOption3 = '';
        this.condition2Multivalue = false;
        this.condition3Multivalue = false;
        this.condition1Multivalue = !this.condition1Multivalue;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    condition2Expr(data) {
        this.showExprHelp(data);
    }
    /**
     * @return {?}
     */
    condition2ExprClick() {
        this.condition2ExprAble = !this.condition2ExprAble;
        this.condition2Multivalue = false;
        this.MultivalueOption2 = '';
        this.condition2Text = '';
        this.condition2Value = '';
    }
    /**
     * @return {?}
     */
    condition2MulClick() {
        this.MultivalueOption1 = '';
        this.MultivalueOption3 = '';
        this.condition1Multivalue = false;
        this.condition3Multivalue = false;
        this.condition2Multivalue = !this.condition2Multivalue;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    condition3Expr(data) {
        this.showExprHelp(data);
    }
    /**
     * @return {?}
     */
    condition3ExprClick() {
        this.condition3ExprAble = !this.condition3ExprAble;
        this.condition3Multivalue = false;
        this.MultivalueOption3 = '';
        this.condition3Text = '';
        this.condition3Value = '';
    }
    /**
     * @return {?}
     */
    condition3MulClick() {
        this.MultivalueOption1 = '';
        this.MultivalueOption2 = '';
        this.condition1Multivalue = false;
        this.condition2Multivalue = false;
        this.condition3Multivalue = !this.condition3Multivalue;
    }
}
MatrixPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-matrix-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\">\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline\"><!--mr-5-->\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 14%\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.matrixPerformer.refMatrixTable'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 77.5%\">\r\n                  <farris-lookup-grid [items]=\"items\" [columns]=\"columns\" [(ngModel)]=\"curMatrixDataEntity.matrixDefName\"\r\n                                      name=\"definitionId\" [resizable]=\"true\" [singleSelect]=\"true\" [idField]=\"'id'\" [pagination]=\"true\"\r\n                                      [pageIndex]=\"pageIndex\" [pageSize]=\"pageSize\" [pageList]=\"pageList\" [total]=\"total\" [textField]=\"'name'\"\r\n                                      [valueField]=\"'id'\" title=\"{{'component.matrixPerformer.matrixTable'|wfLocale}}\" [dictPicked]=\"dictPicked\" (clear)=\"onClear()\" [readonly]=\"typeReadOnly\"\r\n                                      [customDisplayType] = \"true\" [displayType]=\"'LIST'\" [uri]=\"dataUri\" [dictPicking]=\"onBeforeHelp\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n                <div style=\"width: 7.5%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 14%\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.matrixPerformer.curDataFieldValue'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 77.5%\">\r\n                  <!--\u4E0B\u62C9\u5217\u8868-->\r\n                  <farris-combo-list [(ngModel)]=\"curDataFieldValue\" name=\"referObject\" [panelHeight]=\"200\" [idField]=\"'value'\"\r\n                                     [textField]=\"'text'\" [data]=\"dataFieldAndValues\" (selectChange)='dataFieldChange($event)'>\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n                <div style=\"width: 7.5%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 0\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\" style=\"margin-top: -17px; margin-bottom: -22px\">\r\n                <label class=\"col-form-label\" style=\"width: 14%\">\r\n                  <span class=\"farris-label-text\" style=\"color: rgb(180,180,180)\">{{'component.matrixPerformer.conditionFields'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 77.5%\">\r\n                  <hr size=\"3px\">\r\n                </div>\r\n                <div style=\"width: 7.5%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 0\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 14%\">\r\n                  <span class=\"farris-label-text\">{{conditionFields[0].alias}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"conditionFields[0].inputType === 'help' && !condition1ExprAble\">\r\n                  <input-group name=\"condition1\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition1Text\" (clickHandle)=\"onHelpSearch($event,0,conditionFields[0].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"conditionFields[0].inputType === 'enum' && !condition1ExprAble\">\r\n                  <input-group name=\"condition1\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition1Text\" (clickHandle)=\"openEnumValue(0,conditionFields[0].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"condition1ExprAble\">\r\n                  <input-group name=\"condition1\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(ngModel)]=\"condition1Text\" (clickHandle)=\"condition1Expr('condition1')\">\r\n                  </input-group>\r\n                </div>\r\n                <farris-checkboxgroup style=\"width: 10%; padding-left: 5px\" [(ngModel)]=\"condition1\" name=\"Expr1Able\" [horizontal]=\"true\"\r\n                                      [data]=\"exprGroup\" (changeValue)=\"condition1ExprClick()\">\r\n                </farris-checkboxgroup>\r\n                <farris-checkboxgroup style=\"width: 10%\" [(ngModel)]=\"MultivalueOption1\" name=\"Expr1Mul\" [horizontal]=\"true\" [disable]=\"!condition1ExprAble\"\r\n                [data]=\"mulGroup\" (changeValue)=\"condition1MulClick()\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 1\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 14%\">\r\n                  <span class=\"farris-label-text\">{{conditionFields[1].alias}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"conditionFields[1].inputType === 'help' && !condition2ExprAble\">\r\n                  <input-group name=\"condition2\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition2Text\" (clickHandle)=\"onHelpSearch($event,1,conditionFields[1].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"conditionFields[1].inputType === 'enum' && !condition2ExprAble\">\r\n                  <input-group name=\"condition2\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition2Text\" (clickHandle)=\"openEnumValue(1,conditionFields[1].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"condition2ExprAble\">\r\n                  <input-group name=\"condition2\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(ngModel)]=\"condition2Text\" (clickHandle)=\"condition2Expr('condition2')\">\r\n                  </input-group>\r\n                </div>\r\n                <farris-checkboxgroup style=\"width: 10%; padding-left: 5px\" [(ngModel)]=\"condition2\" name=\"Expr2Able\" [horizontal]=\"true\"\r\n                                      [data]=\"exprGroup\" (changeValue)=\"condition2ExprClick()\">\r\n                </farris-checkboxgroup>\r\n                <farris-checkboxgroup style=\"width: 10%\" [(ngModel)]=\"MultivalueOption2\" name=\"Expr2Mul\" [horizontal]=\"true\" [disable]=\"!condition2ExprAble\"\r\n                [data]=\"mulGroup\" (changeValue)=\"condition2MulClick()\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 14%\">\r\n                  <span class=\"farris-label-text\">{{conditionFields[2].alias}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"conditionFields[2].inputType === 'help' && !condition3ExprAble\">\r\n                  <input-group name=\"condition3\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition3Text\" (clickHandle)=\"onHelpSearch($event,2,conditionFields[2].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"conditionFields[2].inputType === 'enum' && !condition3ExprAble\">\r\n                  <input-group name=\"condition3\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition3Text\" (clickHandle)=\"openEnumValue(2,conditionFields[2].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 60%\" *ngIf=\"condition3ExprAble\">\r\n                  <input-group name=\"condition3\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(ngModel)]=\"condition3Text\" (clickHandle)=\"condition3Expr('condition3')\">\r\n                  </input-group>\r\n                </div>\r\n                <farris-checkboxgroup style=\"width: 10%; padding-left: 5px\" [(ngModel)]=\"condition3\" name=\"Expr3Able\" [horizontal]=\"true\"\r\n                                      [data]=\"exprGroup\" (changeValue)=\"condition3ExprClick()\">\r\n                </farris-checkboxgroup>\r\n                <farris-checkboxgroup style=\"width: 10%\" [(ngModel)]=\"MultivalueOption3\" name=\"Expr3Mul\" [horizontal]=\"true\" [disable]=\"!condition3ExprAble\"\r\n                [data]=\"mulGroup\" (changeValue)=\"condition3MulClick()\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.matrixPerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"curMatrixDataEntity.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" #lookup [(ngModel)]=\"value\" name=\"value\" [helpId]=\"helpId\"\r\n  [singleSelect]=\"true\" [uri]=\"'assets/data/tree-list-help.json'\" (selectedData)=\"selectedDataHandler($event)\"\r\n  [dictPicked]=\"dictHelpPicked\" [enableCascade]=\"false\">\r\n</farris-lookup-grid>\r\n",
                providers: [
                    { provide: ServerSideToken, useClass: LookupDataService },
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
MatrixPerformerComponent.ctorParameters = () => [
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: MatrixDefHelpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
MatrixPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    setMatrixDataEntity: [{ type: Input }],
    lookUp: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityExecutorParticipant extends PerformerEntity {
    /**
     * @param {?=} id
     * @param {?=} name
     * @param {?=} type
     */
    constructor(id, name, type) {
        super(id, name, type);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityExecutorPerformerComponent {
    /**
     * @param {?} ngZone
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(ngZone, designerUIState, expr, cdr, localeId, resources, localePipe) {
        this.ngZone = ngZone;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.activityExecutors = [];
        this.cols = [
            { title: this.localePipe.transform('component.activityExecutor.name'), field: 'Name', width: 60 },
            { title: 'ID', field: 'Id', width: 90 }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.activityExecutors = [];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        // 已办用户
        /** @type {?} */
        const selectedUser = [];
        if (this.activityExecutors && this.activityExecutors.length > 0) {
            for (const handler of this.activityExecutors) {
                /** @type {?} */
                const data = {
                    data: {
                        Id: handler.activityDefId,
                        Name: handler.activityDefName
                    },
                    id: handler.activityDefId
                };
                selectedUser.push(data);
            }
        }
        this.allActivityTable.setCurrentPagerData(selectedUser);
        this.allActivityDialog.show();
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    activitiesSelect() {
        /** @type {?} */
        const selectedActivities = this.allActivityTable.checkeds;
        this.activityExecutors = selectedActivities.map((/**
         * @param {?} activity
         * @return {?}
         */
        activity => {
            /** @type {?} */
            const handler = new ActivityExecutorParticipant(activity.data.Id, activity.data.Name, 'wf.ActivityExecutorParticipantExpression');
            handler.performerName = '<' + activity.data.Name + this.localePipe.transform('component.activityExecutor.eventHandler');
            handler.activityDefId = activity.data.Id;
            handler.activityDefName = activity.data.Name;
            handler.condition = this.condition;
            return handler;
        }));
        this.allActivityDialog.close();
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.activityExecutors.map((/**
         * @param {?} x
         * @return {?}
         */
        x => x.condition = this.condition));
        return this.activityExecutors;
    }
}
ActivityExecutorPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-activity-handler-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.activityExecutor.nodeName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"activityExecutors | activityExecutor \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.activityExecutor.enablingConditions'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<farris-dialog #allActivityDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.activityExecutor.activityList'|wfLocale}}\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n    <farris-datagrid #allActivityTable [columns]=\"cols\" [data]=\"designerUIState.userActList\"  [idField]=\"'Id'\" [fit]=\"true\"\r\n                     [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\"\r\n                     [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default\" (click)=\"allActivityDialog.close()\">{{'component.activityExecutor.clickCancel'|wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary mx-2\" (click)=\"activitiesSelect()\">{{'component.activityExecutor.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ActivityExecutorPerformerComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ActivityExecutorPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    allActivityDialog: [{ type: ViewChild, args: ['allActivityDialog',] }],
    allActivityTable: [{ type: ViewChild, args: ['allActivityTable',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrganizationParticipantExpression$1 {
}
/** @enum {string} */
const ActionScope$1 = {
    /**
     * 指派
     */
    AssignUser: 'AssignUser',
    /**
     * 移交
     */
    Transfer: 'Transfer',
    /**
     * 征询
     */
    AddSignFront: 'AddSignFront',
    /**
     * 加签
     */
    AddSignBehind: 'AddSignBehind',
    /**
     * 知会
     */
    Notify: "Notify",
};
/** @enum {string} */
const OrganizationLevel$1 = {
    /**
     * 部门
     */
    DEPARTMENT: 'DEPARTMENT',
    /**
     * 单位
     */
    UNIT: 'UNIT',
    /**
    * 默认值
    */
    DEFAULT: 'DEFAULT',
    VARORGANIZATION: 'VARORGANIZATION',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariablePerformerEntity extends PerformerEntity {
    /**
     * @param {?=} id
     * @param {?=} name
     * @param {?=} type
     */
    constructor(id, name, type) {
        super(id, name, type);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariablePerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} ngZone
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?=} http
     * @param {?=} message
     */
    constructor(designerUIState, expr, ngZone, cdr, localeId, resources, localePipe, http, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.http = http;
        this.message = message;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.editState = true;
        this.bindingData = {};
        this.inSuiteField = [];
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
        ];
        this.userTypeButtonNeedShow = false;
        this.personnelRelationShipTypes = [
            { name: this.localePipe.transform('component.variablePerformer.oneself'), value: 'oneself' },
        ];
        this.curOrgType = this.variableOrgTypes[0].value;
        this.relationShipType = this.designerUIState.scene !== 'inSuite' ? this.personnelRelationShipTypes[0].value : null;
        this.scene = this.designerUIState.scene;
        this.users = [];
        this.user = new VariablePerformerEntity();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.userTypeButtonNeedShow = data;
            if (this.designerUIState.scene === 'inSuite') {
                this.userTypeButtonNeedShow = true;
                this.variableOrgTypes = [
                    { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                    { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                    { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
                ];
                this.getInSuiteField(this.user.varType ? this.user.varType : 'Sys');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        // 流程变量表达式编辑器清空
        this.bindingData = {};
        this.users = [];
        this.user = null;
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
        ];
        if (this.designerUIState.scene === 'inSuite') {
            this.variableOrgTypes = [
                { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
            ];
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        this.showExprHelp();
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    showExprHelp() {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (this.users.length > 0) {
            this.expr.addExpressionText(this.users[0].varValue ? this.users[0].varValue : this.users[0].performerId);
        }
        else {
            this.expr.addExpressionText('');
        }
        // 2023-6-13 编辑时表达式编辑器只读
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            if (expressioninfo) {
                /** @type {?} */
                const user = new VariablePerformerEntity(expressioninfo, '', 'wf.VariableParticipantExpression');
                user.tag = 'expression';
                user.performerName = this.variableParticipantName(expressioninfo);
                user.name = this.variableParticipantName(expressioninfo);
                user.varType = this.curOrgType;
                if (this.designerUIState.scene === 'inSuite') {
                    user.relation = this.relationShipType;
                }
                else {
                    user.relation = this.personnelRelationShipTypes[0].value;
                }
                if (this.variableParticipantName(expressioninfo) === '') {
                    // 如果先勾选行政人员id，再选择上下文变量，则提示并将变量值类型置为1
                    this.message.info(this.localePipe.transform('component.variablePerformer.cantUseContext'));
                    this.curOrgType = this.variableOrgTypes[0].value;
                }
                else {
                    this.users = [user];
                    this.user = user;
                }
                for (const c of this.designerUIState.participantContext) {
                    // 根据表达式中的函数名判断是否使用的是上下文变量,除三种特殊上下文变量其余放开限制
                    if (user.performerId.indexOf(c.key) >= 0) {
                        this.variableOrgTypes = [
                            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' }
                        ];
                        break;
                    }
                    else {
                        this.variableOrgTypes = [
                            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                            { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                        ];
                        if (this.designerUIState.scene === 'inSuite') {
                            this.variableOrgTypes = [
                                { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                                { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                                { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
                            ];
                        }
                    }
                }
            }
            else {
                this.users = [];
                this.user = null;
                this.variableOrgTypes = [
                    { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                    { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                ];
                if (this.designerUIState.scene === 'inSuite') {
                    this.variableOrgTypes = [
                        { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                        { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                        { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
                    ];
                }
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        if (this.user) {
            this.user.varValue = this.user.performerId ? this.user.performerId : this.user.varValue;
            this.user.name = this.user.performerName ? this.user.performerName : this.user.name;
            // this.user.name = this.getRealName(this.user);
            this.user.varType = this.curOrgType;
            this.user.relation = this.relationShipType;
            this.user.condition = this.condition ? this.condition : '';
        }
        return this.user;
    }
    // TODO: 变量参与者选多个值时名称只能显示一个，待调整
    // getRealName(user: any) {
    //   // 2023-6-15 计算是否是多值，排除表达式里自带的一个逗号
    //   let r = user.name;
    //   let id = user.varValue;
    //   let char = ',';
    //   let count = id.split(char).length - 1;
    //   if (count > 1) {
    //     r += ' 等';
    //   }
    //   return r;
    // }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                if (this.curOrgType !== 'Sys') { // 行政人员类型不允许使用上下文变量
                    return '';
                }
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return JSON.parse(expr).expr;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.curOrgType = this.variableOrgTypes[0].value;
        }
        else if (data === 'Administrative_staff') {
            this.curOrgType = this.variableOrgTypes[1].value;
        }
        else {
            this.curOrgType = this.variableOrgTypes[2].value;
        }
        // 如果是inSuite场景需要获取inSuite部门的负责人，分管领导等关系
        if (this.designerUIState.scene === 'inSuite') {
            this.getInSuiteField(data);
            this.relationShipType = null;
        }
        else {
            this.relationShipType = this.personnelRelationShipTypes[0].value;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    enabledStateChange(data) {
        this.relationShipType = data.value;
    }
    /**
     * @param {?} fieldType
     * @return {?}
     */
    getInSuiteField(fieldType) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/dtProcDefs/getInSuiteFields/${fieldType}`;
        this.http.get(url).subscribe((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            this.inSuiteField = [];
            for (const f of field) {
                /** @type {?} */
                const type = {
                    name: f.field_description,
                    value: f.field
                };
                // 清空inSuiteField
                this.inSuiteField.push(type);
            }
        }));
    }
}
VariablePerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-variable-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.variablePerformer.processVariables'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | variableName \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                        (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <ng-container *ngIf=\"userTypeButtonNeedShow\">\r\n            <div class=\"col-12 farris-group-auto my-4\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">{{'component.variablePerformer.variableOrgTypes'|wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-radiogroup [data]=\"variableOrgTypes\" [horizontal]=\"true\"\r\n                                       [(ngModel)]=\"curOrgType\" name=\"referObject\"\r\n                                       (changeValue)=\"orgTypeChange($event)\"\r\n                    ></farris-radiogroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n            <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.variablePerformer.relationShipType'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [data]=\"scene !== 'inSuite'?personnelRelationShipTypes:inSuiteField\"\r\n                                     [idField]=\"'value'\" [textField]=\"'name'\" [valueField]=\"'value'\" [readonly]=\"scene !== 'inSuite'\"\r\n                                     [(ngModel)]=\"relationShipType\" name=\"relationShipObject\" (valueChange)=\"enabledStateChange($event)\"\r\n                  ></farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.variablePerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
VariablePerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: NgZone },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: HttpService },
    { type: MessagerService }
];
VariablePerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerEditComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} http
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, expr, http, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.tab = 'user';
        this.display = true;
        this.organizationLevelCollection = [
            {
                value: 'UNIT',
                text: this.localePipe.transform('component.participant.currentUnit'),
                orgId: 'currentUnit'
            }, {
                value: 'DEPARTMENT',
                text: this.localePipe.transform('component.participant.currentDepartment'),
                orgId: 'currentDepartment'
            }, {
                value: 'VARORGANIZATION',
                text: this.localePipe.transform('component.participant.variableOrganization'),
                orgId: ''
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.organizationParticipant = new OrganizationParticipantExpression$1();
        this.organizationParticipant.actionScope = ActionScope$1.AssignUser;
        this.organizationParticipant.organizationLevel = OrganizationLevel$1.DEPARTMENT;
        this.organizationParticipant.organizationId = 'currentDepartment';
        this.organizationParticipant.organizationName = this.localePipe.transform('component.participant.currentDepartment');
        this.organizationParticipant.includeChildren = false;
        this.organizationParticipant.tag = 'variable';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.performer) {
            switch (this.performer.type) {
                case 'wf.UserParticipantExpression':
                    this.usersCmp.users = [];
                    this.usersCmp.users.push(this.performer.value);
                    // 2023-5-23 用户参与者支持编辑时单选+显示已选用户；
                    this.usersCmp.multiSelect = this.editState === 'edit' ? false : true;
                    // 考虑到兼容历史数据，暂时不使用用户参与者实体类中的userType属性
                    if (this.performer.value.performerId && this.performer.value.performerId.charAt(0) === '{') {
                        /** @type {?} */
                        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
                        this.http.get(url).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        (data) => {
                            this.usersCmp.userTypeButtonNeedShow = data;
                            this.usersCmp.userType = 'variable';
                            this.usersCmp.curOrgType = this.performer.value.orgType === 'Sys' ? 'Sys' : 'Administrative_organization';
                            this.usersCmp.condition = this.performer.value.condition;
                            // 根据表达式中的函数名判断是否使用的是上下文变量
                            /** @type {?} */
                            const isContextVariable = this.performer.value.performerId.indexOf('GetContextParameter') >= 0;
                            this.usersCmp.variableOrgTypes = isContextVariable ? [
                                { name: '系统用户', value: 'Sys' }
                            ] : [
                                { name: '系统用户', value: 'Sys' },
                                { name: '员工', value: 'Administrative_organization' }
                            ];
                        }));
                    }
                    else {
                        this.usersCmp.userType = 'user';
                        this.usersCmp.condition = this.performer.value.condition;
                    }
                    break;
                case 'wf.VariableParticipantExpression':
                    // TODO:参与者只保留一份最好
                    this.varCmp.users = [];
                    this.varCmp.users.push(this.performer.value);
                    this.varCmp.user = this.performer.value;
                    this.varCmp.editState = this.editState === 'edit' ? false : true;
                    // 判断是变量参与者
                    if (this.performer.value.varValue && this.performer.value.varValue.charAt(0) === '{') {
                        // 根据表达式中的函数名判断是否使用的是上下文变量
                        /** @type {?} */
                        const isContextVariable = this.performer.value.varValue.indexOf('GetContextParameter') >= 0;
                        // 上下文变量的变量值类型只有系统用户id
                        this.varCmp.variableOrgTypes = isContextVariable ? [
                            { name: '用户ID', value: 'Sys' }
                        ] : [
                            { name: '用户ID', value: 'Sys' },
                            { name: '员工ID', value: 'Administrative_staff' },
                        ];
                        // 如果是insuite场景还要增加行政组织id
                        this.varCmp.curOrgType = this.performer.value.varType;
                        this.varCmp.relationShipType = this.performer.value.relation;
                        this.varCmp.condition = this.performer.value.condition;
                    }
                    break;
                case 'wf.PositionParticipantExpression':
                    this.posiCmp.editState = this.editState === 'edit' ? false : true;
                    this.posiCmp.position = Object.assign({}, this.performer.value);
                    this.posiCmp.performerName = this.posiCmp.position.performerName;
                    if (this.posiCmp.position.positionType === '0') {
                        this.posiCmp.newFilter = { positionType: '0' };
                    }
                    else {
                        this.posiCmp.newFilter = { positionType: '1' };
                    }
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    // this.tab = 'report';
                    this.reportingLineCmp.setReportingLineDataEntity = this.performer.value;
                    break;
                case 'wf.ComponentParticipantExpression':
                    // this.tab = 'component';
                    this.cmpCmp.component = this.performer.value;
                    break;
                case 'wf.MatrixParticipantExpression':
                    // this.tab = 'matrix';
                    this.matrixCmp.setMatrixDataEntity = this.performer.value;
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    // this.tab = 'activityExecutor';
                    this.activityExecutorCmp.activityExecutors = [];
                    this.activityExecutorCmp.activityExecutors.push(this.performer.value);
                    this.activityExecutorCmp.condition = this.performer.value.condition;
                    break;
                case 'wf.OrganizationParticipantExpression':
                    if (this.performer.value.organizationLevel === OrganizationLevel$1.DEFAULT && this.performer.value.tag === 'expression') {
                        this.performer.value.organizationLevel = OrganizationLevel$1.VARORGANIZATION;
                    }
                    this.organizationParticipant = this.performer.value;
                    if (this.performer.value.OrganizationLevel === OrganizationLevel$1.DEPARTMENT && this.performer.value.tag === 'expression') {
                        this.performer.value.OrganizationLevel === OrganizationLevel$1.VARORGANIZATION;
                    }
                    break;
            }
        }
        if (this.performerType) {
            switch (this.performerType) {
                case 'wf.UserParticipantExpression':
                    this.usersCmp.userType = 'user';
                    break;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChange(event) {
        switch (event.value) {
            case this.organizationLevelCollection[0].value:
                this.organizationParticipant.organizationId = this.organizationLevelCollection[0].orgId;
                this.organizationParticipant.organizationName = this.organizationLevelCollection[0].text;
                this.organizationParticipant.includeChildren = true;
                break;
            case this.organizationLevelCollection[1].value:
                this.organizationParticipant.organizationId = this.organizationLevelCollection[1].orgId;
                this.organizationParticipant.organizationName = this.organizationLevelCollection[1].text;
                break;
            case this.organizationLevelCollection[2].value:
                this.organizationParticipant.organizationId = this.organizationLevelCollection[2].orgId;
                this.organizationParticipant.organizationName = this.organizationLevelCollection[2].text;
                this.organizationParticipant.includeChildren = true;
                this.organizationParticipant.tag = 'expression';
                break;
        }
    }
    /**
     * @return {?}
     */
    getPerformers() {
        /** @type {?} */
        const users = this.usersCmp ? this.usersCmp.getPerformers() : [];
        /** @type {?} */
        const variable = this.varCmp ? this.varCmp.getPerformers() : null;
        /** @type {?} */
        const positions = this.posiCmp ? this.posiCmp.getPerformers() : [];
        /** @type {?} */
        const component = this.cmpCmp ? this.cmpCmp.getPerformers() : null;
        /** @type {?} */
        const reportingLine = this.reportingLineCmp ? this.reportingLineCmp.getPerformers() : null;
        /** @type {?} */
        const matrix = this.matrixCmp ? this.matrixCmp.getPerformers() : null;
        /** @type {?} */
        const activityExecutors = this.activityExecutorCmp ? this.activityExecutorCmp.getPerformers() : [];
        /** @type {?} */
        let userPerformers = [];
        // 用户参与者
        /** @type {?} */
        let activityExecutorPerformers = [];
        if ((users && users.length > 0)) {
            userPerformers = userPerformers.concat(users);
        }
        if (activityExecutors && activityExecutors.length > 0) {
            activityExecutorPerformers = activityExecutorPerformers.concat(activityExecutors);
        }
        /** @type {?} */
        let organizationParticipant;
        if (this.performerType === 'wf.OrganizationParticipantExpression') {
            if (this.organizationParticipant.organizationLevel === OrganizationLevel$1.VARORGANIZATION && this.organizationParticipant.tag === 'expression') {
                this.organizationParticipant.organizationLevel = OrganizationLevel$1.DEFAULT;
            }
            organizationParticipant = this.organizationParticipant;
        }
        return { userPerformers, variable, positions, component, reportingLine, matrix, activityExecutorPerformers, organizationParticipant };
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.organizationParticipant.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.organizationParticipant.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    editOrganizationId() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced);
        this.expr.addExpressionText(this.organizationParticipant.organizationId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.organizationParticipant.organizationId = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
PerformerEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer-edit',
                template: "<app-user-performer *ngIf=\"performerType === 'wf.UserParticipantExpression'\"></app-user-performer>\r\n<app-variable-performer *ngIf=\"performerType === 'wf.VariableParticipantExpression'\"></app-variable-performer>\r\n<app-position-performer *ngIf=\"performerType === 'wf.PositionParticipantExpression'\"></app-position-performer>\r\n<app-reporting-line *ngIf=\"performerType === 'wf.ReportingLineParticipantExpression'\"></app-reporting-line>\r\n<app-matrix-performer *ngIf=\"performerType === 'wf.MatrixParticipantExpression'\"></app-matrix-performer>\r\n<app-activity-handler-performer\r\n  *ngIf=\"performerType === 'wf.ActivityExecutorParticipantExpression'\"></app-activity-handler-performer>\r\n<app-component-performer [component]=\"component\" style=\"background: #FFF;\"\r\n  *ngIf=\"performerType === 'wf.ComponentParticipantExpression'\"></app-component-performer>\r\n\r\n<div *ngIf=\"performerType === 'wf.OrganizationParticipantExpression'\" class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\" style=\"background: #FFF;\">\r\n    <div class=\"f-utils-fill-flex-column farris-split-section mx-1 h-100\"\r\n      style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <form style=\"width: 100%; height: 100%;\">\r\n        <div class=\"d-flex m-2 flex-column w-100\">\r\n          <div class=\"d-flex flex-column\" style=\"height: 120px;\">\r\n            <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2 pt-3\">\r\n              <div class=\"col-12 farris-group-auto\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.alternativeScope'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-combo-list [panelHeight]=\"100\" [(ngModel)]=\"organizationParticipant.organizationLevel\"\r\n                        name=\"actionScope\" [idField]=\"'value'\" [enableClear]=\"false\" [textField]=\"'text'\"\r\n                        [valueField]=\"'value'\" [data]=\"organizationLevelCollection\" [readonly]=\"false\"\r\n                        (valueChange)=\"valueChange($event)\">\r\n                      </farris-combo-list>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- \u5355\u4F4D/\u90E8\u95E8\u53C2\u4E0E\u8005\u652F\u6301\u5355\u4F4DID -->\r\n              <div *ngIf=\"organizationParticipant.organizationLevel===organizationLevelCollection[2].value\"\r\n                class=\"col-12 farris-group-auto my-3 pr-3\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.orgId'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"organizationParticipant.organizationId\"\r\n                          name=\"organizationId\" [readOnly]=\"true\" />\r\n                        <div class=\"input-group-append\">\r\n                          <span class=\"input-group-text\" (click)=\"editOrganizationId()\" style=\"background: #FFF;\">\r\n                            <i class=\"f-icon f-icon-lookup\"></i>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"organizationParticipant.organizationLevel!=organizationLevelCollection[0].value\"\r\n                class=\"col-12 farris-group-auto my-3 pr-5\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.includeChildren'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-switch [(ngModel)]=\"organizationParticipant.includeChildren\"\r\n                        name=\"includeChildren\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex flex-column m-2 w-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n              <div class=\"col-12 farris-group-auto my-4\" style=\"padding-left: 6px;padding-right: 21px;\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.conditon'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"organizationParticipant.condition\"\r\n                          name=\"conditon\" [readOnly]=\"true\" />\r\n                        <div class=\"input-group-append\">\r\n                          <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                            <i class=\"f-icon f-icon-lookup\"></i>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
PerformerEditComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: HttpService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
PerformerEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    display: [{ type: Input }],
    usersCmp: [{ type: ViewChild, args: [UserPerformerComponent,] }],
    varCmp: [{ type: ViewChild, args: [VariablePerformerComponent,] }],
    posiCmp: [{ type: ViewChild, args: [PositionPerformerComponent,] }],
    cmpCmp: [{ type: ViewChild, args: [ComponentPerformerComponent,] }],
    reportingLineCmp: [{ type: ViewChild, args: [ReportingLineComponent,] }],
    matrixCmp: [{ type: ViewChild, args: [MatrixPerformerComponent,] }],
    activityExecutorCmp: [{ type: ViewChild, args: [ActivityExecutorPerformerComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerOptionsComponent {
    /**
     * @param {?} ngZone
     * @param {?} designerState
     * @param {?} expr
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(ngZone, designerState, expr, message, cdr, localeId, resources, localePipe) {
        this.ngZone = ngZone;
        this.designerState = designerState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.performerOptionsLocation = '';
        this.showClearButton = false;
        this.historicFirst = false;
        this.excludeProcInstCreator = false;
        this.excludePreActExecutors = false;
        this.excludeAllPassExecutors = false;
        this.autoProcInstCreator = false;
        this.autoPreActExecutors = false;
        this.autoAllPassExecutors = false;
        this.noPerformerStrategyList = [
            { text: this.localePipe.transform('component.performerOptions.leave'), value: 'leave' },
            { text: this.localePipe.transform('component.performerOptions.throwException'), value: 'throwException' }
        ];
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.performerOptions.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.performerOptions.administrative_staff'), value: 'Administrative_staff' },
        ];
        this.exclusionPerformersOptions = [
            { value: 'procInstCreator', name: this.localePipe.transform('component.performerOptions.procInstCreator') },
            { value: 'preActExecutors', name: this.localePipe.transform('component.performerOptions.preActExecutors') },
            { value: 'allPassExecutors', name: this.localePipe.transform('component.performerOptions.allPassExecutors') }
        ];
        this.exprPerformerType = this.variableOrgTypes[0].value;
        this.noPerformerStrategy = this.noPerformerStrategyList[0].value;
        this.modalConfig = {
            title: this.localePipe.transform('component.performerOptions.performerOptions'),
            width: 760,
            height: 606,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set value(options) {
        if (options) {
            this.exclusionPerformers = options.ExclusionPerformers;
            this.noPerformerStrategy = options.NoPerformerStrategy;
            this.historicFirst = options.HistoricFirst;
            this.automaticPerformers = options.automaticPerformers;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    set exclusionPerformers(e) {
        if (e) {
            if (typeof e === 'string') {
                this.excludeProcInstCreator = e.indexOf('procInstCreator') > -1;
                this.excludePreActExecutors = e.indexOf('preActExecutors') > -1;
            }
            else {
                this.excludeProcInstCreator = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i === 'procInstCreator')) > -1;
                this.excludePreActExecutors = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i === 'preActExecutors')) > -1;
                this.excludeAllPassExecutors = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i === 'allPassExecutors')) > -1;
                this.excludeExprPerformer = e.find((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.indexOf('expr') > -1));
                if (this.excludeExprPerformer != null && (this.excludeExprPerformer.startsWith('Sys#') ||
                    this.excludeExprPerformer.startsWith('Administrative_staff#'))) {
                    /** @type {?} */
                    const excludeValue = this.excludeExprPerformer.split("#");
                    this.exprPerformerType = excludeValue[0];
                    this.excludeExprPerformer = excludeValue[1];
                }
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    set automaticPerformers(e) {
        if (e && e.length > 0) {
            this.autoProcInstCreator = e.findIndex((/**
             * @param {?} i
             * @return {?}
             */
            i => i === 'procInstCreator')) > -1;
            this.autoPreActExecutors = e.findIndex((/**
             * @param {?} i
             * @return {?}
             */
            i => i === 'preActExecutors')) > -1;
            this.autoAllPassExecutors = e.findIndex((/**
             * @param {?} i
             * @return {?}
             */
            i => i === 'allPassExecutors')) > -1;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.performerOptionsLocation = this.editorParams.location;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const options = {
            ExclusionPerformers: this.getExclusionPerformers(),
            NoPerformerStrategy: this.noPerformerStrategy,
            HistoricFirst: this.historicFirst,
            automaticPerformers: this.getAutoPerformers()
        };
        /** @type {?} */
        const object = {
            value: options, parameters: null
        };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    cancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    excludeProcInstCreatorClick(event) {
        // this.excludeProcInstCreator = !this.excludeProcInstCreator;
        if (this.excludeProcInstCreator && this.autoProcInstCreator) {
            this.autoProcInstCreator = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    excludePreActExecutorsClick(event) {
        // this.excludePreActExecutors = !this.excludePreActExecutors;
        if (this.autoAllPassExecutors === true && this.excludePreActExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.exclusionNotAllowed'), (/**
             * @return {?}
             */
            () => {
                this.excludePreActExecutors = false;
            }));
            return;
        }
        if (this.excludePreActExecutors && this.autoPreActExecutors) {
            this.autoPreActExecutors = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    excludeAllPassExecutorsClick(event) {
        // this.excludeAllPassExecutors = !this.excludeAllPassExecutors;
        if (this.excludeAllPassExecutors) {
            if (this.autoPreActExecutors) {
                this.autoPreActExecutors = false;
            }
            if (this.autoAllPassExecutors) {
                this.autoAllPassExecutors = false;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    autoProcInstCreatorClick(event) {
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoProcInstCreator === true ) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoProcInstCreator = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoProcInstCreator === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.approvalNotAllowedAsSet'), (/**
             * @return {?}
             */
            () => {
                this.autoProcInstCreator = false;
            }));
            return;
        }
        // this.autoProcInstCreator = !this.autoProcInstCreator;
        if (this.autoProcInstCreator && this.excludeProcInstCreator) {
            this.excludeProcInstCreator = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    autoPreActExecutorsClick(event) {
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoPreActExecutors === true) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoPreActExecutors = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoPreActExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.approvalNotAllowed'), (/**
             * @return {?}
             */
            () => {
                this.autoPreActExecutors = false;
            }));
            return;
        }
        if (this.excludeAllPassExecutors === true && this.autoPreActExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.approvalNotAllowedAsSet'), (/**
             * @return {?}
             */
            () => {
                this.autoPreActExecutors = false;
            }));
            return;
        }
        // this.autoPreActExecutors = !this.autoPreActExecutors;
        if (this.autoPreActExecutors && this.excludePreActExecutors) {
            this.excludePreActExecutors = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    autoAllPassExecutorsClick(event) {
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoAllPassExecutors === true) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoAllPassExecutors = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoAllPassExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.allocationStrategyIsCollect'), (/**
             * @return {?}
             */
            () => {
                this.autoAllPassExecutors = false;
            }));
            return;
        }
        // this.autoAllPassExecutors = !this.autoAllPassExecutors;
        if (this.autoAllPassExecutors) {
            if (this.excludeAllPassExecutors) {
                this.excludeAllPassExecutors = false;
            }
            if (this.excludePreActExecutors) {
                this.excludePreActExecutors = false;
            }
        }
    }
    /**
     * @return {?}
     */
    getPerformerOptions() {
        return {
            ExclusionPerformers: this.getExclusionPerformers(),
            NoPerformerStrategy: this.noPerformerStrategy,
            HistoricFirst: this.historicFirst,
            automaticPerformers: this.getAutoPerformers()
        };
    }
    /**
     * @private
     * @return {?}
     */
    getExclusionPerformers() {
        /** @type {?} */
        const exclusionPerf = [];
        if (this.excludeProcInstCreator) {
            exclusionPerf.push('procInstCreator');
        }
        if (this.excludePreActExecutors) {
            exclusionPerf.push('preActExecutors');
        }
        if (this.excludeAllPassExecutors) {
            exclusionPerf.push('allPassExecutors');
        }
        if (this.excludeExprPerformer) {
            exclusionPerf.push(`${this.exprPerformerType}#${this.excludeExprPerformer}`);
        }
        return exclusionPerf;
    }
    /**
     * @private
     * @return {?}
     */
    getAutoPerformers() {
        /** @type {?} */
        const autoPerf = new Array();
        if (this.autoProcInstCreator) {
            autoPerf.push('procInstCreator');
        }
        if (this.autoPreActExecutors) {
            autoPerf.push('preActExecutors');
        }
        if (this.autoAllPassExecutors) {
            autoPerf.push('allPassExecutors');
        }
        return autoPerf;
    }
    /**
     * @return {?}
     */
    openExprEditor() {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        // if (this.excludeExprPerformer) {
        this.expr.addExpressionText(this.excludeExprPerformer);
        // }
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.excludeExprPerformer = d;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.exprPerformerType = this.variableOrgTypes[0].value;
        }
        else if (data === 'Administrative_staff') {
            this.exprPerformerType = this.variableOrgTypes[1].value;
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.excludeExprPerformer = '';
    }
}
PerformerOptionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer-options',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100 mx-3\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <div class=\"f-utils-fill-flex-column h-100 pl-3\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\" style=\"overflow-x: hidden;\">\r\n            <div class=\"f-form-layout farris-form pb-4\">\r\n              <div class=\"farris-form form-inline farris-form-inline\">\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h5 class=\"title-text\">{{'component.performerOptions.advancedOptions'|wfLocale}}</h5><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"historicFirst\" type=\"checkbox\" id=\"historicFirst\"\r\n                            [(ngModel)]=\"historicFirst\" />\r\n                          <label class=\"custom-control-label\" for=\"historicFirst\">{{'component.performerOptions.historicFirst'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto mt-3 pr-4\">\r\n                  <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{'component.performerOptions.noPerformerStrategy'|wfLocale}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list [(ngModel)]=\"noPerformerStrategy\" name=\"noPerformerStrategy\" [idField]=\"'value'\"\r\n                          [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"noPerformerStrategyList\" [panelHeight]=\"60\">\r\n                        </farris-combo-list>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h5 class=\"title-text\">{{'component.performerOptions.excludeProcInstCreator'|wfLocale}}</h5><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludeProcInstCreator\" type=\"checkbox\" id=\"excludeProcInstCreator\"\r\n                            [(ngModel)]=\"excludeProcInstCreator\" (change)=\"excludeProcInstCreatorClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"excludeProcInstCreator\">{{'component.performerOptions.defaultNotParticipate'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludePreActExecutors\" type=\"checkbox\" id=\"excludePreActExecutors\"\r\n                            [(ngModel)]=\"excludePreActExecutors\" (change)=\"excludePreActExecutorsClick($event)\"/>\r\n                          <label class=\"custom-control-label\" for=\"excludePreActExecutors\">{{'component.performerOptions.excludePreActExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludeAllPassExecutors\" type=\"checkbox\" id=\"excludeAllPassExecutors\"\r\n                            [(ngModel)]=\"excludeAllPassExecutors\" (change)=\"excludeAllPassExecutorsClick($event)\"/>\r\n                          <label class=\"custom-control-label\" for=\"excludeAllPassExecutors\">{{'component.performerOptions.excludeAllPassExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto pr-4 my-2\">\r\n                  <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{'component.performerOptions.excludeExprPerformer'|wfLocale}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div #inputGroup class=\"input-group\">\r\n                          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"excludeExprPerformer\" name=\"excludeExprPerformer\"\r\n                            [readOnly]=\"true\" />\r\n                          <div class=\"input-group-append\">\r\n                            <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                              (click)=\"clear()\">\r\n                              <i class=\"f-icon modal_close\"></i>\r\n                            </span>\r\n                            <span class=\"input-group-text\" (click)=\"openExprEditor()\" style=\"background: #FFF;\">\r\n                              <i class=\"f-icon f-icon-lookup\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"excludeExprPerformer != null || excludeExprPerformer != ''\">\r\n                  <div class=\"col-9 farris-group-auto my-2 pr-4\">\r\n                    <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{'component.performerOptions.variableOrgTypes'|wfLocale}}</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\" style=\"margin-bottom: 5px;\">\r\n                          <div class=\"custom-control custom-checkbox\">\r\n                            <farris-radiogroup [data]=\"variableOrgTypes\" [horizontal]=\"true\" [(ngModel)]=\"exprPerformerType\" name=\"referObject\"\r\n                              (changeValue)=\"orgTypeChange($event)\"></farris-radiogroup>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"performerOptionsLocation!='autoActivity'\">\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h5 class=\"title-text\">{{'component.performerOptions.automaticApprovalOptions'|wfLocale}}</h5><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoProcInstCreator\" type=\"checkbox\" id=\"autoProcInstCreator\"\r\n                            [(ngModel)]=\"autoProcInstCreator\" (change)=\"autoProcInstCreatorClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoProcInstCreator\">{{'component.performerOptions.autoProcInstCreator'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoPreActExecutors\" type=\"checkbox\" id=\"autoPreActExecutors\"\r\n                            [(ngModel)]=\"autoPreActExecutors\" (change)=\"autoPreActExecutorsClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoPreActExecutors\">{{'component.performerOptions.autoPreActExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoAllPassExecutors\" type=\"checkbox\" id=\"autoAllPassExecutors\"\r\n                            [(ngModel)]=\"autoAllPassExecutors\" (change)=\"autoAllPassExecutorsClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoAllPassExecutors\">{{'component.performerOptions.autoAllPassExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"cancel()\">{{'component.performerOptions.cancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.performerOptions.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".item-header{padding:1rem}.item{padding:.5rem 5rem}.title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:450px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
            }] }
];
/** @nocollapse */
PerformerOptionsComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
PerformerOptionsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    value: [{ type: Input }],
    exclusionPerformers: [{ type: Input }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};
class PerformerOptionsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        return this.localePipe.transform("component.performerOptions.set");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PerformerComponent {
    // 编辑状态，用于区分是新增还是编辑  new | edit
    /**
     * @param {?} viewModel
     * @param {?} uistate
     * @param {?} formBuilder
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} http
     */
    constructor(viewModel, uistate, formBuilder, resolver, injector, modalService, message, designerUIState, expr, http) {
        this.viewModel = viewModel;
        this.uistate = uistate;
        this.formBuilder = formBuilder;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.display = true; // 控制矩阵参与者是否显示
        // 控制矩阵参与者是否显示
        this.type = 'defaultPerformer';
        this.nodeType = 'userActivity';
        // 解决选择意见后，下拉菜单无法收折的问题
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.isClose = true;
        this.modalConfig = {
            title: '参与者',
            width: 700,
            height: 400,
            showButtons: true
        };
        this.columns = [
            {
                field: 'type', width: 50, title: '类型',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            },
            { field: 'performerName', width: 50, title: '名称' },
            { field: 'description', width: 100, title: '描述', showTips: true },
            {
                field: 'condition', width: 60, title: '启用条件', showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            if (e.rowData.type === 'wf.ComponentParticipantExpression') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.components.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.components[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.ReportingLineParticipantExpression') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.reportingLines.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.reportingLines[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.MatrixParticipantExpression') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.matrixParticipants[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.ActivityExecutorParticipantExpression') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.activityExecutors.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.activityExecutors[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.OrganizationParticipantExpression') {
                                this.uistate.performerInfo.organizationParticipants[0].condition = '';
                            }
                        })
                    }
                }
            }
        ];
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of$1(true);
        });
        this.GetOrganizationType();
    }
    /**
     * @param {?} partInfo
     * @return {?}
     */
    set value(partInfo) {
        if (partInfo.performers && partInfo.performers.length > 0) {
            this.uistate.performerInfo.performers = partInfo.performers;
            this.uistate.performersList = this.uistate.performersList.concat((/** @type {?} */ (partInfo.performers)));
            this.uistate.performersList.map((/**
             * @param {?} performer
             * @return {?}
             */
            performer => performer.description = this.performerDescription((/** @type {?} */ (performer)))));
        }
        if (partInfo.variablePerformers && partInfo.variablePerformers.length > 0) {
            this.uistate.performerInfo.variablePerformers = partInfo.variablePerformers;
            this.uistate.performersList = this.uistate.performersList.concat((/** @type {?} */ (partInfo.variablePerformers)));
            this.uistate.performersList.map((/**
             * @param {?} variablePerformers
             * @return {?}
             */
            variablePerformers => variablePerformers.description = this.performerDescription((/** @type {?} */ (variablePerformers)))));
        }
        if (partInfo.components && partInfo.components.length > 0) {
            this.uistate.performerInfo.components = partInfo.components;
            partInfo.components.forEach((/**
             * @param {?} cmp
             * @return {?}
             */
            cmp => {
                this.uistate.performersList.push({
                    id: cmp.id,
                    type: 'wf.ComponentParticipantExpression',
                    performerName: cmp.name,
                    description: this.componentDescription(cmp),
                    condition: cmp.condition
                });
            }));
        }
        if (partInfo.reportingLines && partInfo.reportingLines.length > 0) {
            this.uistate.performerInfo.reportingLines = partInfo.reportingLines;
            partInfo.reportingLines.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.uistate.performersList.push({
                    id: r.id,
                    type: 'wf.ReportingLineParticipantExpression',
                    performerName: r.reportingLineDefName + '-' + r.dimension,
                    description: this.reportingLineDescription(r),
                    condition: r.condition
                });
            }));
        }
        if (partInfo.activityExecutors && partInfo.activityExecutors.length > 0) {
            this.uistate.performerInfo.activityExecutors = partInfo.activityExecutors;
            partInfo.activityExecutors.forEach((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                this.uistate.performersList.push({
                    id: handler.id,
                    type: 'wf.ActivityExecutorParticipantExpression',
                    performerName: '<' + handler.activityDefName + '>活动办理人',
                    description: '<' + handler.activityDefName + '>活动办理人',
                    condition: handler.condition
                });
            }));
        }
        if (partInfo.matrixParticipants && partInfo.matrixParticipants.length > 0) {
            this.uistate.performerInfo.matrixParticipants = partInfo.matrixParticipants;
            partInfo.matrixParticipants.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.uistate.performersList.push({
                    id: r.id,
                    type: 'wf.MatrixParticipantExpression',
                    performerName: r.matrixDefName + '-' + r.dataFieldAlias,
                    description: this.matrixDescription(r),
                    condition: r.condition
                });
            }));
        }
        if (partInfo.organizationParticipants && partInfo.organizationParticipants.length > 0) {
            this.uistate.performerInfo.organizationParticipants = partInfo.organizationParticipants;
            partInfo.organizationParticipants.forEach((/**
             * @param {?} o
             * @return {?}
             */
            o => {
                this.uistate.performersList.push({
                    id: o.id,
                    type: 'wf.OrganizationParticipantExpression',
                    performerName: o.organizationName,
                    description: o.organizationName + '，' + (o.includeChildren ? '包含下级' : '不包含下级'),
                    condition: o.condition
                });
            }));
        }
        if (partInfo.options) {
            this.uistate.performerInfo.options = partInfo.options;
        }
        this.uistate.performerInfo.isAllScope = partInfo.isAllScope;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.type = this.editorParams.type;
        this.nodeType = this.editorParams.nodeType;
        this.getMatrixConfig().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re && re.currentValue === 'false') {
                this.display = false;
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    switchChange(data) {
        if (data) {
            this.uistate.clearPerformer();
        }
    }
    // add() {
    //   this.editState = 'new';
    //   const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
    //   this.compRef = compFactory.create(this.injector);
    //   this.compRef.instance.display = this.display;
    //   const modalConfig = {
    //     title: '参与者选择',
    //     width: 700,
    //     height: 400,
    //     buttons: this.editFooter,
    //     showButtons: true
    //   };
    //   this.editDialog = this.modalService.show(this.compRef, modalConfig);
    // }
    /**
     * @param {?} performerType
     * @return {?}
     */
    addPerformer(performerType) {
        this.editState = 'new';
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.display = this.display;
        this.compRef.instance.performerType = performerType;
        /** @type {?} */
        const modalConfig = {
            title: '参与者选择',
            width: 700,
            height: 400,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
        this.dropDownEl.close();
    }
    /**
     * @return {?}
     */
    edit() {
        this.editState = 'edit';
        if (this.uistate.curPerformer) {
            /** @type {?} */
            const modalConfig = {
                title: '参与者选择',
                width: 700,
                height: 400,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            this.compRef.instance.performerType = this.uistate.curPerformer.type;
            switch (this.uistate.curPerformer.type) {
                case 'wf.PositionParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipantExpression',
                        value: this.uistate.performerInfo.performers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.id === this.uistate.curPerformer.id))
                    };
                    break;
                case 'wf.UserParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipantExpression',
                        value: this.uistate.performerInfo.performers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.id === this.uistate.curPerformer.id))
                    };
                    break;
                case 'wf.VariableParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.VariableParticipantExpression',
                        value: this.uistate.performerInfo.variablePerformers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.id === this.uistate.curPerformer.id))
                    };
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    /** @type {?} */
                    const reportingLine = this.uistate.performerInfo.reportingLines.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        return r.id === this.uistate.curPerformer.id;
                    }));
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipantExpression',
                        value: reportingLine
                    };
                    /** @type {?} */
                    const url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + reportingLine.reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error('该条汇报关系数据的定义已删除，该条数据将删除');
                            this.remove();
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipantExpression':
                    /** @type {?} */
                    const matrix = this.uistate.performerInfo.matrixParticipants.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        return r.id === this.uistate.curPerformer.id;
                    }));
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipantExpression',
                        value: matrix
                    };
                    /** @type {?} */
                    const urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + matrix.matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error('该条矩阵数据的定义已删除，该条数据将删除');
                            this.remove();
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipantExpression',
                        value: this.uistate.performerInfo.components.find((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => {
                            return c.id === this.uistate.curPerformer.id;
                        }))
                    };
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ActivityExecutorParticipantExpression',
                        value: this.uistate.performerInfo.activityExecutors.find((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => {
                            return c.id === this.uistate.curPerformer.id;
                        }))
                    };
                    break;
                case 'wf.OrganizationParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.OrganizationParticipantExpression',
                        value: this.uistate.performerInfo.organizationParticipants[0]
                    };
                    break;
            }
            if (this.uistate.curPerformer.type !== 'wf.ReportingLineParticipantExpression' &&
                this.uistate.curPerformer.type !== 'wf.MatrixParticipantExpression') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig);
            }
        }
    }
    /**
     * @return {?}
     */
    remove() {
        if (this.grid.selectedRow) {
            this.grid.endCellEdit();
            if (this.grid.selectedRow.data.type === 'wf.ComponentParticipantExpression') {
                /** @type {?} */
                const i = this.uistate.performerInfo.components.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.components.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.ReportingLineParticipantExpression') {
                /** @type {?} */
                const i = this.uistate.performerInfo.reportingLines.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.reportingLines.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.MatrixParticipantExpression') {
                /** @type {?} */
                const i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.matrixParticipants.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.ActivityExecutorParticipantExpression') {
                /** @type {?} */
                const i = this.uistate.performerInfo.activityExecutors.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.activityExecutors.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.OrganizationParticipantExpression') {
                /** @type {?} */
                const i = this.uistate.performerInfo.organizationParticipants = new Array();
            }
            else if (this.grid.selectedRow.data.type === 'wf.VariableParticipantExpression') {
                /** @type {?} */
                const i = this.uistate.performerInfo.variablePerformers.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.variablePerformers.splice(i, 1);
            }
            else {
                /** @type {?} */
                const i = this.uistate.performerInfo.performers.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.performers.splice(i, 1);
            }
            /** @type {?} */
            const index = this.uistate.performersList.findIndex((/**
             * @param {?} p
             * @return {?}
             */
            p => p.id === this.grid.selectedRow.data.id));
            this.uistate.performersList.splice(index, 1);
            this.grid.loadData(this.uistate.performersList);
        }
        else {
            this.message.info('请先选中一条参与者信息！');
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.uistate.performerInfo.performers = [];
        this.uistate.performerInfo.variablePerformers = [];
        this.uistate.performerInfo.components = [];
        this.uistate.performerInfo.reportingLines = [];
        this.uistate.performerInfo.matrixParticipants = [];
        this.uistate.performerInfo.activityExecutors = [];
        this.uistate.performerInfo.organizationParticipants = new Array();
        this.uistate.performersList = [];
        this.grid.loadData(this.uistate.performersList);
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        /** @type {?} */
        const object = {
            value: this.uistate.performerInfo, parameters: null
        };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    editOK() {
        this.isClose = true;
        if (this.compRef) {
            /** @type {?} */
            const re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                re.userPerformers.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    /** @type {?} */
                    const i = this.uistate.performerInfo.performers.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => (a.id === p.id || a.performerId === p.performerId)));
                    if (i > -1) {
                        /** @type {?} */
                        const id = this.uistate.performerInfo.performers[i].id;
                        this.uistate.performerInfo.performers[i] = p;
                        /** @type {?} */
                        const index = this.uistate.performersList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => a.id === id));
                        this.uistate.performersList[index] = p;
                    }
                    else {
                        if (this.editState === 'edit') {
                            this.remove();
                        }
                        this.uistate.performerInfo.performers.push(p);
                        this.uistate.performersList = this.uistate.performersList.concat([p]);
                    }
                }));
                this.uistate.performersList
                    .filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type === this.uistate.typeCollection[0].value || p.type === this.uistate.typeCollection[1].value))
                    .map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                performer => performer.description =
                    this.performerDescription((/** @type {?} */ (performer)))));
            }
            if (re.positions && re.positions.length > 0) {
                for (const position of re.positions) {
                    if (position && position !== null && position.id) {
                        /** @type {?} */
                        const p = position;
                        if (!p.performerId) {
                            this.message.info('尚未选择岗位！');
                            this.isClose = false;
                        }
                        else {
                            if ((!p.orgType || p.orgType == null) && (p.isRequired && p.positionType === '1')) {
                                this.message.info('尚未选择组织类型！');
                                this.isClose = false;
                            }
                            else if ((!p.orgId || p.orgId == null) && (p.isRequired && p.positionType === '1')) {
                                this.message.info('尚未填写组织！');
                                this.isClose = false;
                            }
                            else {
                                // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                                /** @type {?} */
                                const i = this.uistate.performerInfo.performers.findIndex((/**
                                 * @param {?} a
                                 * @return {?}
                                 */
                                a => (a.id === p.id || (a.performerId === p.performerId && a.orgId === p.orgId))));
                                if (i > -1) {
                                    /** @type {?} */
                                    const id = this.uistate.performerInfo.performers[i].id;
                                    this.uistate.performerInfo.performers[i] = p;
                                    /** @type {?} */
                                    const index = this.uistate.performersList.findIndex((/**
                                     * @param {?} a
                                     * @return {?}
                                     */
                                    a => a.id === id));
                                    this.uistate.performersList[index] = p;
                                }
                                else {
                                    this.uistate.performerInfo.performers.push(p);
                                    this.uistate.performersList = this.uistate.performersList.concat([p]);
                                }
                                this.uistate.performersList
                                    .filter((/**
                                 * @param {?} p
                                 * @return {?}
                                 */
                                p => p.type === this.uistate.typeCollection[0].value || p.type === this.uistate.typeCollection[1].value))
                                    .map((/**
                                 * @param {?} performer
                                 * @return {?}
                                 */
                                performer => performer.description =
                                    this.performerDescription((/** @type {?} */ (performer)))));
                            }
                        }
                    }
                }
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                /** @type {?} */
                const i = this.uistate.performerInfo.components.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === re.component.id));
                if (i > -1) {
                    this.uistate.performerInfo.components[i] = re.component;
                    /** @type {?} */
                    const index = this.uistate.performersList.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.id === re.component.id));
                    this.uistate.performersList[index] = {
                        id: re.component.id,
                        type: 'wf.ComponentParticipantExpression',
                        performerName: re.component.name,
                        description: this.componentDescription(re.component),
                        condition: re.component.condition
                    };
                }
                else {
                    this.uistate.performerInfo.components.push(re.component);
                    this.uistate.performersList.push({
                        id: re.component.id,
                        type: 'wf.ComponentParticipantExpression',
                        performerName: re.component.name,
                        description: this.componentDescription(re.component),
                        condition: ''
                    });
                }
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                if (re.reportingLine.reportingReferObject === 'dept' && !re.reportingLine.refOrgId) {
                    this.isClose = false;
                    this.message.info('“部门”汇报关系类型下，参照人所在部门不能为空');
                }
                else if (re.reportingLine.reportingReferObject !== 'dept' && !re.reportingLine.refUserId && !re.reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
                    this.isClose = false;
                    this.message.info('“用户”汇报关系类型下，参照人不能为空');
                }
                else {
                    this.isClose = true;
                    this.addReportingLineData(re);
                }
            }
            if (re.matrix && re.matrix.matrixDefId) {
                if (!re.matrix.conditionField1 && !re.matrix.conditionField2 && !re.matrix.conditionField3) {
                    this.isClose = false;
                    this.message.info('条件字段至少要存在一个');
                }
                else if (!re.matrix.dataFieldAlias) {
                    this.isClose = false;
                    this.message.info('数据字段不能为空');
                }
                else {
                    this.isClose = true;
                    this.addMatrixData(re);
                }
            }
            if (re.activityExecutorPerformers && re.activityExecutorPerformers.length > 0) {
                re.activityExecutorPerformers.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    /** @type {?} */
                    const i = this.uistate.performerInfo.activityExecutors.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => (a.id === p.id || a.activityDefId === p.activityDefId)));
                    if (i < 0) {
                        if (this.editState === 'edit') {
                            this.remove(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                        }
                        this.uistate.performerInfo.activityExecutors.push(p);
                        this.uistate.performersList = this.uistate.performersList.concat([p]);
                    }
                }));
                this.uistate.performersList
                    .filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type === this.uistate.typeCollection[5].value))
                    .map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                performer => performer.description =
                    this.performerDescription((/** @type {?} */ (performer)))));
            }
            if (re.organizationParticipant) {
                console.log(re.organizationParticipant);
                this.uistate.performerInfo.organizationParticipants = [re.organizationParticipant];
                this.uistate.performersList = this.uistate.performersList.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type !== 'wf.OrganizationParticipantExpression'));
                this.uistate.performersList = this.uistate.performersList.concat({
                    id: re.organizationParticipant.id || ProcessDeUtil.GenerateElementId(),
                    type: 'wf.OrganizationParticipantExpression',
                    performerName: re.organizationParticipant.organizationName,
                    description: re.organizationParticipant.organizationName + '，且' + (re.organizationParticipant.includeChildren ? '包含下级' : '不包含下级'),
                    condition: re.organizationParticipant.condition
                });
            }
            this.grid.loadData(this.uistate.performersList);
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
    }
    /**
     * @private
     * @param {?} re
     * @return {?}
     */
    addReportingLineData(re) {
        /** @type {?} */
        const i = this.uistate.performerInfo.reportingLines.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id === re.reportingLine.id));
        if (i > -1) {
            this.uistate.performerInfo.reportingLines[i] = re.reportingLine;
            /** @type {?} */
            const index = this.uistate.performersList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === re.reportingLine.id));
            this.uistate.performersList[index] = {
                id: re.reportingLine.id,
                type: 'wf.ReportingLineParticipantExpression',
                performerName: re.reportingLine.reportingLineDefName + '-' + re.reportingLine.dimension,
                description: this.reportingLineDescription(re.reportingLine),
                condition: re.reportingLine.condition
            };
        }
        else {
            for (const reportingLineData of this.uistate.performerInfo.reportingLines) {
                if (reportingLineData.reportingLineDefId === re.reportingLine.definitionId &&
                    reportingLineData.dimension === re.reportingLine.dimension &&
                    reportingLineData.refUserId === re.reportingLine.referUserId &&
                    reportingLineData.refEmployeeId === re.reportingLine.refEmployeeId &&
                    reportingLineData.refOrgId === re.reportingLine.referDeptId) {
                    this.message.error('该汇报关系已经进行过配置');
                    return;
                }
            }
            this.uistate.performerInfo.reportingLines.push(re.reportingLine);
            this.uistate.performersList.push({
                id: re.reportingLine.id,
                type: 'wf.ReportingLineParticipantExpression',
                performerName: re.reportingLine.reportingLineDefName + '-' + re.reportingLine.dimension,
                description: this.reportingLineDescription(re.reportingLine),
                condition: re.reportingLine.condition
            });
        }
    }
    /**
     * @private
     * @param {?} re
     * @return {?}
     */
    addMatrixData(re) {
        /** @type {?} */
        const i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id === re.matrix.id));
        if (i > -1) {
            this.uistate.performerInfo.matrixParticipants[i] = re.matrix;
            /** @type {?} */
            const index = this.uistate.performersList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === re.matrix.id));
            this.uistate.performersList[index] = {
                id: re.matrix.id,
                type: 'wf.MatrixParticipantExpression',
                performerName: re.matrix.matrixDefName + '-' + re.matrix.dataFieldAlias,
                description: this.matrixDescription(re.matrix),
                condition: re.matrix.condition
            };
        }
        else {
            for (const matrixData of this.uistate.performerInfo.matrixParticipants) {
                if (matrixData.matrixDefId === re.matrix.matrixDefId &&
                    matrixData.conditionField1 === re.matrix.conditionField1 &&
                    matrixData.conditionField2 === re.matrix.conditionField2 &&
                    matrixData.conditionField3 === re.matrix.conditionField3 &&
                    matrixData.dataFieldAlias === re.matrix.dataFieldAlias) {
                    this.message.error('该矩阵已经进行过配置');
                    return;
                }
            }
            this.uistate.performerInfo.matrixParticipants.push(re.matrix);
            this.uistate.performersList.push({
                id: re.matrix.id,
                type: 'wf.MatrixParticipantExpression',
                performerName: re.matrix.matrixDefName + '-' + re.matrix.dataFieldAlias,
                description: this.matrixDescription(re.matrix),
                condition: re.matrix.condition
            });
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        if (this.editDialog) {
            this.editDialog.close();
        }
    }
    /**
     * @return {?}
     */
    participantOptionsSet() {
        this.uistate.performerInfo.options = this.options.getPerformerOptions();
        this.optionsDialog.close();
    }
    /**
     * @private
     * @param {?} performer
     * @return {?}
     */
    performerDescription(performer) {
        if (performer.type === 'wf.UserParticipantExpression' || performer.type === 'wf.VariableParticipantExpression') {
            if (performer.tag === 'expression') {
                return performer.performerId;
            }
            else {
                if (performer.orgName) {
                    return `组织：${performer.orgName}`;
                }
                else {
                    return '';
                }
            }
        }
        else if (performer.type === 'wf.PositionParticipantExpression') {
            if (this.designerUIState.scene === 'inSuite') {
                return null;
            }
            if (((/** @type {?} */ (performer))).positionType === '1') {
                if (performer.orgId) {
                    return `岗位类型：通用岗位，组织：${performer.orgId}`;
                }
                else {
                    return `岗位类型：通用岗位`;
                }
            }
            else if (((/** @type {?} */ (performer))).positionType === '0') {
                return '岗位类型：组织岗位';
            }
        }
        else if (performer.type === 'wf.ActivityExecutorParticipantExpression') {
            return performer.performerName;
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    componentDescription(component) {
        /** @type {?} */
        let des = `构件：${component.name},参数：{`;
        if (component.actualParameters && component.actualParameters.length > 0) {
            component.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                des += `${p.code}：${p.value}，`;
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    reportingLineDescription(reportingLine) {
        /** @type {?} */
        let description = '';
        if (reportingLine.refUserId) {
            description += `参照人：${reportingLine.refUserId}`;
        }
        if (reportingLine.refEmployeeId) {
            description += `参照人：${reportingLine.refEmployeeId}`;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += `，`;
            }
            if (reportingLine.refEmployeeId) {
                description += `，`;
            }
            description += `参照组织：${reportingLine.refOrgId}`;
        }
        return description;
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    matrixDescription(matrix) {
        /** @type {?} */
        let description = '';
        if (matrix.conditionField1) {
            description += `条件1：${matrix.conditionFieldText1}，`;
        }
        if (matrix.conditionField2) {
            description += `条件2：${matrix.conditionFieldText2}，`;
        }
        if (matrix.conditionField3) {
            description += `条件3：${matrix.conditionFieldText3}，`;
        }
        if (matrix.dataFieldAlias) {
            description += `数据：${matrix.dataFieldAlias}，`;
        }
        return description.slice(0, description.length - 1);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (this.grid.selectedRow.data.type === 'wf.ComponentParticipantExpression') {
                this.uistate.performerInfo.components.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else if (this.grid.selectedRow.data.type === 'wf.ReportingLineParticipantExpression') {
                this.uistate.performerInfo.reportingLines.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else if (this.grid.selectedRow.data.type === 'wf.MatrixParticipantExpression') {
                this.uistate.performerInfo.matrixParticipants.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else if (this.grid.selectedRow.data.type === 'wf.ActivityExecutorParticipantExpression') {
                this.uistate.performerInfo.activityExecutors.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else {
                this.uistate.performerInfo.performers.find((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectChanged(data) {
        this.uistate.curPerformer = data.data;
    }
    /**
     * @private
     * @return {?}
     */
    GetOrganizationType() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ value: d.id, text: d.name })))));
    }
    /**
     * @private
     * @return {?}
     */
    getMatrixConfig() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/generalConfig/Is_EnableMatrix`;
        return this.http.get(url);
    }
}
PerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 *ngIf=\"nodeType==='notifyActivity' || type==='defaultPerformer'\"  class=\"f-title-text\">\u529E\u7406\u4EBA\u5217\u8868</h4>\r\n        <h5 *ngIf=\"type==='assignPerformer'\" class=\"f-title-subtitle\">\u5168\u5458\u8303\u56F4</h5>\r\n        <farris-switch *ngIf=\"type==='assignPerformer'\" style=\"height: 22px;\"\r\n          [(ngModel)]=\"uistate.performerInfo.isAllScope\" name=\"isAllScope\"\r\n          [readonly]=\"false\" (valueChange)=\"switchChange($event)\"></farris-switch>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      <!--<button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>-->\r\n        <div *ngIf=\"type!=='assignPerformer' || !uistate.performerInfo.isAllScope\" class=\"btn-group mr-2\"  fDropdown #dropdownEl=\"fDropdown\">\r\n          <button class=\"btn btn-primary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n            \u65B0\u589E\r\n          </button>\r\n          <div class=\"dropdown-menu\" fDropdownMenu>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression')\"><span>\u7528\u6237</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression')\"><span>\u53D8\u91CF\u53C2\u4E0E\u8005</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression')\"><span>{{designerUIState.scene==='inSuite'?'\u89D2\u8272':'\u5C97\u4F4D'}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression')\"><span>\u6C47\u62A5\u5173\u7CFB</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression')\"><span>\u5386\u53F2\u6D3B\u52A8\u529E\u7406\u4EBA</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression')\"><span>\u77E9\u9635\u5173\u7CFB</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression')\"><span>\u53C2\u4E0E\u8005\u6784\u4EF6</span></li>\r\n            <li *ngIf=\"type==='assignPerformer'\" class=\"dropdown-item\" (click)=\"addPerformer('wf.OrganizationParticipantExpression')\"><span>\u5355\u4F4D/\u90E8\u95E8\r\n            </span></li>\r\n          </div>\r\n        </div>\r\n        <button *ngIf=\"type!=='assignPerformer' || !uistate.performerInfo.isAllScope\" class=\"btn btn-secondary mr-2\" [disabled]=\"(!uistate.curPerformer)\"\r\n        (click)=\"edit()\">\u7F16\u8F91</button>\r\n        <button *ngIf=\"type!=='assignPerformer' || !uistate.performerInfo.isAllScope\" class=\"btn btn-secondary mr-2\" (click)=\"remove()\">\u79FB\u9664</button>\r\n        <button *ngIf=\"type!=='assignPerformer' || !uistate.performerInfo.isAllScope\" class=\"btn btn-secondary mr-2\" (click)=\"clear()\">\u6E05\u7A7A</button>\r\n        <button *ngIf=\"nodeType==='userActivity' && type==='defaultPerformer'\" class=\"btn btn-secondary\" (click)=\"participantOptions.show()\">\u529E\u7406\u4EBA\u9009\u9879</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"uistate.performersList\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" (selectChanged)=\"selectChanged($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n</ng-template>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">\u53D6\u6D88</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">\u786E\u5B9A</button>\r\n</ng-template>\r\n\r\n<farris-dialog #participantOptions [buttons]=\"buttonRef\" [width]=\"500\" [height]=\"530\" title=\"'\u53C2\u4E0E\u8005\u9009\u9879'\">\r\n  <app-performer-options [value]=\"uistate.performerInfo.options\"></app-performer-options>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"participantOptions.close()\">\u53D6\u6D88</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"participantOptionsSet()\">\u786E\u5B9A</button>\r\n</ng-template>\r\n",
                providers: [PerformerViewModel, PerformerRepository, PerformerUIState],
                styles: [""]
            }] }
];
/** @nocollapse */
PerformerComponent.ctorParameters = () => [
    { type: PerformerViewModel },
    { type: PerformerUIState },
    { type: FormBuilder },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: HttpService }
];
PerformerComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    options: [{ type: ViewChild, args: [PerformerOptionsComponent,] }],
    optionsDialog: [{ type: ViewChild, args: ['participantOptions',] }],
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    dropDownEl: [{ type: ViewChild, args: ['dropdownEl',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }]
};
class PerformerConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if ((data.performers && data.performers.length > 0)
            || (data.variablePerformers && data.variablePerformers.length > 0)
            || (data.components && data.components.length > 0)
            || (data.reportingLines && data.reportingLines.length > 0)
            || (data.matrixParticipants && data.matrixParticipants.length > 0)
            || (data.activityExecutors && data.activityExecutors.length > 0)
            || (data.organizationParticipants && data.organizationParticipants.length > 0)
            || data.isAllScope) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActionOrganizationScope {
}
class ActionOrganizationScopeDesign {
}
class OrganizationPotentialOwner {
}
/** @enum {string} */
const ActionScope$2 = {
    /**
     * 指派
     */
    AssignUser: 'AssignUser',
    /**
     * 移交
     */
    Transfer: 'Transfer',
    /**
     * 征询
     */
    AddSignFront: 'AddSignFront',
    /**
     * 加签
     */
    AddSignBehind: 'AddSignBehind',
    /**
     * 知会
     */
    Notify: "Notify",
};
/** @enum {string} */
const OrganizationLevel$2 = {
    /**
     * 部门
     */
    DEPARTMENT: 'DEPARTMENT',
    /**
     * 单位
     */
    UNIT: 'UNIT',
    /**
     * 默认值
     */
    DEFAULT: 'DEFAULT',
    VARORGANIZATION: 'VARORGANIZATION',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignConfig {
    constructor() {
        this.operator = 'currentUser';
        this.multiSelect = true;
        this.necessary = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignStrategy {
    constructor() {
        this.assignStrategy = 'ALL';
        this.assignConfig = new AssignConfig();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantInfo {
    constructor() {
        this.assignStrategy = new AssignStrategy();
        this.humanPerformerList = new Array();
        this.potentialOwnerList = new Array();
        this.isAllScope = false;
    }
}
class Participant {
}
class ComponentParticipant extends Participant {
}
class OrganizationParticipant extends Participant {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantUIState {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
        this.typeCollection = [
            { text: this.localePipe.transform('component.participant.user'), value: 'wf.UserParticipantExpression' },
            { text: this.localePipe.transform('component.participant.variable'), value: 'wf.VariableParticipantExpression' },
            { text: this.localePipe.transform('component.participant.position'), value: 'wf.PositionParticipantExpression' },
            { text: this.localePipe.transform('component.participant.component'), value: 'wf.ComponentParticipantExpression' },
            { text: this.localePipe.transform('component.participant.reportingLine'), value: 'wf.ReportingLineParticipantExpression' },
            { text: this.localePipe.transform('component.participant.matrix'), value: 'wf.MatrixParticipantExpression' },
            { text: this.localePipe.transform('component.participant.activityExecutor'), value: 'wf.ActivityExecutorParticipantExpression' },
            { text: this.localePipe.transform('component.participant.organization'), value: 'wf.OrganizationParticipantExpression' }
        ];
    }
}
ParticipantUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParticipantUIState.ctorParameters = () => [
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AlternativeParticipantComponent {
    /**
     * @param {?} designerUIState
     * @param {?} uistate
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} expr
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, uistate, resolver, injector, modalService, message, expr, http, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.uistate = uistate;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.nodeType = 'notifyActivity';
        this.isClose = true;
        this.participant = new ParticipantInfo();
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.type = 'potentialOwner';
        this.operatorCollection = [
            { text: this.localePipe.transform('component.participant.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.participant.procInstCreator'), value: 'procInstCreator' }
        ];
        this.columns = [
            {
                field: 'order', width: 25, title: this.localePipe.transform('component.participant.order'),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
            }, {
                field: 'type', width: 50, title: this.localePipe.transform('component.participant.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            }, {
                field: 'performerName', width: 50, title: this.localePipe.transform('component.participant.performerName'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return d.performerName;
                        case 'wf.VariableParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.PositionParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.ComponentParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.ReportingLineParticipantExpression':
                            return ((/** @type {?} */ (d))).reportingLineDefName + '-' + ((/** @type {?} */ (d))).dimension;
                        case 'wf.MatrixParticipantExpression':
                            return ((/** @type {?} */ (d))).matrixDefName + '-' + ((/** @type {?} */ (d))).dataFieldAlias;
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName;
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'description', width: 100, title: this.localePipe.transform('component.participant.description'), showTips: true,
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return this.getUserPerformerDescription(d);
                        case 'wf.VariableParticipantExpression':
                            return this.getVariablePerformerDescription(d);
                        case 'wf.PositionParticipantExpression':
                            return this.getPositionPerformerDescription(d);
                        case 'wf.ComponentParticipantExpression':
                            return this.getComponentPerformerDescription(d);
                        case 'wf.ReportingLineParticipantExpression':
                            return this.getReportingLinePerformerDescription(d);
                        case 'wf.MatrixParticipantExpression':
                            return this.getMatrixPerformerDescription(d);
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName + '，且' + (((/** @type {?} */ (d))).includeChildren ? '包含下级' : '不包含下级');
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'condition', width: 60, title: this.localePipe.transform('component.participant.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nodeType = this.editorParams.nodeType;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    switchChange(data) {
        if (data) {
            this.clearPerformer('potentialOwner');
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    assignStrategyChange(data) {
        // this.preAssignStrategy = data;
        if (data === 'ALL') {
            this.participant.isAllScope = true;
            this.clearPerformer('potentialOwner');
        }
        else {
            this.participant.isAllScope = false;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    isEnable(data) {
        if (data) {
            this.participant.isAllScope = true;
            this.clearPerformer('potentialOwner');
        }
        else {
            this.participant.isAllScope = false;
        }
    }
    /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    addPerformer(performerType, type) {
        this.editState = 'new';
        this.type = type;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.performerType = performerType;
        /** @type {?} */
        const boxsize = this.attributeBoxSize(performerType);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.participant.participantSelection'),
            width: boxsize.width,
            height: boxsize.height,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
        // this.dropDownEl.close();
        if (this.dropDownE2) {
            this.dropDownE2.close();
        }
    }
    /**
     * @return {?}
     */
    editOK() {
        this.isClose = true;
        if (this.compRef) {
            /** @type {?} */
            const re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                for (const p of re.userPerformers) {
                    this.addUserPerformer(p);
                }
            }
            if (re.variable && re.variable !== null && re.variable.performerId) {
                this.addvariablePerformer(re.variable);
            }
            // 2023-7-28 组织岗支持多选
            if (re.positions && re.positions.length > 0) {
                this.addPositionPerformer(re.positions);
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                this.addComponentPerformer(re.component);
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                this.addReportingLinePerformer(re.reportingLine);
            }
            if (re.matrix && re.matrix.matrixDefId) {
                this.addMatrixPerformer(re.matrix);
            }
            if (re.activityExecutorPerformers && re.activityExecutorPerformers.length > 0) {
                for (const a of re.activityExecutorPerformers) {
                    this.addActivityExecutorPerformer(a);
                }
            }
            if (re.organizationParticipant) {
                this.addOrganizationParticipant(re.organizationParticipant);
            }
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
        // 编辑完成后刷新两个组件
        // this.humanPerformerGrid.refresh();
        this.potentialOwnerGrid.refresh();
    }
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    addUserPerformer(userPerformer) {
        if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId))));
            if (i > -1) ;
            else {
                if (this.editState === 'edit') {
                    this.removePotentialOwner();
                }
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.potentialOwnerList.push(userPerformer);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    addvariablePerformer(variable) {
        /** @type {?} */
        const v = variable;
        if (!v || !v.varValue) {
            this.message.info(this.localePipe.transform('component.participant.selectProcessVariables'));
            this.isClose = false;
        }
        else if (!v.varType) {
            this.message.info(this.localePipe.transform('component.participant.selectVariableValueType'));
            this.isClose = false;
        }
        else if (!v.relation) {
            this.message.info(this.localePipe.transform('component.participant.selectRelation'));
            this.isClose = false;
        }
        else {
            if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId))));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removePotentialOwner();
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.potentialOwnerList.push(variable);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    addPositionPerformer(positions) {
        for (const position of positions) {
            if (!position.performerId) {
                this.message.info(this.localePipe.transform('component.participant.selectPosition'));
                this.isClose = false;
            }
            else {
                if ((!position.orgType || position.orgType == null) && (position.isRequired && position.positionType === '1')) {
                    this.message.info(this.localePipe.transform('component.participant.selectOrgType'));
                    this.isClose = false;
                }
                else if ((!position.orgId || position.orgId == null) && (position.isRequired && position.positionType === '1')) {
                    this.message.info(this.localePipe.transform('component.participant.orgFill'));
                    this.isClose = false;
                }
                else {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    if (this.type === 'potentialOwner') {
                        /** @type {?} */
                        const i = this.participant.potentialOwnerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            const p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this.participant.potentialOwnerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            let index;
                            if (this.participant.potentialOwnerList.length > 0) {
                                index = Math.max(...this.participant.potentialOwnerList.map((/**
                                 * @param {?} p
                                 * @return {?}
                                 */
                                p => p.order))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this.participant.potentialOwnerList.push(position);
                        }
                        this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    addComponentPerformer(component) {
        /** @type {?} */
        const cmp = new ComponentParticipant();
        cmp.id = component.id;
        cmp.metadataId = component.metadataId;
        cmp.methodCode = component.methodCode;
        cmp.methodName = component.methodName;
        cmp.name = component.name;
        cmp.actualParameters = component.actualParameters;
        cmp.type = 'wf.ComponentParticipantExpression';
        cmp.condition = component.condition;
        if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === cmp.id));
            if (i > -1) {
                this.participant.potentialOwnerList[i] = cmp;
            }
            else {
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.potentialOwnerList.push(cmp);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    addReportingLinePerformer(reportingLine) {
        if (reportingLine.reportingReferObject === 'dept' && !reportingLine.refOrgId) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refOrgIdNotNull'));
        }
        else if (reportingLine.reportingReferObject !== 'dept' && !reportingLine.refUserId && !reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refUserIdNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === reportingLine.id));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    const reportingLines = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.ReportingLineParticipantExpression'));
                    for (const r of reportingLines) {
                        /** @type {?} */
                        const reportingLineData = (/** @type {?} */ (r));
                        if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                            reportingLineData.dimension === reportingLine.dimension &&
                            reportingLineData.refUserId === reportingLine.refUserId &&
                            reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                            reportingLineData.refOrgId === reportingLine.refOrgId) {
                            this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.potentialOwnerList.push(reportingLine);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    addMatrixPerformer(matrix) {
        if (!matrix.conditionField1 && !matrix.conditionField2 && !matrix.conditionField3) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.atLeastOneCondition'));
        }
        else if (!matrix.dataFieldAlias) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.dataFieldAliasNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === matrix.id));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    const matrixParticipants = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.MatrixParticipantExpression'));
                    for (const m of matrixParticipants) {
                        /** @type {?} */
                        const matrixData = (/** @type {?} */ (m));
                        if (matrixData.matrixDefId === matrix.matrixDefId &&
                            matrixData.conditionField1 === matrix.conditionField1 &&
                            matrixData.conditionField2 === matrix.conditionField2 &&
                            matrixData.conditionField3 === matrix.conditionField3 &&
                            matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                            this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.potentialOwnerList.push(matrix);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    addActivityExecutorPerformer(activityExecutor) {
        if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId))));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removePotentialOwner(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.potentialOwnerList.push(activityExecutor);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @param {?} organization
     * @return {?}
     */
    addOrganizationParticipant(organization) {
        /** @type {?} */
        const organizationParticipant = new OrganizationParticipant();
        organizationParticipant.id = organization.id || ProcessDeUtil.GenerateElementId();
        organizationParticipant.type = 'wf.OrganizationParticipantExpression';
        organizationParticipant.condition = organization.condition;
        organizationParticipant.name = organization.name;
        organizationParticipant.actionScope = organization.actionScope;
        organizationParticipant.organizationLevel = organization.organizationLevel;
        organizationParticipant.organizationId = organization.organizationId;
        organizationParticipant.organizationCode = organization.organizationCode;
        organizationParticipant.organizationName = organization.organizationName;
        organizationParticipant.includeChildren = organization.includeChildren;
        organizationParticipant.parentsUntil = organization.parentsUntil;
        organizationParticipant.tag = organization.tag;
        if (this.type === 'potentialOwner') {
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            /** @type {?} */
            let index;
            if (this.participant.potentialOwnerList.length > 0) {
                index = Math.max(...this.participant.potentialOwnerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.order))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.potentialOwnerList.push(organizationParticipant);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        if (this.editDialog) {
            this.editDialog.close();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    editPerformer(type) {
        this.editState = 'edit';
        this.type = type;
        /** @type {?} */
        let selectedRow;
        if (type === 'potentialOwner') {
            selectedRow = this.potentialOwnerGrid.selectedRow;
        }
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.participant.selectPerformer'));
            return;
        }
        /** @type {?} */
        const curPerformer = selectedRow.data;
        if (curPerformer) {
            /** @type {?} */
            const boxsize = this.attributeBoxSize(curPerformer.type);
            /** @type {?} */
            const modalConfig = {
                title: this.localePipe.transform('component.participant.participantSelection'),
                width: boxsize.width,
                height: boxsize.height,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            this.compRef.instance.performerType = curPerformer.type;
            this.compRef.instance.editState = this.editState;
            switch (curPerformer.type) {
                case 'wf.PositionParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.UserParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.VariableParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.VariableParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    const url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + ((/** @type {?} */ (curPerformer))).reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error(this.localePipe.transform('component.participant.definitionDeleted'));
                            if (type === 'potentialOwner') {
                                this.removePotentialOwner();
                            }
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    const urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + ((/** @type {?} */ (curPerformer))).matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error(this.localePipe.transform('component.participant.matrixDeleted'));
                            if (type === 'potentialOwner') {
                                this.removePotentialOwner();
                            }
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ActivityExecutorParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.OrganizationParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.OrganizationParticipantExpression',
                        value: curPerformer
                    };
                    break;
            }
            if (curPerformer.type !== 'wf.ReportingLineParticipantExpression' &&
                curPerformer.type !== 'wf.MatrixParticipantExpression') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig);
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    removePerformer(type) {
        if (type === 'potentialOwner') {
            if (this.potentialOwnerGrid.selectedRow) {
                this.potentialOwnerGrid.endCellEdit();
                /** @type {?} */
                const index = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.potentialOwnerGrid.selectedRow.data.id));
                this.participant.potentialOwnerList.splice(index, 1);
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    clearPerformer(type) {
        if (type === 'potentialOwner') {
            this.participant.potentialOwnerList = new Array();
        }
        // this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    moveUp(type) {
        if (type === 'potentialOwner') {
            /** @type {?} */
            const selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            const index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i - 1].order;
            this.participant.potentialOwnerList[i - 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i - 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer.id, true);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    moveDown(type) {
        if (type === 'potentialOwner') {
            /** @type {?} */
            const selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === this.participant.potentialOwnerList.length - 1) {
                return;
            }
            /** @type {?} */
            const index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i + 1].order;
            this.participant.potentialOwnerList[i + 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i + 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer.id, true);
        }
    }
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
    /**
     * @return {?}
     */
    removePotentialOwner() {
        if (this.potentialOwnerGrid.selectedRow) {
            this.potentialOwnerGrid.endCellEdit();
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === this.potentialOwnerGrid.selectedRow.data.id));
            this.participant.potentialOwnerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectpotentialtHandler'));
        }
    }
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    getUserPerformerDescription(userPerformer) {
        if (userPerformer.tag === 'expression') {
            return userPerformer.performerId;
        }
        else {
            if (userPerformer.orgName) {
                return this.localePipe.transform('component.participant.org') + userPerformer.orgName;
            }
            else {
                return '';
            }
        }
    }
    /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    getVariablePerformerDescription(variablePerformer) {
        if (variablePerformer.tag === 'expression') {
            return variablePerformer.varValue;
        }
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    getPositionPerformerDescription(position) {
        if (this.designerUIState.scene === 'inSuite') {
            return null;
        }
        if (position.positionType === '1') {
            if (position.orgId) {
                return this.localePipe.transform('component.participant.positionType1') + position.orgId;
            }
            else {
                return this.localePipe.transform('component.participant.positionType2');
            }
        }
        else if (position.positionType === '0') {
            return this.localePipe.transform('component.participant.positionType3');
        }
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    getComponentPerformerDescription(position) {
        /** @type {?} */
        let des = this.localePipe.transform('component.participant.comp') + position.name
            + this.localePipe.transform('component.participant.parameters');
        if (position.actualParameters && position.actualParameters.length > 0) {
            position.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                des += `${p.code}：${p.value}，`;
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    getReportingLinePerformerDescription(reportingLine) {
        /** @type {?} */
        let description = '';
        if (reportingLine.refUserId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refUserId;
        }
        if (reportingLine.refEmployeeId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refEmployeeId;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += `，`;
            }
            if (reportingLine.refEmployeeId) {
                description += `，`;
            }
            description += this.localePipe.transform('component.participant.referenceOrganization') + reportingLine.refOrgId;
        }
        return description;
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    getMatrixPerformerDescription(matrix) {
        /** @type {?} */
        let description = '';
        if (matrix.conditionField1) {
            description += this.localePipe.transform('component.participant.condition1') + matrix.conditionFieldText1 + `，`;
        }
        if (matrix.conditionField2) {
            description += this.localePipe.transform('component.participant.condition2') + matrix.conditionFieldText2 + `，`;
        }
        if (matrix.conditionField3) {
            description += this.localePipe.transform('component.participant.condition3') + matrix.conditionFieldText3 + `，`;
        }
        if (matrix.dataFieldAlias) {
            description += this.localePipe.transform('component.participant.data') + matrix.dataFieldAlias + `，`;
        }
        return description.slice(0, description.length - 1);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (this.potentialOwnerGrid && this.potentialOwnerGrid.selectedRow && this.potentialOwnerGrid.selectedRow.data) {
                /** @type {?} */
                let temp = this.participant.potentialOwnerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.id === this.potentialOwnerGrid.selectedRow.data.id));
                temp.condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    GetOrganizationType() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ value: d.id, text: d.name })))));
    }
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    attributeBoxSize(boxType) {
        /** @type {?} */
        const boxsize = {
            width: 760,
            height: 512
        };
        switch (boxType) {
            case 'wf.PositionParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 455;
                return boxsize;
            case 'wf.UserParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
            case 'wf.VariableParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 420;
                return boxsize;

            case 'wf.ReportingLineParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;

            case 'wf.MatrixParticipantExpression':
                boxsize.width = 780;
                boxsize.height = 420;
                return boxsize;

            case 'wf.ComponentParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;

            case 'wf.ActivityExecutorParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;

            case 'wf.OrganizationParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 360;
                return boxsize;

        }
    }
}
AlternativeParticipantComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-alternative-participant',
                template: "<div class=\"f-page-main d-flex flex-column farris-overflow-y-auto farris-overflow-x-auto\" style=\"height: 300px\">\r\n  <div class=\"f-page-header\">\r\n    <div class=\"farris-group-wrap\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\" style=\"width: 4.9rem\">\r\n          <span class=\"farris-label-text\">{{'component.orgPotentialOwner.limit'|wfLocale}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap ml-1\">\r\n          <farris-switch [(ngModel)]=\"participant.isAllScope\" name=\"enable\" (valueChange)=\"isEnable($event)\"></farris-switch>\r\n        </div>\r\n        <div class=\"f-toolbar last-div farris-form-controls-inline\" [ngStyle]=\"{'visibility' : participant.isAllScope ? 'visible' : 'hidden'}\">\r\n          <div class=\"btn-group mr-2\"  fDropdown #dropdownE2=\"fDropdown\" [autoRectify]=\"true\">\r\n            <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n              {{'component.participant.new'|wfLocale}}\r\n            </farris-button>\r\n            <div class=\"dropdown-menu\" fDropdownMenu>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression','potentialOwner')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','potentialOwner')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','potentialOwner')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','potentialOwner')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','potentialOwner')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','potentialOwner')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','potentialOwner')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.OrganizationParticipantExpression','potentialOwner')\"><span>{{'component.participant.organization'|wfLocale}}\r\n              </span></li>\r\n            </div>\r\n          </div>\r\n          <farris-button  [type]=\"'link'\" (click)=\"editPerformer('potentialOwner')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"removePerformer('potentialOwner')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('potentialOwner')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveUp('potentialOwner')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveDown('potentialOwner')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"f-utils-fill farris-overflow-y-auto\">\r\n    <farris-datagrid #potentialOwnerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.potentialOwnerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n      [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n      [multiSelect]=\"false\">\r\n    </farris-datagrid>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    ParticipantUIState,
                    WfLocalePipe
                ],
                styles: [".container{display:flex;justify-content:space-between}.last-div{margin-left:auto}"]
            }] }
];
/** @nocollapse */
AlternativeParticipantComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ParticipantUIState },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ExpressionService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AlternativeParticipantComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    dropDownE2: [{ type: ViewChild, args: ['dropdownE2',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    potentialOwnerGrid: [{ type: ViewChild, args: ['potentialOwnerGrid',] }],
    editorParams: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrganizationPotentialOwnerComponent {
    /**
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?} expr
     * @param {?} message
     * @param {?} designerUIState
     */
    constructor(cdr, localeId, resources, localePipe, expr, message, designerUIState) {
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.expr = expr;
        this.message = message;
        this.designerUIState = designerUIState;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.organizationLevelCollection = [{
                value: 'GLOBAL',
                text: this.localePipe.transform('component.orgPotentialOwner.global'),
                orgId: 'global',
            }, {
                value: 'UNIT',
                text: this.localePipe.transform('component.orgPotentialOwner.currentUnit'),
                orgId: 'currentUnit'
            }, {
                value: 'DEPARTMENT',
                text: this.localePipe.transform('component.orgPotentialOwner.currentDepartment'),
                orgId: 'currentDepartment'
            },
            {
                value: 'VARORGANIZATION',
                text: this.localePipe.transform('component.orgPotentialOwner.variableOrganization'),
                orgId: ''
            }];
        this.actionCollection = [{
                value: ActionScope$2.AddSignBehind, name: this.localePipe.transform('component.orgPotentialOwner.addSignBehind')
            }, {
                value: ActionScope$2.AddSignFront, name: this.localePipe.transform('component.orgPotentialOwner.addSignFront')
            }, {
                value: ActionScope$2.Transfer, name: this.localePipe.transform('component.orgPotentialOwner.transfer')
            }, {
                value: ActionScope$2.Notify, name: this.localePipe.transform('component.orgPotentialOwner.notify')
            }];
        this.enable = false;
        this.organizationLevel = this.organizationLevelCollection[0].value;
        this.action = this.actionCollection[0].value;
        this.includeChildren = false;
        this.organizationId = '';
        this.showClearButton = false;
        this.actionName = (/**
         * @return {?}
         */
        () => {
            return this.actionCollection.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.value === this.action)).name;
        });
        this.modalConfig = {
            title: this.localePipe.transform('component.orgPotentialOwner.optionSettings'),
            width: 760,
            height: 506,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this.action = (/** @type {?} */ (v.action));
        if (this.action === this.actionCollection[2].value) {
            if (v.enable === null || v.enable === undefined) {
                this.enable = true;
            }
            else {
                this.enable = v.enable;
            }
        }
        else {
            this.enable = v.enable;
        }
        if (v.scope) {
            this.alternativeParticipant.participant.isAllScope = true;
            /** @type {?} */
            let organizationParticipantExpression = new OrganizationParticipantExpression$1();
            organizationParticipantExpression.actionScope = (/** @type {?} */ (v.action));
            if (v.scope.organizationLevel === OrganizationLevel$2.DEFAULT && v.scope.tag === 'expression') {
                organizationParticipantExpression.organizationLevel = OrganizationLevel$2.VARORGANIZATION;
                organizationParticipantExpression.tag = v.scope.tag;
                this.organizationLevel = OrganizationLevel$2.VARORGANIZATION;
            }
            else if (v.scope.organizationLevel) {
                this.organizationLevel = v.scope.organizationLevel;
            }
            this.includeChildren = v.scope.includeChildren;
            organizationParticipantExpression.includeChildren = v.scope.includeChildren;
            this.organizationId = v.scope.organizationId;
            organizationParticipantExpression.organizationId = v.scope.organizationId;
            organizationParticipantExpression.organizationName = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            o => o.value === this.organizationLevel)).text;
            this.alternativeParticipant.addOrganizationParticipant(organizationParticipantExpression);
            if (v.scope.participantInfo) {
                this.alternativeParticipant.participant = v.scope.participantInfo;
            }
            else {
                this.alternativeParticipant.participant = new ParticipantInfo();
            }
        }
        else {
            this.alternativeParticipant.participant.isAllScope = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validate()) {
            /** @type {?} */
            const scope = new ActionOrganizationScopeDesign();
            scope.enable = this.enable;
            scope.action = (/** @type {?} */ (this.action));
            if (this.alternativeParticipant.participant.isAllScope) {
                /** @type {?} */
                const potential = new OrganizationPotentialOwner();
                potential.actionScope = this.action;
                // potential.organizationLevel = this.organizationLevel as OrganizationLevel;
                // potential.organizationId = this.organizationLevelCollection.find(o => o.value === this.organizationLevel).orgId || this.organizationId;
                // potential.organizationName = this.organizationLevelCollection.find(o => o.value === this.organizationLevel).text;
                // potential.includeChildren = this.includeChildren;
                // if (potential.organizationLevel === OrganizationLevel.VARORGANIZATION) {
                //   potential.tag = 'expression';
                //   potential.organizationLevel = OrganizationLevel.DEFAULT;
                // } else {
                //   potential.tag = 'variable';
                // }
                scope.scope = (/** @type {?} */ (potential));
                scope.scope.participantInfo = this.alternativeParticipant.participant;
            }
            /** @type {?} */
            const object = { value: scope, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    validate() {
        if (this.alternativeParticipant.participant.isAllScope &&
            (!this.alternativeParticipant.participant.potentialOwnerList || this.alternativeParticipant.participant.potentialOwnerList.length <= 0)) {
            this.message.info(this.localePipe.transform('component.orgPotentialOwner.turnOffPrompt'));
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChange(event) {
        switch (event.value) {
            case this.organizationLevelCollection[0].value:
                this.includeChildren = false;
                break;
            case this.organizationLevelCollection[1].value:
                this.includeChildren = true;
                break;
            case this.organizationLevelCollection[2].value:
                this.includeChildren = false;
                break;
            case this.organizationLevelCollection[3].value:
                this.includeChildren = true;
                this.organizationId = '';
                break;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clear($event) {
        this.organizationId = '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectValue(data) {
        this.showExprHelp();
    }
    /**
     * @return {?}
     */
    showExprHelp() {
        /** @type {?} */
        const context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        // 预置表达式展示文本
        if (this.organizationId) {
            this.expr.addExpressionText(this.organizationId);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            if (expressioninfo) {
                this.organizationId = expressioninfo;
                this.organizationLevelCollection[3].orgId = expressioninfo;
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
OrganizationPotentialOwnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-organization-potential-owner',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100 farris-overflow-y-auto farris-overflow-y-auto\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100 farris-overflow-y-auto\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 5.3rem\">\r\n                  <span class=\"farris-label-text\">{{('component.orgPotentialOwner.enable'|wfLocale) + actionName()}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"enable\" name=\"enable\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <wf-alternative-participant [editorParams] = \"editorParams.nodeType\">\r\n            </wf-alternative-participant>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.orgPotentialOwner.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.orgPotentialOwner.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:390px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
            }] }
];
/** @nocollapse */
OrganizationPotentialOwnerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ProcessDesignerUIState }
];
OrganizationPotentialOwnerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    alternativeParticipant: [{ type: ViewChild, args: [AlternativeParticipantComponent,] }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
class OrganizationPotentialOwnerConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.action === (/** @type {?} */ (ActionScope$2.Transfer)) && (data.enable === null || data.enable === undefined)) {
            return this.localePipe.transform("component.orgPotentialOwner.set");
        }
        else {
            if (data && data.enable) {
                return this.localePipe.transform("component.orgPotentialOwner.set");
            }
            else {
                return this.localePipe.transform("component.orgPotentialOwner.notSet");
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AnonymousSet {
    constructor() {
        this.isAnonymity = false;
        this.anonymous = '审批人';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AnonymousSetComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(injector, cdr, localeId, resources, localePipe) {
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.anonymousSet = new AnonymousSet();
        this.modalConfig = {
            title: this.localePipe.transform('component.anonymousSet.anonymousOpt'),
            width: 450,
            height: 360,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        this.anonymousSet.isAnonymity = data.isAnonymity || false;
        this.anonymousSet.anonymous = data.anonymous || this.localePipe.transform('component.anonymousSet.approver');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const object = { value: this.anonymousSet, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
}
AnonymousSetComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-anonymous-set',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{'component.anonymousSet.anonymousSet'|wfLocale}}</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.anonymousSet.isAnonymity'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"anonymousSet.isAnonymity\" name=\"isAnonymity\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto mt-4 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.anonymousSet.anonymous'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <textarea class=\"form-control\" type=\"text\" value=\"anonymous\" [(ngModel)]=\"anonymousSet.anonymous\" name=\"anonymous\"\r\n                  style=\"height: 50px;\" [readOnly]=\"!anonymousSet.isAnonymity\"></textarea>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.anonymousSet.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.anonymousSet.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AnonymousSetComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AnonymousSetComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
class AnonymousSetConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.isAnonymity) {
            return this.localePipe.transform("component.anonymousSet.set");
        }
        else {
            return this.localePipe.transform("component.anonymousSet.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariableSetting$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariableSettingComponent {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} uistate
     * @param {?} expr
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(resolver, injector, modalService, message, uistate, expr, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.value = new Array();
        this.editorParams = {};
        this.columns = [];
        this.tags = [
            { value: 'constant', text: this.localePipe.transform("component.variableSetting.constant") },
            { value: 'expression', text: this.localePipe.transform("component.variableSetting.expression") },
            { value: 'component', text: this.localePipe.transform("component.variableSetting.component") }
        ];
        this.opportunities = [
            { value: 'ACTIVITY_STARTED', text: this.localePipe.transform("component.variableSetting.ACTIVITY_STARTED") },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform("component.variableSetting.ACTIVITY_COMPLETED") }
        ];
        this.modalConfig = {
            title: this.localePipe.transform("component.variableSetting.varAssign"),
            width: 780,
            height: 460,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            const column = param.column;
            if (column.field === 'valueText') {
                if (((/** @type {?} */ (rowData))).tag === this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            {
                field: 'variableCode', width: 90, title: this.localePipe.transform("component.variableSetting.varNumber"), sortable: true,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'variableName', width: 90, title: this.localePipe.transform("component.variableSetting.varName"), sortable: true,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'tag', width: 60, title: this.localePipe.transform("component.variableSetting.valueType"), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto', showClear: false,
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.value = this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                if (v.variableCode === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'executionTime', width: 80, title: this.localePipe.transform("component.variableSetting.executionTime"), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.opportunities }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.opportunities, idField: 'value', panelHeight: 'auto', showClear: false,
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ],
            },
            {
                field: 'valueText', width: 150, title: this.localePipe.transform("component.variableSetting.valueText"), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }
        ];
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ProcessVariablesComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.variableSetting = true;
        compRef.instance.value = this.uistate.ProcessVariables;
        compRef.instance.selectedValue = this.value;
        compRef.instance.variableSetEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            for (const v of re) {
                /** @type {?} */
                const variableSet = new VariableSetting$1();
                variableSet.variableCode = v.data.name;
                variableSet.variableName = v.data.documentation;
                variableSet.tag = v.data.tag || this.tags[0].value;
                variableSet.executionTime = v.data.executionTime || this.opportunities[0].value;
                if (this.value.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.variableCode === variableSet.variableCode)) === -1) {
                    this.value = this.value.concat([variableSet]);
                }
            }
            dialog.close();
        }));
        compRef.instance.closeModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.variableSetting.processVariables"),
            width: 660,
            height: 460,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        /** @type {?} */
        const selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info(this.localePipe.transform("component.variableSetting.notSelectedVar"));
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v.variableCode !== selected.data.variableCode));
    }
    /**
     * @return {?}
     */
    clickOK() {
        // 先结束编辑状态
        this.grid.endCellEdit();
        // 等待编辑状态结束后再进行校验
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.validator()) {
                /** @type {?} */
                const object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }), 300);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    validator() {
        for (const item of this.value) {
            if (!item.value) {
                this.message.warning(this.localePipe.transform("component.variableSetting.valueCannotEmpty"));
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    endEdit(data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    valueEdit(e) {
        /** @type {?} */
        const rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editExpression(e) {
        // this.expr.clearContext();
        /** @type {?} */
        const data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            e.form.bindingData.value = re;
            e.form.value.value = re;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editComponent(e) {
        /** @type {?} */
        const data = e.rowData;
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            e.form.bindingData.value = re.Id;
            e.form.value.value = re.Id;
            e.form.value.component = re;
            e.form.bindingData.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.variableSetting.component"),
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
}
VariableSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-variable-setting',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">{{'component.variableSetting.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.variableSetting.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'variableCode'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"\r\n        [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.variableSetting.lineNumber' | wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\"\r\n        (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.variableSetting.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.variableSetting.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #cell let-ctx>\r\n  <span (click)=\"valueEdit(ctx)\" class=\"link\">\r\n    {{ ctx.rowData.value ? ('component.variableSetting.set' | wfLocale) : ('component.variableSetting.notSet' | wfLocale) }}\r\n  </span>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".link{color:#1206bb;font-size:14px}.link:hover{color:#5d478b;font-size:14px}"]
            }] }
];
/** @nocollapse */
VariableSettingComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
VariableSettingComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    cell: [{ type: ViewChild, args: ['cell',] }]
};
class VariableSettingConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.variableSetting.set");
        }
        else {
            return this.localePipe.transform("component.variableSetting.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovalPivotConfig$1 {
    constructor() {
        this.localePipe = null;
        this.enable = false;
        this.title = '审批要点';
        this.approvalPivots = new Array();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovalPivot$1 {
    constructor() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.type = 'REMIND';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApprovalPivotComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, expr, message, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.config = new ApprovalPivotConfig$1();
        this.typeList = [
            { value: 'REMIND', text: this.localePipe.transform('component.approvalPivot.remind') }
        ];
        this.columns = [
            {
                field: 'type', width: 80, title: this.localePipe.transform('component.approvalPivot.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.typeList }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.typeList, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'condition', width: 120, title: this.localePipe.transform('component.approvalPivot.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            },
            {
                field: 'title', width: 80, title: this.localePipe.transform('component.approvalPivot.title'),
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }, {
                field: 'description', width: 100, title: this.localePipe.transform('component.approvalPivot.description'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.approvalPivot.approvalPivot'),
            width: 800,
            height: 480,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        this.config.localePipe = this.localePipe;
        if (data) {
            this.config.enable = data.enable;
            this.config.title = data.title;
            this.config.expand = data.expand;
            if (data.approvalPivots && data.approvalPivots.length > 0) {
                for (const a of data.approvalPivots) {
                    /** @type {?} */
                    const approvalPivot = new ApprovalPivot$1();
                    approvalPivot.type = a.type;
                    approvalPivot.title = a.title;
                    approvalPivot.description = a.description;
                    if (a.condition) {
                        if (typeof (a.condition) === 'string') {
                            approvalPivot.condition = a.condition;
                        }
                        else {
                            approvalPivot.condition = a.condition._value;
                        }
                    }
                    this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const approvalPivot = new ApprovalPivot$1();
        this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
    }
    /**
     * @return {?}
     */
    delete() {
        /** @type {?} */
        const selectedRow = this.grid.selectedRow;
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.approvalPivot.selectedRow'));
            return;
        }
        this.config.approvalPivots = this.config.approvalPivots.filter((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id !== selectedRow.id));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (!this.config.title && this.config.enable) {
            this.message.info(this.localePipe.transform('component.approvalPivot.configTitle'));
            return;
        }
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.config, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        return true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional);
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
ApprovalPivotComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-approval-pivot',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.approvalPivot.approvalPivot'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"wf-process-pivot\">\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.enable'|wfLocale}}</span>\r\n          <farris-switch [(ngModel)]=\"config.enable\" name=\"enable\"></farris-switch>\r\n        </div>\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.expand'|wfLocale}}</span>\r\n          <farris-switch [(ngModel)]=\"config.expand\" name=\"expand\" [disabled]=\"!config.enable\"></farris-switch>\r\n        </div>\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.showTitle'|wfLocale}}</span>\r\n          <div class=\"farris-input-wrap\">\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"config.title\" name=\"title\" [readonly]=\"!config.enable\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" mainTitle=\"{{'component.approvalPivot.list'|wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-link pr-2 mr-2\" (click)=\"add()\" [disabled]=\"!config.enable\">{{'component.approvalPivot.add'|wfLocale}}</button>\r\n        <button class=\"btn btn-link mr-0\" (click)=\"delete()\" [disabled]=\"!config.enable\">{{'component.approvalPivot.delete'|wfLocale}}</button>\r\n      </ng-template>\r\n      <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"config.approvalPivots\" #grid [idField]=\"'id'\" [showLineNumber]=\"true\"\r\n        [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n        [multiSelect]=\"false\" [disabled]=\"!config.enable\">\r\n      </farris-datagrid>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.approvalPivot.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.approvalPivot.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".wf-process-pivot{display:flex;align-items:center;margin-bottom:20px}.wf-process-pivot-actions{display:flex;padding-left:30px;align-items:center}.wf-process-pivot-actions-text{padding-right:10px}"]
            }] }
];
/** @nocollapse */
ApprovalPivotComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ApprovalPivotComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    value: [{ type: Input }]
};
class ApprovalPivotConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.enable) {
            return this.localePipe.transform('component.approvalPivot.set');
        }
        else {
            return this.localePipe.transform('component.approvalPivot.notSet');
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UrgeHandleRule$1 {
    /**
     * @return {?}
     */
    cconstructor() {
        this.urgeHandleAble = false;
        this.earlyTime = 0;
        this.intervalTime = 0;
        this.urgeMessageSubject = "{\"expr\":\"'催办审批：' + DefaultFunction.GetContextParameter(\\\"bizDefName\\\")\",\"sexpr\":\"\"}";
        this.urgeMessageContent = "{\"expr\":\"'请您尽快审批' + DefaultFunction.GetContextParameter(\\\"procInstCreatorName\\\") + '的' + DefaultFunction.GetContextParameter(\\\"bizDefName\\\") + '。'\",\"sexpr\":\"\"}";
        this.addReminder = false;
        this.subjectEditable = true;
        this.contentEditable = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UrgeHandleRuleComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, expr, message, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.urgeHandleRule = new UrgeHandleRule$1();
        this.typeGroup = this.designerUIState.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        m => ({ value: m.code, name: m.name })));
        this.modalConfig = {
            title: this.localePipe.transform("component.urgeHandleRule.urgeHandle"),
            width: 800,
            height: 515,
            showButtons: true
        };
        this.hasSmsTemplate = false;
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return Number(val);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (!data) {
            this.urgeHandleRule.urgeHandleAble = true;
            this.urgeHandleRule.earlyTime = 0;
            this.urgeHandleRule.intervalTime = 0;
            this.urgeHandleRule.sendType = 'cloudplus,inmail';
            this.urgeHandleRule.urgeMessageSubject = `{\"expr\":\"'${this.localePipe.transform("component.urgeHandleRule.urgentApproval")}' + DefaultFunction.GetContextParameter(\\\"bizDefName\\\")\",\"sexpr\":\"\"}`;
            this.urgeHandleRule.urgeMessageContent = `{\"expr\":\"'${this.localePipe.transform("component.urgeHandleRule.pleaseApprove")}' + DefaultFunction.GetContextParameter(\\\"procInstCreatorName\\\") + '${this.localePipe.transform("component.urgeHandleRule.soOn")}' + DefaultFunction.GetContextParameter(\\\"bizDefName\\\") + '。'\",\"sexpr\":\"\"}`;
        }
        else {
            this.urgeHandleRule = data;
            if (this.hasSmsMessage(this.urgeHandleRule.sendType)) {
                this.hasSmsTemplate = true;
                if (!this.urgeHandleRule.smsMessageTemplate) {
                    this.urgeHandleRule.smsMessageTemplate = new SmsMessageTemplate$1();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.SmsTemplate) {
            this.SmsTemplate.endGridEdit();
        }
        if (this.hasSmsTemplate) {
            this.urgeHandleRule.smsMessageTemplate = this.SmsTemplate.smsMessageTemplate;
            if (this.urgeHandleRule.smsMessageTemplate.smsMessageVariables && this.urgeHandleRule.smsMessageTemplate.smsMessageVariables.length > 0) {
                this.urgeHandleRule.smsMessageTemplate.smsMessageVariables = this.urgeHandleRule.smsMessageTemplate.smsMessageVariables.filter((/**
                 * @param {?} variable
                 * @return {?}
                 */
                variable => variable.code));
            }
        }
        else {
            this.urgeHandleRule.smsMessageTemplate = null;
        }
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.urgeHandleRule, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.urgeHandleRule.sendType) {
            this.message.info(this.localePipe.transform("component.urgeHandleRule.noSendingMethod"));
            return false;
        }
        //去除消息模板编号校验
        // if (this.hasSmsTemplate) {
        //   if (!this.urgeHandleRule.smsMessageTemplate) {
        //     this.message.info(this.localePipe.transform("component.urgeHandleRule.setMessageTemplate"));
        //     return;
        //   }
        //   if (!this.urgeHandleRule.smsMessageTemplate.code) {
        //     this.message.info(this.localePipe.transform("component.urgeHandleRule.codeEmpty"));
        //     return;
        //   }
        // }
        if (!this.urgeHandleRule.urgeMessageSubject) {
            this.message.info(this.localePipe.transform("component.urgeHandleRule.noMessageSubject"));
            return false;
        }
        if (!this.urgeHandleRule.urgeMessageContent) {
            this.message.info(this.localePipe.transform("component.urgeHandleRule.noMessageContent"));
            return false;
        }
        if (!this.urgeHandleRule.earlyTime && this.urgeHandleRule.earlyTime !== 0) {
            this.message.info(this.localePipe.transform("component.urgeHandleRule.earliestTimeNotEmpty"));
            return false;
        }
        if (!this.urgeHandleRule.intervalTime && this.urgeHandleRule.intervalTime !== 0) {
            this.message.info(this.localePipe.transform("component.urgeHandleRule.minimumTimeNotEmpty"));
            return false;
        }
        return true;
    }
    /**
     * @param {?} sendType
     * @return {?}
     */
    sendTypeChange(sendType) {
        if (this.hasSmsMessage(sendType)) {
            this.hasSmsTemplate = true;
            if (!this.urgeHandleRule.smsMessageTemplate) {
                this.urgeHandleRule.smsMessageTemplate = new SmsMessageTemplate$1();
            }
        }
        else {
            this.hasSmsTemplate = false;
            this.urgeHandleRule.smsMessageTemplate = null;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    titleExpr(data) {
        this.showTitleHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    contentExpr(data) {
        this.showContentHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showTitleHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.urgeHandleRule.urgeMessageSubject && this.urgeHandleRule.urgeMessageSubject.length > 0) {
            this.expr.addExpressionText(this.urgeHandleRule.urgeMessageSubject);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.urgeHandleRule.urgeMessageSubject = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showContentHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.urgeHandleRule.urgeMessageContent && this.urgeHandleRule.urgeMessageContent.length > 0) {
            this.expr.addExpressionText(this.urgeHandleRule.urgeMessageContent);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.urgeHandleRule.urgeMessageContent = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    showExpr() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.urgeContext.length > 0) {
            for (const variable of this.designerUIState.urgeContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        return context;
    }
    /**
     * @private
     * @param {?} sendType
     * @return {?}
     */
    hasSmsMessage(sendType) {
        if (sendType) {
            /** @type {?} */
            const sendTypeList = sendType.split(',');
            /** @type {?} */
            let messageChannel = sendTypeList.find((/**
             * @param {?} val
             * @return {?}
             */
            val => this.designerUIState.messageChannels.find((/**
             * @param {?} channel
             * @return {?}
             */
            channel => channel.code == val && channel.channelType == 'Sms'))));
            if (messageChannel) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
}
UrgeHandleRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-urge-handle-rule',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <perfect-scrollbar [config]=\"{}\">\r\n      <form class=\"h-100\">\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline farris-form-auto\">\r\n          <fieldset class=\"f-section-formgroup\">\r\n            <div class=\"f-section-formgroup-inputs\">\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.enableUrgeHandle' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-switch [(ngModel)]=\"urgeHandleRule.urgeHandleAble\" name=\"urgeHandleEnable\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-10 mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.timeSetting' | wfLocale}}</span>\r\n                    </label>\r\n                    <label class=\"mb-0\">\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.earliestTime' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                      <farris-number-spinner [(ngModel)]=\"urgeHandleRule.earlyTime\" name=\"earlyTime\" [editable]=\"true\" [precision]=\"0\"\r\n                        [parser]=\"parser\" [min]=\"0\"></farris-number-spinner>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-10\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\"></span>\r\n                    </label>\r\n                    <label class=\"mb-0\">\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.minimumInterval' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                      <farris-number-spinner [(ngModel)]=\"urgeHandleRule.intervalTime\" name=\"intervalTime\" [editable]=\"true\" [precision]=\"0\"\r\n                        [parser]=\"parser\" [min]=\"0\"></farris-number-spinner>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.sendingMethod' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"urgeHandleRule.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                        [data]=\"typeGroup\" (changeValue)=\"sendTypeChange($event)\">\r\n                      </farris-checkboxgroup>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.messageSubject' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                      <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                    [(value)]=\"urgeHandleRule.urgeMessageSubject\" (clickHandle)=\"titleExpr($event)\">\r\n                      </input-group>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.supportEditing' | wfLocale}}</span>\r\n                    </label>\r\n                    <!-- 2023-6-14 \u5728\u6D4B\u8BD5\u73AF\u5883\u4E2D\u51FA\u73B0\u6309\u94AE\u9760\u6700\u53F3\u7684\u60C5\u51B5\uFF0C\u5220\u9664style=\"text-align: right\"\u540E\u6B63\u5E38 -->\r\n                    <div class=\"farris-input-wrap\">\r\n                      <farris-switch [(ngModel)]=\"urgeHandleRule.subjectEditable\" name=\"enable1\" size=\"small\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-info text-danger\">*</span>\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.messageContent' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                      <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                    [(value)]=\"urgeHandleRule.urgeMessageContent\" (clickHandle)=\"contentExpr($event)\">\r\n                      </input-group>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.supportEditing' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <farris-switch [(ngModel)]=\"urgeHandleRule.contentEditable\" name=\"enable2\" size=\"small\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.urgeHandleRule.displayReminder' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <farris-switch [(ngModel)]=\"urgeHandleRule.addReminder\" name=\"enable\" size=\"small\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n        <lib-sms-message-template *ngIf=\"hasSmsTemplate\" [smsMessageTemplate]=\"urgeHandleRule.smsMessageTemplate\"></lib-sms-message-template>\r\n      </form>\r\n    </perfect-scrollbar>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.urgeHandleRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.urgeHandleRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
UrgeHandleRuleComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
UrgeHandleRuleComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    SmsTemplate: [{ type: ViewChild, args: [SmsMessageTemplateComponent,] }],
    value: [{ type: Input }]
};
class UrgeHandleRuleConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (!data) {
            return this.localePipe.transform("component.urgeHandleRule.set");
        }
        else if (data.urgeHandleAble) {
            return this.localePipe.transform("component.urgeHandleRule.set");
        }
        else {
            return this.localePipe.transform("component.urgeHandleRule.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckCondition$1 {
    /**
     * @param {?} checkTime
     */
    constructor(checkTime) {
        this.checkTime = checkTime;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckConditionComponent {
    /**
     * @param {?} injector
     * @param {?} message
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(injector, message, designerUIState, expr, http, cdr, localeId, resources, localePipe) {
        this.injector = injector;
        this.message = message;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.languages = [
            { code: 'zh-CHS', name: this.localePipe.transform('component.checkCondition.zhChs') },
            { code: 'zh-CHT', name: this.localePipe.transform('component.checkCondition.zhCht') },
            { code: 'en', name: this.localePipe.transform('component.checkCondition.en') }
        ];
        this.activityBeforeStarted = new CheckCondition$1('ACTIVITY_BEFORE_STARTED');
        this.activityBeforeCompleted = new CheckCondition$1('ACTIVITY_BEFORE_COMPLETED');
        this.modalConfig = {
            title: this.localePipe.transform('component.checkCondition.checkCondition'),
            width: 440,
            height: 460,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data && data.length > 0) {
            console.log(data);
            this.activityBeforeStarted = data.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d.checkTime === 'ACTIVITY_BEFORE_STARTED')) || new CheckCondition$1('ACTIVITY_BEFORE_STARTED');
            this.activityBeforeCompleted = data.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d.checkTime === 'ACTIVITY_BEFORE_COMPLETED')) || new CheckCondition$1('ACTIVITY_BEFORE_COMPLETED');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} checkTime
     * @return {?}
     */
    editCondition(checkTime) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        /** @type {?} */
        const text = checkTime === 'ACTIVITY_BEFORE_STARTED' ? this.activityBeforeStarted.value : this.activityBeforeCompleted.value;
        this.expr.addExpressionText(text);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (checkTime === 'ACTIVITY_BEFORE_STARTED') {
                this.activityBeforeStarted.value = cond;
            }
            else {
                this.activityBeforeCompleted.value = cond;
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} checkTime
     * @return {?}
     */
    clearCondition(checkTime) {
        if (checkTime === 'ACTIVITY_BEFORE_STARTED') {
            this.activityBeforeStarted.value = null;
        }
        else {
            this.activityBeforeCompleted.value = null;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const checkConditions = new Array();
        if (this.activityBeforeStarted.value || this.activityBeforeStarted.errorTips) {
            checkConditions.push(this.activityBeforeStarted);
        }
        if (this.activityBeforeCompleted.value || this.activityBeforeCompleted.errorTips) {
            checkConditions.push(this.activityBeforeCompleted);
        }
        /** @type {?} */
        const object = { value: checkConditions, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    validator() {
    }
}
CheckConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-check-condition',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.checkCondition.nodeEntry'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form mx-3\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.activityBeforeStarted' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input-group [editable]=\"false\" [(ngModel)]=\"activityBeforeStarted.value\" name= \"activityBeforeStarted\" (clickHandle)=\"editCondition('ACTIVITY_BEFORE_STARTED')\" [groupText]=\"groupIcon\" (clear)=\"clearCondition('ACTIVITY_BEFORE_STARTED')\"></input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\"></span>\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.enterErrorTips' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <language-textbox [languages]=\"languages\" [(ngModel)]=\"activityBeforeStarted.errorTips\" name=\"activityBeforeStartedErrorTips\"></language-textbox>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.checkCondition.activityBeforeCompleted'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <div class=\"f-form-layout farris-form mx-3\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.activityBeforeCompletedValue' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input-group [editable]=\"false\" [(ngModel)]=\"activityBeforeCompleted.value\" name= \"activityBeforeCompleted\" (clickHandle)=\"editCondition('ACTIVITY_BEFORE_COMPLETED')\" [groupText]=\"groupIcon\" (clear)=\"clearCondition('ACTIVITY_BEFORE_COMPLETED')\"></input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\"></span>\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.leaveErrorTips' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <language-textbox [languages]=\"languages\" [(ngModel)]=\"activityBeforeCompleted.errorTips\" name=\"activityBeforeCompletedErrorTips\"></language-textbox>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.checkCondition.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.checkCondition.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CheckConditionComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CheckConditionComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
class CheckConditionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.checkCondition.set");
        }
        return this.localePipe.transform("component.checkCondition.notSet");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignStrategyComponent {
    /**
     * @param {?} injector
     * @param {?} message
     * @param {?} designerUIState
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(injector, message, designerUIState, http, cdr, localeId, resources, localePipe) {
        this.injector = injector;
        this.message = message;
        this.designerUIState = designerUIState;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.assingPerformerConfigForm = new FormGroup({
            multiSelect: new FormControl(true),
            necessary: new FormControl(false)
        });
        this.assignStrategy = new AssignStrategy();
        this.assignStrategyList = [
            { value: 'ALL', name: this.localePipe.transform('component.assignStrategy.all') },
            { value: 'ASSIGN', name: this.localePipe.transform('component.assignStrategy.assign') },
            { value: 'CLAIM', name: this.localePipe.transform('component.assignStrategy.claim') }
        ];
        this.operatorCollection = [
            { text: this.localePipe.transform('component.assignStrategy.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.assignStrategy.procInstCreator'), value: 'procInstCreator' }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.assignStrategy.assignStrategy'),
            width: 405,
            height: 350,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} assignStrategy
     * @return {?}
     */
    set value(assignStrategy) {
        this.assignStrategy = assignStrategy || new AssignStrategy();
        if (!this.assignStrategy.assignConfig) {
            this.assignStrategy.assignConfig = new AssignConfig();
        }
        this.assingPerformerConfigForm.setValue({
            multiSelect: this.assignStrategy.assignConfig.multiSelect,
            necessary: this.assignStrategy.assignConfig.necessary
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeValue(event) {
        if (event === 'ASSIGN') {
            if (!this.assignStrategy.assignConfig) {
                this.assignStrategy.assignConfig = new AssignConfig();
            }
            this.assingPerformerConfigForm.setValue({
                multiSelect: this.assignStrategy.assignConfig.multiSelect,
                necessary: this.assignStrategy.assignConfig.necessary
            });
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.assignStrategy.assignConfig.multiSelect = this.assingPerformerConfigForm.get('multiSelect').value;
        this.assignStrategy.assignConfig.necessary = this.assingPerformerConfigForm.get('necessary').value;
        console.log(this.assignStrategy);
        /** @type {?} */
        const object = { value: this.assignStrategy, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
}
AssignStrategyComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-assign-strategy',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.assignStrategy.option' | wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap ml-2 pl-4\">\r\n                <div class=\"form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-radiogroup [(ngModel)]=\"assignStrategy.assignStrategy\" [data]=\"assignStrategyList\" name=\"assignStrategy\"\r\n                      [horizontal]=\"true\">\r\n                    </farris-radiogroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section *ngIf=\"assignStrategy.assignStrategy==='ASSIGN'\" class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.assignStrategy.assignmentRules' | wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\">\r\n      <form class=\"h-100\" [formGroup]=\"assingPerformerConfigForm\">\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n          <fieldset class=\"f-section-formgroup\">\r\n            <div class=\"f-section-formgroup-inputs\">\r\n              <div class=\"col-12\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.assignStrategy.operator' | wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                      <farris-combo-list [(ngModel)]=\"assignStrategy.assignConfig.operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                        [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                        [panelHeight]=\"60\">\r\n                      </farris-combo-list>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap ml-2 pl-4\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <div class=\"farris-input-wrap\">\r\n                      <div class=\"custom-control custom-checkbox\">\r\n                        <input class=\"custom-control-input\" type=\"checkbox\" id=\"multiSelect\" formControlName=\"multiSelect\"\r\n                          [readOnly]=\"false\" />\r\n                        <label class=\"custom-control-label\" for=\"multiSelect\">{{'component.assignStrategy.multiSelect' | wfLocale}}</label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-12 mt-2\">\r\n                <div class=\"farris-group-wrap ml-2 pl-4\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <div class=\"farris-input-wrap\">\r\n                      <div class=\"custom-control custom-checkbox\">\r\n                        <input class=\"custom-control-input\" type=\"checkbox\" id=\"necessary\" formControlName=\"necessary\" [readOnly]=\"false\" />\r\n                        <label class=\"custom-control-label\" for=\"necessary\">{{'component.assignStrategy.necessary' | wfLocale}}</label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n      </form>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.assignStrategy.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.assignStrategy.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AssignStrategyComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AssignStrategyComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
class AssignStrategyConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        switch (data.assignStrategy) {
            case 'ALL':
                return this.localePipe.transform('component.assignStrategy.all');
            case 'ASSIGN':
                return this.localePipe.transform('component.assignStrategy.assign');
            case 'CLAIM':
                return this.localePipe.transform('component.assignStrategy.claim');
            default:
                return '';
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignConfig$1 {
    constructor() {
        this.operator = 'currentUser';
        this.multiSelect = true;
        this.necessary = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantComponent {
    /**
     * @param {?} designerUIState
     * @param {?} uistate
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} expr
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, uistate, resolver, injector, modalService, message, expr, http, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.uistate = uistate;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.nodeType = 'notifyActivity';
        this.isClose = true;
        this.participant = new ParticipantInfo();
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.type = 'humanPerformer';
        this.assignStrategyList = [
            { value: 'ALL', name: this.localePipe.transform('component.participant.all') },
            { value: 'ASSIGN', name: this.localePipe.transform('component.participant.assign') },
            { value: 'CLAIM', name: this.localePipe.transform('component.participant.claim') }
        ];
        this.operatorCollection = [
            { text: this.localePipe.transform('component.participant.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.participant.procInstCreator'), value: 'procInstCreator' }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.participant.participantSet'),
            width: 900,
            height: 662,
            showButtons: true
        };
        this.columns = [
            {
                field: 'order', width: 25, title: this.localePipe.transform('component.participant.order'),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
            }, {
                field: 'type', width: 50, title: this.localePipe.transform('component.participant.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            }, {
                field: 'performerName', width: 50, title: this.localePipe.transform('component.participant.performerName'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return d.performerName;
                        case 'wf.VariableParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.PositionParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.ComponentParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.ReportingLineParticipantExpression':
                            return ((/** @type {?} */ (d))).reportingLineDefName + '-' + ((/** @type {?} */ (d))).dimension;
                        case 'wf.MatrixParticipantExpression':
                            return ((/** @type {?} */ (d))).matrixDefName + '-' + ((/** @type {?} */ (d))).dataFieldAlias;
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName;
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'description', width: 100, title: this.localePipe.transform('component.participant.description'), showTips: true,
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return this.getUserPerformerDescription(d);
                        case 'wf.VariableParticipantExpression':
                            return this.getVariablePerformerDescription(d);
                        case 'wf.PositionParticipantExpression':
                            return this.getPositionPerformerDescription(d);
                        case 'wf.ComponentParticipantExpression':
                            return this.getComponentPerformerDescription(d);
                        case 'wf.ReportingLineParticipantExpression':
                            return this.getReportingLinePerformerDescription(d);
                        case 'wf.MatrixParticipantExpression':
                            return this.getMatrixPerformerDescription(d);
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName + '，且' + (((/** @type {?} */ (d))).includeChildren ? '包含下级' : '不包含下级');
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'condition', width: 60, title: this.localePipe.transform('component.participant.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    /**
     * @param {?} participant
     * @return {?}
     */
    set value(participant) {
        this.participant = JSON.parse(JSON.stringify(participant));
        if (!this.participant.assignStrategy.assignConfig) {
            this.participant.assignStrategy.assignConfig = new AssignConfig$1();
        }
        this.preAssignStrategy = participant.assignStrategy.assignStrategy;
        if (this.participant.humanPerformerList
            && this.participant.humanPerformerList.length > 0) {
            if (Math.max(...this.participant.humanPerformerList.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.order))) === 0) {
                /** @type {?} */
                let index = 1;
                for (const humanPerformer of this.participant.humanPerformerList) {
                    humanPerformer.order = index;
                    index++;
                }
            }
            this.participant.humanPerformerList = this.participant.humanPerformerList.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a.order - b.order));
        }
        if (this.participant.potentialOwnerList
            && this.participant.potentialOwnerList.length > 0) {
            if (Math.max(...this.participant.potentialOwnerList.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.order))) === 0) {
                /** @type {?} */
                let index = 1;
                for (const potentialOwner of this.participant.potentialOwnerList) {
                    potentialOwner.order = index;
                    index++;
                }
            }
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a.order - b.order));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nodeType = this.editorParams.nodeType;
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.humanPerformerGrid.endCellEdit();
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.endCellEdit();
        }
        /** @type {?} */
        const object = {
            value: this.participant, parameters: null
        };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    assignStrategyChange(data) {
        if (this.preAssignStrategy !== 'ASSIGN' && data === 'ASSIGN' && this.participant.humanPerformerList.length > 0) {
            if (!this.participant.assignStrategy.assignConfig) {
                this.participant.assignStrategy.assignConfig = new AssignConfig$1();
            }
            this.message.question(this.localePipe.transform('component.participant.dataMovement1'), (/**
             * @return {?}
             */
            () => {
                this.humanPerformerCopyToPotentialOwner();
            }));
        }
        else if (this.preAssignStrategy === 'ASSIGN' && data !== 'ASSIGN' && this.participant.potentialOwnerList.length > 0) {
            this.message.question(this.localePipe.transform('component.participant.dataMovement2'), (/**
             * @return {?}
             */
            () => {
                this.potentialOwnerCopyToHumanPerformer();
            }));
        }
        this.preAssignStrategy = data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    switchChange(data) {
        if (data) {
            this.clearPerformer('potentialOwner');
        }
    }
    /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    addPerformer(performerType, type) {
        this.editState = 'new';
        this.type = type;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.performerType = performerType;
        /** @type {?} */
        const boxsize = this.attributeBoxSize(performerType);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.participant.participantSelection'),
            width: boxsize.width,
            height: boxsize.height,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
        this.dropDownEl.close();
        if (this.dropDownE2) {
            this.dropDownE2.close();
        }
    }
    /**
     * @return {?}
     */
    editOK() {
        this.isClose = true;
        if (this.compRef) {
            /** @type {?} */
            const re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                for (const p of re.userPerformers) {
                    this.addUserPerformer(p);
                }
            }
            if (re.variable && re.variable !== null && re.variable.performerId) {
                this.addvariablePerformer(re.variable);
            }
            // 2023-7-28 组织岗支持多选
            if (re.positions && re.positions.length > 0) {
                this.addPositionPerformer(re.positions);
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                this.addComponentPerformer(re.component);
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                this.addReportingLinePerformer(re.reportingLine);
            }
            if (re.matrix && re.matrix.matrixDefId) {
                this.addMatrixPerformer(re.matrix);
            }
            if (re.activityExecutorPerformers && re.activityExecutorPerformers.length > 0) {
                for (const a of re.activityExecutorPerformers) {
                    this.addActivityExecutorPerformer(a);
                }
            }
            if (re.organizationParticipant) {
                this.addOrganizationParticipant(re.organizationParticipant);
            }
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
        // 编辑完成后刷新两个组件
        this.humanPerformerGrid.refresh();
        this.potentialOwnerGrid.refresh();
    }
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    addUserPerformer(userPerformer) {
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId))));
            if (i > -1) ;
            else {
                if (this.editState === 'edit') {
                    this.removeHumanPerformer();
                }
                /** @type {?} */
                let index;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max(...this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.order))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.humanPerformerList.push(userPerformer);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId))));
            if (i > -1) ;
            else {
                if (this.editState === 'edit') {
                    this.removePotentialOwner();
                }
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.potentialOwnerList.push(userPerformer);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    addvariablePerformer(variable) {
        /** @type {?} */
        const v = variable;
        if (!v || !v.varValue) {
            this.message.info(this.localePipe.transform('component.participant.selectProcessVariables'));
            this.isClose = false;
        }
        else if (!v.varType) {
            this.message.info(this.localePipe.transform('component.participant.selectVariableValueType'));
            this.isClose = false;
        }
        else if (!v.relation) {
            this.message.info(this.localePipe.transform('component.participant.selectRelation'));
            this.isClose = false;
        }
        else {
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                const i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId))));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removeHumanPerformer();
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max(...this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        h => h.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.humanPerformerList.push(variable);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId))));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removePotentialOwner();
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.potentialOwnerList.push(variable);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    addPositionPerformer(positions) {
        for (const position of positions) {
            if (!position.performerId) {
                this.message.info(this.localePipe.transform('component.participant.selectPosition'));
                this.isClose = false;
            }
            else {
                if ((!position.orgType || position.orgType == null) && (position.isRequired && position.positionType === '1')) {
                    this.message.info(this.localePipe.transform('component.participant.selectOrgType'));
                    this.isClose = false;
                }
                else if ((!position.orgId || position.orgId == null) && (position.isRequired && position.positionType === '1')) {
                    this.message.info(this.localePipe.transform('component.participant.orgFill'));
                    this.isClose = false;
                }
                else {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    if (this.type === 'humanPerformer') {
                        /** @type {?} */
                        const i = this.participant.humanPerformerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            const p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this.participant.humanPerformerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            let index;
                            if (this.participant.humanPerformerList.length > 0) {
                                index = Math.max(...this.participant.humanPerformerList.map((/**
                                 * @param {?} h
                                 * @return {?}
                                 */
                                h => h.order))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this.participant.humanPerformerList.push(position);
                        }
                        this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
                    }
                    else if (this.type === 'potentialOwner') {
                        /** @type {?} */
                        const i = this.participant.potentialOwnerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            const p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this.participant.potentialOwnerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            let index;
                            if (this.participant.potentialOwnerList.length > 0) {
                                index = Math.max(...this.participant.potentialOwnerList.map((/**
                                 * @param {?} p
                                 * @return {?}
                                 */
                                p => p.order))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this.participant.potentialOwnerList.push(position);
                        }
                        this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    addComponentPerformer(component) {
        /** @type {?} */
        const cmp = new ComponentParticipant();
        cmp.id = component.id;
        cmp.metadataId = component.metadataId;
        cmp.methodCode = component.methodCode;
        cmp.methodName = component.methodName;
        cmp.name = component.name;
        cmp.actualParameters = component.actualParameters;
        cmp.type = 'wf.ComponentParticipantExpression';
        cmp.condition = component.condition;
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === cmp.id));
            if (i > -1) {
                this.participant.humanPerformerList[i] = cmp;
            }
            else {
                /** @type {?} */
                let index;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max(...this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.order))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.humanPerformerList.push(cmp);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === cmp.id));
            if (i > -1) {
                this.participant.potentialOwnerList[i] = cmp;
            }
            else {
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.potentialOwnerList.push(cmp);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    addReportingLinePerformer(reportingLine) {
        if (reportingLine.reportingReferObject === 'dept' && !reportingLine.refOrgId) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refOrgIdNotNull'));
        }
        else if (reportingLine.reportingReferObject !== 'dept' && !reportingLine.refUserId && !reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refUserIdNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                const i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === reportingLine.id));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    const reportingLines = this.participant.humanPerformerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.ReportingLineParticipantExpression'));
                    for (const r of reportingLines) {
                        /** @type {?} */
                        const reportingLineData = (/** @type {?} */ (r));
                        if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                            reportingLineData.dimension === reportingLine.dimension &&
                            reportingLineData.refUserId === reportingLine.refUserId &&
                            reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                            reportingLineData.refOrgId === reportingLine.refOrgId) {
                            this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max(...this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        h => h.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.humanPerformerList.push(reportingLine);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === reportingLine.id));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    const reportingLines = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.ReportingLineParticipantExpression'));
                    for (const r of reportingLines) {
                        /** @type {?} */
                        const reportingLineData = (/** @type {?} */ (r));
                        if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                            reportingLineData.dimension === reportingLine.dimension &&
                            reportingLineData.refUserId === reportingLine.refUserId &&
                            reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                            reportingLineData.refOrgId === reportingLine.refOrgId) {
                            this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.potentialOwnerList.push(reportingLine);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    addMatrixPerformer(matrix) {
        if (!matrix.conditionField1 && !matrix.conditionField2 && !matrix.conditionField3) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.atLeastOneCondition'));
        }
        else if (!matrix.dataFieldAlias) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.dataFieldAliasNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                const i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === matrix.id));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    const matrixParticipants = this.participant.humanPerformerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.MatrixParticipantExpression'));
                    for (const m of matrixParticipants) {
                        /** @type {?} */
                        const matrixData = (/** @type {?} */ (m));
                        if (matrixData.matrixDefId === matrix.matrixDefId &&
                            matrixData.conditionField1 === matrix.conditionField1 &&
                            matrixData.conditionField2 === matrix.conditionField2 &&
                            matrixData.conditionField3 === matrix.conditionField3 &&
                            matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                            this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max(...this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        h => h.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.humanPerformerList.push(matrix);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === matrix.id));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    const matrixParticipants = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.MatrixParticipantExpression'));
                    for (const m of matrixParticipants) {
                        /** @type {?} */
                        const matrixData = (/** @type {?} */ (m));
                        if (matrixData.matrixDefId === matrix.matrixDefId &&
                            matrixData.conditionField1 === matrix.conditionField1 &&
                            matrixData.conditionField2 === matrix.conditionField2 &&
                            matrixData.conditionField3 === matrix.conditionField3 &&
                            matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                            this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.potentialOwnerList.push(matrix);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    addActivityExecutorPerformer(activityExecutor) {
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId))));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removeHumanPerformer(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                let index;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max(...this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.order))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.humanPerformerList.push(activityExecutor);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId))));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removePotentialOwner(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.potentialOwnerList.push(activityExecutor);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} organization
     * @return {?}
     */
    addOrganizationParticipant(organization) {
        /** @type {?} */
        const organizationParticipant = new OrganizationParticipant();
        organizationParticipant.id = organization.id || ProcessDeUtil.GenerateElementId();
        organizationParticipant.type = 'wf.OrganizationParticipantExpression';
        organizationParticipant.condition = organization.condition;
        organizationParticipant.name = organization.name;
        organizationParticipant.actionScope = organization.actionScope;
        organizationParticipant.organizationLevel = organization.organizationLevel;
        organizationParticipant.organizationId = organization.organizationId;
        organizationParticipant.organizationCode = organization.organizationCode;
        organizationParticipant.organizationName = organization.organizationName;
        organizationParticipant.includeChildren = organization.includeChildren;
        organizationParticipant.parentsUntil = organization.parentsUntil;
        organizationParticipant.tag = organization.tag;
        if (this.type === 'humanPerformer') {
            this.participant.humanPerformerList = this.participant.humanPerformerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            /** @type {?} */
            let index;
            if (this.participant.humanPerformerList.length > 0) {
                index = Math.max(...this.participant.humanPerformerList.map((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.order))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.humanPerformerList.push(organizationParticipant);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            /** @type {?} */
            let index;
            if (this.participant.potentialOwnerList.length > 0) {
                index = Math.max(...this.participant.potentialOwnerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.order))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.potentialOwnerList.push(organizationParticipant);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        if (this.editDialog) {
            this.editDialog.close();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    editPerformer(type) {
        this.editState = 'edit';
        this.type = type;
        /** @type {?} */
        let selectedRow;
        if (type === 'humanPerformer') {
            selectedRow = this.humanPerformerGrid.selectedRow;
        }
        else if (type === 'potentialOwner') {
            selectedRow = this.potentialOwnerGrid.selectedRow;
        }
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.participant.selectPerformer'));
            return;
        }
        /** @type {?} */
        const curPerformer = selectedRow.data;
        if (curPerformer) {
            /** @type {?} */
            const boxsize = this.attributeBoxSize(curPerformer.type);
            /** @type {?} */
            const modalConfig = {
                title: this.localePipe.transform('component.participant.participantSelection'),
                width: boxsize.width,
                height: boxsize.height,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            this.compRef.instance.performerType = curPerformer.type;
            this.compRef.instance.editState = this.editState;
            switch (curPerformer.type) {
                case 'wf.PositionParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.UserParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.VariableParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.VariableParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    const url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + ((/** @type {?} */ (curPerformer))).reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error(this.localePipe.transform('component.participant.definitionDeleted'));
                            if (type === 'humanPerformer') {
                                this.removeHumanPerformer();
                            }
                            else if (type === 'potentialOwner') {
                                this.removePotentialOwner();
                            }
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    const urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + ((/** @type {?} */ (curPerformer))).matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error(this.localePipe.transform('component.participant.matrixDeleted'));
                            if (type === 'humanPerformer') {
                                this.removeHumanPerformer();
                            }
                            else if (type === 'potentialOwner') {
                                this.removePotentialOwner();
                            }
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ActivityExecutorParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.OrganizationParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.OrganizationParticipantExpression',
                        value: curPerformer
                    };
                    break;
            }
            if (curPerformer.type !== 'wf.ReportingLineParticipantExpression' &&
                curPerformer.type !== 'wf.MatrixParticipantExpression') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig);
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    removePerformer(type) {
        if (type === 'humanPerformer') {
            if (this.humanPerformerGrid.selectedRow) {
                this.humanPerformerGrid.endCellEdit();
                /** @type {?} */
                const index = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.humanPerformerGrid.selectedRow.data.id));
                this.participant.humanPerformerList.splice(index, 1);
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
        else if (type === 'potentialOwner') {
            if (this.potentialOwnerGrid.selectedRow) {
                this.potentialOwnerGrid.endCellEdit();
                /** @type {?} */
                const index = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.potentialOwnerGrid.selectedRow.data.id));
                this.participant.potentialOwnerList.splice(index, 1);
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    clearPerformer(type) {
        if (type === 'humanPerformer') {
            this.participant.humanPerformerList = new Array();
        }
        else if (type === 'potentialOwner') {
            this.participant.potentialOwnerList = new Array();
        }
        this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    moveUp(type) {
        if (type === 'humanPerformer') {
            /** @type {?} */
            const selectedRow = this.humanPerformerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            const index = this.participant.humanPerformerList[i].order;
            this.participant.humanPerformerList[i].order = this.participant.humanPerformerList[i - 1].order;
            this.participant.humanPerformerList[i - 1].order = index;
            this.swapArray(this.participant.humanPerformerList, i, i - 1);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            this.humanPerformerGrid.selectRow(performer.id, true);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            const selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            const index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i - 1].order;
            this.participant.potentialOwnerList[i - 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i - 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer.id, true);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    moveDown(type) {
        if (type === 'humanPerformer') {
            /** @type {?} */
            const selectedRow = this.humanPerformerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === this.participant.humanPerformerList.length - 1) {
                return;
            }
            /** @type {?} */
            const index = this.participant.humanPerformerList[i].order;
            this.participant.humanPerformerList[i].order = this.participant.humanPerformerList[i + 1].order;
            this.participant.humanPerformerList[i + 1].order = index;
            this.swapArray(this.participant.humanPerformerList, i, i + 1);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            this.humanPerformerGrid.selectRow(performer.id, true);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            const selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === this.participant.potentialOwnerList.length - 1) {
                return;
            }
            /** @type {?} */
            const index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i + 1].order;
            this.participant.potentialOwnerList[i + 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i + 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer.id, true);
        }
    }
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
    /**
     * @return {?}
     */
    removeHumanPerformer() {
        if (this.humanPerformerGrid.selectedRow) {
            this.humanPerformerGrid.endCellEdit();
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === this.humanPerformerGrid.selectedRow.data.id));
            this.participant.humanPerformerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectDefaultHandler'));
        }
    }
    /**
     * @return {?}
     */
    removePotentialOwner() {
        if (this.potentialOwnerGrid.selectedRow) {
            this.potentialOwnerGrid.endCellEdit();
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === this.potentialOwnerGrid.selectedRow.data.id));
            this.participant.potentialOwnerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectpotentialtHandler'));
        }
    }
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    getUserPerformerDescription(userPerformer) {
        if (userPerformer.tag === 'expression') {
            return userPerformer.performerId;
        }
        else {
            if (userPerformer.orgName) {
                return this.localePipe.transform('component.participant.org') + userPerformer.orgName;
            }
            else {
                return '';
            }
        }
    }
    /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    getVariablePerformerDescription(variablePerformer) {
        if (variablePerformer.tag === 'expression') {
            return variablePerformer.varValue;
        }
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    getPositionPerformerDescription(position) {
        if (this.designerUIState.scene === 'inSuite') {
            return null;
        }
        if (position.positionType === '1') {
            if (position.orgId) {
                return this.localePipe.transform('component.participant.positionType1') + position.orgId;
            }
            else {
                return this.localePipe.transform('component.participant.positionType2');
            }
        }
        else if (position.positionType === '0') {
            return this.localePipe.transform('component.participant.positionType3');
        }
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    getComponentPerformerDescription(position) {
        /** @type {?} */
        let des = this.localePipe.transform('component.participant.comp') + position.name
            + this.localePipe.transform('component.participant.parameters');
        if (position.actualParameters && position.actualParameters.length > 0) {
            position.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                des += `${p.code}：${p.value}，`;
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    getReportingLinePerformerDescription(reportingLine) {
        /** @type {?} */
        let description = '';
        if (reportingLine.refUserId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refUserId;
        }
        if (reportingLine.refEmployeeId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refEmployeeId;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += `，`;
            }
            if (reportingLine.refEmployeeId) {
                description += `，`;
            }
            description += this.localePipe.transform('component.participant.referenceOrganization') + reportingLine.refOrgId;
        }
        return description;
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    getMatrixPerformerDescription(matrix) {
        /** @type {?} */
        let description = '';
        if (matrix.conditionField1) {
            description += this.localePipe.transform('component.participant.condition1') + matrix.conditionFieldText1 + `，`;
        }
        if (matrix.conditionField2) {
            description += this.localePipe.transform('component.participant.condition2') + matrix.conditionFieldText2 + `，`;
        }
        if (matrix.conditionField3) {
            description += this.localePipe.transform('component.participant.condition3') + matrix.conditionFieldText3 + `，`;
        }
        if (matrix.dataFieldAlias) {
            description += this.localePipe.transform('component.participant.data') + matrix.dataFieldAlias + `，`;
        }
        return description.slice(0, description.length - 1);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (this.humanPerformerGrid && this.humanPerformerGrid.selectedRow && this.humanPerformerGrid.selectedRow.data) {
                /** @type {?} */
                let temp = this.participant.humanPerformerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.id === this.humanPerformerGrid.selectedRow.data.id));
                temp.condition = cond;
            }
            if (this.potentialOwnerGrid && this.potentialOwnerGrid.selectedRow && this.potentialOwnerGrid.selectedRow.data) {
                /** @type {?} */
                let temp = this.participant.potentialOwnerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.id === this.potentialOwnerGrid.selectedRow.data.id));
                temp.condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    humanPerformerCopyToPotentialOwner() {
        if (this.participant.humanPerformerList && this.participant.humanPerformerList.length > 0) {
            if (!this.participant.potentialOwnerList) {
                this.participant.potentialOwnerList = new Array();
            }
            this.participant.potentialOwnerList.push(...this.participant.humanPerformerList);
            this.participant.humanPerformerList = new Array();
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            if (this.potentialOwnerGrid) {
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    potentialOwnerCopyToHumanPerformer() {
        if (this.participant.potentialOwnerList && this.participant.potentialOwnerList.length > 0) {
            if (!this.participant.humanPerformerList) {
                this.participant.humanPerformerList = new Array();
            }
            /** @type {?} */
            const performers = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            if (performers && performers.length > 0) {
                // 此处直接push会导致order重复,需要重新排序
                this.participant.humanPerformerList.push(...performers);
                this.participant.humanPerformerList.forEach((/**
                 * @param {?} human
                 * @param {?} index
                 * @return {?}
                 */
                (human, index) => {
                    human.order = index + 1;
                }));
                this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type === 'wf.OrganizationParticipantExpression'));
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
                if (this.potentialOwnerGrid) {
                    this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    GetOrganizationType() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ value: d.id, text: d.name })))));
    }
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    attributeBoxSize(boxType) {
        /** @type {?} */
        const boxsize = {
            width: 760,
            height: 512
        };
        switch (boxType) {
            case 'wf.PositionParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 455;
                return boxsize;
            case 'wf.UserParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
            case 'wf.VariableParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 420;
                return boxsize;

            case 'wf.ReportingLineParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;

            case 'wf.MatrixParticipantExpression':
                boxsize.width = 780;
                boxsize.height = 420;
                return boxsize;

            case 'wf.ComponentParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;

            case 'wf.ActivityExecutorParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;

            case 'wf.OrganizationParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 360;
                return boxsize;

        }
    }
}
ParticipantComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-participant',
                template: "<div class=\"f-page f-utils-overflow-xhya\">\r\n  <div class=\"f-page-main d-flex flex-column farris-overflow-y-auto\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section *ngIf=\"nodeType === 'userActivity'\" class=\"pt-0 f-section-form f-section-in-mainsubcard mb-1\" [showHeader]=\"false\" >\r\n      <div class=\"f-form-layout farris-form f-form-lable-auto farris-form-controls-inline\">\r\n        <div class=\"col-12 farris-group-wrap\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{'component.participant.allocationPolicy'|wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <farris-radiogroup [(ngModel)]=\"participant.assignStrategy.assignStrategy\" [data]=\"assignStrategyList\" name=\"assignStrategy\"\r\n                [horizontal]=\"true\" (changeValue)=\"assignStrategyChange($event)\">\r\n              </farris-radiogroup>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section *ngIf=\"nodeType === 'userActivity' && participant.assignStrategy.assignStrategy==='ASSIGN'\" class=\"pt-0 f-section-form f-section-in-mainsubcard\" [showHeader]=\"false\">\r\n      <div class=\"f-form-layout farris-form f-form-lable-auto farris-form-controls-inline\">\r\n        <div class=\"col-12 px-0 d-flex\">\r\n          <div class=\"col-4 farris-group-wrap\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.operator'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-combo-list [(ngModel)]=\"participant.assignStrategy.assignConfig.operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                  [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                  [panelHeight]=\"60\">\r\n                </farris-combo-list>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-auto farris-group-wrap f-form-label-xl\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.multiSelect'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-switch size=\"small\" [(ngModel)]=\"participant.assignStrategy.assignConfig.multiSelect\" name=\"multiSelect\">\r\n                </farris-switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-auto farris-group-wrap f-form-label-el\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.necessary'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-switch size=\"small\" [(ngModel)]=\"participant.assignStrategy.assignConfig.necessary\" name=\"necessary\">\r\n                </farris-switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <div class=\"d-flex flex-column\" [ngStyle]=\"{'height':nodeType === 'notifyActivity'? '470px': participant.assignStrategy.assignStrategy==='ASSIGN' ? '220px':'470px'}\">\r\n      <farris-section class=\"pt-0 f-section-grid\" [mainTitle]=\"nodeType === 'notifyActivity' ? ('component.participant.notifyRecipient' | wfLocale) : ('component.participant.defaultHandler' | wfLocale)\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\" style=\"overflow: initial;\">\r\n      <ng-template farrisSectionToolbar>\r\n        <div class=\"btn-group mr-2\"  fDropdown #dropdownEl=\"fDropdown\" [autoRectify]=\"true\">\r\n          <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n            {{'component.participant.new'|wfLocale}}\r\n          </farris-button>\r\n          <div class=\"dropdown-menu\" fDropdownMenu>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression' ,'humanPerformer')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','humanPerformer')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','humanPerformer')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','humanPerformer')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','humanPerformer')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','humanPerformer')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','humanPerformer')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n          </div>\r\n        </div>\r\n        <farris-button  [type]=\"'link'\" (click)=\"editPerformer('humanPerformer')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"removePerformer('humanPerformer')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('humanPerformer')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"moveUp('humanPerformer')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"moveDown('humanPerformer')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill\">\r\n        <farris-datagrid #humanPerformerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.humanPerformerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n          [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n          [multiSelect]=\"false\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n    </div>\r\n    <div *ngIf=\"nodeType === 'userActivity' && participant.assignStrategy.assignStrategy==='ASSIGN'\" class=\"d-flex flex-column\" style=\"height: 220px;\">\r\n      <farris-section class=\"pt-0 f-section-grid\" mainTitle=\"{{'component.participant.alternativeHandler'|wfLocale}}\" [enableAccordion]=\"''\"\r\n        [enableMaximize]=\"false\" [fill]=\"true\" style=\"overflow: initial;\">\r\n      <ng-template farrisSectionHeader>\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{'component.participant.alternativeHandler'|wfLocale}}</h4>\r\n        </div>\r\n        <label class=\"col-form-label mr-2 mb-0\">\r\n          <span class=\"farris-label-text\">{{'component.participant.isAllScope'|wfLocale}}</span>\r\n        </label>\r\n        <farris-switch size=\"small\" [(ngModel)]=\"participant.isAllScope\" name=\"isAllScope\" (valueChange)=\"switchChange($event)\">\r\n        </farris-switch>\r\n        <div class=\"f-toolbar\" [ngStyle]=\"{'visibility' : participant.isAllScope ? 'hidden' : 'visible'}\">\r\n          <div class=\"btn-group mr-2\"  fDropdown #dropdownE2=\"fDropdown\" [autoRectify]=\"true\">\r\n            <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n              {{'component.participant.new'|wfLocale}}\r\n            </farris-button>\r\n            <div class=\"dropdown-menu\" fDropdownMenu>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression','potentialOwner')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','potentialOwner')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','potentialOwner')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','potentialOwner')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','potentialOwner')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','potentialOwner')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','potentialOwner')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.OrganizationParticipantExpression','potentialOwner')\"><span>{{'component.participant.organization'|wfLocale}}\r\n              </span></li>\r\n            </div>\r\n          </div>\r\n          <farris-button  [type]=\"'link'\" (click)=\"editPerformer('potentialOwner')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"removePerformer('potentialOwner')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('potentialOwner')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveUp('potentialOwner')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveDown('potentialOwner')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n        </div>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill\">\r\n        <farris-datagrid #potentialOwnerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.potentialOwnerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n          [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n          [multiSelect]=\"false\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n    </div>\r\n  </section>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    ParticipantUIState,
                    WfLocalePipe
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ParticipantComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ParticipantUIState },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ExpressionService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ParticipantComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    dropDownEl: [{ type: ViewChild, args: ['dropdownEl',] }],
    dropDownE2: [{ type: ViewChild, args: ['dropdownE2',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    humanPerformerGrid: [{ type: ViewChild, args: ['humanPerformerGrid',] }],
    potentialOwnerGrid: [{ type: ViewChild, args: ['potentialOwnerGrid',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }]
};
class ParticipantConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.humanPerformerList && data.humanPerformerList.length > 0) {
            return this.localePipe.transform("component.participant.set");
        }
        if (data && data.potentialOwnerList && data.potentialOwnerList.length > 0) {
            return this.localePipe.transform("component.participant.set");
        }
        if (data && data.isAllScope) {
            return this.localePipe.transform("component.participant.set");
        }
        return this.localePipe.transform("component.participant.notSet");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Condition$1 {
    constructor() {
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DisplayInfor {
    /**
     * @param {?} name
     * @param {?} id
     */
    constructor(name, id) {
        this.name = name;
        this.activityDefinitionId = id;
        this.required = false;
    }
}
class OtherAssignActivityNodeInfo$1 {
    /**
     * @param {?} id
     * @param {?} condition
     * @param {?} required
     */
    constructor(id, condition, required) {
        this.activityDefinitionId = id;
        this.condition = new Condition$1();
        this.condition.Value = condition;
        this.required = required;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignScopeComponent {
    /**
     * @param {?} uistate
     * @param {?} message
     * @param {?} exprService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uistate, message, exprService, cdr, localeId, resources, localePipe) {
        this.uistate = uistate;
        this.message = message;
        this.exprService = exprService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.items = new Array();
        this.listItems = new Array();
        this.modalConfig = {
            title: this.localePipe.transform('component.assignScope.assignScopeList'),
            width: 600,
            height: 520,
            showButtons: true
        };
        this.cols = [
            { title: this.localePipe.transform('component.assignScope.name'), field: 'name', width: 80 },
            { title: 'ID', field: 'activityDefinitionId', width: 100 },
            { title: this.localePipe.transform('component.assignScope.required'), field: 'required', width: 50,
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.assignScope.yes'), falseText: this.localePipe.transform('component.assignScope.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            { title: this.localePipe.transform('component.assignScope.condition'), field: 'condition', width: 70,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.nodeCols = [
            { title: this.localePipe.transform('component.assignScope.name'), field: 'Name', width: 100, filter: true },
            { title: 'ID', field: 'Id', width: 100, filter: true },
        ];
        // otherAssignActivities = new Array();
        this.otherAssignActivityNodeInfos = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data && data.length > 0) {
            // this.otherAssignActivities = [...data];
            data.forEach((/**
             * @param {?} data1
             * @return {?}
             */
            data1 => {
                /** @type {?} */
                let otherAssignActivityNodeInfo = new OtherAssignActivityNodeInfo$1(data1.activityDefinitionId, data1.condition ? data1.condition.Value : data1.condition, data1.required);
                this.otherAssignActivityNodeInfos.push(otherAssignActivityNodeInfo);
            }));
            this.otherAssignActivityNodeInfos.forEach((/**
             * @param {?} other
             * @return {?}
             */
            other => {
                /** @type {?} */
                let displayInfo = new DisplayInfor(null, other.activityDefinitionId);
                displayInfo.required = other.required;
                if (other.condition) {
                    displayInfo.condition = other.condition.Value;
                }
                // displayInfo.name = this.items.find(item => item.Id === displayInfo.activityDefinitionId).Name;
                this.listItems.push(displayInfo);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.location) {
            this.location = this.editorParams.location;
        }
        /** @type {?} */
        let activities = new Array();
        if (this.location === 'startActivity') {
            activities = [...this.uistate.userActList.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id !== this.uistate.propertyData.Id
                    && a.AssignmentStrategy === 'ASSIGN'
                    && a.AssignPerformerConfig
                    && a.AssignPerformerConfig.Operator === 'procInstCreator'))];
        }
        else {
            activities = [...this.uistate.userActList.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id !== this.uistate.propertyData.Id && a.AssignmentStrategy === 'ASSIGN'))];
        }
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            for (const other of this.otherAssignActivityNodeInfos) {
                /** @type {?} */
                const activity = activities.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id === other.activityDefinitionId));
                if (activity) {
                    this.items = this.items.concat([activity]);
                }
            }
            for (const activity of activities) {
                if (this.items.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.Id === activity.Id)) === -1) {
                    this.items = this.items.concat([activity]);
                }
            }
        }
        else {
            this.items = activities;
        }
        this.listItems.forEach((/**
         * @param {?} listItem
         * @return {?}
         */
        listItem => {
            listItem.name = this.items.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.Id === listItem.activityDefinitionId)).Name;
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            for (const other of this.otherAssignActivityNodeInfos) {
                this.grid.checkRow(other.activityDefinitionId);
            }
        }
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            const i = this.listItems.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.activityDefinitionId === this.grid.selectedRow.data.activityDefinitionId));
            this.listItems.splice(i, 1);
            this.grid.loadData(this.listItems);
        }
        else {
            this.message.info(this.localePipe.transform('component.assignScope.deleteRow'));
        }
    }
    /**
     * @return {?}
     */
    moveUp() {
        if (!this.curActivity) {
            this.message.info(this.localePipe.transform('component.assignScope.curActivity'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.curActivity.activityDefinitionId;
        /** @type {?} */
        const i = this.listItems.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.activityDefinitionId === curCmpId));
        if (i === 0) {
            return;
        }
        this.swapArray(this.listItems, i, i - 1);
        this.grid.loadData(this.listItems);
        this.grid.selectRow(curCmpId, true);
        // const selectedRow = this.grid.selectedRow;
        // debugger;
        // if (!selectedRow) {
        //   this.message.info('尚未选中行');
        //   return;
        // }
        // if (selectedRow.index === 0) {
        //   return;
        // }
        // this.swapArray(this.items, selectedRow.index, selectedRow.index - 1);
        // this.grid.loadData(this.items);
        // this.grid.selectRow(selectedRow.id, true);
    }
    /**
     * @return {?}
     */
    moveDown() {
        if (!this.curActivity) {
            this.message.info(this.localePipe.transform('component.assignScope.curActivity'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.curActivity.activityDefinitionId;
        /** @type {?} */
        const i = this.listItems.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.activityDefinitionId === curCmpId));
        if (i === this.listItems.length - 1) {
            return;
        }
        this.swapArray(this.listItems, i, i + 1);
        this.grid.loadData(this.listItems);
        this.grid.selectRow(curCmpId, true);
        // const selectedRow = this.grid.selectedRow;
        // if (!selectedRow) {
        //   this.message.info('尚未选中行');
        //   return;
        // }
        // if (selectedRow.index === this.items.length - 1) {
        //   return;
        // }
        // this.swapArray(this.items, selectedRow.index, selectedRow.index + 1);
        // this.grid.loadData(this.items);
        // this.grid.selectRow(selectedRow.id, true);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectionChange(data) {
        this.curActivity = data.data;
    }
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.otherAssignActivityNodeInfos = new Array();
        for (const item of this.listItems) {
            this.otherAssignActivityNodeInfos.push(new OtherAssignActivityNodeInfo$1(item.activityDefinitionId, item.condition, item.required));
        }
        /** @type {?} */
        const object = { value: this.otherAssignActivityNodeInfos, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    actionsSelect() {
        /** @type {?} */
        const selections = this.actionsTable1.checkeds;
        if (selections && selections.length > 0) {
            selections.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                let item = new DisplayInfor(action.data.Name, action.data.Id);
                /** @type {?} */
                const index = this.listItems.findIndex((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.activityDefinitionId === action.data.Id));
                if (index > -1) {
                    this.listItems.splice(index, 1);
                }
                this.listItems.push(item);
            }));
            this.grid.loadData(this.listItems);
        }
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable1.clearCheckeds(true);
        this.actionsDialog1.close();
    }
    /**
     * @return {?}
     */
    SelectCancel() {
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable1.clearCheckeds(true);
        this.actionsDialog1.close();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                this.exprService.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.exprService.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.uistate.activityComponentContext.length > 0) {
            for (const variable of this.uistate.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.exprService.addContext(v);
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Conditional);
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.exprService.exprEntity.contextEntities = this.exprService.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
AssignScopeComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-assign-scope',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" mainTitle=\"{{'component.assignScope.set'|wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"actionsDialog1.show()\">{{'component.assignScope.add'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"delete()\">{{'component.assignScope.delete'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"moveUp()\">{{'component.assignScope.moveUp'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"moveDown()\">{{'component.assignScope.moveDown'|wfLocale}}</button>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"cols\" [data]=\"listItems\" #grid [idField]=\"'activityDefinitionId'\" [showLineNumber]=\"true\"\r\n          [striped]=\"true\" [multiSelect]=\"true\" [editMode]=\"'cell'\"\r\n          [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"  [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\"\r\n          (selectChanged)=\"selectionChange($event)\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.assignScope.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.assignScope.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"SelectCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"actionsSelect()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #actionsDialog1 [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title='\u8282\u70B9\u5217\u8868'>\r\n  <!-- 2023-6-1 \u89E3\u51B3\u5BA1\u6279\u52A8\u4F5C\u5F39\u7A97\u53CC\u6EDA\u52A8\u6761\u7684\u95EE\u9898 -->\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-hidden h-100\" style=\"margin-left: 8px;margin-right: 8px;\">\r\n    <farris-datagrid #actionsTable1 [columns]=\"nodeCols\" [data]=\"items\"\r\n      [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' \r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"true\" [striped]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AssignScopeComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AssignScopeComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    actionsTable1: [{ type: ViewChild, args: ['actionsTable1',] }],
    actionsDialog1: [{ type: ViewChild, args: ['actionsDialog1',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }]
};
class AssignScopeConverter {
    /**
     * @param {?} uistate
     * @param {?} localePipe
     */
    constructor(uistate, localePipe) {
        this.uistate = uistate;
        this.localePipe = localePipe;
        this.actList = new Array();
        this.actList = [...this.uistate.userActList.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.AssignmentStrategy === 'ASSIGN'))];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.assignScope.set");
        }
        else {
            return this.localePipe.transform("component.assignScope.notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const UserActivityPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    /**
     * 参与者设置
     */
    ParticipantSchemes: 'ParticipantSchemes',
    /**
     * 参与者选项
     */
    ParticipantOptions: 'ParticipantOptions',
    /**
     * 审批项
     */
    ApprovalItems: 'ApprovalItems',
    /**
     * 分配策略
     */
    AssignStrategy: 'AssignStrategy',
    /**
     * 指派规则
     */
    OperatorConfig: 'OperatorConfig',
    /**
     * 完成策略
     */
    CompleteStrategy: 'CompleteStrategy',
    /**
     * 会签规则
     */
    SignRule: 'SignRule',
    /**
     * 多实例设置
     */
    MultiInstanceLoopCharacteristics: 'MultiInstanceLoopCharacteristics',
    /**
     * 允许取回
     */
    Retrievable: 'Retrievable',
    /**
     * 允许征询
     */
    AddSignFrontAble: 'AddSignFrontAble',
    /**
     * 允许加签
     */
    AddSignBehindAble: 'AddSignBehindAble',
    /**
     * 允许知会
     */
    NotifyAble: 'NotifyAble',
    /**
     * 表单定义
     */
    ExecuteForms: 'ExecuteForms',
    /**
     * 是否允许选择目标节点
     */
    SelectTargetAble: 'SelectTargetAble',
    /**
     * 跳转范围
     */
    JumpScope: 'JumpScope',
    /**
     * 驳回规则
     */
    BackWardRule: 'BackWardRule',
    /**
     * 活动构件
     */
    Tools: 'Tools',
    /**
     * 选择后续分支
     */
    SelectBranch: 'SelectBranch',
    /**
     * 活动标题
     */
    wf_TitleExpression: 'wf_TitleExpression',
    /**
     * 默认分支
     */
    Default: 'Default',
    /**
     * 移交范围
     */
    transferScope: 'transferScope',
    /**
     * 隐藏web端待办任务
     */
    DisplayTerminal: 'DisplayTerminal',
    timeLimitControl: 'timeLimitControl',
    anonymousSet: 'anonymousSet',
    variableSettings: 'variableSettings',
    messageNotice: 'messageNotice',
    wf_ExecuteForms_PC: 'wf_ExecuteForms_PC',
    wf_ExecuteForms_Mobile: 'wf_ExecuteForms_Mobile',
    /**
     * 审批要点
     */
    approvalPivotConfig: 'approvalPivotConfig',
    urgeHandleRule: 'urgeHandleRule',
    /**
     * 影像设置
     */
    imageSettings: 'imageSettings',
    checkConditions: 'checkConditions',
    AssignPerformer: 'AssignPerformer',
    wf_CustomizeAction: 'wf_CustomizeAction',
    otherAssignNodes: 'otherAssignNodes',
    otherAssignActivities: 'otherAssignActivities',
    otherAssignActivityNodeInfos: 'OtherAssignActivityNodeInfos',
    ConditionExpression: "ConditionExpression",
    sendBackedTask: "sendBackedTask",
    BizActivityID: "BizActivityID",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiInstanceLoopCharacteristics$1 {
    constructor() {
        this.ClrTypeID = MultiInstanceLoopCharacteristics$1.Clr_Type_ID;
        this.enable = false;
        this.sequential = false;
        this.loopCardinality = null;
        this.completionCondition = null;
        this.completionConditionRules = new Array();
    }
}
MultiInstanceLoopCharacteristics$1.Clr_Type_ID = 'wf.MultiInstanceLoopCharacteristics';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiInstanceLoopCharacteristicsComponent {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} uistate
     * @param {?} expr
     * @param {?} modalService
     * @param {?} message
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(resolver, injector, uistate, expr, modalService, message, http, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.uistate = uistate;
        this.expr = expr;
        this.modalService = modalService;
        this.message = message;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.preEnable = false;
        this.preSequential = false;
        this.loopCharacteristics = new MultiInstanceLoopCharacteristics$1();
        this.loopCharacteristicsTemp = null;
        // peopleList: string;
        this.conditionRulesIsSet = this.localePipe.transform('multiInstanceLoopCharacteristics.conditionRulesSet');
        this.bpmnModel = this.uistate.bpmnModel;
        this.modalConfig = {
            title: this.localePipe.transform('multiInstanceLoopCharacteristics.loopCharacteristics'),
            width: 550,
            height: 450,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this.loopCharacteristics = new MultiInstanceLoopCharacteristics$1();
        if (v) {
            this.loopCharacteristics.enable = v.enable;
            this.loopCharacteristics.sequential = v.sequential;
            this.preEnable = v.enable;
            this.preSequential = v.sequential;
            if (v.loopCardinality && (v.loopCardinality instanceof Expression) && ((v.loopCardinality).MexExpression)) {
                this.loopCharacteristics.loopCardinality = ((/** @type {?} */ ((v.loopCardinality).MexExpression))).Value;
                // this.loopCharacteristics.loopCardinality = this.peopleList;
            }
            if (v.completionConditionRules && v.completionConditionRules.length > 0) {
                /** @type {?} */
                let signRuleEntityArray = new Array();
                for (let rule of v.completionConditionRules) {
                    /** @type {?} */
                    let signRule = new CounterSignRule(this.bpmnModel);
                    signRule.ConclusionValue = rule.ConclusionValue;
                    signRule.CalculateType = rule.CalculateType;
                    signRule.ConditionValue = rule.ConditionValue;
                    signRule.WaitAllVotes = rule.WaitAllVotes;
                    if (!signRule.CompletionCondition) {
                        signRule.CompletionCondition = new Condition(this.bpmnModel);
                    }
                    signRule.CompletionCondition.Value = rule.CompletionCondition ? rule.CompletionCondition.Value : null;
                    signRuleEntityArray.push(signRule);
                }
                this.loopCharacteristics.completionConditionRules = signRuleEntityArray;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.editorParams.location && this.editorParams.location == 'activity') {
            this.promptAct = true;
        }
        else {
            this.promptAct = false;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loopCardinalityExpr(data) {
        this.showloopCardinalityHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showloopCardinalityHelp(data) {
        this.showExpr();
        if (this.loopCharacteristics.loopCardinality) {
            this.expr.addExpressionText(this.loopCharacteristics.loopCardinality);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            // this.peopleList = expressionInfo;
            this.loopCharacteristics.loopCardinality = expressionInfo;
        }));
    }
    /**
     * @return {?}
     */
    showExpr() {
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    isEnable(data) {
        if (!data) {
            this.loopCharacteristicsTemp = new MultiInstanceLoopCharacteristics$1();
            this.loopCharacteristicsTemp.enable = true;
            this.loopCharacteristicsTemp.sequential = this.loopCharacteristics.sequential;
            this.loopCharacteristicsTemp.loopCardinality = this.loopCharacteristics.loopCardinality;
            this.loopCharacteristicsTemp.completionConditionRules = new Array();
            if (this.loopCharacteristics && this.loopCharacteristics.completionConditionRules) {
                this.loopCharacteristics.completionConditionRules.forEach((/**
                 * @param {?} com
                 * @return {?}
                 */
                com => this.loopCharacteristicsTemp.completionConditionRules.push((/** @type {?} */ (com.clone())))));
            }
            this.loopCharacteristics = new MultiInstanceLoopCharacteristics$1();
        }
        else {
            if (this.loopCharacteristicsTemp) {
                this.loopCharacteristics.enable = true;
                this.loopCharacteristics.sequential = this.loopCharacteristicsTemp.sequential;
                this.loopCharacteristics.loopCardinality = this.loopCharacteristicsTemp.loopCardinality;
                this.loopCharacteristics.completionConditionRules = new Array();
                if (this.loopCharacteristicsTemp.completionConditionRules) {
                    this.loopCharacteristicsTemp.completionConditionRules.forEach((/**
                     * @param {?} com
                     * @return {?}
                     */
                    com => this.loopCharacteristics.completionConditionRules.push((/** @type {?} */ (com.clone())))));
                }
                this.loopCharacteristicsTemp = null;
            }
        }
        this.validate(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    validate(data) {
        if (data == true) {
            if (!this.loopCharacteristics.completionConditionRules || this.loopCharacteristics.completionConditionRules.length < 1) {
                this.setCompletionConditionRules(this.loopCharacteristics.completionConditionRules);
            }
        }
    }
    /**
     * @param {?} completionConditionRules
     * @return {?}
     */
    setCompletionConditionRules(completionConditionRules) {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SignRuleComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value1 = completionConditionRules;
        // compRef.instance.data = this.loopCharacteristics.completionConditionRules;
        compRef.instance.submitModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.loopCharacteristics.completionConditionRules = re;
            dialog.close();
        }));
        compRef.instance.closeModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("multiInstanceLoopCharacteristics.completionConditionRules"),
            width: 800,
            height: 515,
            buttons: compRef.instance.modalFooter1,
            showButtons: true
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const object = { value: this.loopCharacteristics, parameters: null };
        if (this.preEnable != this.loopCharacteristics.enable || this.preSequential != this.loopCharacteristics.sequential) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=${this.uistate.procDefId}&activityDefinitionId=${this.uistate.propertyData.Id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (this.uistate.time === ProcessTime.rt && re && re.length > 0) {
                    this.message.info(this.localePipe.transform('multiInstanceLoopCharacteristics.checkPrompt'));
                }
                else {
                    this.submitModal.emit(object);
                }
            }));
        }
        else {
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
}
MultiInstanceLoopCharacteristicsComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-multi-instance-loop-characteristics',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.isEnable' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-5\">\r\n                  <farris-switch [(ngModel)]=\"loopCharacteristics.enable\" name=\"enable\" (valueChange)=\"isEnable($event)\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.isSequential' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-5\">\r\n                  <farris-switch [(ngModel)]=\"loopCharacteristics.sequential\" name=\"sequential\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.loopCardinality' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                    [(value)]=\"loopCharacteristics.loopCardinality\" (clickHandle)=\"loopCardinalityExpr($event)\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\"></span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"padding-right: 30px;border-radius:15px\">\r\n                  <div class=\"page-friendly-reminder\" style=\"background:#ECF4FF;padding: 0.5rem!important;border-radius:6px\">\r\n                    <div class=\"reminder-message\">\r\n                      <span class=\"reminder-title\">\r\n                        <span class=\"f-icon f-icon-info\">\r\n                        </span>\r\n                        <span class=\"reminder-name\" style=\"padding-left: 0.25rem\">\r\n                        </span>\r\n                      </span>\r\n                      <span class=\"message\" *ngIf=\"promptAct\"><br/>{{'multiInstanceLoopCharacteristics.promptAct1' | wfLocale}}<br/>\r\n                        {{'multiInstanceLoopCharacteristics.promptAct2' | wfLocale}}<br/>\r\n                      </span>\r\n                      <span class=\"message\" *ngIf=\"!promptAct\"><br/>{{'multiInstanceLoopCharacteristics.promptProc1' | wfLocale}}<br/>\r\n                        {{'multiInstanceLoopCharacteristics.promptProc2' | wfLocale}}<br/>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\" *ngIf=\"loopCharacteristics.enable\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.completionConditionRules' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" \r\n                    [(value)]=\"conditionRulesIsSet\" (clickHandle)=\"setCompletionConditionRules(loopCharacteristics.completionConditionRules)\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.timeLimitControl.clickCancel' | wfLocale }}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.timeLimitControl.clickOK' | wfLocale }}</button>\r\n</ng-template>",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
MultiInstanceLoopCharacteristicsComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: BsModalService },
    { type: MessagerService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
MultiInstanceLoopCharacteristicsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    cell: [{ type: ViewChild, args: ['cell',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
class MultiInstanceLoopCharacteristicsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && ((/** @type {?} */ (data))).enable) {
            return this.localePipe.transform('multiInstanceLoopCharacteristics.set');
        }
        return this.localePipe.transform('multiInstanceLoopCharacteristics.notSet');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFFlowElementsViewModel {
    /**
     * @param {?} uiState
     * @param {?} message
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} localPipe
     */
    constructor(uiState, message, injector, modalService, resolver, localPipe) {
        this.uiState = uiState;
        this.message = message;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.localPipe = localPipe;
    }
    /**
     * 设置流程元素属性框
     * @param {?} obj
     * @return {?}
     */
    setFlowElementProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setFlowEleConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setFlowEleConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setFlowEleEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setFlowEleEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case UserActivityPropertyKeys.Id: // 标识
                        break;
                    case UserActivityPropertyKeys.ConditionExpression: // 条件表达式
                        item.editor = ExpressionEditorComponent;
                        item.converter = new ExpressionEditorConverter(this.localPipe);
                        item.editorParams = {};
                        break;
                    case UserActivityPropertyKeys.wf_ExecuteForms_PC: // 开始活动的表单构件
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const params = {
                            location: 'startActivity',
                            tab: 'web'
                        };
                        item.converter = new ExecuteFormsConverter(params, this.localPipe);
                        item.editorParams = params;
                        break;
                    case UserActivityPropertyKeys.wf_ExecuteForms_Mobile: // 开始活动的表单构件
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const editorParams = {
                            location: 'startActivity',
                            tab: 'mobile'
                        };
                        item.converter = new ExecuteFormsConverter(editorParams, this.localPipe);
                        item.editorParams = editorParams;
                        break;
                    case UserActivityPropertyKeys.sendBackedTask: // 开始活动的发送驳回任务
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.SelectTargetAble: // 允许跳转
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.JumpScope: // 跳转规则
                        item.editor = JumpScopeComponent;
                        item.converter = new JumpScopeConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.Default: // 默认分支
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.otherAssignNodes:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.otherAssignActivityNodeInfos:
                        /** @type {?} */
                        const assignScopeParams = {
                            location: 'startActivity',
                        };
                        item.editor = AssignScopeComponent;
                        item.converter = new AssignScopeConverter(this.uiState, this.localPipe);
                        item.editorParams = assignScopeParams;
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter(this.localPipe);
                        break;
                }
            }));
        }
    }
    /**
     * 设置审批活动节点的属性框
     * @param {?} obj
     * @param {?} activityType
     * @return {?}
     */
    setUserActivityProperty(obj, activityType) {
        if (obj.propertyData.ApprovalItems) {
            this.buildApprovalItems(obj.propertyData.ApprovalItems);
            this.buildCounterSignVariables(obj.propertyData.ApprovalItems);
            this.buildSignRules(obj.propertyData.SignRule); // 设置会签规则的结论名称
        }
        this.uiState.propertyData = obj.propertyData;
        this.uiState.bizActivityId = obj.propertyData.BizActivityID;
        this.uiState.propertyConfig = this.setUserActConfig(obj.propertyConfig, activityType);
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} activityType
     * @return {?}
     */
    setUserActConfig(obj, activityType) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setUserActEntity(element.properties, activityType);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} activityType
     * @return {?}
     */
    setUserActEntity(obj, activityType) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case UserActivityPropertyKeys.Id: // 标识
                        break;
                    case UserActivityPropertyKeys.ParticipantSchemes: // 参与者
                        item.editor = ParticipantComponent;
                        item.converter = new ParticipantConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'userActivity'
                        };
                        break;
                    case UserActivityPropertyKeys.ParticipantOptions: // 参与者选项
                        item.editor = PerformerOptionsComponent;
                        item.converter = new PerformerOptionsConverter(this.localPipe);
                        item.editorParams = {
                            location: activityType
                        };
                        break;
                    case UserActivityPropertyKeys.AssignPerformer:
                        item.editor = PerformerComponent;
                        item.converter = new PerformerConverter();
                        item.editorParams = {
                            nodeType: 'userActivity',
                            type: 'assignPerformer'
                        };
                        break;
                    case UserActivityPropertyKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const params = {
                            location: 'userActivity',
                            tab: 'web'
                        };
                        item.converter = new ExecuteFormsConverter(params, this.localPipe);
                        item.editorParams = params;
                        break;
                    case UserActivityPropertyKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const editorParams = {
                            location: 'userActivity',
                            tab: 'mobile'
                        };
                        item.converter = new ExecuteFormsConverter(editorParams, this.localPipe);
                        item.editorParams = editorParams;
                        break;
                    case UserActivityPropertyKeys.AssignStrategy: // 分配策略
                        item.editor = AssignStrategyComponent;
                        item.converter = new AssignStrategyConverter(this.localPipe);
                        break;
                    // case UserActivityPropertyKeys.OperatorConfig: // 指派规则
                    //   item.editor = AssignPerformerConfigComponent;
                    //   item.converter = new AssignConfigConverter();
                    //   break;
                    case UserActivityPropertyKeys.CompleteStrategy: // 完成策略
                        if (this.uiState.propertyData.AssignStrategy === this.uiState.assignIterator[2].key) {
                            item.iterator = this.uiState.completeIterator4Claim; // 分配策略为领用时，完成策略只能是抢占模式
                        }
                        else {
                            item.iterator = this.uiState.completeIterator;
                        }
                        break;
                    case UserActivityPropertyKeys.SignRule: // 会签规则
                        item.editor = SignRuleComponent;
                        item.converter = new SignRuleConverter(this.localPipe);
                        item.editorParams = {
                            variables: this.uiState.counterSignVariables,
                            approvalItems: this.uiState.approvalItems,
                        };
                        break;
                    case UserActivityPropertyKeys.ApprovalItems: // 审批项
                        item.editor = ApprovelItemsComponent;
                        item.converter = new ApprovelItemsConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.Retrievable: // 允许取回
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.AddSignFrontAble: // 允许征询
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'userActivity',
                            tabId: 'approvalProperty',
                        };
                        break;
                    case UserActivityPropertyKeys.AddSignBehindAble: // 允许加签
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'userActivity',
                            tabId: 'approvalProperty',
                        };
                        break;
                    case UserActivityPropertyKeys.NotifyAble: // 允许知会
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'userActivity',
                            tabId: 'approvalProperty',
                        };
                        break;
                    case UserActivityPropertyKeys.transferScope: // 移交范围
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'userActivity',
                            tabId: 'approvalProperty',
                        };
                        break;
                    case UserActivityPropertyKeys.SelectBranch: // 允许指定后续分支
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.SelectTargetAble: // 允许跳转
                        if (this.uiState.propertyData.CompleteStrategy
                            && this.uiState.propertyData.CompleteStrategy !== this.uiState.completeIterator[0].key) {
                            item.iterator = this.uiState.noJump4Sign;
                        }
                        else {
                            item.iterator = this.uiState.boolIterator;
                        }
                        break;
                    case UserActivityPropertyKeys.JumpScope: // 跳转规则
                        item.editor = JumpScopeComponent;
                        item.converter = new JumpScopeConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.BackWardRule: // 驳回规则
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'UserActivity'
                        };
                        break;
                    case UserActivityPropertyKeys.wf_TitleExpression:
                        item.editor = TitleExpressionComponent;
                        item.converter = new TitleExpressionConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.Tools: // 活动构件
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter(this.localPipe);
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case UserActivityPropertyKeys.wf_CustomizeAction: // 活动构件
                        item.editor = CustomizeActionComponent;
                        item.converter = new CustomizeActionConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.timeLimitControl: // 超时预警
                        item.editor = TimeLimitControlComponent;
                        item.converter = new TimeLimitControlConverter(this.localPipe);
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case UserActivityPropertyKeys.MultiInstanceLoopCharacteristics: // 多实例
                        item.editor = MultiInstanceLoopCharacteristicsComponent;
                        item.converter = new MultiInstanceLoopCharacteristicsConverter(this.localPipe);
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case UserActivityPropertyKeys.anonymousSet: // 匿名设置
                        item.editor = AnonymousSetComponent;
                        item.converter = new AnonymousSetConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter(this.localPipe);
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case UserActivityPropertyKeys.approvalPivotConfig: // 审批要点
                        item.editor = ApprovalPivotComponent;
                        item.converter = new ApprovalPivotConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.DisplayTerminal: // 显示终端
                        item.iterator = this.uiState.displayTerminal;
                        break;
                    case UserActivityPropertyKeys.urgeHandleRule: // 显示终端
                        item.editor = UrgeHandleRuleComponent;
                        item.converter = new UrgeHandleRuleConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.imageSettings: // 影像设置
                        item.editor = ImageSetComponent;
                        item.converter = new ImageSetConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.checkConditions:
                        item.editor = CheckConditionComponent;
                        item.converter = new CheckConditionConverter(this.localPipe);
                        break;
                    case UserActivityPropertyKeys.otherAssignNodes:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case UserActivityPropertyKeys.otherAssignActivities:
                    case UserActivityPropertyKeys.otherAssignActivityNodeInfos:
                        item.editor = AssignScopeComponent;
                        /** @type {?} */
                        const assignScopeParams = {
                            location: 'userActivity',
                        };
                        item.editorParams = assignScopeParams;
                        item.converter = new AssignScopeConverter(this.uiState, this.localPipe);
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter(this.localPipe);
                        break;
                }
            }));
        }
    }
    /**
     * 创建会签规则变量
     * @param {?} conclusions
     * @return {?}
     */
    buildCounterSignVariables(conclusions) {
        this.uiState.counterSignVariables = [];
        this.uiState.counterSignVariables = this.uiState.counterSignVariables.concat([{
                key: 'nrOfInstances',
                name: '总任务数',
                description: '总任务数'
            }, {
                key: 'nrOfCompletedInstances',
                name: '已完成任务数',
                description: '已完成任务数'
            }
        ]);
        if (conclusions && conclusions.length > 0) {
            for (const conclusion of conclusions) {
                /** @type {?} */
                const variable = new VarEntity();
                variable.key = `nrOf${conclusion.Value}`;
                variable.name = `${conclusion.Text}_任务数`;
                variable.description = `${conclusion.Text}_任务数`;
                this.uiState.counterSignVariables.push(variable);
            }
        }
    }
    /**
     * 创建自定义项
     * @param {?} conclusions
     * @return {?}
     */
    buildApprovalItems(conclusions) {
        this.uiState.approvalItems = [];
        if (conclusions && conclusions.length > 0) {
            for (const item of conclusions) {
                /** @type {?} */
                const conclusion = new ApprovalItemEntity();
                conclusion.value = item.Value;
                conclusion.text = item.Text;
                conclusion.workFlowAction = item.WorkFlowAction;
                conclusion.isDefault = item.IsDefault;
                this.uiState.approvalItems.push(conclusion);
            }
        }
    }
    /**
     * 会签规则绑定审批项名称
     * @private
     * @param {?} signRules 会签规则
     * @return {?}
     */
    buildSignRules(signRules) {
        if (signRules && signRules.length > 0) {
            // let info = false;
            for (const signRule of signRules) {
                /** @type {?} */
                const approvalItem = this.uiState.approvalItems.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.value === signRule.ConclusionValue));
                if (!approvalItem) {
                    // if (!info) {
                    //   this.message.info('审批项发生改变，请调整会签规则！');
                    //   info = true;
                    // }
                    signRule.ConclusionName = '已删除';
                }
                else {
                    signRule.ConclusionName = approvalItem.text;
                }
            }
        }
    }
}
WFFlowElementsViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFFlowElementsViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SaveAsEditComponent {
    /**
     * @param {?} injector
     * @param {?} http
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(injector, http, message, cdr, localeId, resources, localePipe) {
        this.injector = injector;
        this.http = http;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.accessLevel = 'public';
        this.isAdministratorConfig = false;
        this.enableAdminOrgAut = false;
        this.dataUri = '/api/runtime/sys/v1.0/sysOrgs';
        this.loadType = 'layerload';
        this.disabled = false;
        // private _organizations: any[];
        // set organizations(data: any[]) {
        //   this._organizations = data;
        //   if (this._organizations && this._organizations.length > 0) {
        //     this.items = this.makeTreeByParent(this._organizations, 'parentId', 'id');
        //   } else {
        //     this.items = new Array();
        //   }
        // }
        // get organizations() {
        //   return this._organizations;
        // }
        this.items = new Array();
        this.accessLevelCollection = [
            { value: 'public', text: this.localePipe.transform('component.saveAsEdit.public') },
            { value: 'private', text: this.localePipe.transform('component.saveAsEdit.private') }
        ];
        this.columns = [
            { title: this.localePipe.transform('component.saveAsEdit.code'), field: 'code', width: '100', searchField: 'code' },
            { title: this.localePipe.transform('component.saveAsEdit.name'), field: 'name', width: '100', searchField: 'name' },
        ];
        this.dictPicking = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.lookUp.http = {
                getData: (/**
                 * @param {?} uri
                 * @param {?} params
                 * @return {?}
                 */
                (uri, params) => {
                    console.log(params);
                    /** @type {?} */
                    const searchValue = JSON.parse(params.searchValue);
                    /** @type {?} */
                    const parent = searchValue.parentId;
                    /** @type {?} */
                    let param;
                    if (this.lookUp._searchState && this.lookUp._searchState.field && this.lookUp._searchState.value) {
                        if (this.lookUp._searchState.field === '*') {
                            param = { codeOrName: this.lookUp._searchState.value };
                        }
                        else if (this.lookUp._searchState.field === 'name') {
                            param = { name: this.lookUp._searchState.value };
                        }
                        else {
                            param = { code: this.lookUp._searchState.value };
                        }
                    }
                    /** @type {?} */
                    let filter;
                    if (this.isAdministratorConfig) {
                        filter = this.administrator.administratorAuthorities.map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => ({
                            id: a.organization, rule: a.includeSubordinate ? 'SelectedAndChild' : 'Selected'
                        })));
                    }
                    return this.getSysOrgs(parent, param, filter).pipe(switchMap((/**
                     * @param {?} re
                     * @return {?}
                     */
                    (re) => {
                        console.log(re);
                        return of$1((/** @type {?} */ ({
                            columns: this.columns,
                            displayInfo: { idField: 'id', valueField: 'id', textField: 'name' },
                            displayType: 'TreeList',
                            idField: 'id',
                            valueField: 'id',
                            textField: 'name',
                            searchFields: [
                                { label: 'code', value: 'code' }, { label: 'name', value: 'name' }
                            ],
                            title: this.localePipe.transform('component.saveAsEdit.organization'),
                            total: 0,
                            treeInfo: {
                                dataField: 'treeinfo',
                                isDetailField: 'isDetail',
                                layerField: 'layer',
                                layerType: 'parentId',
                                loadDataType: 'async',
                                onlySelectLeaf: false,
                                parentField: 'parentElement',
                                pathField: 'path',
                                treeDataIsInit: true
                            },
                            items: this.orgTreeData(re, param)
                        })));
                    })));
                })
            };
            return of$1(true);
        });
        this.dictPicked = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.organizationName = data.name;
            this.organization = data.id;
            return of$1(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    saveAsOK() {
        this.disabled = true;
        if (this.validator()) {
            this.submit.next({
                procName: this.procName,
                accessLevel: this.accessLevel,
                organization: this.organization,
                organizationName: this.organizationName
            });
        }
    }
    /**
     * @return {?}
     */
    saveAsCancel() {
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    validator() {
        if (!this.procName) {
            this.message.warning(this.localePipe.transform('component.saveAsEdit.nameNotEmpty'));
            this.disabled = false;
            return false;
        }
        if (!this.organization) {
            this.message.warning(this.localePipe.transform('component.saveAsEdit.organizationNotEmpty'));
            this.disabled = false;
            return false;
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    search(data) {
        /** @type {?} */
        const tt = (/** @type {?} */ (this.lookUp.componentRef.instance));
        tt.searchHandle.search(data.field, data.value, 'client');
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectedDataHandler(data) {
        this.organization = data.id;
        this.organizationName = data.name;
    }
    /**
     * @private
     * @param {?} orgs
     * @param {?} searchValue
     * @return {?}
     */
    orgTreeData(orgs, searchValue) {
        /** @type {?} */
        const result = new Array();
        /** @type {?} */
        const treeData = new Array();
        for (const org of orgs) {
            /** @type {?} */
            const entity = {};
            entity.data = org;
            entity.children = [];
            entity.id = org.id;
            entity.leaf = org.isDetail;
            entity.selectable = org.farris_selectable;
            treeData.push(entity);
        }
        /** @type {?} */
        const obj = {};
        // 使用对象重新存储数据
        /** @type {?} */
        const len = treeData.length;
        for (let i = 0; i < len; i++) {
            obj[treeData[i].id] = treeData[i];
        }
        // 遍历数据
        for (let j = 0; j < len; j++) {
            /** @type {?} */
            const data = treeData[j];
            /** @type {?} */
            const parentData = obj[data.data.parentId];
            if (parentData) {
                if (!parentData.children) {
                    parentData.children = new Array();
                }
                parentData.children.push(data);
            }
            else {
                result.push(data);
            }
        }
        // 过滤的情况下，不包含下级的节点设置为叶子节点
        if (searchValue) {
            this.treeIterator(result);
        }
        return result;
    }
    /**
     * @private
     * @param {?} treeData
     * @return {?}
     */
    treeIterator(treeData) {
        if (treeData && treeData.length > 0) {
            for (const d of treeData) {
                if (d.children && d.children.length > 0) {
                    this.treeIterator(d.children);
                }
                else {
                    d.leaf = true;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?} orgs
     * @return {?}
     */
    findChild(item, orgs) {
        /** @type {?} */
        const childList = orgs.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem.parentId === item.id) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity.data = child;
                childEntity.children = [];
                childEntity.id = child.id;
                childEntity.leaf = child.isDetail;
                childEntity.selectable = child.farris_selectable;
                item.children.push(childEntity);
                this.findChild(childEntity, orgs);
            }));
        }
    }
    /**
     * 按照parent码构造树
     * @private
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    makeTreeByParent(datas, parentField, keyField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (!x[parentField]) {
                return true;
            }
            /** @type {?} */
            const p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[keyField] === x[parentField]));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const entity = {};
            entity.data = x;
            entity.children = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @private
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    findChildrenByParent(parent, datas, parentField, keyField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[parentField] === parent.data[keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity.data = child;
                childEntity.children = [];
                parent.children.push(childEntity);
                this.findChildrenByParent(childEntity, datas, parentField, keyField);
            }));
        }
    }
    /**
     * @private
     * @param {?} parent
     * @param {?} searchValue
     * @param {?} filter
     * @return {?}
     */
    getSysOrgs(parent, searchValue, filter) {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/sysOrgs`;
        /** @type {?} */
        let param;
        if (searchValue) {
            param = Object.assign(searchValue, {
                IsSearchTree: true,
                withPermission: true,
                ruleFilter: filter
            });
        }
        else {
            if (parent) {
                param = Object.assign({}, {
                    parentId: parent,
                    withPermission: true,
                    ruleFilter: filter
                });
            }
            else {
                param = Object.assign({}, {
                    parentId: '',
                    layer: 1,
                    withPermission: true,
                    ruleFilter: filter
                });
            }
        }
        url += `?param=${JSON.stringify(param)}`;
        return this.http.get(url);
    }
}
SaveAsEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-save-as-edit',
                template: "<!-- <div class=\"f-page\">\r\n  <div class=\"f-page-main\">\r\n    <div class=\"d-flex m-2 py-2 farris-row\">\r\n      <div class=\"w-100 px-4\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">\u6D41\u7A0B\u540D\u79F0</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" />\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"d-flex m-2 py-2 farris-row\">\r\n      <div class=\"px-4 w-100\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">\u6D41\u7A0BKey\u503C</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procKey\" name=\"procKey\" [readonly]=\"true\" />\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> -->\r\n\r\n<div class=\"f-page f-page-card f-page-is-mainsubcard\">\r\n  <section class=\"f-page-main\">\r\n    <!--\u4E0D\u786E\u8BA4---------------------------\u5361\u7247\u7EC4\u4EF6\u4E0D\u540C\u7684Section\u662F\u5728\u4E0D\u540C\u7684\u7EC4\u4EF6\u91CC\uFF0C\u8FD8\u662F\u5728\u540C\u4E00\u4E2A\u5361\u7247\u7EC4\u4EF6\u91CC-->\r\n    <!--\u8868\u5355\u533A\u57DF-->\r\n    <!--\u9700\u8981\u5D4C\u5957\u7684\u5C42---------------------------IDE\u8F6C\u5316\u6210\u7EC4\u4EF6----------->\r\n    <div class=\"f-struct-wrapper\">\r\n      <farris-section class=\"f-section-form f-section-in-mainsubcard\" [enableAccordion]=\"''\" mainTitle=\"{{'component.saveAsEdit.basicAttributes'|wfLocale}}\"\r\n        [subTitle]=\"''\" [enableMaximize]=\"false\">\r\n\r\n        <!--\u8F93\u5165\u63A7\u4EF6 \u6CA1\u6709\u5206\u7EC4-->\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline pr-4 m-2\">\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.processName' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.processKeyValue' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procKey\" name=\"procKey\" [readonly]=\"true\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.maintenanceOrg' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-lookup-grid *ngIf=\"!enableAdminOrgAut; else adminOrg\" #lookup [(ngModel)]=\"organizationName\" name=\"orgName\"\r\n                    [singleSelect]=\"true\" [dictPicked]=\"dictPicked\"\r\n                    [enableClear]=\"false\"\r\n                    [editable]=\"false\"\r\n                    [dictPicking]=\"dictPicking\"\r\n                    [uri]=\"dataUri\"\r\n                    [loadTreeDataType]=\"loadType\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.accessLevel' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"accessLevel\" name=\"accessLevel\"\r\n                    [ngModelOptions]=\"{standalone: true}\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"accessLevelCollection\" [panelHeight]=\"'auto'\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </farris-section>\r\n    </div>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"saveAsCancel()\">{{'component.saveAsEdit.saveAsCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-sm btn-primary mx-2\" [disabled]=\"disabled\" (click)=\"saveAsOK()\">{{'component.saveAsEdit.saveAsOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #adminOrg>\r\n  <farris-lookup-grid #adminOrgLookup [(ngModel)]=\"organizationName\" name=\"adminOrgName\"\r\n    [helpId]=\"'processdesigneradminorgdataaut'\" [enableClear]=\"false\" [editable]=\"false\"\r\n    [singleSelect]=\"true\" [uri]=\"'assets/data/tree-list-help.json'\" (selectedData)=\"selectedDataHandler($event)\">\r\n  </farris-lookup-grid>\r\n</ng-template>\r\n",
                providers: [
                    { provide: ServerSideToken, useClass: LookupDataService },
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SaveAsEditComponent.ctorParameters = () => [
    { type: Injector },
    { type: HttpService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
SaveAsEditComponent.propDecorators = {
    btnRef: [{ type: ViewChild, args: ['buttonRef',] }],
    procName: [{ type: Input }],
    procKey: [{ type: Input }],
    lookUp: [{ type: ViewChild, args: ['lookup',] }],
    submit: [{ type: Output }],
    cancel: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const BillSourceType = {
    InheritParent: 'SameWithParent',
    VariablesExpression: 'VariablesExpression',
    AutoCreation: 'AutoGenerateDownBill',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const SubProcessType = {
    Dynamic: "Dynamic",
    Specified: "Specified",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CallActivitySubProcess$1 {
    constructor() {
        this.subProcessType = SubProcessType.Specified;
        this.billSourceType = BillSourceType.InheritParent;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BifMonitorConstant {
}
BifMonitorConstant.bifMonitorAppId = "BillIntegrationFrameworkRT";
BifMonitorConstant.bifManagerAppEntrance = "bif-manager";
BifMonitorConstant.bifDiagnostorFuncId = "BifDiagnostor";
BifMonitorConstant.bifManagerFuncId = "BifManager";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const BifMetadataType = {
    BifCreationProcess: "BifCreationProcess",
    BifWritebackProcess: "BifWritebackProcess",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class AbstractShowEntity extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.sysInit = false;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.code = null;
        this.name = null;
        this.upBillVoName = null;
        this.downBillVoName = null;
        this.parentId = null;
        this.bifMetadataType = null;
        this.lastModifiedTime = null;
        this.sysInit = false;
        this.originId = null;
        this.rootId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper.SetAttributeValue(obj, "code", this.code);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoName", this.upBillVoName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoName", this.downBillVoName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "parentId", this.parentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifMetadataType", this.bifMetadataType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "lastModifiedTime", this.lastModifiedTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "originId", this.originId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "rootId", this.rootId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "id");
        this.code = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "code");
        this.name = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "name");
        this.upBillVoName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upBillVoName");
        this.downBillVoName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downBillVoName");
        this.parentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "parentId");
        this.bifMetadataType = BifMetadataType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifMetadataType")];
        this.lastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsDateTime(obj, "lastModifiedTime");
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "sysInit");
        this.originId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "originId");
        this.rootId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "rootId");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtShowEntity extends AbstractShowEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.isEnabled = false;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtShowEntitiesWithCustomization extends RtShowEntity {
    constructor() {
        super(...arguments);
        this.customizationEntities = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.isEnabled = false;
        this.customizationEntities.length = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "customizationEntities", this.customizationEntities);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
        this.customizationEntities = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "customizationEntities", RtShowEntitiesWithCustomization);
    }
    /**
     * @protected
     * @return {?}
     */
    getTClass() {
        return RtShowEntitiesWithCustomization;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtBillProcessListResult extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.entities = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.totalCount = 0;
        this.pageCount = 0;
        this.pageIndex = 0;
        this.pageSize = 0;
        this.entities.length = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "totalCount", this.totalCount);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageCount", this.pageCount);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageIndex", this.pageIndex);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageSize", this.pageSize);
        BpmnModelJsonHelper.SetAttributeValue(obj, "entities", this.entities);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.totalCount = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "totalCount");
        this.pageCount = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageCount");
        this.pageIndex = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageIndex");
        this.pageSize = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageSize");
        this.entities = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "entities", RtShowEntitiesWithCustomization);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessListHelpService {
    /**
     * @param {?} appService
     * @param {?} frameworkService
     * @param {?} httpService
     */
    constructor(appService, frameworkService, httpService) {
        this.appService = appService;
        this.frameworkService = frameworkService;
        this.httpService = httpService;
        this.baseUrl = "/api/runtime/aif/v1.0/rtbillprocess";
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    openBifManagerApp(entity) {
        /** @type {?} */
        const map$$1 = new Map();
        map$$1.set("id", entity.id);
        map$$1.set("type", entity.bifMetadataType);
        map$$1.set("srcFuncId", BifMonitorConstant.bifDiagnostorFuncId);
        /** @type {?} */
        const opt = {
            funcId: BifMonitorConstant.bifManagerFuncId,
            appId: BifMonitorConstant.bifMonitorAppId,
            appEntrance: BifMonitorConstant.bifManagerAppEntrance,
            appType: "menu",
            entityParams: {},
            queryStringParams: map$$1,
            tabId: entity.id,
            tabName: entity.name
        };
        this.frameworkService.openMenu(opt);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getDatagridData(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        let data$ = null;
        //有业务种类参数时不分页
        if (args.bizType != null) {
            data$ = this.httpService.post(`${this.baseUrl}/getpatch`, body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const listRes = new RtBillProcessListResult();
                listRes.entities = res.map((/**
                 * @param {?} elt
                 * @return {?}
                 */
                elt => {
                    /** @type {?} */
                    const e = new RtShowEntity();
                    e.LoadFromJsonObject(elt);
                    return e;
                }));
                return listRes;
            })));
        }
        else {
            data$ = this.httpService.post(`${this.baseUrl}/getpagedpatch`, body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const listRes = new RtBillProcessListResult();
                listRes.LoadFromJsonObject(res);
                return listRes;
            })));
        }
    }
    /**
     * 根据流程编号查询流程名称
     * @param {?} code
     * @return {?}
     */
    getProcessNameByCode(code) {
        return this.httpService.request("GET", `/api/runtime/aif/v1.0/rtbillcreationprocess/getname/${code}`, { responseType: 'text' });
    }
}
ProcessListHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessListHelpService.ctorParameters = () => [
    { type: AppService },
    { type: FrameworkService },
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessFilterConditionArgs extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.name = null;
        this.upBillVoId = null;
        this.downBillVoId = null;
        this.isEnabled = null;
        this.billProcessType = null;
        this.sysInit = null;
        this.bizType = null;
        this.orderByCode = null;
        this.orderByName = null;
        this.OrderByLastModifiedTime = null;
        this.pageSize = 0;
        this.pageIndex = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoId", this.upBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoId", this.downBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "billProcessType", this.billProcessType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizType", this.bizType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orderByCode", this.orderByCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orderByName", this.orderByName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "OrderByLastModifiedTime", this.OrderByLastModifiedTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageSize", this.pageSize);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageIndex", this.pageIndex);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.name = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "name", TextValue);
        this.upBillVoId = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "upBillVoId", TextValue);
        this.downBillVoId = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "downBillVoId", TextValue);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "isEnabled", TextValue);
        this.billProcessType = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "billProcessType", TextValue);
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "sysInit", TextValue);
        this.bizType = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "bizType", TextValue);
        this.orderByCode = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "orderByCode", TextValue);
        this.orderByName = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "orderByName", TextValue);
        this.OrderByLastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "OrderByLastModifiedTime", TextValue);
        this.pageSize = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageSize");
        this.pageIndex = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageIndex");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const OrderByDirection = {
    Asc: "Asc",
    Desc: "Desc",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const AIF_PROCESS_LIST_HELP_LANG_RESOURCES = {
    "zh-CHS": {
        "code": "编号",
        "name": "名称",
        "lastModifiedTime": "最后修改时间",
        "upBill": "上游单据",
        "downBill": "下游单据",
        "processName": "流程名称",
        "processType": "流程类型",
        "creation": "生单",
        "writeback": "回写",
        "enabledState": "启用状态",
        "sysInit": "系统预置",
        "filter": "筛选",
        "all": "全部",
        "enabled": "已启用",
        "disabled": "已禁用",
        "yes": "是",
        "no": "否",
        "billSelector": "单据选择",
        "querySolution": "筛选方案",
        "collapse": "收起",
        "expand": "展开",
        "loading": "加载中",
        "pleaseSelectNonVirtualVO": "请选择非虚拟VO",
        "pleaseSelectOneItemOnly": "请选中一条数据",
        "isExtendProcess": "扩展流程",
        "creationProcess": "生单流程",
        "clickCancel": "取消",
        "clickOk": "确定",
        "set": "（已设置）",
        "notSet": "（未设置）",
        "setProcess": "已设置：",
    },
    "en": {
        "code": "Code",
        "name": "Name",
        "lastModifiedTime": "Last Modified Time",
        "upBill": "Upstream Bill",
        "downBill": "Downstream Bill",
        "processName": "Process Name",
        "processType": "Process Type",
        "creation": "Creation",
        "writeback": "Writeback",
        "enabledState": "Enabled State",
        "sysInit": "System Init",
        "filter": "Filter",
        "all": "All",
        "enabled": "Enabled",
        "disabled": "Disabled",
        "yes": "Yes",
        "no": "No",
        "billSelector": "Bill Selector",
        "querySolution": "Query Solution",
        "collapse": "Collapse",
        "expand": "Expand",
        "loading": "Loading...",
        "pleaseSelectNonVirtualVO": "Please select non-virtual VO",
        "pleaseSelectOneItemOnly": "Please select only one item",
        "isExtendProcess": "Extend Process",
        "creationProcess": "Rreation Process",
        "clickCancel": "Cancel",
        "clickOk": "Ok",
        "set": "(Set)",
        "notSet": "(Not set)",
        "setProcess": "Set: ",
    },
    "zh-CHT": {
        "code": "編號",
        "name": "名稱",
        "lastModifiedTime": "最後修改時間",
        "upBill": "上遊單據",
        "downBill": "下遊單據",
        "processName": "流程名稱",
        "processType": "流程類型",
        "creation": "生單",
        "writeback": "回寫",
        "enabledState": "啟用狀態",
        "sysInit": "系統預置",
        "filter": "篩選",
        "all": "全部",
        "enabled": "已啟用",
        "disabled": "已禁用",
        "yes": "是",
        "no": "否",
        "billSelector": "單據選擇",
        "querySolution": "篩選方案",
        "collapse": "收起",
        "expand": "展開",
        "loading": "加載中",
        "pleaseSelectNonVirtualVO": "請選擇非虛擬VO",
        "pleaseSelectOneItemOnly": "請選中壹條數據",
        "isExtendProcess": "擴展流程",
        "creationProcess": "生單流程",
        "clickCancel": "取消",
        "clickOk": "確定",
        "set": "（已設置）",
        "notSet": "（未設置）",
        "setProcess": "已設置：",
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$1 = AIF_PROCESS_LIST_HELP_LANG_RESOURCES;
class ProcessListHelpComponent {
    /**
     * @param {?} procHelpService
     * @param {?} messager
     * @param {?} notify
     * @param {?} modalService
     * @param {?} frameworkService
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} loading
     * @param {?} localeId
     * @param {?} localePipe
     */
    constructor(procHelpService, messager, notify, modalService, frameworkService, router, activatedRoute, loading, localeId, localePipe) {
        this.procHelpService = procHelpService;
        this.messager = messager;
        this.notify = notify;
        this.modalService = modalService;
        this.frameworkService = frameworkService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform("creationProcess"),
            width: 1250,
            height: 500,
            showButtons: true
        };
        this.procEmitter = new EventEmitter();
        this.ttIdField = "id";
        this.ttData = [];
        this.ttColumns = [];
        this.cascadeCheck = false;
        this.cascadeDown = false;
        this.cascadeUp = false;
        this.defaultPageSize = 30;
        this.pageList = [this.defaultPageSize, 50, 100, 200, 500];
        /**
         * 已设置流程
         */
        this.setProcess = {
            showText: ""
        };
        this.queryParam = this.createDefaultQueryParam();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.processCode = data;
            this.setProcess.code = this.processCode;
            this.setProcess.showText = this.processCode;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.configTtColumns();
        // if (this.editorParams && this.editorParams.bizTypeId) {
        //   this.queryParam.filterArgs.bizType = new TextValue();
        //   this.queryParam.filterArgs.bizType.value = this.editorParams.bizTypeId;
        //   this.queryParam.filterArgs.bizType.hasValue = true;
        // }
        if (this.processCode != null) {
            this.procHelpService.getProcessNameByCode(this.processCode).subscribe((/**
             * @param {?} processName
             * @return {?}
             */
            (processName) => {
                this.setProcess.name = processName;
                if (this.setProcess.name) {
                    this.setProcess.showText = `${this.setProcess.name}(${this.setProcess.code})`;
                }
                else {
                    this.setProcess.showText = this.setProcess.code;
                }
            }));
        }
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.ttData && this.ttData.length > 0) {
                    /** @type {?} */
                    const proc = this.processCode != null ? this.ttData.find((/**
                     * @param {?} it
                     * @return {?}
                     */
                    (it) => it.code == this.processCode)) : this.ttData[0];
                    proc && this.tt.selectRow(proc.id);
                }
            }), 300);
        }));
    }
    /**
     * @param {?=} evt
     * @return {?}
     */
    clickOk(evt) {
        if (this.tt.selectedRow == null) {
            this.notify.warning(this.localePipe.transform("pleaseSelectOneItemOnly"));
            return;
        }
        this.procEmitter.emit(this.tt.selectedRow.data);
        /** @type {?} */
        const object = { value: this.tt.selectedRow.data.code, parameters: null };
        this.submitModal.emit(object);
        this.modalRef && this.modalRef.close();
    }
    /**
     * @param {?=} evt
     * @return {?}
     */
    clickCancel(evt) {
        this.procEmitter.complete();
        this.closeModal.emit();
        this.modalRef && this.modalRef.close();
    }
    /**
     * @param {?} param
     * @return {?}
     */
    onSearch(param) {
        this.queryParam = param;
        console.log(this.queryParam);
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        () => {
            this.tt.clearCheckeds();
            this.tt.clearSelections();
        }));
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    clickNameCell(ctx) {
        this.procHelpService.openBifManagerApp(ctx.rowData);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageSizeChanged($event) {
        // console.log('PageSize Changed:', $event);
        /** @type {?} */
        let checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        r => r.data.id));
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.tt.checkRows(checkedIds, true);
                this.tt.refresh();
            }), 0);
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageChanged($event) {
        // console.log('PageNumber Changed:', $event);
        /** @type {?} */
        let checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        r => r.data.id));
        this.queryParam.filterArgs.pageIndex = $event.pageIndex - 1;
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.tt.checkRows(checkedIds, true);
                this.tt.refresh();
            }), 0);
        }));
    }
    /**
     * @param {?} pageInfo
     * @return {?}
     */
    pageChangeHandler(pageInfo) {
        /** @type {?} */
        let checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        r => r.data.id));
        this.queryParam.filterArgs.pageIndex = pageInfo.pageIndex - 1;
        this.queryParam.filterArgs.pageSize = pageInfo.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.tt.checkRows(checkedIds, true);
                this.tt.refresh();
            }), 0);
        }));
    }
    /**
     * @param {?} size
     * @return {?}
     */
    pageSizeChangeHandler(size) {
        /** @type {?} */
        let checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        r => r.data.id));
        this.queryParam.filterArgs.pageSize = size;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.tt.checkRows(checkedIds, true);
                this.tt.refresh();
            }), 0);
        }));
    }
    /**
     * @return {?}
     */
    removeSetProcess() {
    }
    /**
     * @private
     * @param {?} args
     * @return {?}
     */
    loadItems(args) {
        /** @type {?} */
        const loadingComp = this.loading.show({ message: this.localePipe.transform("loading") });
        return this.procHelpService.getDatagridData(args).pipe(switchMap((/**
         * @param {?} listRes
         * @return {?}
         */
        (listRes) => {
            this.ttData = [...listRes.entities];
            //更新分页信息
            this.tt.setPageIndex(listRes.pageIndex + 1);
            this.tt.total = listRes.totalCount;
            this.tt.pageSize = listRes.pageSize;
            // this.page.setCurrentPage(this.paginationId, listRes.pageIndex + 1);
            // this.page.setItemsPerPage(this.paginationId, listRes.pageSize);
            // this.page.setTotalItems(this.paginationId, listRes.totalCount);
            loadingComp.close();
            return of$1(listRes);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            loadingComp.close();
            setTimeout((/**
             * @return {?}
             */
            () => {
                //todo 确定异常结构, 目前采用兼容取值方式
                this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }), 300);
            throw err;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    configTtColumns() {
        this.ttColumns = [
            // {
            //   field: "isEnabled", title: this.localePipe.transform("enabledState"), width: 100, sortable: false,
            //   formatter: (value: boolean, rowData, rowIndex) => {
            //     if (value == true) {
            //       return this.localePipe.transform("enabled");
            //     } else if (value == false) {
            //       return this.localePipe.transform("disabled");
            //     } else {
            //       return "-";
            //     }
            //   }
            // },
            { field: "code", title: this.localePipe.transform("code"), width: 120, sortable: true },
            {
                field: "name", title: this.localePipe.transform("name"), width: 250, sortable: true,
                template: this.nameCellTemp,
            },
            { field: "upBillVoName", title: this.localePipe.transform("upBill"), width: 120, sortable: true },
            { field: "downBillVoName", title: this.localePipe.transform("downBill"), width: 120, sortable: true },
            // {
            //   field: "bifMetadataType", title: this.localePipe.transform("processType"), width: 120, sortable: false,
            //   formatter: (value: BifMetadataType, rowData, rowIndex) => {
            //     if (value == BifMetadataType.BifCreationProcess) {
            //       return this.localePipe.transform("creation");
            //     } else if (value == BifMetadataType.BifWritebackProcess) {
            //       return this.localePipe.transform("writeback");
            //     } else {
            //       return "-";
            //     }
            //   }
            // },
            {
                field: "sysInit", title: this.localePipe.transform("sysInit"), width: 80, sortable: false,
                formatter: (/**
                 * @param {?} value
                 * @param {?} rowData
                 * @param {?} rowIndex
                 * @return {?}
                 */
                (value, rowData, rowIndex) => {
                    if (value == true) {
                        return this.localePipe.transform("yes");
                    }
                    else if (value == false) {
                        return this.localePipe.transform("no");
                    }
                    else {
                        return "-";
                    }
                })
            },
        ];
    }
    /**
     * @private
     * @return {?}
     */
    createDefaultQueryParam() {
        /** @type {?} */
        const queryParam = {
            filterArgs: new ProcessFilterConditionArgs(),
            filterArgsExt: {}
        };
        queryParam.filterArgs.pageSize = this.defaultPageSize;
        queryParam.filterArgs.pageIndex = 0;
        queryParam.filterArgs.OrderByLastModifiedTime = new TextValue();
        queryParam.filterArgs.OrderByLastModifiedTime.value = OrderByDirection.Desc;
        queryParam.filterArgs.OrderByLastModifiedTime.hasValue = true;
        queryParam.filterArgs.billProcessType = new TextValue();
        queryParam.filterArgs.billProcessType.value = BifMetadataType.BifCreationProcess;
        queryParam.filterArgs.billProcessType.hasValue = true;
        queryParam.filterArgs.isEnabled = new TextValue();
        queryParam.filterArgs.isEnabled.value = "true";
        queryParam.filterArgs.isEnabled.hasValue = true;
        return queryParam;
    }
}
ProcessListHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-process-list-help',
                template: "<div class=\"f-page f-page-is-managelist\" id=\"bif-manager-list\">\r\n  <app-proc-help-query-solution id=\"query-solution\" #querySolution [(queryParam)]=\"queryParam\"\r\n    (onSearch)=\"onSearch($event)\">\r\n  </app-proc-help-query-solution>\r\n\r\n  <div class=\"f-page-main\" id=\"page-main\">\r\n    <div *ngIf=\"setProcess&&setProcess.code\" class=\"d-flex px-2\" style=\"line-height: 32px; height: 32px;\">\r\n      <div>\r\n        {{\"setProcess\" | aifLocale}}\r\n      </div>\r\n      <div class=\"farris-tags\">\r\n        <ul class=\"farris-tags-item-container\">\r\n          <li class=\"farris-tag-item farris-tag-item-info\">\r\n            <span class=\"tag-box\">\r\n              {{setProcess&&setProcess.showText}}\r\n            </span>\r\n            <span *ngIf=\"false\" class=\"tag-delete\" (click)=\"removeSetProcess()\">\r\n              <i class=\"f-icon f-icon-close\"></i>\r\n            </span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"f-utils-fill-flex-column\">\r\n      <farris-datagrid id=\"tt\" #tt [data]=\"ttData\" [columns]=\"ttColumns\" [idField]=\"ttIdField\" [multiSelect]=\"true\"\r\n        [showCheckbox]=\"false\" [showAllCheckbox]=\"false\" [onlySelectSelf]=\"true\" [keepSelect]=\"true\"\r\n        [selectOnCheck]=\"true\" [checkOnSelect]=\"false\" [showHeader]=\"true\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [pagination]=\"true\" [showPageList]=\"true\" [pageSize]=\"defaultPageSize\" [pageList]=\"pageList\"\r\n        (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\" [remoteSort]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #nameCellTemp let-ctx>\r\n  <a href=\"javascript: void(0);\" (click)=\"clickNameCell(ctx)\">{{ctx?.rowData?.name}}</a>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\r\n    {{'clickCancel' | aifLocale}}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">\r\n    {{'clickOk' | aifLocale}}\r\n  </button>\r\n</ng-template>\r\n",
                providers: [
                    { provide: BIF_LANG_RESOURCES, useValue: ɵ0$1 },
                    AifLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ProcessListHelpComponent.ctorParameters = () => [
    { type: ProcessListHelpService },
    { type: MessagerService },
    { type: NotifyService },
    { type: BsModalService },
    { type: FrameworkService },
    { type: Router },
    { type: ActivatedRoute },
    { type: LoadingService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: AifLocalePipe }
];
ProcessListHelpComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    tt: [{ type: ViewChild, args: ["tt",] }],
    nameCellTemp: [{ type: ViewChild, args: ['nameCellTemp',] }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CallActivitySubProcess2Component {
    /**
     * @param {?} notify
     * @param {?} modalService
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     * @param {?} expr
     * @param {?} cfr
     * @param {?} inj
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(notify, modalService, message, util, http, designerState, expr, cfr, inj, cdr, localeId, resources, localePipe) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.subProcess.subProcessSet'),
            width: 600,
            height: 342,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess$1();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.subProcessType = SubProcessType;
        this.billSourceType = BillSourceType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: this.localePipe.transform('component.subProcess.specified') },
            { value: "Dynamic", name: this.localePipe.transform('component.subProcess.dynamic') },
        ];
        this.radioGroupBillSourceData = [
            { value: BillSourceType.InheritParent, name: this.localePipe.transform('component.subProcess.inheritParent') },
            { value: BillSourceType.AutoCreation, name: this.localePipe.transform('component.subProcess.autoCreation') },
            { value: BillSourceType.VariablesExpression, name: this.localePipe.transform('component.subProcess.variablesExpression') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v) {
            this.callActivitySubProcess = v;
            // 为子流程类型赋值
            if (this.callActivitySubProcess.calledElement == null || this.callActivitySubProcess.calledElement == "") {
                if (this.callActivitySubProcess.calledBizDefKey == null || this.callActivitySubProcess.calledBizDefKey == "") {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                }
                else {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Dynamic;
                }
            }
            else {
                this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
            }
            // 为单据来源类型赋值
            if (this.callActivitySubProcess.inheritBizDataId === true) {
                this.callActivitySubProcess.billSourceType = BillSourceType.InheritParent;
            }
            else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === false) {
                this.callActivitySubProcess.billSourceType = BillSourceType.VariablesExpression;
            }
            else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === true) {
                this.callActivitySubProcess.billSourceType = BillSourceType.AutoCreation;
            }
            this.getProcessDefKey(this.callActivitySubProcess.calledElement);
            this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
            this.getAifProcessName(this.callActivitySubProcess.aifProcessCode);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    processConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.procDefKey;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    processTypeChange(val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.callActivitySubProcess.calledBizDefKey = null;
            this.callActivitySubProcess.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.callActivitySubProcess.calledElement = null;
            this.callActivitySubProcess.calledElementName = null;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    billSourceChange(val) {
        console.log(val);
        if (val == BillSourceType.InheritParent) {
            this.callActivitySubProcess.inheritBizDataId = true;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
        else if (val == BillSourceType.AutoCreation) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = true;
        }
        else if (val == BillSourceType.VariablesExpression) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
    }
    /**
     * @return {?}
     */
    selectProcess() {
        this.openProcHelp().subscribe((/**
         * @param {?} rte
         * @return {?}
         */
        (rte) => {
            if (rte == null) {
                this.notify.warning(this.localePipe.transform('component.subProcess.rteNull'));
                return;
            }
            this.callActivitySubProcess.aifProcessCode = rte.code;
            this.callActivitySubProcess.aifProcessName = rte.name;
        }));
    }
    /**
     * @return {?}
     */
    clearProcess() {
        this.callActivitySubProcess.aifProcessCode = null;
        this.callActivitySubProcess.aifProcessName = null;
    }
    /**
     * @return {?}
     */
    openProcHelp() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(ProcessListHelpComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.inj, []);
        cmpR.instance.editorParams = this.editorParams;
        /** @type {?} */
        const modalRef = this.modalService.show(cmpR, {
            title: this.localePipe.transform('component.subProcess.orderProcess'),
            width: 1250,
            height: 500,
            resizable: true,
            buttons: [
                {
                    text: this.localePipe.transform('component.subProcess.clickOk'),
                    cls: "btn btn-primary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    (evt) => {
                        cmpR.instance.clickOk(evt);
                        modalRef.close();
                    })
                },
                {
                    text: this.localePipe.transform('component.subProcess.clickCancel'),
                    cls: "btn btn-secondary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    (evt) => {
                        cmpR.instance.clickCancel(evt);
                        modalRef.close();
                    })
                }
            ],
            closed: (/**
             * @return {?}
             */
            () => {
                modalRef.dialog.destroy();
            })
        });
        cmpR.instance.modalRef = modalRef;
        return cmpR.instance.procEmitter.asObservable();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearProcessDef(args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    }
    /**
     * @param {?} args
     * @return {?}
     */
    flowFormConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearFlowForm(args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    }
    /**
     * @return {?}
     */
    setBizDataId() {
        this.showExprHelp();
    }
    /**
     * @private
     * @return {?}
     */
    showExprHelp() {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.callActivitySubProcess.bizDataId = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    valueChange(bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.useAutoCreationData && !this.callActivitySubProcess.bizDataId) {
            this.message.warning(this.localePipe.transform('component.subProcess.inheritBizDataId'));
            return false;
        }
        return true;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getProcessDefKey(key) {
        /** @type {?} */
        let url = this.util.getProcessDefinitionWebApi();
        if (key) {
            url += `/procDefKey/${key}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getFlowForm(id) {
        /** @type {?} */
        let url = this.util.getFlowFormWebApi();
        if (id) {
            url += `/${id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    }
    /**
     * @param {?} code
     * @return {?}
     */
    getAifProcessName(code) {
        if (code != null && code != "") {
            this.http.request("GET", `/api/runtime/aif/v1.0/rtbillcreationprocess/getname/${code}`, { responseType: 'text' }).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.callActivitySubProcess.aifProcessName = res;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                if (err.error && typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }), 300);
                throw err;
            }));
        }
    }
}
CallActivitySubProcess2Component.decorators = [
    { type: Component, args: [{
                selector: 'lib-call-activity-sub-process2',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section my-2 mx-3 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <section>\r\n      <div class=\"f-utils-fill-flex-column h-100\" style=\"margin-top: 15px;\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.radioGroupProcessType' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Dynamic\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.flowForm' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.flowForm' | wfLocale}}\" [sourceType]=\"'flowform'\"\r\n                    [displayTxt]=\"callActivitySubProcess.calledBizDefName\" (afterConfirm)=\"flowFormConfirm($event)\"\r\n                    (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Specified\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.processDef' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.processDef' | wfLocale}}\" [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section class=\"\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.radioGroupBillSource' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupBillSourceData\" (changeValue)=\"billSourceChange($event)\">\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.AutoCreation\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.autoCreationProcess' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess&&callActivitySubProcess.aifProcessName\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectProcess()\" [groupText]=\"groupIcon\" (clear)=\"clearProcess()\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.VariablesExpression\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.bizDataId' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess.bizDataId\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\" [editable]=\"false\"\r\n                    (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.subProcess.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.subProcess.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ]
            }] }
];
/** @nocollapse */
CallActivitySubProcess2Component.ctorParameters = () => [
    { type: NotifyService },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CallActivitySubProcess2Component.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }],
    radioGroupBillSource: [{ type: ViewChild, args: ["radioGroupBillSource",] }]
};
class CallActivitySubProcess2Converter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return this.localePipe.transform("component.subProcess.set");
        }
        return this.localePipe.transform("component.subProcess.notSet");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const CallActivitySubProcessPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    callActivitySubProcess: 'callActivitySubProcess',
    /**
     * 驳回规则
     */
    BackWardRule: 'BackWardRule',
    variableSettings: 'variableSettings',
    /**
    * 多实例设置
    */
    MultiInstanceLoopCharacteristics: 'MultiInstanceLoopCharacteristics',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SubProcessViewModel {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case CallActivitySubProcessPropertyKeys.callActivitySubProcess: // 参与者
                        // item.editor = CallActivitySubProcessComponent;
                        // item.converter = new CallActivitySubProcessConverter();
                        item.editor = CallActivitySubProcess2Component;
                        item.converter = new CallActivitySubProcess2Converter(this.localPipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId,
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics:
                        item.editor = MultiInstanceLoopCharacteristicsComponent;
                        item.converter = new MultiInstanceLoopCharacteristicsConverter(this.localPipe);
                        item.editorParams = {
                            location: 'CallActivitySubProcess'
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
SubProcessViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubProcessViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const AutoActivityPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    Tools: 'Tools',
    variableSettings: 'variableSettings',
    ParticipantOptions: 'ParticipantOptions',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutoActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case AutoActivityPropertyKeys.Tools: // 参与者
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter(this.localPipe);
                        item.editorParams = {
                            location: 'autoActivity'
                        };
                        break;
                    case AutoActivityPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    case AutoActivityPropertyKeys.ParticipantOptions: // 参与者选项
                        item.editor = PerformerOptionsComponent;
                        item.converter = new PerformerOptionsConverter(this.localPipe);
                        item.editorParams = {
                            location: 'autoActivity'
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
AutoActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AutoActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EventDefinition {
    constructor() {
        this.triggerAction = 'Pass';
        this.Async = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EventDefinitionComponent {
    /**
     * @param {?} message
     * @param {?} util
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, util, injector, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.util = util;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.eventDefinition.eventDefinition'),
            width: 560,
            height: 420,
            showButtons: true
        };
        this.triggerActionCollection = [
            { text: this.localePipe.transform('component.eventDefinition.pass'), value: 'Pass' },
            { text: this.localePipe.transform('component.eventDefinition.back'), value: 'Back' },
            { text: this.localePipe.transform('component.eventDefinition.abort'), value: 'Abort' }
        ];
        this.columns = new Array();
        this.data = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set value(items) {
        if (items && items.length > 0) {
            for (const item of items) {
                /** @type {?} */
                const event = new EventDefinition();
                event.Id = item.Id;
                event.name = item.name;
                event.triggerAction = item.triggerAction;
                event.Async = item.Async;
                event.SignalRef = item.SignalRef;
                this.data.push(event);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [{
                field: 'SignalRef', width: 100, title: this.localePipe.transform('component.eventDefinition.signalRef'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'name', width: 100, title: this.localePipe.transform('component.eventDefinition.name'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'triggerAction', width: 100, title: this.localePipe.transform('component.eventDefinition.triggerAction'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.triggerActionCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.triggerActionCollection, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }];
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const event = new EventDefinition();
        event.Id = ProcessDeUtil.GenerateElementId();
        this.data.push(event);
        this.grid.loadData(this.data);
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            const i = this.data.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.Id === this.grid.selectedRow.data.Id));
            this.data.splice(i, 1);
            this.grid.loadData(this.data);
        }
        else {
            this.message.info(this.localePipe.transform('component.eventDefinition.selectedRow'));
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (this.data.length === 0) {
            this.message.info(this.localePipe.transform('component.eventDefinition.dataLength'));
            return false;
        }
        else {
            for (const d of this.data) {
                if (!d.SignalRef) {
                    this.message.info(this.localePipe.transform('component.eventDefinition.codeNotNull'));
                    return false;
                }
                else if (!d.name) {
                    this.message.info(this.localePipe.transform('component.eventDefinition.nameNotNull'));
                    return false;
                }
                else if (!isNaN(Number(d.SignalRef))) {
                    this.message.info(this.localePipe.transform('component.eventDefinition.codeNotNumber'));
                    return false;
                }
            }
            if (this.data.length > 1) {
                for (let i = 0; i < this.data.length; i++) {
                    /** @type {?} */
                    const code1 = this.data[i].SignalRef;
                    for (let j = i + 1; j < this.data.length; j++) {
                        /** @type {?} */
                        const code2 = this.data[j].SignalRef;
                        if (code1 === code2) {
                            this.message.warning(this.localePipe.transform('component.eventDefinition.codeRepeat'));
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}
EventDefinitionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-event-definition',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <!-- <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span> -->\r\n        <!-- <h4 class=\"f-title-text\">\u5217\u8868</h4> -->\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">{{'component.eventDefinition.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.eventDefinition.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.eventDefinition.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.eventDefinition.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EventDefinitionComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EventDefinitionComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
class EventDefinitionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform('component.eventDefinition.set');
        }
        else {
            return this.localePipe.transform('component.eventDefinition.notSet');
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const IntermediateCatchEventImplPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    /**
     * 驳回规则
     */
    BackWardRule: 'BackWardRule',
    EventDefinitions: 'EventDefinitions',
    variableSettings: 'variableSettings',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CatchEventAdapter {
    /**
     * @param {?} uiState
     * @param {?} injector
     * @param {?} localPipe
     */
    constructor(uiState, injector, localPipe) {
        this.uiState = uiState;
        this.injector = injector;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case IntermediateCatchEventImplPropertyKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case IntermediateCatchEventImplPropertyKeys.EventDefinitions:
                        item.editor = EventDefinitionComponent;
                        item.converter = new EventDefinitionConverter(this.localPipe);
                        break;
                    case IntermediateCatchEventImplPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
CatchEventAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CatchEventAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: Injector },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const MessageActivityPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    messageNotice: 'messageNotice',
    variableSettings: 'variableSettings',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case MessageActivityPropertyKeys.messageNotice: // 参与者
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter(this.localPipe);
                        item.editorParams = {
                            location: 'messageActivity'
                        };
                        break;
                    case MessageActivityPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
MessageActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MessageActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AuditProcessDefInfo {
}
/** @enum {string} */
const AuditEvent = {
    WF_ProcessDef_SaveDT: 'WF_ProcessDef_SaveDT',
    WF_ProcessDef_SaveRT: 'WF_ProcessDef_SaveRT',
    WF_ProcessDef_Deploy: 'WF_ProcessDef_Deploy',
    WF_ProcessDef_Import: 'WF_ProcessDef_Import',
    WF_ProcessDef_Export: 'WF_ProcessDef_Export',
    WF_ProcessDef_SyncDT: 'WF_ProcessDef_SyncDT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessInfo {
}
class ProcessOrganization {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const NotifyActivityPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    /**
     * 参与者
     */
    ParticipantSchemes: 'ParticipantSchemes',
    /**
     * PC表单
     */
    wf_ExecuteForms_PC: 'wf_ExecuteForms_PC',
    /**
     * 移动表单
     */
    wf_ExecuteForms_Mobile: 'wf_ExecuteForms_Mobile',
    /**
     * 消息通知
     */
    messageNotice: 'messageNotice',
    NotifyAble: 'NotifyAble',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NotifyActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case NotifyActivityPropertyKeys.Id: // 标识
                        break;
                    case NotifyActivityPropertyKeys.ParticipantSchemes: // 参与者
                        item.editor = ParticipantComponent;
                        item.converter = new ParticipantConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'notifyActivity'
                        };
                        break;
                    case NotifyActivityPropertyKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const params = {
                            location: 'notifyActivity',
                            tab: 'web'
                        };
                        item.converter = new ExecuteFormsConverter(params, this.localPipe);
                        item.editorParams = params;
                        break;
                    case NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const editorParams = {
                            location: 'notifyActivity',
                            tab: 'mobile'
                        };
                        item.converter = new ExecuteFormsConverter(editorParams, this.localPipe);
                        item.editorParams = editorParams;
                        break;
                    case NotifyActivityPropertyKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter(this.localPipe);
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case NotifyActivityPropertyKeys.NotifyAble: // 允许知会
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'notifyActivity',
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter(this.localPipe);
                        break;
                }
            }));
        }
    }
}
NotifyActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifyActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifCreationBillProcessConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data.name || data.code || this.localePipe.transform("set");
        }
        else {
            return this.localePipe.transform("notSet");
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const AifCreationBillActivityPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    /**
     * 生单流程编号
     */
    aifProcessCode: 'aifProcessCode',
    /**
     * VoNodePath
     */
    voNodePath: 'voNodePath',
    /**
     * isRelied
     */
    isRelied: 'isRelied',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifCreationBillActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case AifCreationBillActivityPropertyKeys.aifProcessCode: // 单据流编号
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localPipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
AifCreationBillActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifCreationBillActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: AifLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Global EventEmitter
 * @template Events
 */
class EventBusService {
    constructor() {
        /**
         * Map event name to Subject
         */
        this._subjects = new Map();
    }
    /**
     *
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    on(eventName, handler) {
        if (!this._subjects.has(eventName)) {
            this._subjects.set(eventName, new Subject$1());
        }
        /** @type {?} */
        const _subject = this._subjects.get(eventName);
        /** @type {?} */
        const subscription = _subject.subscribe(handler);
        return {
            unsubscribe: (/**
             * @return {?}
             */
            () => {
                subscription.unsubscribe();
                if (_subject.observers.length > 0) {
                    this._subjects.delete(eventName);
                }
            })
        };
    }
    /**
     *
     * @param {?} eventName
     * @param {?} data
     * @return {?}
     */
    emit(eventName, data) {
        if (this._subjects.has(eventName)) {
            this._subjects.get(eventName).next(data);
        }
    }
    /**
     * Destory all subscription and clear the map
     * @return {?}
     */
    destroy() {
        this._subjects.forEach((/**
         * @param {?} subject
         * @param {?} _
         * @return {?}
         */
        (subject, _) => {
            subject.unsubscribe();
        }));
        this._subjects.clear();
    }
}
EventBusService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReleaseComponent {
    /**
     * @param {?} uiState
     * @param {?} submitService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uiState, submitService, cdr, localeId, resources, localePipe) {
        this.uiState = uiState;
        this.submitService = submitService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.accessLevel = 'public';
        this.isAdministratorConfig = false;
        this.dataUri = '/api/runtime/sys/v1.0/sysOrgs';
        this.loadType = 'layerload';
        this.releaseType = 'release';
        this.items = new Array();
        this.releaseTypeList = [
            { value: 'release', name: this.localePipe.transform('component.release.release') },
            { value: 'update', name: this.localePipe.transform('component.release.update') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.releaseType = this.procVersion === 1 ? 'release' : 'update';
        this.uiState.getUserInfo().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            this.applicantName = re.name;
            this.applicantDepartment = re.orgName;
            this.applicantId = re.id;
        }));
    }
    /**
     * @return {?}
     */
    saveAsOK() {
        this.uiState.createData().subscribe((/**
         * @param {?} saveData
         * @return {?}
         */
        (saveData) => {
            /** @type {?} */
            const dataId = saveData.returnValue.id;
            /** @type {?} */
            const data = {
                DataId: dataId,
                applicantName: this.applicantName,
                applicantDepartment: this.applicantDepartment,
                procName: this.procName,
                procVersion: this.procVersion,
                releaseType: this.releaseType,
                textDetail: this.textDetail,
                processDefinitionKey: this.processDefinitionKey,
                applicantId: this.applicantId
            };
            /** @type {?} */
            const Info = {
                ChangeType: 'Modify',
                ChangeInfo: data
            };
            this.uiState.releaseSave(Info).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.mySubmit(dataId, '03bdca37-8439-4924-8aef-20f3f4092b59');
                this.submit.next();
            }));
        }));
    }
    /**
     * @return {?}
     */
    saveAsCancel() {
        this.cancel.emit();
    }
    /**
     * @param {?} quill
     * @return {?}
     */
    editorCreated(quill) {
        /** @type {?} */
        const toolbar = quill.getModule('toolbar');
        this.editor = quill;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    contentChanged(v) {
        console.log(v);
    }
    /**
     * @return {?}
     */
    validator() {
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    changeValue(data) {
        this.releaseType = data;
    }
    /**
     * 发布前审核：提交审批
     * @private
     * @param {?} dataId
     * @param {?} bizDefKey
     * @return {?}
     */
    mySubmit(dataId, bizDefKey) {
        this.submitService.submitWithBizDefKey(dataId, bizDefKey);
    }
}
ReleaseComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-release-component',
                template: "<div class=\"f-page f-page-card f-page-is-mainsubcard\">\r\n  <section class=\"f-page-main\">\r\n    <div class=\"f-struct-wrapper\">\r\n      <!-- <farris-section class=\"f-section-form f-section-in-mainsubcard\" [enableAccordion]=\"''\"\r\n        [subTitle]=\"''\" [enableMaximize]=\"false\"> -->\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline pr-4 m-2\">\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.release.applicantName' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"applicantName\" name=\"procName\" [readOnly]=\"true\"/>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.release.applicantDepartment' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"applicantDepartment\" name=\"procKey\" [readOnly]=\"true\"/>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.release.procName' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" [readOnly]=\"true\"/>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.release.procVersion' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procVersion\" name=\"procVersion\" [readOnly]=\"true\"/>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.release.releaseType' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-radiogroup [(ngModel)]=\"releaseType\" name=\"releaseType\" [data]=\"releaseTypeList\"\r\n                  [horizontal]=\"true\" (changeValue)=\"changeValue($event)\" [disabled]=\"true\">\r\n                  </farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.release.textDetail' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <textarea [(ngModel)]=\"textDetail\" name=\"textarea\" id=\"textarea\" style=\"height: 250px; width: 100%\"\r\n                  [auto-size]=\"true\" [maxHeight]=\"500\" [textarea-zoom]=\"true\"></textarea>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      <!-- </farris-section> -->\r\n    </div>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"saveAsCancel()\">{{'component.release.saveAsCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-sm btn-primary mx-2\" (click)=\"saveAsOK()\">{{'component.release.saveAsOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ReleaseComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfTaskHandlerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ReleaseComponent.propDecorators = {
    btnRef: [{ type: ViewChild, args: ['buttonRef',] }],
    procName: [{ type: Input }],
    procVersion: [{ type: Input }],
    processDefinitionKey: [{ type: Input }],
    lookUp: [{ type: ViewChild, args: ['lookup',] }],
    submit: [{ type: Output }],
    cancel: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocuTypeHelperEntity extends JsonConvertableImpl$1 {
    constructor() {
        super();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.moduleName = null;
        this.bizKindName = null;
        this.bizTypeName = null;
        this.code = null;
        this.name = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper$1.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper$1.SetAttributeValue(obj, "moduleName", this.moduleName);
        BpmnModelJsonHelper$1.SetAttributeValue(obj, "bizKindName", this.bizKindName);
        BpmnModelJsonHelper$1.SetAttributeValue(obj, "bizTypeName", this.bizTypeName);
        BpmnModelJsonHelper$1.SetAttributeValue(obj, "code", this.code);
        BpmnModelJsonHelper$1.SetAttributeValue(obj, "name", this.name);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = BpmnModelJsonHelper$1.GetAttributeValueAsString(obj, "id");
        this.moduleName = BpmnModelJsonHelper$1.GetAttributeValueAsString(obj, "moduleName");
        this.bizKindName = BpmnModelJsonHelper$1.GetAttributeValueAsString(obj, "bizKindName");
        this.bizTypeName = BpmnModelJsonHelper$1.GetAttributeValueAsString(obj, "bizTypeName");
        this.code = BpmnModelJsonHelper$1.GetAttributeValueAsString(obj, "code");
        this.name = BpmnModelJsonHelper$1.GetAttributeValueAsString(obj, "name");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BillTypeHelpService {
    /**
     * @param {?} boRtService
     * @param {?} httpClient
     * @param {?} httpService
     * @param {?} sessionService
     * @param {?} notify
     * @param {?} translate
     */
    constructor(boRtService, httpClient, httpService, sessionService, notify, translate) {
        this.boRtService = boRtService;
        this.httpClient = httpClient;
        this.httpService = httpService;
        this.sessionService = sessionService;
        this.notify = notify;
        this.translate = translate;
        this.documentTypeUrl = "/api/runtime/aif/v1.0/documenttype";
    }
    /**
     * @return {?}
     */
    findDocumentTypeEntites() {
        /** @type {?} */
        const body = {};
        return this.httpService.post(`${this.documentTypeUrl}/docutypehelper`, body).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.map((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                /** @type {?} */
                const e = new DocuTypeHelperEntity();
                e.LoadFromJsonObject(it);
                return e;
            }));
        })));
    }
}
BillTypeHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BillTypeHelpService.ctorParameters = () => [
    { type: BusinessObjectRtService },
    { type: HttpService },
    { type: HttpService },
    { type: SessionService },
    { type: NotifyService },
    { type: TranslateService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BILL_TYPE_HELP_LANG_RESOURCES = {
    "zh-CHS": {
        "code": "编号",
        "name": "名称",
        "busineseCategory": "业务种类",
        "module": "模块",
        "busineseType": "业务类型",
        "collapse": "收起",
        "expand": "展开",
        "loading": "加载中",
        "allColumns": "所有列",
    },
    "en": {
        "code": "Code",
        "name": "Name",
        "busineseCategory": "Businese Category",
        "module": "Module",
        "busineseType": "Businese Type",
        "collapse": "Collapse",
        "expand": "Expand",
        "loading": "Loading",
        "allColumns": "All Columns",
    },
    "zh-CHT": {
        "code": "編號",
        "name": "名稱",
        "busineseCategory": "業務種類",
        "module": "模塊",
        "busineseType": "業務類型",
        "collapse": "收起",
        "expand": "展開",
        "loading": "加載中",
        "allColumns": "所有列",
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$2 = BILL_TYPE_HELP_LANG_RESOURCES;
class BillTypeHelpComponent {
    /**
     * @param {?} entityService
     * @param {?} messager
     * @param {?} notify
     * @param {?} modal
     * @param {?} loading
     * @param {?} localePipe
     * @param {?} router
     * @param {?} activatedRoute
     */
    constructor(entityService, messager, notify, modal, loading, localePipe, router, activatedRoute) {
        this.entityService = entityService;
        this.messager = messager;
        this.notify = notify;
        this.modal = modal;
        this.loading = loading;
        this.localePipe = localePipe;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.onselected = new EventEmitter();
        this.ttIdField = 'id';
        this.ttSearchFields = [];
        this.ttAllColumnsTitle = this.localePipe.instant("allColumns");
        this.docuTypeList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.configLookupColumns();
        this.loadItems();
    }
    /**
     * @return {?}
     */
    getSelectedDocuType() {
        return this.tt.selectedRow && this.tt.selectedRow.data;
    }
    /**
     * 左侧树表搜索事件
     * @param {?} obj
     * @return {?}
     */
    ttSearch(obj) {
        this.ttSearchObj = obj;
        this.ttSearchObj && this.tt.searchHandle.search(this.ttSearchObj.field, this.ttSearchObj.value);
    }
    /**
     * @return {?}
     */
    loadItems() {
        /** @type {?} */
        let entities$ = null;
        entities$ = this.entityService.findDocumentTypeEntites();
        /** @type {?} */
        const l = this.loading.show({ message: this.localePipe.instant("loading") });
        entities$.subscribe((/**
         * @param {?} entities
         * @return {?}
         */
        (entities) => {
            l.close();
            this.ttData = [...this.buildTreeData(entities)];
            this.docuTypeList = entities;
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.tt.expandAll();
                if (this.docuTypeId) {
                    this.tt.selectNode(this.docuTypeId);
                }
                else {
                    //默认选中第一条数据
                    this.docuTypeList && this.docuTypeList.length > 0 && this.tt.selectNode(this.docuTypeList[0].id);
                }
            }), 100);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            l.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * @param {?} nsp
     * @return {?}
     */
    ttNodeSelected(nsp) {
        /** @type {?} */
        let rows = [];
        if (Array.isArray(nsp.node)) {
            /** @type {?} */
            const arr = nsp.node;
            arr.forEach((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                rows.push(it);
            }));
        }
        else {
            rows.push(nsp.node);
        }
        if (rows.length == 0) {
            return;
        }
        /** @type {?} */
        let row = rows[0];
        this.docuTypeId = row.id;
    }
    /**
     * @param {?} entities
     * @return {?}
     */
    buildTreeData(entities) {
        /** @type {?} */
        const nodes = [];
        /** @type {?} */
        const map$$1 = {};
        entities && entities.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => {
            if (map$$1[it.bizKindName] == null) {
                map$$1[it.bizKindName] = [it];
            }
            else {
                map$$1[it.bizKindName].push(it);
            }
        }));
        Object.keys(map$$1).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const node = {
                id: key,
                data: {
                    id: key,
                    bizKindName: key,
                    treeInfo: {
                        layer: 1,
                    }
                },
                selectable: false,
                leaf: false,
            };
            /** @type {?} */
            const children = map$$1[key].map((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                /** @type {?} */
                const node = {
                    id: it.id,
                    data: Object.assign({}, it, { treeInfo: {
                            layer: 2,
                            parentId: key,
                        } }),
                    selectable: true,
                    leaf: true
                };
                return node;
            }));
            node.children = children;
            nodes.push(node);
        }));
        return nodes;
    }
    /**
     * @private
     * @return {?}
     */
    configLookupColumns() {
        this.ttCols = [
            { field: "bizKindName", title: this.localePipe.instant("busineseCategory"), width: 100 },
            { field: "name", title: this.localePipe.instant("name"), width: 80 },
            { field: "code", title: this.localePipe.instant("code"), width: 80 },
            { field: "moduleName", title: this.localePipe.instant("module"), width: 100 },
            { field: "bizTypeName", title: this.localePipe.instant("busineseType"), width: 100 },
        ];
    }
}
BillTypeHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-bill-type-help',
                template: "<div class=\"g-main\" style=\"padding-left: 24px; padding-right: 24px;\">\r\n  <div class=\"h-100 d-flex flex-column\">\r\n    <farris-treetable #tt class=\"f-utils-fill-flex-column\" [data]=\"ttData\" [columns]=\"ttCols\" [idField]=\"ttIdField\"\r\n      [fit]=\"true\" [showFilterBar]=\"true\" [searchFields]=\"ttSearchFields\" [showIcon]=\"false\" [resizableColumns]=\"true\"\r\n      [showBorder]=\"true\" [striped]=\"true\" [allColumnsTitle]=\"ttAllColumnsTitle\" [expandLevel]=\"0\" [showHeader]=\"true\"\r\n      [fixedHeader]=\"true\" [singleSelect]=\"true\" [showCheckbox]=\"false\" [showCheckAll]=\"false\" [checkOnSelect]=\"true\"\r\n      [selectOnCheck]=\"true\" (search)=\"ttSearch($event)\" (nodeSelected)=\"ttNodeSelected($event)\">\r\n    </farris-treetable>\r\n  </div>\r\n</div>",
                providers: [
                    { provide: BIF_LANG_RESOURCES, useValue: ɵ0$2 },
                    AifLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
BillTypeHelpComponent.ctorParameters = () => [
    { type: BillTypeHelpService },
    { type: MessagerService },
    { type: NotifyService },
    { type: BsModalService },
    { type: LoadingService },
    { type: AifLocalePipe },
    { type: Router },
    { type: ActivatedRoute }
];
BillTypeHelpComponent.propDecorators = {
    onselected: [{ type: Output, args: ["onselected",] }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VoConfigComponent {
    /**
     * @param {?} messager
     * @param {?} notify
     * @param {?} modal
     * @param {?} framework
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} loading
     * @param {?} cfr
     * @param {?} inj
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(messager, notify, modal, framework, router, activatedRoute, loading, cfr, inj, cdr, localeId, resources, localePipe) {
        this.messager = messager;
        this.notify = notify;
        this.modal = modal;
        this.framework = framework;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform("component.voConfig.documentInfo"),
            width: 500,
            height: 240,
            showButtons: true
        };
        this.entity = {};
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.entity = data || {};
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOk() {
        /** @type {?} */
        const obj = { value: this.entity, parameters: null };
        this.submitModal.emit(obj);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    selectVo() {
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.inj);
        compRef.instance.typeList = 'GSPViewModel';
        // 元数据选择器bizTypeId表示业务种类Id
        compRef.instance.bizTypeId = this.editorParams && this.editorParams.bizTypeId;
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        (metadata4RefDto) => {
            this.clearVo();
            /** @type {?} */
            const voDto = metadata4RefDto.metadata;
            /** @type {?} */
            const vo = JSON.parse(voDto.content);
            this.entity.currentVoId = vo.ID;
            this.entity.currentVoName = vo.Name;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            // todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            this.clearVo();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.voConfig.viewModelSelection"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modal.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @return {?}
     */
    clearVo() {
        this.entity.currentVoId = undefined;
        this.entity.currentVoName = undefined;
    }
    /**
     * @return {?}
     */
    selectDocuType() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(BillTypeHelpComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.inj, []);
        cmpR.instance.docuTypeId = this.entity.currentDocumentTypeId;
        /** @type {?} */
        const buttons = [];
        buttons.push({
            text: this.localePipe.transform("component.voConfig.cancel"),
            cls: "btn btn-secondary",
            handle: (/**
             * @return {?}
             */
            () => {
                bsModal && bsModal.close();
            })
        });
        buttons.push({
            text: this.localePipe.transform("component.voConfig.clickOk"),
            cls: "btn btn-primary",
            handle: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const docuType = cmpR.instance.getSelectedDocuType();
                if (docuType == null) {
                    this.notify.warning(this.localePipe.transform("component.voConfig.selectOne"));
                    return;
                }
                this.entity.currentDocumentTypeId = docuType.id;
                this.entity.currentDocumentTypeName = docuType.name;
                bsModal && bsModal.close();
            })
        });
        /** @type {?} */
        const bsModal = this.modal.show(cmpR, {
            title: this.localePipe.transform("component.voConfig.documentTypeSelect"),
            height: 573,
            width: 930,
            buttons: buttons,
            showMaxButton: false,
        });
    }
    /**
     * @return {?}
     */
    clearDocuType() {
        this.entity.currentDocumentTypeId = undefined;
        this.entity.currentDocumentTypeName = undefined;
    }
}
VoConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-vo-config',
                template: "<div class=\"f-page f-page-card f-page-is-mainsubcard\" id=\"bif-manager-list\">\r\n  <div class=\"f-page-main\" id=\"page-main\" style=\"overflow-y: auto;\">\r\n    <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.voConfig.viewModel' | wfLocale}}\" for=\"vo\">\r\n              <span class=\"farris-label-text\">{{'component.voConfig.viewModel' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"vo\" [ngModel]=\"entity&&entity.currentVoName\" [editable]=\"false\" [enableClear]=\"false\"\r\n                (clickHandle)=\"selectVo()\" (clear)=\"clearVo()\" [groupText]=\"groupIcon\" placeholder=\"{{'component.voConfig.placeholder' | wfLocale}}\">\r\n              </input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.voConfig.documenttype' | wfLocale}}\" for=\"vo\">\r\n              <span class=\"farris-label-text\">{{'component.voConfig.documenttype' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"vo\" [ngModel]=\"entity&&entity.currentDocumentTypeName\" [editable]=\"false\"\r\n                [enableClear]=\"false\" (clickHandle)=\"selectDocuType()\" (clear)=\"clearDocuType()\" [groupText]=\"groupIcon\"\r\n                placeholder=\"{{'component.voConfig.placeholder' | wfLocale}}\">\r\n              </input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.voConfig.cancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">{{'component.voConfig.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ]
            }] }
];
/** @nocollapse */
VoConfigComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService },
    { type: BsModalService },
    { type: FrameworkService },
    { type: Router },
    { type: ActivatedRoute },
    { type: LoadingService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
VoConfigComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
class VoConfigConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.currentVoId) {
            return data.currentVoName || data.currentVoId || this.localePipe.transform("component.voConfig.set");
        }
        return this.localePipe.transform("component.voConfig.notSet");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfOptionsComponent {
    /**
     * @param {?} notify
     * @param {?} modalService
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     * @param {?} expr
     * @param {?} cfr
     * @param {?} inj
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(notify, modalService, message, util, http, designerState, expr, cfr, inj, cdr, localeId, resources, localePipe) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform("component.optins.wfOptions"),
            width: 500,
            height: 240,
            showButtons: true
        };
        this.subProcessType = SubProcessType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: this.localePipe.transform("component.optins.specified") },
            { value: "Dynamic", name: this.localePipe.transform("component.optins.dynamic") },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v) {
            this.entity = v;
            // 为子流程类型赋值
            if (this.entity.calledElement == null || this.entity.calledElement == "") {
                if (this.entity.calledBizDefKey == null || this.entity.calledBizDefKey == "") {
                    this.entity.subProcessType = SubProcessType.Specified;
                }
                else {
                    this.entity.subProcessType = SubProcessType.Dynamic;
                }
            }
            else {
                this.entity.subProcessType = SubProcessType.Specified;
            }
            this.getProcessDefKey(this.entity.calledElement);
            this.getFlowForm(this.entity.calledBizDefKey);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOk() {
        /** @type {?} */
        const obj = { value: this.entity, parameters: null };
        this.submitModal.emit(obj);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    processTypeChange(val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.entity.calledBizDefKey = null;
            this.entity.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.entity.calledElement = null;
            this.entity.calledElementName = null;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    processConfirm(args) {
        if (args) {
            this.entity.calledElement = args.procDefKey;
            this.entity.calledElementName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearProcessDef(args) {
        this.entity.calledElement = '';
        this.entity.calledElementName = '';
    }
    /**
     * @param {?} args
     * @return {?}
     */
    flowFormConfirm(args) {
        if (args) {
            this.entity.calledBizDefKey = args.id;
            this.entity.calledBizDefName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearFlowForm(args) {
        this.entity.calledBizDefKey = '';
        this.entity.calledBizDefName = '';
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getProcessDefKey(key) {
        /** @type {?} */
        let url = this.util.getProcessDefinitionWebApi();
        if (key) {
            url += `/procDefKey/${key}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.entity.calledElementName = re.name;
            }));
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getFlowForm(id) {
        /** @type {?} */
        let url = this.util.getFlowFormWebApi();
        if (id) {
            url += `/${id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.entity.calledBizDefName = re.name;
            }));
        }
    }
}
WfOptionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-wf-options',
                template: "<div class=\"f-page f-page-card f-page-is-mainsubcard\" id=\"bif-manager-list\">\r\n  <div class=\"f-page-main\" id=\"page-main\" style=\"overflow-y: auto;\">\r\n    <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.optins.subProcessType' | wfLocale}}\" for=\"processType\">\r\n              <span class=\"farris-label-text\">{{'component.optins.processType' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <farris-radiogroup #radioGroupProcessType [(ngModel)]=\"entity&&entity.subProcessType\" [horizontal]=\"false\"\r\n                [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n              </farris-radiogroup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\" *ngIf=\"entity&&entity.subProcessType&&entity.subProcessType==subProcessType.Dynamic\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.optins.bizDef' | wfLocale}}\" for=\"calledBizDefKey\">\r\n              <span class=\"farris-label-text\">{{'component.optins.bizDef' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <wf-bizprocess-lookup title=\"{{'component.optins.bizDef' | wfLocale}}\" [sourceType]=\"'flowform'\" [displayTxt]=\"entity.calledBizDefName\"\r\n                (afterConfirm)=\"flowFormConfirm($event)\" (clear)=\"clearFlowForm($event)\">\r\n              </wf-bizprocess-lookup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\" *ngIf=\"entity&&entity.subProcessType&&entity.subProcessType==subProcessType.Specified\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.optins.procDef' | wfLocale}}\" for=\"calledElement\">\r\n              <span class=\"farris-label-text\">{{'component.optins.procDef' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <wf-bizprocess-lookup title=\"{{'component.optins.procDef' | wfLocale}}\" [displayTxt]=\"entity.calledElementName\"\r\n                (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n              </wf-bizprocess-lookup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.optins.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">{{'component.optins.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ]
            }] }
];
/** @nocollapse */
WfOptionsComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
WfOptionsComponent.propDecorators = {
    editorParams: [{ type: Input }],
    value: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }]
};
class WfOptionsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return this.localePipe.transform("component.optins.set");
        }
        return this.localePipe.transform("component.optins.notSet");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BillNodeActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case "VoConfig":
                        item.converter = new VoConfigConverter(this.localPipe);
                        item.editor = VoConfigComponent;
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case "WfOpts":
                        item.converter = new WfOptionsConverter(this.localPipe);
                        item.editor = WfOptionsComponent;
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case "wfConfig": //启用工作流
                        item.iterator = this.uiState.boolIterator;
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
BillNodeActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BillNodeActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const SequenceFlowPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    ConditionExpression: "ConditionExpression",
    Default: "Default",
    billCreationType: "billCreationType",
    billRelationType: "billRelationType",
    aifAutoProcessCode: "aifAutoProcessCode",
    aifPushProcessCode: "aifPushProcessCode",
    aifPullProcessCode: "aifPullProcessCode",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SequenceActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localePipe
     */
    constructor(uiState, localePipe) {
        this.uiState = uiState;
        this.localePipe = localePipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case SequenceFlowPropertyKeys.billCreationType:
                        item.iterator = billCreationTypeKeyMap;
                        break;
                    case SequenceFlowPropertyKeys.billRelationType:
                        item.iterator = billRelationTypeKeyMap;
                        break;
                    case SequenceFlowPropertyKeys.aifAutoProcessCode:
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localePipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case SequenceFlowPropertyKeys.aifPushProcessCode:
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localePipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case SequenceFlowPropertyKeys.aifPullProcessCode:
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localePipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
SequenceActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SequenceActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: AifLocalePipe }
];
/** @type {?} */
const billCreationTypeKeyMap = [
    { key: "AUTO", value: "自动生单" },
    { key: "PUSH", value: "推式生单" },
    { key: "PULL", value: "拉式生单" },
];
/** @type {?} */
const billRelationTypeKeyMap = [
    { key: "CREATION", value: "通过生单流程生成目标单" },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessDesignerViewModel {
    /**
     * @param {?} uiState
     * @param {?} service
     * @param {?} util
     * @param {?} notify
     * @param {?} message
     * @param {?} process
     * @param {?} activity
     * @param {?} subProcess
     * @param {?} autoActAdapter
     * @param {?} catchEventAdapter
     * @param {?} messageActAdapter
     * @param {?} notifyActAdapter
     * @param {?} creationActAdapter
     * @param {?} billNodeActivityAdapter
     * @param {?} sequenceActivityAdapter
     * @param {?} modalService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} http
     * @param {?} eventBus
     * @param {?} localePipe
     */
    constructor(uiState, service, util, notify, message, process, activity, subProcess, autoActAdapter, catchEventAdapter, messageActAdapter, notifyActAdapter, creationActAdapter, billNodeActivityAdapter, sequenceActivityAdapter, modalService, injector, resolver, http, eventBus, localePipe) {
        this.uiState = uiState;
        this.service = service;
        this.util = util;
        this.notify = notify;
        this.message = message;
        this.process = process;
        this.activity = activity;
        this.subProcess = subProcess;
        this.autoActAdapter = autoActAdapter;
        this.catchEventAdapter = catchEventAdapter;
        this.messageActAdapter = messageActAdapter;
        this.notifyActAdapter = notifyActAdapter;
        this.creationActAdapter = creationActAdapter;
        this.billNodeActivityAdapter = billNodeActivityAdapter;
        this.sequenceActivityAdapter = sequenceActivityAdapter;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.http = http;
        this.eventBus = eventBus;
        this.localePipe = localePipe;
    }
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    initProcessProperty(obj) {
        /** @type {?} */
        const pptData = obj.propertyData;
        /** @type {?} */
        const ffId = pptData.EntryForm;
        if (ffId) {
            pptData.EntryForm = this.uiState.flowFormInfo.flowForm;
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
        else {
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        // 更新属性框数据与配置
        /** @type {?} */
        const propertyData = obj.propertyData;
        switch (propertyData.ClrTypeID) {
            case ProcessClrTypeID.process:
                this.process.setProcessProperty(obj);
                break;
            case ProcessClrTypeID.userActivity:
                this.activity.setUserActivityProperty(obj, 'userActivity');
                break;
            case ProcessClrTypeID.subProcess:
                this.subProcess.setProperty(obj);
                break;
            case ProcessClrTypeID.autoActivity:
                this.autoActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.catchEvent:
                this.catchEventAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.operationActivity:
                this.activity.setUserActivityProperty(obj, 'autoActivity');
                break;
            case ProcessClrTypeID.messageActivity:
                this.messageActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.notifyActivity:
                this.notifyActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.aifCreationBillActivity:
                this.creationActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.billNodeActivity:
                this.billNodeActivityAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.sequenceActivity:
                this.sequenceActivityAdapter.setProperty(obj);
                break;
            default:
                this.activity.setFlowElementProperty(obj);
                break;
        }
    }
    /**
     * @return {?}
     */
    updateSchemas() {
        /** @type {?} */
        const $schemas = new Subject();
        this.uiState.schemas = [];
        // 检查是否有精简be，如果有则覆盖原有be
        if (this.uiState.flowFormInfo.formalParameters && this.uiState.flowFormInfo.formalParameters.length > 0) {
            /** @type {?} */
            const schemaParams = this.uiState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.dataType === 'CDTSchema' && p.schemaMetadataId));
            /** @type {?} */
            const bizDefKey = this.uiState.flowFormInfo.flowForm.id;
            this.getBeMappingByBizDefKey(bizDefKey).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re && re.enable) {
                    return this.service.getBusinessEntitybyId(re.newSchemaMetaDataId).subscribe((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        /** @type {?} */
                        let data = [d];
                        if (data && data.length > 0) {
                            data.forEach((/**
                             * @param {?} d
                             * @return {?}
                             */
                            (d) => {
                                this.uiState.schemas.push(d);
                            }));
                        }
                        $schemas.next(true);
                    }), (/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        this.uiState.schemas = [];
                        $schemas.next(true);
                    }));
                }
                else {
                    forkJoin$1(schemaParams.map((/**
                     * @param {?} para
                     * @return {?}
                     */
                    para => {
                        return this.service.getBusinessEntitybyId(para.schemaMetadataId);
                    }))).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data && data.length > 0) {
                            data.forEach((/**
                             * @param {?} d
                             * @return {?}
                             */
                            (d) => {
                                this.uiState.schemas.push(d);
                            }));
                        }
                        $schemas.next(true);
                    }), (/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        this.uiState.schemas = [];
                        $schemas.next(true);
                    }));
                }
            }));
        }
        else {
            this.uiState.schemas = [];
            $schemas.next(true);
        }
        return $schemas.asObservable();
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    getFlowFormInfoById(formId) {
        /** @type {?} */
        const $flowform = new Subject();
        if (formId) {
            forkJoin$1(this.service.GetFlowFormbyId(formId), this.service.getParametersbyFlowFormKey(formId).pipe(map((/**
             * @param {?} params
             * @return {?}
             */
            (params) => {
                this.setFormParamCxt(params);
                return params;
            }))), this.service.getComponentsbyFlowformkey(formId), this.service.getExecuteFormbyFlowFormKey(formId), this.service.getBizActivities(formId), this.service.getCustomizeActions(formId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const flowform = new FlowFormInfo();
                flowform.flowForm = re[0];
                flowform.formalParameters = re[1];
                flowform.bizComponents = re[2].filter((/**
                 * @param {?} cmp
                 * @return {?}
                 */
                cmp => cmp.ownerType !== 'Activity'));
                flowform.excuteForms = re[3];
                flowform.bizActivities = re[4];
                flowform.customizeActions = re[5];
                this.uiState.flowFormInfo = flowform;
                this.updateSchemas().subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                (re) => {
                    $flowform.next(flowform);
                }));
            }));
        }
        return $flowform.asObservable();
    }
    /**
     * @return {?}
     */
    getFormFormatsByBizCategory() {
        if (this.uiState.flowFormInfo.flowForm.businessObjectId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/query?param=`;
            /** @type {?} */
            let param = `{"bizCategory":"${this.uiState.flowFormInfo.flowForm.businessObjectId}"}`;
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    saveProcess(content, processInfo, state) {
        return this.service.saveProcess(content, processInfo, state);
    }
    /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    deployProcess(content) {
        return this.service.deployProcess(content);
    }
    /**
     * 带审核的发布流程
     * @param {?} content 流程上下文
     * @param {?} version
     * @return {?}
     */
    releaseProcess(content, version) {
        /** @type {?} */
        const process = JSON.parse(content);
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ReleaseComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.procName = process.DefaultProcess.Name;
        compRef.instance.procVersion = version === 1 ? 1 : version + 1;
        compRef.instance.processDefinitionKey = process.DefaultProcess.Key;
        /** @type {?} */
        const modalOptions = {
            title: this.localePipe.transform('app.processDesigner.releaseProcess'),
            width: 500, height: 550,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        const dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dlg.close();
        }));
    }
    /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    auditProcessDef(auditId, success, key) {
        /** @type {?} */
        const info = new AuditProcessDefInfo();
        info.auditId = auditId;
        info.success = success;
        info.processDefKey = key;
        this.service.auditProcessDef(info);
    }
    /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    saveRTProcess(content, procDefId) {
        return this.service.saveRTProcess(content, procDefId);
    }
    /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    saveAsProcess(process, processInfo) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SaveAsEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.procKey = process.DefaultProcess.Key;
        compRef.instance.procName = process.DefaultProcess.Name + this.localePipe.transform('app.processDesigner.copy');
        compRef.instance.isAdministratorConfig = this.uiState.isAdministratorConfig;
        compRef.instance.enableAdminOrgAut = this.uiState.enableAdminOrgAut;
        compRef.instance.administrator = this.uiState.administrator;
        compRef.instance.accessLevel = processInfo.accessLevel;
        if (!this.uiState.enableAdminOrgAut && !this.uiState.isAdministratorConfig) {
            compRef.instance.organization = processInfo.procOrg.orgId;
            compRef.instance.organizationName = processInfo.procOrg.orgName;
        }
        /** @type {?} */
        const modalOptions = {
            title: this.localePipe.transform('app.processDesigner.saveAs'),
            width: 450, height: 400,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        const dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            process.DefaultProcess.Name = re.procName;
            /** @type {?} */
            const procInfo = new ProcessInfo();
            procInfo.accessLevel = re.accessLevel;
            procInfo.procOrg = {
                orgId: re.organization,
                orgName: re.organizationName
            };
            this.saveProcess(process.ConvertToJson(), procInfo, 1).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.notify.success((/** @type {?} */ ({
                    title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.saveAsSuccess'), timeout: 3000
                })));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.notify.error((/** @type {?} */ ({
                    title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.saveAsFail'), timeout: 3000
                })));
            }));
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            dlg.close();
        }));
    }
    /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @param {?=} showTip
     * @return {?}
     */
    syncDtProcess(content, rtProcessInfo, showTip = true) {
        if (content) {
            /** @type {?} */
            const process = JSON.parse(content);
            if (showTip) {
                this.message.question(this.localePipe.transform('app.processDesigner.syncDt'), (/**
                 * @return {?}
                 */
                () => {
                    this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        this.notify.success((/** @type {?} */ ({
                            title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.syncSuccess'), timeout: 3000
                        })));
                        this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process.DefaultProcess.Key);
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    (error) => {
                        this.notify.error((/** @type {?} */ ({
                            title: this.localePipe.transform('app.processDesigner.tips'), msg: error.error.Message, timeout: 3000
                        })));
                        this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process.DefaultProcess.Key);
                    }));
                }));
            }
            else {
                this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.notify.success((/** @type {?} */ ({
                        title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.syncSuccess'), timeout: 3000
                    })));
                    this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process.DefaultProcess.Key);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.notify.error((/** @type {?} */ ({
                        title: this.localePipe.transform('app.processDesigner.tips'), msg: error.error.Message, timeout: 3000
                    })));
                    this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process.DefaultProcess.Key);
                }));
            }
        }
    }
    /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    beforeCompleteStrategyChange(data, processInfo) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=${processInfo.rtProcDefId}&activityDefinitionId=${data.Id}`;
        return this.http.get(url).pipe(switchMap((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (re && re.length > 0) {
                this.message.info(this.localePipe.transform('app.processDesigner.beforeCompleteStrategyChange'));
                return of$1(false);
            }
            else {
                return of$1(true);
            }
        })));
    }
    /**
     * @param {?} procCategoryId
     * @return {?}
     */
    getProcessCategory(procCategoryId) {
        return this.service.GetFlowFormbyId(procCategoryId);
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    setFormParamCxt(params) {
        this.uiState.formalParameterContext = [];
        if (params && params.length > 0) {
            params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                if (param.dataType === 'CDTSchema') {
                    /** @type {?} */
                    const formalParameterContext = [{
                            key: `schemaId_${param.code}`,
                            name: `schemaId_${param.name}`,
                            description: `schemaId_${param.name}`
                        }, {
                            key: `metadataId_${param.code}`,
                            name: `metadataId_${param.name}`,
                            description: `metadataId_${param.name}`
                        }];
                    this.uiState.formalParameterContext = this.uiState.formalParameterContext.concat(formalParameterContext);
                }
            }));
        }
    }
    /**
     * @param {?} ResourceKeys
     * @param {?} data
     * @return {?}
     */
    copy(ResourceKeys, data) {
        this.eventBus.emit(ResourceKeys, data);
    }
    /**
     * @param {?} ResourceKeys
     * @param {?} data
     * @return {?}
     */
    batchSet(ResourceKeys, data) {
        this.eventBus.emit(ResourceKeys, data);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getProcDefsByKey(key) {
        if (key) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/procDefs/key?procDefKey=${key}`;
            return this.http.get(url);
        }
    }
    /**
     * @param {?} bizDefKey
     * @param {?} schema
     * @return {?}
     */
    checkExpressionsByPayload(bizDefKey, schema) {
        /** @type {?} */
        const checkExpressionsPayload = {
            bizDefKey: bizDefKey,
            schema: schema
        };
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/flowForm/checkExpressionsByPayload`;
        return this.http.post(url, checkExpressionsPayload);
    }
    /**
     * @param {?} bizDefKey
     * @return {?}
     */
    getBeMappingByBizDefKey(bizDefKey) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/flowForm/getBeMappingByBizDefKey?bizDefKey=${bizDefKey}`;
        return this.http.get(url);
    }
}
ProcessDesignerViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerDataService },
    { type: ProcessDeUtil },
    { type: NotifyService },
    { type: MessagerService },
    { type: BpmnProcessViewModel },
    { type: WFFlowElementsViewModel },
    { type: SubProcessViewModel },
    { type: AutoActivityAdapter },
    { type: CatchEventAdapter },
    { type: MessageActivityAdapter },
    { type: NotifyActivityAdapter },
    { type: AifCreationBillActivityAdapter },
    { type: BillNodeActivityAdapter },
    { type: SequenceActivityAdapter },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: HttpService },
    { type: EventBusService },
    { type: WfLocalePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RTProcessInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NoteComponent {
    /**
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(cdr, localeId, resources, localePipe) {
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new Subject();
        this.cancel = new Subject();
        this.placeholder = this.localePipe.transform('component.note.placeholder');
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.submit.next(this.record);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
}
NoteComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-note',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <textarea class=\"form-control content-textarea\" style=\"height: 100%;\" [(ngModel)]=\"record\" [placeholder]=\"placeholder\"></textarea>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.note.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.note.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
NoteComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
NoteComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MessageReceiver$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizComponent {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizParameter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Wf相关常量
 */
class WfConstants {
    /**
     * @return {?}
     */
    static getBasePath() {
        try {
            return ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
    }
}
WfConstants.PF_CMP_ID1 = '7433df25-9260-4c24-86f0-9da3e89450fb';
WfConstants.PF_CMP_ID2 = 'd0783800-ed60-488c-b053-8806a15947fe';
WfConstants.PF_CMP_ID3 = 'b89e9b9a-2e2d-4bd0-b354-187219544d34';
WfConstants.PF_CMP_ID4 = 'a8b8f7a4-49ae-4b7d-88d2-b3772b9d0ae5';
WfConstants.IMAGE_PATH = WfConstants.getBasePath() + "/platform/runtime/common/web/@gsp-wf/wf-process-editor/images";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfDesignerUtils {
    /**
     * 是否为共享流程构件
     * @param {?} metadataId
     * @return {?}
     */
    static isPfComponent(metadataId) {
        if (metadataId === WfConstants.PF_CMP_ID1
            || metadataId === WfConstants.PF_CMP_ID2
            || metadataId === WfConstants.PF_CMP_ID3
            || metadataId === WfConstants.PF_CMP_ID4) {
            return true;
        }
        return false;
    }
    /**
     * 创建内码
     * @return {?}
     */
    static createNM() {
        /**
         * @return {?}
         */
        function S4() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const WfEvents = {
    ShowTips: "ShowTips",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Participant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UserParticipant$1 extends Participant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariablePerformer extends UserParticipant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PositionParticipant$1 extends UserParticipant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentParticipant$1 extends Participant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReportingLineParticipant$1 extends UserParticipant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityExecutorParticipant$2 extends UserParticipant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatrixParticipant$1 extends UserParticipant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrganizationParticipant$1 extends Participant$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ActionScope$4 = {
    /**
     * 指派
     */
    AssignUser: 'AssignUser',
    /**
     * 移交
     */
    Transfer: 'Transfer',
    /**
     * 征询
     */
    AddSignFront: 'AddSignFront',
    /**
     * 加签
     */
    AddSignBehind: 'AddSignBehind',
    /**
     * 知会
     */
    Notify: 'Notify',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 属性工具
 */
class PropertyHelper {
    /**
     * 获取变量赋值列表
     * @param {?} bpmnModel
     * @param {?} variablesSetting
     * @return {?}
     */
    static getVariableSettings(bpmnModel, variablesSetting) {
        /** @type {?} */
        const variables = new Array();
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (variablesSetting && variablesSetting.length > 0) {
            for (const v of variablesSetting) {
                /** @type {?} */
                const variable = {
                    variableCode: v.variableCode,
                    variableName: v.variableName,
                    tag: v.tag,
                    executionTime: v.executionTime,
                    value: v.value,
                    valueText: v.valueText
                };
                if (v.tag === 'component') {
                    if (extendElements.length > 0) {
                        for (const e of extendElements) {
                            if (e instanceof Component$1 && e.Id === v.value) {
                                /** @type {?} */
                                const component = {
                                    Id: e.Id,
                                    Name: e.Name,
                                    MetadataId: e.MetadataId,
                                    MethodCode: e.MethodCode,
                                    ActualParameters: []
                                };
                                if (e.ActualParameters && e.ActualParameters.length > 0) {
                                    for (const p of e.ActualParameters) {
                                        /** @type {?} */
                                        const parameter = {
                                            Name: p.Name,
                                            Value: p.Value,
                                            Tag: p.Tag,
                                        };
                                        component.ActualParameters.push(parameter);
                                    }
                                }
                                variable.component = component;
                            }
                        }
                    }
                }
                variables.push(variable);
            }
        }
        return variables;
    }
    /**
     *
     * @param {?} messageNotices
     * @return {?}
     */
    static getMessageNotices(messageNotices) {
        if (!messageNotices || messageNotices.length == 0) {
            return null;
        }
        return messageNotices.map((/**
         * @param {?} m
         * @return {?}
         */
        m => {
            /** @type {?} */
            const message = new Object;
            message.content = m.content;
            message.sendTime = m.sendTime;
            message.sendType = m.sendType;
            message.subject = m.subject;
            if (m.smsMessageTemplate) {
                /** @type {?} */
                const smsTemplate = new Object;
                smsTemplate.code = m.smsMessageTemplate.code;
                smsTemplate.content = m.smsMessageTemplate.content;
                smsTemplate.smsMessageVariables = new Array();
                if (m.smsMessageTemplate.smsMessageVariables && m.smsMessageTemplate.smsMessageVariables.length > 0) {
                    for (const v of m.smsMessageTemplate.smsMessageVariables) {
                        /** @type {?} */
                        const variable = new Object;
                        variable.id = WfDesignerUtils.createNM();
                        variable.code = v.code;
                        variable.value = v.value;
                        variable.tag = v.tag;
                        smsTemplate.smsMessageVariables.push(variable);
                    }
                }
                message.smsMessageTemplate = smsTemplate;
            }
            /** @type {?} */
            const receiverExpressions = new Array();
            if (m.receiver) {
                /** @type {?} */
                const receivers = m.receiver.split(',');
                /** @type {?} */
                const receiverTexts = m.receiverText.split(',');
                /** @type {?} */
                let userReceiver = new MessageReceiver$1();
                userReceiver.type = 'userParticipant';
                userReceiver.userIds = '';
                userReceiver.userNames = '';
                for (const i in receivers) {
                    if (receivers[i] === 'procInstCreator') {
                        /** @type {?} */
                        let procInstCreator = new MessageReceiver$1();
                        procInstCreator.type = 'processParticipant';
                        procInstCreator.processParticipant = 'procInstCreator';
                        receiverExpressions.push(procInstCreator);
                    }
                    else if (receivers[i] === 'workItemParticipant') {
                        /** @type {?} */
                        let workItemParticipant = new MessageReceiver$1();
                        workItemParticipant.type = 'processParticipant';
                        workItemParticipant.processParticipant = 'workItemParticipant';
                        receiverExpressions.push(workItemParticipant);
                    }
                    else {
                        userReceiver.userIds += (receivers[i] + ',');
                        userReceiver.userNames += (receiverTexts[i] + ',');
                    }
                }
                if (userReceiver.userIds) {
                    userReceiver.userIds = userReceiver.userIds.substring(0, userReceiver.userIds.length - 1);
                    userReceiver.userNames = userReceiver.userNames.substring(0, userReceiver.userNames.length - 1);
                    receiverExpressions.push(userReceiver);
                }
            }
            if (m.receiverExpressions && m.receiverExpressions.length > 0) {
                for (const e of m.receiverExpressions) {
                    if (e instanceof ActivityExecutorParticipantExpression) {
                        /** @type {?} */
                        let activityExecutorParticipant = new MessageReceiver$1();
                        activityExecutorParticipant.type = 'processParticipant';
                        activityExecutorParticipant.processParticipant = 'activityExecutorParticipant';
                        activityExecutorParticipant.activityDefId = e.activityDefId;
                        activityExecutorParticipant.activityDefName = e.activityDefName;
                        receiverExpressions.push(activityExecutorParticipant);
                    }
                    else if (e instanceof UserParticipantExpression) {
                        /** @type {?} */
                        let variableReceiver = new MessageReceiver$1();
                        variableReceiver.type = 'variableParticipant';
                        variableReceiver.variableParticipant = e.UserId;
                        variableReceiver.variableName = e.name;
                        variableReceiver.orgType = e.OrgType;
                        receiverExpressions.push(variableReceiver);
                    }
                    else if (e instanceof PositionParticipantExpression) {
                        /** @type {?} */
                        let positionReceiver = new MessageReceiver$1();
                        positionReceiver.type = 'positionParticipant';
                        positionReceiver.positionId = e.PositionId;
                        positionReceiver.positionName = e.PositionName;
                        positionReceiver.positionType = e.PositionType;
                        if (positionReceiver.positionType === '1') {
                            positionReceiver.orgId = e.OrgId;
                            positionReceiver.orgType = e.OrgType;
                        }
                        receiverExpressions.push(positionReceiver);
                    }
                }
            }
            if (receiverExpressions.length > 0) {
                message.receivers = receiverExpressions;
            }
            return message;
        }));
    }
    /**
     *
     * @param {?} components
     * @return {?}
     */
    static getBizComponentList(components) {
        /** @type {?} */
        const bizComponentList = new Array();
        if (components && components.length > 0) {
            for (const component of components) {
                /** @type {?} */
                const bizComponent = new BizComponent();
                bizComponent.id = component.Id;
                bizComponent.name = component.Name;
                bizComponent.metadataId = component.MetadataId;
                bizComponent.methodCode = component.MethodCode;
                bizComponent.executionTime = component.Time;
                bizComponent.isForCompensation = component.isForCompensation;
                bizComponent.scopeType = component.ScopeType || null;
                bizComponent.actualParameters = new Array();
                if (component.ActualParameters && component.ActualParameters.length > 0) {
                    for (const param of component.ActualParameters) {
                        /** @type {?} */
                        const bizParam = new BizParameter();
                        bizParam.code = param.Name;
                        bizParam.name = param.Name;
                        bizParam.value = param.Value;
                        bizComponent.actualParameters.push(bizParam);
                    }
                }
                bizComponentList.push(bizComponent);
            }
        }
        return bizComponentList;
    }
    /**
     *
     * @param {?} roles
     * @return {?}
     */
    static getPerformerList(roles) {
        /** @type {?} */
        const performers = new Array();
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        (role) => {
            if (role == null) {
                return;
            }
            if (role.participantExpression instanceof UserParticipantExpression) {
                /** @type {?} */
                const user = (/** @type {?} */ (role.participantExpression));
                if (user) {
                    /** @type {?} */
                    const userPerformer = new UserParticipant$1();
                    userPerformer.id = user.id;
                    userPerformer.performerId = user.UserId;
                    userPerformer.performerName = user.name;
                    userPerformer.type = user.ClrTypeID;
                    userPerformer.orgId = user.OrgId;
                    userPerformer.orgName = user.OrgName;
                    userPerformer.orgType = user.OrgType;
                    userPerformer.condition = role.condition ? role.condition.Value : '';
                    userPerformer.tag = user.Tag;
                    userPerformer.order = role.order;
                    performers.push(userPerformer);
                }
            }
            else if (role.participantExpression instanceof VariableParticipantExpression) {
                /** @type {?} */
                const variable = (/** @type {?} */ (role.participantExpression));
                if (variable) {
                    /** @type {?} */
                    const variablePerformer = new VariablePerformer();
                    variablePerformer.id = variable.id,
                        variablePerformer.name = variable.Name,
                        variablePerformer.type = variable.ClrTypeID,
                        variablePerformer.condition = role.condition ? role.condition.Value : '',
                        variablePerformer.tag = variable.Tag;
                    variablePerformer.relation = variable.Relation;
                    variablePerformer.varType = variable.VarType;
                    variablePerformer.varValue = variable.VarValue;
                    variablePerformer.order = role.order;
                    performers.push(variablePerformer);
                }
            }
            else if (role.participantExpression instanceof PositionParticipantExpression) {
                /** @type {?} */
                const position = (/** @type {?} */ (role.participantExpression));
                if (position) {
                    /** @type {?} */
                    const positionPerformer = new PositionParticipant$1();
                    positionPerformer.id = position.id;
                    positionPerformer.performerId = position.PositionId;
                    positionPerformer.positionType = position.PositionType;
                    positionPerformer.performerName = position.PositionName;
                    positionPerformer.type = position.ClrTypeID;
                    positionPerformer.orgId = position.OrgId || '';
                    positionPerformer.orgName = position.OrgName || '';
                    positionPerformer.orgType = position.OrgType || '';
                    positionPerformer.condition = role.condition ? role.condition.Value : '';
                    positionPerformer.order = role.order;
                    performers.push(positionPerformer);
                }
            }
            else if (role.participantExpression instanceof ComponentParticipantExpression) {
                /** @type {?} */
                const cmp = (/** @type {?} */ (role.participantExpression));
                if (cmp) {
                    /** @type {?} */
                    const componentPerformer = new ComponentParticipant$1();
                    componentPerformer.id = cmp.id;
                    componentPerformer.name = cmp.componentName;
                    componentPerformer.metadataId = cmp.componentId;
                    componentPerformer.methodCode = cmp.methodCode;
                    componentPerformer.methodName = cmp.methodName;
                    componentPerformer.type = cmp.ClrTypeID;
                    componentPerformer.actualParameters = new Array();
                    if (cmp.actualParameters && cmp.actualParameters.length > 0) {
                        /** @type {?} */
                        let paramters = [];
                        cmp.actualParameters.forEach((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => paramters.push({ code: p.Name, value: p.Value, valueText: p.ValueText, tag: p.Tag })));
                        componentPerformer.actualParameters = paramters;
                    }
                    if (role.condition) {
                        componentPerformer.condition = role.condition.Value;
                    }
                    componentPerformer.order = role.order;
                    performers.push(componentPerformer);
                }
            }
            else if (role.participantExpression instanceof ReportingLineParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const reportingLine = new ReportingLineParticipant$1();
                    reportingLine.id = r.id;
                    reportingLine.reportingLineDefId = r.ReportingLineDefId;
                    reportingLine.reportingLineDefName = r.ReportingLineDefName;
                    reportingLine.refOrgId = r.RefOrgId;
                    reportingLine.refUserId = r.RefUserId;
                    reportingLine.refEmployeeId = r.RefEmployeeId;
                    reportingLine.dimension = r.Dimension;
                    reportingLine.performerName = r.RefUserId;
                    reportingLine.tag = r.Tag;
                    reportingLine.type = r.ClrTypeID;
                    if (role.condition) {
                        reportingLine.condition = role.condition.Value;
                    }
                    reportingLine.order = role.order;
                    performers.push(reportingLine);
                }
            }
            else if (role.participantExpression instanceof ActivityExecutorParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const activityExecutor = new ActivityExecutorParticipant$2();
                    activityExecutor.id = r.id;
                    activityExecutor.type = r.ClrTypeID;
                    activityExecutor.activityDefId = r.activityDefId;
                    activityExecutor.activityDefName = r.activityDefName;
                    activityExecutor.performerName = '<' + r.activityDefName + mxResources.get('eventHandler');
                    if (role.condition) {
                        activityExecutor.condition = role.condition.Value;
                    }
                    activityExecutor.order = role.order;
                    performers.push(activityExecutor);
                }
            }
            else if (role.participantExpression instanceof MatrixParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const matrix = new MatrixParticipant$1();
                    matrix.id = r.id;
                    matrix.matrixDefId = r.matrixDefId;
                    matrix.matrixDefName = r.matrixDefName;
                    matrix.conditionField1 = r.conditionField1;
                    matrix.conditionFieldText1 = r.conditionFieldText1;
                    matrix.conditionField2 = r.conditionField2;
                    matrix.conditionFieldText2 = r.conditionFieldText2;
                    matrix.conditionField3 = r.conditionField3;
                    matrix.conditionFieldText3 = r.conditionFieldText3;
                    matrix.multivaluedCondition = r.multivaluedCondition;
                    matrix.dataFieldAlias = r.dataFieldAlias;
                    matrix.type = r.ClrTypeID;
                    matrix.order = role.order;
                    if (role.condition) {
                        matrix.condition = role.condition.Value;
                    }
                    performers.push(matrix);
                }
            }
            else if (role.participantExpression instanceof OrganizationParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const organization = new OrganizationParticipant$1;
                    organization.id = r.id;
                    organization.type = r.ClrTypeID;
                    organization.name = r.name;
                    organization.actionScope = (/** @type {?} */ (r.actionScope));
                    organization.organizationLevel = r.organizationLevel;
                    organization.organizationId = r.organizationId;
                    organization.organizationCode = r.organizationCode;
                    organization.organizationName = r.organizationName;
                    organization.includeChildren = r.includeChildren;
                    organization.parentsUntil = r.parentsUntil;
                    organization.tag = r.tag;
                    organization.order = role.order;
                    if (role.condition) {
                        organization.condition = role.condition.Value;
                    }
                    performers.push(organization);
                }
            }
        }));
        return performers;
    }
    /**
     * 移交等的范围，与上个方法比这里传入的是具体的参与者类型（用户参与者、岗位参与者，balbala）
     * @param {?} roles
     * @return {?}
     */
    static getPerformerListTest(roles) {
        /** @type {?} */
        const performers = new Array();
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        (role) => {
            if (role == null) {
                return;
            }
            if (role instanceof UserParticipantExpression) {
                /** @type {?} */
                const user = (/** @type {?} */ (role));
                if (user) {
                    /** @type {?} */
                    const userPerformer = new UserParticipant$1();
                    userPerformer.id = user.id;
                    userPerformer.performerId = user.UserId;
                    userPerformer.performerName = user.name;
                    userPerformer.type = user.ClrTypeID;
                    userPerformer.orgId = user.OrgId;
                    userPerformer.orgName = user.OrgName;
                    userPerformer.orgType = user.OrgType;
                    userPerformer.condition = role.condition ? role.condition.Value : '';
                    userPerformer.tag = user.Tag;
                    userPerformer.order = role.order;
                    performers.push(userPerformer);
                }
            }
            else if (role instanceof VariableParticipantExpression) {
                /** @type {?} */
                const variable = (/** @type {?} */ (role));
                if (variable) {
                    /** @type {?} */
                    const variablePerformer = new VariablePerformer();
                    variablePerformer.id = variable.id,
                        variablePerformer.name = variable.Name,
                        variablePerformer.type = variable.ClrTypeID,
                        variablePerformer.condition = role.condition ? role.condition.Value : '',
                        variablePerformer.tag = variable.Tag;
                    variablePerformer.relation = variable.Relation;
                    variablePerformer.varType = variable.VarType;
                    variablePerformer.varValue = variable.VarValue;
                    variablePerformer.order = role.order;
                    performers.push(variablePerformer);
                }
            }
            else if (role instanceof PositionParticipantExpression) {
                /** @type {?} */
                const position = (/** @type {?} */ (role));
                if (position) {
                    /** @type {?} */
                    const positionPerformer = new PositionParticipant$1();
                    positionPerformer.id = position.id;
                    positionPerformer.performerId = position.PositionId;
                    positionPerformer.positionType = position.PositionType;
                    positionPerformer.performerName = position.PositionName;
                    positionPerformer.type = position.ClrTypeID;
                    positionPerformer.orgId = position.OrgId || '';
                    positionPerformer.orgName = position.OrgName || '';
                    positionPerformer.orgType = position.OrgType || '';
                    positionPerformer.condition = role.condition ? role.condition.Value : '';
                    positionPerformer.order = role.order;
                    performers.push(positionPerformer);
                }
            }
            else if (role instanceof ComponentParticipantExpression) {
                /** @type {?} */
                const cmp = (/** @type {?} */ (role));
                if (cmp) {
                    /** @type {?} */
                    const componentPerformer = new ComponentParticipant$1();
                    componentPerformer.id = cmp.id;
                    componentPerformer.name = cmp.componentName;
                    componentPerformer.metadataId = cmp.componentId;
                    componentPerformer.methodCode = cmp.methodCode;
                    componentPerformer.methodName = cmp.methodName;
                    componentPerformer.type = cmp.ClrTypeID;
                    componentPerformer.actualParameters = new Array();
                    if (cmp.actualParameters && cmp.actualParameters.length > 0) {
                        /** @type {?} */
                        let paramters = [];
                        cmp.actualParameters.forEach((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => paramters.push({ code: p.Name, value: p.Value, valueText: p.ValueText, tag: p.Tag })));
                        componentPerformer.actualParameters = paramters;
                    }
                    if (role.condition) {
                        componentPerformer.condition = role.condition.Value;
                    }
                    componentPerformer.order = role.order;
                    performers.push(componentPerformer);
                }
            }
            else if (role instanceof ReportingLineParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const reportingLine = new ReportingLineParticipant$1();
                    reportingLine.id = r.id;
                    reportingLine.reportingLineDefId = r.ReportingLineDefId;
                    reportingLine.reportingLineDefName = r.ReportingLineDefName;
                    reportingLine.refOrgId = r.RefOrgId;
                    reportingLine.refUserId = r.RefUserId;
                    reportingLine.refEmployeeId = r.RefEmployeeId;
                    reportingLine.dimension = r.Dimension;
                    reportingLine.performerName = r.RefUserId;
                    reportingLine.tag = r.Tag;
                    reportingLine.type = r.ClrTypeID;
                    if (role.condition) {
                        reportingLine.condition = role.condition.Value;
                    }
                    reportingLine.order = role.order;
                    performers.push(reportingLine);
                }
            }
            else if (role instanceof ActivityExecutorParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const activityExecutor = new ActivityExecutorParticipant$2();
                    activityExecutor.id = r.id;
                    activityExecutor.type = r.ClrTypeID;
                    activityExecutor.activityDefId = r.activityDefId;
                    activityExecutor.activityDefName = r.activityDefName;
                    activityExecutor.performerName = '<' + r.activityDefName + mxResources.get('eventHandler');
                    if (role.condition) {
                        activityExecutor.condition = role.condition.Value;
                    }
                    activityExecutor.order = role.order;
                    performers.push(activityExecutor);
                }
            }
            else if (role instanceof MatrixParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const matrix = new MatrixParticipant$1();
                    matrix.id = r.id;
                    matrix.matrixDefId = r.matrixDefId;
                    matrix.matrixDefName = r.matrixDefName;
                    matrix.conditionField1 = r.conditionField1;
                    matrix.conditionFieldText1 = r.conditionFieldText1;
                    matrix.conditionField2 = r.conditionField2;
                    matrix.conditionFieldText2 = r.conditionFieldText2;
                    matrix.conditionField3 = r.conditionField3;
                    matrix.conditionFieldText3 = r.conditionFieldText3;
                    matrix.multivaluedCondition = r.multivaluedCondition;
                    matrix.dataFieldAlias = r.dataFieldAlias;
                    matrix.type = r.ClrTypeID;
                    matrix.order = role.order;
                    if (role.condition) {
                        matrix.condition = role.condition.Value;
                    }
                    performers.push(matrix);
                }
            }
            else if (role instanceof OrganizationParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const organization = new OrganizationParticipant$1;
                    organization.id = r.id;
                    organization.type = r.ClrTypeID;
                    organization.name = r.name;
                    organization.actionScope = (/** @type {?} */ (r.actionScope));
                    organization.organizationLevel = r.organizationLevel;
                    organization.organizationId = r.organizationId;
                    organization.organizationCode = r.organizationCode;
                    organization.organizationName = r.organizationName;
                    organization.includeChildren = r.includeChildren;
                    organization.parentsUntil = r.parentsUntil;
                    organization.tag = r.tag;
                    organization.order = role.order;
                    if (role.condition) {
                        organization.condition = role.condition.Value;
                    }
                    performers.push(organization);
                }
            }
        }));
        return performers;
    }
    /**
     *
     * @param {?} notifyAble
     * @param {?} dynamicParticipants
     * @return {?}
     */
    static getNotifyAble(notifyAble, dynamicParticipants) {
        /** @type {?} */
        const notifyScope = new ActionOrganizationScope();
        notifyScope.action = ActionScope$4.Notify;
        notifyScope.enable = notifyAble;
        if (notifyAble) {
            /** @type {?} */
            const roles = dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope$4.Notify));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant$1;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            notifyScope.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                notifyScope.scope.participantInfo = new ParticipantInfo();
                notifyScope.scope.participantInfo.potentialOwnerList = list;
                notifyScope.scope.participantInfo.isAllScope = true;
            }
            else {
                notifyScope.scope.participantInfo = new ParticipantInfo();
                notifyScope.scope.participantInfo.isAllScope = false;
            }
        }
        return notifyScope;
    }
    /**
     * @param {?} process
     * @param {?} parameters
     * @return {?}
     */
    static updateFormalParameters(process, parameters) {
        if (!parameters) {
            parameters = [];
        }
        /** @type {?} */
        let objects = process.GetDataObjects();
        if (parameters !== null && parameters.length > 0) {
            for (const p of parameters) {
                /** @type {?} */
                const dataType = new DataType(process.Model);
                // 先移除code相同的dataObject
                for (const o of objects) {
                    if (o instanceof DataObject && o.Name === p.code) {
                        process.RemoveDataObject(o.Id);
                    }
                }
                dataType.Category = DataTypes.BasicType;
                dataType.BasicType = p.dataType;
                dataType.Description = p.description;
                // dataType.InitialValue = p.initialValue;
                if (p.parameterMode === 0) {
                    /** @type {?} */
                    const dataObject = new ValuedDataObject(process.Model);
                    dataObject.Name = p.code;
                    dataObject.Documentation = p.name;
                    dataObject.DataType = dataType;
                    dataObject.IsAllowNull = p.allowNull;
                    if (p.initialValue || p.initialValueType) {
                        /** @type {?} */
                        const variableSetting = new VariableSetting(process.Model);
                        variableSetting.variableCode = p.code;
                        variableSetting.variableName = p.name;
                        variableSetting.tag = p.initialValueType;
                        variableSetting.value = p.initialValue;
                        variableSetting.valueText = p.initialValue;
                        dataObject.variableSetting = variableSetting;
                    }
                    process.AddDataObject(dataObject);
                }
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 流程元素类。
 * 取名虽然Cell，但实际上不需要继承mxCell以及Cell类，仅持有流程与画布实例，方法属性获取与修改操作。
 */
class WfProcessCell extends ProcessCell {
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let extendList = [];
        if (this.editorUi.procExtProps && this.editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(this.editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let propertyData = {};
        /** @type {?} */
        let usual = new ElementPropertyConfig();
        usual.categoryId = 'usual';
        usual.categoryName = mxResources.get("basicInfo");
        usual.tabId = 'basic';
        usual.tabName = mxResources.get("basic");
        usual.properties = [
            { propertyID: ProcessPropertyKeys.Name, propertyName: mxResources.get("name"), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: ProcessPropertyKeys.NameLanguage, propertyName: mxResources.get("nameLanguage"), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: ProcessPropertyKeys.Key, propertyName: mxResources.get("key"), propertyType: 'string', readonly: true },
            { propertyID: ProcessPropertyKeys.EntryForm, propertyName: mxResources.get("entryForm"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.startMode, propertyName: mxResources.get("startMode"), propertyType: 'select' },
            { propertyID: ProcessPropertyKeys.wf_TitleExpression, propertyName: mxResources.get("wfTitle"), propertyType: 'modal' },
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get("formDef");
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get("basic");
        formDef.properties = [
            { propertyID: ProcessPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get("formsPC"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get("formsMobile"), propertyType: 'modal' },
        ];
        /** @type {?} */
        let process = new ElementPropertyConfig();
        process.categoryId = 'process';
        process.categoryName = mxResources.get("process");
        process.tabId = 'advanced';
        process.tabName = mxResources.get("advanced");
        process.properties = [
            { propertyID: ProcessPropertyKeys.wf_Component, propertyName: mxResources.get("wfComponent"), propertyType: 'modal' },
        ];
        /** @type {?} */
        let advanced = new ElementPropertyConfig();
        advanced.categoryId = 'advanced';
        advanced.categoryName = mxResources.get("otherConfig");
        advanced.tabId = 'advanced';
        advanced.tabName = mxResources.get("advanced");
        advanced.properties = [
            { propertyID: ProcessPropertyKeys.processVariables, propertyName: mxResources.get("processVariables"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.wf_CustomizeAction, propertyName: mxResources.get("customizeAction"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.enablePriority, propertyName: mxResources.get("enablePriority"), propertyType: 'select' },
            { propertyID: ProcessPropertyKeys.enableWholeOrderRetrieve, propertyName: mxResources.get("enableWholeOrderRetrieve"), propertyType: 'select', description: mxResources.get("description") },
            { propertyID: ProcessPropertyKeys.imageSettings, propertyName: mxResources.get("messageProperty"), propertyType: 'modal' },
        ];
        /** @type {?} */
        const time = new ElementPropertyConfig();
        time.categoryId = 'messageProperty'; // 消息属性
        time.categoryName = mxResources.get("timelinessInfo");
        time.tabId = 'advanced';
        time.tabName = mxResources.get("advanced");
        time.properties = [
            { propertyID: ProcessPropertyKeys.timeLimitControl, propertyName: mxResources.get("timeLimitControl"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.messageNotice, propertyName: mxResources.get("messageNotice"), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            const extendProperty = new ElementPropertyConfig();
            extendProperty.categoryId = 'extendProperty';
            extendProperty.categoryName = mxResources.get("extendProperty");
            extendProperty.tabId = 'advanced';
            extendProperty.tabName = mxResources.get("advanced");
            extendProperty.properties = new Array();
            // 组织扩展属性的二级list
            for (const g of groupList) {
                extendProperty.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
            }
            this.setProcessPropertyValue(propertyData, groupList);
            return {
                propertyConfig: [usual, formDef, process, time, advanced, extendProperty],
                propertyData: propertyData
            };
        }
        else {
            this.setProcessPropertyValue(propertyData, groupList);
            return {
                propertyConfig: [usual, formDef, process, time, advanced],
                propertyData: propertyData
            };
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const propertyID = obj.propertyID;
        if (propertyID) {
            switch (propertyID) {
                case 'EntryForm': //流程分类
                    // 更新流程分类名称（流程分类名称可能修改）
                    this.updateProcessHeader(obj.propertyValue.name, obj.propertyValue.businessObjectId, obj.propertyValue.id);
                    this.updateFlowFormInfo(obj.formalParameters, obj.processBizComponnets, obj.executeForms, obj.customizeActions, obj.bizCmps);
                    this.bindProcessTitleExpression(obj.flowForm.processDescription);
                    break;
                case ProcessPropertyKeys.wf_Component: // 流程构件
                    this.updateProcessComponents(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.wf_ExecuteForms_PC:
                    this.updateExecuteForm(obj.propertyValue, 'PC');
                    if (obj.parameters && obj.parameters.length > 0) {
                        PropertyHelper.updateFormalParameters(this.process, obj.parameters);
                    }
                    break;
                case ProcessPropertyKeys.wf_ExecuteForms_Mobile:
                    this.updateExecuteForm(obj.propertyValue, 'MOBILE');
                    if (obj.parameters && obj.parameters.length > 0) {
                        PropertyHelper.updateFormalParameters(this.process, obj.parameters);
                    }
                    break;
                case ProcessPropertyKeys.wf_CustomizeAction:
                    this.updateCustomizeActions(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.wf_TitleExpression:
                    this.modifyProcessTitleExpression(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.allowPreAssign:
                    this.updateAllowPreAssign(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.startMode:
                    this.updateStartMode(obj.propertyValue, obj.allBizCmps, obj.bizCmps);
                    break;
                case ProcessPropertyKeys.enablePriority:
                    this.updateEnablePriority(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.enableWholeOrderRetrieve:
                    this.updateEnableWholeOrderRetrieve(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.processVariables:
                    this.updateProcessVariables(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.timeLimitControl:
                    this.updateProcessTimeLimitControl(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.messageNotice:
                    this.updateProcessMessageNotices(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.imageSettings:
                    this.updateImageSettings(obj.propertyValue);
                    break;
                default:
                    // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                    if (this.editorUi.procExtProps.findIndex((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.id === propertyID)) > -1) {
                        this.resetExtendProperty(obj.propertyValue);
                    }
                    else {
                        super.updateProps(obj);
                    }
                    break;
            }
        }
    }
    /**
     * 设置流程属性值
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    setProcessPropertyValue(propertyData, groupList) {
        /** @type {?} */
        let process = this.process;
        if (process) {
            if (!process.Name)
                process.Name = '默认流程';
            if (!process.Key)
                process.Key = BpmnModelHelper.GenerateElementId();
            propertyData[ProcessPropertyKeys.Id] = process.Id;
            propertyData[ProcessPropertyKeys.ClrTypeID] = process.ClrTypeID;
            propertyData[ProcessPropertyKeys.Name] = process.Name;
            propertyData[ProcessPropertyKeys.NameLanguage] = process.NameLanguage || {
                "zh-CHS": process.Name,
            };
            propertyData[ProcessPropertyKeys.Key] = process.Key;
            propertyData[ProcessPropertyKeys.wf_TitleExpression] = '';
            /** @type {?} */
            let extendElements = process.GetExtensionElements();
            /** @type {?} */
            let component = [];
            /** @type {?} */
            let webForm;
            /** @type {?} */
            let mobileForm;
            /** @type {?} */
            let customizeActions = [];
            /** @type {?} */
            let proExtendProperties = [];
            /** @type {?} */
            const messagesNotices = new Array();
            // tslint:disable-next-line: forin
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    propertyData[ProcessPropertyKeys.EntryForm] = {
                        id: ((/** @type {?} */ (extendElements[i]))).BizDefKey,
                        name: ((/** @type {?} */ (extendElements[i]))).BizDefName
                    };
                    propertyData[ProcessPropertyKeys.allowPreAssign] = ((/** @type {?} */ (extendElements[i]))).allowPreAssign;
                    propertyData[ProcessPropertyKeys.startMode] = ((/** @type {?} */ (extendElements[i]))).startMode;
                    propertyData[ProcessPropertyKeys.enablePriority] = ((/** @type {?} */ (extendElements[i]))).enablePriority ? ((/** @type {?} */ (extendElements[i]))).enablePriority : false;
                    propertyData[ProcessPropertyKeys.enableWholeOrderRetrieve] = ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve ? ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve : false;
                }
                if (extendElements[i] instanceof Component$1
                    && ((/** @type {?} */ (extendElements[i]))).Time !== ToolTime.UNDEFINITION) {
                    component.push(this.convert2Component((/** @type {?} */ (extendElements[i]))));
                }
                if (extendElements[i] instanceof ExecuteForm) {
                    /** @type {?} */
                    const form = (/** @type {?} */ (extendElements[i]));
                    if (form.TerminalType === 'PC') {
                        webForm = form;
                    }
                    else if (form.TerminalType === 'MOBILE') {
                        mobileForm = form;
                    }
                }
                if (extendElements[i] instanceof TitleExpression) {
                    propertyData[ProcessPropertyKeys.wf_TitleExpression] =
                        ((/** @type {?} */ (extendElements[i]))).valueLanguage ? ((/** @type {?} */ (extendElements[i]))).valueLanguage : ((/** @type {?} */ (extendElements[i]))).value;
                }
                if (extendElements[i] instanceof CustomizeAction) {
                    customizeActions.push(extendElements[i]);
                }
                if (extendElements[i] instanceof MessageNotice) {
                    messagesNotices.push(this.getMessageNotice((/** @type {?} */ (extendElements[i]))));
                }
                if (extendElements[i] instanceof TimeLimitControl) {
                    propertyData[ProcessPropertyKeys.timeLimitControl] = this.getPrcocessTimeLimitInfo((/** @type {?} */ (extendElements[i])));
                }
                if (extendElements[i] instanceof ExtendProperty) {
                    proExtendProperties.push(extendElements[i]);
                }
                if (extendElements[i] instanceof ImageSettings) {
                    // imageSettings.push(extendElements[i]);
                    propertyData[ProcessPropertyKeys.imageSettings] = extendElements[i];
                }
            }
            /** @type {?} */
            const processVariables = this.getProcessVariables(process);
            propertyData[ProcessPropertyKeys.processVariables] = processVariables;
            propertyData[ProcessPropertyKeys.wf_Component] = component;
            propertyData[ProcessPropertyKeys.wf_ExecuteForms_PC] = webForm;
            propertyData[ProcessPropertyKeys.wf_ExecuteForms_Mobile] = mobileForm;
            propertyData[ProcessPropertyKeys.wf_CustomizeAction] = customizeActions;
            propertyData[ProcessPropertyKeys.messageNotice] = messagesNotices;
            for (const g of groupList) {
                // 取回模型上的value值给到扩展属性组件里
                if (proExtendProperties && proExtendProperties.length > 0) {
                    g.childs.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    (a, b) => {
                        return a.sortOrder - b.sortOrder;
                    })).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        proExtendProperties.forEach((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => {
                            if (e.key == d.code) {
                                d.value = e.value;
                            }
                        }));
                    }));
                }
                propertyData[g.parent.id] = g.childs;
            }
        }
    }
    /**
     * @param {?} process
     * @return {?}
     */
    getProcessVariables(process) {
        /** @type {?} */
        let processVariables = new Array();
        /** @type {?} */
        const extendElements = process.GetExtensionElements();
        /** @type {?} */
        const dataObjects = process.GetDataObjects();
        if (dataObjects !== null && dataObjects.length > 0) {
            for (const obj of dataObjects) {
                if (obj instanceof ValuedDataObject && obj.DataType.Category !== DataTypes.CustomType) {
                    /** @type {?} */
                    const variable = {
                        id: obj.Id,
                        name: obj.Name,
                        documentation: obj.Documentation,
                        basicType: obj.DataType.BasicType,
                        tag: obj.variableSetting ? obj.variableSetting.tag : '',
                        value: obj.variableSetting ? obj.variableSetting.value : '',
                        valueText: obj.variableSetting ? obj.variableSetting.valueText : '',
                        description: obj.DataType.Description
                    };
                    if (obj.variableSetting && obj.variableSetting.tag === 'component') {
                        if (extendElements.length > 0) {
                            for (const e of extendElements) {
                                if (e instanceof Component$1 && e.Id === obj.variableSetting.value) {
                                    /** @type {?} */
                                    const component = {
                                        Id: e.Id,
                                        Name: e.Name,
                                        MetadataId: e.MetadataId,
                                        MethodCode: e.MethodCode,
                                        ActualParameters: []
                                    };
                                    if (e.ActualParameters && e.ActualParameters.length > 0) {
                                        for (const p of e.ActualParameters) {
                                            /** @type {?} */
                                            const parameter = {
                                                Name: p.Name,
                                                Value: p.Value,
                                                Tag: p.Tag,
                                            };
                                            component.ActualParameters.push(parameter);
                                        }
                                    }
                                    variable.component = component;
                                }
                            }
                        }
                    }
                    processVariables.push(variable);
                }
            }
        }
        return processVariables;
    }
    /**
     * @param {?} timeLimitControl
     * @return {?}
     */
    getPrcocessTimeLimitInfo(timeLimitControl) {
        /** @type {?} */
        let timeLimit;
        if (timeLimitControl) {
            timeLimit = new TimeLimitControlInfo();
            timeLimit.enable = timeLimitControl.enable;
            timeLimit.tag = timeLimitControl.tag;
            timeLimit.dueTime = timeLimitControl.dueTime;
            timeLimit.timeUnit = timeLimitControl.timeUnit;
            timeLimit.expireOperations = new Array();
            if (timeLimitControl.expireOperations && timeLimitControl.expireOperations.length > 0) {
                /** @type {?} */
                const operations = timeLimitControl.expireOperations;
                for (const o of operations) {
                    if (o.ClrTypeID.indexOf('SendMessageExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperationInfo();
                        sendMessage.timeDuration = operation.timeDuration;
                        sendMessage.durationType = operation.durationType;
                        sendMessage.timeUnit = operation.timeUnit;
                        sendMessage.message = operation.message;
                        sendMessage.sendType = operation.sendType;
                        sendMessage.subject = operation.subject;
                        sendMessage.id = operation.id;
                        sendMessage.receiver = operation.receiver;
                        sendMessage.receiverText = operation.receiverText;
                        sendMessage.cycleEnable = operation.cycleEnable;
                        sendMessage.cycleTime = operation.cycleTime;
                        sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                        sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                        if (operation.smsMessageTemplate) {
                            /** @type {?} */
                            const smsTemplate = new Object;
                            smsTemplate.code = operation.smsMessageTemplate.code;
                            smsTemplate.content = operation.smsMessageTemplate.content;
                            smsTemplate.smsMessageVariables = new Array();
                            if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of operation.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new Object;
                                    variable.id = WfDesignerUtils.createNM();
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsTemplate;
                        }
                        timeLimit.expireOperations.push(sendMessage);
                    }
                    else if (o.ClrTypeID.indexOf('AutoHandleExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperationInfo;
                        autoHandle.id = operation.id;
                        autoHandle.durationType = operation.durationType;
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        timeLimit.expireOperations.push(autoHandle);
                    }
                }
            }
        }
        return timeLimit;
    }
    /**
     * @param {?} messageNotice
     * @return {?}
     */
    getMessageNotice(messageNotice) {
        /** @type {?} */
        const message = new Object;
        message.content = messageNotice.content;
        message.sendTime = messageNotice.sendTime;
        message.sendType = messageNotice.sendType;
        message.subject = messageNotice.subject;
        if (messageNotice.smsMessageTemplate) {
            /** @type {?} */
            const smsTemplate = new Object;
            smsTemplate.code = messageNotice.smsMessageTemplate.code;
            smsTemplate.content = messageNotice.smsMessageTemplate.content;
            smsTemplate.smsMessageVariables = new Array();
            if (messageNotice.smsMessageTemplate.smsMessageVariables && messageNotice.smsMessageTemplate.smsMessageVariables.length > 0) {
                for (const v of messageNotice.smsMessageTemplate.smsMessageVariables) {
                    /** @type {?} */
                    const variable = new Object;
                    variable.id = WfDesignerUtils.createNM();
                    variable.code = v.code;
                    variable.value = v.value;
                    variable.tag = v.tag;
                    smsTemplate.smsMessageVariables.push(variable);
                }
            }
            message.smsMessageTemplate = smsTemplate;
        }
        /** @type {?} */
        const receiverExpressions = new Array();
        if (messageNotice.receiver) {
            /** @type {?} */
            const receivers = messageNotice.receiver.split(',');
            /** @type {?} */
            const receiverTexts = messageNotice.receiverText.split(',');
            /** @type {?} */
            let userReceiver = new MessageReceiver$1();
            userReceiver.type = 'userParticipant';
            userReceiver.userIds = '';
            userReceiver.userNames = '';
            for (const i in receivers) {
                if (receivers[i] === 'procInstCreator') {
                    /** @type {?} */
                    let procInstCreator = new MessageReceiver$1();
                    procInstCreator.type = 'processParticipant';
                    procInstCreator.processParticipant = 'procInstCreator';
                    receiverExpressions.push(procInstCreator);
                }
                else if (receivers[i] === 'workItemParticipant') {
                    /** @type {?} */
                    let workItemParticipant = new MessageReceiver$1();
                    workItemParticipant.type = 'processParticipant';
                    workItemParticipant.processParticipant = 'workItemParticipant';
                    receiverExpressions.push(workItemParticipant);
                }
                else {
                    userReceiver.userIds += (receivers[i] + ',');
                    userReceiver.userNames += (receiverTexts[i] + ',');
                }
            }
            if (userReceiver.userIds) {
                userReceiver.userIds = userReceiver.userIds.substring(0, userReceiver.userIds.length - 1);
                userReceiver.userNames = userReceiver.userNames.substring(0, userReceiver.userNames.length - 1);
                receiverExpressions.push(userReceiver);
            }
        }
        if (messageNotice.receiverExpressions && messageNotice.receiverExpressions.length > 0) {
            for (const e of messageNotice.receiverExpressions) {
                if (e instanceof ActivityExecutorParticipantExpression) {
                    /** @type {?} */
                    let activityExecutorParticipant = new MessageReceiver$1();
                    activityExecutorParticipant.type = 'processParticipant';
                    activityExecutorParticipant.processParticipant = 'activityExecutorParticipant';
                    activityExecutorParticipant.activityDefId = ((/** @type {?} */ (e))).activityDefId;
                    activityExecutorParticipant.activityDefName = ((/** @type {?} */ (e))).activityDefName;
                    receiverExpressions.push(activityExecutorParticipant);
                }
                else if (e instanceof UserParticipantExpression) {
                    /** @type {?} */
                    let variableReceiver = new MessageReceiver$1();
                    variableReceiver.type = 'variableParticipant';
                    variableReceiver.variableParticipant = ((/** @type {?} */ (e))).UserId;
                    variableReceiver.variableName = ((/** @type {?} */ (e))).name;
                    variableReceiver.orgType = ((/** @type {?} */ (e))).OrgType;
                    receiverExpressions.push(variableReceiver);
                }
                else if (e instanceof PositionParticipantExpression) {
                    /** @type {?} */
                    let positionReceiver = new MessageReceiver$1();
                    positionReceiver.type = 'positionParticipant';
                    positionReceiver.positionId = ((/** @type {?} */ (e))).PositionId;
                    positionReceiver.positionName = ((/** @type {?} */ (e))).PositionName;
                    positionReceiver.positionType = ((/** @type {?} */ (e))).PositionType;
                    if (positionReceiver.positionType === '1') {
                        positionReceiver.orgId = ((/** @type {?} */ (e))).OrgId;
                        positionReceiver.orgType = ((/** @type {?} */ (e))).OrgType;
                    }
                    receiverExpressions.push(positionReceiver);
                }
            }
        }
        if (receiverExpressions.length > 0) {
            message.receivers = receiverExpressions;
        }
        return message;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    convert2Component(component) {
        /** @type {?} */
        const bizComponent = new BizComponent();
        bizComponent.id = component.Id;
        bizComponent.name = component.Name;
        bizComponent.metadataId = component.MetadataId;
        bizComponent.methodCode = component.MethodCode;
        bizComponent.executionTime = component.Time;
        bizComponent.isForCompensation = component.isForCompensation;
        bizComponent.scopeType = component.ScopeType || null;
        bizComponent.actualParameters = new Array();
        if (component.ActualParameters && component.ActualParameters.length > 0) {
            for (const param of component.ActualParameters) {
                /** @type {?} */
                const bizParam = new BizParameter();
                bizParam.code = param.Name;
                bizParam.name = param.Name;
                bizParam.value = param.Value;
                bizComponent.actualParameters.push(bizParam);
            }
        }
        return bizComponent;
    }
    /**
     * 设置ProcessHeader
     * @param {?} ffId
     * @param {?} bizObjId
     * @param {?} ffName
     * @param {?} startMode
     * @return {?}
     */
    setProcessHeader(ffId, bizObjId, ffName, startMode) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        /** @type {?} */
        const processHeader = new ProcessHeader(process.Model, ffId, bizObjId, ffName, startMode);
        extendElements.push(processHeader);
    }
    /**
     * 更新流程分类绑定的参数，流程组件，表单信息
     * @param {?} params 参数列表
     * @param {?} cpts 流程组件
     * @param {?} forms
     * @param {?} customizeActions
     * @param {?} bizCmps
     * @return {?}
     */
    updateFlowFormInfo(params, cpts, forms, customizeActions, bizCmps) {
        this.updateFormalParameters(params, cpts.filter((/**
         * @param {?} cpt
         * @return {?}
         */
        cpt => cpt.ownerType === 'Schema')));
        this.setProcessComponents(cpts, bizCmps);
        this.updateExecuteForms(forms);
        this.updateCustomizeActions(customizeActions);
    }
    /**
     * @param {?} parameters
     * @param {?=} cmps
     * @return {?}
     */
    updateFormalParameters(parameters, cmps = new Array()) {
        if (!parameters) {
            parameters = [];
        }
        /** @type {?} */
        let process = this.process;
        /** @type {?} */
        let objects = process.GetDataObjects();
        if (parameters !== null && parameters.length > 0) {
            for (const p of parameters) {
                /** @type {?} */
                const dataType = new DataType(process.Model);
                if (p.dataType === 'CDTSchema') {
                    // 先清理CDTSchema类型的dataObject
                    for (const o of objects) {
                        //TODO:数据类型为customType暂时默认为参数预制
                        if (o instanceof DataObject && o.DataType.Category === DataTypes.CustomType) {
                            process.RemoveDataObject(o.Id);
                        }
                    }
                    // 重新绑定流程分类支持精简be
                    /** @type {?} */
                    const customType = new CDTSchemaType(process.Model);
                    if (p.newSchemaId && p.newSchemaMetadataId) {
                        customType.SchemaId = p.newSchemaId;
                        customType.MetadataId = p.newSchemaMetadataId;
                    }
                    else {
                        customType.SchemaId = p.schemaId;
                        customType.MetadataId = p.schemaMetadataId;
                    }
                    customType.ComponentId = cmps.filter((/**
                     * @param {?} cmp
                     * @return {?}
                     */
                    cmp => cmp.owner === p.schemaId))[0].id;
                    dataType.Category = DataTypes.CustomType;
                    dataType.CustomType = customType;
                }
                else {
                    // 先清理code相同的dataObject
                    for (const o of objects) {
                        if (o instanceof DataObject && o.Name === p.code) {
                            process.RemoveDataObject(o.Id);
                        }
                    }
                    dataType.Category = DataTypes.BasicType;
                    dataType.BasicType = p.dataType;
                }
                dataType.Description = p.description;
                // dataType.InitialValue = p.initialValue;
                if (p.parameterMode === 0) {
                    /** @type {?} */
                    const dataObject = new ValuedDataObject(process.Model);
                    dataObject.Name = p.code;
                    dataObject.Documentation = p.name;
                    dataObject.DataType = dataType;
                    dataObject.IsAllowNull = p.allowNull;
                    if (p.initialValue || p.initialValueType) {
                        /** @type {?} */
                        const variableSetting = new VariableSetting(process.Model);
                        variableSetting.variableCode = p.code;
                        variableSetting.variableName = p.name;
                        variableSetting.tag = p.initialValueType;
                        variableSetting.value = p.initialValue;
                        variableSetting.valueText = p.initialValue;
                        dataObject.variableSetting = variableSetting;
                    }
                    process.AddDataObject(dataObject);
                }
            }
        }
    }
    /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @param {?} bizCmps
     * @return {?}
     */
    setProcessComponents(procCpts, bizCmps) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let processHeader;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof Component$1
                    && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION) {
                    extendElements.splice(i - 1, 1);
                }
                if (extendElements[i - 1] instanceof ProcessHeader) {
                    processHeader = (/** @type {?} */ (extendElements[i - 1]));
                }
            }
        }
        // 子流程和外部流程的情况先需要绑定取数构件
        if (processHeader.startMode !== StartMode.DIRECT) {
            /** @type {?} */
            const loadDataComponent = procCpts.find((/**
             * @param {?} p
             * @return {?}
             */
            p => p.executionTime === ToolTime.LOADDATA));
            if (loadDataComponent) {
                /** @type {?} */
                let ldCpt = new Component$1(process.Model);
                ldCpt.Time = (/** @type {?} */ (loadDataComponent.executionTime));
                ldCpt.MetadataId = loadDataComponent.metadataId;
                ldCpt.MethodCode = loadDataComponent.methodCode;
                ldCpt.Id = loadDataComponent.id;
                ldCpt.Name = loadDataComponent.name;
                ldCpt.isForCompensation = loadDataComponent.isForCompensation;
                ldCpt.ActualParameters = [];
                if (loadDataComponent.scopeType) {
                    ldCpt.ScopeType = loadDataComponent.scopeType;
                }
                else {
                    ldCpt.ScopeType = "Undefined";
                }
                if (loadDataComponent.actualParameters && loadDataComponent.actualParameters.length > 0) {
                    for (let item of loadDataComponent.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(process.Model, item.code, item.value);
                        ldCpt.ActualParameters.push(parameter);
                    }
                }
                // 把取数构件放进去
                extendElements.push(ldCpt);
                // 如果是外部流程，校验是否集成统一预制的外部流程构件
                if (processHeader.startMode == StartMode.EXTERNAL_PROCESS) {
                    /** @type {?} */
                    let externalCmps = false;
                    /** @type {?} */
                    const cmps = bizCmps;
                    if (cmps && cmps.length > 0) {
                        // 此处标记有外部流程通用构件
                        for (const c of cmps) {
                            if (c.scopeType === 'ExternalProcess') {
                                externalCmps = true;
                                break;
                            }
                        }
                    }
                    // 如果没有外部流程构件
                    if (!externalCmps) {
                        if (procCpts && procCpts.length > 0) {
                            for (let procCpt of procCpts) {
                                /** @type {?} */
                                let cpt = new Component$1(process.Model);
                                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                                cpt.MetadataId = procCpt.metadataId;
                                cpt.MethodCode = procCpt.methodCode;
                                cpt.Id = procCpt.id;
                                cpt.Name = procCpt.name;
                                cpt.isForCompensation = procCpt.isForCompensation;
                                cpt.ActualParameters = [];
                                if (procCpt.scopeType) {
                                    cpt.ScopeType = procCpt.scopeType;
                                }
                                else {
                                    cpt.ScopeType = "Undefined";
                                }
                                if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                    for (let item of procCpt.actualParameters) {
                                        /** @type {?} */
                                        let parameter = new ActualParameter(process.Model, item.code, item.value);
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                // 避免重复的放入取数构件,不要取数，子流程和直接流程的构件，要未定义，外部，全量的
                                if (cpt.Time !== ToolTime.LOADDATA
                                    && cpt.ScopeType !== StartMode.DIRECT
                                    && cpt.ScopeType !== StartMode.SUB_PROCESS) {
                                    extendElements.push(cpt);
                                }
                            }
                        }
                    }
                    else {
                        for (let procCpt of procCpts) {
                            /** @type {?} */
                            let cpt = new Component$1(process.Model);
                            cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                            cpt.MetadataId = procCpt.metadataId;
                            cpt.MethodCode = procCpt.methodCode;
                            cpt.Id = procCpt.id;
                            cpt.Name = procCpt.name;
                            cpt.isForCompensation = procCpt.isForCompensation;
                            cpt.ActualParameters = [];
                            if (procCpt.scopeType) {
                                cpt.ScopeType = procCpt.scopeType;
                            }
                            else {
                                cpt.ScopeType = "Undefined";
                            }
                            if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                for (let item of procCpt.actualParameters) {
                                    /** @type {?} */
                                    let parameter = new ActualParameter(process.Model, item.code, item.value);
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            // 避免重复的放入取数构件,不要取数，子流程和直接流程,未知的构件，外部，全量的
                            if (cpt.Time !== ToolTime.LOADDATA
                                && cpt.ScopeType !== StartMode.DIRECT
                                && cpt.ScopeType !== StartMode.SUB_PROCESS
                                && cpt.ScopeType !== "Undefined") {
                                extendElements.push(cpt);
                            }
                        }
                    }
                    // 如果有外部流程构件，同样只保留取数构件，不需要其他处理(取数构件已经放进去了)
                    // 刷新一下属性框
                    this.editorUi.fireEvent(new mxEventObject(PmfEvents.ShowProperty));
                }
                else if (processHeader.startMode == StartMode.SUB_PROCESS) {
                    if (procCpts && procCpts.length > 0) {
                        for (let procCpt of procCpts) {
                            /** @type {?} */
                            let cpt = new Component$1(process.Model);
                            cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                            cpt.MetadataId = procCpt.metadataId;
                            cpt.MethodCode = procCpt.methodCode;
                            cpt.Id = procCpt.id;
                            cpt.Name = procCpt.name;
                            cpt.isForCompensation = procCpt.isForCompensation;
                            cpt.ActualParameters = [];
                            if (procCpt.scopeType) {
                                cpt.ScopeType = procCpt.scopeType;
                            }
                            else {
                                cpt.ScopeType = "Undefined";
                            }
                            if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                for (let item of procCpt.actualParameters) {
                                    /** @type {?} */
                                    let parameter = new ActualParameter(process.Model, item.code, item.value);
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            // 避免重复的放入取数构件,不要取数，直接流程和外部流程，未定义的构件，要子流程，全量的
                            if (cpt.Time !== ToolTime.LOADDATA
                                && cpt.ScopeType !== StartMode.DIRECT
                                && cpt.ScopeType !== StartMode.EXTERNAL_PROCESS
                                && cpt.ScopeType !== "Undefined") {
                                extendElements.push(cpt);
                            }
                        }
                    }
                }
                // 如果是子流程则不需要其他处理(取数构件已经放进去了)
            }
        }
        else { // 直接流程
            // 直接流程
            // 直接流程过滤掉共享的构件
            /** @type {?} */
            const actualCmps = procCpts.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => WfDesignerUtils.isPfComponent(p.metadataId) === false));
            if (actualCmps && actualCmps.length > 0) {
                for (let procCpt of actualCmps) {
                    /** @type {?} */
                    let cpt = new Component$1(process.Model);
                    cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                    cpt.MetadataId = procCpt.metadataId;
                    cpt.MethodCode = procCpt.methodCode;
                    cpt.Id = procCpt.id;
                    cpt.Name = procCpt.name;
                    cpt.isForCompensation = procCpt.isForCompensation;
                    if (procCpt.scopeType) {
                        cpt.ScopeType = procCpt.scopeType;
                    }
                    else {
                        cpt.ScopeType = "Undefined";
                    }
                    cpt.ActualParameters = [];
                    if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                        for (let item of procCpt.actualParameters) {
                            /** @type {?} */
                            let parameter = new ActualParameter(process.Model, item.code, item.value);
                            cpt.ActualParameters.push(parameter);
                        }
                    }
                    // 避免重复的放入取数构件,子流程和外部流程的构件，要未定义，直接，全量的
                    if (cpt.ScopeType !== StartMode.EXTERNAL_PROCESS
                        && cpt.ScopeType !== StartMode.SUB_PROCESS) {
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} forms
     * @return {?}
     */
    updateExecuteForms(forms) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除表单构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ExecuteForm) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        for (const f of forms) {
            this.updateExecuteForm(f);
        }
    }
    /**
     * @param {?} form
     * @param {?=} terminal
     * @return {?}
     */
    updateExecuteForm(form, terminal) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除表单构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ExecuteForm) {
                    /** @type {?} */
                    const f = (/** @type {?} */ (extendElements[i - 1]));
                    if (f.TerminalType === (terminal ? terminal : form.TerminalType)) {
                        extendElements.splice(i - 1, 1);
                    }
                }
            }
        }
        if (form) {
            /** @type {?} */
            let params = (/** @type {?} */ (form.ActualParameters));
            /** @type {?} */
            let actParas = new Array();
            if (params && params.length > 0) {
                for (let para of params) {
                    /** @type {?} */
                    let actPara = new ActualParameter(process.Model, para.Name, para.Value);
                    if (para.Tag) {
                        actPara.Tag = para.Tag;
                    }
                    else {
                        if (para.Value) {
                            if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                actPara.Tag = 'expression';
                            }
                            else {
                                actPara.Tag = 'constant';
                            }
                        }
                        else {
                            actPara.Tag = 'variable';
                        }
                    }
                    actParas.push(actPara);
                }
            }
            /** @type {?} */
            const id = BpmnModelHelper.GenerateElementId();
            /** @type {?} */
            let item = new ExecuteForm(process.Model, id, form.Name, actParas);
            item.ComponentId = form.ComponentId;
            item.FormType = form.FormType;
            item.formFormatId = form.formFormatId;
            item.formatConfigId = form.formatConfigId;
            item.TerminalType = form.TerminalType;
            extendElements.push(item);
        }
    }
    /**
     * @param {?} customizeActions
     * @return {?}
     */
    updateCustomizeActions(customizeActions) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof CustomizeAction) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        //重新绑定
        if (customizeActions && customizeActions.length > 0) {
            for (let a of customizeActions) {
                /** @type {?} */
                let action = new CustomizeAction(process.Model);
                action.id = BpmnModelHelper.GenerateElementId();
                action.code = a.code;
                action.name = a.name;
                action.terminalType = a.terminalType;
                // action.enable = a.enable;
                action.actualParameters = [];
                if (a.actualParameters && a.actualParameters.length > 0) {
                    for (let p of a.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(process.Model, p.Name, p.Value, p.ValueText, p.Tag || 'expression');
                        action.actualParameters.push(parameter);
                    }
                }
                extendElements.push(action);
            }
        }
    }
    /**
     * 更新流程备注
     * @param {?} value
     * @return {?}
     */
    modifyProcessTitleExpression(value) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof TitleExpression) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        /** @type {?} */
        let title = new TitleExpression(process.Model);
        if (typeof (value) === 'string' || value == null) {
            title = new TitleExpression(process.Model, value);
        }
        else {
            title = new TitleExpression(process.Model, value['zh-CHS'], value);
        }
        extendElements.push(title);
    }
    /**
     * @param {?} ffName
     * @param {?=} bizObjId
     * @param {?=} ffId
     * @return {?}
     */
    updateProcessHeader(ffName, bizObjId, ffId) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).BizDefName = ffName;
                    ((/** @type {?} */ (extendElements[i]))).BizObjId = bizObjId;
                    ((/** @type {?} */ (extendElements[i]))).BizDefKey = ffId;
                    return;
                }
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    bindProcessTitleExpression(value) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        /** @type {?} */
        const titleExpression = (/** @type {?} */ (extendElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e.ClrTypeID === TitleExpression.Clr_Type_ID))));
        if (titleExpression && titleExpression.value) {
            return;
        }
        /** @type {?} */
        const title = new TitleExpression(process.Model, value);
        extendElements.push(title);
    }
    /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @return {?}
     */
    updateProcessComponents(procCpts) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof Component$1
                    && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        //重新绑定
        if (procCpts && procCpts.length > 0) {
            for (let procCpt of procCpts) {
                /** @type {?} */
                let cpt = new Component$1(process.Model);
                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                cpt.MetadataId = procCpt.metadataId;
                cpt.MethodCode = procCpt.methodCode;
                cpt.Id = procCpt.id;
                cpt.Name = procCpt.name;
                cpt.isForCompensation = procCpt.isForCompensation;
                cpt.ActualParameters = [];
                if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                    for (let item of procCpt.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(process.Model, item.code, item.value);
                        cpt.ActualParameters.push(parameter);
                    }
                }
                extendElements.push(cpt);
            }
        }
    }
    /**
     * @param {?} assign
     * @return {?}
     */
    updateAllowPreAssign(assign) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).allowPreAssign = assign;
                    return;
                }
            }
        }
    }
    /**
     * @param {?} priority
     * @return {?}
     */
    updateEnablePriority(priority) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).enablePriority = priority;
                    return;
                }
            }
        }
    }
    /**
     * @param {?} startMode
     * @param {?} allCmps
     * @param {?} bizCmps
     * @return {?}
     */
    updateStartMode(startMode, allCmps, bizCmps) {
        // 对于启动方式的提示信息
        switch (startMode) {
            case StartMode.DIRECT:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("directTips"),
                }));
                break;
            case StartMode.EXTERNAL_PROCESS:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("externalTips"),
                }));
                break;
            case StartMode.SUB_PROCESS:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("subprocessTips"),
                }));
                break;
        }
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            /** @type {?} */
            const procHeader = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof ProcessHeader))));
            // 修改启动方式
            procHeader[0].startMode = startMode;
            //删除流程构件
            if (extendElements.length > 0) {
                for (let i = extendElements.length; i > 0; i--) {
                    if (extendElements[i - 1] instanceof Component$1
                        && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION
                        && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.LOADDATA) {
                        extendElements.splice(i - 1, 1);
                    }
                }
            }
            allCmps && allCmps.forEach((/**
             * @param {?} procCpt
             * @return {?}
             */
            procCpt => {
                /** @type {?} */
                const cpt = new Component$1(process.Model);
                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                cpt.MetadataId = procCpt.metadataId;
                cpt.MethodCode = procCpt.methodCode;
                cpt.Id = procCpt.id;
                cpt.Name = procCpt.name;
                cpt.isForCompensation = procCpt.isForCompensation;
                cpt.ActualParameters = [];
                if (procCpt.scopeType) {
                    cpt.ScopeType = procCpt.scopeType;
                }
                else {
                    cpt.ScopeType = "Undefined";
                }
                procCpt.actualParameters && procCpt.actualParameters.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    /** @type {?} */
                    let parameter = new ActualParameter(process.Model, item.code, item.value);
                    cpt.ActualParameters.push(parameter);
                }));
                extendElements.push(cpt);
            }));
            /** @type {?} */
            const procCmps = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof Component$1))));
            // 如果启动方式是子流程,只保留取数构件
            if (startMode === StartMode.SUB_PROCESS) {
                // Utils.postMessage(ResourceKeys.wf_showTip, {
                //     type: 'message',
                //     level: 'info',
                //     message: `启动方式为子流程，需要移除取数构件以外的流程构件`,
                // });
                for (let i = extendElements.length; i > 0; i--) {
                    if (extendElements[i - 1] instanceof Component$1) {
                        /** @type {?} */
                        const cmp = (/** @type {?} */ (extendElements[i - 1]));
                        if (cmp.Time !== ToolTime.UNDEFINITION
                            && cmp.Time !== ToolTime.LOADDATA
                            && (cmp.ScopeType !== StartMode.SUB_PROCESS && cmp.ScopeType !== "All_Process")) {
                            extendElements.splice(i - 1, 1);
                        }
                    }
                }
            }
            // 如果启动方式是直接启动,不允许存在共享的构件
            if (startMode === StartMode.DIRECT) {
                // 判断有没有共享（PF）的流程构件
                /** @type {?} */
                const pfCmps = procCmps.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => WfDesignerUtils.isPfComponent(p.MetadataId)));
                if (pfCmps && pfCmps.length > 0) {
                    // 删掉共享的构件和启动方式
                    for (let i = extendElements.length; i > 0; i--) {
                        if (extendElements[i - 1] instanceof Component$1) {
                            /** @type {?} */
                            const cmp = (/** @type {?} */ (extendElements[i - 1]));
                            if (WfDesignerUtils.isPfComponent(cmp.MetadataId)
                                || cmp.ScopeType === StartMode.EXTERNAL_PROCESS
                                || cmp.ScopeType === StartMode.SUB_PROCESS) {
                                extendElements.splice(i - 1, 1);
                            }
                        }
                    }
                }
                // 如果启动方式是外部流程
            }
            else if (startMode === StartMode.EXTERNAL_PROCESS) {
                // const otherCmps = procCmps.filter((p: Component) => (p.MetadataId !== ResourceKeys.pf_Cmp_Id1
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id2
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id3
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id4
                //     && p.Time !== ToolTime.LOADDATA
                // ));
                // 判断有没有预制外部流程通用构件
                /** @type {?} */
                let externalCmps = false;
                /** @type {?} */
                const cmps = bizCmps;
                if (cmps && cmps.length > 0) {
                    // 此处标记是外部流程通用构件
                    for (const c of cmps) {
                        if (c.scopeType === 'ExternalProcess') {
                            externalCmps = true;
                            break;
                        }
                    }
                    // 如果预制了外部流程通用构件,只保留取数构件，没有则不处理
                    if (externalCmps) {
                        for (let i = extendElements.length; i > 0; i--) {
                            if (extendElements[i - 1] instanceof Component$1) {
                                /** @type {?} */
                                const cmp = (/** @type {?} */ (extendElements[i - 1]));
                                if (cmp.Time !== ToolTime.UNDEFINITION
                                    && cmp.Time !== ToolTime.LOADDATA
                                    && (cmp.ScopeType === StartMode.DIRECT
                                        || cmp.ScopeType === StartMode.SUB_PROCESS
                                        || cmp.ScopeType === "Undefined")) {
                                    extendElements.splice(i - 1, 1);
                                }
                            }
                        }
                    }
                }
            }
        }
        this.editorUi.fireEvent(new mxEventObject(PmfEvents.ShowProperty));
    }
    /**
     * @param {?} variables
     * @return {?}
     */
    updateProcessVariables(variables) {
        /** @type {?} */
        let process = this.process;
        /** @type {?} */
        let objects = process.GetDataObjects();
        /** @type {?} */
        const extendElements = process.GetExtensionElements();
        if (objects && objects.length > 0) {
            for (const o of objects) {
                if (o instanceof ValuedDataObject && o.DataType.Category !== DataTypes.CustomType) {
                    if (o.variableSetting && o.variableSetting.tag === 'component') {
                        /** @type {?} */
                        const i = extendElements.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => (e instanceof Component$1 && e.Id === o.variableSetting.value)));
                        extendElements.splice(i, 1);
                    }
                    process.RemoveDataObject(o.Id);
                }
            }
        }
        if (variables !== null && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const dataType = new DataType(process.Model);
                dataType.Category = DataTypes.BasicType;
                dataType.BasicType = v.basicType;
                dataType.Description = v.description;
                /** @type {?} */
                const dataObject = new ValuedDataObject(process.Model);
                dataObject.Id = v.id;
                dataObject.Name = v.name;
                dataObject.Documentation = v.documentation;
                dataObject.DataType = dataType;
                if (v.tag && v.value) {
                    /** @type {?} */
                    const variableSetting = new VariableSetting(process.Model);
                    variableSetting.variableCode = v.name;
                    variableSetting.variableName = v.documentation;
                    variableSetting.tag = v.tag;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    dataObject.variableSetting = variableSetting;
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        const c = v.component;
                        if (c) {
                            /** @type {?} */
                            let cpt = new Component$1(process.Model);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                for (let a of c.ActualParameters) {
                                    /** @type {?} */
                                    let parameter = new ActualParameter(process.Model, a.Name, a.Value);
                                    parameter.Tag = a.Tag;
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
                process.AddDataObject(dataObject);
            }
        }
    }
    /**
     * @param {?} timeLimit
     * @return {?}
     */
    updateProcessTimeLimitControl(timeLimit) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof TimeLimitControl) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        /** @type {?} */
        const timeLimitInfo = (/** @type {?} */ (timeLimit));
        if (timeLimitInfo) {
            /** @type {?} */
            const control = new TimeLimitControl(process.Model);
            control.enable = timeLimitInfo.enable;
            control.tag = timeLimitInfo.tag;
            control.dueTime = timeLimitInfo.dueTime;
            control.timeUnit = timeLimitInfo.timeUnit;
            control.expireOperations = new Array();
            if (timeLimitInfo.expireOperations && timeLimitInfo.expireOperations.length > 0) {
                for (const o of timeLimitInfo.expireOperations) {
                    if (o.operationTypeName === 'SendMessageExpireOperation' || !o.operationTypeName) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperation(process.Model);
                        sendMessage.id = BpmnModelHelper.GenerateElementId();
                        sendMessage.durationType = (/** @type {?} */ (operation.durationType));
                        sendMessage.timeDuration = operation.timeDuration;
                        sendMessage.timeUnit = operation.timeUnit;
                        sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                        sendMessage.message = operation.message;
                        sendMessage.subject = operation.subject;
                        sendMessage.sendType = operation.sendType;
                        sendMessage.receiver = operation.receiver;
                        sendMessage.receiverText = operation.receiverText;
                        sendMessage.cycleEnable = operation.cycleEnable;
                        sendMessage.cycleTime = operation.cycleTime;
                        sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                        if (operation.smsMessageTemplate) {
                            /** @type {?} */
                            const smsMessageTemplate = new SmsMessageTemplate(process.Model);
                            smsMessageTemplate.code = operation.smsMessageTemplate.code;
                            smsMessageTemplate.content = operation.smsMessageTemplate.content;
                            smsMessageTemplate.smsMessageVariables = new Array();
                            if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of operation.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new SmsMessageVariable(process.Model);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsMessageTemplate;
                        }
                        control.expireOperations.push(sendMessage);
                    }
                    else if (o.operationTypeName === 'AutoHandleExpireOperation') {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperation(process.Model);
                        autoHandle.id = BpmnModelHelper.GenerateElementId();
                        autoHandle.durationType = (/** @type {?} */ (operation.durationType));
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        control.expireOperations.push(autoHandle);
                    }
                }
            }
            extendElements.push(control);
        }
    }
    /**
     * @param {?} notices
     * @return {?}
     */
    updateProcessMessageNotices(notices) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof MessageNotice) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(process.Model);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                // messageNotice.receiver = n.receiver;
                // messageNotice.receiverText = n.receiverText;
                n.receivers = n.receivers.filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.type));
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(process.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(process.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(process.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(process.Model);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(process.Model);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                extendElements.push(messageNotice);
            }
        }
    }
    /**
     * @param {?} imageSettings
     * @return {?}
     */
    updateImageSettings(imageSettings) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ImageSettings) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        if (imageSettings) {
            /** @type {?} */
            const imageSetting = new ImageSettings(process.Model);
            imageSetting.imageOperation = imageSettings.imageOperation;
            extendElements.push(imageSetting);
        }
    }
    /**
     * 更新扩展属性
     * @param {?} value
     * @return {?}
     */
    resetExtendProperty(value) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        for (const o of value) {
            for (const e of extendElements) {
                if (e instanceof ExtendProperty && e.key === o.code) {
                    /** @type {?} */
                    const index = extendElements.indexOf(e);
                    if (index > -1) {
                        extendElements.splice(index, 1);
                    }
                }
            }
        }
        /** @type {?} */
        let attributes = (/** @type {?} */ (value));
        if (attributes) {
            attributes.forEach((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                /** @type {?} */
                let item = new ExtendProperty(process.Model);
                item.key = a.code;
                item.value = a.value;
                extendElements.push(item);
            }));
        }
    }
    /**
     * @param {?} wholeOrderRetrieve
     * @return {?}
     */
    updateEnableWholeOrderRetrieve(wholeOrderRetrieve) {
        /** @type {?} */
        let extendElements = this.process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve = wholeOrderRetrieve;
                    return;
                }
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 工作流画布类
 */
class WfGraph extends Graph {
    /**
     * @param {?} editorUi
     * @param {?=} container
     * @param {?=} model
     * @param {?=} renderHint
     * @param {?=} stylesheet
     * @param {?=} themes
     */
    constructor(editorUi, container, model, renderHint, stylesheet, themes) {
        super(editorUi, container, model, renderHint, stylesheet, themes);
        this.localePipe = null;
        /**
         * 流程元素实例
         */
        this.processCell = new WfProcessCell();
    }
    /**
     * @param {?} cells
     * @param {?} sender
     * @param {?} eventObject
     * @return {?}
     */
    bpmnCellsSelectionChanged(cells, sender, eventObject) {
        super.bpmnCellsSelectionChanged(cells, sender, eventObject);
        // 修改选中节点样式
        /** @type {?} */
        const selected = (/** @type {?} */ (this.getSelectionCells()));
        /** @type {?} */
        const all = (/** @type {?} */ (this.getChildVertices(this.getDefaultParent())));
        all.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            if (selected.includes(c) && c.imgUrls && c.imgUrls[FlowNodeState.Selected]) {
                c.setStyle(mxUtils.setStyle(c.getStyle(), mxConstants.STYLE_IMAGE, c.imgUrls[FlowNodeState.Selected]));
            }
            else {
                c.setStyle(mxUtils.setStyle(c.getStyle(), mxConstants.STYLE_IMAGE, c.imgUrls[FlowNodeState.Default]));
            }
            this.refresh(c);
        }));
    }
    /**
     * 重写创建流程元素实例方法
     * @param {?} bpmnModel
     * @return {?}
     */
    createProcessCell(bpmnModel) {
        /** @type {?} */
        const processCell = new WfProcessCell();
        processCell.process = bpmnModel.DefaultProcess;
        processCell.plane = bpmnModel.DefaultDiagram.BpmnPlane;
        processCell.editorUi = this.editorUi;
        return processCell;
    }
    /**
     * 给定新流程信息创建BpmnModel
     * @param {?} newProcInfo
     * @param {?} bizCmps
     * @return {?}
     */
    createBpmnModelWithProcInfo(newProcInfo, bizCmps) {
        /** @type {?} */
        const bpmnModel = this.createBpmnModel();
        this.bpmnModel = bpmnModel;
        this.processCell = this.createProcessCell(this.bpmnModel);
        if (this.editorUi.langCode === 'zh-CHS') {
            this.bpmnModel.DefaultProcess.Name = newProcInfo.name || bpmnModel.DefaultProcess.Name;
        }
        this.bpmnModel.DefaultProcess.NameLanguage = {
            [this.editorUi.langCode]: newProcInfo.name || bpmnModel.DefaultProcess.Name,
        };
        //设置流程Header(业务对象ID、流程分类ID)
        this.processCell.setProcessHeader(newProcInfo.ffId, newProcInfo.bizObjId, newProcInfo.ffName, (/** @type {?} */ (newProcInfo.startMode)));
        // 基于流程分类绑定参数，流程构件，流程表单
        this.processCell.updateFlowFormInfo(newProcInfo.formalParameters, newProcInfo.processBizComponnets, newProcInfo.executeForms, newProcInfo.customizeActions, bizCmps);
        this.processCell.modifyProcessTitleExpression(newProcInfo.processDescription);
    }
    /**
     * @return {?}
     */
    setDefaultStyles() {
        super.setDefaultStyles();
        /** @type {?} */
        const styleSheet = this.getStylesheet();
        // 连线样式默认为正交
        /** @type {?} */
        const edgeStyle = styleSheet.getDefaultEdgeStyle();
        edgeStyle[mxConstants.STYLE_ROUNDED] = 1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfSidebar extends Sidebar {
    constructor() {
        super(...arguments);
        this.bizActivities = [];
    }
    /**
     * 添加业务活动面板
     * @param {?} bizActivities
     * @return {?}
     */
    addBizActPalette(bizActivities) {
        //如果添加了业务活动面板，需要先移除
        if (this.palettes["bizactivitylib"]) {
            this.container.removeChild(this.palettes["bizactivitylib"][0]);
            this.container.removeChild(this.palettes["bizactivitylib"][1]);
            delete this.palettes["bizactivitylib"];
        }
        this.bizActivities = bizActivities;
        /** @type {?} */
        let bizActFactories = new Array();
        //添加业务活动
        this.bizActivities && this.bizActivities.forEach((/**
         * @param {?} activity
         * @return {?}
         */
        (activity) => {
            /** @type {?} */
            const style = 'image=' + WfConstants.IMAGE_PATH + '/bizActivity.png;';
            /** @type {?} */
            const cell = (/** @type {?} */ (BpmnCellHelper.generate(UserActivity.Clr_Type_ID, undefined, new mxGeometry(0, 0, this.defaultImageWidth, this.defaultImageHeight), style)));
            cell.name = activity.name;
            cell.bizActivity = activity;
            bizActFactories.push(this.createItemFactory([cell], cell.name, this.defaultImageWidth, this.defaultImageHeight));
        }));
        if (bizActFactories.length > 0) {
            this.addPaletteFunctions('bizactivitylib', mxResources.get('bizactivitylib'), true, bizActFactories);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 排他网关节点，增加状态图片信息
 */
class WfExclusiveGatewayCell extends ExclusiveGatewayCell {
    constructor() {
        super(...arguments);
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/ExclusiveGateway.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/ExclusiveGateway_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "ExclusiveGateway" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 自动生单活动节点
 */
class AifCreationBillActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = AifCreationBillActivityCell.CLR_TYPE_ID;
        this.name = "自动生单";
        this.nameLanguage = {
            "zh-CHS": "自动生单",
            "zh-CHT": "自動生單",
            "en": "Creation Bill ",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/aifCreationActivity.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/aifCreationActivity_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "AifCreationBillActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        /** @type {?} */
        let PropertyConfig = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = new Object();
        PropertyConfig.categoryId = 'general';
        PropertyConfig.categoryName = mxResources.get('basicInformation');
        PropertyConfig.tabId = 'basic';
        PropertyConfig.tabName = mxResources.get('basicAttributes');
        PropertyConfig.properties = [
            { propertyID: AifCreationBillActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: AifCreationBillActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: AifCreationBillActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        let bifDef = new ElementPropertyConfig();
        bifDef.categoryId = 'bifDef';
        bifDef.categoryName = mxResources.get('bifDef');
        bifDef.tabId = 'basic';
        bifDef.tabName = mxResources.get('basicAttributes');
        bifDef.properties = [
            { propertyID: AifCreationBillActivityPropertyKeys.aifProcessCode, propertyName: mxResources.get('aifProcess'), propertyType: 'modal' },
        ];
        propertyData[AifCreationBillActivityPropertyKeys.Id] = act.Id;
        propertyData[AifCreationBillActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[AifCreationBillActivityPropertyKeys.Name] = act.Name || mxResources.get('autoAif');
        propertyData[AifCreationBillActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[AifCreationBillActivityPropertyKeys.aifProcessCode] = act.aifProcessCode;
        propertyData[AifCreationBillActivityPropertyKeys.isRelied] = act.isRelied;
        return {
            propertyConfig: [PropertyConfig, bifDef],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case AifCreationBillActivityPropertyKeys.aifProcessCode:
                this.resetProcessCode(this.flowElement, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetProcessCode(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            startActivity.aifProcessCode = data;
        }
        else {
            startActivity.aifProcessCode = null;
        }
    }
}
AifCreationBillActivityCell.CLR_TYPE_ID = AifCreationBillActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 服务活动节点
 */
class AutoActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = AutoActivityCell.CLR_TYPE_ID;
        this.name = "服务";
        this.nameLanguage = {
            "zh-CHS": "服务",
            "zh-CHT": "服務",
            "en": "Service ",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/auto.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/auto_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "autoActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        // 组织属性框
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: AutoActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: AutoActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: AutoActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: AutoActivityPropertyKeys.Tools, propertyName: mxResources.get('tools'), propertyType: 'modal' },
            { propertyID: AutoActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' },
        ];
        propertyData[AutoActivityPropertyKeys.Id] = act.Id;
        propertyData[AutoActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[AutoActivityPropertyKeys.Name] = act.Name;
        propertyData[AutoActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[AutoActivityPropertyKeys.Tools] = PropertyHelper.getBizComponentList((/** @type {?} */ (act.tools)));
        propertyData[AutoActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const autoActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case AutoActivityPropertyKeys.Tools:
                this.updateAutoActivityTools(autoActivity, obj);
                break;
            case AutoActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(autoActivity, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    updateAutoActivityTools(autoActivity, obj) {
        /** @type {?} */
        let tools = (/** @type {?} */ (obj.propertyValue));
        autoActivity.tools = new Array();
        if (tools && tools.length > 0) {
            for (const tool of tools) {
                /** @type {?} */
                let component = new Component$1(autoActivity.Model);
                component.Id = tool.id;
                component.Name = tool.name;
                // component.Time = tool.executionTime;
                // TODO 写死了构件类型
                component.ComponentType = 'WebServiceComponent';
                component.MetadataId = tool.metadataId;
                component.MethodCode = tool.methodCode;
                component.isForCompensation = tool.isForCompensation;
                component.ActualParameters = [];
                if (tool.actualParameters && ((/** @type {?} */ (tool.actualParameters))).length > 0) {
                    for (let a of ((/** @type {?} */ (tool.actualParameters)))) {
                        /** @type {?} */
                        let parameter = new ActualParameter(autoActivity.Model, a.code, a.value);
                        component.ActualParameters.push(parameter);
                    }
                }
                autoActivity.tools.push(component);
            }
        }
    }
    /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(autoActivity, obj) {
        /** @type {?} */
        const bpmnModel = autoActivity.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (autoActivity.variableSettings && autoActivity.variableSettings.length > 0) {
            for (const v of autoActivity.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component$1 && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        autoActivity.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                autoActivity.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component$1(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
}
AutoActivityCell.CLR_TYPE_ID = AutoActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 子流程活动节点
 */
class CallActivitySubProcessCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = CallActivitySubProcessCell.CLR_TYPE_ID;
        this.name = "子流程";
        this.nameLanguage = {
            "zh-CHS": "子流程",
            "zh-CHT": "子流程",
            "en": "Sub-Process",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/sub.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/sub_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "CallActivitySubProcess" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        // 组织属性框
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        // 基本属性（名称）
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: CallActivitySubProcessPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: CallActivitySubProcessPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: CallActivitySubProcessPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        // 活动选项（表单定义+活动构件）
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: CallActivitySubProcessPropertyKeys.callActivitySubProcess, propertyName: mxResources.get('callActivitySubProcess'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics, propertyName: mxResources.get('multiInstanceLoopCharacteristics'), propertyType: 'modal' }
        ];
        propertyData[CallActivitySubProcessPropertyKeys.Id] = act.Id;
        propertyData[CallActivitySubProcessPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[CallActivitySubProcessPropertyKeys.Name] = act.Name;
        propertyData[CallActivitySubProcessPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[CallActivitySubProcessPropertyKeys.callActivitySubProcess] = {
            calledBizDefKey: act.calledBizDefKey,
            calledElement: act.CalledElement,
            inheritVariables: act.inheritVariables,
            inheritBizDataId: act.inheritBizDataId,
            bizDataId: act.bizDataId,
            aifProcessCode: act.aifProcessCode,
            useAutoCreationData: act.useAutoCreationData,
        };
        propertyData[CallActivitySubProcessPropertyKeys.BackWardRule] = act.backWardRule;
        propertyData[CallActivitySubProcessPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        propertyData[CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics] = act.LoopCharacteristics;
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const subProcess = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case CallActivitySubProcessPropertyKeys.callActivitySubProcess:
                this.updateSubProcessConfig(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.BackWardRule:
                this.updateBackWardRule(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.variableSettings:
                this.updateVariableSettings(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics:
                this.updateMultiInstanceLoopCharacteristic(subProcess, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateSubProcessConfig(subProcess, obj) {
        /** @type {?} */
        const config = obj.propertyValue;
        if (subProcess) {
            subProcess.calledBizDefKey = config.calledBizDefKey;
            subProcess.CalledElement = config.calledElement;
            subProcess.inheritBizDataId = config.inheritBizDataId;
            subProcess.inheritVariables = config.inheritVariables;
            subProcess.bizDataId = config.bizDataId;
            subProcess.aifProcessCode = config.aifProcessCode;
            subProcess.useAutoCreationData = config.useAutoCreationData;
        }
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateBackWardRule(subProcess, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let backWardRule = new BackWardRule(subProcess.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        subProcess.backWardRule = backWardRule;
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(subProcess, obj) {
        /** @type {?} */
        const bpmnModel = this.flowElement.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (subProcess.variableSettings && subProcess.variableSettings.length > 0) {
            for (const v of subProcess.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component$1 && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        subProcess.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                // variableSetting.variableId = v.variableId;
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                subProcess.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component$1(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateMultiInstanceLoopCharacteristic(subProcess, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let loopCharacteristics = new MultiInstanceLoopCharacteristics(subProcess.Model);
        loopCharacteristics.enable = data.enable;
        loopCharacteristics.sequential = data.sequential;
        loopCharacteristics.loopCardinality = data.loopCardinality;
        loopCharacteristics.completionCondition = data.completionCondition;
        loopCharacteristics.completionConditionRules = data.completionConditionRules;
        subProcess.LoopCharacteristics = loopCharacteristics;
        if (obj.propertyValue) {
            /** @type {?} */
            const data = obj.propertyValue;
            /** @type {?} */
            let loopCharacteristics = new MultiInstanceLoopCharacteristics(subProcess.Model);
            loopCharacteristics.enable = data.enable;
            loopCharacteristics.sequential = data.sequential;
            loopCharacteristics.loopCardinality = new Expression(subProcess.Model);
            if (data.loopCardinality) {
                /** @type {?} */
                let variableExpression = new SemanticExpression(subProcess.Model);
                variableExpression.Value = data.loopCardinality;
                loopCharacteristics.loopCardinality.MexExpression = variableExpression;
            }
            loopCharacteristics.completionCondition = data.completionCondition;
            /** @type {?} */
            let rules = (/** @type {?} */ (data.completionConditionRules));
            loopCharacteristics.completionConditionRules = null;
            if (rules && rules.length > 0) {
                loopCharacteristics.completionConditionRules = new Array();
                for (let rule of rules) {
                    /** @type {?} */
                    let counterSignRule = new CounterSignRule(subProcess.Model);
                    /** @type {?} */
                    let condition = new Condition(subProcess.Model);
                    condition.Value = rule.CompletionCondition.Value;
                    counterSignRule.ConclusionValue = rule.ConclusionValue;
                    counterSignRule.CalculateType = rule.CalculateType;
                    counterSignRule.ConditionValue = rule.ConditionValue;
                    counterSignRule.WaitAllVotes = rule.WaitAllVotes;
                    counterSignRule.CompletionCondition = condition;
                    loopCharacteristics.completionConditionRules.push(counterSignRule);
                }
            }
            subProcess.LoopCharacteristics = loopCharacteristics;
        }
    }
}
CallActivitySubProcessCell.CLR_TYPE_ID = CallActivitySubProcess.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 信号捕获活动节点
 */
class IntermediateCatchEventImplCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = IntermediateCatchEventImplCell.CLR_TYPE_ID;
        this.name = "信号捕获";
        this.nameLanguage = {
            "zh-CHS": "信号捕获",
            "zh-CHT": "訊號捕獲",
            "en": "Acquisition",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/catchEvent.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/catchEvent_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "IntermediateCatchEvent" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.initEventDefinitions();
        }
        return flowNode;
    }
    /**
     * @param {?=} flowElt
     * @param {?=} diagElt
     * @return {?}
     */
    bindBpmnModel(flowElt, diagElt) {
        super.bindBpmnModel(flowElt, diagElt);
        /** @type {?} */
        const bpmnModel = this.editorUi.graph.bpmnModel;
        this.addSignals(this.flowElement);
    }
    /**
     * @param {?} catchEvent
     * @return {?}
     */
    addSignals(catchEvent) {
        /** @type {?} */
        const bpmnModel = catchEvent.Model;
        if (catchEvent.EventDefinitions && catchEvent.EventDefinitions.length > 0) {
            if (!bpmnModel.signals) {
                bpmnModel.signals = [];
            }
            for (const e of catchEvent.EventDefinitions) {
                /** @type {?} */
                const event = (/** @type {?} */ (e));
                if (bpmnModel.signals.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => s.Name === event.SignalRef)) === -1) {
                    /** @type {?} */
                    const signal = new Signal(bpmnModel);
                    signal.Name = event.SignalRef;
                    bpmnModel.signals.push(signal);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: IntermediateCatchEventImplPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: IntermediateCatchEventImplPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: IntermediateCatchEventImplPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: IntermediateCatchEventImplPropertyKeys.EventDefinitions, propertyName: mxResources.get('eventDefinitions'), propertyType: 'modal' },
            { propertyID: IntermediateCatchEventImplPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        if (act.EventDefinitions && this.isBackEventExist(act.EventDefinitions)) {
            activityProperty.properties.push({ propertyID: IntermediateCatchEventImplPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' });
            propertyData[IntermediateCatchEventImplPropertyKeys.BackWardRule] = act.backWardRule;
        }
        propertyData[IntermediateCatchEventImplPropertyKeys.Id] = act.Id;
        propertyData[IntermediateCatchEventImplPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[IntermediateCatchEventImplPropertyKeys.Name] = act.Name;
        propertyData[IntermediateCatchEventImplPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[IntermediateCatchEventImplPropertyKeys.EventDefinitions] = act.EventDefinitions;
        propertyData[IntermediateCatchEventImplPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * 判断是否存在反向事件
     * @param {?} events
     * @return {?}
     */
    isBackEventExist(events) {
        for (let e of events) {
            /** @type {?} */
            const event = (/** @type {?} */ (e));
            if (event.triggerAction === 'Back') {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const catchEvent = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case IntermediateCatchEventImplPropertyKeys.EventDefinitions:
                this.updateEventDefinitions(catchEvent, obj);
                break;
            case IntermediateCatchEventImplPropertyKeys.BackWardRule:
                this.updateBackWardRule(catchEvent, obj);
                break;
            case IntermediateCatchEventImplPropertyKeys.variableSettings:
                this.updateVariableSettings(catchEvent, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    updateEventDefinitions(catchEvent, obj) {
        if (catchEvent) {
            this.removeSignals(catchEvent);
            /** @type {?} */
            let events = (/** @type {?} */ (obj.propertyValue));
            catchEvent.EventDefinitions = new Array();
            for (let e of events) {
                /** @type {?} */
                let item = new SignalEventDefinitionImpl(catchEvent.Model);
                item.name = e.name;
                item.triggerAction = e.triggerAction;
                item.Async = false;
                item.SignalRef = e.SignalRef;
                catchEvent.EventDefinitions.push(item);
            }
            this.addSignals(catchEvent);
        }
        // 判断审批项是否包含驳回？不包含时，驳回规则清空
        if (!this.isBackEventExist(catchEvent.EventDefinitions)) {
            catchEvent.backWardRule = null;
        }
        else if (!catchEvent.backWardRule) {
            catchEvent.backWardRule = new BackWardRule(catchEvent.Model);
        }
        // 更新属性框
        // Utils.postMessage(ResourceKeys.wf_showProperty, this.getPropConfig());
    }
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    updateBackWardRule(catchEvent, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let backWardRule = new BackWardRule(catchEvent.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        catchEvent.backWardRule = backWardRule;
    }
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(catchEvent, obj) {
        /** @type {?} */
        const bpmnModel = catchEvent.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (catchEvent.variableSettings && catchEvent.variableSettings.length > 0) {
            for (const v of catchEvent.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component$1 && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        catchEvent.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                // variableSetting.variableId = v.variableId;
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                catchEvent.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component$1(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} catchEvent
     * @return {?}
     */
    removeSignals(catchEvent) {
        /** @type {?} */
        const bpmnModel = catchEvent.Model;
        if (catchEvent.EventDefinitions && catchEvent.EventDefinitions.length > 0) {
            /** @type {?} */
            const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
            /** @type {?} */
            const eventDefs = new Map();
            for (const key in flowElements) {
                if (flowElements[key] instanceof IntermediateCatchEventImpl && flowElements[key].Id !== catchEvent.Id) {
                    /** @type {?} */
                    const catchEvent = (/** @type {?} */ (flowElements[key]));
                    for (const e of catchEvent.EventDefinitions) {
                        /** @type {?} */
                        const event = (/** @type {?} */ (e));
                        if (!eventDefs.get(event.SignalRef)) {
                            eventDefs.set(event.SignalRef, event);
                        }
                    }
                }
            }
            for (const e of catchEvent.EventDefinitions) {
                /** @type {?} */
                const eventDef = (/** @type {?} */ (e));
                if (!eventDefs.get(eventDef.SignalRef)) {
                    /** @type {?} */
                    const i = bpmnModel.signals.findIndex((/**
                     * @param {?} s
                     * @return {?}
                     */
                    s => s.Name === eventDef.SignalRef));
                    if (i > -1) {
                        bpmnModel.signals.splice(i, 1);
                    }
                }
            }
        }
    }
}
IntermediateCatchEventImplCell.CLR_TYPE_ID = IntermediateCatchEventImpl.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 消息活动节点
 */
class MessageActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = MessageActivityCell.CLR_TYPE_ID;
        this.name = "消息";
        this.nameLanguage = {
            "zh-CHS": "消息",
            "zh-CHT": "消息",
            "en": "Message",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/message.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/message_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "MessageActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: MessageActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: MessageActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: MessageActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: MessageActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
            { propertyID: MessageActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        propertyData[MessageActivityPropertyKeys.Id] = act.Id;
        propertyData[MessageActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[MessageActivityPropertyKeys.Name] = act.Name;
        propertyData[MessageActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[MessageActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        propertyData[MessageActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const messageActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case MessageActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(messageActivity, obj);
                break;
            case MessageActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(messageActivity, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    updateMessageNotices(messageActivity, obj) {
        /** @type {?} */
        const bpmnModel = messageActivity.Model;
        /** @type {?} */
        let notices = (/** @type {?} */ (obj.propertyValue));
        messageActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(bpmnModel);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(bpmnModel);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(bpmnModel);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                // messageNotice.receiver = n.receiver;
                // messageNotice.receiverText = n.receiverText;
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(messageActivity.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(messageActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(messageActivity.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                messageActivity.messageNotices.push(messageNotice);
            }
        }
    }
    /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(messageActivity, obj) {
        /** @type {?} */
        const bpmnModel = messageActivity.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (messageActivity.variableSettings && messageActivity.variableSettings.length > 0) {
            for (const v of messageActivity.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component$1 && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        messageActivity.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                // variableSetting.variableId = v.variableId;
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                messageActivity.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component$1(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
}
MessageActivityCell.CLR_TYPE_ID = MessageActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActualParameter$5 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignConfig$2 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignStrategy$1 {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const OrganizationLevel$4 = {
    /**
     * 部门
     */
    DEPARTMENT: 'DEPARTMENT',
    /**
     * 单位
     */
    UNIT: 'UNIT',
    /**
     * 表单上的变量单位
     */
    EXPRESSION: 'EXPRESSION',
    /**
     * 默认
     */
    DEFAULT: 'DEFAULT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParticipantInfo$1 {
    constructor() {
        this.assignStrategy = new AssignStrategy$1();
        this.humanPerformerList = new Array();
        this.potentialOwnerList = new Array();
        this.isAllScope = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcExtendProperty {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 知会活动节点
 */
class NotifyActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = NotifyActivityCell.CLR_TYPE_ID;
        this.name = "知会";
        this.nameLanguage = {
            "zh-CHS": "知会",
            "zh-CHT": "知會",
            "en": "Notify",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/notify.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/notify_backup.png",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "NotifyActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.notifyAble = this.editorUi.generalConfig.enableNotify;
        }
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        const editorUi = this.editorUi;
        // const graph = editorUi.graph;
        /** @type {?} */
        let act = this.flowElement;
        // 过滤配置位置为节点的扩展属性，分离一级和二级属性：知会节点
        // 一级节点List
        /** @type {?} */
        let generalExtendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            JSON.parse(JSON.stringify(editorUi.procExtProps)).forEach((/**
             * @param {?} p
             * @return {?}
             */
            (p) => {
                if (p.propertyLocation && p.propertyLocation.indexOf('activity') != -1 && !p.parentId) {
                    generalExtendList.push(p);
                }
                else if (p.propertyLocation && p.propertyLocation.indexOf('activity') != -1 && p.parentId) ;
            }));
        }
        generalExtendList = generalExtendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: NotifyActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: NotifyActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        let performerProperty = new ElementPropertyConfig();
        performerProperty.categoryId = 'performerProperty';
        performerProperty.categoryName = mxResources.get('performerProperty');
        performerProperty.tabId = 'basic';
        performerProperty.tabName = mxResources.get('basicAttributes');
        performerProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.ParticipantSchemes, propertyName: mxResources.get('notifyRecipient'), propertyType: 'modal' }
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: NotifyActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let approvalProperty = new ElementPropertyConfig();
        approvalProperty.categoryId = 'activityProperty';
        approvalProperty.categoryName = mxResources.get('activityProperty');
        approvalProperty.tabId = 'basic';
        approvalProperty.tabName = mxResources.get('basicAttributes');
        approvalProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.NotifyAble, propertyName: mxResources.get('notifyAble'), propertyType: 'modal' },
        ];
        activityProperty.categoryId = 'advanced';
        activityProperty.categoryName = mxResources.get('otherConfigurations');
        activityProperty.tabId = 'advanced';
        activityProperty.tabName = mxResources.get('advancedAttributes');
        activityProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            let ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            for (const g of groupList) {
                ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
            }
            this.setPropertyData(act, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, activityProperty, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            this.setPropertyData(act, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, activityProperty],
                propertyData: propertyData
            };
        }
    }
    /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    setPropertyData(act, propertyData, groupList) {
        propertyData[NotifyActivityPropertyKeys.Id] = act.Id;
        propertyData[NotifyActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[NotifyActivityPropertyKeys.Name] = act.Name;
        propertyData[NotifyActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[NotifyActivityPropertyKeys.ParticipantSchemes] = this.getParticipantInfo(act);
        propertyData[NotifyActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        propertyData[NotifyActivityPropertyKeys.wf_ExecuteForms_PC] =
            act.executeForms ? act.executeForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'PC')) : null;
        propertyData[NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile] =
            act.executeForms ? act.executeForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'MOBILE')) : null;
        propertyData[NotifyActivityPropertyKeys.NotifyAble] = PropertyHelper.getNotifyAble(act.notifyAble, act.dynamicParticipants);
        for (const g of groupList) {
            // 取回模型上的value值给到扩展属性组件里
            if (act.extendProperties && act.extendProperties.length > 0) {
                g.childs.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => {
                    return a.sortOrder - b.sortOrder;
                })).forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    act.extendProperties.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (e.key == d.code) {
                            d.value = e.value;
                        }
                    }));
                }));
            }
            propertyData[g.parent.id] = g.childs;
        }
    }
    /**
     * @param {?} notifyActivity
     * @return {?}
     */
    getParticipantInfo(notifyActivity) {
        /** @type {?} */
        const partiInfo = new ParticipantInfo$1();
        /** @type {?} */
        const roles = (/** @type {?} */ (notifyActivity.GetResourceRoles().filter((/**
         * @param {?} role
         * @return {?}
         */
        role => role instanceof HumanPerformerImpl))));
        partiInfo.humanPerformerList = PropertyHelper.getPerformerList(roles);
        return partiInfo;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const notifyActivity = this.flowElement;
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            // 参与者属性
            case NotifyActivityPropertyKeys.ParticipantSchemes:
                this.updateParticipant(notifyActivity, obj);
                break;
            case NotifyActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(notifyActivity, obj);
                break;
            case NotifyActivityPropertyKeys.wf_ExecuteForms_PC:
                this.updateStartActivityForm(notifyActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.updateStartActivityForm(notifyActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case NotifyActivityPropertyKeys.NotifyAble:
                this.updateNotifySet(notifyActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (this.editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === propertyId)) > -1) {
                    this.resetExtendProperty(notifyActivity, obj);
                }
                else {
                    super.updateProps(obj);
                }
                break;
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    updateParticipant(notifyActivity, obj) {
        /** @type {?} */
        const performerInfo = obj.propertyValue;
        /** @type {?} */
        const resourceRoles = notifyActivity.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            resourceRoles.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                if (r instanceof HumanPerformerImpl) {
                    notifyActivity.RemoveResourceRole(r.Id);
                }
            }));
        }
        if (performerInfo.humanPerformerList && performerInfo.humanPerformerList.length > 0) {
            for (const humanPerformer of performerInfo.humanPerformerList) {
                switch (humanPerformer.type) {
                    case UserParticipantExpression.Clr_Type_ID:
                        this.addUserParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case PositionParticipantExpression.Clr_Type_ID:
                        this.addPositionParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case VariableParticipantExpression.Clr_Type_ID:
                        this.addVariableParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case ComponentParticipantExpression.Clr_Type_ID:
                        this.addComponentParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case ReportingLineParticipantExpression.Clr_Type_ID:
                        this.addReportingLineParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case ActivityExecutorParticipantExpression.Clr_Type_ID:
                        this.addActivityExecutorParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case MatrixParticipantExpression.Clr_Type_ID:
                        this.addMatrixParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                }
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addUserParticipant(notifyActivity, performer, type, scope) {
        /** @type {?} */
        let userParticipant = new UserParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName, performer.orgType);
        userParticipant.id = performer.id;
        userParticipant.OrgId = performer.orgId;
        userParticipant.OrgName = performer.orgName;
        userParticipant.Tag = performer.tag;
        userParticipant.OrgType = performer.orgType;
        userParticipant.order = performer.order;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                userParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(userParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addVariableParticipant(notifyActivity, performer, type, scope) {
        /** @type {?} */
        let variablePerformer = new VariableParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName, performer.orgType);
        variablePerformer.id = performer.id;
        variablePerformer.Name = performer.performerName ? performer.performerName : performer.name;
        variablePerformer.Tag = performer.tag;
        variablePerformer.VarValue = performer.varValue;
        variablePerformer.VarType = performer.varType;
        variablePerformer.Relation = performer.relation;
        variablePerformer.order = performer.order;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                variablePerformer.actionScope = scope;
                notifyActivity.dynamicParticipants.push(variablePerformer);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addPositionParticipant(notifyActivity, performer, type, scope) {
        /** @type {?} */
        let posiParticipant = new PositionParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName);
        posiParticipant.id = performer.id;
        posiParticipant.PositionType = performer.positionType;
        posiParticipant.order = performer.order;
        if (performer.positionType === '1') {
            posiParticipant.OrgId = performer.orgId;
            posiParticipant.OrgName = performer.orgName;
            posiParticipant.OrgType = performer.orgType;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                posiParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(posiParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addComponentParticipant(notifyActivity, component, type, scope) {
        /** @type {?} */
        let componentParticipant = new ComponentParticipantExpression(notifyActivity.Model);
        componentParticipant.id = component.id;
        componentParticipant.componentId = component.metadataId;
        componentParticipant.componentName = component.name;
        componentParticipant.methodName = component.methodName;
        componentParticipant.methodCode = component.methodCode;
        componentParticipant.order = component.order;
        if (component.actualParameters && component.actualParameters.length > 0) {
            /** @type {?} */
            let actParas = new Array();
            for (let para of component.actualParameters) {
                /** @type {?} */
                let actPara = new ActualParameter(notifyActivity.Model, para.code, para.value, para.valueText);
                // TODO:更新参与者会默认把构件参数属性改为contant，临时修复，后续代码优化
                actPara.Tag = para.tag;
                if (para.fetchValueMode) {
                    switch (para.fetchValueMode) {
                        case 'express':
                            actPara.Tag = 'expression';
                            break;
                        case 'none':
                            actPara.Tag = 'expression';
                            break;
                        default:
                            actPara.Tag = 'constant';
                            break;
                    }
                }
                actParas.push(actPara);
            }
            componentParticipant.actualParameters = actParas;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = component.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = component.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = component.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = component.order;
            if (scope) {
                componentParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(componentParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addReportingLineParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let reportingLine = new ReportingLineParticipantExpression(notifyActivity.Model);
        reportingLine.id = participant.id;
        reportingLine.ReportingLineDefId = participant.reportingLineDefId;
        reportingLine.ReportingLineDefName = participant.reportingLineDefName;
        reportingLine.RefOrgId = participant.refOrgId;
        reportingLine.RefUserId = participant.refUserId;
        reportingLine.RefEmployeeId = participant.refEmployeeId;
        reportingLine.order = participant.order;
        reportingLine.Dimension = participant.dimension;
        reportingLine.Tag = participant.tag;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                reportingLine.actionScope = scope;
                notifyActivity.dynamicParticipants.push(reportingLine);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addActivityExecutorParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let activityExecutor = new ActivityExecutorParticipantExpression(notifyActivity.Model);
        activityExecutor.id = participant.id;
        activityExecutor.activityDefId = participant.activityDefId;
        activityExecutor.order = participant.order;
        activityExecutor.activityDefName = participant.activityDefName;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                activityExecutor.actionScope = scope;
                notifyActivity.dynamicParticipants.push(activityExecutor);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addMatrixParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let matrix = new MatrixParticipantExpression(notifyActivity.Model);
        matrix.order = participant.order;
        matrix.id = participant.id;
        matrix.matrixDefId = participant.matrixDefId;
        matrix.matrixDefName = participant.matrixDefName;
        matrix.conditionField1 = participant.conditionField1;
        matrix.conditionFieldText1 = participant.conditionFieldText1;
        matrix.conditionField2 = participant.conditionField2;
        matrix.conditionFieldText2 = participant.conditionFieldText2;
        matrix.conditionField3 = participant.conditionField3;
        matrix.conditionFieldText3 = participant.conditionFieldText3;
        matrix.multivaluedCondition = participant.multivaluedCondition;
        matrix.dataFieldAlias = participant.dataFieldAlias;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                matrix.actionScope = scope;
                notifyActivity.dynamicParticipants.push(matrix);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addOrganizationParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let potential = new OrganizationParticipantExpression(notifyActivity.Model);
        potential.id = participant.id;
        potential.order = participant.order;
        potential.actionScope = ActionScope.AssignUser;
        potential.organizationLevel = (/** @type {?} */ (participant.organizationLevel));
        potential.organizationId = participant.organizationId;
        potential.organizationName = participant.organizationName;
        potential.includeChildren = participant.includeChildren;
        potential.tag = participant.tag;
        if (participant.condition) {
            /** @type {?} */
            const condition = new Condition(notifyActivity.Model);
            condition.Value = participant.condition;
            potential.condition = condition;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                potential.actionScope = scope;
                notifyActivity.dynamicParticipants.push(potential);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    updateStartActivityForm(notifyActivity, obj, terminal) {
        if (notifyActivity) {
            /** @type {?} */
            let form = (/** @type {?} */ (obj.propertyValue));
            if (!notifyActivity.executeForms) {
                notifyActivity.executeForms = new Array();
            }
            notifyActivity.executeForms = notifyActivity.executeForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType !== terminal));
            if (form) {
                /** @type {?} */
                let params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                let actParas = new Array();
                if (params && params.length > 0) {
                    for (let para of params) {
                        /** @type {?} */
                        let actPara = new ActualParameter(notifyActivity.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                /** @type {?} */
                const id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                let item = new ExecuteForm(notifyActivity.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                notifyActivity.executeForms.push(item);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    updateNotifySet(notifyActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        notifyActivity.dynamicParticipants = notifyActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.Notify));
        notifyActivity.notifyAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(notifyActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Notify;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                notifyActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;

                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * 更新知会活动扩展属性
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    resetExtendProperty(notifyActivity, obj) {
        if (notifyActivity) {
            /** @type {?} */
            let attributes = (/** @type {?} */ (obj.propertyValue));
            if (!notifyActivity.extendProperties) {
                notifyActivity.extendProperties = new Array();
            }
            for (const o of obj.propertyValue) {
                /** @type {?} */
                const index = notifyActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.key === o.code));
                if (index > -1) {
                    notifyActivity.extendProperties.splice(index, 1);
                }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                (a) => {
                    /** @type {?} */
                    let item = new ExtendProperty(notifyActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    notifyActivity.extendProperties.push(item);
                }));
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    updateMessageNotices(notifyActivity, obj) {
        /** @type {?} */
        const bpmnModel = notifyActivity.Model;
        /** @type {?} */
        let notices = (/** @type {?} */ (obj.propertyValue));
        notifyActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(bpmnModel);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(bpmnModel);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(bpmnModel);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                // messageNotice.receiver = n.receiver;
                // messageNotice.receiverText = n.receiverText;
                n.receivers = n.receivers.filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                (r) => r.type));
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(notifyActivity.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(notifyActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(notifyActivity.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                notifyActivity.messageNotices.push(messageNotice);
            }
        }
    }
}
NotifyActivityCell.CLR_TYPE_ID = NotifyActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 审批活动节点
 */
class UserActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = UserActivityCell.CLR_TYPE_ID;
        this.name = "审批";
        this.nameLanguage = {
            "zh-CHS": "审批",
            "zh-CHT": "審批",
            "en": "Approve",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/approval.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/approval_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const bpmnModel = editorUi.graph.bpmnModel;
        flowNode.Id = "UserActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.transferAble = editorUi.generalConfig.enableTransfer;
            flowNode.AddSignBehindAble = editorUi.generalConfig.enableAddSignBehind;
            flowNode.AddSignFrontAble = editorUi.generalConfig.enableAddSignFront;
            flowNode.NotifyAble = editorUi.generalConfig.enableNotify;
            if (this.bizActivity) {
                /** @type {?} */
                const bizActivity = this.bizActivity;
                flowNode.BizActivityID = bizActivity.id;
                flowNode.BizActivityName = bizActivity.name;
                flowNode.Tools = [];
                for (let c of bizActivity.bizComponents) {
                    /** @type {?} */
                    let tool = new Component$1(flowNode.Model);
                    tool.Id = c.id;
                    tool.Name = c.name;
                    tool.Time = c.executionTime;
                    // TODO 写死了构件类型
                    tool.ComponentType = 'CommonComponent';
                    tool.MetadataId = c.metadataId;
                    tool.MethodCode = c.methodCode;
                    tool.ActualParameters = [];
                    if (c.actualParameters && ((/** @type {?} */ (c.actualParameters))).length > 0) {
                        for (let a of ((/** @type {?} */ (c.actualParameters)))) {
                            /** @type {?} */
                            let parameter = new ActualParameter(bpmnModel, a.code, a.value);
                            tool.ActualParameters.push(parameter);
                        }
                    }
                    flowNode.Tools.push(tool);
                }
                flowNode.setBizConclusions(bpmnModel, bizActivity.bizActions);
            }
            else {
                flowNode.BizActivityID = "";
                flowNode.initConclusions(bpmnModel);
            }
        }
        return flowNode;
    }
    /**
     * @return {?}
     */
    createDiagramElement() {
        if (this.bizActivity != null) {
            this.imgUrls = {
                [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/bizActivity.png",
                [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/bizActivity_select.svg",
            };
        }
        /** @type {?} */
        const shape = super.createDiagramElement();
        return shape;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        return this.getFarrisPropConfigByIsOperation();
    }
    /**
     * @param {?=} isOperation
     * @return {?}
     */
    getFarrisPropConfigByIsOperation(isOperation = false) {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        let extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let userAct = this.flowElement;
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: UserActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: UserActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: UserActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true },
            { propertyID: UserActivityPropertyKeys.wf_TitleExpression, propertyName: mxResources.get('wfTitleExpression'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let performerProperty = new ElementPropertyConfig();
        performerProperty.categoryId = 'performerProperty';
        performerProperty.categoryName = mxResources.get('participant');
        performerProperty.tabId = 'basic';
        performerProperty.tabName = mxResources.get('basicAttributes');
        performerProperty.properties = [
            { propertyID: UserActivityPropertyKeys.ParticipantSchemes, propertyName: mxResources.get('participantSchemes'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.ParticipantOptions, propertyName: mxResources.get('participantOptions'), propertyType: 'modal' },
        ];
        // if (userAct.AssignmentStrategy !== AssignmentStrategy.ASSIGN) {
        //     performerProperty.properties.push(
        //         { propertyID: UserActivityPropertyKeys.AssignStrategy, propertyName: '分配策略', propertyType: 'modal' }
        //     );
        // } else {
        //     performerProperty.properties = performerProperty.properties.concat(
        //         [{ propertyID: UserActivityPropertyKeys.AssignStrategy, propertyName: '分配策略', propertyType: 'modal' },
        //         { propertyID: UserActivityPropertyKeys.AssignPerformer, propertyName: '备选办理人', propertyType: 'modal' }]);
        // }
        if (!isOperation) {
            if (userAct.ExecuteWorkItemMode === ExecuteWorkItemMode.Preempt) {
                performerProperty.properties.push({ propertyID: UserActivityPropertyKeys.CompleteStrategy, propertyName: mxResources.get('completeStrategy'), propertyType: 'select' });
                propertyData[UserActivityPropertyKeys.CompleteStrategy] = userAct.ExecuteWorkItemMode;
            }
            else {
                performerProperty.properties = performerProperty.properties.concat([
                    { propertyID: UserActivityPropertyKeys.CompleteStrategy, propertyName: mxResources.get('completeStrategy'), propertyType: 'select' },
                    { propertyID: UserActivityPropertyKeys.SignRule, propertyName: mxResources.get('signRule'), propertyType: 'modal' },
                ]);
                propertyData[UserActivityPropertyKeys.CompleteStrategy] = userAct.ExecuteWorkItemMode;
                propertyData[UserActivityPropertyKeys.SignRule] = userAct.CounterSignRules;
            }
        }
        /** @type {?} */
        let approvalProperty = new ElementPropertyConfig();
        approvalProperty.categoryId = 'approvalProperty';
        approvalProperty.categoryName = mxResources.get('operationsManage');
        approvalProperty.tabId = 'approvalProperty';
        approvalProperty.tabName = mxResources.get('operationsConfig');
        approvalProperty.properties = [
            { propertyID: UserActivityPropertyKeys.ApprovalItems, propertyName: mxResources.get('approvalItems'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.wf_CustomizeAction, propertyName: mxResources.get('wfCustomizeAction'), propertyType: 'modal' },
        ];
        // 审批活动节点含“驳回”审批动作时，属性框支持驳回规则属性
        if (userAct.Conclusions && this.isBackConclusionExist(userAct.Conclusions)) {
            approvalProperty.properties.push({ propertyID: UserActivityPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' });
            propertyData[UserActivityPropertyKeys.BackWardRule] = userAct.BackWardRule;
        }
        approvalProperty.properties = approvalProperty.properties.concat([
            { propertyID: UserActivityPropertyKeys.Retrievable, propertyName: mxResources.get('retrievable'), propertyType: 'select' },
        ]);
        if (!isOperation) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.AddSignFrontAble, propertyName: mxResources.get('addSignFrontAble'), propertyType: 'modal' },
                { propertyID: UserActivityPropertyKeys.AddSignBehindAble, propertyName: mxResources.get('addSignBehindAble'), propertyType: 'modal' },
            ]);
        }
        if (editorUi.generalConfig.enableTransfer) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.transferScope, propertyName: mxResources.get('transferScope'), propertyType: 'modal' },
            ]);
        }
        approvalProperty.properties = approvalProperty.properties.concat([
            { propertyID: UserActivityPropertyKeys.NotifyAble, propertyName: mxResources.get('notifyAble'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.urgeHandleRule, propertyName: mxResources.get('urgeHandleRule'), propertyType: 'modal' }
        ]);
        if (userAct.SelectTargetAble) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
                { propertyID: UserActivityPropertyKeys.JumpScope, propertyName: mxResources.get('jumpScope'), propertyType: 'modal' },
            ]);
            propertyData[UserActivityPropertyKeys.SelectTargetAble] = userAct.SelectTargetAble;
            propertyData[UserActivityPropertyKeys.JumpScope] = userAct.JumpScope;
        }
        else {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
            ]);
            propertyData[UserActivityPropertyKeys.SelectTargetAble] = userAct.SelectTargetAble;
        }
        if (userAct.otherAssignNodes) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' },
                // { propertyID: UserActivityPropertyKeys.otherAssignActivities, propertyName: mxResources.get('otherAssignActivities'), propertyType: 'modal' },
                { propertyID: UserActivityPropertyKeys.otherAssignActivityNodeInfos, propertyName: mxResources.get('otherAssignActivityNodeInfos'), propertyType: 'modal' },
            ]);
            propertyData[UserActivityPropertyKeys.otherAssignNodes] = true;
            // propertyData[UserActivityPropertyKeys.otherAssignActivities] = userAct.otherAssignNodes.otherAssignActivities;
            propertyData[UserActivityPropertyKeys.otherAssignActivityNodeInfos] = userAct.otherAssignNodes.otherAssignActivityNodeInfos || userAct.otherAssignNodes.otherAssignActivityNodeInfos;
            if (userAct.otherAssignNodes.otherAssignActivities) {
                userAct.otherAssignNodes.otherAssignActivities = null;
            }
        }
        else {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' }
            ]);
            propertyData[UserActivityPropertyKeys.otherAssignNodes] = false;
        }
        /** @type {?} */
        let eventListeners = new ElementPropertyConfig();
        eventListeners.categoryId = 'eventListeners'; // 活动选项（表单定义+活动构件）
        eventListeners.categoryName = mxResources.get('eventListeners');
        eventListeners.tabId = 'advanced';
        eventListeners.tabName = mxResources.get('advancedAttributes');
        eventListeners.properties = [
            { propertyID: UserActivityPropertyKeys.Tools, propertyName: mxResources.get('tools'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.checkConditions, propertyName: mxResources.get('checkConditions'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        /** @type {?} */
        let ApprovalSettings = new ElementPropertyConfig();
        ApprovalSettings.categoryId = 'ApprovalSettings'; // 活动选项（表单定义+活动构件）
        ApprovalSettings.categoryName = mxResources.get('approvalSettings');
        ApprovalSettings.tabId = 'advanced';
        ApprovalSettings.tabName = mxResources.get('advancedAttributes');
        ApprovalSettings.properties = [
            { propertyID: UserActivityPropertyKeys.anonymousSet, propertyName: mxResources.get('anonymousSet'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.approvalPivotConfig, propertyName: mxResources.get('approvalPivotConfig'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.imageSettings, propertyName: mxResources.get('imageSettings'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.MultiInstanceLoopCharacteristics, propertyName: mxResources.get('multiInstanceLoopCharacteristics'), propertyType: 'modal' }
        ];
        propertyData[UserActivityPropertyKeys.MultiInstanceLoopCharacteristics] = userAct.LoopCharacteristics;
        /** @type {?} */
        let taskTimeliness = new ElementPropertyConfig();
        taskTimeliness.categoryId = 'taskTimeliness'; // 活动选项（表单定义+活动构件）
        taskTimeliness.categoryName = mxResources.get('taskTimeliness');
        taskTimeliness.tabId = 'advanced';
        taskTimeliness.tabName = mxResources.get('advancedAttributes');
        taskTimeliness.properties = [
            { propertyID: UserActivityPropertyKeys.timeLimitControl, propertyName: mxResources.get('timeLimitControl'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: UserActivityPropertyKeys.DisplayTerminal, propertyName: mxResources.get('displayTerminal'), propertyType: 'select' },
            { propertyID: UserActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            let ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            for (const g of groupList) {
                ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
            }
            this.setPropertyData(userAct, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, eventListeners, taskTimeliness, ApprovalSettings, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            this.setPropertyData(userAct, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, eventListeners, taskTimeliness, ApprovalSettings],
                propertyData: propertyData
            };
        }
    }
    /**
     * 判断是否存在反向流程动作
     * @param {?} conclusions
     * @return {?}
     */
    isBackConclusionExist(conclusions) {
        for (let conclusion of conclusions) {
            if (conclusion.WorkFlowAction === WorkFlowAction.Backward) {
                return true;
            }
        }
        return false;
    }
    /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?} groupList
     * @return {?}
     */
    setPropertyData(act, propertyData, groupList) {
        propertyData[UserActivityPropertyKeys.Id] = act.Id;
        propertyData[UserActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[UserActivityPropertyKeys.Name] = act.Name;
        propertyData[UserActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        //活动传递bizActivityId
        propertyData[UserActivityPropertyKeys.BizActivityID] = act.BizActivityID;
        // 变量设置+流程变量
        propertyData[UserActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        propertyData[UserActivityPropertyKeys.ParticipantSchemes] = this.getParticipantInfo(act);
        propertyData[UserActivityPropertyKeys.ParticipantOptions] = this.getParticipantOptions(act);
        // if (userAct.AssignmentStrategy === AssignmentStrategy.ASSIGN) {
        //     propertyData[UserActivityPropertyKeys.AssignPerformer] = this.getPotentialOwnerImpl(userAct);
        // }
        propertyData[UserActivityPropertyKeys.ApprovalItems] = act.Conclusions;
        propertyData[UserActivityPropertyKeys.Tools] = PropertyHelper.getBizComponentList((/** @type {?} */ (act.Tools)));
        propertyData[UserActivityPropertyKeys.wf_CustomizeAction] = act.customizeActions || [];
        propertyData[UserActivityPropertyKeys.AssignStrategy] = this.getAssignStrategy(act);
        propertyData[UserActivityPropertyKeys.Retrievable] = act.Retrievable;
        propertyData[UserActivityPropertyKeys.SelectBranch] = act.SelectBranch;
        propertyData[UserActivityPropertyKeys.AddSignFrontAble] = this.getSignFrontInfo(act);
        propertyData[UserActivityPropertyKeys.AddSignBehindAble] = this.getSignBehindInfo(act);
        propertyData[UserActivityPropertyKeys.transferScope] = this.getTransferScopeInfo(act);
        propertyData[UserActivityPropertyKeys.NotifyAble] = this.getNotifyAble(act);
        propertyData[UserActivityPropertyKeys.timeLimitControl] = this.getTimeLimitInfo(act);
        propertyData[UserActivityPropertyKeys.wf_TitleExpression] = act.taskTitle ? (act.taskTitle.valueLanguage ? act.taskTitle.valueLanguage : act.taskTitle.value) : '';
        propertyData[UserActivityPropertyKeys.anonymousSet] = {
            isAnonymity: act.anonymous,
            anonymous: act.anonymousText
        };
        propertyData[UserActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        // 影像设置
        propertyData[UserActivityPropertyKeys.imageSettings] = act.imageSettings;
        propertyData[UserActivityPropertyKeys.wf_ExecuteForms_PC] =
            act.ExecuteForms ? act.ExecuteForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'PC')) : null;
        propertyData[UserActivityPropertyKeys.wf_ExecuteForms_Mobile] =
            act.ExecuteForms ? act.ExecuteForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'MOBILE')) : null;
        propertyData[UserActivityPropertyKeys.approvalPivotConfig] = act.approvalPivotConfig;
        propertyData[UserActivityPropertyKeys.DisplayTerminal] = act.DisplayTerminal ? act.DisplayTerminal : DisplayTerminal.ALL;
        propertyData[UserActivityPropertyKeys.urgeHandleRule] = this.getUrgeHandleRule(act);
        for (const g of groupList) {
            // 取回模型上的value值给到扩展属性组件里
            if (act.extendProperties && act.extendProperties.length > 0) {
                g.childs.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => {
                    return a.sortOrder - b.sortOrder;
                })).forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    act.extendProperties.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (e.key == d.code) {
                            d.value = e.value;
                        }
                    }));
                }));
            }
            propertyData[g.parent.id] = g.childs;
        }
        propertyData[UserActivityPropertyKeys.checkConditions] = this.getCheckConditions(act);
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getParticipantInfo(userActivity) {
        /** @type {?} */
        const partiInfo = new ParticipantInfo$1();
        partiInfo.assignStrategy.assignStrategy = userActivity.AssignmentStrategy;
        /** @type {?} */
        const roles = (/** @type {?} */ (userActivity.GetResourceRoles().filter((/**
         * @param {?} role
         * @return {?}
         */
        role => role instanceof HumanPerformerImpl))));
        partiInfo.humanPerformerList = PropertyHelper.getPerformerList(roles);
        if (userActivity.AssignmentStrategy === AssignmentStrategy.ASSIGN) {
            if (userActivity.AssignPerformerConfig) {
                /** @type {?} */
                const assignConfig = new AssignConfig$2();
                assignConfig.operator = userActivity.AssignPerformerConfig.Operator;
                assignConfig.multiSelect = userActivity.AssignPerformerConfig.MultiSelect;
                assignConfig.necessary = userActivity.AssignPerformerConfig.Necessary;
                partiInfo.assignStrategy.assignConfig = assignConfig;
                partiInfo.isAllScope = userActivity.AssignPerformerConfig.AllowGlobalAssign;
            }
            /** @type {?} */
            const roles = (/** @type {?} */ (userActivity.GetResourceRoles().filter((/**
             * @param {?} role
             * @return {?}
             */
            role => role instanceof PotentialOwnerImpl))));
            partiInfo.potentialOwnerList = PropertyHelper.getPerformerList(roles);
        }
        return partiInfo;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getParticipantOptions(userActivity) {
        /** @type {?} */
        const options = {};
        if (userActivity.ParticipantSetting != null) {
            options.ExclusionPerformers = userActivity.ParticipantSetting.ExclusionPerformers;
            options.NoPerformerStrategy = userActivity.ParticipantSetting.NoPerformerStrategy;
            options.HistoricFirst = userActivity.ParticipantSetting.HistoricFirst;
            options.automaticPerformers = userActivity.ParticipantSetting.automaticPerformers;
        }
        return options;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getAssignStrategy(userActivity) {
        /** @type {?} */
        const assignStrategy = new AssignStrategy$1();
        assignStrategy.assignStrategy = userActivity.AssignmentStrategy;
        if (userActivity.AssignPerformerConfig) {
            /** @type {?} */
            const assignConfig = new AssignConfig$2();
            assignConfig.operator = userActivity.AssignPerformerConfig.Operator;
            assignConfig.multiSelect = userActivity.AssignPerformerConfig.MultiSelect;
            assignConfig.necessary = userActivity.AssignPerformerConfig.Necessary;
            assignStrategy.assignConfig = assignConfig;
        }
        return assignStrategy;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getSignFrontInfo(userActivity) {
        /** @type {?} */
        const signFrontTest = new ActionOrganizationScopeDesign();
        signFrontTest.action = (/** @type {?} */ (ActionScope.AddSignFront));
        if (userActivity.AddSignFrontAble) {
            signFrontTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.AddSignFront));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant$1;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            signFrontTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                signFrontTest.scope.participantInfo = new ParticipantInfo$1();
                signFrontTest.scope.participantInfo.potentialOwnerList = list;
                signFrontTest.scope.participantInfo.isAllScope = true;
            }
            else {
                signFrontTest.scope.participantInfo = new ParticipantInfo$1();
                signFrontTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            signFrontTest.enable = false;
        }
        return signFrontTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getSignBehindInfo(userActivity) {
        /** @type {?} */
        const signBehindTest = new ActionOrganizationScopeDesign();
        signBehindTest.action = (/** @type {?} */ (ActionScope.AddSignBehind));
        if (userActivity.AddSignBehindAble) {
            signBehindTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.AddSignBehind));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant$1;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            signBehindTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                signBehindTest.scope.participantInfo = new ParticipantInfo$1();
                signBehindTest.scope.participantInfo.potentialOwnerList = list;
                signBehindTest.scope.participantInfo.isAllScope = true;
            }
            else {
                signBehindTest.scope.participantInfo = new ParticipantInfo$1();
                signBehindTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            signBehindTest.enable = false;
        }
        return signBehindTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getTransferScopeInfo(userActivity) {
        /** @type {?} */
        const transferScopeTest = new ActionOrganizationScopeDesign();
        transferScopeTest.action = (/** @type {?} */ (ActionScope.Transfer));
        if (userActivity.transferAble) {
            transferScopeTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.Transfer));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant$1;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            transferScopeTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                transferScopeTest.scope.participantInfo = new ParticipantInfo$1();
                transferScopeTest.scope.participantInfo.potentialOwnerList = list;
                transferScopeTest.scope.participantInfo.isAllScope = true;
            }
            else {
                transferScopeTest.scope.participantInfo = new ParticipantInfo$1();
                transferScopeTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            transferScopeTest.enable = userActivity.transferAble;
        }
        return transferScopeTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getNotifyAble(userActivity) {
        /** @type {?} */
        const notifyScopeTest = new ActionOrganizationScopeDesign();
        notifyScopeTest.action = (/** @type {?} */ (ActionScope.Notify));
        if (userActivity.NotifyAble) {
            notifyScopeTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.Notify));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant$1;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            notifyScopeTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                notifyScopeTest.scope.participantInfo = new ParticipantInfo$1();
                notifyScopeTest.scope.participantInfo.potentialOwnerList = list;
                notifyScopeTest.scope.participantInfo.isAllScope = true;
            }
            else {
                notifyScopeTest.scope.participantInfo = new ParticipantInfo$1();
                notifyScopeTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            notifyScopeTest.enable = userActivity.NotifyAble;
        }
        return notifyScopeTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getTimeLimitInfo(userActivity) {
        if (userActivity.timeLimitControl) {
            /** @type {?} */
            const timeLimit = new TimeLimitControlInfo();
            timeLimit.enable = userActivity.timeLimitControl.enable;
            timeLimit.tag = userActivity.timeLimitControl.tag;
            timeLimit.dueTime = userActivity.timeLimitControl.dueTime;
            timeLimit.timeUnit = userActivity.timeLimitControl.timeUnit;
            timeLimit.expireOperations = new Array();
            if (userActivity.timeLimitControl.expireOperations && userActivity.timeLimitControl.expireOperations.length > 0) {
                /** @type {?} */
                const operations = userActivity.timeLimitControl.expireOperations;
                for (const o of operations) {
                    if (o.ClrTypeID.indexOf('SendMessageExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperationInfo();
                        sendMessage.timeDuration = operation.timeDuration;
                        sendMessage.durationType = operation.durationType;
                        sendMessage.timeUnit = operation.timeUnit;
                        sendMessage.message = operation.message;
                        sendMessage.sendType = operation.sendType;
                        sendMessage.subject = operation.subject;
                        sendMessage.id = operation.id;
                        sendMessage.receiver = operation.receiver;
                        sendMessage.cycleEnable = operation.cycleEnable;
                        sendMessage.cycleTime = operation.cycleTime;
                        sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                        sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                        if (operation.smsMessageTemplate) {
                            /** @type {?} */
                            const smsTemplate = new Object;
                            smsTemplate.code = operation.smsMessageTemplate.code;
                            smsTemplate.content = operation.smsMessageTemplate.content;
                            smsTemplate.smsMessageVariables = new Array();
                            if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of operation.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new Object;
                                    variable.id = WfDesignerUtils.createNM();
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsTemplate;
                        }
                        timeLimit.expireOperations.push(sendMessage);
                    }
                    else if (o.ClrTypeID.indexOf('AutoHandleExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperationInfo();
                        autoHandle.id = operation.id;
                        autoHandle.durationType = operation.durationType;
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        timeLimit.expireOperations.push(autoHandle);
                    }
                }
            }
            return timeLimit;
        }
        return null;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getUrgeHandleRule(userActivity) {
        if (!userActivity.urgeHandleRule) {
            return null;
        }
        /** @type {?} */
        const rule = userActivity.urgeHandleRule;
        /** @type {?} */
        let urgeHandleRule = {
            urgeHandleAble: rule.urgeHandleAble,
            sendType: rule.sendType,
            earlyTime: rule.earlyTime,
            intervalTime: rule.intervalTime,
            urgeMessageSubject: rule.urgeMessageSubject,
            urgeMessageContent: rule.urgeMessageContent,
            addReminder: rule.addReminder,
            subjectEditable: rule.subjectEditable,
            contentEditable: rule.contentEditable
        };
        if (rule.smsMessageTemplate) {
            /** @type {?} */
            const smsTemplate = new Object;
            smsTemplate.code = rule.smsMessageTemplate.code;
            smsTemplate.content = rule.smsMessageTemplate.content;
            smsTemplate.smsMessageVariables = new Array();
            if (rule.smsMessageTemplate.smsMessageVariables && rule.smsMessageTemplate.smsMessageVariables.length > 0) {
                for (const v of rule.smsMessageTemplate.smsMessageVariables) {
                    /** @type {?} */
                    const variable = new Object;
                    variable.id = WfDesignerUtils.createNM();
                    variable.code = v.code;
                    variable.value = v.value;
                    variable.tag = v.tag;
                    smsTemplate.smsMessageVariables.push(variable);
                }
            }
            urgeHandleRule.smsMessageTemplate = smsTemplate;
        }
        return urgeHandleRule;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getCheckConditions(userActivity) {
        if (userActivity.checkConditions && userActivity.checkConditions.length > 0) {
            return userActivity.checkConditions.map((/**
             * @param {?} c
             * @return {?}
             */
            c => ({
                value: c.value,
                checkTime: c.checkTime,
                errorTips: c.errorTips ? Array.from(c.errorTips).reduce((/**
                 * @param {?} obj
                 * @param {?} __1
                 * @return {?}
                 */
                (obj, [key, value]) => Object.assign(obj, { [key]: value })), {}) : null
            })));
        }
        return null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        this.updatePropsByIsOperation(obj);
    }
    /**
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    updatePropsByIsOperation(obj, isOperation = false) {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const userActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case UserActivityPropertyKeys.ParticipantSchemes: // 参与者属性
                this.updateParticipant(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.ParticipantOptions: // 参与者选项
                this.updateParticipantOptions(userActivity, obj);
                break;
            // case UserActivityPropertyKeys.AssignPerformer:
            //     this.updatePotentialOwnerImpl(graph.bpmnModel, userActivity, obj);
            //     break;
            // case UserActivityPropertyKeys.AssignStrategy:
            //     this.updateAssignStrategy(graph, userActivity, obj, isOperation);
            //     break;
            // case UserActivityPropertyKeys.OperatorConfig:
            //     this.updateOperatorConfig(userActivity, obj);
            //     break;
            case UserActivityPropertyKeys.CompleteStrategy:
                this.resetExecuteWorkItemMode(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.DisplayTerminal:
                this.resetDisplayTerminal(userActivity, obj);
                break;
            case UserActivityPropertyKeys.SignRule:
                this.resetSignRules(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.ApprovalItems:
                this.resetApprovalItems(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.wf_ExecuteForms_PC:
                this.resetExecuteForm(userActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case UserActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.resetExecuteForm(userActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case UserActivityPropertyKeys.SelectTargetAble:
                this.resetSelectTargetAble(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.JumpScope:
                this.resetJumpScope(userActivity, obj);
                break;
            case UserActivityPropertyKeys.BackWardRule:
                this.resetBackWardRule(userActivity, obj);
                break;
            case UserActivityPropertyKeys.MultiInstanceLoopCharacteristics:
                this.resetMultiInstanceLoopCharacteristics(userActivity, obj);
                break;
            case UserActivityPropertyKeys.Tools:
                this.resetTools(userActivity, obj);
                break;
            case UserActivityPropertyKeys.wf_TitleExpression:
                this.modifyTitleExpression(userActivity, obj);
                break;
            case UserActivityPropertyKeys.AddSignFrontAble:
                this.updateSignFrontSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.AddSignBehindAble:
                this.updateSignBehindsSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.NotifyAble:
                this.updateNotifySet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.transferScope:
                this.updateTransferScope(userActivity, obj);
                break;
            case UserActivityPropertyKeys.wf_CustomizeAction:
                this.updateCustomizeActions(userActivity, obj);
                break;
            case UserActivityPropertyKeys.timeLimitControl:
                this.updateTimeLimitControl(userActivity, obj);
                break;
            case UserActivityPropertyKeys.anonymousSet:
                this.updateAnonymousSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(userActivity, obj);
                break;
            case UserActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(userActivity, obj);
                break;
            case UserActivityPropertyKeys.approvalPivotConfig:
                this.updateApprovalPivotConfig(userActivity, obj);
                break;
            case UserActivityPropertyKeys.urgeHandleRule:
                this.updateUrgeHandleRule(userActivity, obj);
                break;
            case UserActivityPropertyKeys.imageSettings: // 更新变量设置属性
                this.updateImageSettings(userActivity, obj);
                break;
            case UserActivityPropertyKeys.checkConditions:
                this.updateCheckConditions(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.otherAssignActivities:
                this.updateOtherAssignActivities(userActivity, obj);
                break;
            case UserActivityPropertyKeys.otherAssignActivityNodeInfos:
                this.updateOtherAssignActivities(userActivity, obj);
                break;
            case UserActivityPropertyKeys.otherAssignNodes:
                this.updateOtherAssignNodes(userActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === propertyId)) > -1) {
                    this.resetExtendProperty(userActivity, obj);
                }
                else {
                    super.updateProps(obj);
                }
                break;
        }
    }
    /**
     * 修改参与者
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    updateParticipant(userActivity, obj, isOperation = false) {
        /** @type {?} */
        const performerInfo = obj.propertyValue;
        if (performerInfo.assignStrategy.assignStrategy === AssignmentStrategy.CLAIM
            && userActivity.ParticipantSetting
            && userActivity.ParticipantSetting.automaticPerformers
            && userActivity.ParticipantSetting.automaticPerformers.length > 0) ;
        else {
            this.checkOtherAssignNodes(userActivity, performerInfo);
            userActivity.AssignPerformerConfig = null;
            userActivity.AssignmentStrategy = performerInfo.assignStrategy.assignStrategy;
            /** @type {?} */
            const resourceRoles = userActivity.GetResourceRoles();
            if (resourceRoles && resourceRoles.length > 0) {
                resourceRoles.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    if (r instanceof HumanPerformerImpl) {
                        userActivity.RemoveResourceRole(r.Id);
                    }
                    else if (r instanceof PotentialOwnerImpl) {
                        userActivity.RemoveResourceRole(r.Id);
                    }
                }));
            }
            if (performerInfo.humanPerformerList && performerInfo.humanPerformerList.length > 0) {
                for (const humanPerformer of performerInfo.humanPerformerList) {
                    switch (humanPerformer.type) {
                        case UserParticipantExpression.Clr_Type_ID:
                            this.addUserParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case VariableParticipantExpression.Clr_Type_ID:
                            this.addVariableParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case PositionParticipantExpression.Clr_Type_ID:
                            this.addPositionParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ComponentParticipantExpression.Clr_Type_ID:
                            this.addComponentParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ReportingLineParticipantExpression.Clr_Type_ID:
                            this.addReportingLineParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ActivityExecutorParticipantExpression.Clr_Type_ID:
                            this.addActivityExecutorParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case MatrixParticipantExpression.Clr_Type_ID:
                            this.addMatrixParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                    }
                }
            }
            if (performerInfo.assignStrategy.assignStrategy === AssignmentStrategy.ASSIGN) {
                /** @type {?} */
                const assignPerformerConfig = new AssignPerformerConfig(userActivity.Model);
                assignPerformerConfig.Operator = performerInfo.assignStrategy.assignConfig.operator;
                assignPerformerConfig.MultiSelect = performerInfo.assignStrategy.assignConfig.multiSelect;
                assignPerformerConfig.Necessary = performerInfo.assignStrategy.assignConfig.necessary;
                assignPerformerConfig.AllowGlobalAssign = performerInfo.isAllScope;
                userActivity.AssignPerformerConfig = assignPerformerConfig;
                if (!performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                        }
                    }
                }
            }
            // 分配策略为领用时，完成策略自动修改为抢占模式
            if (userActivity.AssignmentStrategy === AssignmentStrategy.CLAIM) {
                userActivity.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
                userActivity.CounterSignRules = null;
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} performerInfo
     * @return {?}
     */
    checkOtherAssignNodes(userActivity, performerInfo) {
        if (userActivity.AssignmentStrategy !== AssignmentStrategy.ASSIGN) {
            return;
        }
        /** @type {?} */
        const bpmnModel = userActivity.Model;
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        if (performerInfo.assignStrategy.assignStrategy !== AssignmentStrategy.ASSIGN) {
            for (const k in flowElements) {
                if (flowElements[k] instanceof UserActivity) {
                    /** @type {?} */
                    const activity = (/** @type {?} */ (flowElements[k]));
                    if (activity.otherAssignNodes && activity.otherAssignNodes.otherAssignActivities
                        && activity.otherAssignNodes.otherAssignActivities.length > 0
                        && activity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id === userActivity.Id)) > -1) {
                        activity.otherAssignNodes.otherAssignActivities = activity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id !== userActivity.Id));
                    }
                }
                else if (flowElements[k] instanceof OperationActivity) {
                    /** @type {?} */
                    const operationActivity = (/** @type {?} */ (flowElements[k]));
                    if (operationActivity.otherAssignNodes && operationActivity.otherAssignNodes.otherAssignActivities
                        && operationActivity.otherAssignNodes.otherAssignActivities.length > 0
                        && operationActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id === userActivity.Id)) > -1) {
                        operationActivity.otherAssignNodes.otherAssignActivities = operationActivity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id !== userActivity.Id));
                    }
                }
                else if (flowElements[k] instanceof StartActivity) {
                    /** @type {?} */
                    const startActivity = (/** @type {?} */ (flowElements[k]));
                    if (startActivity.otherAssignNodes && startActivity.otherAssignNodes.otherAssignActivities
                        && startActivity.otherAssignNodes.otherAssignActivities.length > 0
                        && startActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id === userActivity.Id)) > -1) {
                        startActivity.otherAssignNodes.otherAssignActivities = startActivity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id !== userActivity.Id));
                    }
                }
            }
        }
        else {
            if (userActivity.AssignPerformerConfig.Operator === 'currentUser'
                && performerInfo.assignStrategy.assignConfig.operator !== 'currentUser') {
                for (const k in flowElements) {
                    if (flowElements[k] instanceof UserActivity) {
                        /** @type {?} */
                        const activity = (/** @type {?} */ (flowElements[k]));
                        if (activity.otherAssignNodes && activity.otherAssignNodes.otherAssignActivities
                            && activity.otherAssignNodes.otherAssignActivities.length > 0
                            && activity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === userActivity.Id)) > -1) {
                            activity.otherAssignNodes.otherAssignActivities = activity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id !== userActivity.Id));
                        }
                    }
                    else if (flowElements[k] instanceof OperationActivity) {
                        /** @type {?} */
                        const operationActivity = (/** @type {?} */ (flowElements[k]));
                        if (operationActivity.otherAssignNodes && operationActivity.otherAssignNodes.otherAssignActivities
                            && operationActivity.otherAssignNodes.otherAssignActivities.length > 0
                            && operationActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === userActivity.Id)) > -1) {
                            operationActivity.otherAssignNodes.otherAssignActivities = operationActivity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id !== userActivity.Id));
                        }
                    }
                }
            }
            else if (userActivity.AssignPerformerConfig.Operator === 'procInstCreator'
                && performerInfo.assignStrategy.assignConfig.operator !== 'procInstCreator') {
                for (const k in flowElements) {
                    if (flowElements[k] instanceof StartActivity) {
                        /** @type {?} */
                        const startActivity = (/** @type {?} */ (flowElements[k]));
                        if (startActivity.otherAssignNodes && startActivity.otherAssignNodes.otherAssignActivities
                            && startActivity.otherAssignNodes.otherAssignActivities.length > 0
                            && startActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === userActivity.Id)) > -1) {
                            startActivity.otherAssignNodes.otherAssignActivities = startActivity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id !== userActivity.Id));
                        }
                    }
                }
            }
        }
    }
    /**
     * 添加用户参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addUserParticipant(userActivity, performer, type, scope) {
        /** @type {?} */
        let userParticipant;
        if (performer instanceof UserParticipantExpression) {
            userParticipant = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            userParticipant = new UserParticipantExpression(userActivity.Model, performer.performerId, performer.performerName, performer.orgType);
            userParticipant.id = performer.id;
            userParticipant.OrgId = performer.orgId;
            userParticipant.actionScope = ActionScope.Default;
            userParticipant.OrgName = performer.orgName;
            userParticipant.Tag = performer.tag;
            userParticipant.OrgType = performer.orgType;
            userParticipant.order = performer.order;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                userParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                userParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(userParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 添加变量参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addVariableParticipant(userActivity, performer, type, scope) {
        /** @type {?} */
        let variablePerformer;
        if (performer instanceof VariableParticipantExpression) {
            variablePerformer = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            variablePerformer = new VariableParticipantExpression(userActivity.Model, performer.performerId, performer.performerName, performer.orgType);
            variablePerformer.id = performer.id;
            variablePerformer.actionScope = ActionScope.Default;
            variablePerformer.Name = performer.performerName ? performer.performerName : performer.name;
            variablePerformer.Tag = performer.tag;
            variablePerformer.VarValue = performer.varValue;
            variablePerformer.VarType = performer.varType;
            variablePerformer.order = performer.order;
            variablePerformer.Relation = performer.relation;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                variablePerformer.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                variablePerformer.actionScope = scope;
                userActivity.dynamicParticipants.push(variablePerformer);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 添加岗位参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addPositionParticipant(userActivity, performer, type, scope) {
        /** @type {?} */
        let posiParticipant;
        if (performer instanceof PositionParticipantExpression) {
            posiParticipant = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            posiParticipant = new PositionParticipantExpression(userActivity.Model, performer.performerId, performer.performerName);
            posiParticipant.id = performer.id;
            posiParticipant.actionScope = ActionScope.Default;
            posiParticipant.PositionType = performer.positionType;
            posiParticipant.order = performer.order;
            if (performer.positionType === '1') {
                posiParticipant.OrgId = performer.orgId;
                posiParticipant.OrgName = performer.orgName;
                posiParticipant.OrgType = performer.orgType;
            }
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                posiParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                posiParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(posiParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 添加构件参与者
     * @param {?} userActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addComponentParticipant(userActivity, component, type, scope) {
        /** @type {?} */
        let componentParticipant;
        if (component instanceof ComponentParticipantExpression) {
            componentParticipant = component;
        }
        else {
            component = (/** @type {?} */ (component));
            componentParticipant = new ComponentParticipantExpression(userActivity.Model);
            componentParticipant.id = component.id;
            componentParticipant.componentId = component.metadataId;
            componentParticipant.actionScope = ActionScope.Default;
            componentParticipant.componentName = component.name;
            componentParticipant.methodName = component.methodName;
            componentParticipant.order = component.order;
            componentParticipant.methodCode = component.methodCode;
            if (component.actualParameters && component.actualParameters.length > 0) {
                /** @type {?} */
                let actParas = new Array();
                for (let para of component.actualParameters) {
                    /** @type {?} */
                    let actPara = new ActualParameter(userActivity.Model, para.code, para.value, para.valueText);
                    // TODO:更新参与者会默认把构件参数属性改为contant，临时修复，后续代码优化
                    actPara.Tag = para.tag;
                    if (para.fetchValueMode) {
                        switch (para.fetchValueMode) {
                            case 'express':
                                actPara.Tag = 'expression';
                                break;
                            case 'none':
                                actPara.Tag = 'expression';
                                break;
                            default:
                                actPara.Tag = 'constant';
                                break;
                        }
                    }
                    actParas.push(actPara);
                }
                componentParticipant.actualParameters = actParas;
            }
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                componentParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = component.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = component.order;
            if (scope) {
                componentParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(componentParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addReportingLineParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let reportingLine;
        if (participant instanceof ReportingLineParticipantExpression) {
            reportingLine = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            reportingLine = new ReportingLineParticipantExpression(userActivity.Model);
            reportingLine.id = participant.id;
            reportingLine.actionScope = ActionScope.Default;
            reportingLine.ReportingLineDefId = participant.reportingLineDefId;
            reportingLine.ReportingLineDefName = participant.reportingLineDefName;
            reportingLine.RefOrgId = participant.refOrgId;
            reportingLine.RefUserId = participant.refUserId;
            reportingLine.RefEmployeeId = participant.refEmployeeId;
            reportingLine.order = participant.order;
            reportingLine.Dimension = participant.dimension;
            reportingLine.Tag = participant.tag;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                reportingLine.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                reportingLine.actionScope = scope;
                userActivity.dynamicParticipants.push(reportingLine);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addActivityExecutorParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let activityExecutor;
        if (participant instanceof ActivityExecutorParticipantExpression) {
            activityExecutor = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            activityExecutor = new ActivityExecutorParticipantExpression(userActivity.Model);
            activityExecutor.id = participant.id;
            activityExecutor.activityDefId = participant.activityDefId;
            activityExecutor.actionScope = ActionScope.Default;
            activityExecutor.order = participant.order;
            activityExecutor.activityDefName = participant.activityDefName;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                activityExecutor.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                activityExecutor.actionScope = scope;
                userActivity.dynamicParticipants.push(activityExecutor);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addMatrixParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let matrix;
        matrix = new MatrixParticipantExpression(userActivity.Model);
        if (participant instanceof MatrixParticipantExpression) {
            matrix = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            matrix = new MatrixParticipantExpression(userActivity.Model);
            matrix.order = participant.order;
            matrix.id = participant.id;
            matrix.actionScope = ActionScope.Default;
            matrix.matrixDefId = participant.matrixDefId;
            matrix.matrixDefName = participant.matrixDefName;
            matrix.conditionField1 = participant.conditionField1;
            matrix.conditionFieldText1 = participant.conditionFieldText1;
            matrix.conditionField2 = participant.conditionField2;
            matrix.conditionFieldText2 = participant.conditionFieldText2;
            matrix.conditionField3 = participant.conditionField3;
            matrix.conditionFieldText3 = participant.conditionFieldText3;
            matrix.multivaluedCondition = participant.multivaluedCondition;
            matrix.dataFieldAlias = participant.dataFieldAlias;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                matrix.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                matrix.actionScope = scope;
                userActivity.dynamicParticipants.push(matrix);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addOrganizationParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let potential;
        if (participant instanceof OrganizationParticipantExpression) {
            potential = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            potential = new OrganizationParticipantExpression(userActivity.Model);
            potential.id = participant.id;
            potential.order = participant.order;
            potential.actionScope = ActionScope.AssignUser;
            // potential.organizationLevel = participant.organizationLevel;
            if (participant.organizationLevel === 'DEPARTMENT') {
                potential.organizationLevel = OrganizationLevel.DEPARTMENT;
            }
            else if (participant.organizationLevel === 'UNIT') {
                potential.organizationLevel = OrganizationLevel.UNIT;
            }
            else if (participant.organizationLevel === 'DEFAULT') {
                potential.organizationLevel = OrganizationLevel.DEFAULT;
            }
            potential.organizationId = participant.organizationId;
            potential.organizationName = participant.organizationName;
            potential.includeChildren = participant.includeChildren;
            potential.tag = participant.tag;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                potential.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                potential.actionScope = scope;
                userActivity.dynamicParticipants.push(potential);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 修改参与者选项
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateParticipantOptions(userActivity, obj) {
        /** @type {?} */
        const options = obj.propertyValue;
        if (userActivity.ParticipantSetting != null) {
            userActivity.ParticipantSetting.ExclusionPerformers = options.ExclusionPerformers;
            userActivity.ParticipantSetting.NoPerformerStrategy = options.NoPerformerStrategy;
            userActivity.ParticipantSetting.HistoricFirst = options.HistoricFirst;
            userActivity.ParticipantSetting.automaticPerformers = options.automaticPerformers;
        }
        else {
            /** @type {?} */
            let participantSetting = new ParticipantSetting(userActivity.Model);
            participantSetting.ExclusionPerformers = options.ExclusionPerformers;
            participantSetting.NoPerformerStrategy = options.NoPerformerStrategy;
            participantSetting.HistoricFirst = options.HistoricFirst;
            participantSetting.automaticPerformers = options.automaticPerformers;
            userActivity.ParticipantSetting = participantSetting;
        }
    }
    /**
     * 修改完成策略属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetExecuteWorkItemMode(userActivity, obj, isOperation = false) {
        if (userActivity) {
            userActivity.ExecuteWorkItemMode = obj.propertyValue;
            //抢占模式下清空会签规则
            if (userActivity.ExecuteWorkItemMode === ExecuteWorkItemMode.Preempt) {
                userActivity.CounterSignRules = null;
            }
            else {
                // 会签规则不存在时，即由抢占变为会签时，初始化会签规则
                // 并行会签和串行会签之间切换时，不刷新会签规则
                if (!userActivity.CounterSignRules) {
                    userActivity.CounterSignRules = new Array();
                }
                //会签策略时,不允许跳转；且驳回规则不允许动态选择驳回级次(驳回规则目前需要在流程设计器调整)
                userActivity.SelectTargetAble = false;
                userActivity.JumpScope = null;
                // 切换会签策略时，分配策略不能是领用,自动切换为所有
                // 2023-2-9 修复：由于新增了备选办理人，直接指派导致切换时时备选办理人丢失，修改为只有是领用才切到指所有
                if (userActivity.AssignmentStrategy === AssignmentStrategy.CLAIM) {
                    userActivity.AssignmentStrategy = AssignmentStrategy.ALL;
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetDisplayTerminal(userActivity, obj, isOperation = false) {
        if (userActivity) {
            userActivity.DisplayTerminal = obj.propertyValue;
        }
    }
    /**
     * 更新会签规则属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetSignRules(userActivity, obj, isOperation = false) {
        if (userActivity) {
            /** @type {?} */
            let rules = (/** @type {?} */ (obj.propertyValue));
            userActivity.CounterSignRules = null;
            if (rules && rules.length > 0) {
                userActivity.CounterSignRules = new Array();
                for (let rule of rules) {
                    /** @type {?} */
                    let counterSignRule = new CounterSignRule(userActivity.Model);
                    /** @type {?} */
                    let condition = new Condition(userActivity.Model);
                    condition.Value = rule.completionCondition;
                    counterSignRule.ConclusionValue = rule.conclusionValue;
                    counterSignRule.CalculateType = rule.calculateType;
                    counterSignRule.ConditionValue = rule.conditionValue;
                    counterSignRule.WaitAllVotes = rule.waitAllVotes;
                    counterSignRule.CompletionCondition = condition;
                    userActivity.CounterSignRules.push(counterSignRule);
                }
            }
        }
    }
    /**
     * 更新自定义项属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetApprovalItems(userActivity, obj, isOperation = false) {
        if (userActivity) {
            /** @type {?} */
            let conclusions = (/** @type {?} */ (obj.propertyValue));
            userActivity.Conclusions = new Array();
            for (let conclusion of conclusions) {
                /** @type {?} */
                let item = new ConclusionItem(userActivity.Model);
                item.Value = conclusion.value;
                item.Text = conclusion.text;
                item.WorkFlowAction = conclusion.workFlowAction;
                item.IsDefault = conclusion.isDefault;
                item.commentNecessary = conclusion.commentNecessary;
                item.certification = conclusion.certification;
                item.attachmentNecessary = conclusion.attachmentNecessary;
                item.signatureNecessary = conclusion.signatureNecessary;
                item.defaultComment = conclusion.defaultComment;
                userActivity.Conclusions.push(item);
            }
        }
        // 判断审批项是否包含驳回？不包含时，驳回规则清空
        if (!this.isBackConclusionExist(userActivity.Conclusions)) {
            userActivity.BackWardRule = null;
        }
        else if (!userActivity.BackWardRule) {
            userActivity.BackWardRule = new BackWardRule(userActivity.Model);
        }
    }
    /**
     * 更新审批活动表单定义属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    resetExecuteForm(userActivity, obj, terminal) {
        if (userActivity) {
            /** @type {?} */
            let form = (/** @type {?} */ (obj.propertyValue));
            if (!userActivity.ExecuteForms) {
                userActivity.ExecuteForms = new Array();
            }
            userActivity.ExecuteForms = userActivity.ExecuteForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType !== terminal));
            if (form) {
                /** @type {?} */
                let params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                let actParas = new Array();
                if (params && params.length > 0) {
                    for (let para of params) {
                        /** @type {?} */
                        let actPara = new ActualParameter(userActivity.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                /** @type {?} */
                const id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                let item = new ExecuteForm(userActivity.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                userActivity.ExecuteForms.push(item);
            }
        }
    }
    /**
     * 更新是否允许跳转属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetSelectTargetAble(userActivity, obj, isOperation = false) {
        /** @type {?} */
        const SelectTargetAble = (/** @type {?} */ (obj.propertyValue));
        userActivity.SelectTargetAble = SelectTargetAble;
        if (userActivity.SelectTargetAble) ;
        else {
            userActivity.JumpScope = null;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetJumpScope(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            /** @type {?} */
            let jumpScope = new JumpScope(userActivity.Model);
            jumpScope.Category = data.Category;
            jumpScope.DefaultType = data.DefaultType;
            jumpScope.DestinationActivities = data.DestinationActivities;
            jumpScope.DefaultActivity = data.DefaultActivity;
            userActivity.JumpScope = jumpScope;
        }
        else {
            userActivity.JumpScope = null;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetBackWardRule(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let backWardRule = new BackWardRule(userActivity.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        userActivity.BackWardRule = backWardRule;
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetMultiInstanceLoopCharacteristics(userActivity, obj) {
        if (obj.propertyValue) {
            /** @type {?} */
            const data = obj.propertyValue;
            /** @type {?} */
            let loopCharacteristics = new MultiInstanceLoopCharacteristics(userActivity.Model);
            loopCharacteristics.enable = data.enable;
            loopCharacteristics.sequential = data.sequential;
            loopCharacteristics.loopCardinality = new Expression(userActivity.Model);
            if (data.loopCardinality) {
                /** @type {?} */
                let variableExpression = new SemanticExpression(userActivity.Model);
                variableExpression.Value = data.loopCardinality;
                loopCharacteristics.loopCardinality.MexExpression = variableExpression;
            }
            loopCharacteristics.completionCondition = data.completionCondition;
            /** @type {?} */
            let rules = (/** @type {?} */ (data.completionConditionRules));
            loopCharacteristics.completionConditionRules = null;
            if (rules && rules.length > 0) {
                loopCharacteristics.completionConditionRules = new Array();
                for (let rule of rules) {
                    /** @type {?} */
                    let counterSignRule = new CounterSignRule(userActivity.Model);
                    /** @type {?} */
                    let condition = new Condition(userActivity.Model);
                    condition.Value = rule.CompletionCondition.Value;
                    counterSignRule.ConclusionValue = rule.ConclusionValue;
                    counterSignRule.CalculateType = rule.CalculateType;
                    counterSignRule.ConditionValue = rule.ConditionValue;
                    counterSignRule.WaitAllVotes = rule.WaitAllVotes;
                    counterSignRule.CompletionCondition = condition;
                    loopCharacteristics.completionConditionRules.push(counterSignRule);
                }
            }
            userActivity.LoopCharacteristics = loopCharacteristics;
        }
    }
    /**
     * 更新活动节点标题
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    modifyTitleExpression(userActivity, obj) {
        if (userActivity.taskTitle) {
            userActivity.taskTitle.valueLanguage = obj.propertyValue;
            userActivity.taskTitle.value = obj.propertyValue['zh-CHS'];
        }
        else {
            /** @type {?} */
            const title = new TitleExpression(userActivity.Model, obj.propertyValue['zh-CHS'], obj.propertyValue);
            userActivity.taskTitle = title;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetTools(userActivity, obj) {
        /** @type {?} */
        let tools = (/** @type {?} */ (obj.propertyValue));
        userActivity.Tools = new Array();
        if (tools && tools.length > 0) {
            for (let tool of tools) {
                /** @type {?} */
                let component = new Component$1(userActivity.Model);
                component.Id = tool.id;
                component.Name = tool.name;
                component.Time = tool.executionTime;
                // TODO 写死了构件类型
                component.ComponentType = 'WebServiceComponent';
                component.MetadataId = tool.metadataId;
                component.MethodCode = tool.methodCode;
                component.isForCompensation = tool.isForCompensation;
                component.ActualParameters = [];
                if (tool.actualParameters && ((/** @type {?} */ (tool.actualParameters))).length > 0) {
                    for (let a of ((/** @type {?} */ (tool.actualParameters)))) {
                        /** @type {?} */
                        let parameter = new ActualParameter(userActivity.Model, a.code, a.value);
                        component.ActualParameters.push(parameter);
                    }
                }
                userActivity.Tools.push(component);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateSignFrontSet(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.AddSignFront));
        userActivity.AddSignFrontAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.AddSignFront;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateSignBehindsSet(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.AddSignBehind));
        userActivity.AddSignBehindAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.AddSignBehind;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateNotifySet(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.Notify));
        userActivity.NotifyAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Notify;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateTransferScope(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.Transfer));
        userActivity.transferAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Transfer;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateTimeLimitControl(userActivity, obj) {
        /** @type {?} */
        const timeLimitInfo = (/** @type {?} */ (obj.propertyValue));
        userActivity.timeLimitControl = null;
        if (timeLimitInfo) {
            /** @type {?} */
            const control = new TimeLimitControl(userActivity.Model);
            control.enable = timeLimitInfo.enable;
            control.tag = timeLimitInfo.tag;
            control.dueTime = timeLimitInfo.dueTime;
            control.timeUnit = timeLimitInfo.timeUnit;
            control.expireOperations = new Array();
            if (timeLimitInfo.expireOperations && timeLimitInfo.expireOperations.length > 0) {
                for (const o of timeLimitInfo.expireOperations) {
                    if (o.operationTypeName === 'SendMessageExpireOperation' || !o.operationTypeName) {
                        /** @type {?} */
                        const entity = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperation(userActivity.Model);
                        sendMessage.id = BpmnModelHelper.GenerateElementId();
                        sendMessage.durationType = (/** @type {?} */ (entity.durationType));
                        sendMessage.timeDuration = entity.timeDuration;
                        sendMessage.timeUnit = entity.timeUnit;
                        sendMessage.message = entity.message;
                        sendMessage.subject = entity.subject;
                        sendMessage.sendType = entity.sendType;
                        sendMessage.receiver = entity.receiver;
                        sendMessage.cycleEnable = entity.cycleEnable;
                        sendMessage.cycleTime = entity.cycleTime;
                        sendMessage.cycleTimeUnit = entity.cycleTimeUnit;
                        sendMessage.operationTypeName = entity.operationTypeName ? entity.operationTypeName : 'SendMessageExpireOperation';
                        if (entity.smsMessageTemplate) {
                            /** @type {?} */
                            const smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
                            smsMessageTemplate.code = entity.smsMessageTemplate.code;
                            smsMessageTemplate.content = entity.smsMessageTemplate.content;
                            smsMessageTemplate.smsMessageVariables = new Array();
                            if (entity.smsMessageTemplate.smsMessageVariables && entity.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of entity.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new SmsMessageVariable(userActivity.Model);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsMessageTemplate;
                        }
                        control.expireOperations.push(sendMessage);
                    }
                    else if (o.operationTypeName === 'AutoHandleExpireOperation') {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperation(userActivity.Model);
                        autoHandle.id = o.id;
                        autoHandle.durationType = operation.durationType;
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        control.expireOperations.push(autoHandle);
                    }
                }
            }
            userActivity.timeLimitControl = control;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateAnonymousSet(userActivity, obj) {
        /** @type {?} */
        const anonymousSet = obj.propertyValue;
        if (anonymousSet) {
            userActivity.anonymous = anonymousSet.isAnonymity;
            userActivity.anonymousText = anonymousSet.anonymous;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateCustomizeActions(userActivity, obj) {
        /** @type {?} */
        let actions = (/** @type {?} */ (obj.propertyValue));
        userActivity.customizeActions = new Array();
        if (actions && actions.length > 0) {
            for (let a of actions) {
                /** @type {?} */
                let action = new CustomizeAction(userActivity.Model);
                action.id = BpmnModelHelper.GenerateElementId();
                action.code = a.code;
                action.name = a.name;
                action.terminalType = a.terminalType;
                action.actualParameters = [];
                if (a.actualParameters && a.actualParameters.length > 0) {
                    for (let p of a.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(userActivity.Model, p.Name, p.Value, p.ValueText, p.Tag || 'expression');
                        action.actualParameters.push(parameter);
                    }
                }
                userActivity.customizeActions.push(action);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(userActivity, obj) {
        /** @type {?} */
        const bpmnModel = userActivity.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (userActivity.variableSettings && userActivity.variableSettings.length > 0) {
            for (const v of userActivity.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component$1 && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        userActivity.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                userActivity.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component$1(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateImageSettings(userActivity, obj) {
        /** @type {?} */
        let Settings = (/** @type {?} */ (obj.propertyValue));
        if (userActivity.imageSettings) {
            userActivity.imageSettings = new ImageSettings(userActivity.Model);
        }
        if (Settings && Settings.imageOperation) {
            /** @type {?} */
            const imageSettings = new ImageSettings(userActivity.Model);
            imageSettings.imageOperation = Settings.imageOperation;
            userActivity.imageSettings = imageSettings;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    updateCheckConditions(userActivity, obj, isOperation = false) {
        /** @type {?} */
        const checkConditions = (/** @type {?} */ (obj.propertyValue));
        userActivity.checkConditions = new Array();
        for (const c of checkConditions) {
            if (c.value) {
                /** @type {?} */
                const condition = new CheckCondition(userActivity.Model);
                condition.value = c.value;
                condition.checkTime = c.checkTime;
                condition.errorTips = new Map();
                if (c.errorTips) {
                    for (let key in c.errorTips) {
                        condition.errorTips.set(key, c.errorTips[key]);
                    }
                }
                userActivity.checkConditions.push(condition);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignNodes(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            // const otherAssignNodes = new OtherAssignNodes(userActivity.Model);
            // otherAssignNodes.otherAssignActivities = new Array();
            // userActivity.otherAssignNodes = otherAssignNodes;
            userActivity.otherAssignNodes = new OtherAssignNodes(userActivity.Model);
        }
        else {
            userActivity.otherAssignNodes = null;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignActivities(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data && data.length > 0) {
            if (typeof data[0] === "string") {
                userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(userActivity.Model);
                    other.activityDefinitionId = d;
                    other.required = false;
                    other.condition = new Condition(userActivity.Model);
                    userActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            else {
                userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(userActivity.Model);
                    other.activityDefinitionId = d.activityDefinitionId;
                    other.required = d.required;
                    other.condition = new Condition(userActivity.Model);
                    other.condition.Value = d.condition.Value;
                    userActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            // userActivity.otherAssignNodes.otherAssignActivities = [...data];
        }
        else {
            userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateMessageNotices(userActivity, obj) {
        /** @type {?} */
        let notices = (/** @type {?} */ (obj.propertyValue));
        userActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(userActivity.Model);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                n.receivers = n.receivers.filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                (r) => r.type));
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(userActivity.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(userActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(userActivity.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(userActivity.Model);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                userActivity.messageNotices.push(messageNotice);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateApprovalPivotConfig(userActivity, obj) {
        /** @type {?} */
        let config = obj.propertyValue;
        /** @type {?} */
        const approvalPivotConfig = new ApprovalPivotConfig(userActivity.Model);
        approvalPivotConfig.enable = config.enable;
        approvalPivotConfig.expand = config.expand;
        approvalPivotConfig.title = config.title;
        approvalPivotConfig.approvalPivots = new Array();
        if (config.approvalPivots && config.approvalPivots.length > 0) {
            for (const a of config.approvalPivots) {
                /** @type {?} */
                const approvalPivot = new ApprovalPivot(userActivity.Model);
                approvalPivot.type = a.type;
                approvalPivot.title = a.title;
                approvalPivot.description = a.description;
                if (a.condition) {
                    /** @type {?} */
                    const condition = new Condition(userActivity.Model);
                    condition.Value = a.condition;
                    approvalPivot.condition = condition;
                }
                approvalPivotConfig.approvalPivots.push(approvalPivot);
            }
        }
        userActivity.approvalPivotConfig = approvalPivotConfig;
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateUrgeHandleRule(userActivity, obj) {
        /** @type {?} */
        const rule = obj.propertyValue;
        /** @type {?} */
        const urgeHandleRule = new UrgeHandleRule(userActivity.Model);
        urgeHandleRule.urgeHandleAble = rule.urgeHandleAble;
        urgeHandleRule.sendType = rule.sendType;
        urgeHandleRule.earlyTime = rule.earlyTime;
        urgeHandleRule.intervalTime = rule.intervalTime;
        urgeHandleRule.urgeMessageSubject = rule.urgeMessageSubject;
        urgeHandleRule.urgeMessageContent = rule.urgeMessageContent;
        urgeHandleRule.addReminder = rule.addReminder;
        urgeHandleRule.subjectEditable = rule.subjectEditable;
        urgeHandleRule.contentEditable = rule.contentEditable;
        if (rule.smsMessageTemplate) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
            smsMessageTemplate.code = rule.smsMessageTemplate.code;
            smsMessageTemplate.content = rule.smsMessageTemplate.content;
            smsMessageTemplate.smsMessageVariables = new Array();
            if (rule.smsMessageTemplate.smsMessageVariables && rule.smsMessageTemplate.smsMessageVariables.length > 0) {
                for (const v of rule.smsMessageTemplate.smsMessageVariables) {
                    /** @type {?} */
                    const variable = new SmsMessageVariable(userActivity.Model);
                    variable.code = v.code;
                    variable.value = v.value;
                    variable.tag = v.tag;
                    smsMessageTemplate.smsMessageVariables.push(variable);
                }
            }
            urgeHandleRule.smsMessageTemplate = smsMessageTemplate;
        }
        userActivity.urgeHandleRule = urgeHandleRule;
    }
    /**
     * 删除节点或参与者时，对应删除HumanResourceRoles
     * @param {?} ids
     * @return {?}
     */
    removeHumanResourceRoles(ids) {
        /** @type {?} */
        const bpmnModel = this.flowElement.Model;
        if (ids && ids.length > 0) {
            /** @type {?} */
            const userActivitys = bpmnModel.DefaultProcess.GetFlowElements();
            /** @type {?} */
            let perfIds = '';
            for (let key in userActivitys) {
                if (userActivitys[key] instanceof UserActivity) {
                    /** @type {?} */
                    const userAct = (/** @type {?} */ (userActivitys[key]));
                    if (userAct.ParticipantSchemes && userAct.ParticipantSchemes.length > 0 && userAct.ParticipantSchemes[0].Performers) {
                        perfIds += (userAct.ParticipantSchemes[0].Performers + ',');
                    }
                }
            }
            /** @type {?} */
            const removeIds = ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            id => perfIds.indexOf(id) < 0));
            removeIds.forEach((/**
             * @param {?} reId
             * @return {?}
             */
            reId => {
                bpmnModel.DefaultProcess.RemoveResourceRole(reId);
            }));
        }
    }
    /**
     * 更新审批活动扩展属性
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetExtendProperty(userActivity, obj) {
        if (userActivity) {
            /** @type {?} */
            let attributes = (/** @type {?} */ (obj.propertyValue));
            if (!userActivity.extendProperties) {
                userActivity.extendProperties = new Array();
            }
            for (const o of obj.propertyValue) {
                /** @type {?} */
                const index = userActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.key === o.code));
                if (index > -1) {
                    userActivity.extendProperties.splice(index, 1);
                }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                (a) => {
                    /** @type {?} */
                    let item = new ExtendProperty(userActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    userActivity.extendProperties.push(item);
                }));
            }
        }
    }
}
UserActivityCell.CLR_TYPE_ID = UserActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 人工操作活动节点
 */
class OperationActivityCell extends UserActivityCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = OperationActivityCell.CLR_TYPE_ID;
        this.name = "人工操作";
        this.nameLanguage = {
            "zh-CHS": "人工操作",
            "zh-CHT": "人工操作",
            "en": "Operation",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/bizActivity.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/bizActivity_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        return this.getFarrisPropConfigByIsOperation(true);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        this.updatePropsByIsOperation(obj, true);
    }
}
OperationActivityCell.CLR_TYPE_ID = OperationActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const StartActivityPropertyKeys = {
    Id: "Id",
    Name: "Name",
    NameLanguage: "NameLanguage",
    ClrTypeID: "ClrTypeID",
    /**
     * 是否允许选择目标节点
     */
    SelectTargetAble: 'SelectTargetAble',
    /**
     * 跳转范围
     */
    JumpScope: 'JumpScope',
    ExecuteForms: 'ExecuteForms',
    wf_ExecuteForms_PC: 'wf_ExecuteForms_PC',
    wf_ExecuteForms_Mobile: 'wf_ExecuteForms_Mobile',
    otherAssignNodes: 'otherAssignNodes',
    otherAssignActivities: 'otherAssignActivities',
    otherAssignActivityNodeInfos: 'OtherAssignActivityNodeInfos',
    sendBackedTask: "sendBackedTask",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 开始活动节点
 */
class StartActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = StartActivityCell.CLR_TYPE_ID;
        this.name = "开始";
        this.nameLanguage = {
            "zh-CHS": "开始",
            "zh-CHT": "開始",
            "en": "Start",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/start.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/start_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        /** @type {?} */
        const editorUi = this.editorUi;
        flowNode.Id = "startActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            // 设置默认表单
            if (editorUi && editorUi.formFormats) {
                /** @type {?} */
                const formFormats = editorUi.formFormats;
                /** @type {?} */
                const startActivityForms = new Array();
                /** @type {?} */
                const pcForm = formFormats.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.terminal === 'PC' && f.status === 1))[0];
                if (pcForm) {
                    startActivityForms.push(pcForm);
                }
                /** @type {?} */
                const mobileForm = formFormats.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.terminal === 'Mobile' && f.status === 1))[0];
                if (mobileForm) {
                    startActivityForms.push(mobileForm);
                }
                if (startActivityForms && startActivityForms.length > 0) {
                    flowNode.setDefaultForms(startActivityForms);
                }
            }
        }
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const act = (/** @type {?} */ (this.flowElement));
        /** @type {?} */
        let extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let PropertyConfig = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = new Object();
        PropertyConfig.categoryId = 'general';
        PropertyConfig.categoryName = mxResources.get('basicInformation');
        PropertyConfig.tabId = 'basic';
        PropertyConfig.tabName = mxResources.get('basicAttributes');
        PropertyConfig.properties = [
            { propertyID: StartActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: StartActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: StartActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: StartActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: StartActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let ActivityConfig = new ElementPropertyConfig();
        ActivityConfig.categoryId = 'activityConfig';
        ActivityConfig.categoryName = mxResources.get('activityProperty');
        ActivityConfig.tabId = 'basic';
        ActivityConfig.tabName = mxResources.get('basicAttributes');
        ActivityConfig.properties = [
            // { propertyID: StartActivityPropertyKeys.ExecuteForms, propertyName: mxResources.get('formDef'), propertyType: 'modal' },
            { propertyID: 'sendBackedTask', propertyName: mxResources.get('sendBackedTask'), propertyType: 'select' }
        ];
        if (act.selectTargetAble) {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
                { propertyID: StartActivityPropertyKeys.JumpScope, propertyName: mxResources.get('jumpScope'), propertyType: 'modal' }
            ]);
            propertyData.SelectTargetAble = act.selectTargetAble || false;
            propertyData.JumpScope = act.jumpScope;
        }
        else {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' }
            ]);
            propertyData.SelectTargetAble = act.selectTargetAble || false;
        }
        if (act.otherAssignNodes) {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' },
                // { propertyID: StartActivityPropertyKeys.otherAssignActivities, propertyName: mxResources.get('otherAssignActivities'), propertyType: 'modal' }
                { propertyID: StartActivityPropertyKeys.otherAssignActivityNodeInfos, propertyName: mxResources.get('otherAssignActivityNodeInfos'), propertyType: 'modal' }
            ]);
            propertyData[StartActivityPropertyKeys.otherAssignNodes] = true;
            // propertyData[StartActivityPropertyKeys.otherAssignActivities] = act.otherAssignNodes.otherAssignActivities;
            propertyData[StartActivityPropertyKeys.otherAssignActivityNodeInfos] = act.otherAssignNodes.otherAssignActivities || act.otherAssignNodes.otherAssignActivityNodeInfos;
            if (act.otherAssignNodes.otherAssignActivities) {
                act.otherAssignNodes.otherAssignActivities = null;
            }
        }
        else {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' }
            ]);
            propertyData[StartActivityPropertyKeys.otherAssignNodes] = false;
        }
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            let ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            for (const g of groupList) {
                ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
                // 取回模型上的value值给到扩展属性组件里
                if (act.extendProperties && act.extendProperties.length > 0) {
                    g.childs.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    (a, b) => {
                        return a.sortOrder - b.sortOrder;
                    })).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        act.extendProperties.forEach((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => {
                            if (e.key == d.code) {
                                d.value = e.value;
                            }
                        }));
                    }));
                }
                propertyData[g.parent.id] = g.childs;
            }
            // todo：与else分支代码重复，可提取至if语句外，本次修改仅针对名称多语，故暂不修改
            propertyData[StartActivityPropertyKeys.Id] = act.Id;
            propertyData[StartActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
            propertyData[StartActivityPropertyKeys.Name] = act.Name || mxResources.get('start');
            propertyData[StartActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
                "zh-CHS": act.Name,
            };
            propertyData[StartActivityPropertyKeys.sendBackedTask] = act.sendBackedTask;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_PC] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'PC')) : null;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_Mobile] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'MOBILE')) : null;
            return {
                propertyConfig: [PropertyConfig, formDef, ActivityConfig, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            propertyData[StartActivityPropertyKeys.Id] = act.Id;
            propertyData[StartActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
            propertyData[StartActivityPropertyKeys.Name] = act.Name || mxResources.get('start');
            propertyData[StartActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
                "zh-CHS": act.Name,
            };
            propertyData[StartActivityPropertyKeys.sendBackedTask] = act.sendBackedTask;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_PC] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'PC')) : null;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_Mobile] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'MOBILE')) : null;
            return {
                propertyConfig: [PropertyConfig, formDef, ActivityConfig],
                propertyData: propertyData
            };
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const startActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case StartActivityPropertyKeys.wf_ExecuteForms_PC:
                this.updateStartActivityForm(startActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case StartActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.updateStartActivityForm(startActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case StartActivityPropertyKeys.SelectTargetAble:
                this.resetSelectTargetAble(startActivity, obj);
                break;
            case StartActivityPropertyKeys.JumpScope:
                this.resetJumpScope(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignNodes:
                this.updateOtherAssignNodes(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignActivities:
                this.updateOtherAssignActivities(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignActivityNodeInfos:
                this.updateOtherAssignActivities(startActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === propertyId)) > -1) {
                    this.resetExtendProperty(startActivity, obj);
                }
                else {
                    super.updateProps(obj);
                }
                break;
        }
    }
    /**
     * @param {?} start
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    updateStartActivityForm(start, obj, terminal) {
        if (start) {
            /** @type {?} */
            let form = (/** @type {?} */ (obj.propertyValue));
            if (!start.ExecuteForms) {
                start.ExecuteForms = new Array();
            }
            start.ExecuteForms = start.ExecuteForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType !== terminal));
            if (form) {
                /** @type {?} */
                let params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                let actParas = new Array();
                if (params && params.length > 0) {
                    for (let para of params) {
                        /** @type {?} */
                        let actPara = new ActualParameter(start.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                /** @type {?} */
                const id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                let item = new ExecuteForm(start.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                start.ExecuteForms.push(item);
            }
        }
    }
    /**
     * 更新是否允许跳转属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetSelectTargetAble(startActivity, obj) {
        /** @type {?} */
        const selectTargetAble = (/** @type {?} */ (obj.propertyValue));
        startActivity.selectTargetAble = selectTargetAble;
        if (startActivity.selectTargetAble) {
            startActivity.jumpScope = new JumpScope(startActivity.Model);
        }
        else {
            startActivity.jumpScope = null;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetJumpScope(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            /** @type {?} */
            let jumpScope = new JumpScope(startActivity.Model);
            jumpScope.Category = data.Category;
            jumpScope.DefaultType = data.DefaultType;
            jumpScope.DefaultActivity = data.DefaultActivity;
            jumpScope.DestinationActivities = data.DestinationActivities;
            startActivity.jumpScope = jumpScope;
        }
        else {
            startActivity.jumpScope = null;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignNodes(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            // const otherAssignNodes = new OtherAssignNodes(startActivity.Model);
            // otherAssignNodes.otherAssignActivities = new Array();
            // startActivity.otherAssignNodes = otherAssignNodes;
            startActivity.otherAssignNodes = new OtherAssignNodes(startActivity.Model);
        }
        else {
            startActivity.otherAssignNodes = null;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignActivities(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data && data.length > 0) {
            if (typeof data[0] === "string") {
                startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(startActivity.Model);
                    other.activityDefinitionId = d;
                    other.required = false;
                    other.condition = new Condition(startActivity.Model);
                    startActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            else {
                // startActivity.otherAssignNodes.otherAssignActivityNodeInfos = [...data];  
                startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(startActivity.Model);
                    other.activityDefinitionId = d.activityDefinitionId;
                    other.required = d.required;
                    other.condition = new Condition(startActivity.Model);
                    other.condition.Value = d.condition.Value;
                    startActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
        }
        else {
            startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
        }
    }
    /**
     * 更新开始节点扩展属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetExtendProperty(startActivity, obj) {
        if (startActivity) {
            /** @type {?} */
            let attributes = (/** @type {?} */ (obj.propertyValue));
            if (!startActivity.extendProperties) {
                startActivity.extendProperties = new Array();
            }
            for (const o of obj.propertyValue) {
                /** @type {?} */
                const index = startActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.key === o.code));
                if (index > -1) {
                    startActivity.extendProperties.splice(index, 1);
                }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                (a) => {
                    /** @type {?} */
                    let item = new ExtendProperty(startActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    startActivity.extendProperties.push(item);
                }));
            }
        }
    }
}
StartActivityCell.CLR_TYPE_ID = StartActivity.Clr_Type_ID;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 并行事件节点，增加状态图片信息
 */
class WfParallelGatewayCell extends ParallelGatewayCell {
    constructor() {
        super(...arguments);
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/ParallelGateway.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/ParallelGateway_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "ParallelGateway" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 结束事件节点，增加状态图片信息
 */
class WfEndEventCell extends EndEventCell {
    constructor() {
        super(...arguments);
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/end.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/end_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "EndEvent" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 排他网关节点，增加状态图片信息
 */
class WfInclusiveGatewayCell extends InclusiveGatewayCell {
    constructor() {
        super(...arguments);
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/InclusiveGateway.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/InclusiveGateway_select.png",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "InclusiveGateway" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BatchSetPropertiesComponent {
    /**
     * @param {?} uistate
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} viewModel
     */
    constructor(uistate, localeId, resources, localePipe, resolver, injector, modalService, viewModel) {
        this.uistate = uistate;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.viewModel = viewModel;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.submit = new Subject();
        this.cancel = new Subject();
        this.cols = [
            { title: this.localePipe.transform('component.batchSet.name'), field: 'Name', width: 60, searchField: 'Name' },
            { title: 'ID', field: 'Id', width: 90, searchField: 'Id' }
        ];
        this.useractivities = [];
        this.useroperationnotifyactivities = [];
        this.useroperationsubcatchactivities = [];
        this.actis1 = [];
        this.actis2 = [];
        this.actis3 = [];
        this.actis4 = [];
        this.actis5 = [];
        this.addSignFrontActis = [];
        this.addSignBehindActis = [];
        this.transferActis = [];
        this.notifyActis = [];
        this.backWardRuleActis = [];
        this.nullActis = [];
        this.addSignFrontEnable = false;
        this.addSignBehindEnable = false;
        this.transferEnable = false;
        this.notifyEnable = false;
        this.backWardRuleEnable = false;
        this.backWardRule = {};
        this.addSignFrontScope = {};
        this.addSignBehindScope = {};
        this.transferScope = {};
        this.notifyScope = {};
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.frontActisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.addSignFrontActis = rowData;
            return of$1({
                closeDialog: true
            });
        });
        this.behindActisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.addSignBehindActis = rowData;
            return of$1({
                closeDialog: true
            });
        });
        this.notifyActisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.notifyActis = rowData;
            return of$1({
                closeDialog: true
            });
        });
        this.transferActisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.transferActis = rowData;
            return of$1({
                closeDialog: true
            });
        });
        this.backWardRuleActisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            this.backWardRuleActis = rowData;
            return of$1({
                closeDialog: true
            });
        });
        this.actisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            return of$1({
                closeDialog: true
            });
        });
        // 过滤只有审批节点的
        this.useractivities = this.uistate.userActList.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.ClrTypeID === UserActivity.Clr_Type_ID;
        }));
        // 拼接审批+人工+知会
        this.useroperationnotifyactivities = [...this.uistate.userActList, ...this.uistate.NotifyActKist];
        // 拼接审批人工子流程信号捕获
        this.useroperationsubcatchactivities = [...this.uistate.userActList, ...this.uistate.SubAndCatchActList];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const addSignFront = this.activityModel.dynamicParticipants.filter((/**
         * @param {?} participant
         * @return {?}
         */
        function (participant) {
            return participant.actionScope === "AddSignFront";
        }));
        /** @type {?} */
        const addSignBehind = this.activityModel.dynamicParticipants.filter((/**
         * @param {?} participant
         * @return {?}
         */
        function (participant) {
            return participant.actionScope === "AddSignBehind";
        }));
        /** @type {?} */
        const transfer = this.activityModel.dynamicParticipants.filter((/**
         * @param {?} participant
         * @return {?}
         */
        function (participant) {
            return participant.actionScope === "Transfer";
        }));
        /** @type {?} */
        const notify = this.activityModel.dynamicParticipants.filter((/**
         * @param {?} participant
         * @return {?}
         */
        function (participant) {
            return participant.actionScope === "Notify";
        }));
        if (!addSignFront[0] || addSignFront[0].organizationLevel) {
            this.addSignFrontScope = {
                enable: this.activityModel.AddSignFrontAble,
                action: "AddSignFront",
                scope: addSignFront[0]
            };
        }
        else {
            /** @type {?} */
            let scope = new OrganizationPotentialOwner();
            /** @type {?} */
            let participant = new ParticipantInfo();
            participant.potentialOwnerList = addSignFront;
            participant.isAllScope = true; //反的
            scope.participantInfo = participant;
            this.addSignFrontScope = {
                enable: this.activityModel.AddSignFrontAble,
                action: "AddSignFront",
                scope: scope
            };
        }
        if (!addSignBehind[0] || addSignBehind[0].organizationLevel) {
            this.addSignBehindScope = {
                enable: this.activityModel.AddSignBehindAble,
                action: "AddSignBehind",
                scope: addSignBehind[0]
            };
        }
        else {
            /** @type {?} */
            let scope = new OrganizationPotentialOwner();
            /** @type {?} */
            let participant = new ParticipantInfo();
            participant.potentialOwnerList = addSignBehind;
            participant.isAllScope = true; //反的
            scope.participantInfo = participant;
            this.addSignBehindScope = {
                enable: this.activityModel.AddSignBehindAble,
                action: "AddSignBehind",
                scope: scope
            };
        }
        if (!transfer[0] || transfer[0].organizationLevel) {
            this.transferScope = {
                enable: this.activityModel.transferAble,
                action: "Transfer",
                scope: transfer[0]
            };
        }
        else {
            /** @type {?} */
            let scope = new OrganizationPotentialOwner();
            /** @type {?} */
            let participant = new ParticipantInfo();
            participant.potentialOwnerList = transfer;
            participant.isAllScope = true; //反的
            scope.participantInfo = participant;
            this.transferScope = {
                enable: this.activityModel.transferAble,
                action: "Transfer",
                scope: scope
            };
        }
        if (!notify[0] || notify[0].organizationLevel) {
            this.notifyScope = {
                enable: this.activityModel.NotifyAble,
                action: "Notify",
                scope: notify[0]
            };
        }
        else {
            /** @type {?} */
            let scope = new OrganizationPotentialOwner();
            /** @type {?} */
            let participant = new ParticipantInfo();
            participant.potentialOwnerList = notify;
            participant.isAllScope = true; //反的
            scope.participantInfo = participant;
            this.notifyScope = {
                enable: this.activityModel.NotifyAble,
                action: "Notify",
                scope: scope
            };
        }
        this.backWardRule = this.activityModel.BackWardRule;
    }
    // addSignFrontConfig() {
    //   const compFactory = this.resolver.resolveComponentFactory(OrganizationPotentialOwnerComponent);
    //   const compRef = compFactory.create(this.injector);
    //   compRef.instance.action = ActionScope.AddSignFront
    //   const orgModalConfig = {
    //     title: this.localePipe.transform('component.orgPotentialOwner.optionSettings'),
    //     width: 517,
    //     height: 382,
    //     showButtons: true,
    //     buttons: compRef.instance.modalFooter
    //   };
    //   const dialog = this.modalService.show(compRef, orgModalConfig);
    //   compRef.instance.closeModal.subscribe($event => dialog.close());
    //   compRef.instance.submitModal.subscribe((data: any) => {
    //     this.addSignFrontScope = data.value;
    //     this.frontPlaceholder = '（已设置）'
    //     dialog.close();
    //   });
    // }
    // addSignBehindConfig() {
    //   const compFactory = this.resolver.resolveComponentFactory(OrganizationPotentialOwnerComponent);
    //   const compRef = compFactory.create(this.injector);
    //   compRef.instance.action = ActionScope.AddSignBehind
    //   const orgModalConfig = {
    //     title: this.localePipe.transform('component.orgPotentialOwner.optionSettings'),
    //     width: 517,
    //     height: 382,
    //     showButtons: true,
    //     buttons: compRef.instance.modalFooter
    //   };
    //   const dialog = this.modalService.show(compRef, orgModalConfig); compRef.instance.closeModal.subscribe($event => dialog.close());
    //   compRef.instance.submitModal.subscribe((data: any) => {
    //     this.addSignBehindScope = data.value;
    //     this.behindPlaceholder = '（已设置）'
    //     dialog.close();
    //   });
    // }
    // transferConfig() {
    //   const compFactory = this.resolver.resolveComponentFactory(OrganizationPotentialOwnerComponent);
    //   const compRef = compFactory.create(this.injector);
    //   compRef.instance.action = ActionScope.Transfer
    //   const orgModalConfig = {
    //     title: this.localePipe.transform('component.orgPotentialOwner.optionSettings'),
    //     width: 517,
    //     height: 382,
    //     showButtons: true,
    //     buttons: compRef.instance.modalFooter
    //   };
    //   const dialog = this.modalService.show(compRef, orgModalConfig); compRef.instance.closeModal.subscribe($event => dialog.close());
    //   compRef.instance.submitModal.subscribe((data: any) => {
    //     this.transferScope = data.value;
    //     this.transferPlaceholder = '（已设置）'
    //     dialog.close();
    //   });
    // }
    // notifyConfig() {
    //   const compFactory = this.resolver.resolveComponentFactory(OrganizationPotentialOwnerComponent);
    //   const compRef = compFactory.create(this.injector);
    //   compRef.instance.action = ActionScope.Notify
    //   const orgModalConfig = {
    //     title: this.localePipe.transform('component.orgPotentialOwner.optionSettings'),
    //     width: 517,
    //     height: 382,
    //     showButtons: true,
    //     buttons: compRef.instance.modalFooter
    //   };
    //   const dialog = this.modalService.show(compRef, orgModalConfig);
    //   compRef.instance.closeModal.subscribe($event => dialog.close());
    //   compRef.instance.submitModal.subscribe((data: any) => {
    //     this.notifyScope = data.value;
    //     this.notifyPlaceholder = '（已设置）'
    //     dialog.close();
    //   });
    // }
    // backWardRuleConfig() {
    //   const compFactory = this.resolver.resolveComponentFactory(BackwardRuleComponent);
    //   const compRef = compFactory.create(this.injector);
    //   compRef.instance.editorParams.nodeType = 'UserActivity';
    //   const modalConfig = {
    //     title: this.localePipe.transform('component.backwardRule.backwardRule'),
    //     width: 760,
    //     height: 505,
    //     buttons: compRef.instance.modalFooter
    //   };
    //   const dialog = this.modalService.show(compRef, modalConfig);
    //   compRef.instance.closeModal.subscribe($event => dialog.close());
    //   compRef.instance.submitModal.subscribe((data: any) => {
    //     this.backWardRule = data.value;
    //     this.backWardPlaceholder = '（已设置）'
    //     dialog.close();
    //   });
    // }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const value = [];
        if (this.addSignFrontEnable) {
            /** @type {?} */
            const frontData = {
                type: 'addSignfront',
                actis: this.addSignFrontActis,
                config: this.addSignFrontScope
            };
            value.push(frontData);
        }
        if (this.addSignBehindEnable) {
            /** @type {?} */
            const behindData = {
                type: 'addSignBehind',
                actis: this.addSignFrontActis,
                config: this.addSignBehindScope
            };
            value.push(behindData);
        }
        if (this.transferEnable) {
            /** @type {?} */
            const transferData = {
                type: 'transfer',
                actis: this.addSignFrontActis,
                config: this.transferScope
            };
            value.push(transferData);
        }
        if (this.notifyEnable) {
            /** @type {?} */
            const notifyData = {
                type: 'notify',
                actis: this.addSignFrontActis,
                config: this.notifyScope
            };
            value.push(notifyData);
        }
        if (this.backWardRuleEnable) {
            /** @type {?} */
            const backWardRuleData = {
                type: 'backWardRule',
                actis: this.addSignFrontActis,
                config: this.backWardRule
            };
            value.push(backWardRuleData);
        }
        if (value && value.length > 0) {
            this.batchSet(value);
        }
        this.submit.next();
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    batchSet(value) {
        this.viewModel.batchSet(ResourceKeys$1.batchSetProperty, value);
    }
}
BatchSetPropertiesComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-batch-set-properties',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\"\r\n    style=\"overflow:scroll;border-radius:10px;border: 1.5px solid #F1F3F7;\">\r\n    <div class=\"f-form-layout farris-form mx-3\">\r\n      <fieldset class=\"f-section-formgroup\">\r\n        <div class=\"f-section-formgroup-inputs\">\r\n          <div class=\"col-12 mt-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.batchSet.targetNode' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-lookup-grid #addSignFrontActisDialog [items]=\"useractivities\" [columns]=\"cols\"\r\n                    [resizable]=\"true\" [singleSelect]=\"false\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"actis1\"\r\n                    [valueField]=\"'Id'\" [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\" name=\"addSignFrontActis\"\r\n                    [pageSize]=\"pageInfo.pageSize\" [pageList]=\"pageInfo.pageList\" [total]=\"total\" [enableClear]=\"false\"\r\n                    title=\"{{'component.batchSet.targetNode'|wfLocale}}\" [displayType]=\"'List'\"\r\n                    [remoteSearch]='false' [enableToSelect]=\"false\"\r\n                    placeholder=\"{{'component.messageNoticeEdit.placeholder'|wfLocale}}\" [dictPicked]=\"frontActisSelect\"\r\n                    [nosearch]=\"true\" [showFilterBar]=\"false\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </fieldset>\r\n</div>\r\n<!-- \u5F81\u8BE2 -->\r\n  <div class=\"f-form-layout farris-form mx-3\">\r\n    <fieldset class=\"f-section-formgroup\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"farris-form form-inline farris-form-inline col-12\">\r\n          <div class=\"farris-group-auto\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-3 col-form-label\" style=\"padding-right: 79px;padding-left: 0px;\">\r\n                <span class=\"farris-label-text\">{{'component.batchSet.addSignFront' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"col-9 col-form-label\">\r\n                <farris-switch [(ngModel)]=\"addSignFrontEnable\" name=\"addSignFrontEnable\"></farris-switch>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  </div>\r\n<!-- \u52A0\u7B7E -->\r\n  <div class=\"f-form-layout farris-form mx-3\">\r\n    <fieldset class=\"f-section-formgroup\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"farris-form form-inline farris-form-inline col-12\">\r\n          <div class=\"farris-group-auto\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-3 col-form-label\" style=\"padding-right: 79px;padding-left: 0px;\">\r\n                <span class=\"farris-label-text\">{{'component.batchSet.addSignBehind' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"col-9 col-form-label\">\r\n                <farris-switch [(ngModel)]=\"addSignBehindEnable\" name=\"addSignBehindEnable\"></farris-switch>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  </div>\r\n  <div class=\"f-form-layout farris-form mx-3\">\r\n    <fieldset class=\"f-section-formgroup\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"farris-form form-inline farris-form-inline col-12\">\r\n          <div class=\"farris-group-auto\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-3 col-form-label\" style=\"padding-right: 79px;padding-left: 0px;\">\r\n                <span class=\"farris-label-text\">{{'component.batchSet.transfer' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"col-9 col-form-label\">\r\n                <farris-switch [(ngModel)]=\"transferEnable\" name=\"transferEnable\"></farris-switch>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  </div>\r\n  <div class=\"f-form-layout farris-form mx-3\">\r\n    <fieldset class=\"f-section-formgroup\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"farris-form form-inline farris-form-inline col-12\">\r\n          <div class=\"farris-group-auto\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-3 col-form-label\" style=\"padding-right: 79px;padding-left: 0px;\">\r\n                <span class=\"farris-label-text\">{{'component.batchSet.notify' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"col-9 col-form-label\">\r\n                <farris-switch [(ngModel)]=\"notifyEnable\" name=\"notifyEnable\"></farris-switch>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  </div>\r\n  <div class=\"f-form-layout farris-form mx-3\">\r\n    <fieldset class=\"f-section-formgroup\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"farris-form form-inline farris-form-inline col-12\">\r\n          <div class=\"farris-group-auto\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <label class=\"col-3 col-form-label\" style=\"padding-right: 54px;padding-left: 0px;\">\r\n                <span class=\"farris-label-text\">{{'component.batchSet.backWardRule' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"col-9 col-form-label\">\r\n                <farris-switch [(ngModel)]=\"backWardRuleEnable\" name=\"backWardRuleEnable\"></farris-switch>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </fieldset>\r\n  </div>\r\n</section>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.note.clickCancel' |\r\n    wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.note.clickOK' |\r\n    wfLocale}}</button>\r\n</ng-template>",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
BatchSetPropertiesComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ProcessDesignerViewModel }
];
BatchSetPropertiesComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
/** @enum {string} */
const ResourceKeys$1 = {
    batchSetProperty: 'batchSetProperty',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfEditorUi extends EditorUi {
    /**
     * @param {?} time
     * @param {?} action
     * @param {?=} container
     * @param {?=} injector
     * @param {?=} modalService
     * @param {?=} resolver
     * @param {?=} eventSource
     * @param {?=} importLinks
     */
    constructor(time, action, container, injector, modalService, resolver, eventSource, importLinks = true) {
        super(container, eventSource, importLinks);
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.generalConfig = {
            enableTransfer: true,
            enableNotify: false,
            enableAddSignBehind: false,
            enableAddSignFront: false,
        };
        /** @type {?} */
        let rootPath = '';
        try {
            rootPath = ((/** @type {?} */ (window))).gspframeworkService.common.getBasePath.get();
        }
        catch (error) {
        }
        mxResources.add(rootPath + "/platform/runtime/common/web/@gsp-wf/wf-process-editor/resources/wf-process-editor");
        this.showToolbar = false;
        this.time = time;
        this.action = action;
    }
    /**
     * @return {?}
     */
    createActions() {
        /** @type {?} */
        const actions = super.createActions();
        // 只有设计时编辑状态下才启用删除动作
        if (!(this.action === 'edit' && this.time !== 'rt')) {
            /** @type {?} */
            const deleteAction = actions.getAction(ActionKeys.pmf_delete);
            deleteAction.isEnabled = (/**
             * @return {?}
             */
            () => false);
        }
        return actions;
    }
    /**
     * @return {?}
     */
    createToolbox() {
        /** @type {?} */
        const toolbox = super.createToolbox();
        /** @type {?} */
        const g1 = new ToolboxGroup();
        g1.name = mxResources.get('basicElements');
        g1.items.push(new ToolboxItem(StartActivityCell.CLR_TYPE_ID), new ToolboxItem(WfExclusiveGatewayCell.CLR_TYPE_ID), new ToolboxItem(WfParallelGatewayCell.CLR_TYPE_ID), 
        // 暂时隐藏包容网关
        new ToolboxItem(WfInclusiveGatewayCell.CLR_TYPE_ID), new ToolboxItem(UserActivityCell.CLR_TYPE_ID), new ToolboxItem(OperationActivityCell.CLR_TYPE_ID), new ToolboxItem(NotifyActivityCell.CLR_TYPE_ID), new ToolboxItem(CallActivitySubProcessCell.CLR_TYPE_ID), new ToolboxItem(AutoActivityCell.CLR_TYPE_ID), new ToolboxItem(IntermediateCatchEventImplCell.CLR_TYPE_ID), new ToolboxItem(MessageActivityCell.CLR_TYPE_ID), new ToolboxItem(AifCreationBillActivityCell.CLR_TYPE_ID), new ToolboxItem(WfEndEventCell.CLR_TYPE_ID));
        toolbox.groups = [g1];
        return toolbox;
    }
    /**
     * @return {?}
     */
    createGraphInstance() {
        /** @type {?} */
        const graph = new WfGraph(this, this.diagramContainer);
        if (this.action === 'view' || this.time === 'rt' || this.action === 'assignView') {
            graph.setCellsLocked(true);
        }
        else {
            graph.setDropEnabled(true);
            graph.setConnectable(true);
        }
        //TODO：右键查看只显示在审批节点上
        graph.popupMenuHandler.autoExpand = true;
        graph.popupMenuHandler.factoryMethod = (/**
         * @param {?} menu
         * @param {?} cell
         * @param {?} evt
         * @return {?}
         */
        (menu, cell, evt) => {
            /** @type {?} */
            const actList = graph.getChildCells(graph.getDefaultParent());
            if (cell != null
                && cell.clrTypeId.indexOf('wf.UserActivity') > -1
                && actList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === cell.getId())) > -1) {
                menu.addItem('批量复制属性', null, (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const compFactory = this.resolver.resolveComponentFactory(BatchSetPropertiesComponent);
                    /** @type {?} */
                    const compRef = compFactory.create(this.injector);
                    compRef.instance.activityModel = cell.flowElement;
                    /** @type {?} */
                    const modalConfig = {
                        title: '批量复制属性',
                        width: 512,
                        height: 465,
                        showButtons: true,
                        buttons: compRef.instance.footer
                    };
                    /** @type {?} */
                    const dialog = this.modalService.show(compRef, modalConfig);
                    compRef.instance.cancel.subscribe((/**
                     * @param {?} $event
                     * @return {?}
                     */
                    $event => dialog.close()));
                    compRef.instance.submit.subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        dialog.close();
                    }));
                }));
            }
        });
        return graph;
    }
    /**
     * @return {?}
     */
    createSidebar() {
        return new WfSidebar(this, this.sidebarContainer);
    }
    /**
     * @return {?}
     */
    show() {
        super.show();
        if (this.action === 'view' || this.action === 'assignView') {
            /** @type {?} */
            const span = this.createSpan('');
            span.style.fontSize = '14px';
            span.style.color = 'white';
            span.style.borderRadius = '20px';
            span.style.padding = '4px 20px';
            span.style.background = 'rgb(199, 194, 187)';
            /** @type {?} */
            const v = document.createTextNode(mxResources.get('readOnly'));
            span.appendChild(v);
            /** @type {?} */
            const d = this.createDiv('');
            d.style.position = 'absolute';
            d.style.top = '10px';
            d.style.right = '10px';
            d.style.zIndex = "2";
            d.appendChild(span);
            this.container.appendChild(d);
        }
        /** @type {?} */
        const buttonIn = document.createElement('a');
        buttonIn.setAttribute('href', 'javascript:void(0);');
        /** @type {?} */
        let buttonInImg = document.createElement('img');
        buttonIn.style.marginRight = '10px';
        buttonInImg.src = WfConstants.IMAGE_PATH + '/zoomIn.svg';
        buttonInImg.style.display = "inline-block";
        buttonInImg.style.verticalAlign = "middle";
        buttonIn.appendChild(buttonInImg);
        mxEvent.addListener(buttonIn, 'click', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.actions.getAction(ActionKeys.pmf_zoomIn).execute(evt);
        }));
        /** @type {?} */
        const buttonOut = document.createElement('a');
        buttonOut.setAttribute('href', 'javascript:void(0);');
        /** @type {?} */
        let buttonOutImg = document.createElement('img');
        buttonOutImg.src = WfConstants.IMAGE_PATH + '/zoomOut.svg';
        buttonOutImg.style.display = "inline-block";
        buttonOutImg.style.verticalAlign = "middle";
        buttonOut.appendChild(buttonOutImg);
        mxEvent.addListener(buttonOut, 'click', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.actions.getAction(ActionKeys.pmf_zoomOut).execute(evt);
        }));
        /** @type {?} */
        const zoomBar = this.createDiv('zoomBar');
        zoomBar.style.position = 'absolute';
        zoomBar.style.zIndex = "2";
        /** @type {?} */
        let t = 10;
        if (this.showMenubar) {
            t += this.menubarHeight;
        }
        if (this.showToolbar) {
            t += this.toolbarHeight;
        }
        zoomBar.style.top = t + 'px';
        zoomBar.style.left = (this.showSidebar ? this.sidebarSplitPosition + this.sidebarSplitSize : 0) + 10 + "px";
        zoomBar.appendChild(buttonIn);
        zoomBar.appendChild(buttonOut);
        this.container.appendChild(zoomBar);
        this.zoomBar = zoomBar;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    sidebarSplitOnChange(value) {
        super.sidebarSplitOnChange(value);
        // 分割条移动后更新缩放条位置
        if (this.zoomBar) {
            this.zoomBar.style.left = (this.showSidebar ? this.sidebarSplitPosition + this.sidebarSplitSize : 0) + 10 + "px";
        }
    }
    /**
     * 创建带指定样式类的span
     * @param {?} classname
     * @return {?}
     */
    createSpan(classname) {
        /** @type {?} */
        let elt = document.createElement('span');
        elt.className = classname;
        return elt;
    }
    /**
     * 加载业务活动
     * @param {?} bizActivities
     * @return {?}
     */
    loadBizActivities(bizActivities) {
        this.sidebar && this.sidebar.addBizActPalette(bizActivities);
    }
    /**
     * 批量复制属性
     * @param {?} obj
     * @return {?}
     */
    batchCopyProperty(obj) {
        // 放弃不需要的参数
        /** @type {?} */
        const ids = obj.value.targetNodeID;
        obj.propertyValue = obj.value.messageNotice;
        // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
        obj.propertyID = UserActivityPropertyKeys.messageNotice;
        for (const id of ids) {
            /** @type {?} */
            const cell = this.graph.getCellByFlowElementId(id);
            if (cell) {
                cell.updateProps(obj);
                this.graph.refresh();
            }
        }
    }
    /**
     * 批量设置属性
     * @param {?} obj
     * @return {?}
     */
    batchSetProperty(obj) {
        for (const v of obj) {
            switch (v.type) {
                case 'addSignfront':
                    /** @type {?} */
                    const afId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.AddSignFrontAble;
                    for (const id of afId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                case 'addSignBehind':
                    /** @type {?} */
                    const abId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.AddSignBehindAble;
                    for (const id of abId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                case 'transfer':
                    /** @type {?} */
                    const trId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.transferScope;
                    for (const id of trId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                case 'notify':
                    /** @type {?} */
                    const ntId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.NotifyAble;
                    for (const id of ntId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
                // 驳回规则需要特殊处理：子流程和信号的赋简版
                case 'backWardRule':
                    /** @type {?} */
                    const bwId = v.actis;
                    obj.propertyValue = v.config;
                    obj.propertyID = UserActivityPropertyKeys.BackWardRule;
                    for (const id of bwId) {
                        /** @type {?} */
                        const cell = this.graph.getCellByFlowElementId(id.Id);
                        if (cell) {
                            cell.updateProps(obj);
                            this.graph.refresh();
                        }
                    }
                    break;
            }
        }
    }
    /**
     * 创建新流程
     * @param {?} newProcInfo
     * @param {?=} bizCmps
     * @return {?}
     */
    createBpmnModel(newProcInfo, bizCmps) {
        this.graph.createBpmnModelWithProcInfo(newProcInfo, bizCmps);
    }
    /**
     * 打开流程
     * @param {?} content
     * @return {?}
     */
    openBpmnModel(content) {
        this.graph.loadBpmnModel(content);
    }
    /**
     * 获取属性配置，刷新属性框
     * @param {?} obj
     * @return {?}
     */
    refreshProperty(obj) {
        /** @type {?} */
        const cell = this.graph.getCellByFlowElementId(obj.Id);
        return this.getFarrisPropConfig([cell]);
    }
    /**
     * 获取用户活动
     * @return {?}
     */
    getActivities() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === UserActivity.Clr_Type_ID
                || flowElt.ClrTypeID === OperationActivity.Clr_Type_ID) {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取结束事件
     * @return {?}
     */
    getEndEvents() {
        /** @type {?} */
        const userActArray = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'bpmn.EndEvent' || flowElt.ClrTypeID === UserActivity.Clr_Type_ID
                || flowElt.ClrTypeID === OperationActivity.Clr_Type_ID) {
                userActArray.push(flowElt);
            }
        }));
        return userActArray;
    }
    /**
     * 获取知会事件
     * @return {?}
     */
    getNotifyEvents() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'wf.NotifyActivity') {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取消息事件
     * @return {?}
     */
    getMessageEvents() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'bpmn.MessageEvent') {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取子流程和信号捕获节点
     * @return {?}
     */
    getSubAndCatchEvents() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const flowDict = bpmnModel.DefaultProcess.GetFlowElements();
        Object.keys(flowDict).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const flowElt = flowDict[key];
            if (flowElt.ClrTypeID === 'wf.CallActivitySubProcess' ||
                flowElt.ClrTypeID === 'wf.IntermediateCatchEventImpl') {
                list.push(flowElt);
            }
        }));
        return list;
    }
    /**
     * 获取启动方式
     * @return {?}
     */
    getStartMode() {
        /** @type {?} */
        let startMode = null;
        /** @type {?} */
        const bpmnModel = this.graph.bpmnModel;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (extendElements.length > 0) {
            for (const e of extendElements) {
                if (e instanceof ProcessHeader) {
                    startMode = e.startMode;
                }
            }
        }
        return startMode;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfValidatorAdapter {
    constructor() {
    }
    /**
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    static validator(bpmnModel, scene) {
        // 校验节点标识是否合规
        /** @type {?} */
        const resActList = this.validateActivityList(bpmnModel);
        if (!resActList.valid) {
            return resActList;
        }
        // 校验流程变量
        /** @type {?} */
        const resProcVars = this.validatePrcoessVaris(bpmnModel);
        if (!resProcVars.valid) {
            return resProcVars;
        }
        /** @type {?} */
        const warningList = this.warningValidator(bpmnModel, scene);
        return {
            valid: true,
            warningList: warningList,
        };
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @return {?}
     */
    static warningValidator(bpmnModel, scene) {
        /** @type {?} */
        let warningList = new Array();
        // 校验并行网关是否成对出现
        this.validateParallelGateway(bpmnModel, warningList);
        // 校验流程构件
        this.validateProcCmps(bpmnModel, scene, warningList);
        // 校验审批活动、人工操作参与者
        this.validateApprovalPerformers(bpmnModel, warningList);
        return warningList;
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} scene
     * @param {?} warningList
     * @return {?}
     */
    static validateProcCmps(bpmnModel, scene, warningList) {
        if (scene === 'inSuite') {
            return;
        }
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        /** @type {?} */
        const processHeader = extendElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof ProcessHeader));
        if (!processHeader) {
            console.error(this.localePipe.instant('validate.noProcessHeader'));
            return;
        }
        /** @type {?} */
        const procCmps = extendElements.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof Component$1));
        if (!procCmps || procCmps.length === 0) {
            /** @type {?} */
            const tip = {
                id: 'lackCmp',
                title: this.localePipe.instant('validate.cmpsEmpty'),
                msg: this.localePipe.instant('validate.cmpsEmptyMsg'),
                type: 'processWarning'
            };
            warningList.push(tip);
            return;
        }
        // 启用方式为直接方式时
        if (((/** @type {?} */ (processHeader))).startMode === StartMode.DIRECT) {
            // 直接启用方式时不允许存在共享的构件
            /** @type {?} */
            const pfCmps = procCmps.filter((/**
             * @param {?} p
             * @return {?}
             */
            (p) => WfDesignerUtils.isPfComponent(p.MetadataId)));
            if (pfCmps && pfCmps.length > 0) {
                /** @type {?} */
                let pfCmpsName = '';
                for (const cmp of pfCmps) {
                    pfCmpsName = pfCmpsName.concat(`${((/** @type {?} */ (cmp))).Name}, `);
                }
                pfCmpsName = pfCmpsName.slice(0, pfCmpsName.length - 1);
                /** @type {?} */
                const tip = {
                    id: 'directProcessWithPFCmp',
                    title: this.localePipe.instant('validate.directNoPf'),
                    msg: this.localePipe.instant('validate.directNoPfMsg') + `${pfCmpsName} `,
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === ToolTime.LOADDATA))) {
                /** @type {?} */
                const tip = {
                    id: 'lackLoadDataCmp',
                    title: this.localePipe.instant('validate.noLoadDataCmp'),
                    msg: this.localePipe.instant('validate.noLoadDataCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === ToolTime.PROCESSINSTANCE_STARTED))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessStartCmp',
                    title: this.localePipe.instant('validate.noStartCmp'),
                    msg: this.localePipe.instant('validate.noStartCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === ToolTime.PROCESSINSTANCE_COMPLETED))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessCompleteCmp',
                    title: this.localePipe.instant('validate.lackProcessCompleteCmp'),
                    msg: this.localePipe.instant('validate.lackProcessCompleteCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => ((/** @type {?} */ (c.Time))) === 'PROCESSINSTANCE_ABORTED'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessAbortCmp',
                    title: this.localePipe.instant('validate.lackProcessAbortCmp'),
                    msg: this.localePipe.instant('validate.lackProcessAbortCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === 'PROCESSINSTANCE_CANCELED'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessCancelCmp',
                    title: this.localePipe.instant('validate.lackProcessCancelCmp'),
                    msg: this.localePipe.instant('validate.lackProcessCancelCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === 'PROCESSINSTANCE_ROLLBACK'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessBackCmp',
                    title: this.localePipe.instant('validate.lackProcessBackCmp'),
                    msg: this.localePipe.instant('validate.lackProcessBackCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
            if (!procCmps.some((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.Time === 'PROCESSINSTANCE_RESUBMIT'))) {
                /** @type {?} */
                const tip = {
                    id: 'lackProcessReStartCmp',
                    title: this.localePipe.instant('validate.lackProcessReStartCmp'),
                    msg: this.localePipe.instant('validate.lackProcessReStartCmpMsg'),
                    type: 'processWarning'
                };
                warningList.push(tip);
            }
        }
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    static validateParallelGateway(bpmnModel, warningList) {
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        let parallelGatewayCount = 0;
        for (const k in flowElements) {
            if (flowElements[k] instanceof ParallelGateway) {
                parallelGatewayCount++;
            }
        }
        if (parallelGatewayCount % 2 !== 0) {
            /** @type {?} */
            const tip = {
                id: 'parallelGatewayCheck',
                title: this.localePipe.instant('validate.parallelGatewayCheck'),
                msg: this.localePipe.instant('validate.parallelGatewayCheckMsg'),
                type: 'processWarning'
            };
            warningList.push(tip);
        }
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @param {?} warningList
     * @return {?}
     */
    static validateApprovalPerformers(bpmnModel, warningList) {
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        let count = 0;
        for (const k in flowElements) {
            /** @type {?} */
            const act = flowElements[k];
            if (act instanceof UserActivity || act instanceof OperationActivity) {
                /** @type {?} */
                const roles = act.GetResourceRoles();
                if (roles.length == 0 && (!act.AssignPerformerConfig || !act.AssignPerformerConfig.AllowGlobalAssign)) {
                    /** @type {?} */
                    const tip = {
                        id: 'approvalPerformerCheck' + count,
                        title: `【${flowElements[k].Name}】` + this.localePipe.instant('validate.approvalPerformerCheck'),
                        msg: ``,
                        type: 'processWarning'
                    };
                    warningList.push(tip);
                    count++;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    static validatePrcoessVaris(bpmnModel) {
        /** @type {?} */
        const objects = bpmnModel.DefaultProcess.GetDataObjects();
        /** @type {?} */
        let procVaris = new Array();
        if (objects && objects.length > 0) {
            procVaris = objects.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o.DataType.Category !== 'CustomType')).map((/**
             * @param {?} o
             * @return {?}
             */
            o => o.Name));
        }
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        for (const k in flowElements) {
            if (flowElements[k] instanceof UserActivity ||
                flowElements[k] instanceof OperationActivity ||
                flowElements[k] instanceof AutoActivity ||
                flowElements[k] instanceof MessageActivity ||
                flowElements[k] instanceof CallActivitySubProcess ||
                flowElements[k] instanceof IntermediateCatchEventImpl ||
                flowElements[k] instanceof NotifyActivity) {
                /** @type {?} */
                const variSets = ((/** @type {?} */ (flowElements[k]))).variableSettings;
                if (variSets) {
                    for (const v of variSets) {
                        if (!procVaris.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p === v.variableCode))) {
                            return {
                                valid: false,
                                type: 'message',
                                level: 'warning',
                                message: `【${flowElements[k].Name}】` + this.localePipe.instant('validate.noVariable1')
                                    + `【${v.variableName}】` + this.localePipe.instant('validate.noVariable2')
                            };
                        }
                    }
                }
            }
        }
        return {
            valid: true,
        };
    }
    /**
     * @private
     * @param {?} bpmnModel
     * @return {?}
     */
    static validateActivityList(bpmnModel) {
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        /** @type {?} */
        const resActId = this.validateActivityId(flowElements);
        if (!resActId.valid) {
            return resActId;
        }
        /** @type {?} */
        const resActName = this.validateActivityName(flowElements);
        if (!resActName.valid) {
            return resActName;
        }
        return {
            valid: true,
        };
    }
    /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    static validateActivityId(flowElements) {
        for (const k in flowElements) {
            switch (flowElements[k].ClrTypeID) {
                case 'wf.StartActivity':
                    /** @type {?} */
                    const startActivity = (/** @type {?} */ (flowElements[k]));
                    if (!startActivity.Id.startsWith('startActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${startActivity.Name}` + this.localePipe.instant('validate.noStartActivity')
                        };
                    }
                    break;
                case 'bpmn.ExclusiveGateway':
                    /** @type {?} */
                    const exclusiveGateway = (/** @type {?} */ (flowElements[k]));
                    if (!exclusiveGateway.Id.startsWith('ExclusiveGateway')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${exclusiveGateway.Name}` + this.localePipe.instant('validate.noExclusiveGateway')
                        };
                    }
                    break;
                case 'bpmn.ParallelGateway':
                    /** @type {?} */
                    const parallelGateway = (/** @type {?} */ (flowElements[k]));
                    if (!parallelGateway.Id.startsWith('ParallelGateway')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${parallelGateway.Name}` + this.localePipe.instant('validate.noParallelGateway')
                        };
                    }
                    break;
                case 'wf.UserActivity':
                    /** @type {?} */
                    const userActivity = (/** @type {?} */ (flowElements[k]));
                    if (!userActivity.Id.startsWith('UserActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${userActivity.Name}` + this.localePipe.instant('validate.noUserActivity')
                        };
                    }
                    break;
                case 'wf.OperationActivity':
                    /** @type {?} */
                    const operationActivity = (/** @type {?} */ (flowElements[k]));
                    if (!operationActivity.Id.startsWith('UserActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${operationActivity.Name}` + this.localePipe.instant('validate.noOperationActivity')
                        };
                    }
                    break;
                case 'wf.NotifyActivity':
                    /** @type {?} */
                    const notifyActivity = (/** @type {?} */ (flowElements[k]));
                    if (!notifyActivity.Id.startsWith('NotifyActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${notifyActivity.Name}` + this.localePipe.instant('validate.noNotifyActivity')
                        };
                    }
                    break;
                case 'wf.CallActivitySubProcess':
                    /** @type {?} */
                    const callActivitySubProcess = (/** @type {?} */ (flowElements[k]));
                    if (!callActivitySubProcess.Id.startsWith('CallActivitySubProcess')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${callActivitySubProcess.Name}` + this.localePipe.instant('validate.noCallActivitySubProcess')
                        };
                    }
                    break;
                case 'wf.AutoActivity':
                    /** @type {?} */
                    const autoActivity = (/** @type {?} */ (flowElements[k]));
                    if (!autoActivity.Id.startsWith('autoActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${autoActivity.Name}` + this.localePipe.instant('validate.noAutoActivity')
                        };
                    }
                    break;
                case 'wf.IntermediateCatchEventImpl':
                    /** @type {?} */
                    const intermediateCatchEventImpl = (/** @type {?} */ (flowElements[k]));
                    if (!intermediateCatchEventImpl.Id.startsWith('IntermediateCatchEvent')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${intermediateCatchEventImpl.Name}` + this.localePipe.instant('validate.noIntermediateCatchEvent')
                        };
                    }
                    break;
                case 'wf.MessageActivity':
                    /** @type {?} */
                    const messageActivity = (/** @type {?} */ (flowElements[k]));
                    if (!messageActivity.Id.startsWith('MessageActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${messageActivity.Name}` + this.localePipe.instant('validate.noMessageActivity')
                        };
                    }
                    break;
                case 'wf.AifCreationBillActivity':
                    /** @type {?} */
                    const aifCreationBillActivity = (/** @type {?} */ (flowElements[k]));
                    if (!aifCreationBillActivity.Id.startsWith('AifCreationBillActivity')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${aifCreationBillActivity.Name}` + this.localePipe.instant('validate.noAifCreationBillActivity')
                        };
                    }
                    break;
                case 'bpmn.EndEvent':
                    /** @type {?} */
                    const endEvent = (/** @type {?} */ (flowElements[k]));
                    if (!endEvent.Id.startsWith('EndEvent')) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${endEvent.Name}` + this.localePipe.instant('validate.noEndEvent')
                        };
                    }
                    break;
            }
        }
        return {
            valid: true,
        };
    }
    /**
     * @private
     * @param {?} flowElements
     * @return {?}
     */
    static validateActivityName(flowElements) {
        for (const k in flowElements) {
            /** @type {?} */
            const flowNode = flowElements[k];
            switch (flowNode.ClrTypeID) {
                case "wf.StartActivity":
                case "bpmn.ExclusiveGateway":
                case "bpmn.ParallelGateway":
                case "wf.UserActivity":
                case "wf.OperationActivity":
                case "wf.NotifyActivity":
                case "wf.CallActivitySubProcess":
                case "wf.AutoActivity":
                case "wf.IntermediateCatchEventImpl":
                case "wf.MessageActivity":
                case "wf.AifCreationBillActivity":
                case "bpmn.EndEvent":
                    if (flowNode.Name == null || flowNode.Name == "") {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.mark') +
                                `${flowNode.Id}` + this.localePipe.instant('validate.noFlowNodeChsName')
                        };
                    }
                    if (new Blob([flowNode.Name]).size > 128) {
                        return {
                            valid: false,
                            type: 'message',
                            level: 'error',
                            message: this.localePipe.instant('validate.activity') +
                                `${flowNode.Name}` + this.localePipe.instant('validate.nameExceedsLengthLimit')
                        };
                    }
                    break;
            }
        }
        return {
            valid: true,
        };
    }
}
WfValidatorAdapter.localePipe = null;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const EventBusKeys = {
    new: "new",
    batchCopyProperty: "batchCopyProperty",
    batchSetProperty: 'batchSetProperty',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WF_PROCESS_EDITOR_LANG_RESOURCES = {
    "zh-CHS": {
        "validate": {
            "noProcessHeader": "模型不存在processHeader属性",
            "cmpsEmpty": "流程构件为空",
            "cmpsEmptyMsg": "流程构件不允许为空，请联系表单开发确认问题",
            "directNoPf": "启动方式为【直接】的流程不应该包含共享（PF）的流程构件",
            "directNoPfMsg": "请移除以下共享（PF）的流程构件：",
            "noLoadDataCmp": "缺少执行时机为[获取数据]的流程构件",
            "noLoadDataCmpMsg": "流程定义不能缺少取数构件，请联系表单开发确认问题",
            "noStartCmp": "缺少执行时机为[流程启动]的流程构件",
            "noStartCmpMsg": "会导致流程启动时无法修改单据状态，请联系表单开发确认问题",
            "lackProcessCompleteCmp": "缺少执行时机为[流程完成]的流程构件",
            "lackProcessCompleteCmpMsg": "会导致流程完成时无法修改单据状态，请联系表单开发确认问题",
            "lackProcessAbortCmp": "缺少执行时机为[流程终止]的流程构件",
            "lackProcessAbortCmpMsg": "会导致流程终止时无法修改单据状态，请联系表单开发确认问题",
            "lackProcessCancelCmp": "缺少执行时机为[流程终止]的流程构件",
            "lackProcessCancelCmpMsg": "会导致流程终止时无法修改单据状态，请联系表单开发确认问题",
            "lackProcessBackCmp": "缺少执行时机为[流程驳回]的流程构件",
            "lackProcessBackCmpMsg": "会导致流程驳回时无法修改单据状态，请联系表单开发确认问题",
            "lackProcessReStartCmp": "缺少执行时机为[重新提交]的流程构件",
            "lackProcessReStartCmpMsg": "会导致流程重新提交时无法修改单据状态，请联系表单开发确认问题",
            "parallelGatewayCheck": "【并行网关】没有成对出现",
            "parallelGatewayCheckMsg": "【并行网关】需作为一条流程分支的拆分节点和汇聚节点成对出现，请修改",
            "approvalPerformerCheck": "活动，未设置参与者",
            "noVariable1": "活动【变量设置】属性中已设置变量",
            "noVariable2": "在流程属性【流程变量】中已不存在，请修改！",
            "activity": "活动【",
            "noStartActivity": "】的标识不合法，不是以[startActivity]开头",
            "noExclusiveGateway": "】的标识不合法，不是以[ExclusiveGateway]开头",
            "noParallelGateway": "】的标识不合法，不是以[ParallelGateway]开头",
            "noUserActivity": "】的标识不合法，不是以[UserActivity]开头",
            "noOperationActivity": "】的标识不合法，不是以[OperationActivity]开头",
            "noNotifyActivity": "】的标识不合法，不是以[NotifyActivity]开头",
            "noCallActivitySubProcess": "】的标识不合法，不是以[CallActivitySubProcess]开头",
            "noAutoActivity": "】的标识不合法，不是以[AutoActivity]开头",
            "noIntermediateCatchEvent": "】的标识不合法，不是以[IntermediateCatchEventImpl]开头",
            "noMessageActivity": "】的标识不合法，不是以[MessageActivity]开头",
            "noAifCreationBillActivity": "】的标识不合法，不是以[AifCreationBillActivity]开头",
            "noEndEvent": "】的标识不合法，不是以[EndEvent]开头",
            "mark": "标识为【",
            "noFlowNodeChsName": "】的活动简体中文名称为空，请修改",
            "nameExceedsLengthLimit": "】的名称超长，不能超过40个字符，请修改"
        },
        "processEditor": {
            "tip": "提示",
            "showButton": "显示查看模型按钮",
            "changeRecord": "流程变更记录",
            "noDtInfo": "不存在设计时流程信息！请先赋值！",
            "noRtInfo": "不存在运行时流程信息！请先赋值！",
            "wrongMoment": "设计器运行时机错误！",
            "prompted": "系统提示",
            "saveSuccess": "保存成功",
            "waitReview": "保存成功，等待发起审核",
            "successPublish": "发布成功",
            "publishFail": "发布失败，",
            "policyConflict": "会签策略下,“驳回规则”不允许“动态选择驳回级次”，请修改！",
            "noPermissionToSave": "当前用户不具备另存流程的权限",
            "closeProc1": "关闭此页面？",
            "closeProc2": "系统可能不会保存您所做的更改。",
            "viewModel": "查看模型",
            "copied": "模型已经复制到剪贴板",
            "button": {
                "saveProc": "保存",
                "releaseProc": "发布",
                "sync": "同步设计时包",
                "saveAs": "另存为",
                "procRecord": "流程记录",
                "viewProcModel": "查看模型",
                "closeProc": "关闭"
            }
        },
        "designer": {
            "wfEditorUi": {
                "basicElements": "基本元素",
                "readOnly": "只读"
            },
            "wfProcessCell": {
                "basicInfo": "基本信息",
                "name": "名称",
                "nameLanguage": "名称",
                "key": "标识",
                "entryForm": "流程分类",
                "startMode": "启动方式",
                "wfTitle": "流程摘要",
                "formDef": "表单定义",
                "formsPC": "PC表单",
                "formsMobile": "移动表单",
                "process": "事件监听",
                "advanced": "高级属性",
                "basic": "基础属性",
                "wfComponent": "流程构件",
                "otherConfig": "其他配置",
                "processVariables": "流程变量",
                "basicElements": "基本元素",
                "customizeAction": "自定义动作",
                "timelinessInfo": "时效信息",
                "enablePriority": "启用紧急程度",
                "enableWholeOrderRetrieve": "撤回在审单据",
                "messageProperty": "影像设置",
                "timeLimitControl": "超时操作",
                "messageNotice": "消息通知",
                "extendProperty": "扩展属性",
                "directTips": "提示：启动方式切换为直接，直接启动是默认的流程启动方式，切换后会移除共享(PF)相关构件，请知悉！",
                "externalTips": "提示：启动方式切换为外部流程，适用于作为共享流程的外部流程相关场景，切换后保留流程上的共享（PF)相关构件，请知悉！",
                "subprocessTips": "提示：启动方式切换为子流程，适用于调用式子流程的场景，切换后会移除除取数构件外的其他流程构件，请知悉！"
            },
            "WfSequenceFlowEdge": {
                "basicInfo": "基本信息",
                "basic": "基础属性",
                "name": "名称",
                "nameLanguage": "名称",
                "id": "标识",
                "condition": "条件选项",
                "ConditionExpression": "条件",
                "default": "缺省转移线"
            },
            "wfSidebar": {
                "bizactivitylib": "业务活动"
            }
        },
        "app": {
            "processDesigner": {
                "all": "所有",
                "assign": "指派",
                "claim": "领用",
                "preempt": "抢占模式",
                "parallel": "并行会签",
                "sequential": "串行会签",
                "true": "是",
                "false": "否",
                "dataId": "单据内码",
                "procInstId": "流程实例ID",
                "bizDefKey": "入口单据ID",
                "processDefinitionKey": "流程定义KEY",
                "procInstCreator": "流程发起人",
                "businessCreator": "业务发起人",
                "procInstDescription": "流程摘要",
                "comment": "审批意见",
                "bizDefName": "流程分类名称",
                "curLoginUsername": "当前登录人名称",
                "procInstCreatorName": "流程发起人名称",
                "currentParticipantId": "当前办理人ID",
                "currentParticipantName": "当前办理人名称",
                "currentUser": "当前登录用户",
                "preActExecutors": "上一个活动的执行人",
                "collectionElementVariable": "多实例子活动元素变量",
                "subCollectionElementVariable": "多实例子流程元素变量",
                "nrOfInstances": "多实例总数量",
                "nrOfCompletedInstances": "多实例已完成数量",
                "nrOfActiveInstances": "多实例正在运行中的数量",
                "nrOfForward": "通过实例数量",
                "nrOfBackward": "驳回实例数量",
                "nrOfAbort": "终止实例数量",
                "conclusionType": "结论类型",
                "conclusionValue": "结论值",
                "directSuperior": "直接上级",
                "higherSuperior": "间接上级",
                "DIRECT": "直接",
                "EXTERNAL_PROCESS": "外部流程",
                "SUB_PROCESS": "子流程",
                "ALL": "电脑端和移动端",
                "WEB": "电脑端",
                "APP": "移动端",
                "conclusionTypeTips": "审批项流转方向，1正向，2反向，3终止",
                "conclusionValueTips": `审批项编号，例如，"Pass"、"Back"、"Refuse"`,
                "copy": "_副本",
                "saveAs": "另存为",
                "tips": "系统提示",
                "saveAsSuccess": "另存为成功",
                "saveAsFail": "另存为失败，请检查流程是否正确！",
                "syncDt": "是否将当前版本流程定义同步到设计时流程定义包",
                "syncSuccess": "同步成功",
                "beforeCompleteStrategyChange": "当前节点存在运行中的活动实例，不允许调整完成策略，请了解！",
                "releaseProcess": "发布前审核",
                "auto": "自动生单",
                "push": "推式生单",
                "pull": "拉式生单",
                "creation": "通过生单流程生成目标单"
            }
        },
        "multiInstanceLoopCharacteristics": {
            "loopCharacteristics": "多实例设置",
            "set": "（已设置）",
            "notSet": "（未设置）",
            "isEnable": "是否启用",
            "isSequential": "是否串行",
            "loopCardinality": "元素集合",
            "completionConditionRules": "完成条件",
            "promptAct1": "1、[集合]中的元素个数为子活动启动实例数量。",
            "promptAct2": "2、子活动启动时系统会将[集合]中的元素拆分映射到各个子活动实例的[元素变量]。",
            "promptProc1": "1、[集合]中的元素个数为子流程启动实例数量。",
            "promptProc2": "2、子流程启动时系统会将[集合]中的元素拆分映射到各个子流程实例的[元素变量]。",
            "checkPrompt": "当前节点存在运行中的活动实例，不允许调整",
            "conditionRulesSet": "（已设置）",
            "completionConditionRulesList": {
                "forward": "正向",
                "backward": "反向",
                "abort": "终止"
            }
        },
        "component": {
            "optins": {
                "wfOptions": "工作流选项",
                "specified": "指定子流程",
                "dynamic": "动态子流程",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "subProcessType": "子流程类型",
                "processType": "流程类型",
                "bizDef": "流程分类",
                "procDef": "流程定义",
                "clickCancel": "取消",
                "clickOk": "确定"
            },
            "voConfig": {
                "documentInfo": "单据信息",
                "viewModelSelection": "视图模型选择",
                "cancel": "取消",
                "clickOk": "确定",
                "selectOne": "确定",
                "documentTypeSelect": "单据类型选择",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "viewModel": "视图模型",
                "documenttype": "单据类型",
                "placeholder": "请选择"
            },
            "variableSetting": {
                "constant": "常量",
                "expression": "表达式",
                "component": "构件",
                "ACTIVITY_STARTED": "活动开始",
                "ACTIVITY_COMPLETED": "活动结束",
                "varAssign": "变量赋值",
                "varNumber": "变量编号",
                "REQUIRED": "必填",
                "varName": "变量名称",
                "valueType": "值类型",
                "executionTime": "执行时机",
                "valueText": "变量值",
                "processVariables": "流程变量",
                "notSelectedVar": "尚未选中变量！",
                "valueCannotEmpty": "变量值不允许为空！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "add": "新增",
                "delete": "删除",
                "serialNumber": "序号",
                "clickCancel": "取消",
                "clickOK": "确定",
                "inconsistentParameters": "当前构件方法参数不一致，请更新！",
                "methodNotExist": "当前构件已不存在此方法，请更新！",
                "parameterName": "参数名",
                "parameterValue": "参数值",
                "methodnotSelected": "尚未选择构件方法",
                "metadataNotExist": "帮助元数据不存在，请联系系统管理员查看原因！",
                "errorObtainComponent": "获取解析构件出错",
                "componentSelection": "构件选择",
                "componentName": "构件名称",
                "parameterList": "参数列表",
                "lineNumber": "序号"
            },
            "urgeHandleRule": {
                "urgentApproval": "催办审批：",
                "pleaseApprove": "请您尽快审批",
                "soOn": "的",
                "urgeHandle": "催办",
                "noSendingMethod": "尚未选择发送方式！",
                "setMessageTemplate": "消息渠道启用短信时需设置消息模板",
                "codeEmpty": "短信模板编号不允许为空",
                "noMessageSubject": "尚未配置消息主题！",
                "noMessageContent": "尚未选择消息内容！",
                "earliestTimeNotEmpty": "最早允许催办时间不允许为空",
                "minimumTimeNotEmpty": "最小允许催办间隔不允许为空",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "enableUrgeHandle": "启用催办",
                "timeSetting": "时间设置",
                "earliestTime": "最早允许催办时间（小时）",
                "minimumInterval": "最小允许催办间隔（小时）",
                "sendingMethod": "发送方式",
                "messageSubject": "消息主题",
                "supportEditing": "支持编辑",
                "messageContent": "消息内容",
                "displayReminder": "显示催办人",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "titleExpression": {
                "zh-CHS": "中文简体",
                "zh-CHT": "中文繁体",
                "en": "英文",
                "taskDescription": "任务描述",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "currentLanguage": "当前摘要语言:",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "timeLimitControl": {
                "timedOutOperation": "超时操作",
                "constant": "固定值",
                "scope": "时间范围",
                "day": "天",
                "hour": "时",
                "minute": "分",
                "BeforeDuration": "到期之前",
                "OnDuration": "到期时",
                "AfterDuration": "到期之后",
                "SendMessageExpireOperation": "超时预警",
                "AutoHandleExpireOperation": "自动办理",
                "curDay": "当天",
                "durationType": "期限类型",
                "required": "必填",
                "timeDuration": "时长",
                "timeUnit": "单位",
                "operationTypeName": "操作类型名称",
                "sendType": "操作",
                "onlyBeInteger": "任务期限只能是整数！",
                "setOperation": "请设置超时操作！",
                "setType": "请设置自动办理类型！",
                "setComments": "请设置自动办理意见！",
                "selectedOperation": "尚未选中预警操作！",
                "notSupportAutomatic": "下一节点是由当前办理人指派的话，当前节点不支持任务自动办理",
                "warningMessage": "预警消息",
                "automaticProcessing": "自动办理",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "timelinessControl": "任务处理时效控制",
                "isEnable": "是否启用",
                "taskDeadline": "任务期限",
                "timelyOperation": "时效预警操作",
                "actionList": "操作列表",
                "add": "新增",
                "remove": "删除",
                "clickCancel": "取消",
                "clickOK": "确定",
                "workItemParticipant": "当前节点办理人",
                "procInstCreator": "流程发起人",
                "to-doMessageTimeOut": "您有一条待办消息即将超时。",
                "messageTimeOut": "您有一条消息即将超时",
                "agree": "同意"
            },
            "sendMessageOperation": {
                "procInstCreator": "流程发起人",
                "workItemParticipant": "当前节点办理人",
                "preActExecutors": "上一节点办理人",
                "day": "天",
                "hour": "时",
                "minute": "分",
                "cycleTimeNotEmpty": "循环时间间隔不允许为空！",
                "sendMethodNotEmpty": "发送方式不允许为空！",
                "subjectNotEmpty": "消息主题不允许为空！",
                "contentNotEmpty": "消息内容不允许为空！",
                "recipientNotEmpty": "接收人不允许为空！",
                "messageTemplate": "消息渠道启用短信时需设置消息模板",
                "smsTemplateNumberNotEmpty": "短信模板编号不允许为空",
                "cycleEnable": "启用循环预警",
                "cycleTime": "循环时间间隔",
                "sendType": "发送方式",
                "subject": "消息主题",
                "message": "消息内容",
                "receiverVari": "接收人",
                "sysUsers": "系统用户",
                "clickCancel": "取消",
                "clickOK": "确定",
                "opinionsNotEmpty": "自动办理意见不允许为空！",
                "processingNotEmpty": "自动办理不允许为空！",
                "automaticProcessSet": "自动办理设置",
                "automaticProcessMethod": "自动办理方式",
                "automaticOpinionHandle": "自动办理意见"
            },
            "smsMessageTemplate": {
                "smsTemplateContent": "第三方短信服务商里定义的模板原文，例如:阿里云您的管控大数据平台账号已开通,用户名为:${username}，初始密码为:${code}，请及时登录系统",
                "code": "变量",
                "value": "值",
                "noRowsSelected": "尚未选中行",
                "smsMessageTemplate": "短信服务模板",
                "tips1": "消息模板是指已经在第三方短信服务商定义模板后，需要在GS Cloud里将短信服务商的模板变量和GS Cloud变量关联",
                "tips2": "第三方短信服务商里定义的模板编号，例如: 阿里云 SMS_220626324",
                "tips3": "将第三方短信服务商模板里的变量和GSCloud里的变量配置关联",
                "smsTemplateNumber": "短信模板编号",
                "smsVariableBinding": "短信变量绑定",
                "addSmsVariable": "新增",
                "deleteSmsVariable": "删除"
            },
            "signRule": {
                "countersignRules": "会签规则",
                "byNumber": "按数量",
                "byProportion": "按比例(%)",
                "customConditions": "自定义条件",
                "value": "编号",
                "text": "名称",
                "conclusionName": "结论名称",
                "conclusionValue": "结论值",
                "calculateType": "计算方式",
                "conditionValue": "条件值",
                "waitAllVotes": "等待全员办结",
                "yes": "是",
                "no": "否",
                "notEmpty": "完成策略为会签时，会签规则不允许为空，请了解！",
                "pleaseSelect": "请首先选中一条审批项！",
                "maxConditionValue": "条件值最大值是100",
                "minConditionValue": "条件值最小值是0",
                "noConditional": "结论执行方式为全票或一票时不需要条件值",
                "set": "（已设置）",
                "ruleList": "规则列表",
                "approvalOptions": "审批选项",
                "clickCancel": "取消",
                "deleteRow": "重置",
                "clickOK": "确定",
            },
            "saveAsEdit": {
                "public": "公有",
                "private": "私有",
                "code": "编号",
                "name": "名称",
                "nameNotEmpty": "流程名称不能为空",
                "organizationNotEmpty": "维护组织不能为空",
                "organization": "组织",
                "basicAttributes": "基础属性",
                "processName": "流程名称",
                "processKeyValue": "流程Key值",
                "maintenanceOrg": "维护组织",
                "accessLevel": "访问级别",
                "saveAsCancel": "取消",
                "saveAsOK": "确定"
            },
            "release": {
                "release": "流程发布",
                "update": "流程更新",
                "applicantName": "申请人名称",
                "applicantDepartment": "申请人部门",
                "procName": "流程名称",
                "procVersion": "流程版本",
                "releaseType": "发布类型",
                "textDetail": "说明",
                "saveAsCancel": "取消",
                "saveAsOK": "确定"
            },
            "processVariables": {
                "string": "字符",
                "integer": "整形",
                "decimal": "小数",
                "boolean": "布尔",
                "constant": "常量",
                "expression": "表达式",
                "component": "构件",
                "name": "变量编号",
                "required": "必填",
                "documentation": "变量名称",
                "basicType": "变量类型",
                "description": "描述",
                "tag": "初始值类型",
                "valueText": "初始值",
                "processVariables": "流程变量",
                "notSelected": "尚未选中流程变量！",
                "variableNumberEmpty": "变量编号不允许为空！",
                "variableNameEmpty": "变量名称不允许为空！",
                "variableNumberNotStandard": "变量编号只能包含字母、数字和下划线，且不能以数字开头！",
                "tagNotEmpty": "初始值类型不允许为空！",
                "codeDuplicates": "流程变量编号不允许重复！",
                "alreadyExists": "新增的变量已存在！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "add": "新增",
                "delete": "删除",
                "number": "序号",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "participant": {
                "user": "用户",
                "variable": "变量参与者",
                "position": "岗位",
                "role": "角色",
                "component": "构件参与者",
                "reportingLine": "汇报关系",
                "matrix": "矩阵",
                "activityExecutor": "历史活动办理人",
                "organization": "单位/部门",
                "all": "所有",
                "assign": "指派",
                "claim": "领用",
                "currentUser": "当前办理人",
                "procInstCreator": "流程发起人",
                "participantSet": "参与者设置",
                "order": "序号",
                "type": "类型",
                "performerName": "名称",
                "description": "描述",
                "condition": "启用条件",
                "dataMovement1": "是否将默认办理人数据移动到到备选办理人？",
                "dataMovement2": "是否将备选办理人数据移动到默认办理人？",
                "participantSelection": "参与者选择",
                "selectProcessVariables": "尚未选择流程变量！",
                "selectVariableValueType": "尚未选择变量值类型！",
                "selectRelation": "尚未选择关系！",
                "selectPosition": "尚未选择岗位！",
                "selectOrgType": "尚未选择组织类型！",
                "orgFill": "尚未填写组织！",
                "refOrgIdNotNull": "参照类型为组织时，参照组织字段不能为空",
                "refUserIdNotNull": "参照类型为系统用户/员工时，参照人字段不能为空",
                "repDefConfigured": "该汇报关系已经进行过配置",
                "atLeastOneCondition": "条件字段至少要存在一个",
                "dataFieldAliasNotNull": "数据字段不能为空",
                "matrixConfigured": "该矩阵已经进行过配置",
                "selectPerformer": "尚未选择参与者",
                "definitionDeleted": "该条汇报关系数据的定义已删除，该条数据将删除",
                "matrixDeleted": "该条矩阵数据的定义已删除，该条数据将删除",
                "selectParticipantInfo": "请先选中一条参与者信息！",
                "noRowSelected": "尚未选中行！",
                "selectDefaultHandler": "请先选中一条默认办理人",
                "selectpotentialtHandler": "请先选中一条备选办理人",
                "org": "组织：",
                "positionType1": "岗位类型：通用岗位，组织：",
                "positionType2": "岗位类型：通用岗位",
                "positionType3": "岗位类型：组织岗位",
                "comp": "构件：",
                "parameters:": ",参数：{",
                "referencePerson:": "参照人：",
                "referenceOrganization:": "参照组织：",
                "condition1": "条件1：",
                "condition2": "条件2：",
                "condition3": "条件3：",
                "data": "数据：",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "allocationPolicy": "分配策略",
                "operator": "指派操作人",
                "multiSelect": "允许多选",
                "necessary": "只有一个待选用户时，仍需手工选择",
                "notifyRecipient": "知会接收人",
                "defaultHandler": "默认办理人",
                "new": "新增",
                "editPerformer": "编辑",
                "removePerformer": "移除",
                "clearPerformer": "清空",
                "moveUp": "上移",
                "moveDown": "下移",
                "alternativeHandler": "备选办理人",
                "isAllScope": "指定参与人时不限范围，从全员用户中选择",
                "clickCancel": "取消",
                "clickOK": "确定",
                "alternativeScope": "备选范围",
                "orgId": "组织ID",
                "includeChildren": "包含下级",
                "conditon": "启用条件",
                "currentUnit": "本单位",
                "currentDepartment": "本部门",
                "variableOrganization": "变量组织"
            },
            "activityExecutor": {
                "name": "名称",
                "eventHandler": ">活动办理人",
                "nodeName": "节点名称",
                "enablingConditions": "启用条件",
                "activityList": "活动列表",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "componentPerformer": {
                "componentMethod": "当前构件方法参数不一致，请更新！",
                "methodNotExist": "当前构件已不存在此方法，请更新！",
                "code": "编号",
                "name": "名称",
                "description": "描述",
                "valueText": "参数值",
                "help": "帮助",
                "errorObtaining": "获取解析构件出错",
                "componentSelection": "构件选择",
                "metadataNotExist": "帮助元数据不存在！",
                "serverSideNotFound": "服务器端未找到帮助元数据，请检查元数据是否已经部署到环境中",
                "componentName": "构件名称",
                "componentSelect": "构件选择",
                "parameterList": "参数列表"
            },
            "matrixPerformer": {
                "code": "编号",
                "name": "名称",
                "help": "帮助",
                "multivalue": "多值",
                "enumSelection": "枚举选择",
                "refMatrixTable": "引用矩阵表",
                "matrixTable": "矩阵表",
                "curDataFieldValue": "结果列",
                "conditionFields": "条件字段",
                "condition": "启用条件",
                "key": "键",
                "value": "值",
                "notSelectEnum": "尚未选中枚举值",
                "cancel": "取消",
                "onConfirm": "确定",
                "lineNumber": "序号"
            },
            "performerOptions": {
                "leave": "向下流转",
                "throwException": "异常提示",
                "sys": "用户ID",
                "administrative_staff": "员工ID",
                "procInstCreator": "流程发起人",
                "preActExecutors": "上一节点办理人",
                "allPassExecutors": "所有已办理人员",
                "performerOptions": "参与者选项",
                "exclusionNotAllowed": "所有已办理人员已设置自动审批，上个节点已办理人员默认不允许排除！",
                "approvalNotAllowed": "【分配策略】为【领用】时，不允许设置自动审批，请了解！",
                "approvalNotAllowedAsSet": "所有已办理人员已设置不允许审批，所以上个节点已办理人员默认不允许自动审批！",
                "allocationStrategyIsCollect": "【分配策略】为【领用】时，不允许设置自动审批，请了解！",
                "set": "（已设置）",
                "advancedOptions": "参与者高级选项",
                "historicFirst": "再次进入节点时，办理人是节点的已办人员",
                "noPerformerStrategy": "办理人为空策略：",
                "excludeProcInstCreator": "排除办理人选项",
                "defaultNotParticipate": "流程发起人默认不参与审批",
                "excludePreActExecutors": "上个节点已办理人员默认不参与审批",
                "excludeAllPassExecutors": "所有已办理人员默认不参与审批",
                "excludeExprPerformer": "流程变量：",
                "variableOrgTypes": "变量值类型：",
                "automaticApprovalOptions": "自动审批选项",
                "autoProcInstCreator": "流程发起人默认自动审批通过",
                "autoPreActExecutors": "上一节点办理人员默认自动审批通过",
                "autoAllPassExecutors": "所有已办理人员默认自动审批通过",
                "cancel": "取消",
                "clickOK": "确定"
            },
            "positionPerformer": {
                "orgPosition": "组织岗",
                "generalPosition": "通用岗",
                "sysPositions": "系统岗位",
                "positionType": "岗位类型",
                "role": "角色",
                "position": "岗位",
                "sysType": "组织类型",
                "placeholder": "请选择",
                "orgId": "组织ID",
                "condition": "启用条件",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "reportingLine": {
                "higherSuperior": "间接上级",
                "directSuperior": "直接上级",
                "code": "编号",
                "name": "名称",
                "dept": "组织",
                "sysUser": "系统用户",
                "employee": "员工",
                "businessFields": "业务字段",
                "defName": "汇报定义",
                "dimension": "汇报级别",
                "curReportingRefer": "参照类型",
                "usersName": "参照人",
                "refOrgId": "参照组织",
                "condition": "启用条件",
                "definitionOfReport": "汇报关系定义"
            },
            "userPerformer": {
                "regularUser": "固定用户",
                "variablePart": "变量参与者",
                "sys": "系统用户",
                "administrative_organization": "员工",
                "cantUseContext": "行政人员类型不能使用此上下文变量",
                "user": "用户",
                "variable": "变量",
                "condition": "启用条件"
            },
            "variablePerformer": {
                "sys": "用户ID",
                "administrative_staff": "员工ID",
                "oneself": "本人",
                "administrative_organization": "部门ID",
                "cantUseContext": "行政人员类型不能使用此上下文变量",
                "processVariables": "流程变量",
                "variableOrgTypes": "变量值类型",
                "relationShipType": "关系",
                "condition": "启用条件",
            },
            "orgPotentialOwner": {
                "optionSettings": "选项设置",
                "global": "全员",
                "currentUnit": "本单位",
                "currentDepartment": "本部门",
                "addSignBehind": "加签",
                "addSignFront": "征询",
                "transfer": "移交",
                "notify": "知会",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "option": "选项",
                "enable": "是否启用",
                "range": "范围",
                "orgId": "组织ID",
                "variableOrganization": "变量组织",
                "includeChildren": "包含下级",
                "clickCancel": "取消",
                "clickOK": "确定",
                "limit": "限定人员范围",
                "turnOffPrompt": "请关闭限定人员范围选项"
            },
            "note": {
                "placeholder": "请输入流程变更记录",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "MessageNotice": {
                "notify": "消息通知",
                "subject": "消息主题",
                "content": "消息内容",
                "sendTime": "发送时机",
                "sendType": "发送方式",
                "receiverText": "消息接收人",
                "procInstCreator": "流程发起人，",
                "workItemParticipant": "任务接收人，",
                "messageSet": "消息设置",
                "selectedRow": "尚未选中消息通知！",
                "noCopy": "没有待复制的消息通知属性！",
                "batchCopy": "批量复制",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "add": "新增",
                "edit": "编辑",
                "delete": "删除",
                "lineNumber": "序号",
                "clickCancel": "取消",
                "clickOK": "确定",
                "messContent": `{"expr":"\'您有一条消息通知。\'","sexpr":""}`,
                "procComplete": "流程完成",
                "procAborted": "流程终止",
                "procRollBack": "流程驳回",
                "workCreated": "任务创建",
                "actComplete": "活动完成",
                "actAborted": "活动终止",
                "email": "邮件",
                "sms": "短信",
                "cloudplus": "云",
                "processParticipant": "流程参与人",
                "variableParticipant": "变量参与者",
                "userParticipant": "指定用户",
                "positionParticipant": "岗位",
                "activityExecutorParticipant": "历史办理人",
                "sys": "系统用户",
                "administrative_organization": "员工",
                "name": "名称",
                "noTargetNode": "尚未选中节点！",
                "noMessageNotifyAttribute!": "没有消息通知属性！"
            },
            "messageNoticeEdit": {
                "procInstCreator": "流程发起人",
                "activityExecutorParticipant": "历史办理人",
                "workItemParticipant": "任务办理人",
                "sys": "系统用户",
                "administrative_organization": "员工",
                "processParticipant": "流程参与人",
                "workItemReceiveParticipant": "任务接收人",
                "variableParticipant": "变量参与者",
                "userParticipant": "指定用户",
                "positionParticipant": "岗位",
                "sendType": "发送方式不允许为空",
                "smsMessageTemplate": "消息渠道启用短信时需设置消息模板",
                "smsMessageTemplateCode": "短信模板编号不允许为空",
                "sendTime": "发送时机不允许为空",
                "subject": "消息主题不允许为空",
                "content": "消息内容不允许为空",
                "receivers": "接收人不允许为空！",
                "processParticipantNotNull": "流程参与人不允许为空",
                "activityDefIdNotNull": "流程参与人为历史办理人时，办理节点不允许为空",
                "variableParticipantNotNull": "变量参与者不允许为空",
                "orgType": "变量参与者组织类型不允许为空",
                "userIds": "指定用户不允许为空",
                "positionId": "岗位不允许为空",
                "activityList": "活动列表",
                "position": "岗位",
                "optionalNodes": "可选节点",
                "targetNodeList": "目标节点列表",
                "placeholder": "请选择目标节点",
                "optionalAttribute": "可选属性",
                "lineNumber": "序号",
                "clickCancel": "取消",
                "clickOK": "确定",
                "messSendType": "消息渠道",
                "messSubject": "消息主题",
                "enable": "启用表达式",
                "messContent": "消息内容",
                "recipient": "接收人",
                "addReceiver": "添加",
                "organization": "组织：",
                "posi": "岗位："
            },
            "jumpScope": {
                "targetNodeOptions": "目标节点选项",
                "name": "名称",
                "outConnectNode": "流程图连线节点",
                "global": "流程内所有节点",
                "afterNodes": "所有后继节点",
                "specifiedSet": "流程图连线节点+附加节点",
                "firstNode": "条件为true的连线节点，当有多条时默认选中首条",
                "nullNode": "默认为空，每次都手动选择",
                "specifyNode": "指定默认节点",
                "noSetTargetNode": "尚未设置目标节点选项，请了解！",
                "noSetSpecifyNode": "尚未指定默认节点，请了解！",
                "selectedRow": "请首先选中一条选项！",
                "optionalNodes": "可选节点",
                "listOfAdditional": "附加节点列表",
                "pleaseSelect1": "请选择附加节点",
                "defaultNode": "默认节点",
                "pleaseSelect2": "请选择默认节点",
                "defaultNodeList": "默认节点列表",
                "clickCancel": "取消",
                "clickOK": "确定",
                "set": "（已设置）"
            },
            "imageSet": {
                "imageSet": "影像设置",
                "onlyView": "仅可查看",
                "edit": "编辑",
                "reScanStart": "发起重扫",
                "reScanComplete": "重扫完成",
                "mutualExclusion": "【仅可查看】选项与其他选项互斥，请了解！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "imageOperation": "影像操作权限",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "extendProperty": {
                "extendProperty": "扩展属性",
                "true": "是",
                "false": "否",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "illustrate": "说明",
                "placeholder": "请选择",
                "cancel": "取消",
                "clickOK": "确定"
            },
            "expressionEditor": {
                "expressionEditor": "条件编辑",
                "notSet": "（未设置）",
                "clickCancel": "取消",
                "changeType": "切换类型",
                "clickOK": "确定"
            },
            "executeForms": {
                "executeForms": "表单定义",
                "parameters": "参数【",
                "typeAsvariable": "】类型为变量，但在流程变量里不存在",
                "parameterSettings": "参数设置",
                "formDefinitionList": "表单定义列表",
                "notSet": "（未设置）",
                "default": "流程默认表单",
                "processEmbeddedForm": "流程嵌表单",
                "formEmbedProcess": "表单嵌流程",
                "clickCancel": "取消",
                "clickOK": "确定",
                "noForm": "暂无表单格式",
                "form": "选择表单",
                "placeholder": "请选择",
                "parametersSet": "参数",
                "key": "变量编号",
                "name": "变量名称",
                "lineNumber": "序号",
                "code": "编号",
                "tag": "类型",
                "value": "参数值",
                "variable": "变量",
                "constant": "常量",
                "expression": "表达式",
                "method": "方法标识",
                "methodName": "方法名称",
                "description": "描述",
                "workFlowAction": "流转方向",
                "formOperations": "表单操作",
                "executionTime": "执行时机",
                "sortOrder": "执行顺序",
                "methodParameters": "参数",
                "selectFormActionConfig": "尚未选中表单操作配置！",
                "selectFormAction": "尚未选中表单操作！",
                "editParam": "设置",
                "formEvents": "表单事件",
                "buttonName": "按钮名称",
                "enable": "是否可用",
                "disabled": "是否禁用",
                "hidden": "是否隐藏",
                "fieldName": "字段名称",
                "editable": "是否可写",
                "readonly": "是否只读",
                "required": "是否必填",
                "saveFail": "保存配置失败，请联系管理员查看原因！",
                "checkedRows": "尚未选择按钮集合",
                "checkeds": "尚未选择字段集合",
                "enableBtn": "可用",
                "disabledBtn": "禁用",
                "hiddenBtn": "隐藏",
                "btnBatchReset": "重置",
                "editableBtn": "可写",
                "readonlyBtn": "只读",
                "requiredBtn": "必填",
                "add": "新增",
                "delete": "删除",
                "other": "其他",
                "formBtn": "表单按钮",
                "formfield": "表单字段",
                "apptag": "单据类型",
                "functionMenu": "功能菜单",
                "formFormat": "表单格式",
                "docFormatNumber": "单据格式编号",
                "docFormatName": "单据格式名称",
                "selectedRow": "尚未选择表单定义！",
                "set": "（已设置）"
            },
            "eventDefinition": {
                "eventDefinition": "信号定义",
                "pass": "正向",
                "back": "反向",
                "abort": "终止",
                "signalRef": "信号编号",
                "name": "信号名称",
                "triggerAction": "流转方向",
                "selectedRow": "尚未选中一条触发事件！",
                "dataLength": "至少需要一个信号定义，请了解！",
                "codeNotNull": "信号编号不允许为空！",
                "nameNotNull": "信号名称不允许为空！",
                "codeNotNumber": "信号编号不允许为纯数字！",
                "codeRepeat": "信号编号不允许重复！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "add": "新增",
                "delete": "删除",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "entryFormEditor": {
                "flowForm": "流程分类",
                "code": "编号",
                "name": "名称",
                "base": "类型",
                "foundation": "基础",
                "extend": "扩展",
                "selectedRow": "尚未选择流程分类",
                "absent": "流程分类已经不存在",
                "lineNumber": "序号",
                "clickCancel": "取消",
                "clickOK": "重新绑定"
            },
            "editComponentParameter": {
                "code": "编号",
                "name": "名称",
                "required": "必填",
                "yes": "是",
                "no": "否",
                "value": "参数值",
                "openComponentFail": "获取解析构件出错",
                "componentSelection": "构件选择",
                "curComponent": "请选择流程构件",
                "executionTime": "请选择执行时机",
                "para": "参数",
                "paraRequired": "】必填",
                "execuTime": "执行时机",
                "parameterList": "参数列表",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "customizeAction": {
                "customizeAction": "自定义动作",
                "app": "移动",
                "web": "web",
                "all": "web,移动",
                "name": "名称",
                "code": "编号",
                "terminalType": "适用终端",
                "isAll": "是否默认",
                "yes": "是",
                "no": "否",
                "paramName": "编号",
                "valueText": "名称",
                "value": "参数值",
                "addActions": "自定义动作选择",
                "actionExisted": "新增的自定义动作已经存在！",
                "selectedRow": "请首先选中一条选项！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "add": "新增",
                "delete": "删除",
                "parameterList": "参数列表",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "checkCondition": {
                "zhChs": "简体中文",
                "zhCht": "繁体中文",
                "en": "英文",
                "checkCondition": "活动校验规则",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "nodeEntry": "节点进入",
                "activityBeforeStarted": "节点进入条件",
                "enterErrorTips": "进入条件不匹配提示语",
                "activityBeforeCompleted": "节点离开",
                "activityBeforeCompletedValue": "节点离开条件",
                "leaveErrorTips": "离开条件不匹配提示语",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "batchSet": {
                "targetNode": "目标节点",
                "addSignFront": "征询",
                "addSignBehind": "加签",
                "transfer": "移交",
                "notify": "知会",
                "backWardRule": "驳回规则",
                "name": "名称"
            },
            "subProcess": {
                "subProcessSet": "子流程设置",
                "specified": "指定子流程",
                "dynamic": "动态子流程",
                "inheritParent": "与父流程相同",
                "autoCreation": "自动生成下游单据",
                "variablesExpression": "变量表达式",
                "rteNull": "请选中一条生单流程",
                "orderProcess": "生单流程",
                "clickOk": "确定",
                "clickCancel": "取消",
                "inheritBizDataId": "当子流程与父流程单据不一致时，请设置子流程单据内码！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "radioGroupProcessType": "子流程类型",
                "flowForm": "流程分类",
                "processDef": "流程定义",
                "radioGroupBillSource": "单据来源",
                "autoCreationProcess": "生单流程",
                "bizDataId": "单据内码",
                "setOption": "设置选项",
                "SameParentProcess": "与父流程同一张业务单据",
                "setBizDataId": "设置单据内码",
                "subProcessOpt": "子流程选项"
            },
            "backwardRule": {
                "reEdit": "驳回活动节点已不存在，请重新编辑",
                "backwardRule": "驳回规则",
                "initialActityId": "开始节点",
                "precursorActivityId": "前置节点",
                "empty": "空",
                "name": "名称",
                "id": "标识",
                "sequence": "顺序流转",
                "backToMe": "返回我",
                "backToCurrentNode": "返回本节点",
                "popover": "1.顺序流转:按照流转线顺序进行流转; 2.返回我:完成策略为抢占：只给驳回人创建任务,完成策略为会签：驳回人与未审批人收到新任务，已审批人员自动审批通过; 3.返回本节点:实际效果受“再次进入节点时，办理人是否是节点已办人员影响”选项的影响",
                "selectAbleClick": "会签策略下，不允许动态选择驳回目标节点!",
                "dictPicked": "“驳回至空”选项请搭配“允许动态选择驳回目标节点”使用",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "rejectedTo:": "驳回至：",
                "backScope": "驳回范围",
                "defaultPrompt": "默认选取全部历史驳回节点",
                "title": "活动列表",
                "dynamicSelection": "允许动态选择驳回目标节点",
                "resubmitEffectOptions": "返回设置",
                "popover1": "1.顺序流转:按照流转线顺序进行流转; ",
                "popover2": "2.返回我:完成策略为抢占：只给驳回人创建任务,完成策略为会签：驳回人与未审批人收到新任务，已审批人员自动审批通过;",
                "popover3": "3.返回本节点:实际效果受“再次进入节点时，办理人是否是节点已办人员影响”选项的影响",
                "allowModification": "允许修改返回设置",
                "clickCancel": "取消",
                "clickOk": "确定"
            },
            "assignStrategy": {
                "all": "所有",
                "assign": "指派",
                "claim": "领用",
                "currentUser": "当前办理人",
                "procInstCreator": "流程发起人",
                "assignStrategy": "分配策略",
                "option": "选项",
                "assignmentRules": "指派规则",
                "operator": "指派操作人",
                "multiSelect": "允许选择多个待选用户",
                "necessary": "只有一个待选用户时，仍需手工选择",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "assignScope": {
                "assignScopeList": "指派节点列表",
                "required": "必填",
                "yes": "是",
                "no": "否",
                "condition": "条件",
                "add": "增加",
                "delete": "删除",
                "name": "名称",
                "deleteRow": "请首先选中一条选项！",
                "curActivity": "尚未选中行",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "nodeList": "节点列表",
                "moveUp": "上移",
                "moveDown": "下移",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "assignPerformer": {
                "currentUser": "当前办理人",
                "procInstCreator": "流程发起人",
                "global": "全员",
                "currentUnit": "本单位",
                "currentDepartment": "本部门",
                "assignPerformer": "指派规则",
                "set": "（已设置）",
                "operator": "指派操作人",
                "multiSelect": "允许选择多个待选用户",
                "necessary": "只有一个待选用户时，仍需手工选择",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "approvelItems": {
                "approvalOptions": "审批选项",
                "forward": "正向",
                "backward": "反向",
                "abort": "终止",
                "value": "编号",
                "text": "名称",
                "workFlowAction": "流转方向",
                "isDefault": "默认",
                "no": "否",
                "yes": "是",
                "commentNecessary": "意见必填",
                "attachmentNecessary": "附件上传",
                "certification": "数字签名",
                "signatureNecessary": "手写签名必填",
                "defaultComment": "默认意见",
                "zh-CHS": "中文简体",
                "zh-CHT": "中文繁体",
                "en": "英文",
                "workFlowActionNotNull": "审批项流转方向不允许为空，请修改！",
                "deleteRow": "请首先选中一条选项！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "add": "新增",
                "delete": "删除",
                "clickCancel": "取消",
                "clickOK": "确定",
                "approvalAction": "审批动作",
                "lineNumber": "序号"
            },
            "approvalPivot": {
                "remind": "文字提示",
                "type": "类型",
                "condition": "条件",
                "title": "显示名称",
                "description": "详细说明",
                "approvalPivot": "审批要点",
                "selectedRow": "尚未选中审批要点！",
                "configTitle": "尚未填写显示标题！",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "enable": "是否启用",
                "expand": "是否展开",
                "showTitle": "显示标题",
                "list": "列表",
                "add": "新增",
                "delete": "删除",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "anonymousSet": {
                "anonymousOpt": "匿名选项",
                "approver": "审批人",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "anonymousSet": "匿名设置",
                "isAnonymity": "是否启用",
                "anonymous": "匿名代称",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "activityList": {
                "name": "名称",
                "checkeds": "尚未选择活动节点",
                "lineNumber": "序号",
                "clickCancel": "取消",
                "clickOK": "确定"
            },
            "activityComponent": {
                "component": "构件",
                "method": "构件方法",
                "inconsistentParameters": "参数不一致，请检查",
                "longerExists": "构件已不存在此构件方法",
                "absent": "取消",
                "pleaseCheck": "，请检查",
                "edit": "编辑",
                "deleteRow": "删除",
                "executionTime": "执行时机",
                "cmpName": "构件名称",
                "metadataId": "构件ID",
                "methodCode": "构件方法",
                "isForCompensation": "补偿操作",
                "yes": "是",
                "no": "否",
                "operate": "操作",
                "code": "编号",
                "name": "名称",
                "value": "参数值",
                "editComponent": "编辑构件",
                "confirmDelete": "确认是否删除构件？",
                "curComponent": "尚未选中构件！",
                "newComponent": "新建构件",
                "sameCmp": "存在相同的流程构件",
                "cmpMethod": "构件方法：",
                "executionTimeNotNull": "构件执行时机不允许为空！",
                "param": "的参数",
                "required": "必填",
                "set": "（已设置）",
                "notSet": "（未设置）",
                "PROCESSINSTANCE_STARTED": "流程启动",
                "PROCESSINSTANCE_SUSPENDED": "流程挂起",
                "PROCESSINSTANCE_RESUMED": "流程恢复",
                "PROCESSINSTANCE_COMPLETED": "流程完成",
                "PROCESSINSTANCE_ABORTED": "流程终止",
                "PROCESSINSTANCE_CANCELED": "流程取消",
                "PROCESSINSTANCE_REACTIVATED": "流程复活",
                "PROCESSINSTANCE_ROLLBACK": "流程驳回",
                "PROCESSINSTANCE_RESUBMIT": "重新提交",
                "ACTIVITY_AND_PARTICIPANT_UPDATED": "环节办理人变更",
                "PROCESSINSTANCE_ABORTED_BY_ADMIN": "管理员终止",
                "PROCESSINSTANCE_BEFORE_START": "流程启动前",
                "WORKITEM_BEFORE_COMPLETE": "任务完成前",
                "WORKITEM_AFTER_COMPLETE": "任务完成后",
                "LOADDATA": "获取数据",
                "ACTIVITY_STARTED": "活动启动",
                "ACTIVITY_COMPLETED": "活动完成",
                "ACTIVITY_ABORTED": "活动终止",
                "WORKITEM_CREATED": "工作项创建",
                "WORKITEM_COMPLETED": "工作项完成",
                "WORKITEM_SUSPENDED": "工作项挂起",
                "WORKITEM_RESUMED": "工作项恢复",
                "WORKITEM_ABORTED": "工作项终止",
                "WORKITEM_RETRIEVED": "工作项取回",
                "WORKITEM_CLAIMED": "工作项领用",
                "WORKITEM_UNCLAIMED": "工作项反领用",
                "ACTIVITY_ASSIGNMENT": "任务分配前",
                "deleteNotAllowed": "取数构件不允许删除，请了解！",
                "tips": "提示：",
                "prefabricated": "已经预制外部流程构件，此处只保留取数构件",
                "add": "新增",
                "moveUp": "上移",
                "moveDown": "下移",
                "clickCancel": "取消",
                "clickOK": "确定"
            }
        }
    },
    "en": {
        "validate": {
            "noProcessHeader": "processHeader attribute does not exist in the model",
            "cmpsEmpty": "Process component is empty",
            "cmpsEmptyMsg": "The process component cannot be empty, please contact the form development to confirm the problem",
            "directNoPf": "A process whose startup mode is [direct] should not contain shared (PF) process components",
            "directNoPfMsg": "Please remove the following process components of sharing (PF):",
            "noLoadDataCmp": "There is no process component whose execution opportunity is [get data]",
            "noLoadDataCmpMsg": "The process definition cannot be short of fetching components, please contact the form development to confirm the problem",
            "noStartCmp": "The process component whose execution opportunity is [Process Start] is missing",
            "noStartCmpMsg": "The document status cannot be modified when the process is started, please contact the form development to confirm the problem",
            "lackProcessCompleteCmp": "There is no process component whose execution opportunity is [Process Completion]",
            "lackProcessCompleteCmpMsg": "The document status cannot be modified when the process is completed, please contact the form development to confirm the problem",
            "lackProcessAbortCmp": "Lack of process component with execution timing of [process termination]",
            "lackProcessAbortCmpMsg": "The document status cannot be modified when the process is terminated, please contact the form development to confirm the problem",
            "lackProcessCancelCmp": "The process component with execution opportunity of [Process Termination] is missing",
            "lackProcessCancelCmpMsg": "The document status cannot be modified when the process is terminated, please contact the form development to confirm the problem",
            "lackProcessBackCmp": "Lack of process component with execution opportunity of [Process Rejection]",
            "lackProcessBackCmpMsg": "The document status cannot be modified when the process is rejected, please contact the form development to confirm the problem",
            "lackProcessReStartCmp": "Lack of process component with execution opportunity of [resubmit]",
            "lackProcessReStartCmpMsg": "It will lead to the failure to modify the document status when the process is resubmitted, please contact the form development to confirm the problem",
            "parallelGatewayCheck": "[Parallel Gateway] does not appear in pairs",
            "parallelGatewayCheckMsg": "Parallel Gateway needs to appear as a split node and a sink node of a process branch in pairs, please modify it",
            "approvalPerformerCheck": "activity, no participant set",
            "noVariable1": "A variable has been set in the variable setting attribute of the activity",
            "noVariable2": "It no longer exists in the process attribute Process Variable. Please modify it!",
            "activity": "activity [",
            "noStartActivity": "] is illegal and does not start with [startActivity]",
            "noExclusiveGateway": "] is illegal and does not start with [ExclusiveGateway]",
            "noParallelGateway": "] is illegal and does not start with [ParallelGateway]",
            "noUserActivity": "] is illegal and does not start with [UserActivity]",
            "noOperationActivity": "] is illegal and does not start with [OperationActivity]",
            "noNotifyActivity": "] is illegal and does not start with [NotifyActivity]",
            "noCallActivitySubProcess": "] is illegal and does not start with [CallActivitySubProcess]",
            "noAutoActivity": "] is illegal and does not start with [AutoActivity]",
            "noIntermediateCatchEvent": "] is illegal and does not start with [MediaTechEventTimpl]",
            "noMessageActivity": "] is illegal and does not start with [MessageActivity]",
            "noAifCreationBillActivity": "] is illegal and does not start with [AifCreationBillActivity]",
            "noEndEvent": "] is illegal and does not start with [EndEvent]",
            "mark": "The logo is [",
            "noFlowNodeChsName": "] is empty, please modify it",
            "nameExceedsLengthLimit": "] is too long and cannot exceed 40 characters. Please modify it."
        },
        "processEditor": {
            "tip": "Tip",
            "showButton": "Show Model View Button",
            "changeRecord": "Process Change Record",
            "noDtInfo": "No design time process information exists! Please assign it first!",
            "noRtInfo": "No runtime process information exists! Please assign it first!",
            "wrongMoment": "Wrong moment for the editor!",
            "prompted": "System Prompt",
            "saveSuccess": "Save successful",
            "waitReview": "Save successful, awaiting review initiation",
            "successPublish": "Publish successful",
            "publishFail": "Publish failed,",
            "policyConflict": "In countersign strategy, 'Rejection Rule' does not allow 'Dynamically Select Rejection Levels', please modify!",
            "noPermissionToSave": "The current user does not have permission to save the process",
            "closeProc1": "Close this page?",
            "closeProc2": "The system may not save the changes you made.",
            "viewModel": "View Model",
            "copied": "The model has been copied to the clipboard",
            "button": {
                "saveProc": "Save",
                "releaseProc": "Publish",
                "sync": "Synchronize Design Time Package",
                "saveAs": "Save As",
                "procRecord": "Process Record",
                "viewProcModel": "View Model",
                "closeProc": "Close"
            }
        },
        "designer": {
            "wfEditorUi": {
                "basicElements": "Basic Elements",
                "readOnly": "Read-only"
            },
            "wfProcessCell": {
                "basicInfo": "Basic Information",
                "name": "Name",
                "nameLanguage": "Name",
                "key": "Identifier",
                "entryForm": "Process Category",
                "startMode": "Start Mode",
                "wfTitle": "Process Summary",
                "formDef": "Form Definition",
                "formsPC": "PC Form",
                "formsMobile": "Mobile Form",
                "process": "Event Listener",
                "advanced": "Advanced Properties",
                "basic": "Basic Properties",
                "wfComponent": "Process Component",
                "otherConfig": "Other Configuration",
                "processVariables": "Process Variables",
                "basicElements": "Basic Elements",
                "customizeAction": "Custom Actions",
                "timelinessInfo": "Timeliness Information",
                "enablePriority": "Enable Priority",
                "enableWholeOrderRetrieve": "Withdraw Documents Under Review",
                "messageProperty": "Image Setting",
                "timeLimitControl": "Timeout Operation",
                "messageNotice": "Message Notification",
                "extendProperty": "Extended Properties",
                "directTips": "Tip: Switching start mode to 'Direct' will remove shared (PF) related components as it is the default start mode. Please be aware of this!",
                "externalTips": "Tip: Switching start mode to 'External Process' is suitable for scenarios where the process serves as an external process for sharing. After switching, shared (PF) related components on the process will be retained. Please be aware of this!",
                "subprocessTips": "Tip: Switching start mode to 'Subprocess' is suitable for invoking sub-processes. After switching, all process components except those for data extraction will be removed. Please be aware of this!"
            },
            "WfSequenceFlowEdge": {
                "basicInfo": "Basic Information",
                "basic": "Basic Properties",
                "name": "Name",
                "nameLanguage": "Name",
                "id": "Identifier",
                "condition": "Condition Options",
                "ConditionExpression": "Condition Expression",
                "default": "Default Transition"
            },
            "wfSidebar": {
                "bizactivitylib": "Business Activity Library"
            }
        },
        "app": {
            "processDesigner": {
                "all": "All",
                "assign": "Assign",
                "claim": "Claim",
                "preempt": "Preempt Mode",
                "parallel": "Parallel Countersignature",
                "sequential": "Sequential Countersignature",
                "true": "Yes",
                "false": "No",
                "dataId": "Document ID",
                "procInstId": "Process Instance ID",
                "bizDefKey": "Entrance Document ID",
                "processDefinitionKey": "Process Definition Key",
                "procInstCreator": "Process Initiator",
                "businessCreator": "Business Initiator",
                "procInstDescription": "Process Summary",
                "comment": "Approval Comment",
                "bizDefName": "Process Category Name",
                "curLoginUsername": "Current Login User Name",
                "procInstCreatorName": "Process Initiator Name",
                "currentParticipantId": "Current Participant ID",
                "currentParticipantName": "Current Participant Name",
                "currentUser": "Current Login User",
                "preActExecutors": "Executors of the Previous Activity",
                "collectionElementVariable": "MultiInstance Child activity element variables",
                "subCollectionElementVariable": "MultiInstance Sub-process element variables",
                "nrOfInstances": "Total number of multiple instances",
                "nrOfCompletedInstances": "Number of multi-instance completed",
                "nrOfActiveInstances": "The number of multiple instances running",
                "nrOfForward": "Number of Passed Instances",
                "nrOfBackward": "Number of rejected instances",
                "nrOfAbort": "Number of terminated instances",
                "conclusionType": "Conclusion Type",
                "conclusionValue": "Conclusion Value",
                "directSuperior": "Direct Superior",
                "higherSuperior": "Indirect Superior",
                "DIRECT": "Direct",
                "EXTERNAL_PROCESS": "External Process",
                "SUB_PROCESS": "Subprocess",
                "ALL": "PC and Mobile",
                "WEB": "PC",
                "APP": "Mobile",
                "conclusionTypeTips": "The direction of item circulation, 1 for forward, 2 for backward, 3 for termination",
                "conclusionValueTips": "Item number, for example, 'Pass', 'Back', 'Refuse'",
                "copy": "_Copy",
                "saveAs": "Save As",
                "tips": "System Tips",
                "saveAsSuccess": "Save As Successful",
                "saveAsFail": "Save As Failed, please check if the process is correct!",
                "syncDt": "Whether to synchronize the current version of the process definition to the design-time process definition package",
                "syncSuccess": "Synchronization Successful",
                "beforeCompleteStrategyChange": "There are running activity instances in the current node, adjusting the completion strategy is not allowed, please be aware!",
                "releaseProcess": "Review before Release",
                "auto": "Auto-generated Form",
                "push": "Push-generated Form",
                "pull": "Pull-generated Form",
                "creation": "Generate the target form through the form generation process"
            }
        },
        "multiInstanceLoopCharacteristics": {
            "loopCharacteristics": "Multi-instance Setup",
            "set": "(Set)",
            "notSet": "(Not Set)",
            "isEnable": "Enable",
            "isSequential": "Sequential",
            "loopCardinality": "Elements Collections",
            "completionConditionRules": "Completion COnditions",
            "promptAct1": "1. The number of elements in [Collection] is the number of instances of the sub-activity start.",
            "promptAct2": "2. When the sub-activity starts, the system will split and map the elements in the [Collection] to the [Element Variables] of each sub-activity instance.",
            "promptProc1": "1. The number of elements in [Collection] is the number of instances of the sub-process start.",
            "promptProc2": "2. When the sub-process starts, the system will split and map the elements in the [Collection] to the [Element Variables] of each sub-process instance.",
            "checkPrompt": "There are running activity instances in the current node, adjusting is not allowed",
            "conditionRulesSet": "(Set)",
            "completionConditionRulesList": {
                "forward": "Forward",
                "backward": "BackWard",
                "abort": "Abort"
            }
        },
        "component": {
            "optins": {
                "wfOptions": "Workflow Options",
                "specified": "Specified Subprocess",
                "dynamic": "Dynamic Subprocess",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "subProcessType": "Subprocess Type",
                "processType": "Process Type",
                "bizDef": "Process Category",
                "procDef": "Process Definition",
                "clickCancel": "Cancel",
                "clickOk": "OK"
            },
            "voConfig": {
                "documentInfo": "Document Information",
                "viewModelSelection": "View Model Selection",
                "cancel": "Cancel",
                "clickOk": "OK",
                "selectOne": "Select One",
                "documentTypeSelect": "Document Type Selection",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "viewModel": "View Model",
                "documenttype": "Document Type",
                "placeholder": "Please Select"
            },
            "variableSetting": {
                "constant": "Constant",
                "expression": "Expression",
                "component": "Component",
                "ACTIVITY_STARTED": "Activity Started",
                "ACTIVITY_COMPLETED": "Activity Completed",
                "varAssign": "Variable Assignment",
                "varNumber": "Variable Number",
                "REQUIRED": "Required",
                "varName": "Variable Name",
                "valueType": "Value Type",
                "executionTime": "Execution Time",
                "valueText": "Variable Value",
                "processVariables": "Process Variables",
                "notSelectedVar": "Variable Not Selected!",
                "valueCannotEmpty": "Variable Value Cannot be Empty!",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "add": "Add",
                "delete": "Delete",
                "serialNumber": "Serial Number",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "inconsistentParameters": "Inconsistent Method Parameters for the Current Component, Please Update!",
                "methodNotExist": "The Current Component No Longer Exists This Method, Please Update!",
                "parameterName": "Parameter Name",
                "parameterValue": "Parameter Value",
                "methodnotSelected": "Component Method Not Selected Yet",
                "metadataNotExist": "Help Metadata Does Not Exist, Please Contact the System Administrator for Details!",
                "errorObtainComponent": "Error Obtaining Parsed Component",
                "componentSelection": "Component Selection",
                "componentName": "Component Name",
                "parameterList": "Parameter List",
                "lineNumber": "No."
            },
            "urgeHandleRule": {
                "urgentApproval": "Urge Approval:",
                "pleaseApprove": "Please Approve",
                "soOn": " ",
                "urgeHandle": "Urge Handle",
                "noSendingMethod": "No Sending Method Selected Yet!",
                "setMessageTemplate": "Message Template Needs to be Set When Using SMS as the Message Channel",
                "codeEmpty": "SMS Template Number Cannot be Empty",
                "noMessageSubject": "No Message Subject Configured Yet!",
                "noMessageContent": "No Message Content Selected Yet!",
                "earliestTimeNotEmpty": "Earliest Urge Time Cannot be Empty",
                "minimumTimeNotEmpty": "Minimum Urge Interval Cannot be Empty",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "enableUrgeHandle": "Enable Urgent Handling",
                "timeSetting": "Time Setting",
                "earliestTime": "Earliest Urge Time (Hours)",
                "minimumInterval": "Minimum Urge Interval (Hours)",
                "sendingMethod": "Sending Method",
                "messageSubject": "Message Subject",
                "supportEditing": "Support Editing",
                "messageContent": "Message Content",
                "displayReminder": "Display Urgent Reminder",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "titleExpression": {
                "zh-CHS": "Simplified Chinese",
                "zh-CHT": "Traditional Chinese",
                "en": "English",
                "taskDescription": "Task Description",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "currentLanguage": "Current Summary Language:",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "timeLimitControl": {
                "timedOutOperation": "Timed Out Operation",
                "constant": "Constant",
                "scope": "Time Scope",
                "day": "Day(s)",
                "hour": "Hour(s)",
                "minute": "Minute(s)",
                "BeforeDuration": "Before Due",
                "OnDuration": "On Due",
                "AfterDuration": "After Due",
                "SendMessageExpireOperation": "Expiring Alert",
                "AutoHandleExpireOperation": "Automatic Processing",
                "curDay": "Current Day",
                "durationType": "Duration Type",
                "required": "Required",
                "timeDuration": "Duration",
                "timeUnit": "Unit",
                "operationTypeName": "Operation Type Name",
                "sendType": "Operation",
                "onlyBeInteger": "Task Duration Can Only Be an Integer!",
                "setOperation": "Please Set Timeout Operation!",
                "setType": "Please Set Automatic Processing Type!",
                "setComments": "Please Set Automatic Processing Opinion!",
                "selectedOperation": "No Expiring Operation Selected Yet!",
                "notSupportAutomatic": "If the Next Node is Assigned by the Current Operator, the Current Node Does Not Support Automatic Task Processing",
                "warningMessage": "Warning Message",
                "automaticProcessing": "Automatic Processing",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "timelinessControl": "Task Processing Timeliness Control",
                "isEnable": "Enable or Not",
                "taskDeadline": "Task Deadline",
                "timelyOperation": "Timely Alert Operation",
                "actionList": "Action List",
                "add": "Add",
                "remove": "Remove",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "workItemParticipant": "Current Node Operator",
                "procInstCreator": "Process Initiator",
                "to-doMessageTimeOut": "You Have a Pending Task Message About to Time Out.",
                "messageTimeOut": "You Have a Message About to Time Out",
                "agree": "Agree"
            },
            "sendMessageOperation": {
                "procInstCreator": "Process Initiator",
                "workItemParticipant": "Current Node Handler",
                "preActExecutors": "Previous Node Handlers",
                "day": "Day",
                "hour": "Hour",
                "minute": "Minute",
                "cycleTimeNotEmpty": "Cycle time interval cannot be empty!",
                "sendMethodNotEmpty": "Send method cannot be empty!",
                "subjectNotEmpty": "Message subject cannot be empty!",
                "contentNotEmpty": "Message content cannot be empty!",
                "recipientNotEmpty": "Recipient cannot be empty!",
                "messageTemplate": "Message template needs to be set when SMS channel is enabled",
                "smsTemplateNumberNotEmpty": "SMS template number cannot be empty",
                "cycleEnable": "Enable cycle warning",
                "cycleTime": "Cycle time interval",
                "sendType": "Send method",
                "subject": "Message subject",
                "message": "Message content",
                "receiverVari": "Recipient",
                "sysUsers": "System users",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "opinionsNotEmpty": "Automatic handling opinion cannot be empty!",
                "processingNotEmpty": "Automatic handling cannot be empty!",
                "automaticProcessSet": "Automatic handling settings",
                "automaticProcessMethod": "Automatic handling method",
                "automaticOpinionHandle": "Automatic handling opinion"
            },
            "smsMessageTemplate": {
                "smsTemplateContent": "Template text defined in third-party SMS service provider, for example: Your GS Cloud data platform account has been activated. Username: ${username}, initial password: ${code}. Please log in to the system in time.",
                "code": "Variable",
                "value": "Value",
                "noRowsSelected": "No rows selected",
                "smsMessageTemplate": "SMS Service Template",
                "tips1": "Message template refers to the association of template variables defined by third-party SMS service provider with GS Cloud variables after the template has been defined.",
                "tips2": "Template number defined in the third-party SMS service provider, for example: Aliyun SMS_220626324",
                "tips3": "Configure the association between variables in the third-party SMS service provider's template and variables in GSCloud",
                "smsTemplateNumber": "SMS template number",
                "smsVariableBinding": "SMS variable binding",
                "addSmsVariable": "Add",
                "deleteSmsVariable": "Delete"
            },
            "signRule": {
                "countersignRules": "Countersign rules",
                "byNumber": "By Quantity",
                "byProportion": "By Percentage (%)",
                "customConditions": "Custom Conditions",
                "value": "Number",
                "text": "Name",
                "conclusionName": "Conclusion Name",
                "conclusionValue": "Conclusion Value",
                "calculateType": "Calculation Method",
                "conditionValue": "Condition Value",
                "waitAllVotes": "Wait for all members to complete",
                "yes": "Yes",
                "no": "No",
                "notEmpty": "When the completion strategy is countersignature, the countersign rules cannot be empty. Please understand!",
                "pleaseSelect": "Please select an item first!",
                "maxConditionValue": "The maximum value of the condition must be 100",
                "minConditionValue": "The minimum value of the condition must be 0",
                "noConditional": "No conditional value is required when the execution mode is unanimous or one vote",
                "set": "(Set)",
                "ruleList": "Rule List",
                "approvalOptions": "Approval Options",
                "clickCancel": "Cancel",
                "deleteRow": "Reset",
                "clickOK": "OK"
            },
            "saveAsEdit": {
                "public": "Public",
                "private": "Private",
                "code": "Number",
                "name": "Name",
                "nameNotEmpty": "Process name cannot be empty",
                "organizationNotEmpty": "Maintenance organization cannot be empty",
                "organization": "Organization",
                "basicAttributes": "Basic Attributes",
                "processName": "Process name",
                "processKeyValue": "Process Key value",
                "maintenanceOrg": "Maintenance organization",
                "accessLevel": "Access level",
                "saveAsCancel": "Cancel",
                "saveAsOK": "OK"
            },
            "release": {
                "release": "Process Release",
                "update": "Process Update",
                "applicantName": "Applicant Name",
                "applicantDepartment": "Applicant Department",
                "procName": "Process name",
                "procVersion": "Process version",
                "releaseType": "Release type",
                "textDetail": "Description",
                "saveAsCancel": "Cancel",
                "saveAsOK": "OK"
            },
            "processVariables": {
                "string": "String",
                "integer": "Integer",
                "decimal": "Decimal",
                "boolean": "Boolean",
                "constant": "Constant",
                "expression": "Expression",
                "component": "Component",
                "name": "Variable number",
                "required": "Required",
                "documentation": "Variable name",
                "basicType": "Variable type",
                "description": "Description",
                "tag": "Initial value type",
                "valueText": "Initial value",
                "processVariables": "Process variables",
                "notSelected": "No process variables selected!",
                "variableNumberEmpty": "Variable number cannot be empty!",
                "variableNameEmpty": "Variable name cannot be empty!",
                "variableNumberNotStandard": "Variable number can only contain letters, numbers, and underscores, and cannot start with a number!",
                "tagNotEmpty": "Initial value type cannot be empty!",
                "codeDuplicates": "Process variable number cannot be duplicated!",
                "alreadyExists": "The added variable already exists!",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "add": "Add",
                "delete": "Delete",
                "number": "Number",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "participant": {
                "user": "User",
                "variable": "Variable Participant",
                "position": "Position",
                "role": "Role",
                "component": "Component Participant",
                "reportingLine": "Reporting Line",
                "matrix": "Matrix",
                "activityExecutor": "Historical Activity Executor",
                "organization": "Organization/Department",
                "all": "All",
                "assign": "Assign",
                "claim": "Claim",
                "currentUser": "Current Handler",
                "procInstCreator": "Process Initiator",
                "participantSet": "Participant Set",
                "order": "Order",
                "type": "Type",
                "performerName": "Name",
                "description": "Description",
                "condition": "Enable Condition",
                "dataMovement1": "Move default handler data to alternative handlers?",
                "dataMovement2": "Move alternative handler data to default handler?",
                "participantSelection": "Participant Selection",
                "selectProcessVariables": "Process variables not selected yet!",
                "selectVariableValueType": "Variable value type not selected yet!",
                "selectRelation": "Relation not selected yet!",
                "selectPosition": "Position not selected yet!",
                "selectOrgType": "Organization type not selected yet!",
                "orgFill": "Organization not filled yet!",
                "refOrgIdNotNull": "When reference type is organization, the reference organization field cannot be empty",
                "refUserIdNotNull": "When reference type is system user/employee, the reference person field cannot be empty",
                "repDefConfigured": "The reporting line has already been configured",
                "atLeastOneCondition": "At least one condition field must exist",
                "dataFieldAliasNotNull": "Data field cannot be empty",
                "matrixConfigured": "The matrix has already been configured",
                "selectPerformer": "Performer not selected yet",
                "definitionDeleted": "The definition of this reporting line data has been deleted, this data will be deleted",
                "matrixDeleted": "The definition of this matrix data has been deleted, this data will be deleted",
                "selectParticipantInfo": "Please select a participant information first!",
                "noRowSelected": "No row selected yet!",
                "selectDefaultHandler": "Please select a default handler first",
                "selectpotentialtHandler": "Please select an alternative handler first",
                "org": "Organization:",
                "positionType1": "Position type: General position, Organization:",
                "positionType2": "Position type: General position",
                "positionType3": "Position type: Organization position",
                "comp": "Component:",
                "parameters:": ", Parameters: {",
                "referencePerson:": "Reference person: ",
                "referenceOrganization:": "Reference organization: ",
                "condition1": "Condition 1: ",
                "condition2": "Condition 2: ",
                "condition3": "Condition 3: ",
                "data": "Data: ",
                "set": "(Set)",
                "notSet": "(Not set)",
                "allocationPolicy": "Allocation Policy",
                "operator": "Assign Operator",
                "multiSelect": "Allow Multiple Selection",
                "necessary": "Only one candidate user, still requires manual selection",
                "notifyRecipient": "Notify Recipient",
                "defaultHandler": "Default Handler",
                "new": "Add",
                "editPerformer": "Edit",
                "removePerformer": "Remove",
                "clearPerformer": "Clear",
                "moveUp": "Move Up",
                "moveDown": "Move Down",
                "alternativeHandler": "Alternative Handler",
                "isAllScope": "When specifying participants, there is no restriction, select from all users",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "alternativeScope": "Alternative Scope",
                "orgId": "OrgID",
                "includeChildren": "Include Children",
                "conditon": "Conditon",
                "currentUnit": "Current Unit",
                "currentDepartment": "Current Department",
                "variableOrganization": "Variable Org"
            },
            "activityExecutor": {
                "name": "Name",
                "eventHandler": ">Activity Executor",
                "nodeName": "Node Name",
                "enablingConditions": "Enable Conditions",
                "activityList": "Activity List",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "componentPerformer": {
                "componentMethod": "Current component method parameters are inconsistent, please update!",
                "methodNotExist": "This method does not exist in the current component, please update!",
                "code": "Code",
                "name": "Name",
                "description": "Description",
                "valueText": "Parameter Value",
                "help": "Help",
                "errorObtaining": "Error obtaining parsing component",
                "componentSelection": "Component Selection",
                "metadataNotExist": "Help metadata does not exist!",
                "serverSideNotFound": "Server side did not find help metadata, please check if the metadata has been deployed to the environment",
                "componentName": "Component Name",
                "componentSelect": "Component Selection",
                "parameterList": "Parameter List"
            },
            "matrixPerformer": {
                "code": "Code",
                "name": "Name",
                "help": "Help",
                "multivalue": "Multi",
                "enumSelection": "Enum Selection",
                "refMatrixTable": "Reference Matrix Table",
                "matrixTable": "Matrix Table",
                "curDataFieldValue": "Result Column",
                "conditionFields": "Condition Fields",
                "condition": "Enable Condition",
                "key": "Key",
                "value": "Value",
                "notSelectEnum": "Enum value not selected yet",
                "cancel": "Cancel",
                "onConfirm": "Confirm",
                "lineNumber": "Line Number"
            },
            "performerOptions": {
                "leave": "Flow Down",
                "throwException": "Exception Prompt",
                "sys": "User ID",
                "administrative_staff": "Employee ID",
                "procInstCreator": "Process Initiator",
                "preActExecutors": "Previous Node Executors",
                "allPassExecutors": "All Approved Personnel",
                "performerOptions": "Performer Options",
                "exclusionNotAllowed": "All Approved Personnel have set automatic approval, previous node executors are not allowed to be excluded by default!",
                "approvalNotAllowed": "When [Allocation Policy] is [Claim], automatic approval is not allowed to be set, please be aware!",
                "approvalNotAllowedAsSet": "All Approved Personnel have set not allowed for approval, previous node executors are not allowed to be automatically approved by default!",
                "allocationStrategyIsCollect": "When [Allocation Policy] is [Claim], automatic approval is not allowed to be set, please be aware!",
                "set": "(Set)",
                "advancedOptions": "Advanced Performer Options",
                "historicFirst": "When entering the node again, the handler is the previously handled personnel of the node",
                "noPerformerStrategy": "Handler is Empty Strategy:",
                "excludeProcInstCreator": "Exclude Handler Options",
                "defaultNotParticipate": "Process Initiator does not participate in approval by default",
                "excludePreActExecutors": "Previous node executors do not participate in approval by default",
                "excludeAllPassExecutors": "All Approved Personnel do not participate in approval by default",
                "excludeExprPerformer": "Process Variable:",
                "variableOrgTypes": "Variable Value Types:",
                "automaticApprovalOptions": "Automatic Approval Options",
                "autoProcInstCreator": "Process Initiator is automatically approved by default",
                "autoPreActExecutors": "Previous node executors are automatically approved by default",
                "autoAllPassExecutors": "All Approved Personnel are automatically approved by default",
                "cancel": "Cancel",
                "clickOK": "OK"
            },
            "positionPerformer": {
                "orgPosition": "Organization Position",
                "generalPosition": "General Position",
                "sysPositions": "System Positions",
                "positionType": "Position Type",
                "role": "Role",
                "position": "Position",
                "sysType": "Organization Type",
                "placeholder": "Please select",
                "orgId": "Organization ID",
                "condition": "Enable Condition",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "reportingLine": {
                "higherSuperior": "Indirect Supervisor",
                "directSuperior": "Direct Supervisor",
                "code": "Code",
                "name": "Name",
                "dept": "Organization",
                "sysUser": "System User",
                "employee": "Employee",
                "businessFields": "Business Fields",
                "defName": "Reporting Definition",
                "dimension": "Reporting Level",
                "curReportingRefer": "Reference Type",
                "usersName": "Reference Person",
                "refOrgId": "Reference Organization",
                "condition": "Enable Condition",
                "definitionOfReport": "Definition of Reporting Relationship"
            },
            "userPerformer": {
                "regularUser": "Regular User",
                "variablePart": "Variable Participant",
                "sys": "System User",
                "administrative_organization": "Employee",
                "cantUseContext": "Administrative staff type cannot use this context variable",
                "user": "User",
                "variable": "Variable",
                "condition": "Enable Condition"
            },
            "variablePerformer": {
                "sys": "User ID",
                "administrative_staff": "Employee ID",
                "oneself": "Self",
                "administrative_organization": "Department ID",
                "cantUseContext": "Administrative staff type cannot use this context variable",
                "processVariables": "Process Variables",
                "variableOrgTypes": "Variable Value Types",
                "relationShipType": "Relationship",
                "condition": "Enable Condition",
            },
            "orgPotentialOwner": {
                "optionSettings": "Option Settings",
                "global": "All Members",
                "currentUnit": "Current Unit",
                "currentDepartment": "Current Department",
                "addSignBehind": "Add Signature",
                "addSignFront": "Consult",
                "transfer": "Transfer",
                "notify": "Notify",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "option": "Option",
                "enable": "Enable or Not",
                "range": "Range",
                "OrgId": "Org Id",
                "variableOrganization": "Variable Org",
                "includeChildren": "Include Subordinates",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "limit": "Limit Scope",
                "turnOffPrompt": "Please Turn off the Scope of People option!"
            },
            "note": {
                "placeholder": "Please enter process change record",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "MessageNotice": {
                "notify": "Message Notice",
                "subject": "Message Subject",
                "content": "Message Content",
                "sendTime": "Sending Time",
                "sendType": "Send Method",
                "receiverText": "Message Receiver",
                "procInstCreator": "Process Initiator,",
                "workItemParticipant": "Task Receiver,",
                "messageSet": "Message Settings",
                "selectedRow": "No message notification selected yet!",
                "noCopy": "No message notification attributes to copy!",
                "batchCopy": "Batch Copy",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "add": "Add",
                "edit": "Edit",
                "delete": "Delete",
                "lineNumber": "Number",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "messContent": { "expr": "\'You have a message notification.\'", "sexpr": "" },
                "procComplete": "Process Completed",
                "procAborted": "Process Aborted",
                "procRollBack": "Process Rejected",
                "workCreated": "Task Created",
                "actComplete": "Activity Completed",
                "actAborted": "Activity Aborted",
                "email": "Email",
                "sms": "SMS",
                "cloudplus": "Cloud",
                "processParticipant": "Process Participant",
                "variableParticipant": "Variable Participant",
                "userParticipant": "Designated User",
                "positionParticipant": "Position",
                "activityExecutorParticipant": "Historical Handler",
                "sys": "System User",
                "administrative_organization": "Employee",
                "name": "Name",
                "noTargetNode": "No node selected yet!",
                "noMessageNotifyAttribute!": "No message notification attribute!"
            },
            "messageNoticeEdit": {
                "procInstCreator": "Process Initiator",
                "activityExecutorParticipant": "Historical Handler",
                "workItemParticipant": "Task Handler",
                "sys": "System User",
                "administrative_organization": "Employee",
                "processParticipant": "Process Participant",
                "workItemReceiveParticipant": "Task Receiver",
                "variableParticipant": "Variable Participant",
                "userParticipant": "Designated User",
                "positionParticipant": "Position",
                "sendType": "Send method cannot be empty",
                "smsMessageTemplate": "Message channel requires SMS, please set the message template",
                "smsMessageTemplateCode": "SMS template code cannot be empty",
                "sendTime": "Sending time cannot be empty",
                "subject": "Message subject cannot be empty",
                "content": "Message content cannot be empty",
                "receivers": "Receiver cannot be empty!",
                "processParticipantNotNull": "Process participant cannot be empty",
                "activityDefIdNotNull": "When process participant is historical handler, the handling node cannot be empty",
                "variableParticipantNotNull": "Variable participant cannot be empty",
                "orgType": "Organization type of variable participant cannot be empty",
                "userIds": "Designated user cannot be empty",
                "positionId": "Position cannot be empty",
                "activityList": "Activity List",
                "position": "Position",
                "optionalNodes": "Optional Nodes",
                "targetNodeList": "Target Node List",
                "placeholder": "Please select target node",
                "optionalAttribute": "Optional Attributes",
                "lineNumber": "Number",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "messSendType": "Message Channel",
                "messSubject": "Message Subject",
                "enable": "Enable Expression",
                "messContent": "Message Content",
                "recipient": "Receiver",
                "addReceiver": "Add",
                "organization": "Organization:",
                "posi": "Position:"
            },
            "jumpScope": {
                "targetNodeOptions": "Target Node Options",
                "name": "Name",
                "outConnectNode": "Process Diagram Connection Node",
                "global": "All Nodes within the Process",
                "afterNodes": "All Successor Nodes",
                "specifiedSet": "Process Diagram Connection Node + Additional Nodes",
                "firstNode": "Conditional true connection node, when there are multiple options, the first one is selected by default",
                "nullNode": "Default is empty, manual selection every time",
                "specifyNode": "Specify the default node",
                "noSetTargetNode": "Target node options not set yet, please understand!",
                "noSetSpecifyNode": "Default node not specified yet, please understand!",
                "selectedRow": "Please select an option first!",
                "optionalNodes": "Optional Nodes",
                "listOfAdditional": "List of Additional Nodes",
                "pleaseSelect1": "Please select additional nodes",
                "defaultNode": "Default Node",
                "pleaseSelect2": "Please select default node",
                "defaultNodeList": "Default Node List",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "set": "(Set)"
            },
            "imageSet": {
                "imageSet": "Image Setting",
                "onlyView": "View Only",
                "edit": "Edit",
                "reScanStart": "Initiate Re-scan",
                "reScanComplete": "Re-scan Complete",
                "mutualExclusion": "[View Only] option is exclusive with other options, please understand!",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "imageOperation": "Image Operation Permission",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "extendProperty": {
                "extendProperty": "Extended Property",
                "true": "Yes",
                "false": "No",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "illustrate": "Illustrate",
                "placeholder": "Please select",
                "cancel": "Cancel",
                "clickOK": "OK"
            },
            "expressionEditor": {
                "expressionEditor": "Expression Editor",
                "notSet": "(Not Set)",
                "clickCancel": "Cancel",
                "changeType": "Switch Type",
                "clickOK": "OK"
            },
            "executeForms": {
                "executeForms": "Form Definition",
                "parameters": "Parameters [",
                "typeAsvariable": "] is of variable type, but does not exist in process variables",
                "parameterSettings": "Parameter Settings",
                "formDefinitionList": "Form Definition List",
                "notSet": "(Not Set)",
                "default": "Process Default Form",
                "processEmbeddedForm": "Process-Embedded Form",
                "formEmbedProcess": "Form-Embedded Process",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "noForm": "No Form Format",
                "form": "Select Form",
                "placeholder": "Please select",
                "parametersSet": "Parameters",
                "key": "Variable ID",
                "name": "Variable Name",
                "lineNumber": "Serial Number",
                "code": "Code",
                "tag": "Type",
                "value": "Parameter Value",
                "variable": "Variable",
                "constant": "Constant",
                "expression": "Expression",
                "method": "Method Identifier",
                "methodName": "Method Name",
                "description": "Description",
                "workFlowAction": "Workflow Direction",
                "formOperations": "Form Operations",
                "executionTime": "Execution Time",
                "sortOrder": "Execution Order",
                "methodParameters": "Parameters",
                "selectFormActionConfig": "Form Action Configuration not selected!",
                "selectFormAction": "Form Action not selected!",
                "editParam": "Settings",
                "formEvents": "Form Events",
                "buttonName": "Button Name",
                "enable": "Enabled",
                "disabled": "Disabled",
                "hidden": "Hidden",
                "fieldName": "Field Name",
                "editable": "Editable",
                "readonly": "Read-only",
                "required": "Required",
                "saveFail": "Failed to save configuration. Please contact the administrator for details!",
                "checkedRows": "No button collection selected",
                "checkeds": "No field collection selected",
                "enableBtn": "Enabled",
                "disabledBtn": "Disabled",
                "hiddenBtn": "Hidden",
                "btnBatchReset": "Reset",
                "editableBtn": "Editable",
                "readonlyBtn": "Read-only",
                "requiredBtn": "Required",
                "add": "Add",
                "delete": "Delete",
                "other": "Other",
                "formBtn": "Form Button",
                "formfield": "Form Field",
                "apptag": "Document Type",
                "functionMenu": "Function Menu",
                "formFormat": "Form Format",
                "docFormatNumber": "Document Format Number",
                "docFormatName": "Document Format Name",
                "selectedRow": "No form definition selected!",
                "set": "(Set)"
            },
            "eventDefinition": {
                "eventDefinition": "Signal Definition",
                "pass": "Forward",
                "back": "Backward",
                "abort": "Abort",
                "signalRef": "Signal ID",
                "name": "Signal Name",
                "triggerAction": "Workflow Direction",
                "selectedRow": "No trigger event selected!",
                "dataLength": "At least one signal definition is required!",
                "codeNotNull": "Signal ID cannot be empty!",
                "nameNotNull": "Signal Name cannot be empty!",
                "codeNotNumber": "Signal ID cannot be pure numbers!",
                "codeRepeat": "Signal ID cannot be repeated!",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "add": "Add",
                "delete": "Delete",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "entryFormEditor": {
                "flowForm": "Process Category",
                "code": "Code",
                "name": "Name",
                "base": "Base",
                "foundation": "Foundation",
                "extend": "Extended",
                "selectedRow": "No process category selected",
                "absent": "Process category no longer exists",
                "lineNumber": "Serial Number",
                "clickCancel": "Cancel",
                "clickOK": "Rebind"
            },
            "editComponentParameter": {
                "code": "Code",
                "name": "Name",
                "required": "Required",
                "yes": "Yes",
                "no": "No",
                "value": "Parameter Value",
                "openComponentFail": "Failed to parse component",
                "componentSelection": "Component Selection",
                "curComponent": "Please select a process component",
                "executionTime": "Please select execution time",
                "para": "Parameter",
                "paraRequired": "] is required",
                "execuTime": "Execution Time",
                "parameterList": "Parameter List",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "customizeAction": {
                "customizeAction": "Customize Action",
                "app": "Mobile",
                "web": "Web",
                "all": "Web, Mobile",
                "name": "Name",
                "code": "Code",
                "terminalType": "Terminal Type",
                "isAll": "Default",
                "yes": "Yes",
                "no": "No",
                "paramName": "Code",
                "valueText": "Name",
                "value": "Parameter Value",
                "addActions": "Select Custom Actions",
                "actionExisted": "The added custom action already exists!",
                "selectedRow": "Please select an option first!",
                "set": "(Set)",
                "notSet": "(Not set)",
                "add": "Add",
                "delete": "Delete",
                "parameterList": "Parameter List",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "checkCondition": {
                "zhChs": "Simplified Chinese",
                "zhCht": "Traditional Chinese",
                "en": "English",
                "checkCondition": "Activity Validation Rule",
                "set": "(Set)",
                "notSet": "(Not set)",
                "nodeEntry": "Node Entry",
                "activityBeforeStarted": "Node Entry Condition",
                "enterErrorTips": "Enter Condition Mismatch Tips",
                "activityBeforeCompleted": "Node Exit",
                "activityBeforeCompletedValue": "Node Exit Condition",
                "leaveErrorTips": "Leave Condition Mismatch Tips",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "batchSet": {
                "targetNode": "target Node",
                "addSignFront": "addSign Front",
                "addSignBehind": "addSign Behind",
                "transfer": "transfer",
                "notify": "notify",
                "backWardRule": "backWard Rule",
                "name": "name"
            },
            "subProcess": {
                "subProcessSet": "Subprocess Settings",
                "specified": "Specify Subprocess",
                "dynamic": "Dynamic Subprocess",
                "inheritParent": "Same as Parent Process",
                "autoCreation": "Auto Generate Downstream Documents",
                "variablesExpression": "Variable Expression",
                "rteNull": "Please select a document workflow",
                "orderProcess": "Document Workflow",
                "clickOk": "OK",
                "clickCancel": "Cancel",
                "inheritBizDataId": "When the subprocess is inconsistent with the parent process document, please set the subprocess document ID!",
                "set": "(Set)",
                "notSet": "(Not set)",
                "radioGroupProcessType": "Sub Type",
                "flowForm": "Flow Category",
                "processDef": "Process Definition",
                "radioGroupBillSource": "Source",
                "autoCreationProcess": "Auto Process",
                "bizDataId": "Document ID",
                "setOption": "Set options",
                "SameParentProcess": "The same business document as the parent process",
                "setBizDataId": "Set document ID",
                "subProcessOpt": "Subprocess Options"
            },
            "backwardRule": {
                "reEdit": "The rejected activity node no longer exists. Please re-edit.",
                "backwardRule": "Rejection Rule",
                "initialActityId": "Start Node",
                "precursorActivityId": "Predecessor Node",
                "empty": "Empty",
                "name": "Name",
                "id": "Identifier",
                "sequence": "Sequential Transition",
                "backToMe": "Return to Me",
                "backToCurrentNode": "Return to Current Node",
                "popover": "1. Sequential Transition: Transition according to the order of the flow lines; 2. Return to Me: If the completion strategy is Preemptive, only create tasks for the person who rejected it. If the completion strategy is Countersignature, the person who rejected it and the unapproved person will receive new tasks, and the approved personnel will automatically approve them; 3. Return to Current Node: The actual effect is affected by the option 'Is the executor a person who has already processed the node when entering the node again'",
                "selectAbleClick": "Under the Countersignature strategy, dynamic selection of rejection target nodes is not allowed!",
                "dictPicked": "Please use the 'Revert to Empty' option with the 'Allow dynamic selection of rejection target nodes' option",
                "set": "(Set)",
                "notSet": "(Not set)",
                "rejectedTo:": "Reverted to:",
                "backScope": "Scope of rejection",
                "defaultPrompt": "All historical rejection nodes are selected by default",
                "title": "Activity List",
                "dynamicSelection": "Allow dynamic selection of rejection target nodes",
                "resubmitEffectOptions": "Return Settings",
                "popover1": "1. Sequential Transition: Transition according to the order of the flow lines;",
                "popover2": "2. Return to Me: If the completion strategy is Preemptive, only create tasks for the person who rejected it. If the completion strategy is Countersignature, the person who rejected it and the unapproved person will receive new tasks, and the approved personnel will automatically approve them;",
                "popover3": "3. Return to Current Node: The actual effect is affected by the option 'Is the executor a person who has already processed the node when entering the node again'",
                "allowModification": "Allow modification of return settings",
                "clickCancel": "Cancel",
                "clickOk": "OK"
            },
            "assignStrategy": {
                "all": "All",
                "assign": "Assign",
                "claim": "Claim",
                "currentUser": "Current Executor",
                "procInstCreator": "Process Initiator",
                "assignStrategy": "Assignment Strategy",
                "option": "Option",
                "assignmentRules": "Assignment Rules",
                "operator": "Assign Operator",
                "multiSelect": "Multiple candidate users can be selected",
                "necessary": "Only one candidate user, still requires manual selection",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "assignScope": {
                "assignScopeList": "Assigned Node List",
                "required": "Required",
                "yes": "Yes",
                "no": "No",
                "condition": "Condition",
                "add": "Add",
                "delete": "Delete",
                "name": "Name",
                "deleteRow": "Please select an option first!",
                "curActivity": "No row selected",
                "set": "(Set)",
                "notSet": "(Not set)",
                "nodeList": "Node List",
                "moveUp": "Move Up",
                "moveDown": "Move Down",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "assignPerformer": {
                "currentUser": "Current User",
                "procInstCreator": "Process Initiator",
                "global": "Global",
                "currentUnit": "Current Unit",
                "currentDepartment": "Current Department",
                "assignPerformer": "Assign Rule",
                "set": "(Set)",
                "operator": "Assign Operator",
                "multiSelect": "Allow Selecting Multiple Candidates",
                "necessary": "When there is only one candidate, manual selection is still required",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "approvelItems": {
                "approvalOptions": "Approval Options",
                "forward": "Forward",
                "backward": "Backward",
                "abort": "Abort",
                "value": "Number",
                "text": "Name",
                "workFlowAction": "Workflow Direction",
                "isDefault": "Default",
                "no": "No",
                "yes": "Yes",
                "commentNecessary": "Comment Required",
                "attachmentNecessary": "Attachment Upload",
                "certification": "Digital Signature",
                "signatureNecessary": "Manual Signature Required",
                "defaultComment": "Default Comment",
                "zh-CHS": "Simplified Chinese",
                "zh-CHT": "Traditional Chinese",
                "en": "English",
                "workFlowActionNotNull": "Approval item workflow direction cannot be empty, please modify!",
                "deleteRow": "Please select an option first!",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "add": "Add",
                "delete": "Delete",
                "clickCancel": "Cancel",
                "clickOK": "OK",
                "approvalAction": "Approval Action",
                "lineNumber": "Number"
            },
            "approvalPivot": {
                "remind": "Text Prompt",
                "type": "Type",
                "condition": "Condition",
                "title": "Display Name",
                "description": "Detailed Description",
                "approvalPivot": "Approval Key Point",
                "selectedRow": "Approval key point not selected!",
                "configTitle": "Display title not filled!",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "enable": "Enable",
                "expand": "Expand",
                "showTitle": "Display Title",
                "list": "List",
                "add": "Add",
                "delete": "Delete",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "anonymousSet": {
                "anonymousOpt": "Anonymous Option",
                "approver": "Approver",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "anonymousSet": "Anonymous Settings",
                "isAnonymity": "Enable",
                "anonymous": "Anonymous Alias",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "activityList": {
                "name": "Name",
                "checkeds": "No activity nodes selected",
                "lineNumber": "Number",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            },
            "activityComponent": {
                "component": "Component",
                "method": "Component Method",
                "inconsistentParameters": "Inconsistent parameters, please check",
                "longerExists": "The component no longer exists in this method",
                "absent": "Cancel",
                "pleaseCheck": ", please check",
                "edit": "Edit",
                "deleteRow": "Delete",
                "executionTime": "Execution Time",
                "cmpName": "Component Name",
                "metadataId": "Component ID",
                "methodCode": "Component Method",
                "isForCompensation": "Compensation Operation",
                "yes": "Yes",
                "no": "No",
                "operate": "Operate",
                "code": "Code",
                "name": "Name",
                "value": "Parameter Value",
                "editComponent": "Edit Component",
                "confirmDelete": "Confirm whether to delete the component?",
                "curComponent": "No component selected!",
                "newComponent": "New Component",
                "sameCmp": "There are duplicate process components",
                "cmpMethod": "Component Method:",
                "executionTimeNotNull": "Component execution time cannot be empty!",
                "param": " parameter",
                "required": "Required",
                "set": "(Set)",
                "notSet": "(Not Set)",
                "PROCESSINSTANCE_STARTED": "Process Started",
                "PROCESSINSTANCE_SUSPENDED": "Process Suspended",
                "PROCESSINSTANCE_RESUMED": "Process Resumed",
                "PROCESSINSTANCE_COMPLETED": "Process Completed",
                "PROCESSINSTANCE_ABORTED": "Process Aborted",
                "PROCESSINSTANCE_CANCELED": "Process Canceled",
                "PROCESSINSTANCE_REACTIVATED": "Process Reactivated",
                "PROCESSINSTANCE_ROLLBACK": "Process Rolled Back",
                "PROCESSINSTANCE_RESUBMIT": "Resubmit Process",
                "ACTIVITY_AND_PARTICIPANT_UPDATED": "Activity Participants Changed",
                "PROCESSINSTANCE_ABORTED_BY_ADMIN": "Terminated by Administrator",
                "PROCESSINSTANCE_BEFORE_START": "Before Process Start",
                "WORKITEM_BEFORE_COMPLETE": "Before Task Completion",
                "WORKITEM_AFTER_COMPLETE": "After Task Completion",
                "LOADDATA": "Retrieve Data",
                "ACTIVITY_STARTED": "Activity Started",
                "ACTIVITY_COMPLETED": "Activity Completed",
                "ACTIVITY_ABORTED": "Activity Aborted",
                "WORKITEM_CREATED": "Work Item Created",
                "WORKITEM_COMPLETED": "Work Item Completed",
                "WORKITEM_SUSPENDED": "Work Item Suspended",
                "WORKITEM_RESUMED": "Work Item Resumed",
                "WORKITEM_ABORTED": "Work Item Aborted",
                "WORKITEM_RETRIEVED": "Work Item Retrieved",
                "WORKITEM_CLAIMED": "Work Item Claimed",
                "WORKITEM_UNCLAIMED": "Work Item Unclaimed",
                "ACTIVITY_ASSIGNMENT": "Task Assignment",
                "deleteNotAllowed": "The data retrieval component cannot be deleted, please understand!",
                "tips": "Tips:",
                "prefabricated": "External process components have been prefabricated, only data retrieval components are retained here",
                "add": "Add",
                "moveUp": "Move Up",
                "moveDown": "Move Down",
                "clickCancel": "Cancel",
                "clickOK": "OK"
            }
        }
    },
    "zh-CHT": {
        "validate": {
            "noProcessHeader": "模型不存在processHeader内容",
            "cmpsEmpty": "流程構件為空",
            "cmpsEmptyMsg": "流程構件不允許為空,請聯系表單開發確認問題",
            "directNoPf": "啟動管道為【直接】的流程不應該包含共亯（PF）的流程構件",
            "directNoPfMsg": "請移除以下共亯（PF）的流程構件:",
            "noLoadDataCmp": "缺少執行時機為[獲取數據]的流程構件",
            "noLoadDataCmpMsg": "流程定義不能缺少取數構件,請聯系表單開發確認問題",
            "noStartCmp": "缺少執行時機為[流程啟動]的流程構件",
            "noStartCmpMsg": "會導致流程啟動時無法修改單據狀態,請聯系表單開發確認問題",
            "lackProcessCompleteCmp": "缺少執行時機為[流程完成]的流程構件",
            "lackProcessCompleteCmpMsg": "會導致流程完成時無法修改單據狀態,請聯系表單開發確認問題",
            "lackProcessAbortCmp": "缺少執行時機為[流程終止]的流程構件",
            "lackProcessAbortCmpMsg": "會導致流程終止時無法修改單據狀態,請聯系表單開發確認問題",
            "lackProcessCancelCmp": "缺少執行時機為[流程終止]的流程構件",
            "lackProcessCancelCmpMsg": "會導致流程終止時無法修改單據狀態,請聯系表單開發確認問題",
            "lackProcessBackCmp": "缺少執行時機為[流程駁回]的流程構件",
            "lackProcessBackCmpMsg": "會導致流程駁回時無法修改單據狀態,請聯系表單開發確認問題",
            "lackProcessReStartCmp": "缺少執行時機為[重新提交]的流程構件",
            "lackProcessReStartCmpMsg": "會導致流程重新提交時無法修改單據狀態,請聯系表單開發確認問題",
            "parallelGatewayCheck": "【並行閘道】沒有成對出現",
            "parallelGatewayCheckMsg": "【並行閘道】需作為一條流程分支的折開節點和彙聚節點成對出現,請修改",
            "approvalPerformerCheck": "活動,未設定參與者",
            "noVariable1": "活動【變數設定】内容中已設定變數",
            "noVariable2": "在流程内容【流程變數】中已不存在,請修改！",
            "activity": "活動【",
            "noStartActivity": "】的標識不合法,不是以[startActivity]開頭",
            "noExclusiveGateway": "】的標識不合法,不是以[ExclusiveGateway]開頭",
            "noParallelGateway": "】的標識不合法,不是以[ParallelGateway]開頭",
            "noUserActivity": "】的標識不合法,不是以[UserActivity]開頭",
            "noOperationActivity": "】的標識不合法,不是以[OperationActivity]開頭",
            "noNotifyActivity": "】的標識不合法,不是以[NotifyActivity]開頭",
            "noCallActivitySubProcess": "】的標識不合法,不是以[CallActivitySubProcess]開頭",
            "noAutoActivity": "】的標識不合法,不是以[AutoActivity]開頭",
            "noIntermediateCatchEvent": "】的標識不合法,不是以[IntermediateCatchEventImpl]開頭",
            "noMessageActivity": "】的標識不合法,不是以[MessageActivity]開頭",
            "noAifCreationBillActivity": "】的標識不合法,不是以[AifCreationBillActivity]開頭",
            "noEndEvent": "】的標識不合法,不是以[EndEvent]開頭",
            "mark": "標識為【",
            "noFlowNodeChsName": "】的活動簡體中文名稱為空，請修改",
            "nameExceedsLengthLimit": "】的名稱超長，不能超過40個字元，請修改"
        },
        "processEditor": {
            "tip": "提示",
            "showButton": "顯示查看模型按鈕",
            "changeRecord": "流程變更記錄",
            "noDtInfo": "不存在設計時流程信息！請先賦值！",
            "noRtInfo": "不存在運行時流程信息！請先賦值！",
            "wrongMoment": "設計者運行時機錯誤！",
            "prompted": "系統提示",
            "saveSuccess": "保存成功",
            "waitReview": "保存成功，等待發起審核",
            "successPublish": "發布成功",
            "publishFail": "發布失敗，",
            "policyConflict": "會簽策略下，“駁回規則”不允許“動態選擇駁回級次”，請修改！",
            "noPermissionToSave": "當前用戶不具備另存流程的權限",
            "closeProc1": "關閉此頁面？",
            "closeProc2": "系統可能不會保存您所做的更改。",
            "viewModel": "查看模型",
            "copied": "模型已經復制到剪貼板",
            "button": {
                "saveProc": "保存",
                "releaseProc": "發布",
                "sync": "同步設計時包",
                "saveAs": "另存為",
                "procRecord": "流程記錄",
                "viewProcModel": "查看模型",
                "closeProc": "關閉"
            }
        },
        "designer": {
            "wfEditorUi": {
                "basicElements": "基本元素",
                "readOnly": "只讀"
            },
            "wfProcessCell": {
                "basicInfo": "基本信息",
                "name": "名稱",
                "nameLanguage": "名稱",
                "key": "標識",
                "entryForm": "流程分類",
                "startMode": "啟動方式",
                "wfTitle": "流程摘要",
                "formDef": "表單定義",
                "formsPC": "PC表單",
                "formsMobile": "移動表單",
                "process": "事件監聽",
                "advanced": "高級屬性",
                "basic": "基礎屬性",
                "wfComponent": "流程構件",
                "otherConfig": "其他配置",
                "processVariables": "流程變量",
                "basicElements": "基本元素",
                "customizeAction": "自定義動作",
                "timelinessInfo": "時效信息",
                "enablePriority": "啟用緊急程度",
                "enableWholeOrderRetrieve": "撤回在審單據",
                "messageProperty": "影像設置",
                "timeLimitControl": "超時操作",
                "messageNotice": "消息通知",
                "extendProperty": "擴展屬性",
                "directTips": "提示：啟動方式切換為直接，直接啟動是默認的流程啟動方式，切換後會移除共享(PF)相關構件，請知悉！",
                "externalTips": "提示：啟動方式切換為外部流程，適用於作為共享流程的外部流程相關場景，切換後保留流程上的共享（PF)相關構件，請知悉！",
                "subprocessTips": "提示：啟動方式切換為子流程，適用於調用式子流程的場景，切換後會移除除取數構件外的其他流程構件，請知悉！"
            },
            "WfSequenceFlowEdge": {
                "basicInfo": "基本信息",
                "basic": "基礎屬性",
                "name": "名稱",
                "nameLanguage": "名稱",
                "id": "標識",
                "condition": "條件選項",
                "ConditionExpression": "條件",
                "default": "缺省轉移線"
            },
            "wfSidebar": {
                "bizactivitylib": "業務活動"
            }
        },
        "app": {
            "processDesigner": {
                "all": "所有",
                "assign": "指派",
                "claim": "領用",
                "preempt": "搶占模式",
                "parallel": "並行會簽",
                "sequential": "串行會簽",
                "true": "是",
                "false": "否",
                "dataId": "單據內碼",
                "procInstId": "流程實例ID",
                "bizDefKey": "入口單據ID",
                "processDefinitionKey": "流程定義KEY",
                "procInstCreator": "流程發起人",
                "businessCreator": "業務發起人",
                "procInstDescription": "流程摘要",
                "comment": "審批意見",
                "bizDefName": "流程分類名稱",
                "curLoginUsername": "當前登錄人名稱",
                "procInstCreatorName": "流程發起人名稱",
                "currentParticipantId": "當前辦理人ID",
                "currentParticipantName": "當前辦理人名稱",
                "currentUser": "當前登錄用戶",
                "preActExecutors": "上一個活動的執行人",
                "collectionElementVariable": "多實例子活動元素變數",
                "subCollectionElementVariable": "多實例子流程元素變數",
                "nrOfInstances": "多實例總數量",
                "nrOfCompletedInstances": "多實例已完成數量",
                "nrOfActiveInstances": "多實例正在運行中的數量",
                "nrOfForward": "通過實例數量",
                "nrOfBackward": "駁回實例數量",
                "nrOfAbort": "終止實例數量",
                "conclusionType": "結論類型",
                "conclusionValue": "結論值",
                "directSuperior": "直接上級",
                "higherSuperior": "間接上級",
                "DIRECT": "直接",
                "EXTERNAL_PROCESS": "外部流程",
                "SUB_PROCESS": "子流程",
                "ALL": "電腦端和移動端",
                "WEB": "電腦端",
                "APP": "移動端",
                "conclusionTypeTips": "審批項流轉方向，1正向，2反向，3終止",
                "conclusionValueTips": "審批項編號，例如，Pass、Back、Refuse",
                "copy": "_副本",
                "saveAs": "另存為",
                "tips": "系統提示",
                "saveAsSuccess": "另存為成功",
                "saveAsFail": "另存為失敗，請檢查流程是否正確！",
                "syncDt": "是否將當前版本流程定義同步到設計時流程定義包",
                "syncSuccess": "同步成功",
                "beforeCompleteStrategyChange": "當前節點存在運行中的活動實例，不允許調整完成策略，請了解！",
                "releaseProcess": "發布前審核",
                "auto": "自動生單",
                "push": "推式生單",
                "pull": "拉式生單",
                "creation": "通過生單流程生成目標單"
            }
        },
        "multiInstanceLoopCharacteristics": {
            "loopCharacteristics": "多實例設置",
            "set": "（已設置）",
            "notSet": "（未設置）",
            "isEnable": "是否啟用",
            "isSequential": "是否串行",
            "loopCardinality": "元素集合",
            "completionConditionRules": "完成條件",
            "promptAct1": "1、[集合]中的元素個數為子活動啟動實例數量。",
            "promptAct2": "2、子活動啟動時系統會將[集合]中的元素拆分映射到各個子活動實例的[元素變數]。",
            "promptProc1": "1、[集合]中的元素個數為子流程啟動實例數量。",
            "promptProc2": "2、子流程啟動時系統會將[集合]中的元素拆分映射到各個子流程實例的[元素變數]。",
            "checkPrompt": "當前節點存在運行中的活動實例，不允許調整",
            "conditionRulesSet": "（已設置）",
            "completionConditionRulesList": {
                "forward": "正向",
                "backward": "反向",
                "abort": "終止"
            }
        },
        "component": {
            "optins": {
                "wfOptions": "工作流選項",
                "specified": "指定子流程",
                "dynamic": "動態子流程",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "subProcessType": "子流程類型",
                "processType": "流程類型",
                "bizDef": "流程分類",
                "procDef": "流程定義",
                "clickCancel": "取消",
                "clickOk": "確定"
            },
            "voConfig": {
                "documentInfo": "單據信息",
                "viewModelSelection": "視圖模型選擇",
                "cancel": "取消",
                "clickOk": "確定",
                "selectOne": "確定",
                "documentTypeSelect": "單據類型選擇",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "viewModel": "視圖模型",
                "documenttype": "單據類型",
                "placeholder": "請選擇"
            },
            "variableSetting": {
                "constant": "常數",
                "expression": "表達式",
                "component": "構件",
                "ACTIVITY_STARTED": "活動開始",
                "ACTIVITY_COMPLETED": "活動結束",
                "varAssign": "變量賦值",
                "varNumber": "變量編號",
                "REQUIRED": "必填",
                "varName": "變量名稱",
                "valueType": "值類型",
                "executionTime": "執行時機",
                "valueText": "變量值",
                "processVariables": "流程變量",
                "notSelectedVar": "尚未選中變量！",
                "valueCannotEmpty": "變量值不允許為空！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "add": "新增",
                "delete": "刪除",
                "serialNumber": "序號",
                "clickCancel": "取消",
                "clickOK": "確定",
                "inconsistentParameters": "當前構件方法參數不一致，請更新！",
                "methodNotExist": "當前構件已不存在此方法，請更新！",
                "parameterName": "參數名",
                "parameterValue": "參數值",
                "methodnotSelected": "尚未選擇構件方法",
                "metadataNotExist": "幫助元數據不存在，請聯繫系統管理員查看原因！",
                "errorObtainComponent": "獲取解析構件錯誤",
                "componentSelection": "構件選擇",
                "componentName": "構件名稱",
                "parameterList": "參數列表",
                "lineNumber": "序號"
            },
            "urgeHandleRule": {
                "urgentApproval": "催辦審批：",
                "pleaseApprove": "請您儘快審批",
                "soOn": "的",
                "urgeHandle": "催辦",
                "noSendingMethod": "尚未選擇發送方式！",
                "setMessageTemplate": "消息渠道啟用簡訊時需設置消息模板",
                "codeEmpty": "簡訊模板編號不允許為空",
                "noMessageSubject": "尚未配置消息主題！",
                "noMessageContent": "尚未選擇消息內容！",
                "earliestTimeNotEmpty": "最早允許催辦時間不允許為空",
                "minimumTimeNotEmpty": "最小允許催辦間隔不允許為空",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "enableUrgeHandle": "啟用催辦",
                "timeSetting": "時間設置",
                "earliestTime": "最早允許催辦時間（小時）",
                "minimumInterval": "最小允許催辦間隔（小時）",
                "sendingMethod": "發送方式",
                "messageSubject": "消息主題",
                "supportEditing": "支持編輯",
                "messageContent": "消息內容",
                "displayReminder": "顯示催辦人",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "titleExpression": {
                "zh-CHS": "中文简体",
                "zh-CHT": "中文繁體",
                "en": "英文",
                "taskDescription": "任務描述",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "currentLanguage": "當前摘要語言:",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "timeLimitControl": {
                "timedOutOperation": "超時操作",
                "constant": "固定值",
                "scope": "時間範圍",
                "day": "天",
                "hour": "時",
                "minute": "分",
                "BeforeDuration": "到期之前",
                "OnDuration": "到期時",
                "AfterDuration": "到期之後",
                "SendMessageExpireOperation": "超時預警",
                "AutoHandleExpireOperation": "自動辦理",
                "curDay": "當天",
                "durationType": "期限類型",
                "required": "必填",
                "timeDuration": "時長",
                "timeUnit": "單位",
                "operationTypeName": "操作類型名稱",
                "sendType": "操作",
                "onlyBeInteger": "任務期限只能是整數！",
                "setOperation": "請設置超時操作！",
                "setType": "請設置自動辦理類型！",
                "setComments": "請設置自動辦理意見！",
                "selectedOperation": "尚未選中預警操作！",
                "notSupportAutomatic": "下一節點是由當前辦理人指派的話，當前節點不支持任務自動辦理",
                "warningMessage": "預警消息",
                "automaticProcessing": "自動辦理",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "timelinessControl": "任務處理時效控制",
                "isEnable": "是否啟用",
                "taskDeadline": "任務期限",
                "timelyOperation": "時效預警操作",
                "actionList": "操作列表",
                "add": "新增",
                "remove": "刪除",
                "clickCancel": "取消",
                "clickOK": "確定",
                "workItemParticipant": "當前節點辦理人",
                "procInstCreator": "流程發起人",
                "to-doMessageTimeOut": "您有一條待辦消息即將超時。",
                "messageTimeOut": "您有一條消息即將超時",
                "agree": "同意"
            },
            "sendMessageOperation": {
                "procInstCreator": "流程發起人",
                "workItemParticipant": "當前節點辦理人",
                "preActExecutors": "上一節點辦理人",
                "day": "天",
                "hour": "時",
                "minute": "分",
                "cycleTimeNotEmpty": "循環時間間隔不允許為空！",
                "sendMethodNotEmpty": "發送方式不允許為空！",
                "subjectNotEmpty": "消息主題不允許為空！",
                "contentNotEmpty": "消息內容不允許為空！",
                "recipientNotEmpty": "接收人不允許為空！",
                "messageTemplate": "消息渠道啟用短信時需設置消息模板",
                "smsTemplateNumberNotEmpty": "短信模板編號不允許為空",
                "cycleEnable": "啟用循環預警",
                "cycleTime": "循環時間間隔",
                "sendType": "發送方式",
                "subject": "消息主題",
                "message": "消息內容",
                "receiverVari": "接收人",
                "sysUsers": "系統用戶",
                "clickCancel": "取消",
                "clickOK": "確定",
                "opinionsNotEmpty": "自動辦理意見不允許為空！",
                "processingNotEmpty": "自動辦理不允許為空！",
                "automaticProcessSet": "自動辦理設置",
                "automaticProcessMethod": "自動辦理方式",
                "automaticOpinionHandle": "自動辦理意見"
            },
            "smsMessageTemplate": {
                "smsTemplateContent": "協力廠商簡訊服務商裏定義的範本原文，例如：阿裡雲您的管控大數據平臺帳號已開通，用戶名為：${username}，初始密碼為：${code}，請及時登入系統",
                "code": "變量",
                "value": "值",
                "noRowsSelected": "尚未選中行",
                "smsMessageTemplate": "短信服務模板",
                "tips1": "消息模板是指已經在第三方短信服務商定義模板後，需要在GS Cloud裡將短信服務商的模板變量和GS Cloud變量關聯",
                "tips2": "第三方短信服務商裡定義的模板編號，例如: 阿里雲 SMS_220626324",
                "tips3": "將第三方短信服務商模板裡的變量和GSCloud裡的變量配置關聯",
                "smsTemplateNumber": "短信模板編號",
                "smsVariableBinding": "短信變量綁定",
                "addSmsVariable": "新增",
                "deleteSmsVariable": "刪除"
            },
            "signRule": {
                "countersignRules": "會簽規則",
                "byNumber": "按數量",
                "byProportion": "按比例(%)",
                "customConditions": "自定義條件",
                "value": "編號",
                "text": "名稱",
                "conclusionName": "結論名稱",
                "conclusionValue": "結論值",
                "calculateType": "計算方式",
                "conditionValue": "條件值",
                "waitAllVotes": "等待全員辦結",
                "yes": "是",
                "no": "否",
                "notEmpty": "完成策略為會簽時，會簽規則不允許為空，請了解！",
                "pleaseSelect": "請首先選中一條審批項！",
                "maxConditionValue": "條件值最大值是100",
                "minConditionValue": "條件值最小值是0",
                "noConditional": "結論執行方式為全票或一票時不需要條件值",
                "set": "（已設置）",
                "ruleList": "規則列表",
                "approvalOptions": "審批選項",
                "clickCancel": "取消",
                "deleteRow": "重置",
                "clickOK": "確定",
            },
            "saveAsEdit": {
                "public": "公有",
                "private": "私有",
                "code": "編號",
                "name": "名稱",
                "nameNotEmpty": "流程名稱不能為空",
                "organizationNotEmpty": "維護組織不能為空",
                "organization": "組織",
                "basicAttributes": "基礎屬性",
                "processName": "流程名稱",
                "processKeyValue": "流程Key值",
                "maintenanceOrg": "維護組織",
                "accessLevel": "訪問級別",
                "saveAsCancel": "取消",
                "saveAsOK": "確定"
            },
            "release": {
                "release": "流程發布",
                "update": "流程更新",
                "applicantName": "申請人名稱",
                "applicantDepartment": "申請人部門",
                "procName": "流程名稱",
                "procVersion": "流程版本",
                "releaseType": "發布類型",
                "textDetail": "說明",
                "saveAsCancel": "取消",
                "saveAsOK": "確定"
            },
            "processVariables": {
                "string": "字符",
                "integer": "整型",
                "decimal": "小數",
                "boolean": "布爾",
                "constant": "常量",
                "expression": "表達式",
                "component": "構件",
                "name": "變量編號",
                "required": "必填",
                "documentation": "變量名稱",
                "basicType": "變量類型",
                "description": "描述",
                "tag": "初始值類型",
                "valueText": "初始值",
                "processVariables": "流程變量",
                "notSelected": "尚未選中流程變量！",
                "variableNumberEmpty": "變量編號不允許為空！",
                "variableNameEmpty": "變量名稱不允許為空！",
                "variableNumberNotStandard": "變量編號只能包含字母、數字和下劃線，且不能以數字開頭！",
                "tagNotEmpty": "初始值類型不允許為空！",
                "codeDuplicates": "流程變量編號不允許重複！",
                "alreadyExists": "新增的變量已存在！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "add": "新增",
                "delete": "刪除",
                "number": "序號",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "participant": {
                "user": "用戶",
                "variable": "變量參與者",
                "position": "崗位",
                "role": "角色",
                "component": "構件參與者",
                "reportingLine": "匯報關係",
                "matrix": "矩陣",
                "activityExecutor": "歷史活動辦理人",
                "organization": "單位/部門",
                "all": "所有",
                "assign": "指派",
                "claim": "領用",
                "currentUser": "當前辦理人",
                "procInstCreator": "流程發起人",
                "participantSet": "參與者設置",
                "order": "序號",
                "type": "類型",
                "performerName": "名稱",
                "description": "描述",
                "condition": "啟用條件",
                "dataMovement1": "是否將默認辦理人數據移動到到備選辦理人？",
                "dataMovement2": "是否將備選辦理人數據移動到默認辦理人？",
                "participantSelection": "參與者選擇",
                "selectProcessVariables": "尚未選擇流程變量！",
                "selectVariableValueType": "尚未選擇變量值類型！",
                "selectRelation": "尚未選擇關係！",
                "selectPosition": "尚未選擇崗位！",
                "selectOrgType": "尚未選擇組織類型！",
                "orgFill": "尚未填寫組織！",
                "refOrgIdNotNull": "參照類型為組織時，參照組織欄位不能為空",
                "refUserIdNotNull": "參照類型為系統用戶/員工時，參照人欄位不能為空",
                "repDefConfigured": "該匯報關係已經進行過配置",
                "atLeastOneCondition": "條件欄位至少要存在一個",
                "dataFieldAliasNotNull": "數據欄位不能為空",
                "matrixConfigured": "該矩陣已經進行過配置",
                "selectPerformer": "尚未選擇參與者",
                "definitionDeleted": "該條匯報關係數據的定義已刪除，該條數據將刪除",
                "matrixDeleted": "該條矩陣數據的定義已刪除，該條數據將刪除",
                "selectParticipantInfo": "請先選中一條參與者信息！",
                "noRowSelected": "尚未選中行！",
                "selectDefaultHandler": "請先選中一條默認辦理人",
                "selectpotentialtHandler": "請先選中一條備選辦理人",
                "org": "組織：",
                "positionType1": "崗位類型：通用崗位，組織：",
                "positionType2": "崗位類型：通用崗位",
                "positionType3": "崗位類型：組織崗位",
                "comp": "構件：",
                "parameters:": "，參數：{",
                "referencePerson:": "參照人：",
                "referenceOrganization:": "參照組織：",
                "condition1": "條件1：",
                "condition2": "條件2：",
                "condition3": "條件3：",
                "data": "數據：",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "allocationPolicy": "分配策略",
                "operator": "指派操作人",
                "multiSelect": "允許多選",
                "necessary": "只有一個待選用戶時，仍需手工選擇",
                "notifyRecipient": "知會接收人",
                "defaultHandler": "默認辦理人",
                "new": "新增",
                "editPerformer": "編輯",
                "removePerformer": "移除",
                "clearPerformer": "清空",
                "moveUp": "上移",
                "moveDown": "下移",
                "alternativeHandler": "備選辦理人",
                "isAllScope": "指定參與人時不限範圍，從全員用戶中選擇",
                "clickCancel": "取消",
                "clickOK": "確定",
                "alternativeScope": "備選範圍",
                "orgId": "組織ID",
                "includeChildren": "包含下級",
                "conditon": "啟用條件",
                "currentUnit": "本組織",
                "currentDepartment": "本部門",
                "variableOrganization": "變量組織"
            },
            "activityExecutor": {
                "name": "名稱",
                "eventHandler": ">活動辦理人",
                "nodeName": "節點名稱",
                "enablingConditions": "啟用條件",
                "activityList": "活動列表",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "componentPerformer": {
                "componentMethod": "當前構件方法參數不一致，請更新！",
                "methodNotExist": "當前構件已不存在此方法，請更新！",
                "code": "編號",
                "name": "名稱",
                "description": "描述",
                "valueText": "參數值",
                "help": "幫助",
                "errorObtaining": "獲取解析構件出錯",
                "componentSelection": "構件選擇",
                "metadataNotExist": "幫助元數據不存在！",
                "serverSideNotFound": "服務器端未找到幫助元數據，請檢查元數據是否已經部署到環境中",
                "componentName": "構件名稱",
                "componentSelect": "構件選擇",
                "parameterList": "參數列表"
            },
            "matrixPerformer": {
                "code": "編號",
                "name": "名稱",
                "help": "幫助",
                "multivalue": "多值",
                "enumSelection": "枚舉選擇",
                "refMatrixTable": "引用矩陣表",
                "matrixTable": "矩陣表",
                "curDataFieldValue": "結果列",
                "conditionFields": "條件字段",
                "condition": "啟用條件",
                "key": "鍵",
                "value": "值",
                "notSelectEnum": "尚未選中枚舉值",
                "cancel": "取消",
                "onConfirm": "確定",
                "lineNumber": "序號"
            },
            "performerOptions": {
                "leave": "向下流轉",
                "throwException": "異常提示",
                "sys": "用戶ID",
                "administrative_staff": "員工ID",
                "procInstCreator": "流程發起人",
                "preActExecutors": "上一節點辦理人",
                "allPassExecutors": "所有已辦理人員",
                "performerOptions": "參與者選項",
                "exclusionNotAllowed": "所有已辦理人員已設置自動審批，上個節點已辦理人員默認不允許排除！",
                "approvalNotAllowed": "【分配策略】為【領用】時，不允許設置自動審批，請了解！",
                "approvalNotAllowedAsSet": "所有已辦理人員已設置不允許審批，所以上個節點已辦理人員默認不允許自動審批！",
                "allocationStrategyIsCollect": "【分配策略】為【領用】時，不允許設置自動審批，請了解！",
                "set": "（已設置）",
                "advancedOptions": "參與者高級選項",
                "historicFirst": "再次進入節點時，辦理人是節點的已辦人員",
                "noPerformerStrategy": "辦理人為空策略：",
                "excludeProcInstCreator": "排除辦理人選項",
                "defaultNotParticipate": "流程發起人默認不參與審批",
                "excludePreActExecutors": "上個節點已辦理人員默認不參與審批",
                "excludeAllPassExecutors": "所有已辦理人員默認不參與審批",
                "excludeExprPerformer": "流程變量：",
                "variableOrgTypes": "變量值類型：",
                "automaticApprovalOptions": "自動審批選項",
                "autoProcInstCreator": "流程發起人默認自動審批通過",
                "autoPreActExecutors": "上一節點辦理人員默認自動審批通過",
                "autoAllPassExecutors": "所有已辦理人員默認自動審批通過",
                "cancel": "取消",
                "clickOK": "確定"
            },
            "positionPerformer": {
                "orgPosition": "組織岗",
                "generalPosition": "通用岗",
                "sysPositions": "系統岗位",
                "positionType": "岗位類型",
                "role": "角色",
                "position": "岗位",
                "sysType": "組織類型",
                "placeholder": "請選擇",
                "orgId": "組織ID",
                "condition": "啟用條件",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "reportingLine": {
                "higherSuperior": "間接上級",
                "directSuperior": "直接上級",
                "code": "編號",
                "name": "名稱",
                "dept": "組織",
                "sysUser": "系統用戶",
                "employee": "員工",
                "businessFields": "業務字段",
                "defName": "匯報定義",
                "dimension": "匯報級別",
                "curReportingRefer": "參照類型",
                "usersName": "參照人",
                "refOrgId": "參照組織",
                "condition": "啟用條件",
                "definitionOfReport": "匯報關係定義"
            },
            "userPerformer": {
                "regularUser": "固定使用者",
                "variablePart": "變數參與者",
                "sys": "系統使用者",
                "administrative_organization": "員工",
                "cantUseContext": "行政人員類型不能使用此上下文變數",
                "user": "使用者",
                "variable": "變數",
                "condition": "啟用條件"
            },
            "variablePerformer": {
                "sys": "使用者ID",
                "administrative_staff": "員工ID",
                "oneself": "本人",
                "administrative_organization": "部門ID",
                "cantUseContext": "行政人員類型不能使用此上下文變數",
                "processVariables": "流程變數",
                "variableOrgTypes": "變數值類型",
                "relationShipType": "關係",
                "condition": "啟用條件",
            },
            "orgPotentialOwner": {
                "optionSettings": "選項設置",
                "global": "全體成員",
                "currentUnit": "本單位",
                "currentDepartment": "本部門",
                "addSignBehind": "加簽",
                "addSignFront": "徵詢",
                "transfer": "移交",
                "notify": "知會",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "option": "選項",
                "enable": "是否啟用",
                "range": "範圍",
                "OrgId": "組織ID",
                "variableOrganization": "變數組織",
                "includeChildren": "包含下級",
                "clickCancel": "取消",
                "clickOK": "確定",
                "limit": "限定人員範圍",
                "turnOffPrompt": "請關閉限定人員範圍選項"
            },
            "note": {
                "placeholder": "請輸入流程變更記錄",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "MessageNotice": {
                "notify": "消息通知",
                "subject": "消息主題",
                "content": "消息內容",
                "sendTime": "發送時機",
                "sendType": "發送方式",
                "receiverText": "消息接收人",
                "procInstCreator": "流程發起人，",
                "workItemParticipant": "任務接收人，",
                "messageSet": "消息設置",
                "selectedRow": "尚未選中消息通知！",
                "noCopy": "沒有待複製的消息通知屬性！",
                "batchCopy": "批量複製",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "add": "新增",
                "edit": "編輯",
                "delete": "刪除",
                "lineNumber": "序號",
                "clickCancel": "取消",
                "clickOK": "確定",
                "messContent": `{"expr":"\'您有一條消息通知。\'","sexpr":""}`,
                "procComplete": "流程完成",
                "procAborted": "流程終止",
                "procRollBack": "流程驳回",
                "workCreated": "任務創建",
                "actComplete": "活動完成",
                "actAborted": "活動終止",
                "email": "郵件",
                "sms": "短信",
                "cloudplus": "雲",
                "processParticipant": "流程參與人",
                "variableParticipant": "變數參與者",
                "userParticipant": "指定使用者",
                "positionParticipant": "崗位",
                "activityExecutorParticipant": "歷史辦理人",
                "sys": "系統使用者",
                "administrative_organization": "員工",
                "name": "名稱",
                "noTargetNode": "尚未選中節點！",
                "noMessageNotifyAttribute!": "沒有消息通知屬性！"
            },
            "messageNoticeEdit": {
                "procInstCreator": "流程發起人",
                "activityExecutorParticipant": "歷史辦理人",
                "workItemParticipant": "任務辦理人",
                "sys": "系統使用者",
                "administrative_organization": "員工",
                "processParticipant": "流程參與人",
                "workItemReceiveParticipant": "任務接收人",
                "variableParticipant": "變數參與者",
                "userParticipant": "指定使用者",
                "positionParticipant": "崗位",
                "sendType": "發送方式不允許為空",
                "smsMessageTemplate": "消息渠道啟用短信時需設置消息模板",
                "smsMessageTemplateCode": "短信模板編號不允許為空",
                "sendTime": "發送時機不允許為空",
                "subject": "消息主題不允許為空",
                "content": "消息內容不允許為空",
                "receivers": "接收人不允許為空！",
                "processParticipantNotNull": "流程參與人不允許為空",
                "activityDefIdNotNull": "流程參與人為歷史辦理人時，辦理節點不允許為空",
                "variableParticipantNotNull": "變數參與者不允許為空",
                "orgType": "變數參與者組織類型不允許為空",
                "userIds": "指定使用者不允許為空",
                "positionId": "崗位不允許為空",
                "activityList": "活動列表",
                "position": "崗位",
                "optionalNodes": "可選節點",
                "targetNodeList": "目標節點列表",
                "placeholder": "請選擇目標節點",
                "optionalAttribute": "可選屬性",
                "lineNumber": "序號",
                "clickCancel": "取消",
                "clickOK": "確定",
                "messSendType": "消息渠道",
                "messSubject": "消息主題",
                "enable": "啟用表達式",
                "messContent": "消息內容",
                "recipient": "接收人",
                "addReceiver": "添加",
                "organization": "組織：",
                "posi": "崗位："
            },
            "jumpScope": {
                "targetNodeOptions": "目標節點選項",
                "name": "名稱",
                "outConnectNode": "流程圖連線節點",
                "global": "流程內所有節點",
                "afterNodes": "所有後繼節點",
                "specifiedSet": "流程圖連線節點+附加節點",
                "firstNode": "條件為true的連線節點，當有多條時默認選中首條",
                "nullNode": "默認為空，每次都手動選擇",
                "specifyNode": "指定默認節點",
                "noSetTargetNode": "尚未設置目標節點選項，請了解！",
                "noSetSpecifyNode": "尚未指定默認節點，請了解！",
                "selectedRow": "請首先選中一條選項！",
                "optionalNodes": "可選節點",
                "listOfAdditional": "附加節點列表",
                "pleaseSelect1": "請選擇附加節點",
                "defaultNode": "默認節點",
                "pleaseSelect2": "請選擇默認節點",
                "defaultNodeList": "默認節點列表",
                "clickCancel": "取消",
                "clickOK": "確定",
                "set": "（已設置）"
            },
            "imageSet": {
                "imageSet": "影像設置",
                "onlyView": "僅可查看",
                "edit": "編輯",
                "reScanStart": "發起重掃",
                "reScanComplete": "重掃完成",
                "mutualExclusion": "【僅可查看】選項與其他選項互斥，請了解！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "imageOperation": "影像操作權限",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "extendProperty": {
                "extendProperty": "擴展屬性",
                "true": "是",
                "false": "否",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "illustrate": "說明",
                "placeholder": "請選擇",
                "cancel": "取消",
                "clickOK": "確定"
            },
            "expressionEditor": {
                "expressionEditor": "條件編輯",
                "notSet": "（未設置）",
                "clickCancel": "取消",
                "changeType": "切換類型",
                "clickOK": "確定"
            },
            "executeForms": {
                "executeForms": "表單定義",
                "parameters": "參數【",
                "typeAsvariable": "】類型為變量，但在流程變量裡不存在",
                "parameterSettings": "參數設置",
                "formDefinitionList": "表單定義列表",
                "notSet": "（未設置）",
                "default": "流程默認表單",
                "processEmbeddedForm": "流程嵌表單",
                "formEmbedProcess": "表單嵌流程",
                "clickCancel": "取消",
                "clickOK": "確定",
                "noForm": "暫無表單格式",
                "form": "選擇表單",
                "placeholder": "請選擇",
                "parametersSet": "參數",
                "key": "變量編號",
                "name": "變量名稱",
                "lineNumber": "序號",
                "code": "編號",
                "tag": "類型",
                "value": "參數值",
                "variable": "變量",
                "constant": "常量",
                "expression": "表達式",
                "method": "方法標識",
                "methodName": "方法名稱",
                "description": "描述",
                "workFlowAction": "流轉方向",
                "formOperations": "表單操作",
                "executionTime": "執行時機",
                "sortOrder": "執行順序",
                "methodParameters": "參數",
                "selectFormActionConfig": "尚未選中表單操作配置！",
                "selectFormAction": "尚未選中表單操作！",
                "editParam": "設置",
                "formEvents": "表單事件",
                "buttonName": "按鈕名稱",
                "enable": "是否可用",
                "disabled": "是否禁用",
                "hidden": "是否隱藏",
                "fieldName": "字段名稱",
                "editable": "是否可寫",
                "readonly": "是否只讀",
                "required": "是否必填",
                "saveFail": "保存配置失敗，請聯繫管理員查看原因！",
                "checkedRows": "尚未選擇按鈕集合",
                "checkeds": "尚未選擇字段集合",
                "enableBtn": "可用",
                "disabledBtn": "禁用",
                "hiddenBtn": "隱藏",
                "btnBatchReset": "重置",
                "editableBtn": "可寫",
                "readonlyBtn": "只讀",
                "requiredBtn": "必填",
                "add": "新增",
                "delete": "刪除",
                "other": "其他",
                "formBtn": "表單按鈕",
                "formfield": "表單字段",
                "apptag": "單據類型",
                "functionMenu": "功能菜單",
                "formFormat": "表單格式",
                "docFormatNumber": "單據格式編號",
                "docFormatName": "單據格式名稱",
                "selectedRow": "尚未選擇表單定義！",
                "set": "（已設置）"
            },
            "eventDefinition": {
                "eventDefinition": "信號定義",
                "pass": "正向",
                "back": "反向",
                "abort": "終止",
                "signalRef": "信號編號",
                "name": "信號名稱",
                "triggerAction": "流轉方向",
                "selectedRow": "尚未選中一條觸發事件！",
                "dataLength": "至少需要一個信號定義，請了解！",
                "codeNotNull": "信號編號不允許為空！",
                "nameNotNull": "信號名稱不允許為空！",
                "codeNotNumber": "信號編號不允許為純數字！",
                "codeRepeat": "信號編號不允許重複！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "add": "新增",
                "delete": "刪除",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "entryFormEditor": {
                "flowForm": "流程分類",
                "code": "編號",
                "name": "名稱",
                "base": "類型",
                "foundation": "基礎",
                "extend": "擴展",
                "selectedRow": "尚未選擇流程分類",
                "absent": "流程分類已經不存在",
                "lineNumber": "序號",
                "clickCancel": "取消",
                "clickOK": "重新綁定"
            },
            "editComponentParameter": {
                "code": "編號",
                "name": "名稱",
                "required": "必填",
                "yes": "是",
                "no": "否",
                "value": "參數值",
                "openComponentFail": "獲取解析構件出錯",
                "componentSelection": "構件選擇",
                "curComponent": "請選擇流程構件",
                "executionTime": "請選擇執行時機",
                "para": "參數",
                "paraRequired": "】必填",
                "execuTime": "執行時機",
                "parameterList": "參數列表",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "customizeAction": {
                "customizeAction": "自定義動作",
                "app": "移動",
                "web": "web",
                "all": "web,移動",
                "name": "名稱",
                "code": "編號",
                "terminalType": "適用終端",
                "isAll": "是否默認",
                "yes": "是",
                "no": "否",
                "paramName": "編號",
                "valueText": "名稱",
                "value": "參數值",
                "addActions": "自定義動作選擇",
                "actionExisted": "新增的自定義動作已經存在！",
                "selectedRow": "請首先選中一條選項！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "add": "新增",
                "delete": "刪除",
                "parameterList": "參數列表",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "checkCondition": {
                "zhChs": "簡體中文",
                "zhCht": "繁體中文",
                "en": "英文",
                "checkCondition": "活動校驗規則",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "nodeEntry": "節點進入",
                "activityBeforeStarted": "節點進入條件",
                "enterErrorTips": "進入條件不匹配提示語",
                "activityBeforeCompleted": "節點離開",
                "activityBeforeCompletedValue": "節點離開條件",
                "leaveErrorTips": "離開條件不匹配提示語",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "batchSet": {
                "targetNode": "目標節點",
                "addSignFront": "徵詢",
                "addSignBehind": "加簽",
                "transfer": "移交",
                "notify": "知會",
                "backWardRule": "駁回規則",
                "name": "名稱"
            },
            "subProcess": {
                "subProcessSet": "子流程設置",
                "specified": "指定子流程",
                "dynamic": "動態子流程",
                "inheritParent": "與父流程相同",
                "autoCreation": "自动生成下游單據",
                "variablesExpression": "變量表達式",
                "rteNull": "請選中一條生單流程",
                "orderProcess": "生單流程",
                "clickOk": "確定",
                "clickCancel": "取消",
                "inheritBizDataId": "當子流程與父流程單據不一致時，請設置子流程單據內碼！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "radioGroupProcessType": "子流程類型",
                "flowForm": "流程分類",
                "processDef": "流程定義",
                "radioGroupBillSource": "單據來源",
                "autoCreationProcess": "生單流程",
                "bizDataId": "單據內碼",
                "setOption": "設置選項",
                "SameParentProcess": "與父流程同一張業務單據",
                "setBizDataId": "設置單據內碼",
                "subProcessOpt": "子流程選項"
            },
            "backwardRule": {
                "reEdit": "駁回活動節點已不存在，請重新編輯",
                "backwardRule": "駁回規則",
                "initialActityId": "開始節點",
                "precursorActivityId": "前置節點",
                "empty": "空",
                "name": "名稱",
                "id": "標識",
                "sequence": "順序流轉",
                "backToMe": "返回我",
                "backToCurrentNode": "返回本節點",
                "popover": "1.順序流轉:按照流轉線順序進行流轉; 2.返回我:完成策略為搶佔：只給駁回人創建任務,完成策略為會簽：駁回人與未審批人收到新任務，已審批人員自動審批通過; 3.返回本節點:實際效果受“再次進入節點時，辦理人是否是節點已辦人員影響”選項的影響",
                "selectAbleClick": "會簽策略下，不允許動態選擇駁回目標節點!",
                "dictPicked": "“駁回至空”選項請搭配“允許動態選擇駁回目標節點”使用",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "rejectedTo:": "駁回至：",
                "backScope": "駁回範圍",
                "defaultPrompt": "默認選取全部歷史駁回節點",
                "title": "活動列表",
                "dynamicSelection": "允許修改返回設置",
                "resubmitEffectOptions": "返回設置",
                "popover1": "1.順序流轉:按照流轉線順序進行流轉; ",
                "popover2": "2.返回我:完成策略為搶佔：只給駁回人創建任務,完成策略為會簽：駁回人與未審批人收到新任務，已審批人員自動審批通過;",
                "popover3": "3.返回本節點:實際效果受“再次進入節點時，辦理人是否是節點已辦人員影響”選項的影響",
                "allowModification": "允許修改返回設置",
                "clickCancel": "取消",
                "clickOk": "確定"
            },
            "assignStrategy": {
                "all": "所有",
                "assign": "指派",
                "claim": "領用",
                "currentUser": "當前辦理人",
                "procInstCreator": "流程發起人",
                "assignStrategy": "分配策略",
                "option": "選項",
                "assignmentRules": "指派規則",
                "operator": "指派操作人",
                "multiSelect": "允許選擇多個待選用戶",
                "necessary": "只有一個待選用戶時，仍需手工選擇",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "assignScope": {
                "assignScopeList": "指派節點列表",
                "required": "必填",
                "yes": "是",
                "no": "否",
                "condition": "條件",
                "add": "增加",
                "delete": "刪除",
                "name": "名稱",
                "deleteRow": "請首先選中壹條選項！",
                "curActivity": "尚未選中行",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "nodeList": "節點列表",
                "moveUp": "上移",
                "moveDown": "下移",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "assignPerformer": {
                "currentUser": "當前辦理人",
                "procInstCreator": "流程發起人",
                "global": "全員",
                "currentUnit": "本單位",
                "currentDepartment": "本部門",
                "assignPerformer": "指派規則",
                "set": "（已設置）",
                "operator": "指派操作人",
                "multiSelect": "允許選擇多個待選用戶",
                "necessary": "只有一個待選用戶時，仍需手工選擇",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "approvelItems": {
                "approvalOptions": "審批選項",
                "forward": "正向",
                "backward": "反向",
                "abort": "終止",
                "value": "編號",
                "text": "名稱",
                "workFlowAction": "流轉方向",
                "isDefault": "默認",
                "no": "否",
                "yes": "是",
                "commentNecessary": "意見必填",
                "attachmentNecessary": "附件上傳",
                "certification": "數字簽名",
                "signatureNecessary": "手寫簽名必填",
                "defaultComment": "默認意見",
                "zh-CHS": "中文簡體",
                "zh-CHT": "中文繁體",
                "en": "英文",
                "workFlowActionNotNull": "審批項流轉方向不允許為空，請修改！",
                "deleteRow": "請首先選中壹條選項！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "add": "新增",
                "delete": "刪除",
                "clickCancel": "取消",
                "clickOK": "確定",
                "approvalAction": "審批動作",
                "lineNumber": "序號"
            },
            "approvalPivot": {
                "remind": "文字提示",
                "type": "類型",
                "condition": "條件",
                "title": "顯示名稱",
                "description": "詳細說明",
                "approvalPivot": "審批要點",
                "selectedRow": "尚未選中審批要點！",
                "configTitle": "尚未填寫顯示標題！",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "enable": "是否啟用",
                "expand": "是否展開",
                "showTitle": "顯示標題",
                "list": "列表",
                "add": "新增",
                "delete": "刪除",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "anonymousSet": {
                "anonymousOpt": "匿名選項",
                "approver": "審批人",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "anonymousSet": "匿名設置",
                "isAnonymity": "是否啟用",
                "anonymous": "匿名代稱",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "activityList": {
                "name": "名稱",
                "checkeds": "尚未選擇活動節點",
                "lineNumber": "序號",
                "clickCancel": "取消",
                "clickOK": "確定"
            },
            "activityComponent": {
                "component": "構件",
                "method": "構件方法",
                "inconsistentParameters": "參數不壹致，請檢查",
                "longerExists": "構件已不存在此構件方法",
                "absent": "取消",
                "pleaseCheck": "，請檢查",
                "edit": "編輯",
                "deleteRow": "刪除",
                "executionTime": "執行時機",
                "cmpName": "構件名稱",
                "metadataId": "構件ID",
                "methodCode": "構件方法",
                "isForCompensation": "補償操作",
                "yes": "是",
                "no": "否",
                "operate": "操作",
                "code": "編號",
                "name": "名稱",
                "value": "參數值",
                "editComponent": "編輯構件",
                "confirmDelete": "確認是否刪除構件？",
                "curComponent": "尚未選中構件！",
                "newComponent": "新建構件",
                "sameCmp": "存在相同的流程構件",
                "cmpMethod": "構件方法：",
                "executionTimeNotNull": "構件執行時機不允許為空！",
                "param": "的參數",
                "required": "必填",
                "set": "（已設置）",
                "notSet": "（未設置）",
                "PROCESSINSTANCE_STARTED": "流程啟動",
                "PROCESSINSTANCE_SUSPENDED": "流程挂起",
                "PROCESSINSTANCE_RESUMED": "流程恢復",
                "PROCESSINSTANCE_COMPLETED": "流程完成",
                "PROCESSINSTANCE_ABORTED": "流程終止",
                "PROCESSINSTANCE_CANCELED": "流程取消",
                "PROCESSINSTANCE_REACTIVATED": "流程復活",
                "PROCESSINSTANCE_ROLLBACK": "流程驳回",
                "PROCESSINSTANCE_RESUBMIT": "重新提交",
                "ACTIVITY_AND_PARTICIPANT_UPDATED": "環節辦理人變更",
                "PROCESSINSTANCE_ABORTED_BY_ADMIN": "管理員終止",
                "PROCESSINSTANCE_BEFORE_START": "流程啟動前",
                "WORKITEM_BEFORE_COMPLETE": "任務完成前",
                "WORKITEM_AFTER_COMPLETE": "任務完成後",
                "LOADDATA": "獲取數據",
                "ACTIVITY_STARTED": "活動啟動",
                "ACTIVITY_COMPLETED": "活動完成",
                "ACTIVITY_ABORTED": "活動終止",
                "WORKITEM_CREATED": "工作項創建",
                "WORKITEM_COMPLETED": "工作項完成",
                "WORKITEM_SUSPENDED": "工作項挂起",
                "WORKITEM_RESUMED": "工作項恢復",
                "WORKITEM_ABORTED": "工作項終止",
                "WORKITEM_RETRIEVED": "工作項取回",
                "WORKITEM_CLAIMED": "工作項領用",
                "WORKITEM_UNCLAIMED": "工作項反領用",
                "ACTIVITY_ASSIGNMENT": "任務分配前",
                "deleteNotAllowed": "取數構件不允許刪除，請了解！",
                "tips": "提示：",
                "prefabricated": "已經預製外部流程構件，此處只保留取數構件",
                "add": "新增",
                "moveUp": "上移",
                "moveDown": "下移",
                "clickCancel": "取消",
                "clickOK": "確定"
            }
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$3 = WF_PROCESS_EDITOR_LANG_RESOURCES;
class WfProcessEditorComponent {
    /**
     * @param {?} uiState
     * @param {?} viewModel
     * @param {?} service
     * @param {?} loadService
     * @param {?} notify
     * @param {?} message
     * @param {?} activity
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} eventBus
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uiState, viewModel, service, loadService, notify, message, activity, injector, modalService, resolver, eventBus, cdr, localeId, resources, localePipe) {
        this.uiState = uiState;
        this.viewModel = viewModel;
        this.service = service;
        this.loadService = loadService;
        this.notify = notify;
        this.message = message;
        this.activity = activity;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.eventBus = eventBus;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.flag = true;
        this.cls = 'farris-main-area flex-column';
        this.action = 'edit';
        this.mode = 'general';
        this.procType = "wf";
        this.close = new EventEmitter();
        this.errorList = [];
        this.tabTypeList = [
            {
                id: 'processWarning',
                type: 'processWarning',
                title: this.localePipe.instant("processEditor.tip"),
                iconCls: 'f-icon-default',
                iconStyle: 'color:#f49730;'
            }
        ];
        this.panelWidth = 330;
        this.propertyPanelResizable = true;
        this.rightPanelWidth = 330; // 右侧面板宽度
        // localeId: string = "zh-CHS";
        /**
         * 界面是否发生变化标志，修改属性、移动节点等均会将此值设为true
         */
        this.changedFlag = false;
        this.showModelButton = false;
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.cdr = this.cdr || this.injector.get(ChangeDetectorRef, null);
        this.verifySer = this.injector.get(VerifyDetailService);
        this.localeId = this.injector.get(LOCALE_ID, null) || this.localeId;
        WfValidatorAdapter.localePipe = this.localePipe;
        forkJoin(this.uiState.getEnableAdminOrgAut(), this.uiState.getEnableFlowFormAut()).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            this.uiState.enableAdminOrgAut = re[0];
            this.uiState.enableFlowFormAut = re[1];
            if (!this.uiState.enableAdminOrgAut) {
                this.uiState.getAdministratorInfo();
            }
        }));
    }
    /**
     * @param {?} t
     * @return {?}
     */
    set time(t) {
        this._time = t;
        this.uiState.time = t;
    }
    /**
     * @return {?}
     */
    get time() {
        return this._time;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set scene(v) {
        this.uiState.scene = v;
    }
    /**
     * @return {?}
     */
    get scene() {
        return this.uiState.scene;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.procNameTitle = this.processInfo ? this.processInfo.processName : this.rtProcessInfo.procName;
        if (this.rtProcessInfo && this.rtProcessInfo.rtProcDefId) {
            this.uiState.procDefId = this.rtProcessInfo.rtProcDefId;
        }
        this.addEventBusListener();
        this.uiState.initUIState();
        this.showLoading();
        this.addPropertyChangedHandler();
        // 获取消息列表
        this.uiState.getMessageChannels();
        focus();
        document.body.addEventListener('keydown', (/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            if (!this.showModelButton && n.shiftKey && 'Slash' === n.code) {
                this.showModelButton = true;
                this.notify.success(this.localePipe.transform("processEditor.showButton"));
                this.viewProcModel();
            }
        }));
        this.cdr && this.cdr.detectChanges();
        this.createEditorUi();
    }
    /**
     * @return {?}
     */
    createEditorUi() {
        this.service.getGeneralConfig().subscribe((/**
         * @param {?} generalConfig
         * @return {?}
         */
        (generalConfig) => {
            /** @type {?} */
            const processCategoryId = this._time === ProcessTime.rt ? this.rtProcessInfo.flowFormId : this.processInfo.flowFormId;
            this.viewModel.getProcessCategory(processCategoryId).subscribe((/**
             * @param {?} procCategory
             * @return {?}
             */
            (procCategory) => {
                /** @type {?} */
                const bizCategoryId = this._time === ProcessTime.dt ? procCategory.businessObjectId : undefined;
                this.service.getFormFormat(bizCategoryId).pipe(switchMap((/**
                 * @param {?} formFormats
                 * @return {?}
                 */
                (formFormats) => {
                    this.cdr && this.cdr.detectChanges();
                    this.editorUi = new WfEditorUi(this._time, this.action, this.editorUiContainerER.nativeElement, this.injector, this.modalService, this.resolver);
                    this.editorUi.multiLangEnabled = true;
                    this.editorUi.langCode = this.localeId;
                    this.editorUi.bizCategoryId = bizCategoryId;
                    this.editorUi.mode = this.mode;
                    this.editorUi.scene = this.uiState.scene;
                    this.editorUi.procType = this.procType;
                    this.editorUi.generalConfig = generalConfig;
                    this.editorUi.formFormats = formFormats;
                    return of$1({});
                })))
                    // 2023-5-30 为了解决网络较差场景下的加载问题修改了加载顺序
                    .pipe(delay(200))
                    .subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.openProcContent();
                }));
            }));
        }));
    }
    /**
     * @param {?} editorUi
     * @return {?}
     */
    addEditorUiListeners(editorUi) {
        editorUi.addListener(PmfEvents.ShowProperty, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            /** @type {?} */
            const cells = evt.getProperty("cells");
            this.viewModel.setProperty(this.editorUi.getFarrisPropConfig(cells));
        }));
        // 工具箱节点拖动至画布后更新
        editorUi.graph.addListener(PmfEvents.CellsInserted, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            this.uiState.getUserActList(this.editorUi.getActivities());
            this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
            this.uiState.getEndEventList(this.editorUi.getEndEvents());
        }));
        // 删除节点时触发更新
        editorUi.graph.addListener(mxEvent.CELLS_REMOVED, (/**
         * @return {?}
         */
        () => {
            this.uiState.getUserActList(this.editorUi.getActivities());
            this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
            this.uiState.getEndEventList(this.editorUi.getEndEvents());
        }));
    }
    /**
     * 添加事件总线监听
     * @private
     * @return {?}
     */
    addEventBusListener() {
        this.eventBus.on(EventBusKeys.batchCopyProperty, (/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                this.editorUi.batchCopyProperty(data);
            }
        }));
        this.eventBus.on(EventBusKeys.batchSetProperty, (/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                this.editorUi.batchSetProperty(data);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    addPropertyChangedHandler() {
        this.propertyPanel.propertyChanged.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty(data);
        }));
        this.propertyPanel.submitModal.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty(data.changeObject, data.parameters);
        }));
        return false; // 防止冒泡
    }
    /**
     * 更新属性
     * @private
     * @param {?} data
     * @param {?=} parameters
     * @return {?}
     */
    updateChangeProperty(data, parameters = null) {
        // 更新界面变更状态
        this.changedFlag = false;
        data.Id = this.uiState.propertyData.Id;
        if (parameters) {
            data.parameters = parameters;
        }
        switch (data.propertyID) {
            case ProcessPropertyKeys.EntryForm:
                this.bindEntryFormInfo(data);
                break;
            case UserActivityPropertyKeys.ApprovalItems:
                this.editorUi.updateProperty(data);
                this.activity.buildCounterSignVariables(data.propertyValue);
                break;
            case UserActivityPropertyKeys.CompleteStrategy:
                this.beforeCompleteStrategyChange(data).subscribe((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => {
                    if (b) {
                        this.editorUi.updateProperty(data);
                        this.completeStrategyChanged(data.propertyValue);
                    }
                    this.viewModel.setProperty(this.editorUi.refreshProperty(data));
                }));
                break;
            // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
            // case UserActivityPropertyKeys.otherAssignNodes:
            // case StartActivityPropertyKeys.otherAssignNodes:
            //   if (data.propertyValue) {
            //     this.editorUi.updateProperty(data);
            //     this.OtherAssignNodesChanged(data);
            //   } else {
            //     this.editorUi.updateProperty(data);
            //   }
            //   break;
            case UserActivityPropertyKeys.SignRule:
                this.editorUi.updateProperty(data);
                break;
            // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
            case ProcessPropertyKeys.messageNotice: // 消息通知
            case UserActivityPropertyKeys.messageNotice: // 消息通知
            case MessageActivityPropertyKeys.messageNotice: // 消息通知
            case NotifyActivityPropertyKeys.messageNotice: // 消息通知
                if (data.propertyValue.isBatchCopy) { // 是否是消息通知属性批量复制
                    this.editorUi.batchCopyProperty(data);
                    break;
                }
                this.editorUi.updateProperty(data);
                break;
            case ProcessPropertyKeys.startMode:
                this.updateStartMode(data);
                break;
            default:
                this.editorUi.updateProperty(data);
                break;
        }
        this.uiState.getUserActList(this.editorUi.getActivities());
        this.uiState.getEndEventList(this.editorUi.getEndEvents());
        this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
        this.uiState.getStartMode(this.editorUi.getStartMode());
        if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
            this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
        }
        else {
            this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => this.uiState.subProcessElementContext.some((/**
             * @param {?} y
             * @return {?}
             */
            y => y.key != x.key))));
        }
        this.viewModel.setProperty(this.editorUi.refreshProperty(data));
    }
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @private
     * @param {?} data
     * @return {?}
     */
    bindEntryFormInfo(data) {
        /** @type {?} */
        const flowformId = data.propertyValue.id;
        if (flowformId) {
            this.viewModel.getFlowFormInfoById(flowformId).subscribe((/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                data.flowForm = info.flowForm;
                data.formalParameters = info.formalParameters;
                data.processBizComponnets = info.bizComponents;
                data.executeForms = [];
                info.excuteForms.forEach((/**
                 * @param {?} form
                 * @return {?}
                 */
                form => {
                    if (form.isDefault) {
                        // 流程绑定默认单据
                        /** @type {?} */
                        const executeForms = this.ConvertExecuteForm(form);
                        data.executeForms = data.executeForms.concat(executeForms);
                    }
                }));
                data.customizeActions = info.customizeActions.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.isAll === true)).map((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => ({
                    id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                    actualParameters: a.actualParameters.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => ({
                        Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                    })))
                })));
                // 加载业务活动面板
                this.editorUi.loadBizActivities(info.bizActivities || []);
                this.service.getBizCmp().subscribe((/**
                 * @param {?} cmps
                 * @return {?}
                 */
                (cmps) => {
                    data.bizCmps = cmps;
                    this.editorUi.updateProperty(data);
                    this.uiState.getUserActList(this.editorUi.getActivities());
                    this.uiState.getEndEventList(this.editorUi.getEndEvents());
                    this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
                    this.uiState.getStartMode(this.editorUi.getStartMode());
                    if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
                    }
                    else {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => this.uiState.subProcessElementContext.some((/**
                         * @param {?} y
                         * @return {?}
                         */
                        y => y.key != x.key))));
                    }
                    this.viewModel.setProperty(this.editorUi.refreshProperty(data));
                }));
            }));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updateStartMode(data) {
        /** @type {?} */
        const bpmnModel = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            /** @type {?} */
            const procHeader = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof ProcessHeader))));
            /** @type {?} */
            let flowFormKey = procHeader[0].BizDefKey;
            this.service.getAllBizCmp(flowFormKey).subscribe((/**
             * @param {?} allBizCmps
             * @return {?}
             */
            (allBizCmps) => {
                this.service.getBizCmp().subscribe((/**
                 * @param {?} bizCmps
                 * @return {?}
                 */
                (bizCmps) => {
                    data.allBizCmps = allBizCmps;
                    data.bizCmps = bizCmps;
                    this.editorUi.updateProperty(data);
                    this.uiState.getUserActList(this.editorUi.getActivities());
                    this.uiState.getEndEventList(this.editorUi.getEndEvents());
                    this.uiState.getStartMode(this.editorUi.getStartMode());
                    if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
                    }
                    else {
                        this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => this.uiState.subProcessElementContext.some((/**
                         * @param {?} y
                         * @return {?}
                         */
                        y => y.key != x.key))));
                    }
                    this.viewModel.setProperty(this.editorUi.refreshProperty(data));
                }));
            }));
        }
    }
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    note(record) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(NoteComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.record = record;
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("processEditor.changeRecord"),
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            // 更新流程记录
            this.editorUi.graph.bpmnModel.DefaultProcess.Documentation = data;
            dialog.close();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    openProcContent() {
        if (this.time === ProcessTime.dt) {
            if (this.processInfo) {
                if (this.processInfo.processKey === EventBusKeys.new && this.processInfo.flowFormId) {
                    this.openNewProcess(this.processInfo.flowFormId);
                }
                else {
                    // TODO：首先获取流程分类信息，确保流程分类和流程构件获取到（会稍微影响设计器打开速度）
                    this.viewModel.getFlowFormInfoById(this.processInfo.flowFormId).subscribe((/**
                     * @param {?} info
                     * @return {?}
                     */
                    (info) => {
                        this.editorUi.loadBizActivities(info.bizActivities || []);
                        this.getProcContent(this.processInfo.processKey).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            this.uiState.content = this.checkModelContent(JSON.stringify(re));
                            this.openProcess(this.uiState.content);
                        }));
                    }));
                }
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.noDtInfo"));
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (this.rtProcessInfo) {
                this.viewModel.getFlowFormInfoById(this.rtProcessInfo.flowFormId).subscribe((/**
                 * @param {?} info
                 * @return {?}
                 */
                (info) => {
                    this.editorUi.loadBizActivities(info.bizActivities || []);
                    this.getProcContent(this.rtProcessInfo.rtProcDefId).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    re => {
                        this.uiState.content = this.checkModelContent(JSON.stringify(re));
                        this.openProcess(this.uiState.content);
                    }));
                }));
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.noRtInfo"));
            }
        }
    }
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @param {?} ffId 流程分类ID
     * @return {?}
     */
    openNewProcess(ffId) {
        this.viewModel.getFlowFormInfoById(ffId).subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            /** @type {?} */
            const processBizComponnets = info.bizComponents;
            /** @type {?} */
            const customizeActions = info.customizeActions.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.isAll === true)).map((/**
             * @param {?} a
             * @return {?}
             */
            a => ({
                id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                actualParameters: a.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                })))
            })));
            /** @type {?} */
            let executeForms = [];
            info.excuteForms.forEach((/**
             * @param {?} form
             * @return {?}
             */
            form => {
                if (form.isDefault) {
                    // 流程绑定默认单据
                    /** @type {?} */
                    const forms = this.ConvertExecuteForm(form);
                    executeForms = executeForms.concat(forms);
                }
            }));
            // 如果不存在表单定义，需要去表单格式列表取一下
            if (executeForms.length === 0
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === TerminalType.PC)) === -1
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === TerminalType.MOBILE)) === -1) {
                this.viewModel.getFormFormatsByBizCategory().subscribe((/**
                 * @param {?} formFormats
                 * @return {?}
                 */
                (formFormats) => {
                    if (formFormats && formFormats.length > 0) {
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.TerminalType === TerminalType.PC)) === -1) {
                            /** @type {?} */
                            const formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            f => f.terminal === 'PC' && f.status === 0))[0];
                            if (formFormat) {
                                executeForms.push(this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.TerminalType === TerminalType.MOBILE)) === -1) {
                            /** @type {?} */
                            const formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            f => f.terminal === 'Mobile' && f.status === 0))[0];
                            if (formFormat) {
                                executeForms.push(this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                    }
                    /** @type {?} */
                    const newProcInfo = {
                        name: this.processInfo.processName,
                        bizObjId: this.processInfo.bizObjId,
                        ffId: ffId,
                        ffName: this.processInfo.flowFormName,
                        startMode: this.processInfo.startMode,
                        formalParameters: info.formalParameters,
                        processBizComponnets: processBizComponnets,
                        executeForms: executeForms,
                        customizeActions: customizeActions,
                        processDescription: info.flowForm.processDescription,
                    };
                    this.createBpmnModel(info.bizActivities || [], newProcInfo);
                }));
            }
            else {
                /** @type {?} */
                const newProcInfo = {
                    name: this.processInfo.processName,
                    bizObjId: this.processInfo.bizObjId,
                    ffId: ffId,
                    ffName: this.processInfo.flowFormName,
                    startMode: this.processInfo.startMode,
                    formalParameters: info.formalParameters,
                    processBizComponnets: processBizComponnets,
                    executeForms: executeForms,
                    customizeActions: customizeActions,
                    processDescription: info.flowForm.processDescription,
                };
                this.createBpmnModel(info.bizActivities || [], newProcInfo);
            }
        }));
    }
    /**
     * @param {?} bizActivities
     * @param {?} newProcInfo
     * @return {?}
     */
    createBpmnModel(bizActivities, newProcInfo) {
        this.service.getBizCmp().subscribe((/**
         * @param {?} cmps
         * @return {?}
         */
        (cmps) => {
            // 2023-5-30 为了解决网络较差场景下的加载问题修改了加载顺序 先加载数据再showeditorUi
            this.editorUi.show();
            this.addEditorUiListeners(this.editorUi);
            this.editorUi.loadBizActivities(bizActivities || []);
            this.editorUi.createBpmnModel(newProcInfo, cmps);
            this.service.getProcExtendProperty(newProcInfo.BizDefKey, newProcInfo.startMode, this.editorUi.bizCategoryId).subscribe((/**
             * @param {?} property
             * @return {?}
             */
            (property) => {
                /** @type {?} */
                const props = [];
                property.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    if ((p.bizCategoryId || p.bizDefKey) && ((p.bizCategoryId.indexOf(this.editorUi.bizCategoryId) != -1 || p.bizCategoryId === '*') ||
                        (p.bizDefKey.indexOf(newProcInfo.BizDefKey) != -1 || p.bizDefKey === '*')) &&
                        (p.startMode.indexOf(newProcInfo.startMode) != -1 || p.startMode === '*')) {
                        props.push(p);
                    }
                }));
                this.editorUi.procExtProps = props;
                if (this.flag) {
                    this.flag = false;
                    this.closeLoading();
                }
                // 显示流程属性
                this.viewModel.initProcessProperty(this.editorUi.getFarrisPropConfig());
                // 获取启动方式
                this.uiState.getStartMode(this.editorUi.getStartMode());
                if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                    this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
                }
                else {
                    this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => this.uiState.subProcessElementContext.some((/**
                     * @param {?} y
                     * @return {?}
                     */
                    y => y.key != x.key))));
                }
                this.uiState.bpmnModel = this.editorUi.graph.bpmnModel;
                this.addGraphModelChangedListener();
            }));
        }));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    openProcess(content) {
        // 取ProcessHeader
        /** @type {?} */
        const model = new BpmnModel();
        model.LoadFromJson(content);
        /** @type {?} */
        const processHeader = ((/** @type {?} */ (model.DefaultProcess.GetExtensionElements().filter((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof ProcessHeader))[0])));
        this.service.getProcExtendProperty(processHeader.BizDefKey, processHeader.startMode, this.editorUi.bizCategoryId).subscribe((/**
         * @param {?} property
         * @return {?}
         */
        (property) => {
            /** @type {?} */
            const props = [];
            property.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                if ((p.bizCategoryId || p.bizDefKey) && ((p.bizCategoryId.indexOf(this.editorUi.bizCategoryId) != -1 || p.bizCategoryId === '*') ||
                    (p.bizDefKey.indexOf(processHeader.BizDefKey) != -1 || p.bizDefKey === '*')) &&
                    (p.startMode.indexOf(processHeader.startMode) != -1 || p.startMode === '*')) {
                    props.push(p);
                }
            }));
            this.editorUi.procExtProps = props;
            // 2023-5-30 为了解决网络较差场景下的加载问题修改了加载顺序 先加载数据再showeditorUi
            this.editorUi.show();
            this.addEditorUiListeners(this.editorUi);
            this.editorUi.openBpmnModel(content);
            if (this.flag) {
                this.flag = false;
                this.closeLoading();
            }
            // 显示流程属性
            this.viewModel.initProcessProperty(this.editorUi.getFarrisPropConfig());
            // 打开时获取所有活动节点信息
            this.uiState.getUserActList(this.editorUi.getActivities());
            // 打开时获取所有结束节点信息
            this.uiState.getEndEventList(this.editorUi.getEndEvents());
            // 打开时获取所有知会节点信息
            this.uiState.getNotifyEventList(this.editorUi.getNotifyEvents());
            // 打开时获取所有消息节点信息
            this.uiState.getMessageEventList(this.editorUi.getMessageEvents());
            // 打开时获取所有子流程和信号捕获节点信息
            this.uiState.getSubAndCatchEventsList(this.editorUi.getSubAndCatchEvents());
            this.uiState.bpmnModel = this.editorUi.graph.bpmnModel;
            // 获取启动方式
            this.uiState.getStartMode(this.editorUi.getStartMode());
            if (this.editorUi.getStartMode() == StartMode.SUB_PROCESS) {
                this.uiState.subActivityContext = this.uiState.subActivityContext.concat(this.uiState.subProcessElementContext);
            }
            else {
                this.uiState.subActivityContext = this.uiState.subActivityContext.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => this.uiState.subProcessElementContext.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key != x.key))));
            }
            this.addGraphModelChangedListener();
        }));
    }
    /**
     * 添加graph model监听器，有变化则将changedFlag
     * @return {?}
     */
    addGraphModelChangedListener() {
        // 监听画布变化，更新界面变更状态
        /** @type {?} */
        const changedListener = (/**
         * @return {?}
         */
        () => {
            this.changedFlag = false;
        });
        this.editorUi.graph.model.addListener(mxEvent.CHANGE, changedListener);
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    showTip(data) {
        if (data.type === 'message') {
            switch (data.level) {
                case 'warning':
                    this.message.warning(data.message);
                    break;
                case 'error':
                    this.message.error(data.message);
                    break;
                case 'question':
                    this.message.question(data.message, (/**
                     * @return {?}
                     */
                    () => {
                        this.questionOKHandle(data);
                    }));
                    break;
                default:
                    this.message.info(data.message);
                    break;
            }
        }
        else if (data.type === 'notify') {
            switch (data.level) {
                case 'warning':
                    this.notify.warning(data.message);
                    break;
                case 'error':
                    this.notify.error(data.message);
                    break;
                default:
                    this.notify.info(data.message);
                    break;
            }
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    showVerify(data) {
        this.errorList = data;
        this.createValidationTips();
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    questionOKHandle(data) {
        switch (data.action) {
        }
    }
    /**
     * 获取流程上下文
     * @param {?} id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     * @return {?}
     */
    getProcContent(id) {
        if (id) {
            if (this.time === ProcessTime.dt) {
                return this.service.getProcContentbyKey(id);
            }
            else if (this.time === ProcessTime.rt) {
                return this.service.getRTProcContentbyId(id);
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.wrongMoment"));
            }
        }
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    save(content) {
        this.uiState.content = content;
        this.showLoading();
        /** @type {?} */
        const process = JSON.parse(this.uiState.content);
        this.saveHttp().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.closeLoading();
            // 2023-6-13 保存后同步流程名称到标题栏
            this.procNameTitle = process.DefaultProcess.Name;
            this.notify.success((/** @type {?} */ ({
                title: this.localePipe.transform("processEditor.prompted"),
                msg: this.localePipe.transform("processEditor.saveSuccess"),
                timeout: 3000
            })));
            if (this.time === ProcessTime.dt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, true, process.DefaultProcess.Key);
            }
            else if (this.time === ProcessTime.rt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, true, process.DefaultProcess.Key);
            }
            // 重置界面变更状态
            this.changedFlag = false;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.closeLoading();
            this.notify.error((/** @type {?} */ ({
                title: this.localePipe.transform("processEditor.prompted"),
                msg: error.error.Message,
                timeout: 3000
            })));
            if (this.time === ProcessTime.dt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, false, process.DefaultProcess.Key);
            }
            else if (this.time === ProcessTime.rt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, false, process.DefaultProcess.Key);
            }
        }));
    }
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    release(content) {
        this.uiState.content = content;
        this.showLoading();
        this.uiState.getReleaseConfig().subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            if (config.currentValue === 'true') {
                // 展示发布前审批页面，同时保存，记审计
                this.viewModel.saveProcess(this.uiState.content, this.processInfo, 1).subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                (re) => {
                    this.viewModel.getProcDefsByKey(JSON.parse(content).DefaultProcess.Key).subscribe((/**
                     * @param {?} ProcDefs
                     * @return {?}
                     */
                    (ProcDefs) => {
                        /** @type {?} */
                        const maxVersion = Math.max.apply(Math, ProcDefs.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            return item.version << 0;
                        })));
                        // 展示发布前审批页面，同时保存，记审计
                        this.viewModel.releaseProcess(content, maxVersion === -Infinity ? 1 : maxVersion);
                        this.closeLoading();
                    }));
                }));
                this.notify.success((/** @type {?} */ ({
                    title: this.localePipe.transform("processEditor.prompted"),
                    msg: this.localePipe.transform("processEditor.waitReview"),
                    timeout: 3000
                })));
                /** @type {?} */
                const process = JSON.parse(this.uiState.content);
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, true, process.DefaultProcess.Key);
            }
            else {
                this.viewModel.deployProcess(this.uiState.content).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.closeLoading();
                    this.viewModel.saveProcess(this.uiState.content, this.processInfo, 0).subscribe((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => { }));
                    this.notify.success((/** @type {?} */ ({
                        title: this.localePipe.transform("processEditor.prompted"),
                        msg: this.localePipe.transform("processEditor.successPublish"),
                        timeout: 3000
                    })));
                    /** @type {?} */
                    const process = JSON.parse(this.uiState.content);
                    this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, true, process.DefaultProcess.Key);
                }), (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.closeLoading();
                    this.notify.error((/** @type {?} */ ({
                        title: this.localePipe.transform("processEditor.prompted"),
                        msg: this.localePipe.transform("processEditor.publishFail") + `${e.error.Message}`,
                        timeout: 3000
                    })));
                    /** @type {?} */
                    const process = JSON.parse(this.uiState.content);
                    this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, false, process.DefaultProcess.Key);
                }));
            }
        }));
    }
    /**
     * 保存流程定义（设计时+运行时）
     * @private
     * @return {?}
     */
    saveHttp() {
        if (this.uiState.content) {
            if (this.time === ProcessTime.dt) {
                return this.viewModel.saveProcess(this.uiState.content, this.processInfo, 1);
            }
            else if (this.time === ProcessTime.rt) {
                return this.viewModel.saveRTProcess(this.uiState.content, this.rtProcessInfo.rtProcDefId);
            }
            else {
                throw new Error(this.localePipe.transform("processEditor.wrongMoment"));
            }
        }
    }
    /**
     * @return {?}
     */
    showLoading() {
        this.loadService.show({ container: 'body', message: '', type: 1 });
    }
    /**
     * @return {?}
     */
    closeLoading() {
        this.loadService.close();
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    ConvertExecuteForm(form) {
        /** @type {?} */
        const executeForms = new Array();
        if (form.terminal === 'web,app') {
            /** @type {?} */
            const webForm = new ExecuteFormModel();
            webForm.ComponentId = form.appId;
            webForm.formFormatId = form.formFormatId;
            webForm.FormType = form.formType;
            webForm.Name = form.name;
            webForm.TerminalType = TerminalType.PC;
            if (form.actualParameters && form.actualParameters.length > 0) {
                webForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code,
                    Value: p.value
                })));
            }
            executeForms.push(webForm);
            /** @type {?} */
            const appForm = new ExecuteFormModel();
            appForm.ComponentId = form.appId;
            appForm.formFormatId = form.formFormatId;
            appForm.FormType = form.formType;
            appForm.Name = form.name;
            appForm.TerminalType = TerminalType.MOBILE;
            if (form.actualParameters && form.actualParameters.length > 0) {
                appForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => ({
                    Name: p.code,
                    Tag: p.valueType ? p.valueType : ProcessDeUtil.initVariableType(p.value),
                    Value: p.value
                })));
            }
            executeForms.push(appForm);
        }
        else {
            /** @type {?} */
            const executeForm = new ExecuteFormModel();
            executeForm.ComponentId = form.appId;
            executeForm.formFormatId = form.formFormatId;
            executeForm.FormType = form.formType;
            executeForm.Name = form.name;
            switch (form.terminal) {
                case 'web':
                    executeForm.TerminalType = TerminalType.PC;
                    break;
                case 'app':
                    executeForm.TerminalType = TerminalType.MOBILE;
                    break;
            }
            if (form.actualParameters && form.actualParameters.length > 0) {
                executeForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => ({
                    Name: p.code,
                    Tag: p.valueType ? p.valueType : ProcessDeUtil.initVariableType(p.value),
                    Value: p.value
                })));
            }
            executeForms.push(executeForm);
        }
        return executeForms;
    }
    /**
     * @private
     * @param {?} formformat
     * @return {?}
     */
    formFormat2ExecuteForm(formformat) {
        /** @type {?} */
        const form = new ExecuteFormModel();
        form.Id = ProcessDeUtil.GenerateElementId();
        form.ComponentId = null;
        form.formFormatId = formformat.id;
        form.FormType = '0';
        form.Name = formformat.name;
        switch (formformat.terminal) {
            case 'PC':
                form.TerminalType = TerminalType.PC;
                break;
            case 'Mobile':
                form.TerminalType = TerminalType.MOBILE;
                break;
        }
        if (formformat.urlParameters && formformat.urlParameters.length > 0) {
            form.ActualParameters = formformat.urlParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            p => ({
                Name: p.code,
                Tag: p.valueType ? p.valueType : ProcessDeUtil.initVariableType(p.value),
                Value: p.value
            })));
        }
        return form;
    }
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    completeStrategyChanged(strategy) {
        if (strategy !== this.uiState.completeIterator[0].key) {
            // 参与者存在自动审批的情况下，不允许修改完成策略为会签规则
            // if (this.uiState.propertyData.ParticipantSchemes
            //   && this.uiState.propertyData.ParticipantSchemes.options
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers.length > 0) {
            //   return;
            // } else {
            // 会签规则不存在，即由抢占模式，变为会签时
            if (!this.uiState.propertyData.SignRule) {
                // 会签是自动弹出会签规则编辑
                /** @type {?} */
                const compFactory = this.resolver.resolveComponentFactory(SignRuleComponent);
                /** @type {?} */
                const compRef = compFactory.create(this.injector);
                compRef.instance.value = [];
                // compRef.instance.counterSignVariables = this.uiState.counterSignVariables || [];
                // compRef.instance.approvalItems = this.uiState.approvalItems || [];
                /** @type {?} */
                const modalConfig = Object.assign(compRef.instance.modalConfig, { buttons: compRef.instance.modalFooter });
                /** @type {?} */
                const dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModal.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                $event => dialog.close()));
                compRef.instance.submitModal.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.updateChangeProperty({
                        categoryId: 'performerProperty',
                        propertyID: UserActivityPropertyKeys.SignRule,
                        propertyValue: data.value
                    });
                    dialog.close();
                }));
            }
            // 会签规则下，驳回规则约束
            if (((/** @type {?} */ (this.uiState.propertyData.BackWardRule))).SelectTargetAble === true) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.message.warning(this.localePipe.transform("processEditor.policyConflict"));
                }), 500);
            }
            // }
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    OtherAssignNodesChanged(data) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AssignScopeComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        let location;
        if (data.Id.indexOf('startActivity') > -1) {
            location = 'startActivity';
        }
        else {
            location = 'userActivity';
        }
        if (location === 'startActivity') {
            compRef.instance.value = [];
            /** @type {?} */
            const activities = this.uiState.userActList.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.Id !== this.uiState.propertyData.Id
                && a.AssignmentStrategy === 'ASSIGN'
                && a.AssignPerformerConfig
                && a.AssignPerformerConfig.Operator === 'procInstCreator'));
            if (activities && activities.length > 0) {
                compRef.instance.value = activities.map((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id));
            }
            else {
                compRef.instance.value = new Array();
            }
        }
        else {
            compRef.instance.value = [];
        }
        compRef.instance.location = location;
        /** @type {?} */
        const modalConfig = Object.assign(compRef.instance.modalConfig, { buttons: compRef.instance.modalFooter });
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModal.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submitModal.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty({
                categoryId: location = 'activityConfig',
                // todo：多个活动具有同名属性时，如何更合理定义PropertyKey？
                propertyID: UserActivityPropertyKeys.otherAssignActivities,
                propertyValue: data.value
            });
            dialog.close();
        }));
    }
    /**
     * 完成策略调整校验
     * @private
     * @param {?} data
     * @return {?}
     */
    beforeCompleteStrategyChange(data) {
        if (this.time === ProcessTime.rt) {
            return this.viewModel.beforeCompleteStrategyChange(data, this.rtProcessInfo);
        }
        else {
            return of$1(true);
        }
    }
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     * @private
     * @param {?} content
     * @return {?}
     */
    checkModelContent(content) {
        /** @type {?} */
        const process = JSON.parse(content);
        /** @type {?} */
        const modelBizDefKey = process.DefaultProcess.extensionElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey;
        if (this.time === ProcessTime.dt) {
            if (modelBizDefKey === this.processInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey = this.processInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (modelBizDefKey === this.rtProcessInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey = this.rtProcessInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showModeChange(event) {
        const { mode = ShowMode.panel, wideWidth = 330, smallWidth = 41 } = event || {};
        if (mode === ShowMode.panel) {
            this.panelWidth = wideWidth;
            this.rightPanelWidth = wideWidth;
        }
        else if (mode === ShowMode.sidebar) {
            this.panelWidth = smallWidth;
            this.rightPanelWidth = smallWidth;
        }
    }
    /**
     * @return {?}
     */
    saveProc() {
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        this.save(model.ConvertToJson());
    }
    /**
     * @return {?}
     */
    saveAs() {
        if (!(this.uiState.enableAdminOrgAut || ((this.uiState.isAdministratorConfig &&
            this.uiState.administrator !== null) || (!this.uiState.isAdministratorConfig)))) {
            this.message.info(this.localePipe.transform("processEditor.noPermissionToSave"));
            return;
        }
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        /** @type {?} */
        const process = new BpmnModel();
        process.LoadFromJson(model.ConvertToJson());
        process.DefaultProcess.Key = ProcessDeUtil.GenerateElementId();
        process.DefaultProcess.Id = ProcessDeUtil.GenerateElementId();
        process.DefaultDiagram.BpmnPlane.BpmnElementId = process.DefaultProcess.Id;
        this.viewModel.saveAsProcess(process, this.processInfo);
    }
    /**
     * @return {?}
     */
    releaseProc() {
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        this.release(model.ConvertToJson());
    }
    /**
     * @return {?}
     */
    sync() {
        /** @type {?} */
        const model = this.editorUi.graph.bpmnModel;
        /** @type {?} */
        const res = WfValidatorAdapter.validator(model, this.scene);
        if (res.valid == false) {
            this.showTip(res);
            return;
        }
        if (res.warningList && res.warningList.length > 0) {
            this.showVerify(res.warningList);
        }
        else {
            this.clearValidationTips();
        }
        this.viewModel.syncDtProcess(model.ConvertToJson(), this.rtProcessInfo);
    }
    /**
     * @return {?}
     */
    procRecord() {
        /** @type {?} */
        const record = this.editorUi.graph.bpmnModel.DefaultProcess.Documentation;
        this.note(record);
    }
    /**
     * @return {?}
     */
    batchSet() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(BatchSetPropertiesComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: '批量设置',
            width: 512,
            height: 565,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            dialog.close();
        }));
    }
    /**
     * @return {?}
     */
    closeProc() {
        // 如果界面发生变化，增加确认框提示，无变化则直接关闭
        if (this.changedFlag) {
            this.message.confirm(this.localePipe.transform("processEditor.closeProc1"), this.localePipe.transform("processEditor.closeProc2")).subscribe((/**
             * @param {?} f
             * @return {?}
             */
            (f) => {
                if (f) {
                    this.close.emit();
                }
            }));
        }
        else {
            this.close.emit();
        }
    }
    /**
     * @return {?}
     */
    viewProcModel() {
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("processEditor.viewModel"),
            width: 800,
            height: 520,
            showButtons: false
        };
        // 模型自动复制到剪贴板
        this.notify.success(this.localePipe.transform("processEditor.copied"));
        this.copy(this.editorUi.graph.bpmnModel.ConvertToJson());
        this.modalService.show(this.editorUi.graph.bpmnModel.ConvertToJson(), modalConfig);
    }
    /**
     * 左右拖动后事件，event.size.width是左侧面板的宽度
     * @param {?} event
     * @return {?}
     */
    rzStop(event) {
        this.panelWidth = event.size.width;
        this.editorUi && this.editorUi.graph.refresh();
    }
    // 展示表单验证组件，用于构件校验
    /**
     * @return {?}
     */
    createValidationTips() {
        this.verifySer.clear();
        this.verifyContainer = this.verifySer.createVerify({
            parent: this.contentEl,
            verifyList: this.errorList,
            verifyType: this.tabTypeList,
            showList: true,
            showType: 'processWarning',
            verifyResultTipsTmpl: this.tipsTmpl // 提示模板
        });
        this.listclick = this.verifyContainer.validatorClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            console.log(e);
        }));
        this.showchange = this.verifyContainer.listshowChange.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            console.log(e);
        }));
    }
    /**
     * @return {?}
     */
    clearValidationTips() {
        this.errorList = [];
        if (this.verifySer) {
            this.verifySer.clear();
        }
    }
    /**
     * @param {?} text
     * @return {?}
     */
    copy(text) {
        /** @type {?} */
        const el = document.createElement('input');
        el.setAttribute('value', text);
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    }
}
WfProcessEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-process-editor',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header mt-1\">\r\n    <nav class=\"f-page-header-base py-0\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-manage\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">{{procNameTitle}}</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <ng-container *ngIf=\"action==='edit'&&time==='dt'\">\r\n          <button class=\"btn btn-primary btn-lg mr-2\" (click)=\"saveProc()\">{{ 'processEditor.button.saveProc' | wfLocale }}</button>\r\n          <button class=\"btn btn-secondary mr-2\" (click)=\"releaseProc()\">{{ 'processEditor.button.releaseProc' | wfLocale }}</button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"action==='edit'&&time==='rt'\">\r\n          <button class=\"btn btn-primary btn-lg mr-2\" (click)=\"saveProc()\">{{ 'processEditor.button.saveProc' | wfLocale }}</button>\r\n          <button class=\"btn btn-secondary mr-2\" (click)=\"sync()\">{{ 'processEditor.button.sync' | wfLocale }}</button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"time==='dt'&&action!='assignView'\">\r\n          <button class=\"btn btn-secondary btn-lg mr-2\" (click)=\"saveAs()\">{{ 'processEditor.button.saveAs' | wfLocale }}</button>\r\n        </ng-container>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"procRecord()\">{{ 'processEditor.button.procRecord' | wfLocale }}</button>\r\n        <ng-container *ngIf=\"showModelButton\">\r\n          <button class=\"btn btn-secondary mr-2\" (click)=\"viewProcModel()\">{{ 'processEditor.button.viewProcModel' | wfLocale }}</button>\r\n          </ng-container>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"closeProc()\">{{ 'processEditor.button.closeProc' | wfLocale }}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main\">\r\n    <div class=\"f-utils-flex-column h-100\">\r\n      <div class=\"flex-auto d-flex flex-fill flex-row\" style=\"position:relative; overflow: hidden\">\r\n        <farris-splitter style=\"display: flex; flex-grow: 1\">\r\n          <farris-splitter-pane style=\"display: flex; flex-grow: 1\" id=\"gspWfDesignerPane\">\r\n            <div class=\"flex-grow-1 h-100\">\r\n              <div style=\"position: relative; height: 100%; width: 100%;\">\r\n                <div id=\"editorUiContainer\" class=\"editorUiContainer geEditor\" #editorUiContainer>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </farris-splitter-pane>\r\n          <farris-splitter-pane class=\"f-page-content-main f-component-splitter-pane\" style=\"margin: 0 0 0 10px\"\r\n            ngResizable [rzHandles]=\"'w'\" [ngStyle]=\"{ width: rightPanelWidth + 'px' }\" (rzStop)=\"rzStop($event)\"\r\n            [relatedIframeParent]=\"'#gspWfDesignerPane'\">\r\n            <div class=\"h-100 d-flex flex-column\">\r\n              <div class=\"f-utils-fill-flex-column\">\r\n                <app-property-panel #propertyPanel [(propertyConfig)]=\"uiState.propertyConfig\"\r\n                  [(propertyData)]=\"uiState.propertyData\" [enableChangeMode]=\"true\" [showCloseBtn]=\"false\"\r\n                  isWhiteTheme=\"true\" (showModeChange)=\"showModeChange($event)\" style=\"height:100%;width:100%;\">\r\n                </app-property-panel>\r\n              </div>\r\n            </div>\r\n          </farris-splitter-pane>\r\n        </farris-splitter>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-template #tipsTmpl let-datas>\r\n  <span class=\"f-icon f-icon-question\" style=\"font-size:14px;\"></span>{{datas[0]['list'].length}}\r\n</ng-template>\r\n",
                providers: [
                    { provide: WF_LANG_RESOURCES, useValue: ɵ0$3 },
                    WfLocalePipe,
                ],
                styles: [`
    .bpmn-designer {
      height: 100%;
      min-height: 400px;
      width: 100%;
    }`]
            }] }
];
/** @nocollapse */
WfProcessEditorComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerViewModel },
    { type: ProcessDesignerDataService },
    { type: LoadingService },
    { type: NotifyService },
    { type: MessagerService },
    { type: WFFlowElementsViewModel },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: EventBusService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
WfProcessEditorComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    time: [{ type: Input }],
    processInfo: [{ type: Input }],
    rtProcessInfo: [{ type: Input }],
    action: [{ type: Input }],
    mode: [{ type: Input }],
    scene: [{ type: Input }],
    procType: [{ type: Input }],
    close: [{ type: Output }],
    propertyPanel: [{ type: ViewChild, args: ['propertyPanel',] }],
    tipsTmpl: [{ type: ViewChild, args: ['tipsTmpl',] }],
    iframe: [{ type: ViewChild, args: ['iframe',] }],
    contentEl: [{ type: ViewChild, args: ['content',] }],
    editorUiContainerER: [{ type: ViewChild, args: ["editorUiContainer",] }],
    editorUiContainerVCR: [{ type: ViewChild, args: ["editorUiContainer", { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssignPerformerConfigComponent {
    /**
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(cdr, localeId, resources, localePipe) {
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.allowGlobalAssign = false;
        this.operatorCollection = [
            { text: this.localePipe.transform('component.assignPerformer.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.assignPerformer.procInstCreator'), value: 'procInstCreator' }
        ];
        this.operator = 'currentUser';
        this.organizationLevelCollection = [
            { value: 'GLOBAL', text: this.localePipe.transform('component.assignPerformer.global'), orgId: 'global' },
            { value: 'UNIT', text: this.localePipe.transform('component.assignPerformer.currentUnit'), orgId: 'currentUnit' },
            { value: 'DEPARTMENT', text: this.localePipe.transform('component.assignPerformer.currentDepartment'), orgId: 'currentDepartment' }
        ];
        this.organizationLevel = this.organizationLevelCollection[0].value;
        this.includeChildren = false;
        this.modalConfig = {
            title: this.localePipe.transform('component.assignPerformer.assignPerformer'),
            width: 720,
            height: 490,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this.assingPerformerConfigForm = new FormGroup({
            multiSelect: new FormControl(v.multiSelect),
            necessary: new FormControl(v.necessary)
        });
        this.operator = v.operator || 'currentUser';
        this.allowGlobalAssign = v.allowGlobalAssign || false;
        if (v.assignScope) {
            this.organizationLevel = v.assignScope.organizationLevel;
            this.includeChildren = v.assignScope.includeChildren;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.config = {
            operator: this.operator,
            multiSelect: this.assingPerformerConfigForm.get('multiSelect').value,
            necessary: this.assingPerformerConfigForm.get('necessary').value,
            allowGlobalAssign: this.allowGlobalAssign
        };
        if (this.allowGlobalAssign && this.organizationLevel !== this.organizationLevelCollection[0].value) {
            /** @type {?} */
            const potential = new OrganizationPotentialOwner();
            potential.actionScope = ActionScope$2.AssignUser;
            potential.organizationLevel = (/** @type {?} */ (this.organizationLevel));
            potential.organizationId = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            o => o.value === this.organizationLevel)).orgId;
            potential.organizationName = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            o => o.value === this.organizationLevel)).text;
            potential.includeChildren = this.includeChildren;
            potential.tag = 'variable';
            this.config.assignScope = potential;
        }
        /** @type {?} */
        const object = { value: this.config, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChange(event) {
        switch (event.value) {
            case this.organizationLevelCollection[0].value:
                this.includeChildren = false;
                break;
            case this.organizationLevelCollection[1].value:
                this.includeChildren = true;
                break;
            case this.organizationLevelCollection[2].value:
                this.includeChildren = false;
                break;
        }
    }
}
AssignPerformerConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-assign-performer-config',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.assignPerformer.assignPerformer'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.assignPerformer.operator'|wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                    <farris-combo-list [(ngModel)]=\"operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                      [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                      [panelHeight]=\"60\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-6\">\r\n              <div class=\"farris-group-wrap ml-2 pl-4\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" type=\"checkbox\" id=\"multiSelect\" formControlName=\"multiSelect\"\r\n                        [readOnly]=\"false\" />\r\n                      <label class=\"custom-control-label\" for=\"multiSelect\">{{'component.assignPerformer.multiSelect'|wfLocale}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-6\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" type=\"checkbox\" id=\"necessary\" formControlName=\"necessary\" [readOnly]=\"false\" />\r\n                      <label class=\"custom-control-label\" for=\"necessary\">{{'component.assignPerformer.necessary'|wfLocale}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n    <!-- <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" [mainTitle]=\"'\u5907\u9009\u8303\u56F4'\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap ml-2 pl-4\">\r\n                <div class=\"form-group\">\r\n                  <div class=\"farris-input-wrap\" style=\"width: 300px;\">\r\n                    <farris-radiogroup [(ngModel)]=\"assignScope\" [data]=\"assignScopeList\" name=\"assignScope\"\r\n                      [horizontal]=\"true\">\r\n                    </farris-radiogroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" [mainTitle]=\"'\u5907\u9009\u8303\u56F4'\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\" style=\"height: 200px;\">\r\n      <app-performer [type]=\"'assignPerformer'\"></app-performer>\r\n    </farris-section> -->\r\n  </section>\r\n</div>\r\n\r\n<!--\r\n<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u6307\u6D3E\u89C4\u5219\u9009\u9879</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\" [formGroup]=\"assingPerformerConfigForm\">\r\n          <div class=\"f-utils-fill-flex-column justify-content-center h-100 pb-4\">\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u6307\u6D3E\u64CD\u4F5C\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mt-1\" style=\"width: 300px;\">\r\n                    <farris-combo-list [(ngModel)]=\"operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                      [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                      [panelHeight]=\"60\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-input-wrap\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input class=\"custom-control-input\" type=\"checkbox\" id=\"multiSelect\" formControlName=\"multiSelect\"\r\n                    [readOnly]=\"false\" />\r\n                  <label class=\"custom-control-label\" for=\"multiSelect\">\u5141\u8BB8\u9009\u62E9\u591A\u4E2A\u5F85\u9009\u7528\u6237</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-input-wrap\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input class=\"custom-control-input\" type=\"checkbox\" id=\"necessary\" formControlName=\"necessary\" [readOnly]=\"false\" />\r\n                  <label class=\"custom-control-label\" for=\"necessary\">\u53EA\u6709\u4E00\u4E2A\u5F85\u9009\u7528\u6237\u65F6\uFF0C\u4ECD\u9700\u624B\u5DE5\u9009\u62E9</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"mx-2 mt-3\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">\u8BBE\u5B9A\u7684\u53C2\u4E0E\u8005\u8303\u56F4\u5916\u6307\u6D3E</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"farris-form form-inline farris-form-inline my-1\">\r\n              <div class=\"col-12 mt-3\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">\u662F\u5426\u542F\u7528</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-switch [(ngModel)]=\"allowGlobalAssign\" [ngModelOptions]=\"{standalone: true}\" name=\"allowGlobalAssign\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"d-flex flex-row\">\r\n                <div class=\"col-8 my-2\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">\u7EC4\u7EC7\u8303\u56F4</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap ml-1\">\r\n                        <farris-combo-list [panelHeight]=\"100\" [(ngModel)]=\"organizationLevel\" [ngModelOptions]=\"{standalone: true}\"\r\n                          name=\"organizationLevel\" [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                          [data]=\"organizationLevelCollection\" [readonly]=\"allowGlobalAssign===false\" (valueChange)=\"valueChange($event)\">\r\n                        </farris-combo-list>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-4 my-2\">\r\n                  <div class=\"farris-input-wrap pt-1\">\r\n                    <div class=\"custom-control custom-checkbox mr-3\">\r\n                      <input class=\"custom-control-input\" type=\"checkbox\" [(ngModel)]=\"includeChildren\" [ngModelOptions]=\"{standalone: true}\"\r\n                        name=\"includeChildren\" id=\"includeChildren\" [disabled]=\"!(allowGlobalAssign===true && organizationLevel === organizationLevelCollection[2].value)\" />\r\n                      <label class=\"custom-control-label\" for=\"includeChildren\">\u5305\u542B\u4E0B\u7EA7</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div> -->\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.assignPerformer.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.assignPerformer.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:415px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
            }] }
];
/** @nocollapse */
AssignPerformerConfigComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AssignPerformerConfigComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JumpScopePipe {
    /**
     * @param {?} value
     * @param {?} nodeId
     * @return {?}
     */
    transform(value, nodeId) {
        return value.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.Id !== nodeId));
    }
}
JumpScopePipe.decorators = [
    { type: Pipe, args: [{ name: 'jumpScopePipe' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UsersNamePipe {
    constructor() { }
    /**
     * @param {?} users
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(users, defaultVal = '') {
        /** @type {?} */
        let r = '';
        users.forEach((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            r += u.performerName + '，';
        }));
        if (r) {
            r = r.substring(0, r.length - 1);
        }
        return r ? r : defaultVal;
    }
}
UsersNamePipe.decorators = [
    { type: Pipe, args: [{ name: 'usersName' },] }
];
/** @nocollapse */
UsersNamePipe.ctorParameters = () => [];
class UsersIdPipe {
    constructor() { }
    /**
     * @param {?} users
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(users, defaultVal = '') {
        /** @type {?} */
        let r = '';
        users.forEach((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            r += u.performerId + ',';
        }));
        if (r) {
            r = r.substring(0, r.length - 1);
        }
        return r ? r : defaultVal;
    }
}
UsersIdPipe.decorators = [
    { type: Pipe, args: [{ name: 'usersId' },] }
];
/** @nocollapse */
UsersIdPipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PROCESS_DESIGNER_APP_PROVIDERS = [
    ProcessDesignerUIState,
    ProcessDesignerViewModel,
    BpmnProcessViewModel,
    WFFlowElementsViewModel,
    SubProcessViewModel,
    AutoActivityAdapter,
    CatchEventAdapter,
    MessageActivityAdapter,
    NotifyActivityAdapter,
    AifCreationBillActivityAdapter,
    BillNodeActivityAdapter,
    SequenceActivityAdapter,
];
/** @type {?} */
const PROCESS_DESIGNER_DOMAIN_PROVIDERS = [
    ProcessDesignerDataService
];
/** @type {?} */
const PROCESS_DESIGNER_PART_PROVIDERS = [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CallActivitySubProcessComponent {
    /**
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     * @param {?} expr
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, util, http, designerState, expr, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform("component.subProcess.subProcessOpt"),
            width: 500,
            height: 380,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess$1();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v) {
            this.callActivitySubProcess = v;
            this.getProcessDefKey(this.callActivitySubProcess.calledElement);
            this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    processConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.procDefKey;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearProcessDef(args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    }
    /**
     * @param {?} args
     * @return {?}
     */
    flowFormConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearFlowForm(args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    }
    /**
     * @return {?}
     */
    setBizDataId() {
        this.showExprHelp();
    }
    /**
     * @private
     * @return {?}
     */
    showExprHelp() {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.callActivitySubProcess.bizDataId = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    valueChange(bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.bizDataId) {
            this.message.warning(this.localePipe.transform("component.subProcess.inheritBizDataId"));
            return false;
        }
        return true;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getProcessDefKey(key) {
        /** @type {?} */
        let url = this.util.getProcessDefinitionWebApi();
        if (key) {
            url += `/procDefKey/${key}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getFlowForm(id) {
        /** @type {?} */
        let url = this.util.getFlowFormWebApi();
        if (id) {
            url += `/${id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    }
}
CallActivitySubProcessComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-call-activity-sub-process',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{'component.subProcess.setOption' | wfLocale}}</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.flowForm' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.flowForm' | wfLocale}}\" [sourceType]=\"'flowform'\" [displayTxt]=\"callActivitySubProcess.calledBizDefName\"\r\n                    (afterConfirm)=\"flowFormConfirm($event)\" (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap my-4\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.processDef' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.processDef' | wfLocale}}\"  [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- <div class=\"farris-group-wrap my-4\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7EE7\u627F\u53D8\u91CF</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"callActivitySubProcess.inheritVariables\" name=\"inheritVariables\">\r\n                  </farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n            <div class=\"farris-group-wrap my-4\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"ml-4 pl-3\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.SameParentProcess' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-3\">\r\n                  <farris-switch  [(ngModel)]=\"callActivitySubProcess.inheritBizDataId\" name=\"inheritBizDataId\"\r\n                    (valueChange)=\"valueChange($event)\">\r\n                  </farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"!callActivitySubProcess.inheritBizDataId\" class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"ml-4 pl-3\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.setBizDataId' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-3\">\r\n                  <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\"\r\n                    [editable]=\"false\" (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\"></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.subProcess.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.subProcess.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CallActivitySubProcessComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CallActivitySubProcessComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    value: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const VOTemplateType = {
    /**来自于BE的VO */
    FromBE: 0,
    /**来自于VO的VO，即VO代理 */
    FromVO: 1,
    /**没有来源的VO，即虚拟VO */
    FromNone: 2,
};
VOTemplateType[VOTemplateType.FromBE] = 'FromBE';
VOTemplateType[VOTemplateType.FromVO] = 'FromVO';
VOTemplateType[VOTemplateType.FromNone] = 'FromNone';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonModelTypeHelper {
    /**
     * @param {?} cm
     * @return {?}
     */
    static getCommonModelType(cm) {
        /** @type {?} */
        let type = CommonModelUtil.GetGeneratedConfigID((/** @type {?} */ (cm)));
        type = "com." + type;
        return type;
    }
    /**
     * 判断VO来源于BE还是VO或者完全虚拟
     * @param {?} gspViewModel
     * @return {?}
     */
    static judgeVoTemplateType(gspViewModel) {
        if (gspViewModel.IsVirtual === true) {
            if (gspViewModel.TemplateVoInfo && gspViewModel.TemplateVoInfo.TemplateVoId != null) {
                return VOTemplateType.FromVO;
            }
            else {
                return VOTemplateType.FromNone;
            }
        }
        else {
            return VOTemplateType.FromBE;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcHelpQuerySolutionComponent {
    /**
     * @param {?} procHelpService
     * @param {?} messager
     * @param {?} notify
     * @param {?} metadataService
     * @param {?} modalService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} localePipe
     */
    constructor(procHelpService, messager, notify, metadataService, modalService, injector, resolver, localePipe) {
        this.procHelpService = procHelpService;
        this.messager = messager;
        this.notify = notify;
        this.metadataService = metadataService;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.queryParamChange = new EventEmitter();
        this.onSearchEmitter = new EventEmitter();
        this.comboSysInitIdField = "value";
        this.comboSysInitValueField = "value";
        this.comboSysInitTextField = "text";
        this.comboSysInitData = [
            { value: "", text: this.localePipe.transform("all") },
            { value: "true", text: this.localePipe.transform("yes") },
            { value: "false", text: this.localePipe.transform("no") },
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} name
     * @return {?}
     */
    processNameChange(name) {
        this.queryParam.filterArgs.name = new TextValue();
        this.queryParam.filterArgs.name.hasValue = true;
        this.queryParam.filterArgs.name.value = name;
        this.queryParam.filterArgsExt.name = name;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    processTypeChange({ selections }) {
        /** @type {?} */
        const item = selections[0];
        this.queryParam.filterArgs.billProcessType = new TextValue();
        if (item != null) {
            if (item.value != "") {
                this.queryParam.filterArgs.billProcessType.hasValue = true;
            }
            this.queryParam.filterArgs.billProcessType.value = item.value;
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    enabledStateChange({ selections }) {
        /** @type {?} */
        const item = selections[0];
        this.queryParam.filterArgs.isEnabled = new TextValue();
        if (item != null) {
            if (item.value != "") {
                this.queryParam.filterArgs.isEnabled.hasValue = true;
            }
            this.queryParam.filterArgs.isEnabled.value = String(item.value);
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    sysInitChange({ selections }) {
        /** @type {?} */
        const item = selections[0];
        this.queryParam.filterArgs.sysInit = new TextValue();
        if (item != null) {
            if (item.value != "") {
                this.queryParam.filterArgs.sysInit.hasValue = true;
            }
            this.queryParam.filterArgs.sysInit.value = String(item.value);
        }
    }
    /**
     * 打开上游单据VO选择器
     * @return {?}
     */
    selectUpBill() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = "GSPViewModel";
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        (metadata4RefDto) => {
            this.clearUpBill();
            /** @type {?} */
            let upVODto = metadata4RefDto.metadata;
            /** @type {?} */
            let upVO = JSON.parse(upVODto.content);
            switch (CommonModelTypeHelper.judgeVoTemplateType(upVO)) {
                //非代理VO
                case VOTemplateType.FromBE:
                    {
                        this.queryParam.filterArgs.upBillVoId = new TextValue();
                        this.queryParam.filterArgs.upBillVoId.hasValue = true;
                        this.queryParam.filterArgs.upBillVoId.value = upVO.ID;
                        this.queryParam.filterArgsExt.upBillVoName = upVO.MainObject.Name;
                    }
                    break;
                default:
                    this.notify.error(this.localePipe.transform("pleaseSelectNonVirtualVO"));
                    break;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            this.clearUpBill();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("billSelector"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * 打开下游单据VO选择器
     * @return {?}
     */
    selectDownBill() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = "GSPViewModel";
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        (metadata4RefDto) => {
            this.clearDownBill();
            /** @type {?} */
            let downVODto = metadata4RefDto.metadata;
            /** @type {?} */
            let downVO = JSON.parse(downVODto.content);
            switch (CommonModelTypeHelper.judgeVoTemplateType(downVO)) {
                //非代理VO
                case VOTemplateType.FromBE:
                    {
                        this.queryParam.filterArgs.downBillVoId = new TextValue();
                        this.queryParam.filterArgs.downBillVoId.hasValue = true;
                        this.queryParam.filterArgs.downBillVoId.value = downVO.ID;
                        this.queryParam.filterArgsExt.downBillVoName = downVO.MainObject.Name;
                    }
                    break;
                default:
                    this.notify.error(this.localePipe.transform("pleaseSelectNonVirtualVO"));
                    break;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            this.clearUpBill();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("billSelector"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * 清除流程名称
     * @return {?}
     */
    clearProcessName() {
        delete this.queryParam.filterArgs.name;
        this.queryParam.filterArgsExt.name = null;
    }
    /**
     * 清除选中的流程类型
     * @return {?}
     */
    clearProcessType() {
        delete this.queryParam.filterArgs.billProcessType;
    }
    /**
     * 清除选中的上游单据信息
     * @return {?}
     */
    clearUpBill() {
        delete this.queryParam.filterArgs.upBillVoId;
        this.queryParam.filterArgsExt.upBillVoName = null;
    }
    /**
     * 清除选中的下游单据信息
     * @return {?}
     */
    clearDownBill() {
        delete this.queryParam.filterArgs.downBillVoId;
        this.queryParam.filterArgsExt.downBillVoName = null;
    }
    /**
     * 清除选中的启用状态
     * @return {?}
     */
    clearIsEnabled() {
        delete this.queryParam.filterArgs.isEnabled;
    }
    /**
     * 清除选中的发布状态
     * @return {?}
     */
    clearIsPublished() {
        // delete this.queryParam.filterArgs.isPublished;
    }
    /**
     * 清除选中的发布状态
     * @return {?}
     */
    clearSysInit() {
        delete this.queryParam.filterArgs.sysInit;
    }
    /**
     * 点击筛选按钮
     * @return {?}
     */
    clickBtnFilter() {
        this.queryParam.filterArgs.pageIndex = 0;
        this.onSearchEmitter.emit(this.queryParam);
    }
    /**
     * 点击清空按钮
     * @return {?}
     */
    clickBtnClear() {
        //重置下拉框
        // this.comboProcessType.onClear();
        // this.comboProcessTypeData = this.comboProcessTypeData.map(item => ({ ...item }));
        //重置下拉框
        // this.comboProcessType.onClear();
        // this.comboProcessTypeData = this.comboProcessTypeData.map(item => ({ ...item }));
        // this.comboEnabledState.onClear();
        // this.comboEnabledStateData = this.comboEnabledStateData.map(item => ({ ...item }));
        // this.comboSysInit.onClear();
        // this.comboSysInitData = this.comboSysInitData.map(item => ({ ...item }));
        // this.comboPublishedState.onClear();
        // this.comboPublishedStateData = this.comboPublishedStateData.map(item => ({ ...item }));
        //重置查询参数
        // const queryParam = {
        //   filterArgs: new ProcessFilterConditionArgs(),
        //   filterArgsExt: {}
        // };
        // queryParam.filterArgs.LoadFromJsonObject(this.queryParam.filterArgs.ConvertToJsonObject());
        /** @type {?} */
        const queryParam = this.queryParam;
        queryParam.filterArgsExt = {};
        queryParam.filterArgs.upBillVoId = null;
        queryParam.filterArgs.downBillVoId = null;
        queryParam.filterArgs.sysInit = null;
        queryParam.filterArgs.name = null;
        // queryParam.filterArgs.pageSize = this.queryParam.filterArgs.pageSize;
        // queryParam.filterArgs.pageIndex = this.queryParam.filterArgs.pageIndex;
        // queryParam.filterArgs.orderByCode = this.queryParam.filterArgs.orderByCode;
        // queryParam.filterArgs.orderByName = this.queryParam.filterArgs.orderByName;
        // queryParam.filterArgs.OrderByLastModifiedTime = this.queryParam.filterArgs.OrderByLastModifiedTime;
        this.queryParam = queryParam;
    }
}
ProcHelpQuerySolutionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-proc-help-query-solution',
                template: "<farris-section #sectionQuerySolution class=\"f-section-scheme f-section-in-managelist\" [expandStatus]=\"true\"\r\n  [enableMaximize]=\"false\" [enableAccordion]=\"''\" mainTitle=\"{{ 'querySolution' | aifLocale }}\" [fill]=\"false\"\r\n  [showHeader]=\"true\">\r\n  <ng-template farrisSectionTitle>\r\n    <div\r\n      style=\"border-radius: 6px; padding: 5px 12px; background: linear-gradient(-51deg, rgb(42, 135, 255, 0.2) 0%, rgb(50, 139, 255, 0.2) 100%);\">\r\n      <span style=\"font-size: 13px;color: #2A87FF;line-height: 16px;\">{{ 'querySolution' | aifLocale }}</span>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template farrisSectionToolbar>\r\n    <div class=\"query-solution\">\r\n      <div class=\"solution-action\">\r\n        <ng-container *ngIf=\"sectionQuerySolution.expandStatus == true\">\r\n          <div class=\"btn-group\">\r\n            <button class=\"btn btn-primary\" (click)=\"clickBtnFilter()\">{{ 'filter' | aifLocale }}</button>\r\n          </div>\r\n          <div class=\"icon-group\">\r\n            <span class=\"icon-group-remove\" title=\"{{'clear' | aifLocale}}\" (click)=\"clickBtnClear()\">\r\n              <span class=\"f-icon f-icon-remove\"></span>\r\n            </span>\r\n            <span class=\"divide\"></span>\r\n            <span class=\"icon-group-setup\" *ngIf=\"false\">\r\n              <span class=\"f-icon f-icon-home-setup\"></span>\r\n            </span>\r\n            <span class=\"icon-group-packup\" title=\"{{ 'collapse' | aifLocale }}\"\r\n              (click)=\"sectionQuerySolution.expandStatus = false\">\r\n              <span class=\"f-icon f-icon-packup\"></span>\r\n            </span>\r\n          </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"sectionQuerySolution.expandStatus == false\">\r\n          <div class=\"icon-group\">\r\n            <span class=\"icon-group-packup\" title=\"{{ 'expand' | aifLocale }}\"\r\n              (click)=\"sectionQuerySolution.expandStatus = true\">\r\n              <span class=\"f-icon f-icon-packup\" style=\"transform: rotate(180deg);\"></span>\r\n            </span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <div class=\"form f-form-layout farris-form farris-form-controls-inline\"\r\n    *ngIf=\"sectionQuerySolution.expandStatus == true\">\r\n    <!-- \u6D41\u7A0B\u540D\u79F0 -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'processName' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"processName\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [ngModel]=\"queryParam.filterArgsExt.name\" (valueChange)=\"processNameChange($event)\"\r\n              (clear)=\"clearProcessName()\">\r\n            </input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u6D41\u7A0B\u7C7B\u578B -->\r\n    <!-- <div class=\"col-12 col-md-6 col-xl-3\" *ngIf=\"true\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'processType' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"processType\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-combo-list #comboProcessType [ngModel]=\"queryParam.filterArgs.billProcessType?.value\"\r\n              [idField]=\"comboProcessTypeIdField\" [valueField]=\"comboProcessTypeValueField\"\r\n              [textField]=\"comboProcessTypeTextField\" [data]=\"comboProcessTypeData\" (clear)=\"clearProcessType()\"\r\n              (valueChange)=\"processTypeChange($event)\" [editable]=\"false\"></farris-combo-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <!-- \u4E0A\u6E38\u5355\u636E -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'upBill' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"upBill\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [editable]=\"false\" [ngModel]=\"queryParam.filterArgsExt.upBillVoName\"\r\n              (clickHandle)=\"selectUpBill()\" [groupText]=\"groupIcon\" (clear)=\"clearUpBill()\"></input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u4E0B\u6E38\u5355\u636E -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'downBill' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"downBill\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [editable]=\"false\" [ngModel]=\"queryParam.filterArgsExt.downBillVoName\"\r\n              (clickHandle)=\"selectDownBill()\" [groupText]=\"groupIcon\" (clear)=\"clearDownBill()\">\r\n            </input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u542F\u7528\u72B6\u6001 -->\r\n    <!-- <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"enabledState\" class=\"col-form-label\" title=\"{{'enabledState' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"enabledState\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-combo-list #comboEnabledState [ngModel]=\"queryParam.filterArgs.isEnabled?.value\"\r\n              [idField]=\"comboEnabledStateIdField\" [valueField]=\"comboEnabledStateValueField\"\r\n              [textField]=\"comboEnabledStateTextField\" [data]=\"comboEnabledStateData\" (clear)=\"clearIsEnabled()\"\r\n              (valueChange)=\"enabledStateChange($event)\" [editable]=\"false\"></farris-combo-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <!-- \u7CFB\u7EDF\u9884\u7F6E -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\" *ngIf=\"true\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'sysInit' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"sysInit\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-combo-list #comboSysInit [ngModel]=\"queryParam.filterArgs.sysInit?.value\"\r\n              [idField]=\"comboSysInitIdField\" [valueField]=\"comboSysInitValueField\" [textField]=\"comboSysInitTextField\"\r\n              [data]=\"comboSysInitData\" (clear)=\"clearSysInit()\" (valueChange)=\"sysInitChange($event)\"\r\n              [editable]=\"false\">\r\n            </farris-combo-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-section>",
                styles: [".query-solution span{vertical-align:middle;margin:0 3px;cursor:pointer}"]
            }] }
];
/** @nocollapse */
ProcHelpQuerySolutionComponent.ctorParameters = () => [
    { type: ProcessListHelpService },
    { type: MessagerService },
    { type: NotifyService },
    { type: GSPMetadataRTService },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: AifLocalePipe }
];
ProcHelpQuerySolutionComponent.propDecorators = {
    queryParam: [{ type: Input, args: ["queryParam",] }],
    queryParamChange: [{ type: Output, args: ["queryParamChange",] }],
    onSearchEmitter: [{ type: Output, args: ["onSearch",] }],
    comboSysInit: [{ type: ViewChild, args: ["comboSysInit",] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifUiCommonModule {
    /**
     * @param {?=} resources
     * @return {?}
     */
    static forRoot(resources) {
        return {
            ngModule: AifUiCommonModule,
            providers: [
                { provide: BIF_LANG_RESOURCES, useValue: resources || {} },
            ],
        };
    }
}
AifUiCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AifLocalePipe
                ],
                exports: [
                    AifLocalePipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessListHelpModule {
}
ProcessListHelpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    MetadataRTSelectModule,
                    GSPMetadataRTServiceModule.forRoot(""),
                    FResponseToolbarModule,
                    ListFilterModule,
                    AngularDraggableModule,
                    FarrisCommonModule.forRoot(),
                    FarrisFormsModule,
                    FarrisSectionModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    ComboListModule,
                    InputGroupModule,
                    FarrisDialogModule,
                    SwitchModule,
                    FarrisTabsModule,
                    LookupModule,
                    LoadingModule.forRoot({
                        message: 'Loading...'
                    }),
                    NotifyModule.forRoot(),
                    MessagerModule.forRoot({
                        width: 550,
                        height: 450
                    }),
                    ModalModule.forRoot(),
                    AifUiCommonModule,
                ],
                providers: [
                    CacheService,
                    SessionService,
                    HttpService,
                    FrmEventBus,
                    FuncsService,
                    LoadingService,
                    AppService,
                    FrameworkService,
                    GSPMetadataRTService,
                    BusinessObjectRtService,
                    ProcessListHelpService,
                ],
                declarations: [
                    ProcessListHelpComponent,
                    ProcHelpQuerySolutionComponent,
                ],
                entryComponents: [
                    ProcessListHelpComponent,
                    ProcHelpQuerySolutionComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ActivityExecutorPipe {
    constructor() { }
    /**
     * @param {?} activityExecutors
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(activityExecutors, defaultVal = '') {
        /** @type {?} */
        let r = '';
        activityExecutors.forEach((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            r += u.activityDefName + '，';
        }));
        if (r) {
            r = r.substring(0, r.length - 1);
        }
        return r ? r : defaultVal;
    }
}
ActivityExecutorPipe.decorators = [
    { type: Pipe, args: [{ name: 'activityExecutor' },] }
];
/** @nocollapse */
ActivityExecutorPipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VariableNamePipe {
    constructor() { }
    /**
     * @param {?} users
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(users, defaultVal = '') {
        /** @type {?} */
        let r = '';
        users.forEach((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            r += u.name + '，';
        }));
        if (r) {
            r = r.substring(0, r.length - 1);
        }
        return r ? r : defaultVal;
    }
}
VariableNamePipe.decorators = [
    { type: Pipe, args: [{ name: 'variableName' },] }
];
/** @nocollapse */
VariableNamePipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$4 = localStorage.getItem('languageCode') || 'zh-CHS';
class BillTypeHelpModule {
}
BillTypeHelpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MetadataRTSelectModule,
                    GSPMetadataRTServiceModule.forRoot(""),
                    FResponseToolbarModule,
                    ListFilterModule,
                    AngularDraggableModule,
                    FarrisCommonModule.forRoot(),
                    FarrisFormsModule,
                    FarrisSectionModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    ComboListModule,
                    InputGroupModule,
                    FarrisDialogModule,
                    SwitchModule,
                    FarrisTabsModule,
                    LookupModule,
                    TreeTableModule,
                    LoadingModule.forRoot({
                        message: 'Loading...'
                    }),
                    NotifyModule.forRoot(),
                    MessagerModule.forRoot({
                        width: 550,
                        height: 450
                    }),
                    ModalModule.forRoot(),
                    PaginationModule,
                    SplitterModule,
                    LanguageTextboxModule,
                    AifUiCommonModule,
                ],
                providers: [
                    CacheService,
                    SessionService,
                    HttpService,
                    FrmEventBus,
                    FuncsService,
                    LoadingService$1,
                    AppService,
                    FrameworkService,
                    { provide: LOCALE_ID, useValue: ɵ0$4 },
                    GSPMetadataRTService,
                    BusinessObjectRtService,
                    BillTypeHelpService,
                ],
                declarations: [
                    BillTypeHelpComponent,
                ],
                entryComponents: [
                    BillTypeHelpComponent,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslateResolveService {
    /**
     * @param {?} translate
     * @param {?} curLanguage
     */
    constructor(translate, curLanguage) {
        this.translate = translate;
        this.curLanguage = curLanguage;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    resolve(route, state) {
        this.translate.defaultLang = this.curLanguage;
        return this.translate.getTranslation(this.curLanguage);
    }
}
TranslateResolveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TranslateResolveService.ctorParameters = () => [
    { type: TranslateService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const routes = [
    {
        path: 'WfProcessEditor', component: WfProcessEditorComponent,
        children: [],
        resolve: {
            'translate': TranslateResolveService
        }
    }
];
class WfProcessEditorRoutingModule {
}
WfProcessEditorRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RouterModule.forChild(routes)
                ],
                exports: [
                    RouterModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfLocaleModule {
    /**
     * @param {?=} resources
     * @return {?}
     */
    static forRoot(resources) {
        return {
            ngModule: WfLocaleModule,
            providers: [
                { provide: WF_LANG_RESOURCES, useValue: resources || {} },
            ],
        };
    }
}
WfLocaleModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    WfLocalePipe
                ],
                exports: [
                    WfLocalePipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 国际化相关
/**
 * @param {?} httpClient
 * @return {?}
 */
function HttpLoaderFactory(httpClient) {
    /** @type {?} */
    const languagePath = 'platform/runtime/common/web/@gsp-wf/wf-process-editor/i18n/';
    return new TranslateHttpLoader(httpClient, languagePath, '.json?v=' + new Date().getTime());
}
const ɵ0$5 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = WF_PROCESS_EDITOR_LANG_RESOURCES, ɵ2 = AIF_PROCESS_LIST_HELP_LANG_RESOURCES;
class WfProcessEditorModule {
}
WfProcessEditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    WfProcessEditorComponent,
                    EntryFormEditorComponent,
                    ExpressionEditorComponent,
                    AssignPerformerConfigComponent,
                    SignRuleComponent,
                    ApprovelItemsComponent,
                    ExecuteFormsComponent,
                    JumpScopeComponent,
                    BackwardRuleComponent,
                    JumpScopePipe,
                    ActivityComponentComponent,
                    PerformerComponent,
                    PerformerEditComponent,
                    UserPerformerComponent,
                    ComponentPerformerComponent,
                    PositionPerformerComponent,
                    PerformerOptionsComponent,
                    UsersNamePipe,
                    UsersIdPipe,
                    VariableNamePipe,
                    ActivityExecutorPipe,
                    ReportingLineComponent,
                    TitleExpressionComponent,
                    SaveAsEditComponent,
                    OrganizationPotentialOwnerComponent,
                    CustomizeActionComponent,
                    CustomizeActionListComponent,
                    CallActivitySubProcessComponent,
                    TimeLimitControlComponent,
                    SendMessageOperationComponent,
                    EventDefinitionComponent,
                    AnonymousSetComponent,
                    ProcessVariablesComponent,
                    VariableSettingComponent,
                    ConstantEditComponent,
                    ComponentEditComponent,
                    MessageNoticeComponent,
                    MessageNoticeEditComponent,
                    AddExecuteFormComponent,
                    FormFormatConfigComponent,
                    FormConfigContainerComponent,
                    ParameterSettingComponent,
                    FormOperationConfigComponent,
                    ApprovalPivotComponent,
                    WfReportDefHelpComponent,
                    UrgeHandleRuleComponent,
                    NoteComponent,
                    MatrixPerformerComponent,
                    EnumListComponent,
                    AutoHandleOperationComponent,
                    ExtendPropertyComponent,
                    CallActivitySubProcess2Component,
                    ActivityExecutorPerformerComponent,
                    ImageSetComponent,
                    MessageNoticeCopyComponent,
                    CheckConditionComponent,
                    AssignStrategyComponent,
                    ActivityListComponent,
                    EditComponentParameterComponent,
                    VariablePerformerComponent,
                    ReleaseComponent,
                    ParticipantComponent,
                    VariableGridComponent,
                    VoConfigComponent,
                    WfOptionsComponent,
                    AssignScopeComponent,
                    SmsMessageTemplateComponent,
                    StartConditionComponent,
                    PositionsNamePipe,
                    BatchSetPropertiesComponent,
                    MultiInstanceLoopCharacteristicsComponent,
                    AlternativeParticipantComponent
                ],
                imports: [
                    TranslateModule.forRoot({
                        loader: {
                            provide: TranslateLoader,
                            useFactory: HttpLoaderFactory,
                            deps: [HttpClient]
                        }
                    }),
                    CommonModule,
                    ReactiveFormsModule,
                    FormsModule,
                    HttpClientModule,
                    SysManagerUIModule,
                    RtfAppHelpModule,
                    CommonComponentUiModule,
                    GSPMetadataRTServiceModule.forRoot(''),
                    MetadataRTSelectModule,
                    TreeTableModule,
                    DataTableModule,
                    LayoutModule,
                    NotifyModule,
                    FarrisDialogModule,
                    SplitterModule,
                    InputGroupModule,
                    LookupModule,
                    FlexLayoutModule,
                    FarrisPanelModule,
                    FarrisResponsiveModule,
                    FResponseToolbarModule,
                    ExpressionModule,
                    PropertyPanelModule,
                    FarrisTabsModule,
                    LoadingModule.forRoot({
                        message: '加载中...'
                    }),
                    MessagerModule.forRoot({
                        width: 500
                    }),
                    ModalModule,
                    PopoverModule,
                    PaginationModule,
                    FarrisDropdownModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders,
                        PersonnelSelectorDataGridEditorProvider
                    ]),
                    ComboListModule,
                    WizardModule,
                    FarrisFormsModule,
                    SwitchModule,
                    WfBizprocessLookupModule,
                    NumberSpinnerModule,
                    PerfectScrollbarModule,
                    FarrisSectionModule,
                    FarrisButtonModule,
                    ProcessListHelpModule,
                    BillTypeHelpModule,
                    FarrisButtonModule,
                    ComboLookupModule,
                    SysmgrLookupModule,
                    FDropdownDirectiveTypeModule,
                    LanguageTextboxModule,
                    VerifyDetailModule,
                    FarrisHtmlEditorModule,
                    WfTaskHandlerModule,
                    DatagridFilterRowModule.forRoot(),
                    AifUiCommonModule,
                    DataEntityModule,
                    BizProcessApiModule,
                    PersonnelSelectorModule,
                    WfProcessEditorRoutingModule,
                    WfLocaleModule,
                ],
                providers: [
                    SessionService,
                    HttpService,
                    ExpressionService,
                    CommonComponentUiRTService,
                    PROCESS_DESIGNER_APP_PROVIDERS,
                    PROCESS_DESIGNER_DOMAIN_PROVIDERS,
                    PROCESS_DESIGNER_PART_PROVIDERS,
                    PerformerConfigService,
                    ProcessDeUtil,
                    WfReportDefHelpService,
                    EventBusService,
                    MatrixDefHelpService,
                    { provide: LOCALE_ID, useValue: ɵ0$5 },
                    { provide: WF_LANG_RESOURCES, useValue: ɵ1 },
                    WfLocalePipe,
                    TranslateResolveService,
                    PositionsNamePipe,
                    AifLocalePipe,
                    { provide: BIF_LANG_RESOURCES, useValue: ɵ2 },
                ],
                exports: [WfProcessEditorComponent, AlternativeParticipantComponent],
                entryComponents: [
                    EntryFormEditorComponent,
                    ExpressionEditorComponent,
                    AssignPerformerConfigComponent,
                    SignRuleComponent,
                    ApprovelItemsComponent,
                    ExecuteFormsComponent,
                    JumpScopeComponent,
                    BackwardRuleComponent,
                    ActivityComponentComponent,
                    SelectMetadataRTComponent,
                    PerformerComponent,
                    PerformerEditComponent,
                    UserPerformerComponent,
                    ComponentPerformerComponent,
                    PositionPerformerComponent,
                    PerformerOptionsComponent,
                    ReportingLineComponent,
                    TitleExpressionComponent,
                    SaveAsEditComponent,
                    OrganizationPotentialOwnerComponent,
                    CustomizeActionComponent,
                    CustomizeActionListComponent,
                    CallActivitySubProcessComponent,
                    TimeLimitControlComponent,
                    SendMessageOperationComponent,
                    EventDefinitionComponent,
                    AnonymousSetComponent,
                    ProcessVariablesComponent,
                    VariableSettingComponent,
                    ConstantEditComponent,
                    ComponentEditComponent,
                    MessageNoticeComponent,
                    MessageNoticeEditComponent,
                    MessageNoticeCopyComponent,
                    AddExecuteFormComponent,
                    FormFormatConfigComponent,
                    FormConfigContainerComponent,
                    ParameterSettingComponent,
                    FormOperationConfigComponent,
                    ApprovalPivotComponent,
                    UrgeHandleRuleComponent,
                    NoteComponent,
                    MatrixPerformerComponent,
                    EnumListComponent,
                    AutoHandleOperationComponent,
                    ProcessListHelpComponent,
                    ExtendPropertyComponent,
                    CallActivitySubProcess2Component,
                    ActivityExecutorPerformerComponent,
                    ImageSetComponent,
                    CheckConditionComponent,
                    AssignStrategyComponent,
                    ActivityListComponent,
                    EditComponentParameterComponent,
                    VariablePerformerComponent,
                    ReleaseComponent,
                    ParticipantComponent,
                    VariableGridComponent,
                    VoConfigComponent,
                    WfOptionsComponent,
                    AssignScopeComponent,
                    StartConditionComponent,
                    BatchSetPropertiesComponent,
                    MultiInstanceLoopCharacteristicsComponent,
                    AlternativeParticipantComponent
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 事件流连线，增加状态颜色信息
 */
class WfSequenceFlowEdge extends SequenceFlowEdge {
    constructor() {
        super(...arguments);
        this.localePipe = null;
        this.strokeColors = {
            [SequenceFlowState.Default]: "#6482b9",
        };
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        const sequenceFlow = this.flowElement;
        /** @type {?} */
        const sourceNode = sequenceFlow.Model.DefaultProcess.GetFlowElement(sequenceFlow.SourceRef);
        /** @type {?} */
        let conditionConfig = new ElementPropertyConfig();
        /** @type {?} */
        let basicConfig = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicConfig.categoryId = 'basic';
        basicConfig.categoryName = mxResources.get('basicInfo');
        basicConfig.tabId = 'basic';
        basicConfig.tabName = mxResources.get('basic');
        basicConfig.properties = [
            { propertyID: SequenceFlowPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: SequenceFlowPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: SequenceFlowPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        conditionConfig.categoryId = 'condition';
        conditionConfig.categoryName = mxResources.get('basicInfo');
        conditionConfig.tabId = 'basic';
        conditionConfig.tabName = mxResources.get('basic');
        conditionConfig.properties = [
            { propertyID: SequenceFlowPropertyKeys.ConditionExpression, propertyName: mxResources.get('ConditionExpression'), propertyType: 'modal' }
        ];
        // 源节点为排他网关和UserActivity时
        if (sourceNode.ClrTypeID === UserActivity.Clr_Type_ID || sourceNode.ClrTypeID === 'bpmn.ExclusiveGateway' || sourceNode.ClrTypeID === 'bpmn.InclusiveGateway') {
            conditionConfig.properties.push({ propertyID: SequenceFlowPropertyKeys.Default, propertyName: mxResources.get('default'), propertyType: 'select' });
        }
        this.setSequenceFlowValue(sequenceFlow, sourceNode, propertyData);
        return {
            propertyConfig: [basicConfig, conditionConfig],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const sequenceFlow = this.flowElement;
        /** @type {?} */
        let propertyId = obj.propertyID;
        switch (propertyId) {
            case SequenceFlowPropertyKeys.ConditionExpression: // 更新条件
                this.updateConditionExpr(sequenceFlow, obj.propertyValue);
                break;
            case SequenceFlowPropertyKeys.Default:
                this.modifyDefaultSequenceFlow(sequenceFlow, obj.propertyValue);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * 设置连接线属性值
     * @param {?} sequenceFlow
     * @param {?} sourceNode
     * @param {?} propertyData
     * @return {?}
     */
    setSequenceFlowValue(sequenceFlow, sourceNode, propertyData) {
        propertyData[SequenceFlowPropertyKeys.Id] = sequenceFlow.Id;
        propertyData[SequenceFlowPropertyKeys.ClrTypeID] = sequenceFlow.ClrTypeID;
        propertyData[SequenceFlowPropertyKeys.Name] = sequenceFlow.Name;
        propertyData[SequenceFlowPropertyKeys.NameLanguage] = sequenceFlow.NameLanguage || {
            "zh-CHS": sequenceFlow.Name,
        };
        if (!sequenceFlow.ConditionExpression || !sequenceFlow.ConditionExpression.MexExpression)
            propertyData[SequenceFlowPropertyKeys.ConditionExpression] = '';
        else
            propertyData[SequenceFlowPropertyKeys.ConditionExpression] =
                ((/** @type {?} */ (sequenceFlow.ConditionExpression.MexExpression))).Value;
        if (sourceNode.ClrTypeID === UserActivity.Clr_Type_ID) {
            /** @type {?} */
            const userActivity = (/** @type {?} */ (sourceNode));
            if (userActivity.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
        if (sourceNode.ClrTypeID === 'bpmn.ExclusiveGateway') {
            /** @type {?} */
            const gateway = (/** @type {?} */ (sourceNode));
            if (gateway.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
        if (sourceNode.ClrTypeID === 'bpmn.InclusiveGateway') {
            /** @type {?} */
            const gateway = (/** @type {?} */ (sourceNode));
            if (gateway.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
    }
    /**
     * 更新分支条件
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    updateConditionExpr(seqFlow, val) {
        seqFlow.ConditionExpression = null;
        if (val) {
            /** @type {?} */
            let expression = new Expression(seqFlow.Model);
            /** @type {?} */
            let condition = new Condition(seqFlow.Model);
            condition.Value = val;
            expression.MexExpression = condition;
            seqFlow.ConditionExpression = expression;
        }
    }
    /**
     * 更新默认分支(当前适用：排他网关+活动节点)
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    modifyDefaultSequenceFlow(seqFlow, val) {
        // 获取流转线源节点
        /** @type {?} */
        const node = (/** @type {?} */ (seqFlow.Model.DefaultProcess.GetFlowElement(seqFlow.SourceRef)));
        if (node.ClrTypeID === UserActivity.Clr_Type_ID) {
            // 节点为UserActivity类型
            /** @type {?} */
            const userActivity = (/** @type {?} */ (node));
            if (val === true) {
                userActivity.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (userActivity.Default === seqFlow.Id) {
                    userActivity.Default = null;
                }
            }
        }
        else if (node.ClrTypeID === 'bpmn.ExclusiveGateway') {
            // 排他网关
            /** @type {?} */
            const gateway = (/** @type {?} */ (node));
            if (val === true) {
                gateway.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (gateway.Default === seqFlow.Id) {
                    gateway.Default = null;
                }
            }
        }
        else if (node.ClrTypeID === 'bpmn.InclusiveGateway') {
            // 包容网关
            /** @type {?} */
            const gateway = (/** @type {?} */ (node));
            if (val === true) {
                gateway.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (gateway.Default === seqFlow.Id) {
                    gateway.Default = null;
                }
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
BpmnCellHelper.register(AifCreationBillActivityCell.CLR_TYPE_ID, AifCreationBillActivityCell);
BpmnCellHelper.register(AutoActivityCell.CLR_TYPE_ID, AutoActivityCell);
BpmnCellHelper.register(CallActivitySubProcessCell.CLR_TYPE_ID, CallActivitySubProcessCell);
BpmnCellHelper.register(IntermediateCatchEventImplCell.CLR_TYPE_ID, IntermediateCatchEventImplCell);
BpmnCellHelper.register(MessageActivityCell.CLR_TYPE_ID, MessageActivityCell);
BpmnCellHelper.register(NotifyActivityCell.CLR_TYPE_ID, NotifyActivityCell);
BpmnCellHelper.register(OperationActivityCell.CLR_TYPE_ID, OperationActivityCell);
BpmnCellHelper.register(StartActivityCell.CLR_TYPE_ID, StartActivityCell);
BpmnCellHelper.register(UserActivityCell.CLR_TYPE_ID, UserActivityCell);
BpmnCellHelper.register(WfEndEventCell.CLR_TYPE_ID, WfEndEventCell);
BpmnCellHelper.register(WfExclusiveGatewayCell.CLR_TYPE_ID, WfExclusiveGatewayCell);
// 暂时隐藏包容网关
BpmnCellHelper.register(WfInclusiveGatewayCell.CLR_TYPE_ID, WfInclusiveGatewayCell);
BpmnCellHelper.register(WfParallelGatewayCell.CLR_TYPE_ID, WfParallelGatewayCell);
BpmnCellHelper.register(WfSequenceFlowEdge.CLR_TYPE_ID, WfSequenceFlowEdge);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfProcessEditorService, WfProcessEditorComponent, HttpLoaderFactory, WfProcessEditorModule, ProcessTime, ProcessInfo, ProcessOrganization, RTProcessInfo, ActionScope$4 as ActionScope, ActivityExecutorParticipant$2 as ActivityExecutorParticipant, ActualParameter$5 as ActualParameter, AssignConfig$2 as AssignConfig, AssignStrategy$1 as AssignStrategy, BizComponent, BizParameter, ComponentParticipant$1 as ComponentParticipant, MatrixParticipant$1 as MatrixParticipant, MessageReceiver$1 as MessageReceiver, OrganizationLevel$4 as OrganizationLevel, OrganizationParticipant$1 as OrganizationParticipant, Participant$1 as Participant, ParticipantInfo$1 as ParticipantInfo, PositionParticipant$1 as PositionParticipant, ProcExtendProperty, ReportingLineParticipant$1 as ReportingLineParticipant, UserParticipant$1 as UserParticipant, VariablePerformer, AifCreationBillActivityCell, AutoActivityCell, CallActivitySubProcessCell, IntermediateCatchEventImplCell, MessageActivityCell, NotifyActivityCell, OperationActivityCell, PropertyHelper, StartActivityCell, UserActivityCell, WfEndEventCell, WfExclusiveGatewayCell, WfInclusiveGatewayCell, WfParallelGatewayCell, WfProcessCell, WfConstants, WfDesignerUtils, WfEditorUi, WfEvents, WfGraph, WfSidebar, WfValidatorAdapter, AifCreationBillActivityAdapter as ɵo, AutoActivityAdapter as ɵk, BillNodeActivityAdapter as ɵr, BpmnProcessViewModel as ɵh, CatchEventAdapter as ɵl, MessageActivityAdapter as ɵm, NotifyActivityAdapter as ɵn, ProcessDesignerUIState as ɵd, ProcessDesignerViewModel as ɵe, SequenceActivityAdapter as ɵs, SubProcessViewModel as ɵj, WFFlowElementsViewModel as ɵi, ProcessDeUtil as ɵg, ProcessDesignerDataService as ɵf, WF_PROCESS_EDITOR_LANG_RESOURCES as ɵc, WF_LANG_RESOURCES as ɵa, WfLocalePipe as ɵb, WfLocaleModule as ɵet, PROCESS_DESIGNER_APP_PROVIDERS as ɵeu, PROCESS_DESIGNER_DOMAIN_PROVIDERS as ɵev, PROCESS_DESIGNER_PART_PROVIDERS as ɵew, TranslateResolveService as ɵes, ActivityComponentComponent as ɵbg, ActivityComponentRepository as ɵbh, ActivityComponentUIState as ɵbi, ActivityComponentViewModel as ɵbj, ActivityListComponent as ɵdt, ProcHelpQuerySolutionComponent as ɵem, ProcessListHelpComponent as ɵek, AIF_PROCESS_LIST_HELP_LANG_RESOURCES as ɵel, ProcessListHelpModule as ɵeh, ProcessListHelpService as ɵej, AifUiCommonModule as ɵei, AifLocalePipe as ɵq, BIF_LANG_RESOURCES as ɵp, AnonymousSetComponent as ɵct, ApprovalPivotComponent as ɵdi, ApprovelItemsComponent as ɵy, AssignPerformerConfigComponent as ɵw, AssignScopeComponent as ɵea, AssignStrategyComponent as ɵds, BackwardRuleComponent as ɵbe, BatchSetPropertiesComponent as ɵef, BillTypeHelpModule as ɵen, BillTypeHelpService as ɵeo, BillTypeHelpComponent as ɵep, BILL_TYPE_HELP_LANG_RESOURCES as ɵeq, CallActivitySubProcessComponent as ɵco, CallActivitySubProcess2Component as ɵdo, CheckConditionComponent as ɵdr, CustomizeActionComponent as ɵcm, CustomizeActionListComponent as ɵcn, EditComponentParameterComponent as ɵdu, EntryFormEditorComponent as ɵu, EventDefinitionComponent as ɵcs, AddExecuteFormComponent as ɵdc, FormFormatService as ɵdd, ExecuteFormsComponent as ɵz, ExecuteFormsRepository as ɵbc, ExecuteFormsUIState as ɵba, ExecuteFormsViewModel as ɵbb, FormConfigContainerComponent as ɵdg, FormFormatConfigComponent as ɵde, FormOperationConfigComponent as ɵdf, ParameterSettingComponent as ɵdh, VariableGridComponent as ɵdx, ExpressionEditorComponent as ɵv, ExtendPropertyComponent as ɵdn, ImageSetComponent as ɵdp, JumpScopeComponent as ɵbd, JumpScopePipe as ɵbf, MessageNoticeCopyComponent as ɵdq, MessageNoticeEditComponent as ɵdb, MessageNoticeComponent as ɵda, MultiInstanceLoopCharacteristicsComponent as ɵeg, NoteComponent as ɵdk, OrganizationPotentialOwnerComponent as ɵcj, AlternativeParticipantComponent as ɵck, ParticipantComponent as ɵdw, ParticipantUIState as ɵcl, PerformerConfigService as ɵbr, PerformerComponent as ɵbk, PerformerRepository as ɵbm, PerformerUIState as ɵbn, PerformerViewModel as ɵbl, ActivityExecutorPerformerComponent as ɵcc, ActivityExecutorPipe as ɵcg, ComponentPerformerComponent as ɵbv, ComponentPerformerService as ɵbw, EnumListComponent as ɵdl, MatrixPerformerComponent as ɵca, MatrixDefHelpService as ɵcb, PerformerEditComponent as ɵbp, PerformerOptionsComponent as ɵbo, PositionPerformerComponent as ɵbt, PositionsNamePipe as ɵbu, ReportingLineComponent as ɵbx, WfReportDefHelpComponent as ɵby, WfReportDefHelpService as ɵbz, UserPerformerComponent as ɵbq, UsersIdPipe as ɵce, UsersNamePipe as ɵcd, VariableNamePipe as ɵcf, VariablePerformerComponent as ɵbs, ProcessVariablesComponent as ɵcu, ReleaseComponent as ɵdv, SaveAsEditComponent as ɵci, EventBusService as ɵt, SignRuleComponent as ɵx, SmsMessageTemplateComponent as ɵcr, AbstractDatagridComponent as ɵec, LANG_RESOURCES as ɵed, StartConditionComponent as ɵeb, StartConditionService as ɵee, AutoHandleOperationComponent as ɵdm, SendMessageOperationComponent as ɵcq, TimeLimitControlComponent as ɵcp, TitleExpressionComponent as ɵch, UrgeHandleRuleComponent as ɵdj, VariableSettingComponent as ɵcv, ComponentEditLookUpService as ɵcz, ComponentEditComponent as ɵcx, ComponentEditService as ɵcy, ConstantEditComponent as ɵcw, VoConfigComponent as ɵdy, WfOptionsComponent as ɵdz, WfProcessEditorRoutingModule as ɵer };

//# sourceMappingURL=gsp-wf-wf-process-editor.js.map