/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { of } from 'rxjs';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { SessionService } from '@ecp-caf/caf-common';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { BsModalService } from '@farris/ui-modal';
import { BizComponentEntity } from '../../domain/entities/biz-component.entity';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class EditComponentParameterComponent {
    /**
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} sessionSrc
     * @param {?} componentService
     * @param {?} modalService
     * @param {?} message
     * @param {?} cd
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerState, expr, resolver, injector, sessionSrc, componentService, modalService, message, cd, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.componentService = componentService;
        this.modalService = modalService;
        this.message = message;
        this.cd = cd;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.paramColumns = [];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.executionTimingList = new Array();
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    ;
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.paramColumns = [
            { field: 'code', width: 50, title: this.localePipe.transform('component.editComponentParameter.code') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.editComponentParameter.name') },
            {
                field: 'required', width: 50, title: this.localePipe.transform('component.editComponentParameter.required'), formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    if (v) {
                        return this.localePipe.transform('component.editComponentParameter.yes');
                    }
                    else {
                        return this.localePipe.transform('component.editComponentParameter.no');
                    }
                })
            },
            {
                field: 'value', width: 100, title: this.localePipe.transform('component.editComponentParameter.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        // setTimeout(() => {
        //   this.cd.detectChanges();
        // },0 )
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.location === 'activity') {
            for (const variable of this.designerState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    /** @type {?} */
                    const component = new BizComponentEntity(result.name, result.id, result.operations[0].code);
                    component.id = ProcessDeUtil.GenerateElementId();
                    component.actualParameters = this.bindParas(result);
                    if (component.metadataId === '7433df25-9260-4c24-86f0-9da3e89450fb' ||
                        component.metadataId === 'd0783800-ed60-488c-b053-8806a15947fe' ||
                        component.metadataId === 'b89e9b9a-2e2d-4bd0-b354-187219544d34' ||
                        component.metadataId === 'a8b8f7a4-49ae-4b7d-88d2-b3772b9d0ae5') {
                        component.scopeType = 'ExternalProcess';
                    }
                    else {
                        component.scopeType = 'DirectStart';
                    }
                    this.curComponent = component;
                    this.cd.detectChanges();
                }
            }));
        }));
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    bindParas(component) {
        /** @type {?} */
        let parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({ code: p.code, name: p.name, value: '', required: p.code.toLowerCase() === 'wfcontext' ? false : p.required })));
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    assignParameterValue(params) {
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('metadataId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}`, required: true };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('schemaId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}`, required: true };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"dataId\\")"}`, required: true };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"procInstId\\")"}`, required: true };
            }
            else {
                return { code: p.code, name: p.name, value: '', required: true };
            }
        }));
    }
    /**
     * @return {?}
     */
    componentSelect() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            try {
                /** @type {?} */
                const meta = $event.metadata;
                this.openComponentSelectorNew(meta.id, this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error(this.localePipe.transform('component.editComponentParameter.openComponentFail') + $event);
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.editComponentParameter.componentSelection'),
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @return {?}
     */
    endCellEdit() {
        this.paramlist.endCellEdit();
    }
    /**
     * @return {?}
     */
    editOK() {
        // 结束构件参数编辑状态
        this.endCellEdit();
        if (this.validator()) {
            this.submitEmitter.emit(this.curComponent);
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @return {?}
     */
    validator() {
        if (!this.curComponent || !this.curComponent.metadataId || !this.curComponent.methodCode) {
            this.message.info(this.localePipe.transform('component.editComponentParameter.curComponent'));
            return false;
        }
        else if (this.location !== 'autoActivity' && !this.curComponent.executionTime) {
            this.message.info(this.localePipe.transform('component.editComponentParameter.executionTime'));
            return false;
        }
        else {
            /** @type {?} */
            let codeList = '';
            for (const param of this.curComponent.actualParameters) {
                if (param.required && !param.value) {
                    codeList = codeList + `，${param.code}`;
                }
            }
            if (codeList.length > 0) {
                codeList = codeList.slice(1, codeList.length);
                this.message.info(this.localePipe.transform('component.editComponentParameter.para') + '【' + codeList + this.localePipe.transform('component.editComponentParameter.paraRequired'));
                return false;
            }
        }
        return true;
    }
}
EditComponentParameterComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-edit-component-parameter',
                template: "<div *ngIf=\"curComponent\" class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n    <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n      <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n        <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n          <div class=\"farris-group-wrap mx-3\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-info text-danger\">*</span>\r\n                <span class=\"farris-label-text\">{{'component.editComponentParameter.componentSelection' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap ml-2\">\r\n                <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" name=\"method\" [showButtonWhenDisabled]=\"false\"\r\n                [enableClear]=\"false\" [editable]=\"false\" (clickHandle)=\"componentSelect()\" [groupText]=\"groupIcon\" [(ngModel)]=\"curComponent.name\" [disabled]=\"editState==='edit'\"></input-group>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"location!=='autoActivity'\">\r\n          <div class=\"farris-form-controls-inline farris-form-auto\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.editComponentParameter.execuTime' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <farris-combo-list name=\"executionTime\" [idField]=\"'value'\" [(ngModel)]=\"curComponent.executionTime\"\r\n                    [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"executionTimingList\" [panelHeight]=\"'auto'\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </form>\r\n    <ng-container>\r\n      <farris-tabs class=\"f-utils-fill pr-2 pl-2\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n        <farris-tab title=\"{{'component.editComponentParameter.parameterList'|wfLocale}}\" [id]=\"'parameters'\">\r\n          <ng-template #content>\r\n            <div class=\"f-utils-fill-flex-column h-100\">\r\n              <farris-datagrid #paramlist [data]=\"curComponent.actualParameters\" [columns]=\"paramColumns\"\r\n                [idField]=\"'code'\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [afterEdit]=\"paramAfterEdit\"\r\n                [closeOtherGridEditor]=\"true\">\r\n              </farris-datagrid>\r\n            </div>\r\n          </ng-template>\r\n        </farris-tab>\r\n      </farris-tabs>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.editComponentParameter.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.editComponentParameter.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EditComponentParameterComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: SessionService },
    { type: CommonComponentUiRTService },
    { type: BsModalService },
    { type: MessagerService },
    { type: ChangeDetectorRef },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EditComponentParameterComponent.propDecorators = {
    editState: [{ type: Input }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    paramlist: [{ type: ViewChild, args: ['paramlist',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    curComponent: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.defaultProcessComponentIds;
    /** @type {?} */
    EditComponentParameterComponent.prototype.editState;
    /** @type {?} */
    EditComponentParameterComponent.prototype.closeEmitter;
    /** @type {?} */
    EditComponentParameterComponent.prototype.submitEmitter;
    /** @type {?} */
    EditComponentParameterComponent.prototype.paramlist;
    /** @type {?} */
    EditComponentParameterComponent.prototype.editFooter;
    /** @type {?} */
    EditComponentParameterComponent.prototype.paramColumns;
    /** @type {?} */
    EditComponentParameterComponent.prototype.location;
    /** @type {?} */
    EditComponentParameterComponent.prototype.groupIcon;
    /** @type {?} */
    EditComponentParameterComponent.prototype.executionTimingList;
    /** @type {?} */
    EditComponentParameterComponent.prototype.canEdit;
    /** @type {?} */
    EditComponentParameterComponent.prototype.curComponent;
    /** @type {?} */
    EditComponentParameterComponent.prototype.paramAfterEdit;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.sessionSrc;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.componentService;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.message;
    /** @type {?} */
    EditComponentParameterComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    EditComponentParameterComponent.prototype.localePipe;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,