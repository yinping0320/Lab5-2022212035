/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ViewChild, TemplateRef, Injector, LOCALE_ID, ChangeDetectorRef, Optional, Inject } from '@angular/core';
import { ExpressionService, ExpressioneditorComponent } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class TitleExpressionComponent {
    /**
     * @param {?} expr
     * @param {?} injector
     * @param {?} designerState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(expr, injector, designerState, cdr, localeId, resources, localePipe) {
        this.expr = expr;
        this.injector = injector;
        this.designerState = designerState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.textWithMultiLanguage = new Map();
        this.editorParams = {};
        this.language = 'zh-CHS';
        this.languageOptions = [
            { value: 'zh-CHS', text: this.localePipe.transform("component.titleExpression.zh-CHS") },
            { value: 'zh-CHT', text: this.localePipe.transform("component.titleExpression.zh-CHT") },
            { value: 'en', text: this.localePipe.transform("component.titleExpression.en") }
        ];
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: this.localePipe.transform("component.titleExpression.taskDescription"),
            width: 1140,
            height: 720,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
        this.language = this.injector.get(LOCALE_ID, null) || this.language;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 构造多语表达式编辑器的数据源，兼容历史
        if (this.value != null) {
            if (typeof (this.value) === 'string') {
                this.textWithMultiLanguage.set('zh-CHS', this.value);
            }
            else {
                this.textWithMultiLanguage = new Map(Object.entries(this.value));
            }
        }
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                this.contextEntities = this.contextEntities.concat([variable]);
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.value = this.editor.getExprWithMultiLanguage();
        /** @type {?} */
        const obj = [...this.value.entries()].reduce((/**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */
        (obj, [key, value]) => (obj[key] = value == null ? '' : value, obj)), {});
        /** @type {?} */
        const object = { value: obj, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    convertToValue(val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
}
TitleExpressionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-title-expression',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <div class=\"col-12 farris-group-auto pr-5\">\r\n          <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group\" style=\"display:flex\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.titleExpression.currentLanguage' | wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-combo-list [data]=\"languageOptions\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                  [idField]=\"'value'\" [(ngModel)]=\"language\" style=\"flex: 1;\" [enableClear]=\"false\">\r\n                </farris-combo-list>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <app-expressioneditor class=\"h-100\" [isPanel]=\"true\" [contextEntities]=\"contextEntities\" [text]=\"value\"\r\n        [customSchemaName]=\"'Schema'\" [customSchema]=\"schema\" [injectName]=\"injectName\" [injectSchemaName]=\"'Schema'\"\r\n        [injectNameInSchema]=\"injectName\" [language]=\"language\" [textWithMultiLanguage]=\"textWithMultiLanguage\">\r\n      </app-expressioneditor>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.titleExpression.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOK()\">{{'component.titleExpression.clickOK' | wfLocale}}</button>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
TitleExpressionComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: Injector },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
TitleExpressionComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editorParams: [{ type: Input }],
    editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }]
};
if (false) {
    /** @type {?} */
    TitleExpressionComponent.prototype.closeModal;
    /** @type {?} */
    TitleExpressionComponent.prototype.submitModal;
    /** @type {?} */
    TitleExpressionComponent.prototype.value;
    /** @type {?} */
    TitleExpressionComponent.prototype.textWithMultiLanguage;
    /** @type {?} */
    TitleExpressionComponent.prototype.modalFooter;
    /** @type {?} */
    TitleExpressionComponent.prototype.editorParams;
    /** @type {?} */
    TitleExpressionComponent.prototype.language;
    /** @type {?} */
    TitleExpressionComponent.prototype.editor;
    /** @type {?} */
    TitleExpressionComponent.prototype.languageOptions;
    /** @type {?} */
    TitleExpressionComponent.prototype.contextEntities;
    /** @type {?} */
    TitleExpressionComponent.prototype.schema;
    /** @type {?} */
    TitleExpressionComponent.prototype.injectName;
    /** @type {?} */
    TitleExpressionComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.injector;
    /** @type {?} */
    TitleExpressionComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.localePipe;
}
export class TitleExpressionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && typeof data === 'string') {
            return data;
        }
        else if (data && Object.keys(data).length > 0) {
            return this.areAllPropertiesEmpty(data)
                ? this.localePipe.transform("component.titleExpression.notSet")
                : this.localePipe.transform("component.titleExpression.set");
        }
        else {
            return this.localePipe.transform("component.titleExpression.notSet");
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    areAllPropertiesEmpty(obj) {
        for (let key in obj) {
            if (obj.hasOwnProperty(key) && obj[key] !== '') {
                return false;
            }
        }
        return true;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    TitleExpressionConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUtZXhwcmVzc2lvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3RpdGxlLWV4cHJlc3Npb24vdGl0bGUtZXhwcmVzc2lvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakssT0FBTyxFQUFFLGlCQUFpQixFQUFnQix5QkFBeUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQVdoRyxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7Ozs7O0lBOEJuQyxZQUNVLElBQXVCLEVBQ3ZCLFFBQWtCLEVBQ25CLGFBQXFDLEVBQ3hCLEdBQXNCLEVBQ2YsUUFBZ0IsRUFDUixTQUFjLEVBQzdCLFVBQXdCO1FBTnBDLFNBQUksR0FBSixJQUFJLENBQW1CO1FBQ3ZCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbkIsa0JBQWEsR0FBYixhQUFhLENBQXdCO1FBQ3hCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNSLGNBQVMsR0FBVCxTQUFTLENBQUs7UUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBYztRQW5DcEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDckMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBR2hELDBCQUFxQixHQUF3QixJQUFJLEdB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VixVQUFVLENBQWM7SUFDOUIsQ0FBQzs7Ozs7SUFFTCxTQUFTLENBQUMsSUFBUztRQUNqQixJQUFJLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDcEMsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQyxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQztnQkFDL0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDaEU7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUN0RTtJQUNILENBQUM7Ozs7O0lBRUQscUJBQXFCLENBQUMsR0FBRztRQUN2QixLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRTtZQUNuQixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDOUMsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBRUY7Ozs7OztJQXhCRyw4Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIElucHV0LCBWaWV3Q2hpbGQsIFRlbXBsYXRlUmVmLCBJbmplY3RvciwgTE9DQUxFX0lELCBDaGFuZ2VEZXRlY3RvclJlZiwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnQGZhcnJpcy9pZGUtcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uU2VydmljZSwgSW5qZWN0ZWRUeXBlLCBFeHByZXNzaW9uZWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnQGdzcC1zdmMvZXhwcmVzc2lvbic7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuLi8uLi9hcHAvcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgV0ZfTEFOR19SRVNPVVJDRVMsIFdmTG9jYWxlUGlwZSB9IGZyb20gJy4uLy4uL2kxOG4vcGlwZS93Zi1wcm9jZXNzLWVkaXRvci1sb2NhbGUucGlwZSc7XHJcbmltcG9ydCB7IFdGX1BST0NFU1NfRURJVE9SX0xBTkdfUkVTT1VSQ0VTIH0gZnJvbSAnLi4vLi4vaTE4bi9hc3NldHMvbGFuZy5yZXNvdXJjZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC10aXRsZS1leHByZXNzaW9uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdGl0bGUtZXhwcmVzc2lvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vdGl0bGUtZXhwcmVzc2lvbi5jb21wb25lbnQuc2NzcyddLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgIFdmTG9jYWxlUGlwZSxcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaXRsZUV4cHJlc3Npb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBAT3V0cHV0KCkgY2xvc2VNb2RhbCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBzdWJtaXRNb2RhbCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBASW5wdXQoKSB2YWx1ZTogYW55O1xyXG4gIHRleHRXaXRoTXVsdGlMYW5ndWFnZTogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2ljb25TZWxlY3RGb290ZXInKSBtb2RhbEZvb3RlcjogVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgQElucHV0KCkgZWRpdG9yUGFyYW1zOiBhbnkgPSB7fTtcclxuICBsYW5ndWFnZSA9ICd6aC1DSFMnO1xyXG4gIEBWaWV3Q2hpbGQoRXhwcmVzc2lvbmVkaXRvckNvbXBvbmVudCkgZWRpdG9yOiBFeHByZXNzaW9uZWRpdG9yQ29tcG9uZW50O1xyXG4gIGxhbmd1YWdlT3B0aW9ucyA9IFtcclxuICAgIHsgdmFsdWU6ICd6aC1DSFMnLCB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnRpdGxlRXhwcmVzc2lvbi56aC1DSFNcIikgfSxcclxuICAgIHsgdmFsdWU6ICd6aC1DSFQnLCB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnRpdGxlRXhwcmVzc2lvbi56aC1DSFRcIikgfSxcclxuICAgIHsgdmFsdWU6ICdlbicsIHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb21wb25lbnQudGl0bGVFeHByZXNzaW9uLmVuXCIpIH1cclxuICBdO1xyXG4gIGNvbnRleHRFbnRpdGllcyA9IFtdO1xyXG5cclxuICBzY2hlbWE6IGFueSA9IHt9O1xyXG4gIGluamVjdE5hbWUgPSAnJztcclxuXHJcbiAgbW9kYWxDb25maWcgPSB7XHJcbiAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImNvbXBvbmVudC50aXRsZUV4cHJlc3Npb24udGFza0Rlc2NyaXB0aW9uXCIpLFxyXG4gICAgd2lkdGg6IDExNDAsXHJcbiAgICBoZWlnaHQ6IDcyMCxcclxuICAgIHNob3dCdXR0b25zOiB0cnVlXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGV4cHI6IEV4cHJlc3Npb25TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwdWJsaWMgZGVzaWduZXJTdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZUlkOiBzdHJpbmcsXHJcbiAgICBASW5qZWN0KFdGX0xBTkdfUkVTT1VSQ0VTKSBwcml2YXRlIHJlc291cmNlczogYW55LFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsb2NhbGVQaXBlOiBXZkxvY2FsZVBpcGUsXHJcbiAgKSB7XHJcbiAgICB0aGlzLmxvY2FsZVBpcGUgPSB0aGlzLmxvY2FsZVBpcGUgfHwgbmV3IFdmTG9jYWxlUGlwZShsb2NhbGVJZCwgcmVzb3VyY2VzKTtcclxuICAgIGlmICh0aGlzLmRlc2lnbmVyU3RhdGUuc2NoZW1hc1swXSkge1xyXG4gICAgICB0aGlzLnNjaGVtYSA9IHRoaXMuZGVzaWduZXJTdGF0ZS5zY2hlbWFzWzBdO1xyXG4gICAgICBpZiAodGhpcy5kZXNpZ25lclN0YXRlLnNjaGVtYXNbMF0uZW50aXR5VHlwZXMgJiYgdGhpcy5kZXNpZ25lclN0YXRlLnNjaGVtYXNbMF0uZW50aXR5VHlwZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMuaW5qZWN0TmFtZSA9IHRoaXMuZGVzaWduZXJTdGF0ZS5zY2hlbWFzWzBdLmVudGl0eVR5cGVzWzBdLm5hbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMubGFuZ3VhZ2UgPSB0aGlzLmluamVjdG9yLmdldChMT0NBTEVfSUQsIG51bGwpIHx8IHRoaXMubGFuZ3VhZ2U7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIC8vIOaehOmAoOWkmuivreihqOi+vuW8j+e8lui+keWZqOeahOaVsOaNrua6kO+8jOWFvOWuueWOhuWPslxyXG4gICAgaWYgKHRoaXMudmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICBpZiAodHlwZW9mKHRoaXMudmFsdWUpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHRoaXMudGV4dFdpdGhNdWx0aUxhbmd1YWdlLnNldCgnemgtQ0hTJywgdGhpcy52YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy50ZXh0V2l0aE11bHRpTGFuZ3VhZ2UgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHRoaXMudmFsdWUpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5jb250ZXh0RW50aXRpZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgIGlmICh0aGlzLmRlc2lnbmVyU3RhdGUucHJvY0luc3RDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLmRlc2lnbmVyU3RhdGUucHJvY0luc3RDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0RW50aXRpZXMgPSB0aGlzLmNvbnRleHRFbnRpdGllcy5jb25jYXQoW3ZhcmlhYmxlXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLmRlc2lnbmVyU3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdmFyaWFibGUgb2YgdGhpcy5kZXNpZ25lclN0YXRlLmZvcm1hbFBhcmFtZXRlckNvbnRleHQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29udGV4dEVudGl0aWVzLnNvbWUoYyA9PiBjLmtleSA9PT0gdmFyaWFibGUua2V5KSkge1xyXG4gICAgICAgICAgdGhpcy5jb250ZXh0RW50aXRpZXMgPSB0aGlzLmNvbnRleHRFbnRpdGllcy5jb25jYXQoW3ZhcmlhYmxlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5kZXNpZ25lclN0YXRlLnN1YkFjdGl2aXR5Q29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdmFyaWFibGUgb2YgdGhpcy5kZXNpZ25lclN0YXRlLnN1YkFjdGl2aXR5Q29udGV4dCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0RW50aXRpZXMuc29tZShjID0+IGMua2V5ID09PSB2YXJpYWJsZS5rZXkpKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnRleHRFbnRpdGllcyA9IHRoaXMuY29udGV4dEVudGl0aWVzLmNvbmNhdChbdmFyaWFibGVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLmRlc2lnbmVyU3RhdGUucGFydGljaXBhbnRDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLmRlc2lnbmVyU3RhdGUucGFydGljaXBhbnRDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRleHRFbnRpdGllcy5zb21lKGMgPT4gYy5rZXkgPT09IHZhcmlhYmxlLmtleSkpIHtcclxuICAgICAgICAgIHRoaXMuY29udGV4dEVudGl0aWVzID0gdGhpcy5jb250ZXh0RW50aXRpZXMuY29uY2F0KFt2YXJpYWJsZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZGVzaWduZXJTdGF0ZS5wcm9jZXNzVmFyaWFibGVDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLmRlc2lnbmVyU3RhdGUucHJvY2Vzc1ZhcmlhYmxlQ29udGV4dCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0RW50aXRpZXMuc29tZShjID0+IGMua2V5ID09PSB2YXJpYWJsZS5rZXkpKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnRleHRFbnRpdGllcyA9IHRoaXMuY29udGV4dEVudGl0aWVzLmNvbmNhdChbdmFyaWFibGVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrT0soKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5lZGl0b3IuZ2V0RXhwcldpdGhNdWx0aUxhbmd1YWdlKCk7XHJcbiAgICBjb25zdCBvYmogPSBbLi4udGhpcy52YWx1ZS5lbnRyaWVzKCldLnJlZHVjZSgob2JqLCBba2V5LCB2YWx1ZV0pID0+IChvYmpba2V5XSA9IHZhbHVlPT1udWxsPycnOnZhbHVlLCBvYmopLCB7fSk7XHJcbiAgICBjb25zdCBvYmplY3QgPSB7IHZhbHVlOiBvYmosIHBhcmFtZXRlcnM6IG51bGwgfTtcclxuICAgIHRoaXMuc3VibWl0TW9kYWwuZW1pdChvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgY2xpY2tDYW5jZWwoKSB7XHJcbiAgICB0aGlzLmNsb3NlTW9kYWwuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb252ZXJ0VG9WYWx1ZSh2YWw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAodmFsKSB7XHJcbiAgICAgIGlmICh2YWwuc3Vic3RyaW5nKDksIHZhbC5sZW5ndGggLSAyKSkge1xyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5leHBvcnQgY2xhc3MgVGl0bGVFeHByZXNzaW9uQ29udmVydGVyIGltcGxlbWVudHMgVHlwZUNvbnZlcnRlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGxvY2FsZVBpcGU6IFdmTG9jYWxlUGlwZVxyXG4gICkgeyB9XHJcblxyXG4gIGNvbnZlcnRUbyhkYXRhOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSBlbHNlIGlmIChkYXRhICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXJlQWxsUHJvcGVydGllc0VtcHR5KGRhdGEpXHJcbiAgICAgICAgPyB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnRpdGxlRXhwcmVzc2lvbi5ub3RTZXRcIilcclxuICAgICAgICA6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb21wb25lbnQudGl0bGVFeHByZXNzaW9uLnNldFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnRpdGxlRXhwcmVzc2lvbi5ub3RTZXRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhcmVBbGxQcm9wZXJ0aWVzRW1wdHkob2JqKSB7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSAhPT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBcclxufVxyXG4iXX0=