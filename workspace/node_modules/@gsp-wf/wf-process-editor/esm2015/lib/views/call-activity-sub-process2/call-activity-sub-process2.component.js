/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { CallActivitySubProcess } from '../call-activity-sub-process/call-activity-sub-process.entity';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { FarrisRadioGroupComponent } from '@farris/ui-forms';
import { ProcessListHelpComponent } from '../../views/aif-process-list-help/components/process-list-help/process-list-help.component';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { SubProcessType } from '../call-activity-sub-process/SubProcessType';
import { BillSourceType } from '../call-activity-sub-process/BillSourceType';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class CallActivitySubProcess2Component {
    /**
     * @param {?} notify
     * @param {?} modalService
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     * @param {?} expr
     * @param {?} cfr
     * @param {?} inj
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(notify, modalService, message, util, http, designerState, expr, cfr, inj, cdr, localeId, resources, localePipe) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.subProcess.subProcessSet'),
            width: 600,
            height: 342,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.subProcessType = SubProcessType;
        this.billSourceType = BillSourceType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: this.localePipe.transform('component.subProcess.specified') },
            { value: "Dynamic", name: this.localePipe.transform('component.subProcess.dynamic') },
        ];
        this.radioGroupBillSourceData = [
            { value: BillSourceType.InheritParent, name: this.localePipe.transform('component.subProcess.inheritParent') },
            { value: BillSourceType.AutoCreation, name: this.localePipe.transform('component.subProcess.autoCreation') },
            { value: BillSourceType.VariablesExpression, name: this.localePipe.transform('component.subProcess.variablesExpression') },
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v) {
            this.callActivitySubProcess = v;
            // 为子流程类型赋值
            if (this.callActivitySubProcess.calledElement == null || this.callActivitySubProcess.calledElement == "") {
                if (this.callActivitySubProcess.calledBizDefKey == null || this.callActivitySubProcess.calledBizDefKey == "") {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                }
                else {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Dynamic;
                }
            }
            else {
                this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
            }
            // 为单据来源类型赋值
            if (this.callActivitySubProcess.inheritBizDataId === true) {
                this.callActivitySubProcess.billSourceType = BillSourceType.InheritParent;
            }
            else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === false) {
                this.callActivitySubProcess.billSourceType = BillSourceType.VariablesExpression;
            }
            else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === true) {
                this.callActivitySubProcess.billSourceType = BillSourceType.AutoCreation;
            }
            this.getProcessDefKey(this.callActivitySubProcess.calledElement);
            this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
            this.getAifProcessName(this.callActivitySubProcess.aifProcessCode);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    processConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.procDefKey;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    processTypeChange(val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.callActivitySubProcess.calledBizDefKey = null;
            this.callActivitySubProcess.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.callActivitySubProcess.calledElement = null;
            this.callActivitySubProcess.calledElementName = null;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    billSourceChange(val) {
        console.log(val);
        if (val == BillSourceType.InheritParent) {
            this.callActivitySubProcess.inheritBizDataId = true;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
        else if (val == BillSourceType.AutoCreation) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = true;
        }
        else if (val == BillSourceType.VariablesExpression) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
    }
    /**
     * @return {?}
     */
    selectProcess() {
        this.openProcHelp().subscribe((/**
         * @param {?} rte
         * @return {?}
         */
        (rte) => {
            if (rte == null) {
                this.notify.warning(this.localePipe.transform('component.subProcess.rteNull'));
                return;
            }
            this.callActivitySubProcess.aifProcessCode = rte.code;
            this.callActivitySubProcess.aifProcessName = rte.name;
        }));
    }
    /**
     * @return {?}
     */
    clearProcess() {
        this.callActivitySubProcess.aifProcessCode = null;
        this.callActivitySubProcess.aifProcessName = null;
    }
    /**
     * @return {?}
     */
    openProcHelp() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(ProcessListHelpComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.inj, []);
        cmpR.instance.editorParams = this.editorParams;
        /** @type {?} */
        const modalRef = this.modalService.show(cmpR, {
            title: this.localePipe.transform('component.subProcess.orderProcess'),
            width: 1250,
            height: 500,
            resizable: true,
            buttons: [
                {
                    text: this.localePipe.transform('component.subProcess.clickOk'),
                    cls: "btn btn-primary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    (evt) => {
                        cmpR.instance.clickOk(evt);
                        modalRef.close();
                    })
                },
                {
                    text: this.localePipe.transform('component.subProcess.clickCancel'),
                    cls: "btn btn-secondary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    (evt) => {
                        cmpR.instance.clickCancel(evt);
                        modalRef.close();
                    })
                }
            ],
            closed: (/**
             * @return {?}
             */
            () => {
                modalRef.dialog.destroy();
            })
        });
        cmpR.instance.modalRef = modalRef;
        return cmpR.instance.procEmitter.asObservable();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearProcessDef(args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    }
    /**
     * @param {?} args
     * @return {?}
     */
    flowFormConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearFlowForm(args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    }
    /**
     * @return {?}
     */
    setBizDataId() {
        this.showExprHelp();
    }
    /**
     * @private
     * @return {?}
     */
    showExprHelp() {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.callActivitySubProcess.bizDataId = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    valueChange(bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.useAutoCreationData && !this.callActivitySubProcess.bizDataId) {
            this.message.warning(this.localePipe.transform('component.subProcess.inheritBizDataId'));
            return false;
        }
        return true;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getProcessDefKey(key) {
        /** @type {?} */
        let url = this.util.getProcessDefinitionWebApi();
        if (key) {
            url += `/procDefKey/${key}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getFlowForm(id) {
        /** @type {?} */
        let url = this.util.getFlowFormWebApi();
        if (id) {
            url += `/${id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    }
    /**
     * @param {?} code
     * @return {?}
     */
    getAifProcessName(code) {
        if (code != null && code != "") {
            this.http.request("GET", `/api/runtime/aif/v1.0/rtbillcreationprocess/getname/${code}`, { responseType: 'text' }).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.callActivitySubProcess.aifProcessName = res;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                if (err.error && typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }), 300);
                throw err;
            }));
        }
    }
}
CallActivitySubProcess2Component.decorators = [
    { type: Component, args: [{
                selector: 'lib-call-activity-sub-process2',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section my-2 mx-3 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <section>\r\n      <div class=\"f-utils-fill-flex-column h-100\" style=\"margin-top: 15px;\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.radioGroupProcessType' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Dynamic\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.flowForm' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.flowForm' | wfLocale}}\" [sourceType]=\"'flowform'\"\r\n                    [displayTxt]=\"callActivitySubProcess.calledBizDefName\" (afterConfirm)=\"flowFormConfirm($event)\"\r\n                    (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Specified\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.processDef' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup title=\"{{'component.subProcess.processDef' | wfLocale}}\" [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section class=\"\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.radioGroupBillSource' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupBillSourceData\" (changeValue)=\"billSourceChange($event)\">\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.AutoCreation\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.autoCreationProcess' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess&&callActivitySubProcess.aifProcessName\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectProcess()\" [groupText]=\"groupIcon\" (clear)=\"clearProcess()\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.VariablesExpression\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.subProcess.bizDataId' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess.bizDataId\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\" [editable]=\"false\"\r\n                    (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.subProcess.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.subProcess.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ]
            }] }
];
/** @nocollapse */
CallActivitySubProcess2Component.ctorParameters = () => [
    { type: NotifyService },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CallActivitySubProcess2Component.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }],
    radioGroupBillSource: [{ type: ViewChild, args: ["radioGroupBillSource",] }]
};
if (false) {
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.cls;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.editorParams;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.closeModal;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.submitModal;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.modalFooter;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.modalConfig;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.callActivitySubProcess;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.groupIcon;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.subProcessType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.billSourceType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupProcessType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupProcessTypeData;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupBillSource;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupBillSourceData;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.message;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.util;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.inj;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.localePipe;
}
export class CallActivitySubProcess2Converter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return this.localePipe.transform("component.subProcess.set");
        }
        return this.localePipe.transform("component.subProcess.notSet");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Converter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,