/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Expression } from '@edp-pmf/bpmn-model';
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, Injector, ComponentFactoryResolver, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { DatagridComponent } from '@farris/ui-datagrid';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { MultiInstanceLoopCharacteristics } from './multi-instance-loop-characteristics.entity';
// import { ExtensionCompletionConditionRuler } from './extension-completion-condition-ruler/extension-completion-condition-ruler.entity';
import { SignRuleComponent } from '../sign-rule/sign-rule.component';
import { Condition, CounterSignRule } from '@gsp-wf/wf-process-model';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessTime } from '../../model/process-time';
export class MultiInstanceLoopCharacteristicsComponent {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} uistate
     * @param {?} expr
     * @param {?} modalService
     * @param {?} message
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(resolver, injector, uistate, expr, modalService, message, http, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.uistate = uistate;
        this.expr = expr;
        this.modalService = modalService;
        this.message = message;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.preEnable = false;
        this.preSequential = false;
        this.loopCharacteristics = new MultiInstanceLoopCharacteristics();
        this.loopCharacteristicsTemp = null;
        // peopleList: string;
        this.conditionRulesIsSet = this.localePipe.transform('multiInstanceLoopCharacteristics.conditionRulesSet');
        this.bpmnModel = this.uistate.bpmnModel;
        this.modalConfig = {
            title: this.localePipe.transform('multiInstanceLoopCharacteristics.loopCharacteristics'),
            width: 550,
            height: 450,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this.loopCharacteristics = new MultiInstanceLoopCharacteristics();
        if (v) {
            this.loopCharacteristics.enable = v.enable;
            this.loopCharacteristics.sequential = v.sequential;
            this.preEnable = v.enable;
            this.preSequential = v.sequential;
            if (v.loopCardinality && (v.loopCardinality instanceof Expression) && ((v.loopCardinality).MexExpression)) {
                this.loopCharacteristics.loopCardinality = ((/** @type {?} */ ((v.loopCardinality).MexExpression))).Value;
                // this.loopCharacteristics.loopCardinality = this.peopleList;
            }
            if (v.completionConditionRules && v.completionConditionRules.length > 0) {
                /** @type {?} */
                let signRuleEntityArray = new Array();
                for (let rule of v.completionConditionRules) {
                    /** @type {?} */
                    let signRule = new CounterSignRule(this.bpmnModel);
                    signRule.ConclusionValue = rule.ConclusionValue;
                    signRule.CalculateType = rule.CalculateType;
                    signRule.ConditionValue = rule.ConditionValue;
                    signRule.WaitAllVotes = rule.WaitAllVotes;
                    if (!signRule.CompletionCondition) {
                        signRule.CompletionCondition = new Condition(this.bpmnModel);
                    }
                    signRule.CompletionCondition.Value = rule.CompletionCondition ? rule.CompletionCondition.Value : null;
                    signRuleEntityArray.push(signRule);
                }
                this.loopCharacteristics.completionConditionRules = signRuleEntityArray;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.editorParams.location && this.editorParams.location == 'activity') {
            this.promptAct = true;
        }
        else {
            this.promptAct = false;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loopCardinalityExpr(data) {
        this.showloopCardinalityHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showloopCardinalityHelp(data) {
        this.showExpr();
        if (this.loopCharacteristics.loopCardinality) {
            this.expr.addExpressionText(this.loopCharacteristics.loopCardinality);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            // this.peopleList = expressionInfo;
            this.loopCharacteristics.loopCardinality = expressionInfo;
        }));
    }
    /**
     * @return {?}
     */
    showExpr() {
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    isEnable(data) {
        if (!data) {
            this.loopCharacteristicsTemp = new MultiInstanceLoopCharacteristics();
            this.loopCharacteristicsTemp.enable = true;
            this.loopCharacteristicsTemp.sequential = this.loopCharacteristics.sequential;
            this.loopCharacteristicsTemp.loopCardinality = this.loopCharacteristics.loopCardinality;
            this.loopCharacteristicsTemp.completionConditionRules = new Array();
            if (this.loopCharacteristics && this.loopCharacteristics.completionConditionRules) {
                this.loopCharacteristics.completionConditionRules.forEach((/**
                 * @param {?} com
                 * @return {?}
                 */
                com => this.loopCharacteristicsTemp.completionConditionRules.push((/** @type {?} */ (com.clone())))));
            }
            this.loopCharacteristics = new MultiInstanceLoopCharacteristics();
        }
        else {
            if (this.loopCharacteristicsTemp) {
                this.loopCharacteristics.enable = true;
                this.loopCharacteristics.sequential = this.loopCharacteristicsTemp.sequential;
                this.loopCharacteristics.loopCardinality = this.loopCharacteristicsTemp.loopCardinality;
                this.loopCharacteristics.completionConditionRules = new Array();
                if (this.loopCharacteristicsTemp.completionConditionRules) {
                    this.loopCharacteristicsTemp.completionConditionRules.forEach((/**
                     * @param {?} com
                     * @return {?}
                     */
                    com => this.loopCharacteristics.completionConditionRules.push((/** @type {?} */ (com.clone())))));
                }
                this.loopCharacteristicsTemp = null;
            }
        }
        this.validate(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    validate(data) {
        if (data == true) {
            if (!this.loopCharacteristics.completionConditionRules || this.loopCharacteristics.completionConditionRules.length < 1) {
                this.setCompletionConditionRules(this.loopCharacteristics.completionConditionRules);
            }
        }
    }
    /**
     * @param {?} completionConditionRules
     * @return {?}
     */
    setCompletionConditionRules(completionConditionRules) {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SignRuleComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value1 = completionConditionRules;
        // compRef.instance.data = this.loopCharacteristics.completionConditionRules;
        compRef.instance.submitModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.loopCharacteristics.completionConditionRules = re;
            dialog.close();
        }));
        compRef.instance.closeModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("multiInstanceLoopCharacteristics.completionConditionRules"),
            width: 800,
            height: 515,
            buttons: compRef.instance.modalFooter1,
            showButtons: true
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const object = { value: this.loopCharacteristics, parameters: null };
        if (this.preEnable != this.loopCharacteristics.enable || this.preSequential != this.loopCharacteristics.sequential) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=${this.uistate.procDefId}&activityDefinitionId=${this.uistate.propertyData.Id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (this.uistate.time === ProcessTime.rt && re && re.length > 0) {
                    this.message.info(this.localePipe.transform('multiInstanceLoopCharacteristics.checkPrompt'));
                }
                else {
                    this.submitModal.emit(object);
                }
            }));
        }
        else {
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
}
MultiInstanceLoopCharacteristicsComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-multi-instance-loop-characteristics',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.isEnable' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-5\">\r\n                  <farris-switch [(ngModel)]=\"loopCharacteristics.enable\" name=\"enable\" (valueChange)=\"isEnable($event)\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.isSequential' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-5\">\r\n                  <farris-switch [(ngModel)]=\"loopCharacteristics.sequential\" name=\"sequential\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.loopCardinality' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                    [(value)]=\"loopCharacteristics.loopCardinality\" (clickHandle)=\"loopCardinalityExpr($event)\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\"></span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"padding-right: 30px;border-radius:15px\">\r\n                  <div class=\"page-friendly-reminder\" style=\"background:#ECF4FF;padding: 0.5rem!important;border-radius:6px\">\r\n                    <div class=\"reminder-message\">\r\n                      <span class=\"reminder-title\">\r\n                        <span class=\"f-icon f-icon-info\">\r\n                        </span>\r\n                        <span class=\"reminder-name\" style=\"padding-left: 0.25rem\">\r\n                        </span>\r\n                      </span>\r\n                      <span class=\"message\" *ngIf=\"promptAct\"><br/>{{'multiInstanceLoopCharacteristics.promptAct1' | wfLocale}}<br/>\r\n                        {{'multiInstanceLoopCharacteristics.promptAct2' | wfLocale}}<br/>\r\n                      </span>\r\n                      <span class=\"message\" *ngIf=\"!promptAct\"><br/>{{'multiInstanceLoopCharacteristics.promptProc1' | wfLocale}}<br/>\r\n                        {{'multiInstanceLoopCharacteristics.promptProc2' | wfLocale}}<br/>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\" *ngIf=\"loopCharacteristics.enable\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'multiInstanceLoopCharacteristics.completionConditionRules' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" \r\n                    [(value)]=\"conditionRulesIsSet\" (clickHandle)=\"setCompletionConditionRules(loopCharacteristics.completionConditionRules)\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.timeLimitControl.clickCancel' | wfLocale }}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.timeLimitControl.clickOK' | wfLocale }}</button>\r\n</ng-template>",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
MultiInstanceLoopCharacteristicsComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: BsModalService },
    { type: MessagerService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
MultiInstanceLoopCharacteristicsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    cell: [{ type: ViewChild, args: ['cell',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.cls;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.groupIcon2;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.closeModal;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.submitModal;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.editorParams;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.modalFooter;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.cell;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.grid;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.preEnable;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.preSequential;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.loopCharacteristics;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.loopCharacteristicsTemp;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.conditionRulesIsSet;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.promptAct;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.bpmnModel;
    /** @type {?} */
    MultiInstanceLoopCharacteristicsComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsComponent.prototype.localePipe;
}
export class MultiInstanceLoopCharacteristicsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && ((/** @type {?} */ (data))).enable) {
            return this.localePipe.transform('multiInstanceLoopCharacteristics.set');
        }
        return this.localePipe.transform('multiInstanceLoopCharacteristics.notSet');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MultiInstanceLoopCharacteristicsConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,