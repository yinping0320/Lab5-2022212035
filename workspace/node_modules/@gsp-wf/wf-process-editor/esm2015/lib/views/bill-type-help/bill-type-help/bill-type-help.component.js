/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { BillTypeHelpService } from '../bill-type-help.service';
import { TreeTableComponent } from '@farris/ui-treetable';
import { AifLocalePipe, BIF_LANG_RESOURCES } from '../../aif-ui-common/pipe/aif-ui-common-locale.pipe';
import { BILL_TYPE_HELP_LANG_RESOURCES } from '../i18n/lang.resource';
const ɵ0 = BILL_TYPE_HELP_LANG_RESOURCES;
export class BillTypeHelpComponent {
    /**
     * @param {?} entityService
     * @param {?} messager
     * @param {?} notify
     * @param {?} modal
     * @param {?} loading
     * @param {?} localePipe
     * @param {?} router
     * @param {?} activatedRoute
     */
    constructor(entityService, messager, notify, modal, loading, localePipe, router, activatedRoute) {
        this.entityService = entityService;
        this.messager = messager;
        this.notify = notify;
        this.modal = modal;
        this.loading = loading;
        this.localePipe = localePipe;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.onselected = new EventEmitter();
        this.ttIdField = 'id';
        this.ttSearchFields = [];
        this.ttAllColumnsTitle = this.localePipe.instant("allColumns");
        this.docuTypeList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.configLookupColumns();
        this.loadItems();
    }
    /**
     * @return {?}
     */
    getSelectedDocuType() {
        return this.tt.selectedRow && this.tt.selectedRow.data;
    }
    /**
     * 左侧树表搜索事件
     * @param {?} obj
     * @return {?}
     */
    ttSearch(obj) {
        this.ttSearchObj = obj;
        this.ttSearchObj && this.tt.searchHandle.search(this.ttSearchObj.field, this.ttSearchObj.value);
    }
    /**
     * @return {?}
     */
    loadItems() {
        /** @type {?} */
        let entities$ = null;
        entities$ = this.entityService.findDocumentTypeEntites();
        /** @type {?} */
        const l = this.loading.show({ message: this.localePipe.instant("loading") });
        entities$.subscribe((/**
         * @param {?} entities
         * @return {?}
         */
        (entities) => {
            l.close();
            this.ttData = [...this.buildTreeData(entities)];
            this.docuTypeList = entities;
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.tt.expandAll();
                if (this.docuTypeId) {
                    this.tt.selectNode(this.docuTypeId);
                }
                else {
                    //默认选中第一条数据
                    this.docuTypeList && this.docuTypeList.length > 0 && this.tt.selectNode(this.docuTypeList[0].id);
                }
            }), 100);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            l.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * @param {?} nsp
     * @return {?}
     */
    ttNodeSelected(nsp) {
        /** @type {?} */
        let rows = [];
        if (Array.isArray(nsp.node)) {
            /** @type {?} */
            const arr = nsp.node;
            arr.forEach((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                rows.push(it);
            }));
        }
        else {
            rows.push(nsp.node);
        }
        if (rows.length == 0) {
            return;
        }
        /** @type {?} */
        let row = rows[0];
        this.docuTypeId = row.id;
    }
    /**
     * @param {?} entities
     * @return {?}
     */
    buildTreeData(entities) {
        /** @type {?} */
        const nodes = [];
        /** @type {?} */
        const map = {};
        entities && entities.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => {
            if (map[it.bizKindName] == null) {
                map[it.bizKindName] = [it];
            }
            else {
                map[it.bizKindName].push(it);
            }
        }));
        Object.keys(map).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const node = {
                id: key,
                data: {
                    id: key,
                    bizKindName: key,
                    treeInfo: {
                        layer: 1,
                    }
                },
                selectable: false,
                leaf: false,
            };
            /** @type {?} */
            const children = map[key].map((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                /** @type {?} */
                const node = {
                    id: it.id,
                    data: Object.assign({}, it, { treeInfo: {
                            layer: 2,
                            parentId: key,
                        } }),
                    selectable: true,
                    leaf: true
                };
                return node;
            }));
            node.children = children;
            nodes.push(node);
        }));
        return nodes;
    }
    /**
     * @private
     * @return {?}
     */
    configLookupColumns() {
        this.ttCols = [
            { field: "bizKindName", title: this.localePipe.instant("busineseCategory"), width: 100 },
            { field: "name", title: this.localePipe.instant("name"), width: 80 },
            { field: "code", title: this.localePipe.instant("code"), width: 80 },
            { field: "moduleName", title: this.localePipe.instant("module"), width: 100 },
            { field: "bizTypeName", title: this.localePipe.instant("busineseType"), width: 100 },
        ];
    }
}
BillTypeHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-bill-type-help',
                template: "<div class=\"g-main\" style=\"padding-left: 24px; padding-right: 24px;\">\r\n  <div class=\"h-100 d-flex flex-column\">\r\n    <farris-treetable #tt class=\"f-utils-fill-flex-column\" [data]=\"ttData\" [columns]=\"ttCols\" [idField]=\"ttIdField\"\r\n      [fit]=\"true\" [showFilterBar]=\"true\" [searchFields]=\"ttSearchFields\" [showIcon]=\"false\" [resizableColumns]=\"true\"\r\n      [showBorder]=\"true\" [striped]=\"true\" [allColumnsTitle]=\"ttAllColumnsTitle\" [expandLevel]=\"0\" [showHeader]=\"true\"\r\n      [fixedHeader]=\"true\" [singleSelect]=\"true\" [showCheckbox]=\"false\" [showCheckAll]=\"false\" [checkOnSelect]=\"true\"\r\n      [selectOnCheck]=\"true\" (search)=\"ttSearch($event)\" (nodeSelected)=\"ttNodeSelected($event)\">\r\n    </farris-treetable>\r\n  </div>\r\n</div>",
                providers: [
                    { provide: BIF_LANG_RESOURCES, useValue: ɵ0 },
                    AifLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
BillTypeHelpComponent.ctorParameters = () => [
    { type: BillTypeHelpService },
    { type: MessagerService },
    { type: NotifyService },
    { type: BsModalService },
    { type: LoadingService },
    { type: AifLocalePipe },
    { type: Router },
    { type: ActivatedRoute }
];
BillTypeHelpComponent.propDecorators = {
    onselected: [{ type: Output, args: ["onselected",] }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};
if (false) {
    /** @type {?} */
    BillTypeHelpComponent.prototype.onselected;
    /** @type {?} */
    BillTypeHelpComponent.prototype.tt;
    /** @type {?} */
    BillTypeHelpComponent.prototype.ttData;
    /** @type {?} */
    BillTypeHelpComponent.prototype.ttCols;
    /** @type {?} */
    BillTypeHelpComponent.prototype.ttIdField;
    /** @type {?} */
    BillTypeHelpComponent.prototype.ttSearchFields;
    /** @type {?} */
    BillTypeHelpComponent.prototype.ttSearchObj;
    /** @type {?} */
    BillTypeHelpComponent.prototype.ttAllColumnsTitle;
    /** @type {?} */
    BillTypeHelpComponent.prototype.docuTypeList;
    /** @type {?} */
    BillTypeHelpComponent.prototype.docuTypeId;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.entityService;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.modal;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.localePipe;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BillTypeHelpComponent.prototype.activatedRoute;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,