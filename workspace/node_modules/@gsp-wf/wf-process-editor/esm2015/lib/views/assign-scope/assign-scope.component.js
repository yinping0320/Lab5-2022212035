/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { DisplayInfor, OtherAssignActivityNodeInfo } from './other-assign-activity-node-info';
import { DialogComponent } from '@farris/ui-dialog';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
export class AssignScopeComponent {
    /**
     * @param {?} uistate
     * @param {?} message
     * @param {?} exprService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uistate, message, exprService, cdr, localeId, resources, localePipe) {
        this.uistate = uistate;
        this.message = message;
        this.exprService = exprService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.items = new Array();
        this.listItems = new Array();
        this.modalConfig = {
            title: this.localePipe.transform('component.assignScope.assignScopeList'),
            width: 600,
            height: 520,
            showButtons: true
        };
        this.cols = [
            { title: this.localePipe.transform('component.assignScope.name'), field: 'name', width: 80 },
            { title: 'ID', field: 'activityDefinitionId', width: 100 },
            { title: this.localePipe.transform('component.assignScope.required'), field: 'required', width: 50,
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.assignScope.yes'), falseText: this.localePipe.transform('component.assignScope.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            { title: this.localePipe.transform('component.assignScope.condition'), field: 'condition', width: 70,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.nodeCols = [
            { title: this.localePipe.transform('component.assignScope.name'), field: 'Name', width: 100, filter: true },
            { title: 'ID', field: 'Id', width: 100, filter: true },
        ];
        // otherAssignActivities = new Array();
        this.otherAssignActivityNodeInfos = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data && data.length > 0) {
            // this.otherAssignActivities = [...data];
            data.forEach((/**
             * @param {?} data1
             * @return {?}
             */
            data1 => {
                /** @type {?} */
                let otherAssignActivityNodeInfo = new OtherAssignActivityNodeInfo(data1.activityDefinitionId, data1.condition ? data1.condition.Value : data1.condition, data1.required);
                this.otherAssignActivityNodeInfos.push(otherAssignActivityNodeInfo);
            }));
            this.otherAssignActivityNodeInfos.forEach((/**
             * @param {?} other
             * @return {?}
             */
            other => {
                /** @type {?} */
                let displayInfo = new DisplayInfor(null, other.activityDefinitionId);
                displayInfo.required = other.required;
                if (other.condition) {
                    displayInfo.condition = other.condition.Value;
                }
                // displayInfo.name = this.items.find(item => item.Id === displayInfo.activityDefinitionId).Name;
                this.listItems.push(displayInfo);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.location) {
            this.location = this.editorParams.location;
        }
        /** @type {?} */
        let activities = new Array();
        if (this.location === 'startActivity') {
            activities = [...this.uistate.userActList.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id !== this.uistate.propertyData.Id
                    && a.AssignmentStrategy === 'ASSIGN'
                    && a.AssignPerformerConfig
                    && a.AssignPerformerConfig.Operator === 'procInstCreator'))];
        }
        else {
            activities = [...this.uistate.userActList.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id !== this.uistate.propertyData.Id && a.AssignmentStrategy === 'ASSIGN'))];
        }
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            for (const other of this.otherAssignActivityNodeInfos) {
                /** @type {?} */
                const activity = activities.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.Id === other.activityDefinitionId));
                if (activity) {
                    this.items = this.items.concat([activity]);
                }
            }
            for (const activity of activities) {
                if (this.items.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.Id === activity.Id)) === -1) {
                    this.items = this.items.concat([activity]);
                }
            }
        }
        else {
            this.items = activities;
        }
        this.listItems.forEach((/**
         * @param {?} listItem
         * @return {?}
         */
        listItem => {
            listItem.name = this.items.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.Id === listItem.activityDefinitionId)).Name;
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.otherAssignActivityNodeInfos && this.otherAssignActivityNodeInfos.length > 0) {
            for (const other of this.otherAssignActivityNodeInfos) {
                this.grid.checkRow(other.activityDefinitionId);
            }
        }
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            const i = this.listItems.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.activityDefinitionId === this.grid.selectedRow.data.activityDefinitionId));
            this.listItems.splice(i, 1);
            this.grid.loadData(this.listItems);
        }
        else {
            this.message.info(this.localePipe.transform('component.assignScope.deleteRow'));
        }
    }
    /**
     * @return {?}
     */
    moveUp() {
        if (!this.curActivity) {
            this.message.info(this.localePipe.transform('component.assignScope.curActivity'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.curActivity.activityDefinitionId;
        /** @type {?} */
        const i = this.listItems.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.activityDefinitionId === curCmpId));
        if (i === 0) {
            return;
        }
        this.swapArray(this.listItems, i, i - 1);
        this.grid.loadData(this.listItems);
        this.grid.selectRow(curCmpId, true);
        // const selectedRow = this.grid.selectedRow;
        // debugger;
        // if (!selectedRow) {
        //   this.message.info('尚未选中行');
        //   return;
        // }
        // if (selectedRow.index === 0) {
        //   return;
        // }
        // this.swapArray(this.items, selectedRow.index, selectedRow.index - 1);
        // this.grid.loadData(this.items);
        // this.grid.selectRow(selectedRow.id, true);
    }
    /**
     * @return {?}
     */
    moveDown() {
        if (!this.curActivity) {
            this.message.info(this.localePipe.transform('component.assignScope.curActivity'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.curActivity.activityDefinitionId;
        /** @type {?} */
        const i = this.listItems.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.activityDefinitionId === curCmpId));
        if (i === this.listItems.length - 1) {
            return;
        }
        this.swapArray(this.listItems, i, i + 1);
        this.grid.loadData(this.listItems);
        this.grid.selectRow(curCmpId, true);
        // const selectedRow = this.grid.selectedRow;
        // if (!selectedRow) {
        //   this.message.info('尚未选中行');
        //   return;
        // }
        // if (selectedRow.index === this.items.length - 1) {
        //   return;
        // }
        // this.swapArray(this.items, selectedRow.index, selectedRow.index + 1);
        // this.grid.loadData(this.items);
        // this.grid.selectRow(selectedRow.id, true);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectionChange(data) {
        this.curActivity = data.data;
    }
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.otherAssignActivityNodeInfos = new Array();
        for (const item of this.listItems) {
            this.otherAssignActivityNodeInfos.push(new OtherAssignActivityNodeInfo(item.activityDefinitionId, item.condition, item.required));
        }
        /** @type {?} */
        const object = { value: this.otherAssignActivityNodeInfos, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    actionsSelect() {
        /** @type {?} */
        const selections = this.actionsTable1.checkeds;
        if (selections && selections.length > 0) {
            selections.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                let item = new DisplayInfor(action.data.Name, action.data.Id);
                /** @type {?} */
                const index = this.listItems.findIndex((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.activityDefinitionId === action.data.Id));
                if (index > -1) {
                    this.listItems.splice(index, 1);
                }
                this.listItems.push(item);
            }));
            this.grid.loadData(this.listItems);
        }
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable1.clearCheckeds(true);
        this.actionsDialog1.close();
    }
    /**
     * @return {?}
     */
    SelectCancel() {
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable1.clearCheckeds(true);
        this.actionsDialog1.close();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                this.exprService.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.exprService.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.uistate.activityComponentContext.length > 0) {
            for (const variable of this.uistate.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.exprService.addContext(v);
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Conditional);
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.exprService.exprEntity.contextEntities = this.exprService.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
AssignScopeComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-assign-scope',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" mainTitle=\"{{'component.assignScope.set'|wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"actionsDialog1.show()\">{{'component.assignScope.add'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"delete()\">{{'component.assignScope.delete'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"moveUp()\">{{'component.assignScope.moveUp'|wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"moveDown()\">{{'component.assignScope.moveDown'|wfLocale}}</button>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"cols\" [data]=\"listItems\" #grid [idField]=\"'activityDefinitionId'\" [showLineNumber]=\"true\"\r\n          [striped]=\"true\" [multiSelect]=\"true\" [editMode]=\"'cell'\"\r\n          [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"  [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\"\r\n          (selectChanged)=\"selectionChange($event)\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.assignScope.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.assignScope.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"SelectCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"actionsSelect()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #actionsDialog1 [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title='\u8282\u70B9\u5217\u8868'>\r\n  <!-- 2023-6-1 \u89E3\u51B3\u5BA1\u6279\u52A8\u4F5C\u5F39\u7A97\u53CC\u6EDA\u52A8\u6761\u7684\u95EE\u9898 -->\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-hidden h-100\" style=\"margin-left: 8px;margin-right: 8px;\">\r\n    <farris-datagrid #actionsTable1 [columns]=\"nodeCols\" [data]=\"items\"\r\n      [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' \r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"true\" [striped]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AssignScopeComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AssignScopeComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    actionsTable1: [{ type: ViewChild, args: ['actionsTable1',] }],
    actionsDialog1: [{ type: ViewChild, args: ['actionsDialog1',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AssignScopeComponent.prototype.closeModal;
    /** @type {?} */
    AssignScopeComponent.prototype.submitModal;
    /** @type {?} */
    AssignScopeComponent.prototype.modalFooter;
    /** @type {?} */
    AssignScopeComponent.prototype.grid;
    /** @type {?} */
    AssignScopeComponent.prototype.actionsTable1;
    /** @type {?} */
    AssignScopeComponent.prototype.actionsDialog1;
    /** @type {?} */
    AssignScopeComponent.prototype.editorParams;
    /** @type {?} */
    AssignScopeComponent.prototype.location;
    /** @type {?} */
    AssignScopeComponent.prototype.items;
    /** @type {?} */
    AssignScopeComponent.prototype.listItems;
    /** @type {?} */
    AssignScopeComponent.prototype.modalConfig;
    /** @type {?} */
    AssignScopeComponent.prototype.cols;
    /** @type {?} */
    AssignScopeComponent.prototype.nodeCols;
    /** @type {?} */
    AssignScopeComponent.prototype.otherAssignActivityNodeInfos;
    /** @type {?} */
    AssignScopeComponent.prototype.curActivity;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.exprService;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    AssignScopeComponent.prototype.localePipe;
}
export class AssignScopeConverter {
    /**
     * @param {?} uistate
     * @param {?} localePipe
     */
    constructor(uistate, localePipe) {
        this.uistate = uistate;
        this.localePipe = localePipe;
        this.actList = new Array();
        this.actList = [...this.uistate.userActList.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.AssignmentStrategy === 'ASSIGN'))];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.assignScope.set");
        }
        else {
            return this.localePipe.transform("component.assignScope.notSet");
        }
    }
}
if (false) {
    /** @type {?} */
    AssignScopeConverter.prototype.actList;
    /**
     * @type {?}
     * @private
     */
    AssignScopeConverter.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    AssignScopeConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,