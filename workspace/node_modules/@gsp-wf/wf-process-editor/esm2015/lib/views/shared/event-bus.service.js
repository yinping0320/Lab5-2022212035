/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { map, filter } from 'rxjs/operators';
/**
 * @record
 */
export function EventBusMessage() { }
if (false) {
    /** @type {?} */
    EventBusMessage.prototype.channel;
    /** @type {?} */
    EventBusMessage.prototype.payload;
}
export class EventBusService1 {
    constructor() {
        this.listen = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            this.next = (/**
             * @param {?} payload
             * @return {?}
             */
            (payload) => observer.next(payload));
            return (/**
             * @param {?} _
             * @return {?}
             */
            _ => _ /* nothing to clean */);
        }));
        this.channelEmmiter = this.channelEmmiter.bind(this);
        this.emit = this.emit.bind(this);
    }
    /**
     * @return {?}
     */
    allChannels() {
        return this.listen;
    }
    /**
     * @param {?} channelName
     * @return {?}
     */
    channel(channelName) {
        return this.listen
            .pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        e => e.channel === channelName)), map((/**
         * @param {?} e
         * @return {?}
         */
        e => e.payload)));
    }
    /**
     * @param {?} channelName
     * @return {?}
     */
    channelEmmiter(channelName) {
        console.log('made listener for', channelName);
        return (/**
         * @param {?} payload
         * @return {?}
         */
        (payload) => {
            this.emit({ channel: channelName, payload });
        });
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    emit({ channel, payload }) {
        console.log('emit', channel);
        this.next({ channel, payload });
    }
}
EventBusService1.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventBusService1.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    EventBusService1.prototype.listen;
    /**
     * @type {?}
     * @private
     */
    EventBusService1.prototype.next;
}
/**
 * Global EventEmitter
 * @template Events
 */
export class EventBusService {
    constructor() {
        /**
         * Map event name to Subject
         */
        this._subjects = new Map();
    }
    /**
     *
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    on(eventName, handler) {
        if (!this._subjects.has(eventName)) {
            this._subjects.set(eventName, new Subject());
        }
        /** @type {?} */
        const _subject = this._subjects.get(eventName);
        /** @type {?} */
        const subscription = _subject.subscribe(handler);
        return {
            unsubscribe: (/**
             * @return {?}
             */
            () => {
                subscription.unsubscribe();
                if (_subject.observers.length > 0) {
                    this._subjects.delete(eventName);
                }
            })
        };
    }
    /**
     *
     * @param {?} eventName
     * @param {?} data
     * @return {?}
     */
    emit(eventName, data) {
        if (this._subjects.has(eventName)) {
            this._subjects.get(eventName).next(data);
        }
    }
    /**
     * Destory all subscription and clear the map
     * @return {?}
     */
    destroy() {
        this._subjects.forEach((/**
         * @param {?} subject
         * @param {?} _
         * @return {?}
         */
        (subject, _) => {
            subject.unsubscribe();
        }));
        this._subjects.clear();
    }
}
EventBusService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * Map event name to Subject
     * @type {?}
     * @private
     */
    EventBusService.prototype._subjects;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtYnVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3NoYXJlZC9ldmVudC1idXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRzdDLHFDQUdDOzs7SUFGRyxrQ0FBZ0I7O0lBQ2hCLGtDQUFpQjs7QUFJckIsTUFBTSxPQUFPLGdCQUFnQjtJQUl6QjtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxVQUFVOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUk7Ozs7WUFBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQztZQUN6RDs7OztZQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixFQUFDO1FBQ3pDLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLFdBQW1CO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU07YUFDYixJQUFJLENBQUMsTUFBTTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUMsRUFDeEMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCxjQUFjLENBQUMsV0FBVztRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlDOzs7O1FBQU8sQ0FBQyxPQUFnQixFQUFRLEVBQUU7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUM7SUFDTixDQUFDOzs7OztJQUVELElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQW1CO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7WUFsQ0osVUFBVTs7Ozs7O0lBRVAsa0NBQW1DOzs7OztJQUVuQyxnQ0FBYTs7Ozs7O0FBcUNqQixNQUFNLE9BQU8sZUFBZTtJQUQ1Qjs7OztRQUdZLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztJQTRDeEQsQ0FBQzs7Ozs7OztJQXBDRyxFQUFFLENBQUMsU0FBaUIsRUFBRSxPQUEyQjtRQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNoRDs7Y0FDSyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDOztjQUN4QyxZQUFZLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDaEQsT0FBTztZQUNILFdBQVc7OztZQUFFLEdBQUcsRUFBRTtnQkFDZCxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQzNCLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDcEM7WUFDTCxDQUFDLENBQUE7U0FDSixDQUFDO0lBQ04sQ0FBQzs7Ozs7OztJQU9ELElBQUksQ0FBQyxTQUFpQixFQUFFLElBQUk7UUFDeEIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUM7SUFDTCxDQUFDOzs7OztJQUtELE9BQU87UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7WUE5Q0osVUFBVTs7Ozs7Ozs7SUFHUCxvQ0FBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcclxuaW1wb3J0IHsgbWFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5leHBvcnQgdHlwZSBQYXlsb2FkID0gYW55O1xyXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50QnVzTWVzc2FnZSB7XHJcbiAgICBjaGFubmVsOiBzdHJpbmc7XHJcbiAgICBwYXlsb2FkOiBQYXlsb2FkO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFdmVudEJ1c1NlcnZpY2UxIHtcclxuICAgIHB1YmxpYyBsaXN0ZW46IE9ic2VydmFibGU8UGF5bG9hZD47XHJcblxyXG4gICAgcHJpdmF0ZSBuZXh0O1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW4gPSBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IChwYXlsb2FkOiBQYXlsb2FkKSA9PiBvYnNlcnZlci5uZXh0KHBheWxvYWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gXyA9PiBfIC8qIG5vdGhpbmcgdG8gY2xlYW4gKi87XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsRW1taXRlciA9IHRoaXMuY2hhbm5lbEVtbWl0ZXIuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmVtaXQgPSB0aGlzLmVtaXQuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBhbGxDaGFubmVscygpOiBPYnNlcnZhYmxlPEV2ZW50QnVzTWVzc2FnZT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbjtcclxuICAgIH1cclxuXHJcbiAgICBjaGFubmVsKGNoYW5uZWxOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBheWxvYWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5cclxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKGUgPT4gZS5jaGFubmVsID09PSBjaGFubmVsTmFtZSksXHJcbiAgICAgICAgICAgICAgICBtYXAoZSA9PiBlLnBheWxvYWQpKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFubmVsRW1taXRlcihjaGFubmVsTmFtZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtYWRlIGxpc3RlbmVyIGZvcicsIGNoYW5uZWxOYW1lKTtcclxuICAgICAgICByZXR1cm4gKHBheWxvYWQ6IFBheWxvYWQpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KHsgY2hhbm5lbDogY2hhbm5lbE5hbWUsIHBheWxvYWQgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBlbWl0KHsgY2hhbm5lbCwgcGF5bG9hZCB9OiBFdmVudEJ1c01lc3NhZ2UpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZW1pdCcsIGNoYW5uZWwpO1xyXG4gICAgICAgIHRoaXMubmV4dCh7IGNoYW5uZWwsIHBheWxvYWQgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHbG9iYWwgRXZlbnRFbWl0dGVyXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFdmVudEJ1c1NlcnZpY2U8RXZlbnRzID0gYW55PiB7XHJcbiAgICAvKiogTWFwIGV2ZW50IG5hbWUgdG8gU3ViamVjdCAgKi9cclxuICAgIHByaXZhdGUgX3N1YmplY3RzID0gbmV3IE1hcDxFdmVudHMsIFN1YmplY3Q8YW55Pj4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXHJcbiAgICAgKiBAcGFyYW0gaGFuZGxlclxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgb24oZXZlbnROYW1lOiBFdmVudHMsIGhhbmRsZXI6IChkYXRhOiBhbnkpID0+IGFueSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fc3ViamVjdHMuaGFzKGV2ZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3ViamVjdHMuc2V0KGV2ZW50TmFtZSwgbmV3IFN1YmplY3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IF9zdWJqZWN0ID0gdGhpcy5fc3ViamVjdHMuZ2V0KGV2ZW50TmFtZSk7XHJcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gX3N1YmplY3Quc3Vic2NyaWJlKGhhbmRsZXIpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChfc3ViamVjdC5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1YmplY3RzLmRlbGV0ZShldmVudE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXHJcbiAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICovXHJcbiAgICBlbWl0KGV2ZW50TmFtZTogRXZlbnRzLCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N1YmplY3RzLmhhcyhldmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1YmplY3RzLmdldChldmVudE5hbWUpLm5leHQoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdG9yeSBhbGwgc3Vic2NyaXB0aW9uIGFuZCBjbGVhciB0aGUgbWFwXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fc3ViamVjdHMuZm9yRWFjaCgoc3ViamVjdCwgXykgPT4ge1xyXG4gICAgICAgICAgICBzdWJqZWN0LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fc3ViamVjdHMuY2xlYXIoKTtcclxuICAgIH1cclxufVxyXG5cclxuIl19