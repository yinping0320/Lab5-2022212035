/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ProcessDeUtil } from '../../domain/process-de-util';
export class TimeLimitInfo {
    constructor() {
        this.tag = 'constant';
        this.enable = false;
        this.timeUnit = 'day';
        this.expireOperations = new Array();
    }
}
if (false) {
    /** @type {?} */
    TimeLimitInfo.prototype.tag;
    /**
     * 是否启用
     * @type {?}
     */
    TimeLimitInfo.prototype.enable;
    /**
     * 限定时长
     * @type {?}
     */
    TimeLimitInfo.prototype.dueTime;
    /**
     * 时间单位
     * @type {?}
     */
    TimeLimitInfo.prototype.timeUnit;
    /** @type {?} */
    TimeLimitInfo.prototype.expireOperations;
}
export class ExpireOperation {
    constructor() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.durationType = 'BeforeDuration';
        this.timeDuration = 0;
        this.timeUnit = 'day';
        // 默认操作类型是发送预警消息
        this.operationTypeName = 'SendMessageExpireOperation';
    }
}
if (false) {
    /** @type {?} */
    ExpireOperation.prototype.id;
    /**
     * 期限控制类型
     * @type {?}
     */
    ExpireOperation.prototype.durationType;
    /**
     * 任务期限
     * @type {?}
     */
    ExpireOperation.prototype.timeDuration;
    /**
     * 时间单位
     * @type {?}
     */
    ExpireOperation.prototype.timeUnit;
    /**
     * 操作类型名称
     * @type {?}
     */
    ExpireOperation.prototype.operationTypeName;
}
/**
 * 发送预警信息方式
 */
export class SendMessage extends ExpireOperation {
    /**
     * @param {?} location
     * @param {?} localePipe
     */
    constructor(location, localePipe) {
        super();
        this.localePipe = localePipe;
        this.cycleEnable = false;
        this.cycleTimeUnit = 'day';
        this.receiver = location === 'activity' ? 'workItemParticipant' : 'procInstCreator';
        this.receiverText = location === 'activity' ? this.localePipe.transform('component.timeLimitControl.workItemParticipant') : this.localePipe.transform('component.timeLimitControl.procInstCreator');
        this.subject = `{"expr":"\'` + this.localePipe.transform('component.timeLimitControl.SendMessageExpireOperation') + `\'","sexpr":""}`;
        this.message = `{"expr":"\'` + (location === 'activity' ? this.localePipe.transform('component.timeLimitControl.to-doMessageTimeOut') : this.localePipe.transform('component.timeLimitControl.messageTimeOut')) + `\'","sexpr":""}`;
    }
}
if (false) {
    /**
     * 预警信息内容
     * @type {?}
     */
    SendMessage.prototype.message;
    /**
     * 发送预警信息类型
     * @type {?}
     */
    SendMessage.prototype.sendType;
    /**
     * 预警信息主题
     * @type {?}
     */
    SendMessage.prototype.subject;
    /**
     * 消息接收人
     * 用户IDs
     * @type {?}
     */
    SendMessage.prototype.receiver;
    /**
     * 消息接收人显示
     * @type {?}
     */
    SendMessage.prototype.receiverText;
    /**
     * 启用循环预警
     * @type {?}
     */
    SendMessage.prototype.cycleEnable;
    /**
     * 循环预警时间间隔
     * @type {?}
     */
    SendMessage.prototype.cycleTime;
    /**
     * 循环预警时间间隔单位
     * @type {?}
     */
    SendMessage.prototype.cycleTimeUnit;
    /**
     * 短信模板
     * @type {?}
     */
    SendMessage.prototype.smsMessageTemplate;
    /**
     * @type {?}
     * @private
     */
    SendMessage.prototype.localePipe;
}
export class AutoHandle extends ExpireOperation {
    /**
     * @param {?} type
     * @param {?} localePipe
     */
    constructor(type, localePipe) {
        super();
        this.localePipe = localePipe;
        this.autoHandleType = type;
        this.message = this.localePipe.transform('component.timeLimitControl.agree');
    }
}
if (false) {
    /**
     * 办理类型，通过驳回否决等等
     * @type {?}
     */
    AutoHandle.prototype.autoHandleType;
    /**
     * 办理意见
     * @type {?}
     */
    AutoHandle.prototype.message;
    /**
     * @type {?}
     * @private
     */
    AutoHandle.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1saW1pdC1jb250cm9sLmVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvdGltZS1saW1pdC1jb250cm9sL3RpbWUtbGltaXQtY29udHJvbC5lbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUk3RCxNQUFNLE9BQU8sYUFBYTtJQW9CdEI7UUFDSSxJQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0NBQ0o7OztJQXpCRyw0QkFBWTs7Ozs7SUFLWiwrQkFBZ0I7Ozs7O0lBS2hCLGdDQUFnQjs7Ozs7SUFLaEIsaUNBQWlCOztJQUVqQix5Q0FBeUM7O0FBVTdDLE1BQU0sT0FBTyxlQUFlO0lBc0J4QjtRQUNJLElBQUksQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixnQkFBZ0I7UUFDaEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLDRCQUE0QixDQUFDO0lBQzFELENBQUM7Q0FDSjs7O0lBN0JHLDZCQUFXOzs7OztJQUlYLHVDQUFxQjs7Ozs7SUFLckIsdUNBQXFCOzs7OztJQUtyQixtQ0FBaUI7Ozs7O0lBS2pCLDRDQUEwQjs7Ozs7QUFlOUIsTUFBTSxPQUFPLFdBQVksU0FBUSxlQUFlOzs7OztJQStDNUMsWUFDRSxRQUFRLEVBQ0EsVUFBd0I7UUFFaEMsS0FBSyxFQUFFLENBQUM7UUFGQSxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBR2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQ3BGLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQUNwTSxJQUFJLENBQUMsT0FBTyxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyx1REFBdUQsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO1FBQ3RJLElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxHQUFHLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO0lBQ3hPLENBQUM7Q0FDSjs7Ozs7O0lBdkRHLDhCQUFnQjs7Ozs7SUFLaEIsK0JBQWlCOzs7OztJQUtqQiw4QkFBZ0I7Ozs7OztJQU1oQiwrQkFBa0I7Ozs7O0lBS2xCLG1DQUFzQjs7Ozs7SUFLdEIsa0NBQXFCOzs7OztJQUtyQixnQ0FBa0I7Ozs7O0lBS2xCLG9DQUFzQjs7Ozs7SUFLdEIseUNBQXNDOzs7OztJQUlwQyxpQ0FBZ0M7O0FBWXRDLE1BQU0sT0FBTyxVQUFXLFNBQVEsZUFBZTs7Ozs7SUFXN0MsWUFDRSxJQUFZLEVBQ0osVUFBd0I7UUFFaEMsS0FBSyxFQUFFLENBQUM7UUFGQSxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBR2hDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0NBQ0Y7Ozs7OztJQWZDLG9DQUF1Qjs7Ozs7SUFLdkIsNkJBQWdCOzs7OztJQUlkLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb2Nlc3NEZVV0aWwgfSBmcm9tICcuLi8uLi9kb21haW4vcHJvY2Vzcy1kZS11dGlsJztcclxuaW1wb3J0IHsgV2ZMb2NhbGVQaXBlIH0gZnJvbSAnLi4vLi4vaTE4bi9waXBlL3dmLXByb2Nlc3MtZWRpdG9yLWxvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgU21zTWVzc2FnZVRlbXBsYXRlIH0gZnJvbSAnLi4vc21zLW1lc3NhZ2UtdGVtcGxhdGUvc21zLW1lc3NhZ2UtdGVtcGxhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVMaW1pdEluZm8ge1xyXG4gICAgdGFnOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKblkK/nlKhcclxuICAgICAqL1xyXG4gICAgZW5hYmxlOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZmQ5a6a5pe26ZW/XHJcbiAgICAgKi9cclxuICAgIGR1ZVRpbWU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXtumXtOWNleS9jVxyXG4gICAgICovXHJcbiAgICB0aW1lVW5pdDogc3RyaW5nO1xyXG5cclxuICAgIGV4cGlyZU9wZXJhdGlvbnM6IEFycmF5PEV4cGlyZU9wZXJhdGlvbj47XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50YWcgPSAnY29uc3RhbnQnO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aW1lVW5pdCA9ICdkYXknO1xyXG4gICAgICAgIHRoaXMuZXhwaXJlT3BlcmF0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXhwaXJlT3BlcmF0aW9uIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIOacn+mZkOaOp+WItuexu+Wei1xyXG4gICAgICovXHJcbiAgICBkdXJhdGlvblR5cGU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS7u+WKoeacn+mZkFxyXG4gICAgICovXHJcbiAgICB0aW1lRHVyYXRpb246IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXtumXtOWNleS9jVxyXG4gICAgICovXHJcbiAgICB0aW1lVW5pdDogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pON5L2c57G75Z6L5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIG9wZXJhdGlvblR5cGVOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IFByb2Nlc3NEZVV0aWwuR2VuZXJhdGVFbGVtZW50SWQoKTtcclxuICAgICAgICB0aGlzLmR1cmF0aW9uVHlwZSA9ICdCZWZvcmVEdXJhdGlvbic7XHJcbiAgICAgICAgdGhpcy50aW1lRHVyYXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMudGltZVVuaXQgPSAnZGF5JztcclxuICAgICAgICAvLyDpu5jorqTmk43kvZznsbvlnovmmK/lj5HpgIHpooTorabmtojmga9cclxuICAgICAgICB0aGlzLm9wZXJhdGlvblR5cGVOYW1lID0gJ1NlbmRNZXNzYWdlRXhwaXJlT3BlcmF0aW9uJztcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOWPkemAgemihOitpuS/oeaBr+aWueW8j1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlbmRNZXNzYWdlIGV4dGVuZHMgRXhwaXJlT3BlcmF0aW9ue1xyXG4gICAgLyoqXHJcbiAgICAgKiDpooTorabkv6Hmga/lhoXlrrlcclxuICAgICAqL1xyXG4gICAgbWVzc2FnZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+R6YCB6aKE6K2m5L+h5oGv57G75Z6LXHJcbiAgICAgKi9cclxuICAgIHNlbmRUeXBlOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpooTorabkv6Hmga/kuLvpophcclxuICAgICAqL1xyXG4gICAgc3ViamVjdDogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv5o6l5pS25Lq6XHJcbiAgICAgKiDnlKjmiLdJRHNcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZXI/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmtojmga/mjqXmlLbkurrmmL7npLpcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZXJUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZCv55So5b6q546v6aKE6K2mXHJcbiAgICAgKi9cclxuICAgIGN5Y2xlRW5hYmxlOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b6q546v6aKE6K2m5pe26Ze06Ze06ZqUXHJcbiAgICAgKi9cclxuICAgIGN5Y2xlVGltZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b6q546v6aKE6K2m5pe26Ze06Ze06ZqU5Y2V5L2NXHJcbiAgICAgKi9cclxuICAgIGN5Y2xlVGltZVVuaXQ6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOefreS/oeaooeadv1xyXG4gICAgICovXHJcbiAgICBzbXNNZXNzYWdlVGVtcGxhdGU6IFNtc01lc3NhZ2VUZW1wbGF0ZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICBsb2NhdGlvbixcclxuICAgICAgcHJpdmF0ZSBsb2NhbGVQaXBlOiBXZkxvY2FsZVBpcGVcclxuICAgICAgKSB7XHJcbiAgICAgIHN1cGVyKCk7XHJcbiAgICAgIHRoaXMuY3ljbGVFbmFibGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5jeWNsZVRpbWVVbml0ID0gJ2RheSc7XHJcbiAgICAgIHRoaXMucmVjZWl2ZXIgPSBsb2NhdGlvbiA9PT0gJ2FjdGl2aXR5JyA/ICd3b3JrSXRlbVBhcnRpY2lwYW50JyA6ICdwcm9jSW5zdENyZWF0b3InO1xyXG4gICAgICB0aGlzLnJlY2VpdmVyVGV4dCA9IGxvY2F0aW9uID09PSAnYWN0aXZpdHknID8gdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnRpbWVMaW1pdENvbnRyb2wud29ya0l0ZW1QYXJ0aWNpcGFudCcpIDogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnRpbWVMaW1pdENvbnRyb2wucHJvY0luc3RDcmVhdG9yJyk7XHJcbiAgICAgIHRoaXMuc3ViamVjdCA9IGB7XCJleHByXCI6XCJcXCdgICsgdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnRpbWVMaW1pdENvbnRyb2wuU2VuZE1lc3NhZ2VFeHBpcmVPcGVyYXRpb24nKSArIGBcXCdcIixcInNleHByXCI6XCJcIn1gO1xyXG4gICAgICB0aGlzLm1lc3NhZ2UgPSBge1wiZXhwclwiOlwiXFwnYCArIChsb2NhdGlvbiA9PT0gJ2FjdGl2aXR5JyA/ICB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQudGltZUxpbWl0Q29udHJvbC50by1kb01lc3NhZ2VUaW1lT3V0JykgOiAgdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnRpbWVMaW1pdENvbnRyb2wubWVzc2FnZVRpbWVPdXQnKSkgKyBgXFwnXCIsXCJzZXhwclwiOlwiXCJ9YDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEF1dG9IYW5kbGUgZXh0ZW5kcyBFeHBpcmVPcGVyYXRpb24ge1xyXG4gIC8qKlxyXG4gICAqIOWKnueQhuexu+Wei++8jOmAmui/h+mps+WbnuWQpuWGs+etieetiVxyXG4gICAqL1xyXG4gIGF1dG9IYW5kbGVUeXBlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKnueQhuaEj+ingVxyXG4gICAqL1xyXG4gIG1lc3NhZ2U6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB0eXBlOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIGxvY2FsZVBpcGU6IFdmTG9jYWxlUGlwZVxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuYXV0b0hhbmRsZVR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnRpbWVMaW1pdENvbnRyb2wuYWdyZWUnKTtcclxuICB9XHJcbn1cclxuIl19