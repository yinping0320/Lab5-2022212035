/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, ViewChild, TemplateRef, Input, Output, EventEmitter, Optional, ChangeDetectorRef, LOCALE_ID, Inject } from '@angular/core';
import { SendMessage } from '../time-limit-control.entity';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { SmsMessageTemplate } from '../../sms-message-template/sms-message-template';
import { SmsMessageTemplateComponent } from '../../sms-message-template/sms-message-template.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
export class SendMessageOperationComponent {
    /**
     * @param {?} injector
     * @param {?} message
     * @param {?} uistate
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?} expr
     */
    constructor(injector, message, uistate, cdr, localeId, resources, localePipe, expr) {
        this.injector = injector;
        this.message = message;
        this.uistate = uistate;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.expr = expr;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        // operation: ExpireOperation = new ExpireOperation();
        this.operation = new SendMessage('activity', this.localePipe);
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        m => ({ value: m.code, name: m.name })));
        this.receiverVariables = [
            { value: 'procInstCreator', name: this.localePipe.transform("component.sendMessageOperation.procInstCreator") }
        ];
        this.activityReceiverVariables = [
            { value: 'workItemParticipant', name: this.localePipe.transform("component.sendMessageOperation.workItemParticipant") },
            { value: 'procInstCreator', name: this.localePipe.transform("component.sendMessageOperation.procInstCreator") },
            { value: 'preActExecutors', name: this.localePipe.transform("component.sendMessageOperation.preActExecutors") }
        ];
        this.placeholder = '';
        this.placeholder2 = '';
        this.hasSmsTemplate = false;
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            // console.log(val);
            return Number(val);
        });
        this.timeUnitCollection = [
            { value: 'day', text: this.localePipe.transform("component.sendMessageOperation.day") },
            { value: 'hour', text: this.localePipe.transform("component.sendMessageOperation.hour") },
            { value: 'minute', text: this.localePipe.transform("component.sendMessageOperation.minute") }
        ];
        this.location = 'activity';
        this.activityReceiverVar = '';
        this.bindingData = {};
    }
    /**
     * @param {?} info
     * @return {?}
     */
    set value(info) {
        this.operation = JSON.parse(JSON.stringify(info));
        if (this.operation.sendType === undefined) {
            /** @type {?} */
            const sendMessage = new SendMessage(this.location, this.localePipe);
            this.operation.cycleEnable = sendMessage.cycleEnable;
            this.operation.cycleTimeUnit = sendMessage.cycleTimeUnit;
            this.operation.receiver = sendMessage.receiver;
            this.operation.subject = sendMessage.subject;
            this.operation.message = sendMessage.message;
        }
        if (this.operation.receiver && this.operation.receiver.length > 0) {
            /** @type {?} */
            let array = this.operation.receiver.split(',');
            if (array.indexOf('workItemParticipant') > -1) {
                this.receiverVari = 'workItemParticipant';
                this.activityReceiverVar += 'workItemParticipant,';
            }
            if (array.indexOf('procInstCreator') > -1) {
                this.receiverVari = 'procInstCreator';
                this.activityReceiverVar += 'procInstCreator,';
            }
            if (array.indexOf('preActExecutors') > -1) {
                this.activityReceiverVar += 'preActExecutors,';
            }
            if (this.activityReceiverVar.length > 0) {
                this.activityReceiverVar = this.activityReceiverVar.substring(0, this.activityReceiverVar.length - 1);
            }
            if (array.length > 0) {
                array = array.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a !== 'procInstCreator'));
                this.bindingData.id = '';
                for (const r of array) {
                    this.bindingData.id += r + ',';
                }
                if (this.bindingData.id) {
                    this.bindingData.id = this.bindingData.id.substring(0, this.bindingData.id.length - 1);
                }
            }
        }
        if (this.operation.receiverText && this.operation.receiverText.length > 0) {
            /** @type {?} */
            let array = this.operation.receiverText.split(',');
            if (array.length > 0) {
                array = array.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a !== '流程发起人'));
                this.bindingData.name = '';
                for (const r of array) {
                    this.bindingData.name += r + ',';
                }
                if (this.bindingData.name) {
                    this.bindingData.name = this.bindingData.name.substring(0, this.bindingData.name.length - 1);
                }
            }
        }
        if (this.hasSmsMessage(this.operation.sendType)) {
            this.hasSmsTemplate = true;
            if (!this.operation.smsMessageTemplate) {
                this.operation.smsMessageTemplate = new SmsMessageTemplate();
            }
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this.operation;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    contentExpr(data) {
        this.showContentHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    titleExpr(data) {
        this.showTitleHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showContentHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.operation.message && this.operation.message.length > 0) {
            if (!this.operation.message.startsWith("{\"" + "expr\"" + ":\"")) {
                this.expr.addExpressionText("\'" + this.operation.message + "\'");
            }
            else {
                this.expr.addExpressionText(this.operation.message);
            }
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.operation.message = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showTitleHelp(data) {
        /** @type {?} */
        const context = this.showExpr();
        if (this.operation.subject && this.operation.subject.length > 0) {
            if (!this.operation.subject.startsWith("{\"" + "expr\"" + ":\"")) {
                this.expr.addExpressionText("\'" + this.operation.subject + "\'");
            }
            else {
                this.expr.addExpressionText(this.operation.subject);
            }
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.operation.subject = expressionInfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.SmsTemplate) {
            this.SmsTemplate.endGridEdit();
        }
        this.operation.cycleTime += '';
        if (this.location === 'process') {
            this.setReceiver();
        }
        if (this.location === 'activity') {
            this.setActivityReceiver();
        }
        if (this.hasSmsTemplate) {
            this.operation.smsMessageTemplate = this.SmsTemplate.smsMessageTemplate;
            if (this.operation.smsMessageTemplate.smsMessageVariables && this.operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                this.operation.smsMessageTemplate.smsMessageVariables = this.operation.smsMessageTemplate.smsMessageVariables.filter((/**
                 * @param {?} variable
                 * @return {?}
                 */
                variable => variable.code));
            }
        }
        else {
            this.operation.smsMessageTemplate = null;
        }
        if (this.validator()) {
            this.submitEmitter.emit(this.operation);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @return {?}
     */
    clear() {
        this.bindingData = {};
    }
    /**
     * @param {?} sendType
     * @return {?}
     */
    sendTypeChange(sendType) {
        if (this.hasSmsMessage(sendType)) {
            this.hasSmsTemplate = true;
            if (!this.operation.smsMessageTemplate) {
                this.operation.smsMessageTemplate = new SmsMessageTemplate();
            }
        }
        else {
            this.hasSmsTemplate = false;
            this.operation.smsMessageTemplate = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setReceiver() {
        /** @type {?} */
        let receiver = '';
        /** @type {?} */
        let receiverText = '';
        if (this.receiverVari) {
            receiver += this.receiverVari + ',';
            /** @type {?} */
            const array = this.receiverVari.split(',');
            if (array.length > 0) {
                for (const a of array) {
                    /** @type {?} */
                    const t = this.receiverVariables.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    v => v.value === a)).name;
                    receiverText += t + ',';
                }
            }
        }
        if (this.bindingData.id) {
            receiver += this.bindingData.id + ',';
            receiverText += this.bindingData.name + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        if (receiverText) {
            receiverText = receiverText.substring(0, receiverText.length - 1);
        }
        this.operation.receiver = receiver;
        this.operation.receiverText = receiverText;
    }
    /**
     * @return {?}
     */
    setActivityReceiver() {
        /** @type {?} */
        let receiver = '';
        if (this.activityReceiverVar) {
            receiver += this.activityReceiverVar + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        this.operation.receiver = receiver;
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        // 2023-5-22 如果没有启用循环预警则不进行校验
        if (this.operation.cycleEnable) {
            if (this.operation.cycleTime === 'undefined') {
                this.message.info(this.localePipe.transform("component.sendMessageOperation.cycleTimeNotEmpty"));
                return false;
            }
        }
        if (!this.operation.sendType) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.sendMethodNotEmpty"));
            return false;
        }
        if (!this.operation.subject) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.subjectNotEmpty"));
            return false;
        }
        if (!this.operation.message) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.contentNotEmpty"));
            return false;
        }
        if (!this.operation.receiver) {
            this.message.info(this.localePipe.transform("component.sendMessageOperation.recipientNotEmpty"));
            return false;
        }
        //去除消息模板编号校验
        // if (this.hasSmsTemplate) {
        //   if (!this.operation.smsMessageTemplate) {
        //     this.message.info(this.localePipe.transform("component.sendMessageOperation.messageTemplate"));
        //     return false;
        //   }
        //   if (!this.operation.smsMessageTemplate.code) {
        //     this.message.info(this.localePipe.transform("component.sendMessageOperation.smsTemplateNumberNotEmpty"));
        //     return false;
        //   }
        // }
        return true;
    }
    /**
     * @private
     * @param {?} sendType
     * @return {?}
     */
    hasSmsMessage(sendType) {
        if (sendType) {
            /** @type {?} */
            const sendTypeList = sendType.split(',');
            /** @type {?} */
            let messageChannel = sendTypeList.find((/**
             * @param {?} val
             * @return {?}
             */
            val => this.uistate.messageChannels.find((/**
             * @param {?} channel
             * @return {?}
             */
            channel => channel.code == val && channel.channelType == 'Sms'))));
            if (messageChannel) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    showExpr() {
        // this.expr.clearContext();
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        return context;
    }
}
SendMessageOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-send-message-operation',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <perfect-scrollbar [config]=\"{}\">\r\n      <form class=\"h-100\">\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline farris-form-auto\" style=\"padding-right: 0.875rem; padding-left: 0.875rem;\">\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label pl-1 mr-3\">\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.cycleEnable' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-5\">\r\n                  <farris-switch [(ngModel)]=\"operation.cycleEnable\" name=\"cycleEnable\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-7 mt-2 pr-1\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\" style=\"width: 100%;\">\r\n                <label class=\"col-form-label pl-1 mr-3\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.cycleTime' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap mr-1\" style=\"width: 35%;\">\r\n                  <farris-number-spinner [(ngModel)]=\"operation.cycleTime\" name=\"cycleTime\"\r\n                                          [editable]=\"true\" [precision]=\"0\" [parser]=\"parser\"\r\n                                          [min]=\"0\"></farris-number-spinner>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-3 mt-2 pl-1\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group\" style=\"width: 100%;\">\r\n                <div class=\"farris-input-wrap mr-5\" style=\"width: 30%;\">\r\n                  <farris-combo-list [(ngModel)]=\"operation.cycleTimeUnit\" name=\"cycleTimeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                      [valueField]=\"'value'\" [data]=\"timeUnitCollection\" [panelHeight]=\"'auto'\"\r\n                                      [editable]=\"false\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.sendType' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"operation.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                    [data]=\"typeGroup\" (changeValue)=\"sendTypeChange($event)\">\r\n                  </farris-checkboxgroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.subject' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                    <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                    [(value)]=\"operation.subject\" (clickHandle)=\"titleExpr($event)\">\r\n                    </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.message' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                    <input-group [editable]=\"false\" [enableClear]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                    [(value)]=\"operation.message\" (clickHandle)=\"contentExpr($event)\">\r\n                    </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 mt-2\">\r\n            <div *ngIf=\"location==='process'\" class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.receiverVari' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <div class=\"pb-2\">\r\n                    <farris-checkboxgroup #receiverVariable [(ngModel)]=\"receiverVari\" name=\"receiverVariable\"\r\n                      [horizontal]=\"true\" [data]=\"receiverVariables\">\r\n                    </farris-checkboxgroup>\r\n                  </div>\r\n                  <div>\r\n                    <sys-farris-grid-lookup #userHelp [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\" [pagination]=\"true\"\r\n                      [pageSize]=\"20\" title=\"{{'component.sendMessageOperation.sysUsers' | wfLocale}}\" [sourceType]=\"'user'\" [bindingData]=\"bindingData\"\r\n                      [filter]=\"{notGetCurrentUser:false, notGetStopUser:true}\" [typeMode]=\"1\" (clear)=\"clear()\">\r\n                    </sys-farris-grid-lookup>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"location==='activity'\" class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.sendMessageOperation.receiverVari' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <div class=\"pb-2\">\r\n                    <farris-checkboxgroup #receiverVariable1 [(ngModel)]=\"activityReceiverVar\" name=\"ActivityReceiverVariable\"\r\n                                          [horizontal]=\"true\" [data]=\"activityReceiverVariables\">\r\n                    </farris-checkboxgroup>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <lib-sms-message-template *ngIf=\"hasSmsTemplate\" [smsMessageTemplate]=\"operation.smsMessageTemplate\"></lib-sms-message-template>\r\n      </form>\r\n    </perfect-scrollbar>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.sendMessageOperation.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.sendMessageOperation.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SendMessageOperationComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: ExpressionService }
];
SendMessageOperationComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    SmsTemplate: [{ type: ViewChild, args: [SmsMessageTemplateComponent,] }],
    value: [{ type: Input }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SendMessageOperationComponent.prototype.groupIcon2;
    /** @type {?} */
    SendMessageOperationComponent.prototype.footer;
    /** @type {?} */
    SendMessageOperationComponent.prototype.SmsTemplate;
    /** @type {?} */
    SendMessageOperationComponent.prototype.operation;
    /** @type {?} */
    SendMessageOperationComponent.prototype.closeEmitter;
    /** @type {?} */
    SendMessageOperationComponent.prototype.submitEmitter;
    /** @type {?} */
    SendMessageOperationComponent.prototype.typeGroup;
    /** @type {?} */
    SendMessageOperationComponent.prototype.receiverVariables;
    /** @type {?} */
    SendMessageOperationComponent.prototype.activityReceiverVariables;
    /** @type {?} */
    SendMessageOperationComponent.prototype.placeholder;
    /** @type {?} */
    SendMessageOperationComponent.prototype.placeholder2;
    /** @type {?} */
    SendMessageOperationComponent.prototype.hasSmsTemplate;
    /** @type {?} */
    SendMessageOperationComponent.prototype.parser;
    /** @type {?} */
    SendMessageOperationComponent.prototype.timeUnitCollection;
    /** @type {?} */
    SendMessageOperationComponent.prototype.location;
    /** @type {?} */
    SendMessageOperationComponent.prototype.receiverVari;
    /** @type {?} */
    SendMessageOperationComponent.prototype.activityReceiverVar;
    /** @type {?} */
    SendMessageOperationComponent.prototype.bindingData;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.localePipe;
    /**
     * @type {?}
     * @private
     */
    SendMessageOperationComponent.prototype.expr;
}
//# sourceMappingURL=data:application/json;base64,