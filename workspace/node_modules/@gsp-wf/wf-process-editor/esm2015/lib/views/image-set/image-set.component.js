/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, TemplateRef, Input, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { ImageSetting } from './image-set';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ImageSetComponent {
    /**
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.imageSet.imageSet'),
            width: 520,
            height: 360,
            showButtons: true
        };
        // 影像操作权限选项列表
        this.operationList = [
            { value: 'onlyView', name: this.localePipe.transform('component.imageSet.onlyView') },
            { value: 'edit', name: this.localePipe.transform('component.imageSet.edit') },
            { value: 'reScanStart', name: this.localePipe.transform('component.imageSet.reScanStart') },
            { value: 'reScanComplete', name: this.localePipe.transform('component.imageSet.reScanComplete') }
        ];
        // 影像操作权限
        this.imageSetting = new ImageSetting();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} setValue
     * @return {?}
     */
    set value(setValue) {
        if (setValue) {
            this.imageSetting.imageOperation = setValue.imageOperation;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    changeValue(data) {
        // 先选0再选123的时候，暂时置为0？先选123再选0则置为0√
        if (data.indexOf('onlyView') > -1) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.message.info(this.localePipe.transform('component.imageSet.mutualExclusion'));
                this.imageSetting.imageOperation = 'onlyView';
            }), 100);
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const value = this.imageSetting;
        /** @type {?} */
        const object = { value, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
}
ImageSetComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-image-set',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <!-- <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u5F71\u50CF\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div> -->\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.imageSet.imageOperation'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-checkboxgroup [data]=\"operationList\" [(ngModel)]=\"imageSetting.imageOperation\" [horizontal]=\"true\"\r\n                  [isStringValue]=true (changeValue)=\"changeValue($event)\">\r\n                  </farris-checkboxgroup>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.imageSet.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.imageSet.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ImageSetComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ImageSetComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
if (false) {
    /** @type {?} */
    ImageSetComponent.prototype.closeModal;
    /** @type {?} */
    ImageSetComponent.prototype.submitModal;
    /** @type {?} */
    ImageSetComponent.prototype.modalFooter;
    /** @type {?} */
    ImageSetComponent.prototype.modalConfig;
    /** @type {?} */
    ImageSetComponent.prototype.operationList;
    /** @type {?} */
    ImageSetComponent.prototype.imageSetting;
    /**
     * @type {?}
     * @private
     */
    ImageSetComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ImageSetComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ImageSetComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ImageSetComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ImageSetComponent.prototype.localePipe;
}
export class ImageSetConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.imageOperation) {
            return this.localePipe.transform('component.imageSet.set');
        }
        return this.localePipe.transform('component.imageSet.notSet');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImageSetConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,