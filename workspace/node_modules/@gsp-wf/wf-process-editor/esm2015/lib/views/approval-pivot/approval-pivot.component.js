/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, HostBinding, Output, EventEmitter, Input, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ApprovalPivotConfig } from './approval-pivot-config';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType, ExprEditMode } from '@gsp-svc/expression';
import { ApprovalPivot } from './approval-pivot';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ApprovalPivotComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, expr, message, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.config = new ApprovalPivotConfig();
        this.typeList = [
            { value: 'REMIND', text: this.localePipe.transform('component.approvalPivot.remind') }
        ];
        this.columns = [
            {
                field: 'type', width: 80, title: this.localePipe.transform('component.approvalPivot.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.typeList }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.typeList, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'condition', width: 120, title: this.localePipe.transform('component.approvalPivot.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            },
            {
                field: 'title', width: 80, title: this.localePipe.transform('component.approvalPivot.title'),
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }, {
                field: 'description', width: 100, title: this.localePipe.transform('component.approvalPivot.description'), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.approvalPivot.approvalPivot'),
            width: 800,
            height: 480,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        this.config.localePipe = this.localePipe;
        if (data) {
            this.config.enable = data.enable;
            this.config.title = data.title;
            this.config.expand = data.expand;
            if (data.approvalPivots && data.approvalPivots.length > 0) {
                for (const a of data.approvalPivots) {
                    /** @type {?} */
                    const approvalPivot = new ApprovalPivot();
                    approvalPivot.type = a.type;
                    approvalPivot.title = a.title;
                    approvalPivot.description = a.description;
                    if (a.condition) {
                        if (typeof (a.condition) === 'string') {
                            approvalPivot.condition = a.condition;
                        }
                        else {
                            approvalPivot.condition = a.condition._value;
                        }
                    }
                    this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const approvalPivot = new ApprovalPivot();
        this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
    }
    /**
     * @return {?}
     */
    delete() {
        /** @type {?} */
        const selectedRow = this.grid.selectedRow;
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.approvalPivot.selectedRow'));
            return;
        }
        this.config.approvalPivots = this.config.approvalPivots.filter((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id !== selectedRow.id));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (!this.config.title && this.config.enable) {
            this.message.info(this.localePipe.transform('component.approvalPivot.configTitle'));
            return;
        }
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.config, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        return true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional);
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
ApprovalPivotComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-approval-pivot',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.approvalPivot.approvalPivot'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"wf-process-pivot\">\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.enable'|wfLocale}}</span>\r\n          <farris-switch [(ngModel)]=\"config.enable\" name=\"enable\"></farris-switch>\r\n        </div>\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.expand'|wfLocale}}</span>\r\n          <farris-switch [(ngModel)]=\"config.expand\" name=\"expand\" [disabled]=\"!config.enable\"></farris-switch>\r\n        </div>\r\n        <div class=\"wf-process-pivot-actions\">\r\n          <span class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"wf-process-pivot-actions-text\">{{'component.approvalPivot.showTitle'|wfLocale}}</span>\r\n          <div class=\"farris-input-wrap\">\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"config.title\" name=\"title\" [readonly]=\"!config.enable\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" mainTitle=\"{{'component.approvalPivot.list'|wfLocale}}\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-link pr-2 mr-2\" (click)=\"add()\" [disabled]=\"!config.enable\">{{'component.approvalPivot.add'|wfLocale}}</button>\r\n        <button class=\"btn btn-link mr-0\" (click)=\"delete()\" [disabled]=\"!config.enable\">{{'component.approvalPivot.delete'|wfLocale}}</button>\r\n      </ng-template>\r\n      <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"config.approvalPivots\" #grid [idField]=\"'id'\" [showLineNumber]=\"true\"\r\n        [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n        [multiSelect]=\"false\" [disabled]=\"!config.enable\">\r\n      </farris-datagrid>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.approvalPivot.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.approvalPivot.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".wf-process-pivot{display:flex;align-items:center;margin-bottom:20px}.wf-process-pivot-actions{display:flex;padding-left:30px;align-items:center}.wf-process-pivot-actions-text{padding-right:10px}"]
            }] }
];
/** @nocollapse */
ApprovalPivotComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ApprovalPivotComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ApprovalPivotComponent.prototype.cls;
    /** @type {?} */
    ApprovalPivotComponent.prototype.closeModal;
    /** @type {?} */
    ApprovalPivotComponent.prototype.submitModal;
    /** @type {?} */
    ApprovalPivotComponent.prototype.modalFooter;
    /** @type {?} */
    ApprovalPivotComponent.prototype.grid;
    /** @type {?} */
    ApprovalPivotComponent.prototype.config;
    /** @type {?} */
    ApprovalPivotComponent.prototype.typeList;
    /** @type {?} */
    ApprovalPivotComponent.prototype.columns;
    /** @type {?} */
    ApprovalPivotComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotComponent.prototype.localePipe;
}
export class ApprovalPivotConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.enable) {
            return this.localePipe.transform('component.approvalPivot.set');
        }
        else {
            return this.localePipe.transform('component.approvalPivot.notSet');
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApprovalPivotConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,