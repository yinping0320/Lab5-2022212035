/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { ApprovalItemEntity } from './entities/approval-item.entity';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ApprovelItemsComponent {
    /**
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} uiState
     * @param {?} resolver
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, util, http, uiState, resolver, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.util = util;
        this.http = http;
        this.uiState = uiState;
        this.resolver = resolver;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.approvelItems.approvalOptions'),
            width: 1100,
            height: 515,
            showButtons: true
        };
        this.workFlowActions = [
            { text: this.localePipe.transform('component.approvelItems.forward'), value: 'Forward' },
            { text: this.localePipe.transform('component.approvelItems.backward'), value: 'Backward' },
            { text: this.localePipe.transform('component.approvelItems.abort'), value: 'Abort' }
        ];
        this.columns = [
            {
                field: 'value', width: 80, title: this.localePipe.transform('component.approvelItems.value'),
            },
            { field: 'text', width: 80, title: this.localePipe.transform('component.approvelItems.text') },
            {
                field: 'workFlowAction', width: 80, title: this.localePipe.transform('component.approvelItems.workFlowAction'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.workFlowActions, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'isDefault', width: 60, title: this.localePipe.transform('component.approvelItems.isDefault'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'commentNecessary', width: 60, title: this.localePipe.transform('component.approvelItems.commentNecessary'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'attachmentNecessary', width: 60, title: this.localePipe.transform('component.approvelItems.attachmentNecessary'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'certification', width: 60, title: this.localePipe.transform('component.approvelItems.certification'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'signatureNecessary', width: 60, title: this.localePipe.transform('component.approvelItems.signatureNecessary'),
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.approvelItems.yes'), falseText: this.localePipe.transform('component.approvelItems.no') } },
                validators: []
            },
            {
                field: 'defaultComment', isMultilingualField: true, width: 70, title: this.localePipe.transform('component.approvelItems.defaultComment'),
                editor: {
                    type: EditorTypes.LANGUAGETEXTBOX, options: {
                        languages: [
                            { code: 'zh-CHS', name: this.localePipe.transform('component.approvelItems.zh-CHS') },
                            { code: 'zh-CHT', name: this.localePipe.transform('component.approvelItems.zh-CHT') },
                            { code: 'en', name: this.localePipe.transform('component.approvelItems.en') }
                        ]
                    }
                },
            }
        ];
        this.data = [];
        this.actionsCols = [
            { title: this.localePipe.transform('component.approvelItems.value'), field: 'code', width: 80 },
            { title: this.localePipe.transform('component.approvelItems.text'), field: 'name', width: 90 }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set value(items) {
        if (items && items.length > 0) {
            for (const item of items) {
                /** @type {?} */
                const approval = new ApprovalItemEntity();
                approval.value = item.Value;
                approval.text = item.Text;
                approval.workFlowAction = item.WorkFlowAction;
                approval.isDefault = item.IsDefault;
                if (item.commentNecessary === null || item.commentNecessary === undefined) {
                    approval.commentNecessary = (item.Value === 'Back' ? true : false);
                }
                else {
                    approval.commentNecessary = item.commentNecessary;
                }
                approval.certification = item.certification ? item.certification : false;
                approval.attachmentNecessary = item.attachmentNecessary ? item.attachmentNecessary : false;
                approval.signatureNecessary = item.signatureNecessary ? item.signatureNecessary : false;
                approval.defaultComment = item.defaultComment ? JSON.parse(item.defaultComment) : null;
                this.data.push(approval);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getActionsList();
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const actionList = [];
            // 将多语的默认意见转成String
            for (const action of this.data) {
                if (action.defaultComment != null) {
                    action.defaultComment = JSON.stringify(action.defaultComment);
                }
                actionList.push(action);
            }
            console.log(actionList);
            /** @type {?} */
            const object = { value: actionList, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => !d.workFlowAction)) > -1) {
            this.message.warning(this.localePipe.transform('component.approvelItems.workFlowActionNotNull'));
            return false;
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectChanged(data) { }
    /**
     * @return {?}
     */
    deleteRow() {
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            const i = this.data.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.value === this.grid.selectedRow.data.value));
            this.data.splice(i, 1);
            this.grid.loadData(this.data);
        }
        else {
            this.message.info(this.localePipe.transform('component.approvelItems.deleteRow'));
        }
    }
    /**
     * @private
     * @return {?}
     */
    getActionsList() {
        /** @type {?} */
        let url = this.util.getApprovalActionWebApi() + '?';
        if (this.uiState.bizActivityId) {
            url += `bizActivityId=${this.uiState.bizActivityId}`;
        }
        else {
            url += `bizActivityId=`;
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            data = data.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => this.actionValidate(a)));
            this.actions = data;
        }));
    }
    /**
     * @return {?}
     */
    actionsSelect() {
        /** @type {?} */
        const selections = this.actionsTable.checkeds;
        if (selections && selections.length > 0) {
            selections.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                const item = new ApprovalItemEntity(action.data.code, action.data.name, action.data.workFlowAction);
                /** @type {?} */
                const index = this.data.findIndex((/**
                 * @param {?} act
                 * @return {?}
                 */
                act => act.value === action.data.code));
                if (index > -1) {
                    this.data.splice(index, 1);
                }
                this.data.push(item);
            }));
            this.grid.loadData(this.data);
        }
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable.clearCheckeds(true);
        this.actionsDialog.close();
    }
    /**
     * @return {?}
     */
    SelectCancel() {
        // 2023-6-13 关闭前清空已选数据
        this.actionsTable.clearCheckeds(true);
        this.actionsDialog.close();
    }
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    actionValidate(action) {
        /** @type {?} */
        const arr = ['ViewBizLog', 'ViewFlowChart', 'AssignUser', 'Claim', 'Unclaim', 'Retrieve', 'Resubmit', 'Obsolete', 'Transfer', 'AddSignFront', 'ViewExecuteForm'];
        return arr.indexOf(action.code.trim()) === -1;
    }
}
ApprovelItemsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-approvel-items',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      <button class=\"btn btn-primary mr-2\" (click)=\"actionsDialog.show()\">{{'component.approvelItems.add' | wfLocale}}</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"deleteRow()\">{{'component.approvelItems.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'value'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" (selectChanged)=\"selectChanged($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"SelectCancel()\">{{'component.approvelItems.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"actionsSelect()\">{{'component.approvelItems.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #actionsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.approvelItems.approvalAction' | wfLocale}}\">\r\n  <!-- 2023-6-1 \u89E3\u51B3\u5BA1\u6279\u52A8\u4F5C\u5F39\u7A97\u53CC\u6EDA\u52A8\u6761\u7684\u95EE\u9898 -->\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-hidden h-100\" style=\"margin-left: 8px;margin-right: 8px;\">\r\n    <farris-datagrid #actionsTable [columns]=\"actionsCols\" [data]=\"actions\"\r\n      [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false'\r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"true\"\r\n      [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.approvelItems.lineNumber' | wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ApprovelItemsComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ApprovelItemsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    actionsTable: [{ type: ViewChild, args: ['actionsTable',] }],
    actionsDialog: [{ type: ViewChild, args: ['actionsDialog',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    ApprovelItemsComponent.prototype.cls;
    /** @type {?} */
    ApprovelItemsComponent.prototype.closeModal;
    /** @type {?} */
    ApprovelItemsComponent.prototype.submitModal;
    /** @type {?} */
    ApprovelItemsComponent.prototype.modalFooter;
    /** @type {?} */
    ApprovelItemsComponent.prototype.actionsTable;
    /** @type {?} */
    ApprovelItemsComponent.prototype.actionsDialog;
    /** @type {?} */
    ApprovelItemsComponent.prototype.grid;
    /** @type {?} */
    ApprovelItemsComponent.prototype.modalConfig;
    /** @type {?} */
    ApprovelItemsComponent.prototype.workFlowActions;
    /** @type {?} */
    ApprovelItemsComponent.prototype.columns;
    /** @type {?} */
    ApprovelItemsComponent.prototype.data;
    /** @type {?} */
    ApprovelItemsComponent.prototype.actions;
    /** @type {?} */
    ApprovelItemsComponent.prototype.actionsCols;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsComponent.prototype.localePipe;
}
export class ApprovelItemsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform('component.approvelItems.set');
        }
        else {
            return this.localePipe.transform('component.approvelItems.notSet');
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApprovelItemsConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,