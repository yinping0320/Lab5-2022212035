/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { EventDefinition } from './event-definition.entity';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class EventDefinitionComponent {
    /**
     * @param {?} message
     * @param {?} util
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(message, util, injector, cdr, localeId, resources, localePipe) {
        this.message = message;
        this.util = util;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.eventDefinition.eventDefinition'),
            width: 560,
            height: 420,
            showButtons: true
        };
        this.triggerActionCollection = [
            { text: this.localePipe.transform('component.eventDefinition.pass'), value: 'Pass' },
            { text: this.localePipe.transform('component.eventDefinition.back'), value: 'Back' },
            { text: this.localePipe.transform('component.eventDefinition.abort'), value: 'Abort' }
        ];
        this.columns = new Array();
        this.data = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set value(items) {
        if (items && items.length > 0) {
            for (const item of items) {
                /** @type {?} */
                const event = new EventDefinition();
                event.Id = item.Id;
                event.name = item.name;
                event.triggerAction = item.triggerAction;
                event.Async = item.Async;
                event.SignalRef = item.SignalRef;
                this.data.push(event);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [{
                field: 'SignalRef', width: 100, title: this.localePipe.transform('component.eventDefinition.signalRef'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'name', width: 100, title: this.localePipe.transform('component.eventDefinition.name'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'triggerAction', width: 100, title: this.localePipe.transform('component.eventDefinition.triggerAction'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.triggerActionCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.triggerActionCollection, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }];
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const event = new EventDefinition();
        event.Id = ProcessDeUtil.GenerateElementId();
        this.data.push(event);
        this.grid.loadData(this.data);
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            const i = this.data.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.Id === this.grid.selectedRow.data.Id));
            this.data.splice(i, 1);
            this.grid.loadData(this.data);
        }
        else {
            this.message.info(this.localePipe.transform('component.eventDefinition.selectedRow'));
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (this.data.length === 0) {
            this.message.info(this.localePipe.transform('component.eventDefinition.dataLength'));
            return false;
        }
        else {
            for (const d of this.data) {
                if (!d.SignalRef) {
                    this.message.info(this.localePipe.transform('component.eventDefinition.codeNotNull'));
                    return false;
                }
                else if (!d.name) {
                    this.message.info(this.localePipe.transform('component.eventDefinition.nameNotNull'));
                    return false;
                }
                else if (!isNaN(Number(d.SignalRef))) {
                    this.message.info(this.localePipe.transform('component.eventDefinition.codeNotNumber'));
                    return false;
                }
            }
            if (this.data.length > 1) {
                for (let i = 0; i < this.data.length; i++) {
                    /** @type {?} */
                    const code1 = this.data[i].SignalRef;
                    for (let j = i + 1; j < this.data.length; j++) {
                        /** @type {?} */
                        const code2 = this.data[j].SignalRef;
                        if (code1 === code2) {
                            this.message.warning(this.localePipe.transform('component.eventDefinition.codeRepeat'));
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}
EventDefinitionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-event-definition',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <!-- <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span> -->\r\n        <!-- <h4 class=\"f-title-text\">\u5217\u8868</h4> -->\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">{{'component.eventDefinition.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.eventDefinition.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.eventDefinition.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.eventDefinition.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EventDefinitionComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EventDefinitionComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    EventDefinitionComponent.prototype.cls;
    /** @type {?} */
    EventDefinitionComponent.prototype.closeModal;
    /** @type {?} */
    EventDefinitionComponent.prototype.submitModal;
    /** @type {?} */
    EventDefinitionComponent.prototype.modalFooter;
    /** @type {?} */
    EventDefinitionComponent.prototype.grid;
    /** @type {?} */
    EventDefinitionComponent.prototype.modalConfig;
    /** @type {?} */
    EventDefinitionComponent.prototype.triggerActionCollection;
    /** @type {?} */
    EventDefinitionComponent.prototype.columns;
    /** @type {?} */
    EventDefinitionComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.util;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    EventDefinitionComponent.prototype.localePipe;
}
export class EventDefinitionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform('component.eventDefinition.set');
        }
        else {
            return this.localePipe.transform('component.eventDefinition.notSet');
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventDefinitionConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,