/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from '@farris/ui-messager';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { CheckCondition } from './check-condition';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class CheckConditionComponent {
    /**
     * @param {?} injector
     * @param {?} message
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(injector, message, designerUIState, expr, http, cdr, localeId, resources, localePipe) {
        this.injector = injector;
        this.message = message;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.languages = [
            { code: 'zh-CHS', name: this.localePipe.transform('component.checkCondition.zhChs') },
            { code: 'zh-CHT', name: this.localePipe.transform('component.checkCondition.zhCht') },
            { code: 'en', name: this.localePipe.transform('component.checkCondition.en') }
        ];
        this.activityBeforeStarted = new CheckCondition('ACTIVITY_BEFORE_STARTED');
        this.activityBeforeCompleted = new CheckCondition('ACTIVITY_BEFORE_COMPLETED');
        this.modalConfig = {
            title: this.localePipe.transform('component.checkCondition.checkCondition'),
            width: 440,
            height: 460,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data && data.length > 0) {
            console.log(data);
            this.activityBeforeStarted = data.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d.checkTime === 'ACTIVITY_BEFORE_STARTED')) || new CheckCondition('ACTIVITY_BEFORE_STARTED');
            this.activityBeforeCompleted = data.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d.checkTime === 'ACTIVITY_BEFORE_COMPLETED')) || new CheckCondition('ACTIVITY_BEFORE_COMPLETED');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} checkTime
     * @return {?}
     */
    editCondition(checkTime) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        /** @type {?} */
        const text = checkTime === 'ACTIVITY_BEFORE_STARTED' ? this.activityBeforeStarted.value : this.activityBeforeCompleted.value;
        this.expr.addExpressionText(text);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (checkTime === 'ACTIVITY_BEFORE_STARTED') {
                this.activityBeforeStarted.value = cond;
            }
            else {
                this.activityBeforeCompleted.value = cond;
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} checkTime
     * @return {?}
     */
    clearCondition(checkTime) {
        if (checkTime === 'ACTIVITY_BEFORE_STARTED') {
            this.activityBeforeStarted.value = null;
        }
        else {
            this.activityBeforeCompleted.value = null;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const checkConditions = new Array();
        if (this.activityBeforeStarted.value || this.activityBeforeStarted.errorTips) {
            checkConditions.push(this.activityBeforeStarted);
        }
        if (this.activityBeforeCompleted.value || this.activityBeforeCompleted.errorTips) {
            checkConditions.push(this.activityBeforeCompleted);
        }
        /** @type {?} */
        const object = { value: checkConditions, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    validator() {
    }
}
CheckConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-check-condition',
                template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.checkCondition.nodeEntry'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form mx-3\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.activityBeforeStarted' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input-group [editable]=\"false\" [(ngModel)]=\"activityBeforeStarted.value\" name= \"activityBeforeStarted\" (clickHandle)=\"editCondition('ACTIVITY_BEFORE_STARTED')\" [groupText]=\"groupIcon\" (clear)=\"clearCondition('ACTIVITY_BEFORE_STARTED')\"></input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\"></span>\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.enterErrorTips' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <language-textbox [languages]=\"languages\" [(ngModel)]=\"activityBeforeStarted.errorTips\" name=\"activityBeforeStartedErrorTips\"></language-textbox>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" mainTitle=\"{{'component.checkCondition.activityBeforeCompleted'|wfLocale}}\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <div class=\"f-form-layout farris-form mx-3\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.activityBeforeCompletedValue' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input-group [editable]=\"false\" [(ngModel)]=\"activityBeforeCompleted.value\" name= \"activityBeforeCompleted\" (clickHandle)=\"editCondition('ACTIVITY_BEFORE_COMPLETED')\" [groupText]=\"groupIcon\" (clear)=\"clearCondition('ACTIVITY_BEFORE_COMPLETED')\"></input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\"></span>\r\n                    <span class=\"farris-label-text\">{{'component.checkCondition.leaveErrorTips' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <language-textbox [languages]=\"languages\" [(ngModel)]=\"activityBeforeCompleted.errorTips\" name=\"activityBeforeCompletedErrorTips\"></language-textbox>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.checkCondition.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.checkCondition.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CheckConditionComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CheckConditionComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
if (false) {
    /** @type {?} */
    CheckConditionComponent.prototype.groupIcon;
    /** @type {?} */
    CheckConditionComponent.prototype.closeModal;
    /** @type {?} */
    CheckConditionComponent.prototype.submitModal;
    /** @type {?} */
    CheckConditionComponent.prototype.languages;
    /** @type {?} */
    CheckConditionComponent.prototype.modalFooter;
    /** @type {?} */
    CheckConditionComponent.prototype.activityBeforeStarted;
    /** @type {?} */
    CheckConditionComponent.prototype.activityBeforeCompleted;
    /** @type {?} */
    CheckConditionComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    CheckConditionComponent.prototype.localePipe;
}
export class CheckConditionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.checkCondition.set");
        }
        return this.localePipe.transform("component.checkCondition.notSet");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CheckConditionConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,