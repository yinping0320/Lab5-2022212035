/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { SignRuleEntity } from './entites/sign-rule.entity';
import { DialogComponent } from '@farris/ui-dialog';
import { ExprEditMode, ExpressionService } from '@gsp-svc/expression';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { of } from 'rxjs';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
import { BpmnModelHelper } from '@edp-pmf/bpmn-model';
import { Condition, CounterSignRule } from '@gsp-wf/wf-process-model';
export class SignRuleComponent {
    /**
     * @param {?} formBuilder
     * @param {?} message
     * @param {?} exprService
     * @param {?} designerUIState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(formBuilder, message, exprService, designerUIState, cdr, localeId, resources, localePipe) {
        this.formBuilder = formBuilder;
        this.message = message;
        this.exprService = exprService;
        this.designerUIState = designerUIState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.signRule.countersignRules'),
            width: 800,
            height: 520,
            showButtons: true
        };
        this.editCondition = false;
        this.data = [];
        this.calculationMethods = [
            { text: this.localePipe.transform('component.signRule.byNumber'), value: 'byNumber' },
            { text: this.localePipe.transform('component.signRule.byProportion'), value: 'byProportion' },
            { text: this.localePipe.transform('component.signRule.customConditions'), value: 'null' },
        ];
        this.counterSignVariables = [];
        this.bpmnModel = this.designerUIState.bpmnModel;
        /**
         * **** 审批项帮助参数 ********************************************************
         */
        this.approvalCols = [{ title: this.localePipe.transform('component.signRule.value'), field: 'value', width: 80 },
            { title: this.localePipe.transform('component.signRule.text'), field: 'text', width: 90 }];
        this.approvalItems = [];
        this.approvalItems1 = [
            { value: 'Forward', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.forward') },
            { value: 'Backward', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.backward') },
            { value: 'Abort', text: this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.abort') }
        ];
        /**
         * ********************************
         */
        this.columns = [
            { field: 'conclusionName', width: 25, title: this.localePipe.transform('component.signRule.conclusionName') },
            { field: 'conclusionValue', width: 25, title: this.localePipe.transform('component.signRule.conclusionValue') },
            { field: 'calculateType', width: 40, title: this.localePipe.transform('component.signRule.calculateType'),
                formatter: { type: 'enum', options: { valueField: 'value', textField: 'text', data: this.calculationMethods } },
                editor: { type: EditorTypes.COMBOLIST, options: { valueField: 'value', textField: 'text', data: this.calculationMethods, idField: 'value', panelHeight: 'auto' } }
            },
            { field: 'conditionValue', width: 25, title: this.localePipe.transform('component.signRule.conditionValue'),
                editor: { type: EditorTypes.NUMBERBOX, options: {} },
                formatter: { type: 'number', options: { precision: 0, min: 0 } }
            },
            { field: 'waitAllVotes', width: 35, title: this.localePipe.transform('component.signRule.waitAllVotes'),
                editor: { type: EditorTypes.SWITCH, options: {} },
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.signRule.yes'), falseText: this.localePipe.transform('component.signRule.no') } }
            },
            { field: 'completionCondition', width: 50, title: this.localePipe.transform('component.signRule.customConditions'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        /**
         * 结束编辑前事件
         */
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            this.preValue = JSON.parse(JSON.stringify(rowData));
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    //会签规则打开页面
    /**
     * @param {?} rules
     * @return {?}
     */
    set value(rules) {
        if (rules && rules.length > 0) {
            for (const rule of rules) {
                /** @type {?} */
                const val = new SignRuleEntity();
                val.id = ProcessDeUtil.GenerateElementId();
                val.conclusionValue = rule.ConclusionValue;
                val.conclusionName = rule.ConclusionName;
                val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition._value : null;
                this.data.push(val);
            }
        }
        else { // 如果模型上没有会签规则，自动带入所有的审批选项
            this.deleteRow();
        }
    }
    //多实例打开完成规则页面
    /**
     * @param {?} rules
     * @return {?}
     */
    set value1(rules) {
        this.editCondition = true;
        if (rules && rules.length > 0) {
            for (const rule of rules) {
                /** @type {?} */
                const val = new SignRuleEntity();
                val.id = BpmnModelHelper.GenerateElementId();
                val.conclusionValue = rule.ConclusionValue;
                // val.conclusionName = rule.conclusionName;
                val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition.Value : null;
                this.data.push(val);
            }
            this.data = this.setName1(this.data);
        }
        else { // 如果模型上没有会签规则，自动带入所有的审批选项
            this.deleteRow1();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.counterSignVariables = this.designerUIState.counterSignVariables || [];
        this.approvalItems = this.designerUIState.approvalItems || [];
    }
    // 重置动作
    /**
     * @return {?}
     */
    deleteRow() {
        this.data = [];
        /** @type {?} */
        const ruleItems = this.designerUIState.approvalItems || [];
        if (ruleItems && ruleItems.length > 0) {
            for (const ruleItem of ruleItems) {
                /** @type {?} */
                const val = new SignRuleEntity();
                if (ruleItem.value === 'Pass') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byProportion';
                    val.conditionValue = '100';
                    val.waitAllVotes = true;
                }
                else if (ruleItem.value === 'Back') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byNumber';
                    val.conditionValue = '1';
                    val.waitAllVotes = true;
                }
                else {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'null';
                    val.conditionValue = '0';
                    val.waitAllVotes = true;
                }
                this.data.push(val);
            }
        }
    }
    // 重置动作
    /**
     * @return {?}
     */
    deleteRow1() {
        this.data = [];
        if (this.approvalItems1 && this.approvalItems1.length > 0) {
            for (const ruleItem of this.approvalItems1) {
                /** @type {?} */
                const val = new SignRuleEntity();
                if (ruleItem.value === 'Forward') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byProportion';
                    val.conditionValue = '100';
                    val.waitAllVotes = true;
                }
                else if (ruleItem.value === 'Backward' || ruleItem.value === 'Abort') {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'byNumber';
                    val.conditionValue = '1';
                    val.waitAllVotes = true;
                }
                else {
                    val.id = ProcessDeUtil.GenerateElementId();
                    val.conclusionValue = ruleItem.value;
                    val.conclusionName = ruleItem.text;
                    val.calculateType = 'null';
                    val.conditionValue = '0';
                    val.waitAllVotes = true;
                }
                this.data.push(val);
            }
        }
    }
    // 给个名字
    /**
     * @param {?} signRuleEntity
     * @return {?}
     */
    setName1(signRuleEntity) {
        if (signRuleEntity && signRuleEntity.length > 0) {
            for (var i = 0; i < signRuleEntity.length; i++) {
                if (signRuleEntity[i].conclusionValue === 'Forward') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.forward');
                }
                else if (signRuleEntity[i].conclusionValue === 'Backward') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.backward');
                }
                else if (signRuleEntity[i].conclusionValue === 'Abort') {
                    signRuleEntity[i].conclusionName = this.localePipe.transform('multiInstanceLoopCharacteristics.completionConditionRulesList.abort');
                }
            }
        }
        return signRuleEntity;
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning(this.localePipe.transform('component.signRule.notEmpty'));
        }
        else {
            /** @type {?} */
            const object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickOK1() {
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning(this.localePipe.transform('component.signRule.notEmpty'));
        }
        else {
            /** @type {?} */
            let counterSignRules = new Array();
            this.data.forEach((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                /** @type {?} */
                let counterSignRule = new CounterSignRule(this.bpmnModel);
                counterSignRule.CalculateType = d.calculateType;
                counterSignRule.ConclusionValue = d.conclusionValue;
                counterSignRule.ConditionValue = d.conditionValue;
                counterSignRule.WaitAllVotes = d.waitAllVotes;
                counterSignRule.CompletionCondition = new Condition(this.bpmnModel);
                counterSignRule.CompletionCondition.Value = d.completionCondition;
                counterSignRules.push(counterSignRule);
            }));
            // let counterSignRules = new CounterSignRule(this.bpmnModel);
            this.submitModal.emit(counterSignRules);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        // this.exprService.clearContext();
        /** @type {?} */
        const context = new Array();
        if (this.editCondition) {
            if (this.designerUIState.multiCounterSignVariables.length > 0) {
                for (const variable of this.designerUIState.multiCounterSignVariables) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (context.length > 0) {
                for (const v of context) {
                    this.exprService.addContext(v);
                }
            }
        }
        else {
            if (this.counterSignVariables && this.counterSignVariables.length > 0) {
                for (const variable of this.counterSignVariables) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (this.designerUIState.subActivityContext.length > 0) {
                for (const variable of this.designerUIState.subActivityContext) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (context.length > 0) {
                for (const v of context) {
                    this.exprService.addContext(v);
                }
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版（会签规则需要上下文变量）
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.exprService.exprEntity.contextEntities = this.exprService.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * 选中审批项
     * @return {?}
     */
    approvalSelect() {
        /** @type {?} */
        const selections = this.apvlItemsGrid.checkeds;
        if (selections && selections.length > 0) {
            for (const selection of selections) {
                /** @type {?} */
                const signRule = new SignRuleEntity();
                signRule.id = ProcessDeUtil.GenerateElementId();
                signRule.conclusionValue = selection.data.value;
                signRule.conclusionName = selection.data.text;
                this.data.push(signRule);
            }
            this.grid.loadData(this.data);
            this.apvlItemDialog.close();
        }
        else {
            this.message.info(this.localePipe.transform('component.signRule.pleaseSelect'));
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    endEdit(e) {
        this.curValue = e.rowData;
        // 自定义会签规则和预置会签规则互斥
        if (this.preValue.completionCondition !== this.curValue.completionCondition &&
            !(this.isEmpty(this.preValue.completionCondition) && this.isEmpty(this.curValue.completionCondition))) {
            this.data[e.rowIndex].calculateType = 'null',
                this.data[e.rowIndex].conditionValue = '0';
            this.data[e.rowIndex].waitAllVotes = false;
        }
        else if (this.preValue.calculateType !== this.curValue.calculateType ||
            this.preValue.conditionValue !== this.curValue.conditionValue ||
            this.preValue.waitAllVotes !== this.curValue.waitAllVotes) {
            this.data[e.rowIndex].completionCondition = null;
        }
        if (e.column.field === 'conditionValue' && this.data[e.rowIndex].calculateType === 'byProportion'
            && Number.parseInt(e.value) > 100) {
            this.message.info(this.localePipe.transform('component.signRule.maxConditionValue'));
            this.data[e.rowIndex].conditionValue = '100';
        }
        else if (e.column.field === 'conditionValue' && Number.parseInt(e.value) < 0) {
            this.message.info(this.localePipe.transform('component.signRule.minConditionValue'));
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if ((e.column.field === 'calculateType' || e.column.field === 'conditionValue') && (this.data[e.rowIndex].calculateType === 'oneVote' ||
            this.data[e.rowIndex].calculateType === 'fullVote') && Number.parseInt(this.data[e.rowIndex].conditionValue) !== 0) {
            this.message.info(this.localePipe.transform('component.signRule.noConditional'));
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if (e.column.field === 'calculateType' && this.data[e.rowIndex].calculateType === 'byProportion' &&
            Number.parseInt(this.data[e.rowIndex].conditionValue) > 100) {
            this.message.info(this.localePipe.transform('component.signRule.maxConditionValue'));
            this.data[e.rowIndex].conditionValue = '100';
        }
    }
    /**
     * @param {?} s
     * @return {?}
     */
    isEmpty(s) {
        if (!s || s.length == 0) {
            return true;
        }
        else {
            return false;
        }
    }
}
SignRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sign-rule',
                template: "  <div class=\"f-page\">\r\n    <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n        <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n          [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n          [multiSelect]=\"false\" [afterEdit]='afterEdit' (endEdit)=\"endEdit($event)\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </div>\r\n  </div>\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow()\">{{'component.signRule.deleteRow' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #iconSelectFooter1>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow1()\">{{'component.signRule.deleteRow' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK1()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<farris-dialog #approvalItemDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.signRule.approvalOptions'| wfLocale}}\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n      <farris-datagrid #approvalTable [columns]=\"approvalCols\" [data]=\"approvalItems\" [idField]=\"'value'\"\r\n        [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\"\r\n        [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n      </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"approvalItemDialog.close()\">{{'component.signRule.clickCancel' | wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3 mx-2\" (click)=\"approvalSelect()\">{{'component.signRule.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SignRuleComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MessagerService },
    { type: ExpressionService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
SignRuleComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    value1: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    modalFooter1: [{ type: ViewChild, args: ['iconSelectFooter1',] }],
    apvlItemsGrid: [{ type: ViewChild, args: ['approvalTable',] }],
    apvlItemDialog: [{ type: ViewChild, args: ['approvalItemDialog',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    SignRuleComponent.prototype.cls;
    /** @type {?} */
    SignRuleComponent.prototype.closeModal;
    /** @type {?} */
    SignRuleComponent.prototype.submitModal;
    /** @type {?} */
    SignRuleComponent.prototype.editorParams;
    /** @type {?} */
    SignRuleComponent.prototype.modalFooter;
    /** @type {?} */
    SignRuleComponent.prototype.modalFooter1;
    /** @type {?} */
    SignRuleComponent.prototype.apvlItemsGrid;
    /** @type {?} */
    SignRuleComponent.prototype.apvlItemDialog;
    /** @type {?} */
    SignRuleComponent.prototype.grid;
    /** @type {?} */
    SignRuleComponent.prototype.modalConfig;
    /** @type {?} */
    SignRuleComponent.prototype.editCondition;
    /** @type {?} */
    SignRuleComponent.prototype.data;
    /** @type {?} */
    SignRuleComponent.prototype.calculationMethods;
    /** @type {?} */
    SignRuleComponent.prototype.counterSignVariables;
    /** @type {?} */
    SignRuleComponent.prototype.bpmnModel;
    /**
     * **** 审批项帮助参数 ********************************************************
     * @type {?}
     */
    SignRuleComponent.prototype.approvalCols;
    /** @type {?} */
    SignRuleComponent.prototype.approvalItems;
    /** @type {?} */
    SignRuleComponent.prototype.approvalItems1;
    /**
     * ********************************
     * @type {?}
     */
    SignRuleComponent.prototype.columns;
    /** @type {?} */
    SignRuleComponent.prototype.preValue;
    /** @type {?} */
    SignRuleComponent.prototype.curValue;
    /**
     * 结束编辑前事件
     * @type {?}
     */
    SignRuleComponent.prototype.afterEdit;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.exprService;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    SignRuleComponent.prototype.localePipe;
}
export class SignRuleConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        // 会签规则只要启用就有默认值，所以始终置为'已设置';
        return this.localePipe.transform("component.signRule.set");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    SignRuleConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,