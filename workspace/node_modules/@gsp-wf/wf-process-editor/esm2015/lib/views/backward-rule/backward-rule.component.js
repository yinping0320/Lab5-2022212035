/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { MessagerService } from '@farris/ui-messager';
import { of } from 'rxjs';
import { LookupGridComponent } from '@farris/ui-lookup';
import { ResubmitEffect } from './backward-rule.entity';
import { NotifyService } from '@farris/ui-notify';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class BackwardRuleComponent {
    /**
     * @param {?} uiState
     * @param {?} message
     * @param {?} notify
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uiState, message, notify, cdr, localeId, resources, localePipe) {
        this.uiState = uiState;
        this.message = message;
        this.notify = notify;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.nodeType = 'UserActivity';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: this.localePipe.transform('component.backwardRule.backwardRule'),
            width: 760,
            height: 505,
            showButtons: true
        };
        this.displayTestText = [];
        this.fullActs = [];
        this.listItems = [
            { Id: 'InitialActityId', Name: this.localePipe.transform('component.backwardRule.initialActityId') },
            { Id: 'PrecursorActivityId', Name: this.localePipe.transform('component.backwardRule.precursorActivityId') },
            { Id: 'Empty', Name: this.localePipe.transform('component.backwardRule.empty') }
        ];
        this.items = [];
        this.itemsTemp = [];
        this.itemsBackScope = [];
        this.itemsBackScopeTemp = [];
        this.columns = [
            { title: this.localePipe.transform('component.backwardRule.name'), field: 'Name', width: 100, searchField: 'Name' },
            { title: this.localePipe.transform('component.backwardRule.id'), field: 'Id', width: 100, searchField: 'Id' },
        ];
        this.selectAbleChecked = false;
        this.waitReturnChecked = false;
        this.resubmitEffectOptions = [
            { value: ResubmitEffect.sequence, text: this.localePipe.transform('component.backwardRule.sequence') },
            { value: ResubmitEffect.backToMe, text: this.localePipe.transform('component.backwardRule.backToMe') },
            { value: ResubmitEffect.backToCurrentNode, text: this.localePipe.transform('component.backwardRule.backToCurrentNode') },
        ];
        this.dynamicBackWardRuleAbleChecked = false;
        this.targetRef = this.listItems[0].Id;
        this.selectTargetList = new Array();
        this.popover = '1.顺序流转:按照流转线顺序进行流转; 2.返回我:完成策略为抢占：只给驳回人创建任务,完成策略为会签：驳回人与未审批人收到新任务，已审批人员自动审批通过; 3.返回本节点:实际效果受“再次进入节点时，办理人是否是节点已办人员影响”选项的影响';
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            this.targetRef = arg.Id;
            this.displayText = arg.Name;
            if (arg.Id === 'Empty' && !this.selectAbleChecked) {
                this.selectAbleChecked = true;
                this.notify.info(this.localePipe.transform('component.backwardRule.dictPicked'));
            }
            return of({ closeDialog: true });
        });
        this.dictPickedTest = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            this.fullActs = arg;
            return of({ closeDialog: true });
        });
        this.beforeOpen = (/**
         * @return {?}
         */
        () => {
            this.items = this.deepCloneBackDefine(this.itemsTemp);
            return of(true);
        });
        this.beforeOpenTest = (/**
         * @return {?}
         */
        () => {
            this.itemsBackScope = this.deepCloneBackDefine(this.itemsBackScopeTemp);
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.listItems = this.listItems.concat(this.uiState.userActList);
        this.items = this.listItems;
        this.itemsBackScope = this.listItems;
        this.total = this.listItems.length;
        this.totalBackScope = this.listItems.length;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.selectAbleChecked = data.SelectTargetAble;
            if (!data.SelectTargetAble) {
                this.selectTargetList = new Array();
            }
            else {
                this.selectTargetList = data.SelectTargetList;
            }
            this.waitReturnChecked = data.WaitReturn;
            this.dynamicBackWardRuleAbleChecked = data.DynamicBackWardRuleAble;
            this.resubmitEffect = data.ResubmitEffect;
            if (!data.TargetRef) {
                this.targetRef = 'Empty';
            }
            else {
                this.targetRef = data.TargetRef;
            }
            if (this.resubmitEffect === null) {
                this.resubmitEffect = ResubmitEffect.sequence;
            }
            /** @type {?} */
            const strs = data.SelectTargetList;
            if (strs && strs.length > 0) {
                for (const str of strs) {
                    if (this.listItems.filter((/**
                     * @param {?} act
                     * @return {?}
                     */
                    act => act.Id === str))[0]) {
                        /** @type {?} */
                        const name = this.listItems.filter((/**
                         * @param {?} act
                         * @return {?}
                         */
                        act => act.Id === str))[0].Name;
                        this.displayTestText.push(name);
                    }
                    // const acti = { Id: str, Name: name };
                }
            }
            /** @type {?} */
            const act = this.listItems.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.Id === this.targetRef));
            if (act) {
                this.displayText = act.Name;
            }
            else {
                this.displayText = '';
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.message.warning(this.localePipe.transform('component.backwardRule.reEdit'));
                }), 500);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nodeType = this.editorParams.nodeType;
        if (this.nodeType !== 'UserActivity') {
            this.listItems = this.listItems.filter((/**
             * @param {?} i
             * @return {?}
             */
            i => i.Id !== 'Empty'));
            this.items = this.listItems;
            this.total = this.listItems.length;
        }
        this.itemsBackScope = this.listItems.filter((/**
         * @param {?} i
         * @return {?}
         */
        i => i.Id !== 'Empty' && i.Id !== 'PrecursorActivityId'));
        this.totalBackScope = this.itemsBackScope.length;
        this.itemsTemp = this.deepCloneDefine(this.items);
        this.itemsBackScopeTemp = this.deepCloneDefine(this.itemsBackScope);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    selectAbleClick() {
        if (this.uiState.propertyData.ClrTypeID === 'wf.UserActivity'
            && this.uiState.propertyData.CompleteStrategy !== this.uiState.completeIterator[0].key
            && this.selectAbleChecked === true) {
            this.message.info(this.localePipe.transform('component.backwardRule.selectAbleClick'), (/**
             * @return {?}
             */
            () => {
                this.selectAbleChecked = false;
            }));
        }
        if (this.selectAbleChecked == false) {
            this.displayTestText = [];
        }
    }
    /**
     * @return {?}
     */
    waitReturnClick() {
        this.waitReturnChecked = !this.waitReturnChecked;
    }
    /**
     * @return {?}
     */
    dynamicBackWardRuleAbleClick() {
        this.dynamicBackWardRuleAbleChecked = !this.dynamicBackWardRuleAbleChecked;
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const list = [];
        // 重新打开设置界面，没有进行节点配置的情况（DestinationActivities）
        if (this.fullActs.length === 0 && this.displayTestText.length > 0) {
            for (const act of this.displayTestText) {
                for (const allAct of this.listItems) {
                    if (act === allAct.Name) {
                        list.push(allAct.Id);
                    }
                }
            }
        }
        else if (this.fullActs && this.fullActs.length > 0) {
            // 附加节点的id传给模型上的DestinationActivities
            this.fullActs.forEach((/**
             * @param {?} act
             * @return {?}
             */
            act => {
                if (this.uiState.userActList.some((/**
                 * @param {?} u
                 * @return {?}
                 */
                u => u.Id == act.Id))) {
                    list.push(act.Id);
                }
            }));
        }
        /** @type {?} */
        const backWardRule = {
            TargetRef: this.getTargetRef(),
            SelectTargetAble: this.selectAbleChecked,
            WaitReturn: this.waitReturnChecked,
            DynamicBackWardRuleAble: this.dynamicBackWardRuleAbleChecked,
            SelectTargetList: list,
            ResubmitEffect: this.resubmitEffect
        };
        /** @type {?} */
        const object = { value: backWardRule, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pagerChanged(arg) {
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.load(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pagerChangedBackScope(arg) {
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.loadBackScope(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pageSizeChange(arg) {
        console.log(arg);
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.load(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    pageSizeChangeBackScope(arg) {
        console.log(arg);
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        const search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.loadBackScope(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    search(arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        const search = arg.search;
        this.load(search);
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    searchBackScope(arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        const search = arg.search;
        this.loadBackScope(search);
    }
    /**
     * @param {?=} search
     * @return {?}
     */
    load(search) {
        /** @type {?} */
        const start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        const end = start + this.pageInfo.pageSize;
        /** @type {?} */
        let items = [];
        if (search) {
            if (search.field === '*') {
                items = this.listItems.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1));
            }
            else {
                items = this.listItems.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f[search.field].indexOf(search.value) > -1));
            }
        }
        else {
            items = this.listItems;
        }
        this.total = items.length;
        this.items = items;
        this.hlp.componentRef.instance.loadData({
            data: this.items
        });
    }
    /**
     * @param {?=} search
     * @return {?}
     */
    loadBackScope(search) {
        /** @type {?} */
        const start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        const end = start + this.pageInfo.pageSize;
        /** @type {?} */
        let itemsBackScope = [];
        if (search) {
            if (search.field === '*') {
                itemsBackScope = this.listItems.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1));
            }
            else {
                itemsBackScope = this.listItems.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f[search.field].indexOf(search.value) > -1));
            }
        }
        else {
            itemsBackScope = this.listItems;
        }
        this.totalBackScope = itemsBackScope.length;
        this.itemsBackScope = itemsBackScope;
        this.hlpScope.componentRef.instance.loadData({
            data: this.itemsBackScope
        });
    }
    /**
     * @private
     * @return {?}
     */
    getTargetRef() {
        if (this.targetRef === 'Empty') {
            return '';
        }
        else {
            return this.targetRef;
        }
    }
    //为了打开后仍然显示最初数据，而不是过滤后的数据
    /**
     * @param {?} target
     * @return {?}
     */
    deepCloneDefine(target) {
        /** @type {?} */
        let result = [];
        target.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => result.push(JSON.stringify(t))));
        return result;
    }
    /**
     * @param {?} target
     * @return {?}
     */
    deepCloneBackDefine(target) {
        /** @type {?} */
        let result = [];
        target.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => result.push(JSON.parse(t))));
        return result;
    }
}
BackwardRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'procDesigner-backward-rule',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.backwardRule.rejectedTo:' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"padding-right: 30px\">\r\n                  <farris-lookup-grid #hlp [items]=\"items\" [columns]=\"columns\" [resizable]=\"true\" [singleSelect]=\"true\"\r\n                    [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"displayText\" [valueField]=\"'Id'\"  [beforeOpen] = \"beforeOpen\"\r\n                    [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\" [pageSize]=\"pageInfo.pageSize\"\r\n                    [pageList]=\"pageInfo.pageList\" [total]=\"total\" title=\"{{'component.backwardRule.title' | wfLocale}}\" [displayType]=\"'List'\"\r\n                    [dictPicked]=\"dictPicked\" [remoteSearch]='false' (pagerChanged)=\"pagerChanged($event)\"\r\n                    (search)=\"search($event)\" [enableClear]=\"false\" (pageSizeChange)=\"pageSizeChange($event)\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"nodeType==='UserActivity'\">\r\n            <div class=\"col-12 farris-group-auto my-3\">\r\n              <div class=\"farris-group-wrap\" style=\"padding-left: 2.75rem!important\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" name=\"selectAble\" type=\"checkbox\" id=\"selectAble\"\r\n                        [(ngModel)]=\"selectAbleChecked\" (change)=\"selectAbleClick()\" />\r\n                      <label class=\"custom-control-label\" for=\"selectAble\">{{'component.backwardRule.dynamicSelection' | wfLocale}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3 pr-5\" *ngIf=\"selectAbleChecked\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.backwardRule.backScope' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"padding-right: 30px;\">\r\n                    <farris-lookup-grid #hlpScope [items]=\"itemsBackScope\" [columns]=\"columns\" [disabled]=\"!(selectAbleChecked)\"  [beforeOpen] = \"beforeOpenTest\"\r\n                      [resizable]=\"true\" [singleSelect]=\"false\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"displayTestText\" [valueField]=\"'Id'\"\r\n                      [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\" [pageSize]=\"pageInfo.pageSize\"\r\n                      [pageList]=\"pageInfo.pageList\" [total]=\"totalBackScope\" title=\"{{'component.backwardRule.title' | wfLocale}}\" [displayType]=\"'List'\"\r\n                      [dictPicked]=\"dictPickedTest\" [remoteSearch]='false' (pagerChanged)=\"pagerChangedBackScope($event)\"\r\n                      placeholder=\"{{'component.backwardRule.defaultPrompt' | wfLocale}}\" [enableToSelect]=\"false\"\r\n                      (search)=\"searchBackScope($event)\" [enableClear]=\"false\" (pageSizeChange)=\"pageSizeChangeBackScope($event)\">\r\n                    </farris-lookup-grid>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'component.backwardRule.resubmitEffectOptions' | wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"padding-right: 30px\">\r\n                    <farris-combo-list [data]=\"resubmitEffectOptions\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                      [idField]=\"'value'\" [(ngModel)]=\"resubmitEffect\" style=\"flex: 1;\" [enableClear]=\"false\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\"></span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"padding-right: 30px;border-radius:15px\">\r\n                    <div class=\"page-friendly-reminder\" style=\"background:#ECF4FF;padding: 0.5rem!important;border-radius:6px\">\r\n                      <div class=\"reminder-message\">\r\n                        <span class=\"reminder-title\">\r\n                          <span class=\"f-icon f-icon-info\">\r\n                          </span>\r\n                          <span class=\"reminder-name\" style=\"padding-left: 0.25rem\">\r\n                          </span>\r\n                        </span>\r\n                        <span class=\"message\"><br/>{{'component.backwardRule.popover1' | wfLocale}}<br/>\r\n                          {{'component.backwardRule.popover2' | wfLocale}}<br/>\r\n                          {{'component.backwardRule.popover3' | wfLocale}}<br/>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 farris-group-auto my-3\">\r\n              <div class=\"farris-group-wrap\" style=\"padding-left: 2.75rem!important\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" name=\"dynamicBackWardRuleAble\" type=\"checkbox\"\r\n                        id=\"dynamicBackWardRuleAble\" [checked]=\"dynamicBackWardRuleAbleChecked\"\r\n                        (change)=\"dynamicBackWardRuleAbleClick()\" />\r\n                      <label class=\"custom-control-label\" for=\"dynamicBackWardRuleAble\">{{'component.backwardRule.allowModification' | wfLocale}}</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">{{'component.backwardRule.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.backwardRule.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".item-header{padding:1rem}.item{padding:.5rem 5rem}"]
            }] }
];
/** @nocollapse */
BackwardRuleComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: NotifyService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
BackwardRuleComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }],
    nodeType: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    hlp: [{ type: ViewChild, args: ['hlp',] }],
    hlpScope: [{ type: ViewChild, args: ['hlpScope',] }]
};
if (false) {
    /** @type {?} */
    BackwardRuleComponent.prototype.cls;
    /** @type {?} */
    BackwardRuleComponent.prototype.editorParams;
    /** @type {?} */
    BackwardRuleComponent.prototype.nodeType;
    /** @type {?} */
    BackwardRuleComponent.prototype.closeModal;
    /** @type {?} */
    BackwardRuleComponent.prototype.submitModal;
    /** @type {?} */
    BackwardRuleComponent.prototype.modalFooter;
    /** @type {?} */
    BackwardRuleComponent.prototype.hlp;
    /** @type {?} */
    BackwardRuleComponent.prototype.hlpScope;
    /** @type {?} */
    BackwardRuleComponent.prototype.modalConfig;
    /** @type {?} */
    BackwardRuleComponent.prototype.displayText;
    /** @type {?} */
    BackwardRuleComponent.prototype.displayTestText;
    /** @type {?} */
    BackwardRuleComponent.prototype.fullActs;
    /** @type {?} */
    BackwardRuleComponent.prototype.listItems;
    /** @type {?} */
    BackwardRuleComponent.prototype.items;
    /** @type {?} */
    BackwardRuleComponent.prototype.itemsTemp;
    /** @type {?} */
    BackwardRuleComponent.prototype.itemsBackScope;
    /** @type {?} */
    BackwardRuleComponent.prototype.itemsBackScopeTemp;
    /** @type {?} */
    BackwardRuleComponent.prototype.columns;
    /** @type {?} */
    BackwardRuleComponent.prototype.selectAbleChecked;
    /** @type {?} */
    BackwardRuleComponent.prototype.waitReturnChecked;
    /** @type {?} */
    BackwardRuleComponent.prototype.resubmitEffect;
    /** @type {?} */
    BackwardRuleComponent.prototype.resubmitEffectOptions;
    /** @type {?} */
    BackwardRuleComponent.prototype.dynamicBackWardRuleAbleChecked;
    /** @type {?} */
    BackwardRuleComponent.prototype.targetRef;
    /** @type {?} */
    BackwardRuleComponent.prototype.selectTargetList;
    /** @type {?} */
    BackwardRuleComponent.prototype.popover;
    /** @type {?} */
    BackwardRuleComponent.prototype.pageInfo;
    /** @type {?} */
    BackwardRuleComponent.prototype.total;
    /** @type {?} */
    BackwardRuleComponent.prototype.totalBackScope;
    /** @type {?} */
    BackwardRuleComponent.prototype.dictPicked;
    /** @type {?} */
    BackwardRuleComponent.prototype.dictPickedTest;
    /** @type {?} */
    BackwardRuleComponent.prototype.beforeOpen;
    /** @type {?} */
    BackwardRuleComponent.prototype.beforeOpenTest;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    BackwardRuleComponent.prototype.localePipe;
}
export class BackwardRuleConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return this.localePipe.transform('component.backwardRule.set');
        }
        return this.localePipe.transform('component.backwardRule.notSet');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    BackwardRuleConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,