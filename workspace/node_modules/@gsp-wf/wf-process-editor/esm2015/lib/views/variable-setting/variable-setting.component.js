/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, Injector, ComponentFactoryResolver, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ProcessVariablesComponent } from '../process-variables/process-variables.component';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { VariableSetting } from './variable-setting';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ComponentEditComponent } from './views/component-edit/component-edit.component';
import { of } from 'rxjs';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class VariableSettingComponent {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} uistate
     * @param {?} expr
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(resolver, injector, modalService, message, uistate, expr, cdr, localeId, resources, localePipe) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.value = new Array();
        this.editorParams = {};
        this.columns = [];
        this.tags = [
            { value: 'constant', text: this.localePipe.transform("component.variableSetting.constant") },
            { value: 'expression', text: this.localePipe.transform("component.variableSetting.expression") },
            { value: 'component', text: this.localePipe.transform("component.variableSetting.component") }
        ];
        this.opportunities = [
            { value: 'ACTIVITY_STARTED', text: this.localePipe.transform("component.variableSetting.ACTIVITY_STARTED") },
            { value: 'ACTIVITY_COMPLETED', text: this.localePipe.transform("component.variableSetting.ACTIVITY_COMPLETED") }
        ];
        this.modalConfig = {
            title: this.localePipe.transform("component.variableSetting.varAssign"),
            width: 780,
            height: 460,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            const column = param.column;
            if (column.field === 'valueText') {
                if (((/** @type {?} */ (rowData))).tag === this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            {
                field: 'variableCode', width: 90, title: this.localePipe.transform("component.variableSetting.varNumber"), sortable: true,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'variableName', width: 90, title: this.localePipe.transform("component.variableSetting.varName"), sortable: true,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'tag', width: 60, title: this.localePipe.transform("component.variableSetting.valueType"), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto', showClear: false,
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.value = this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                if (v.variableCode === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'executionTime', width: 80, title: this.localePipe.transform("component.variableSetting.executionTime"), sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.opportunities }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.opportunities, idField: 'value', panelHeight: 'auto', showClear: false,
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ],
            },
            {
                field: 'valueText', width: 150, title: this.localePipe.transform("component.variableSetting.valueText"), showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }
        ];
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ProcessVariablesComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.variableSetting = true;
        compRef.instance.value = this.uistate.ProcessVariables;
        compRef.instance.selectedValue = this.value;
        compRef.instance.variableSetEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            for (const v of re) {
                /** @type {?} */
                const variableSet = new VariableSetting();
                variableSet.variableCode = v.data.name;
                variableSet.variableName = v.data.documentation;
                variableSet.tag = v.data.tag || this.tags[0].value;
                variableSet.executionTime = v.data.executionTime || this.opportunities[0].value;
                if (this.value.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.variableCode === variableSet.variableCode)) === -1) {
                    this.value = this.value.concat([variableSet]);
                }
            }
            dialog.close();
        }));
        compRef.instance.closeModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.variableSetting.processVariables"),
            width: 660,
            height: 460,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        /** @type {?} */
        const selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info(this.localePipe.transform("component.variableSetting.notSelectedVar"));
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v.variableCode !== selected.data.variableCode));
    }
    /**
     * @return {?}
     */
    clickOK() {
        // 先结束编辑状态
        this.grid.endCellEdit();
        // 等待编辑状态结束后再进行校验
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.validator()) {
                /** @type {?} */
                const object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }), 300);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    validator() {
        for (const item of this.value) {
            if (!item.value) {
                this.message.warning(this.localePipe.transform("component.variableSetting.valueCannotEmpty"));
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    endEdit(data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    valueEdit(e) {
        /** @type {?} */
        const rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editExpression(e) {
        // this.expr.clearContext();
        /** @type {?} */
        const data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.uistate.addContext(context);
        if (this.uistate.subActivityContext.length > 0) {
            for (const variable of this.uistate.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            e.form.bindingData.value = re;
            e.form.value.value = re;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editComponent(e) {
        /** @type {?} */
        const data = e.rowData;
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            e.form.bindingData.value = re.Id;
            e.form.value.value = re.Id;
            e.form.value.component = re;
            e.form.bindingData.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.variableSetting.component"),
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
}
VariableSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-variable-setting',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">{{'component.variableSetting.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.variableSetting.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'variableCode'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"\r\n        [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.variableSetting.lineNumber' | wfLocale}}\" [lineNumberWidth]=\"50\" [striped]=\"true\"\r\n        (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.variableSetting.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.variableSetting.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #cell let-ctx>\r\n  <span (click)=\"valueEdit(ctx)\" class=\"link\">\r\n    {{ ctx.rowData.value ? ('component.variableSetting.set' | wfLocale) : ('component.variableSetting.notSet' | wfLocale) }}\r\n  </span>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".link{color:#1206bb;font-size:14px}.link:hover{color:#5d478b;font-size:14px}"]
            }] }
];
/** @nocollapse */
VariableSettingComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
VariableSettingComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    cell: [{ type: ViewChild, args: ['cell',] }]
};
if (false) {
    /** @type {?} */
    VariableSettingComponent.prototype.cls;
    /** @type {?} */
    VariableSettingComponent.prototype.closeModal;
    /** @type {?} */
    VariableSettingComponent.prototype.submitModal;
    /** @type {?} */
    VariableSettingComponent.prototype.value;
    /** @type {?} */
    VariableSettingComponent.prototype.editorParams;
    /** @type {?} */
    VariableSettingComponent.prototype.modalFooter;
    /** @type {?} */
    VariableSettingComponent.prototype.grid;
    /** @type {?} */
    VariableSettingComponent.prototype.cell;
    /** @type {?} */
    VariableSettingComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.tags;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.opportunities;
    /** @type {?} */
    VariableSettingComponent.prototype.modalConfig;
    /** @type {?} */
    VariableSettingComponent.prototype.beforeEdit;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    VariableSettingComponent.prototype.localePipe;
}
export class VariableSettingConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.variableSetting.set");
        }
        else {
            return this.localePipe.transform("component.variableSetting.notSet");
            ;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    VariableSettingConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,