/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Injector, Input, ViewChild, ElementRef, HostBinding, NgZone, TemplateRef, EventEmitter, Output, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { SessionService } from '@ecp-caf/caf-common';
import { BsModalService } from '@farris/ui-modal';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { DatagridComponent } from '@farris/ui-datagrid';
import { of } from 'rxjs';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { LookupGridComponent, ServerSideToken } from '@farris/ui-lookup';
import { ParameterFetchValueMode } from '@gsp-cmp/wscmp-models';
import { ComponentEditLookUpService } from './component-edit-lookup.service';
import { ComponentEditService } from './component-edit.service';
import { ComponentEntity } from './component.entity';
import { ProcessDeUtil } from '../../../../domain/process-de-util';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class ComponentEditComponent {
    /**
     * @param {?} formBuilder
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} sessionSrc
     * @param {?} modalService
     * @param {?} componentService
     * @param {?} ngZone
     * @param {?} service
     * @param {?} util
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(formBuilder, designerState, expr, resolver, injector, sessionSrc, modalService, componentService, ngZone, service, util, message, cdr, localeId, resources, localePipe) {
        this.formBuilder = formBuilder;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.ngZone = ngZone;
        this.service = service;
        this.util = util;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.showClearButton = false;
        this._component = new ComponentEntity();
        this.columns = [
            { field: 'Name', width: 100, title: this.localePipe.transform("component.variableSetting.parameterName") },
            {
                field: 'Value', width: 100, title: this.localePipe.transform("component.variableSetting.parameterValue"),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.helpFields = {
            idField: '',
            valueField: '',
            textField: ''
        };
        this.dataUri = '/api/runtime/wf/v1.0/dtProcDefs/getHelpData';
        this.helpCols = [];
        this.displayType = 'List';
        this.title = '';
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            switch (rowData.fetchValueMode) {
                case ParameterFetchValueMode.express:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.none:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.const:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.enum:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.help:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                this.cell = e;
                                this.helpId = ((/** @type {?} */ (rowData.fetchValueSetting))).helpId;
                                this.su = ((/** @type {?} */ (rowData.fetchValueSetting))).serviceUnit;
                                this.getHelpInfo().subscribe((/**
                                 * @param {?} re
                                 * @return {?}
                                 */
                                re => {
                                    console.log(re);
                                    /** @type {?} */
                                    const meta = re;
                                    /** @type {?} */
                                    const help = (/** @type {?} */ (JSON.parse(meta.content)));
                                    this.helpCols = help.dataSource.columns;
                                    this.displayType = help.displayType;
                                    this.helpFields = {
                                        idField: help.idField,
                                        valueField: help.valueField,
                                        textField: help.textField
                                    };
                                    this.lookup.onClear();
                                    this.lookup.showDialog();
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                err => {
                                    this.message.error(this.localePipe.transform("component.variableSetting.metadataNotExist"));
                                }));
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
            }
            return of(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of(true);
        });
        this.dictPicking = (/**
         * @return {?}
         */
        () => {
            return of({
                showDialog: true, data: {
                    helpId: this.helpId
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            if (this.cell) {
                console.log(rowData);
                this.cell.formControl.setValue(this.util.getValue(rowData, this.helpFields.valueField));
                this.cell.instance.cd.detectChanges();
                return of(true);
            }
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set component(cmp) {
        if (cmp && cmp.MethodCode) {
            this.service.getHelpMetaData(cmp.MetadataId, '').subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                /** @type {?} */
                const c = JSON.parse(re.content);
                /** @type {?} */
                const operation = c.operations.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.code === cmp.MethodCode));
                if (operation) {
                    cmp.ActualParameters = cmp.ActualParameters.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        /** @type {?} */
                        const p = operation.parameters.find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        i => i.code === a.Name));
                        if (p) {
                            return Object.assign({}, a, { fetchValueMode: p.fetchValueMode, fetchValueSetting: p.fetchValueSetting });
                        }
                        else {
                            throw new Error(this.localePipe.transform("component.variableSetting.inconsistentParameters"));
                        }
                    }));
                    this._component = cmp;
                }
                else {
                    throw new Error(this.localePipe.transform("component.variableSetting.methodNotExist"));
                }
            }));
        }
        else {
            this._component = new ComponentEntity();
        }
    }
    /**
     * @return {?}
     */
    get component() {
        return this._component;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        if (this.validator()) {
            this.submitEmitter.emit(this.component);
        }
        else {
            this.message.info(this.localePipe.transform("component.variableSetting.methodnotSelected"));
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.component.MethodCode || !this.component.MetadataId) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    clear() {
        this.component = new ComponentEntity();
    }
    /**
     * @return {?}
     */
    selectComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            try {
                /** @type {?} */
                const meta = $event.metadata;
                this.openComponentSelectorNew(meta.id, this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error(this.localePipe.transform("component.variableSetting.errorObtainComponent") + $event);
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.variableSetting.componentSelection"),
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.component.Name = result.name;
                    this.component.MetadataId = result.id;
                    this.component.MethodCode = result.operations[0].code;
                    // this.component.methodName = result.operations[0].name;
                    this.component.ActualParameters = [];
                    if (result.operations[0].parameters && result.operations[0].parameters.length > 0) {
                        this.component.ActualParameters = result.operations[0].parameters
                            .map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        (p) => ({
                            Name: p.code, Value: '', Tag: p.fetchValueMode.indexOf('express,none') > -1 ? 'expression' : 'constant',
                            fetchValueMode: p.fetchValueMode,
                            fetchValueSetting: p.fetchValueSetting
                        })));
                    }
                }
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            e.formControl.setValue(d);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getHelpInfo() {
        return this.service.getHelpMetaData(this.helpId, this.su);
    }
}
ComponentEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-component-edit',
                template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\" style=\"background:#FFF;\">\r\n  <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n    <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n      <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n        <div class=\"farris-group-wrap mx-3\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">{{ 'component.variableSetting.parameterName' | wfLocale }}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-2\">\r\n              <input type=\"text\" class=\"k-textbox form-control\" name=\"name\" [(ngModel)]=\"component.Name\" />\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"farris-form-controls-inline farris-form-auto\">\r\n        <div class=\"farris-group-wrap mx-3\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">{{ 'component.variableSetting.componentSelection' | wfLocale }}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-2\">\r\n              <div #inputGroup class=\"input-group\">\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"component.MethodCode\" name=\"methodCode\"\r\n                  [readOnly]=\"true\" />\r\n                <div class=\"input-group-append\">\r\n                  <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                    (click)=\"clear()\">\r\n                    <i class=\"f-icon modal_close\"></i>\r\n                  </span>\r\n                  <span class=\"input-group-text\" (click)=\"selectComponent()\" style=\"background: #FFF;\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <farris-tabs class=\"f-utils-fill\" #params [value]=\"'params'\" [contentFill]=\"true\">\r\n    <farris-tab title=\"{{'component.variableSetting.parameterList' | wfLocale}}\" [id]=\"'params'\">\r\n      <ng-template #content>\r\n        <div class=\"f-utils-fill-flex-column h-100\">\r\n          <farris-datagrid #grid [data]=\"component.ActualParameters\" [columns]=\"columns\" [idField]=\"'Name'\" [fit]=\"true\"\r\n            [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [striped]=\"true\"\r\n            [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" [beforeEdit]=\"beforeEdit\"></farris-datagrid>\r\n        </div>\r\n      </ng-template>\r\n    </farris-tab>\r\n  </farris-tabs>\r\n</div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" #lookup [(ngModel)]=\"value\" [editable]=\"false\" [columns]=\"helpCols\"\r\n  [singleSelect]=\"true\" title=\"title\" [displayType]=\"displayType\" [uri]=\"dataUri\"\r\n  [idField]=\"helpFields.idField\" [pagination]=\"true\" [valueField]=\"helpFields.valueField\"\r\n  [textField]=\"helpFields.textField\" [dictPicking]=\"dictPicking\" [dictPicked]=\"dictPicked\">\r\n</farris-lookup-grid>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.variableSetting.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.variableSetting.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    ComponentEditService,
                    { provide: ServerSideToken, useClass: ComponentEditLookUpService },
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ComponentEditComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: SessionService },
    { type: BsModalService },
    { type: CommonComponentUiRTService },
    { type: NgZone },
    { type: ComponentEditService },
    { type: ProcessDeUtil },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ComponentEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
    footer: [{ type: ViewChild, args: ['footer',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    component: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ComponentEditComponent.prototype.cls;
    /** @type {?} */
    ComponentEditComponent.prototype.grid;
    /** @type {?} */
    ComponentEditComponent.prototype.lookup;
    /** @type {?} */
    ComponentEditComponent.prototype.footer;
    /** @type {?} */
    ComponentEditComponent.prototype.closeEmitter;
    /** @type {?} */
    ComponentEditComponent.prototype.submitEmitter;
    /** @type {?} */
    ComponentEditComponent.prototype.inputGroup;
    /** @type {?} */
    ComponentEditComponent.prototype.showClearButton;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype._component;
    /** @type {?} */
    ComponentEditComponent.prototype.curParameter;
    /** @type {?} */
    ComponentEditComponent.prototype.columns;
    /** @type {?} */
    ComponentEditComponent.prototype.helpFields;
    /** @type {?} */
    ComponentEditComponent.prototype.dataUri;
    /** @type {?} */
    ComponentEditComponent.prototype.helpId;
    /** @type {?} */
    ComponentEditComponent.prototype.su;
    /** @type {?} */
    ComponentEditComponent.prototype.helpCols;
    /** @type {?} */
    ComponentEditComponent.prototype.displayType;
    /** @type {?} */
    ComponentEditComponent.prototype.title;
    /** @type {?} */
    ComponentEditComponent.prototype.value;
    /** @type {?} */
    ComponentEditComponent.prototype.cell;
    /** @type {?} */
    ComponentEditComponent.prototype.beforeEdit;
    /** @type {?} */
    ComponentEditComponent.prototype.afterEdit;
    /** @type {?} */
    ComponentEditComponent.prototype.dictPicking;
    /** @type {?} */
    ComponentEditComponent.prototype.dictPicked;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.sessionSrc;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.componentService;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ComponentEditComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,