/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-bif/common-api';
import { BifMetadataType } from './BifMetadataType';
/**
 * @abstract
 */
export class AbstractShowEntity extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.sysInit = false;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.code = null;
        this.name = null;
        this.upBillVoName = null;
        this.downBillVoName = null;
        this.parentId = null;
        this.bifMetadataType = null;
        this.lastModifiedTime = null;
        this.sysInit = false;
        this.originId = null;
        this.rootId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper.SetAttributeValue(obj, "code", this.code);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoName", this.upBillVoName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoName", this.downBillVoName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "parentId", this.parentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifMetadataType", this.bifMetadataType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "lastModifiedTime", this.lastModifiedTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "originId", this.originId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "rootId", this.rootId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "id");
        this.code = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "code");
        this.name = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "name");
        this.upBillVoName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upBillVoName");
        this.downBillVoName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downBillVoName");
        this.parentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "parentId");
        this.bifMetadataType = BifMetadataType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifMetadataType")];
        this.lastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsDateTime(obj, "lastModifiedTime");
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "sysInit");
        this.originId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "originId");
        this.rootId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "rootId");
    }
}
if (false) {
    /** @type {?} */
    AbstractShowEntity.prototype.id;
    /** @type {?} */
    AbstractShowEntity.prototype.code;
    /** @type {?} */
    AbstractShowEntity.prototype.name;
    /** @type {?} */
    AbstractShowEntity.prototype.upBillVoName;
    /** @type {?} */
    AbstractShowEntity.prototype.downBillVoName;
    /** @type {?} */
    AbstractShowEntity.prototype.bifMetadataType;
    /** @type {?} */
    AbstractShowEntity.prototype.lastModifiedTime;
    /** @type {?} */
    AbstractShowEntity.prototype.parentId;
    /** @type {?} */
    AbstractShowEntity.prototype.sysInit;
    /** @type {?} */
    AbstractShowEntity.prototype.originId;
    /** @type {?} */
    AbstractShowEntity.prototype.rootId;
}
//# sourceMappingURL=data:application/json;base64,