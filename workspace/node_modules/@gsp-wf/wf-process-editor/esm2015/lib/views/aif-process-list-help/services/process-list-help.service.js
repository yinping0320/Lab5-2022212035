/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
import { FrameworkService, AppService } from '@gsp-sys/rtf-common';
import { BifMonitorConstant } from '../entity/BifMonitorConstant';
import { RtBillProcessListResult } from '../entity/RtBillProcessListResult';
import { RtShowEntity } from '../entity/RtShowEntity';
export class ProcessListHelpService {
    /**
     * @param {?} appService
     * @param {?} frameworkService
     * @param {?} httpService
     */
    constructor(appService, frameworkService, httpService) {
        this.appService = appService;
        this.frameworkService = frameworkService;
        this.httpService = httpService;
        this.baseUrl = "/api/runtime/aif/v1.0/rtbillprocess";
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    openBifManagerApp(entity) {
        /** @type {?} */
        const map = new Map();
        map.set("id", entity.id);
        map.set("type", entity.bifMetadataType);
        map.set("srcFuncId", BifMonitorConstant.bifDiagnostorFuncId);
        /** @type {?} */
        const opt = {
            funcId: BifMonitorConstant.bifManagerFuncId,
            appId: BifMonitorConstant.bifMonitorAppId,
            appEntrance: BifMonitorConstant.bifManagerAppEntrance,
            appType: "menu",
            entityParams: {},
            queryStringParams: map,
            tabId: entity.id,
            tabName: entity.name
        };
        this.frameworkService.openMenu(opt);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getDatagridData(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        let data$ = null;
        //有业务种类参数时不分页
        if (args.bizType != null) {
            data$ = this.httpService.post(`${this.baseUrl}/getpatch`, body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const listRes = new RtBillProcessListResult();
                listRes.entities = res.map((/**
                 * @param {?} elt
                 * @return {?}
                 */
                elt => {
                    /** @type {?} */
                    const e = new RtShowEntity();
                    e.LoadFromJsonObject(elt);
                    return e;
                }));
                return listRes;
            })));
        }
        else {
            data$ = this.httpService.post(`${this.baseUrl}/getpagedpatch`, body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const listRes = new RtBillProcessListResult();
                listRes.LoadFromJsonObject(res);
                return listRes;
            })));
        }
    }
    /**
     * 根据流程编号查询流程名称
     * @param {?} code
     * @return {?}
     */
    getProcessNameByCode(code) {
        return this.httpService.request("GET", `/api/runtime/aif/v1.0/rtbillcreationprocess/getname/${code}`, { responseType: 'text' });
    }
}
ProcessListHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessListHelpService.ctorParameters = () => [
    { type: AppService },
    { type: FrameworkService },
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0LWhlbHAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvYWlmLXByb2Nlc3MtbGlzdC1oZWxwL3NlcnZpY2VzL3Byb2Nlc3MtbGlzdC1oZWxwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR3RELE1BQU0sT0FBTyxzQkFBc0I7Ozs7OztJQUdqQyxZQUNVLFVBQXNCLEVBQ3RCLGdCQUFrQyxFQUNsQyxXQUF3QjtRQUZ4QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFMakIsWUFBTyxHQUFHLHFDQUFxQyxDQUFDO0lBT2pFLENBQUM7Ozs7O0lBRU0saUJBQWlCLENBQUMsTUFBcUI7O2NBQ3RDLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7O2NBQ3ZELEdBQUcsR0FBZTtZQUN0QixNQUFNLEVBQUUsa0JBQWtCLENBQUMsZ0JBQWdCO1lBQzNDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxlQUFlO1lBQ3pDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxxQkFBcUI7WUFDckQsT0FBTyxFQUFFLE1BQU07WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixpQkFBaUIsRUFBRSxHQUFHO1lBQ3RCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUk7U0FDckI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBRU0sZUFBZSxDQUFDLElBQWdDOztjQUMvQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRTs7WUFDN0IsS0FBSyxHQUFvQixJQUFJO1FBQ2pDLGFBQWE7UUFDYixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3hCLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsR0FBRzs7OztZQUNELENBQUMsR0FBUSxFQUFFLEVBQUU7O3NCQUNMLE9BQU8sR0FBRyxJQUFJLHVCQUF1QixFQUFFO2dCQUM3QyxPQUFPLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHOzs7O2dCQUFDLEdBQUcsQ0FBQyxFQUFFOzswQkFDekIsQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFO29CQUM1QixDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzFCLE9BQU8sQ0FBQyxDQUFDO2dCQUNYLENBQUMsRUFBQyxDQUFDO2dCQUNILE9BQU8sT0FBTyxDQUFDO1lBQ2pCLENBQUMsRUFDRixDQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUNmLEdBQUc7Ozs7WUFDRCxDQUFDLEdBQVEsRUFBRSxFQUFFOztzQkFDTCxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsRUFBRTtnQkFDN0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLE9BQU8sQ0FBQztZQUNqQixDQUFDLEVBQ0YsQ0FDRixDQUFDO1NBQ0g7SUFDSCxDQUFDOzs7Ozs7SUFPTSxvQkFBb0IsQ0FBQyxJQUFZO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLHVEQUF1RCxJQUFJLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2xJLENBQUM7OztZQXJFRixVQUFVOzs7O1lBUDRCLFVBQVU7WUFBNUIsZ0JBQWdCO1lBSDVCLFdBQVc7Ozs7Ozs7SUFZbEIseUNBQWlFOzs7OztJQUcvRCw0Q0FBOEI7Ozs7O0lBQzlCLGtEQUEwQzs7Ozs7SUFDMUMsNkNBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQXBwT3B0aW9ucywgRnJhbWV3b3JrU2VydmljZSwgQXBwU2VydmljZSB9IGZyb20gJ0Bnc3Atc3lzL3J0Zi1jb21tb24nO1xyXG5pbXBvcnQgeyBJUnRTaG93RW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L0lSdFNob3dFbnRpdHknO1xyXG5pbXBvcnQgeyBCaWZNb25pdG9yQ29uc3RhbnQgfSBmcm9tICcuLi9lbnRpdHkvQmlmTW9uaXRvckNvbnN0YW50JztcclxuaW1wb3J0IHsgUHJvY2Vzc0ZpbHRlckNvbmRpdGlvbkFyZ3MgfSBmcm9tICcuLi9lbnRpdHkvUHJvY2Vzc0ZpbHRlckNvbmRpdGlvbkFyZ3MnO1xyXG5pbXBvcnQgeyBSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdCB9IGZyb20gJy4uL2VudGl0eS9SdEJpbGxQcm9jZXNzTGlzdFJlc3VsdCc7XHJcbmltcG9ydCB7IFJ0U2hvd0VudGl0eSB9IGZyb20gJy4uL2VudGl0eS9SdFNob3dFbnRpdHknO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0xpc3RIZWxwU2VydmljZSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBiYXNlVXJsID0gXCIvYXBpL3J1bnRpbWUvYWlmL3YxLjAvcnRiaWxscHJvY2Vzc1wiO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgYXBwU2VydmljZTogQXBwU2VydmljZSxcclxuICAgIHByaXZhdGUgZnJhbWV3b3JrU2VydmljZTogRnJhbWV3b3JrU2VydmljZSxcclxuICAgIHByaXZhdGUgaHR0cFNlcnZpY2U6IEh0dHBTZXJ2aWNlLFxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9wZW5CaWZNYW5hZ2VyQXBwKGVudGl0eTogSVJ0U2hvd0VudGl0eSkge1xyXG4gICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xyXG4gICAgbWFwLnNldChcImlkXCIsIGVudGl0eS5pZCk7XHJcbiAgICBtYXAuc2V0KFwidHlwZVwiLCBlbnRpdHkuYmlmTWV0YWRhdGFUeXBlKTtcclxuICAgIG1hcC5zZXQoXCJzcmNGdW5jSWRcIiwgQmlmTW9uaXRvckNvbnN0YW50LmJpZkRpYWdub3N0b3JGdW5jSWQpO1xyXG4gICAgY29uc3Qgb3B0OiBBcHBPcHRpb25zID0ge1xyXG4gICAgICBmdW5jSWQ6IEJpZk1vbml0b3JDb25zdGFudC5iaWZNYW5hZ2VyRnVuY0lkLFxyXG4gICAgICBhcHBJZDogQmlmTW9uaXRvckNvbnN0YW50LmJpZk1vbml0b3JBcHBJZCxcclxuICAgICAgYXBwRW50cmFuY2U6IEJpZk1vbml0b3JDb25zdGFudC5iaWZNYW5hZ2VyQXBwRW50cmFuY2UsXHJcbiAgICAgIGFwcFR5cGU6IFwibWVudVwiLFxyXG4gICAgICBlbnRpdHlQYXJhbXM6IHt9LFxyXG4gICAgICBxdWVyeVN0cmluZ1BhcmFtczogbWFwLFxyXG4gICAgICB0YWJJZDogZW50aXR5LmlkLFxyXG4gICAgICB0YWJOYW1lOiBlbnRpdHkubmFtZVxyXG4gICAgfTtcclxuICAgIHRoaXMuZnJhbWV3b3JrU2VydmljZS5vcGVuTWVudShvcHQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldERhdGFncmlkRGF0YShhcmdzOiBQcm9jZXNzRmlsdGVyQ29uZGl0aW9uQXJncyk6IE9ic2VydmFibGU8UnRCaWxsUHJvY2Vzc0xpc3RSZXN1bHQ+IHtcclxuICAgIGNvbnN0IGJvZHkgPSBhcmdzLkNvbnZlcnRUb0pzb24oKTtcclxuICAgIGxldCBkYXRhJDogT2JzZXJ2YWJsZTxhbnk+ID0gbnVsbDtcclxuICAgIC8v5pyJ5Lia5Yqh56eN57G75Y+C5pWw5pe25LiN5YiG6aG1XHJcbiAgICBpZiAoYXJncy5iaXpUeXBlICE9IG51bGwpIHtcclxuICAgICAgZGF0YSQgPSB0aGlzLmh0dHBTZXJ2aWNlLnBvc3QoYCR7dGhpcy5iYXNlVXJsfS9nZXRwYXRjaGAsIGJvZHkpO1xyXG4gICAgICByZXR1cm4gZGF0YSQucGlwZShcclxuICAgICAgICBtYXAoXHJcbiAgICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGlzdFJlcyA9IG5ldyBSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdCgpO1xyXG4gICAgICAgICAgICBsaXN0UmVzLmVudGl0aWVzID0gcmVzLm1hcChlbHQgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgUnRTaG93RW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgZS5Mb2FkRnJvbUpzb25PYmplY3QoZWx0KTtcclxuICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBsaXN0UmVzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGEkID0gdGhpcy5odHRwU2VydmljZS5wb3N0KGAke3RoaXMuYmFzZVVybH0vZ2V0cGFnZWRwYXRjaGAsIGJvZHkpO1xyXG4gICAgICByZXR1cm4gZGF0YSQucGlwZShcclxuICAgICAgICBtYXAoXHJcbiAgICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGlzdFJlcyA9IG5ldyBSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdCgpO1xyXG4gICAgICAgICAgICBsaXN0UmVzLkxvYWRGcm9tSnNvbk9iamVjdChyZXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGlzdFJlcztcclxuICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja7mtYHnqIvnvJblj7fmn6Xor6LmtYHnqIvlkI3np7BcclxuICAgKiBAcGFyYW0gY29kZVxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgcHVibGljIGdldFByb2Nlc3NOYW1lQnlDb2RlKGNvZGU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwU2VydmljZS5yZXF1ZXN0KFwiR0VUXCIsIGAvYXBpL3J1bnRpbWUvYWlmL3YxLjAvcnRiaWxsY3JlYXRpb25wcm9jZXNzL2dldG5hbWUvJHtjb2RlfWAsIHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==