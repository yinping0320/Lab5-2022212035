/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, Input, EventEmitter, ViewChild, TemplateRef, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { ExpressionService, ExpressioneditorComponent, ComputeRuleEditorComponent } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ExpressionEditorComponent {
    /**
     * @param {?} expr
     * @param {?} designerState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(expr, designerState, cdr, localeId, resources, localePipe) {
        this.expr = expr;
        this.designerState = designerState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: this.localePipe.transform('component.expressionEditor.expressionEditor'),
            width: 1036,
            height: 530,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                this.contextEntities = this.contextEntities.concat([variable]);
            }
        }
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.activityComponentContext.length > 0) {
            for (const variable of this.designerState.activityComponentContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const result = this.compute.getExpr();
        this.value = this.convertToValue(result.text);
        /** @type {?} */
        const object = { value: this.value, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * 切换表达式类型（简易表达式<--->高级表达式）
     * @return {?}
     */
    changeType() {
        this.compute.changeType();
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    convertToValue(val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
}
ExpressionEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-editor',
                template: "<div class=\"mx-3 h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <app-compute-rule-editor #compute\r\n  [text]=\"value\"\r\n  [advancedContexts]=\"contextEntities\"\r\n  [injectName]=\"injectName\"\r\n  [injectSchemaName]=\"'Schema'\"\r\n  [injectNameInSchema]=\"injectName\"\r\n  [schema]=\"schema\"\r\n  [schemaName]=\"'Schema'\">\r\n</app-compute-rule-editor>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm mr-2\" (click)=\"clickCancel()\">{{'component.expressionEditor.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm mr-2\" (click)=\"changeType()\">{{'component.expressionEditor.changeType' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm\" (click)=\"clickOK()\">{{'component.expressionEditor.clickOK' | wfLocale}}</button>\r\n  </div>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionEditorComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ExpressionEditorComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editorParams: [{ type: Input }],
    editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }],
    compute: [{ type: ViewChild, args: ['compute',] }]
};
if (false) {
    /** @type {?} */
    ExpressionEditorComponent.prototype.closeModal;
    /** @type {?} */
    ExpressionEditorComponent.prototype.submitModal;
    /** @type {?} */
    ExpressionEditorComponent.prototype.value;
    /** @type {?} */
    ExpressionEditorComponent.prototype.modalFooter;
    /** @type {?} */
    ExpressionEditorComponent.prototype.editorParams;
    /** @type {?} */
    ExpressionEditorComponent.prototype.editor;
    /** @type {?} */
    ExpressionEditorComponent.prototype.compute;
    /** @type {?} */
    ExpressionEditorComponent.prototype.contextEntities;
    /** @type {?} */
    ExpressionEditorComponent.prototype.schema;
    /** @type {?} */
    ExpressionEditorComponent.prototype.injectName;
    /** @type {?} */
    ExpressionEditorComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    ExpressionEditorComponent.prototype.expr;
    /** @type {?} */
    ExpressionEditorComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    ExpressionEditorComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ExpressionEditorComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionEditorComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ExpressionEditorComponent.prototype.localePipe;
}
export class ExpressionEditorConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data;
        }
        else {
            return this.localePipe.transform("component.expressionEditor.notSet");
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionEditorConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,