/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, TemplateRef, Input, ViewChild, ComponentFactoryResolver, Injector, Inject, Optional, ChangeDetectorRef, LOCALE_ID } from '@angular/core';
import { ActivityComponentRepository } from './activity-component.repository';
import { ActivityComponentUIState } from './activity-component.uistate';
import { ActivityComponentViewModel } from './activity-component.viewmodel';
import { BizComponentEntity } from '../../domain/entities/biz-component.entity';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { BsModalService } from '@farris/ui-modal';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { DatagridComponent } from '@farris/ui-datagrid';
import { forkJoin, of } from 'rxjs';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { MessagerService } from '@farris/ui-messager';
import { EditComponentParameterComponent } from '../edit-component-parameter/edit-component-parameter.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ActivityComponentComponent {
    /**
     * @param {?} uistate
     * @param {?} viewModel
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} componentService
     * @param {?} repository
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(uistate, viewModel, designerState, expr, resolver, injector, modalService, componentService, repository, message, cdr, localeId, resources, localePipe) {
        this.uistate = uistate;
        this.viewModel = viewModel;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.componentService = componentService;
        this.repository = repository;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.exBizTips = false;
        this.modalConfig = {
            title: this.localePipe.transform('component.activityComponent.component'),
            width: 960,
            height: 506,
            showButtons: true
        };
        this.buttonGroupData = [
            {
                id: 'edit',
                text: this.localePipe.transform('component.activityComponent.edit'),
            },
            {
                id: 'deleteRow',
                text: this.localePipe.transform('component.activityComponent.deleteRow'),
            }
        ];
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.isPreExternalProcessCmps = false;
        this.columns = [];
        this.paramColumns = [];
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} cpts
     * @return {?}
     */
    set value(cpts) {
        if (cpts && cpts.length > 0) {
            /** @type {?} */
            let metaDataIdList = new Array();
            for (const cmp of cpts) {
                if (metaDataIdList.indexOf(cmp.metadataId) == -1) {
                    metaDataIdList.push(cmp.metadataId);
                }
            }
            if (metaDataIdList.length > 0) {
                forkJoin(metaDataIdList.map((/**
                 * @param {?} metaDataId
                 * @return {?}
                 */
                (metaDataId) => this.designerState.getHelpMetaData(metaDataId, '')))).subscribe((/**
                 * @param {?} cmpMetas
                 * @return {?}
                 */
                cmpMetas => {
                    for (const cpt of cpts) {
                        /** @type {?} */
                        const bizComponent = new BizComponentEntity(cpt.name, cpt.metadataId, cpt.methodCode);
                        bizComponent.executionTime = cpt.executionTime,
                            bizComponent.id = cpt.id;
                        bizComponent.isForCompensation = cpt.isForCompensation;
                        bizComponent.actualParameters = new Array();
                        bizComponent.scopeType = cpt.scopeType || null;
                        /** @type {?} */
                        const meta = cmpMetas.find((/**
                         * @param {?} m
                         * @return {?}
                         */
                        m => m.id === cpt.metadataId));
                        /** @type {?} */
                        const content = JSON.parse(meta.content);
                        /** @type {?} */
                        const operation = content.operations.find((/**
                         * @param {?} o
                         * @return {?}
                         */
                        o => o.code === cpt.methodCode));
                        if (operation) {
                            bizComponent.actualParameters = cpt.actualParameters.map((/**
                             * @param {?} a
                             * @return {?}
                             */
                            a => {
                                /** @type {?} */
                                const p = operation.parameters.find((/**
                                 * @param {?} i
                                 * @return {?}
                                 */
                                i => i.code === a.code));
                                if (p) {
                                    return {
                                        code: a.code,
                                        name: a.name,
                                        value: a.value,
                                        required: a.code.toLowerCase() === 'wfcontext' ? false : p.required
                                    };
                                }
                                else {
                                    console.error(this.localePipe.transform('component.activityComponent.method') + cpt.methodCode + this.localePipe.transform('component.activityComponent.inconsistentParameters'));
                                    return {
                                        code: a.code,
                                        name: a.name,
                                        value: a.value,
                                        required: false
                                    };
                                }
                            }));
                        }
                        else {
                            console.error(this.localePipe.transform('component.activityComponent.longerExists') + cpt.methodCode + this.localePipe.transform('component.activityComponent.pleaseCheck'));
                        }
                        this.uistate.components.push(bizComponent);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 2023-5-25 网速慢的时候会导致加载不出来流程构件，因此加个延时
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.restart();
        }), 300);
    }
    /**
     * @return {?}
     */
    restart() {
        if (this.designerState.startMode === 'EXTERNAL_PROCESS') {
            this.repository.getBizCmp((/**
             * @param {?} cmps
             * @return {?}
             */
            (cmps) => {
                if (cmps && cmps.length > 0) {
                    // 此处标记有外部流程通用构件
                    for (const c of cmps) {
                        if (c.scopeType === 'ExternalProcess') {
                            this.exBizTips = true;
                            break;
                        }
                    }
                }
            }));
        }
        this.location = this.editorParams.location;
        if (this.location === 'activity') {
            this.uistate.executionCollection = this.uistate.activityCollection;
            this.columns = [
                {
                    field: 'executionTime', width: 100, title: this.localePipe.transform('component.activityComponent.executionTime'),
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: { data: this.uistate.executionCollection, groupField: 'text', valueField: 'value', textField: 'text', idField: 'value', panelHeight: 'auto' }
                    },
                    formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @param {?} i
                     * @return {?}
                     */
                    (v, d, i) => {
                        if (v) {
                            return this.uistate.executionCollection.find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            item => item.value === v)).text;
                        }
                        else {
                            return '';
                        }
                    }),
                    validators: [
                        { type: 'required', messager: '必填' }
                    ]
                },
                {
                    field: 'name', width: 100, title: this.localePipe.transform('component.activityComponent.cmpName')
                },
                { field: 'metadataId', width: 100, title: this.localePipe.transform('component.activityComponent.metadataId') },
                { field: 'methodCode', width: 100, title: this.localePipe.transform('component.activityComponent.methodCode') },
                {
                    field: 'isForCompensation', width: 50, title: this.localePipe.transform('component.activityComponent.isForCompensation'),
                    editor: { type: EditorTypes.SWITCH, options: {} },
                    formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.activityComponent.yes'), falseText: this.localePipe.transform('component.activityComponent.no') } }
                },
                { title: this.localePipe.transform('component.activityComponent.operate'), width: 70, template: this.btnTemplate }
            ];
        }
        else if (this.location === 'autoActivity') {
            this.columns = [
                {
                    field: 'name', width: 100, title: this.localePipe.transform('component.activityComponent.cmpName')
                },
                { field: 'metadataId', width: 100, title: this.localePipe.transform('component.activityComponent.metadataId') },
                { field: 'methodCode', width: 100, title: this.localePipe.transform('component.activityComponent.methodCode') },
                {
                    field: 'isForCompensation', width: 50, title: this.localePipe.transform('component.activityComponent.isForCompensation'),
                    editor: { type: EditorTypes.SWITCH, options: {} },
                    formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.activityComponent.yes'), falseText: this.localePipe.transform('component.activityComponent.no') } }
                },
                { title: this.localePipe.transform('component.activityComponent.operate'), width: 70, template: this.btnTemplate }
            ];
        }
        else {
            this.columns = [
                {
                    field: 'executionTime', width: 100, title: this.localePipe.transform('component.activityComponent.executionTime'),
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: { data: this.uistate.executionCollection, groupField: 'text', valueField: 'value', textField: 'text', idField: 'value', panelHeight: 'auto' }
                    },
                    formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @param {?} i
                     * @return {?}
                     */
                    (v, d, i) => {
                        if (v) {
                            return this.uistate.executionCollection.find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            item => item.value === v)).text;
                        }
                        else {
                            return '';
                        }
                    }),
                    validators: [
                        { type: 'required', messager: '必填' }
                    ]
                },
                {
                    field: 'name', width: 100, title: this.localePipe.transform('component.activityComponent.cmpName')
                },
                { field: 'metadataId', width: 100, title: this.localePipe.transform('component.activityComponent.metadataId') },
                { field: 'methodCode', width: 100, title: this.localePipe.transform('component.activityComponent.methodCode') },
                { title: this.localePipe.transform('component.activityComponent.operate'), width: 70, template: this.btnTemplate }
            ];
        }
        if (this.uistate.components && this.uistate.components.length > 0) {
            this.cmplist.selectRow(this.uistate.components[0].id, true);
        }
        this.paramColumns = [
            { field: 'code', width: 50, title: this.localePipe.transform('component.activityComponent.code') },
            { field: 'name', width: 50, title: this.localePipe.transform('component.activityComponent.name') },
            {
                field: 'value', width: 100, title: this.localePipe.transform('component.activityComponent.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        // 选中当前行
        this.repository.subject.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        cmp => {
            this.cmplist.loadData(this.uistate.components);
            if (cmp) {
                this.cmplist.selectRow(cmp.id, true);
            }
            else {
                this.uistate.curComponent = null;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.uistate.components && this.uistate.components.length > 0) {
            this.cmplist.selectRow(this.uistate.components[0].id, true);
        }
    }
    /**
     * @return {?}
     */
    edit() {
        this.editState = 'edit';
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(EditComponentParameterComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.activityComponent.editComponent'),
            width: 700,
            height: 400,
            buttons: compRef.instance.editFooter,
            showButtons: true,
            initialState: {
                curComponent: JSON.parse(JSON.stringify(this.uistate.curComponent))
            }
        };
        /** @type {?} */
        const editDialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.canEdit = false;
        compRef.instance.editState = this.editState;
        compRef.instance.location = this.location;
        compRef.instance.executionTimingList = this.uistate.executionCollection;
        // compRef.instance.curComponent = JSON.parse(JSON.stringify(this.uistate.curComponent));
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        cmp => {
            /** @type {?} */
            const i = this.uistate.components.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === cmp.id));
            this.uistate.components[i] = cmp;
            this.cmplist.loadData(this.uistate.components);
            editDialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            editDialog.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            compRef.instance.cd.detectChanges();
        }));
    }
    /**
     * @return {?}
     */
    deleteRow() {
        this.message.confirm(this.localePipe.transform('component.activityComponent.confirmDelete')).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            if (v) {
                this.closeCellEdit();
                this.viewModel.deleteRow();
                this.cmplist.loadData(this.uistate.components);
            }
        }));
    }
    /**
     * @return {?}
     */
    moveUp() {
        if (!this.uistate.curComponent) {
            this.message.info(this.localePipe.transform('component.activityComponent.curComponent'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.uistate.curComponent.id;
        /** @type {?} */
        const i = this.uistate.components.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.id === curCmpId));
        if (i === 0) {
            return;
        }
        this.repository.swapArray(this.uistate.components, i, i - 1);
        this.cmplist.loadData(this.uistate.components);
        this.cmplist.selectRow(curCmpId, true);
    }
    /**
     * @return {?}
     */
    moveDown() {
        if (!this.uistate.curComponent) {
            this.message.info(this.localePipe.transform('component.activityComponent.curComponent'));
            return;
        }
        /** @type {?} */
        const curCmpId = this.uistate.curComponent.id;
        /** @type {?} */
        const i = this.uistate.components.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.id === curCmpId));
        if (i === this.uistate.components.length - 1) {
            return;
        }
        this.repository.swapArray(this.uistate.components, i, i + 1);
        this.cmplist.loadData(this.uistate.components);
        this.cmplist.selectRow(curCmpId, true);
    }
    /**
     * @param {?} buttonId
     * @param {?} ctx
     * @return {?}
     */
    clickAction(buttonId, ctx) {
        this.uistate.curComponent = ctx.rowData;
        switch (buttonId) {
            case 'edit':
                this.edit();
                break;
            case 'deleteRow':
                this.deleteRow();
                break;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.closeCellEdit();
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.uistate.components, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    componentSelect() {
        this.editState = 'new';
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(EditComponentParameterComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.activityComponent.newComponent'),
            width: 700,
            height: 400,
            buttons: compRef.instance.editFooter,
            showButtons: true
        };
        /** @type {?} */
        const editDialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.canEdit = true;
        compRef.instance.editState = this.editState;
        compRef.instance.location = this.location;
        compRef.instance.executionTimingList = this.uistate.executionCollection;
        compRef.instance.curComponent = new BizComponentEntity();
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        cmp => {
            this.uistate.components.push(cmp);
            this.cmplist.loadData(this.uistate.components);
            editDialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            editDialog.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            compRef.instance.cd.detectChanges();
        }));
    }
    /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                this.viewModel.componentSelect(result);
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.location === 'activity') {
            for (const variable of this.designerState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.location === 'activity') {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectionChange(data) {
        this.uistate.curComponent = data.data;
    }
    /**
     * @private
     * @return {?}
     */
    closeCellEdit() {
        this.cmplist.endCellEdit();
        if (this.paramlist) {
            this.paramlist.endCellEdit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        // 校验是否存在重复的构件
        /** @type {?} */
        const cache = [];
        for (const cmp of this.uistate.components) {
            if (cache.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.methodCode === cmp.methodCode && JSON.stringify(c.actualParameters) === JSON.stringify(cmp.actualParameters) &&
                c.executionTime === cmp.executionTime))) {
                console.log(cmp.actualParameters);
                this.message.warning(this.localePipe.transform('component.activityComponent.sameCmp') + `${cmp.name}` + this.localePipe.transform('component.activityComponent.cmpMethod') + cmp.methodCode + this.localePipe.transform('component.activityComponent.pleaseCheck'));
                return false;
            }
            cache.push(cmp);
            if (!cmp.executionTime && this.location !== 'autoActivity') {
                this.message.warning(this.localePipe.transform('component.activityComponent.executionTimeNotNull'));
                return false;
            }
            for (const param of cmp.actualParameters) {
                if (param.required && !param.value) {
                    this.message.warning(this.localePipe.transform('component.activityComponent.component') + `【${cmp.name}】` + this.localePipe.transform('component.activityComponent.param') + `【${param.code}】` + this.localePipe.transform('component.activityComponent.required'));
                    return false;
                }
            }
        }
        return true;
    }
}
ActivityComponentComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-activity-component',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n              <ng-container *ngIf=\"exBizTips\">\r\n                <div  class=\"f-component-wizard-page-detail-header\">\r\n                  <div class=\"page-friendly-reminder\" style=\"background:#E6F7FF;padding: 0.5rem!important\">\r\n                    <div class=\"reminder-message\">\r\n                      <span class=\"reminder-title\">\r\n                        <span class=\"f-icon f-icon-info\">\r\n                        </span>\r\n                        <span class=\"reminder-name\" style=\"padding-left: 0.25rem\">{{'component.activityComponent.tips' | wfLocale}}\r\n                        </span>\r\n                      </span>\r\n                      <span class=\"message\">{{'component.activityComponent.prefabricated' | wfLocale}}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </ng-container>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"componentSelect()\">{{'component.activityComponent.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"moveUp()\">{{'component.activityComponent.moveUp' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"moveDown()\">{{'component.activityComponent.moveDown' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;margin-left: 6px;margin-right: 6px;\">\r\n      <div [style.height.%]=\"uistate.curComponent?100:100\">\r\n        <farris-datagrid #cmplist [data]=\"uistate.components\" [idField]=\"'id'\" [columns]=\"columns\" [fit]=\"true\"\r\n          [showGroupColumn]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n          [showCheckbox]=\"false\" [groupRows]=\"true\" [multiSelect]=\"false\" (selectChanged)=\"selectionChange($event)\"\r\n          [closeOtherGridEditor]=\"true\" [mergeCell]=\"true\" [mergeFields]=\"['executionTime']\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #buttonsTemplate let-ctx>\r\n  <farris-button-group [count]=\"2\" [data]=\"buttonGroupData\" (change)=\"clickAction($event, ctx)\">\r\n  </farris-button-group>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.activityComponent.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.activityComponent.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [ActivityComponentRepository, ActivityComponentUIState, ActivityComponentViewModel,
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ActivityComponentComponent.ctorParameters = () => [
    { type: ActivityComponentUIState },
    { type: ActivityComponentViewModel },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: CommonComponentUiRTService },
    { type: ActivityComponentRepository },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ActivityComponentComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    btnTemplate: [{ type: ViewChild, args: ['buttonsTemplate',] }],
    cmplist: [{ type: ViewChild, args: ['cmplist',] }],
    paramlist: [{ type: ViewChild, args: ['paramlist',] }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ActivityComponentComponent.prototype.cls;
    /** @type {?} */
    ActivityComponentComponent.prototype.closeModal;
    /** @type {?} */
    ActivityComponentComponent.prototype.submitModal;
    /** @type {?} */
    ActivityComponentComponent.prototype.editorParams;
    /** @type {?} */
    ActivityComponentComponent.prototype.modalFooter;
    /** @type {?} */
    ActivityComponentComponent.prototype.btnTemplate;
    /** @type {?} */
    ActivityComponentComponent.prototype.cmplist;
    /** @type {?} */
    ActivityComponentComponent.prototype.paramlist;
    /** @type {?} */
    ActivityComponentComponent.prototype.exBizTips;
    /** @type {?} */
    ActivityComponentComponent.prototype.modalConfig;
    /** @type {?} */
    ActivityComponentComponent.prototype.buttonGroupData;
    /** @type {?} */
    ActivityComponentComponent.prototype.editState;
    /** @type {?} */
    ActivityComponentComponent.prototype.isPreExternalProcessCmps;
    /** @type {?} */
    ActivityComponentComponent.prototype.location;
    /** @type {?} */
    ActivityComponentComponent.prototype.columns;
    /** @type {?} */
    ActivityComponentComponent.prototype.paramColumns;
    /** @type {?} */
    ActivityComponentComponent.prototype.paramAfterEdit;
    /** @type {?} */
    ActivityComponentComponent.prototype.uistate;
    /** @type {?} */
    ActivityComponentComponent.prototype.viewModel;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.componentService;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentComponent.prototype.localePipe;
}
export class ActivityComponentConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.activityComponent.set");
        }
        else {
            return this.localePipe.transform("component.activityComponent.notSet");
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ActivityComponentConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,