/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { FDropdownDirective } from '@farris/ui-dropdown';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { PerformerEditComponent } from '../performer/views/performer-edit/performer-edit.component';
import { AssignConfig } from './assign-config';
import { ComponentParticipant, OrganizationParticipant, ParticipantInfo } from './participant.info';
import { ParticipantUIState } from './participant.uistate';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ParticipantComponent {
    /**
     * @param {?} designerUIState
     * @param {?} uistate
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} expr
     * @param {?} http
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, uistate, resolver, injector, modalService, message, expr, http, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.uistate = uistate;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.expr = expr;
        this.http = http;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.nodeType = 'notifyActivity';
        this.isClose = true;
        this.participant = new ParticipantInfo();
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        // 编辑状态，用于区分是新增还是编辑  new | edit
        this.type = 'humanPerformer';
        this.assignStrategyList = [
            { value: 'ALL', name: this.localePipe.transform('component.participant.all') },
            { value: 'ASSIGN', name: this.localePipe.transform('component.participant.assign') },
            { value: 'CLAIM', name: this.localePipe.transform('component.participant.claim') }
        ];
        this.operatorCollection = [
            { text: this.localePipe.transform('component.participant.currentUser'), value: 'currentUser' },
            { text: this.localePipe.transform('component.participant.procInstCreator'), value: 'procInstCreator' }
        ];
        this.modalConfig = {
            title: this.localePipe.transform('component.participant.participantSet'),
            width: 900,
            height: 662,
            showButtons: true
        };
        this.columns = [
            {
                field: 'order', width: 25, title: this.localePipe.transform('component.participant.order'),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
            }, {
                field: 'type', width: 50, title: this.localePipe.transform('component.participant.type'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            }, {
                field: 'performerName', width: 50, title: this.localePipe.transform('component.participant.performerName'), showTips: true, formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return d.performerName;
                        case 'wf.VariableParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.PositionParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.ComponentParticipantExpression':
                            return ((/** @type {?} */ (d))).name;
                        case 'wf.ReportingLineParticipantExpression':
                            return ((/** @type {?} */ (d))).reportingLineDefName + '-' + ((/** @type {?} */ (d))).dimension;
                        case 'wf.MatrixParticipantExpression':
                            return ((/** @type {?} */ (d))).matrixDefName + '-' + ((/** @type {?} */ (d))).dataFieldAlias;
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName;
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'description', width: 100, title: this.localePipe.transform('component.participant.description'), showTips: true,
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    switch (d.type) {
                        case 'wf.UserParticipantExpression':
                            return this.getUserPerformerDescription(d);
                        case 'wf.VariableParticipantExpression':
                            return this.getVariablePerformerDescription(d);
                        case 'wf.PositionParticipantExpression':
                            return this.getPositionPerformerDescription(d);
                        case 'wf.ComponentParticipantExpression':
                            return this.getComponentPerformerDescription(d);
                        case 'wf.ReportingLineParticipantExpression':
                            return this.getReportingLinePerformerDescription(d);
                        case 'wf.MatrixParticipantExpression':
                            return this.getMatrixPerformerDescription(d);
                        case 'wf.ActivityExecutorParticipantExpression':
                            return ((/** @type {?} */ (d))).performerName;
                        case 'wf.OrganizationParticipantExpression':
                            return ((/** @type {?} */ (d))).organizationName + '，且' + (((/** @type {?} */ (d))).includeChildren ? '包含下级' : '不包含下级');
                        default:
                            return '';
                    }
                })
            },
            {
                field: 'condition', width: 60, title: this.localePipe.transform('component.participant.condition'), showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.GetOrganizationType();
    }
    /**
     * @param {?} participant
     * @return {?}
     */
    set value(participant) {
        this.participant = JSON.parse(JSON.stringify(participant));
        if (!this.participant.assignStrategy.assignConfig) {
            this.participant.assignStrategy.assignConfig = new AssignConfig();
        }
        this.preAssignStrategy = participant.assignStrategy.assignStrategy;
        if (this.participant.humanPerformerList
            && this.participant.humanPerformerList.length > 0) {
            if (Math.max(...this.participant.humanPerformerList.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.order))) === 0) {
                /** @type {?} */
                let index = 1;
                for (const humanPerformer of this.participant.humanPerformerList) {
                    humanPerformer.order = index;
                    index++;
                }
            }
            this.participant.humanPerformerList = this.participant.humanPerformerList.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a.order - b.order));
        }
        if (this.participant.potentialOwnerList
            && this.participant.potentialOwnerList.length > 0) {
            if (Math.max(...this.participant.potentialOwnerList.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.order))) === 0) {
                /** @type {?} */
                let index = 1;
                for (const potentialOwner of this.participant.potentialOwnerList) {
                    potentialOwner.order = index;
                    index++;
                }
            }
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a.order - b.order));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nodeType = this.editorParams.nodeType;
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.humanPerformerGrid.endCellEdit();
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.endCellEdit();
        }
        /** @type {?} */
        const object = {
            value: this.participant, parameters: null
        };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    assignStrategyChange(data) {
        if (this.preAssignStrategy !== 'ASSIGN' && data === 'ASSIGN' && this.participant.humanPerformerList.length > 0) {
            if (!this.participant.assignStrategy.assignConfig) {
                this.participant.assignStrategy.assignConfig = new AssignConfig();
            }
            this.message.question(this.localePipe.transform('component.participant.dataMovement1'), (/**
             * @return {?}
             */
            () => {
                this.humanPerformerCopyToPotentialOwner();
            }));
        }
        else if (this.preAssignStrategy === 'ASSIGN' && data !== 'ASSIGN' && this.participant.potentialOwnerList.length > 0) {
            this.message.question(this.localePipe.transform('component.participant.dataMovement2'), (/**
             * @return {?}
             */
            () => {
                this.potentialOwnerCopyToHumanPerformer();
            }));
        }
        this.preAssignStrategy = data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    switchChange(data) {
        if (data) {
            this.clearPerformer('potentialOwner');
        }
    }
    /**
     * @param {?} performerType
     * @param {?} type
     * @return {?}
     */
    addPerformer(performerType, type) {
        this.editState = 'new';
        this.type = type;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.performerType = performerType;
        /** @type {?} */
        const boxsize = this.attributeBoxSize(performerType);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.participant.participantSelection'),
            width: boxsize.width,
            height: boxsize.height,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
        this.dropDownEl.close();
        if (this.dropDownE2) {
            this.dropDownE2.close();
        }
    }
    /**
     * @return {?}
     */
    editOK() {
        this.isClose = true;
        if (this.compRef) {
            /** @type {?} */
            const re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                for (const p of re.userPerformers) {
                    this.addUserPerformer(p);
                }
            }
            if (re.variable && re.variable !== null && re.variable.performerId) {
                this.addvariablePerformer(re.variable);
            }
            // 2023-7-28 组织岗支持多选
            if (re.positions && re.positions.length > 0) {
                this.addPositionPerformer(re.positions);
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                this.addComponentPerformer(re.component);
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                this.addReportingLinePerformer(re.reportingLine);
            }
            if (re.matrix && re.matrix.matrixDefId) {
                this.addMatrixPerformer(re.matrix);
            }
            if (re.activityExecutorPerformers && re.activityExecutorPerformers.length > 0) {
                for (const a of re.activityExecutorPerformers) {
                    this.addActivityExecutorPerformer(a);
                }
            }
            if (re.organizationParticipant) {
                this.addOrganizationParticipant(re.organizationParticipant);
            }
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
        // 编辑完成后刷新两个组件
        this.humanPerformerGrid.refresh();
        this.potentialOwnerGrid.refresh();
    }
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    addUserPerformer(userPerformer) {
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId))));
            if (i > -1) {
                // this.participant.humanPerformerList[i] = userPerformer;
            }
            else {
                if (this.editState === 'edit') {
                    this.removeHumanPerformer();
                }
                /** @type {?} */
                let index;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max(...this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.order))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.humanPerformerList.push(userPerformer);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === userPerformer.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === userPerformer.performerId))));
            if (i > -1) {
                // this.participant.potentialOwnerList[i] = userPerformer;
            }
            else {
                if (this.editState === 'edit') {
                    this.removePotentialOwner();
                }
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                userPerformer.order = index;
                this.participant.potentialOwnerList.push(userPerformer);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} variable
     * @return {?}
     */
    addvariablePerformer(variable) {
        /** @type {?} */
        const v = variable;
        if (!v || !v.varValue) {
            this.message.info(this.localePipe.transform('component.participant.selectProcessVariables'));
            this.isClose = false;
        }
        else if (!v.varType) {
            this.message.info(this.localePipe.transform('component.participant.selectVariableValueType'));
            this.isClose = false;
        }
        else if (!v.relation) {
            this.message.info(this.localePipe.transform('component.participant.selectRelation'));
            this.isClose = false;
        }
        else {
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                const i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId))));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removeHumanPerformer();
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max(...this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        h => h.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.humanPerformerList.push(variable);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a.id === variable.id || (((/** @type {?} */ (a))).performerId && ((/** @type {?} */ (a))).performerId === variable.performerId))));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = variable;
                }
                else {
                    if (this.editState === 'edit') {
                        this.removePotentialOwner();
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    variable.order = index;
                    this.participant.potentialOwnerList.push(variable);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    addPositionPerformer(positions) {
        for (const position of positions) {
            if (!position.performerId) {
                this.message.info(this.localePipe.transform('component.participant.selectPosition'));
                this.isClose = false;
            }
            else {
                if ((!position.orgType || position.orgType == null) && (position.isRequired && position.positionType === '1')) {
                    this.message.info(this.localePipe.transform('component.participant.selectOrgType'));
                    this.isClose = false;
                }
                else if ((!position.orgId || position.orgId == null) && (position.isRequired && position.positionType === '1')) {
                    this.message.info(this.localePipe.transform('component.participant.orgFill'));
                    this.isClose = false;
                }
                else {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    if (this.type === 'humanPerformer') {
                        /** @type {?} */
                        const i = this.participant.humanPerformerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            const p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this.participant.humanPerformerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            let index;
                            if (this.participant.humanPerformerList.length > 0) {
                                index = Math.max(...this.participant.humanPerformerList.map((/**
                                 * @param {?} h
                                 * @return {?}
                                 */
                                h => h.order))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this.participant.humanPerformerList.push(position);
                        }
                        this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
                    }
                    else if (this.type === 'potentialOwner') {
                        /** @type {?} */
                        const i = this.participant.potentialOwnerList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => {
                            if (a.type !== 'wf.PositionParticipantExpression') {
                                return false;
                            }
                            /** @type {?} */
                            const p = (/** @type {?} */ (a));
                            return (p.id === position.id);
                        }));
                        if (i > -1) {
                            this.participant.potentialOwnerList[i] = position;
                        }
                        else {
                            /** @type {?} */
                            let index;
                            if (this.participant.potentialOwnerList.length > 0) {
                                index = Math.max(...this.participant.potentialOwnerList.map((/**
                                 * @param {?} p
                                 * @return {?}
                                 */
                                p => p.order))) + 1;
                            }
                            else {
                                index = 1;
                            }
                            position.order = index;
                            this.participant.potentialOwnerList.push(position);
                        }
                        this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    addComponentPerformer(component) {
        /** @type {?} */
        const cmp = new ComponentParticipant();
        cmp.id = component.id;
        cmp.metadataId = component.metadataId;
        cmp.methodCode = component.methodCode;
        cmp.methodName = component.methodName;
        cmp.name = component.name;
        cmp.actualParameters = component.actualParameters;
        cmp.type = 'wf.ComponentParticipantExpression';
        cmp.condition = component.condition;
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === cmp.id));
            if (i > -1) {
                this.participant.humanPerformerList[i] = cmp;
            }
            else {
                /** @type {?} */
                let index;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max(...this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.order))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.humanPerformerList.push(cmp);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === cmp.id));
            if (i > -1) {
                this.participant.potentialOwnerList[i] = cmp;
            }
            else {
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                cmp.order = index;
                this.participant.potentialOwnerList.push(cmp);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    addReportingLinePerformer(reportingLine) {
        if (reportingLine.reportingReferObject === 'dept' && !reportingLine.refOrgId) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refOrgIdNotNull'));
        }
        else if (reportingLine.reportingReferObject !== 'dept' && !reportingLine.refUserId && !reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.refUserIdNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                const i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === reportingLine.id));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    const reportingLines = this.participant.humanPerformerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.ReportingLineParticipantExpression'));
                    for (const r of reportingLines) {
                        /** @type {?} */
                        const reportingLineData = (/** @type {?} */ (r));
                        if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                            reportingLineData.dimension === reportingLine.dimension &&
                            reportingLineData.refUserId === reportingLine.refUserId &&
                            reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                            reportingLineData.refOrgId === reportingLine.refOrgId) {
                            this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max(...this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        h => h.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.humanPerformerList.push(reportingLine);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === reportingLine.id));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = reportingLine;
                }
                else {
                    /** @type {?} */
                    const reportingLines = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.ReportingLineParticipantExpression'));
                    for (const r of reportingLines) {
                        /** @type {?} */
                        const reportingLineData = (/** @type {?} */ (r));
                        if (reportingLineData.reportingLineDefId === reportingLine.reportingLineDefId &&
                            reportingLineData.dimension === reportingLine.dimension &&
                            reportingLineData.refUserId === reportingLine.refUserId &&
                            reportingLineData.refEmployeeId === reportingLine.refEmployeeId &&
                            reportingLineData.refOrgId === reportingLine.refOrgId) {
                            this.message.error(this.localePipe.transform('component.participant.repDefConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    reportingLine.order = index;
                    this.participant.potentialOwnerList.push(reportingLine);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    addMatrixPerformer(matrix) {
        if (!matrix.conditionField1 && !matrix.conditionField2 && !matrix.conditionField3) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.atLeastOneCondition'));
        }
        else if (!matrix.dataFieldAlias) {
            this.isClose = false;
            this.message.info(this.localePipe.transform('component.participant.dataFieldAliasNotNull'));
        }
        else {
            this.isClose = true;
            if (this.type === 'humanPerformer') {
                /** @type {?} */
                const i = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === matrix.id));
                if (i > -1) {
                    this.participant.humanPerformerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    const matrixParticipants = this.participant.humanPerformerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.MatrixParticipantExpression'));
                    for (const m of matrixParticipants) {
                        /** @type {?} */
                        const matrixData = (/** @type {?} */ (m));
                        if (matrixData.matrixDefId === matrix.matrixDefId &&
                            matrixData.conditionField1 === matrix.conditionField1 &&
                            matrixData.conditionField2 === matrix.conditionField2 &&
                            matrixData.conditionField3 === matrix.conditionField3 &&
                            matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                            this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.humanPerformerList.length > 0) {
                        index = Math.max(...this.participant.humanPerformerList.map((/**
                         * @param {?} h
                         * @return {?}
                         */
                        h => h.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.humanPerformerList.push(matrix);
                }
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else if (this.type === 'potentialOwner') {
                /** @type {?} */
                const i = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === matrix.id));
                if (i > -1) {
                    this.participant.potentialOwnerList[i] = matrix;
                }
                else {
                    /** @type {?} */
                    const matrixParticipants = this.participant.potentialOwnerList.filter((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.type === 'wf.MatrixParticipantExpression'));
                    for (const m of matrixParticipants) {
                        /** @type {?} */
                        const matrixData = (/** @type {?} */ (m));
                        if (matrixData.matrixDefId === matrix.matrixDefId &&
                            matrixData.conditionField1 === matrix.conditionField1 &&
                            matrixData.conditionField2 === matrix.conditionField2 &&
                            matrixData.conditionField3 === matrix.conditionField3 &&
                            matrixData.dataFieldAlias === matrix.dataFieldAlias) {
                            this.message.error(this.localePipe.transform('component.participant.matrixConfigured'));
                            return;
                        }
                    }
                    /** @type {?} */
                    let index;
                    if (this.participant.potentialOwnerList.length > 0) {
                        index = Math.max(...this.participant.potentialOwnerList.map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.order))) + 1;
                    }
                    else {
                        index = 1;
                    }
                    matrix.order = index;
                    this.participant.potentialOwnerList.push(matrix);
                }
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @param {?} activityExecutor
     * @return {?}
     */
    addActivityExecutorPerformer(activityExecutor) {
        if (this.type === 'humanPerformer') {
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId))));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removeHumanPerformer(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                let index;
                if (this.participant.humanPerformerList.length > 0) {
                    index = Math.max(...this.participant.humanPerformerList.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    h => h.order))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.humanPerformerList.push(activityExecutor);
            }
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => (a.id === activityExecutor.id ||
                (((/** @type {?} */ (a))).activityDefId && ((/** @type {?} */ (a))).activityDefId === activityExecutor.activityDefId))));
            if (i < 0) {
                if (this.editState === 'edit') {
                    this.removePotentialOwner(); // 在编辑状态下配置了活动办理人参与者，先将选中的删除
                }
                /** @type {?} */
                let index;
                if (this.participant.potentialOwnerList.length > 0) {
                    index = Math.max(...this.participant.potentialOwnerList.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.order))) + 1;
                }
                else {
                    index = 1;
                }
                activityExecutor.order = index;
                this.participant.potentialOwnerList.push(activityExecutor);
            }
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @private
     * @param {?} organization
     * @return {?}
     */
    addOrganizationParticipant(organization) {
        /** @type {?} */
        const organizationParticipant = new OrganizationParticipant();
        organizationParticipant.id = organization.id || ProcessDeUtil.GenerateElementId();
        organizationParticipant.type = 'wf.OrganizationParticipantExpression';
        organizationParticipant.condition = organization.condition;
        organizationParticipant.name = organization.name;
        organizationParticipant.actionScope = organization.actionScope;
        organizationParticipant.organizationLevel = organization.organizationLevel;
        organizationParticipant.organizationId = organization.organizationId;
        organizationParticipant.organizationCode = organization.organizationCode;
        organizationParticipant.organizationName = organization.organizationName;
        organizationParticipant.includeChildren = organization.includeChildren;
        organizationParticipant.parentsUntil = organization.parentsUntil;
        organizationParticipant.tag = organization.tag;
        if (this.type === 'humanPerformer') {
            this.participant.humanPerformerList = this.participant.humanPerformerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            /** @type {?} */
            let index;
            if (this.participant.humanPerformerList.length > 0) {
                index = Math.max(...this.participant.humanPerformerList.map((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.order))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.humanPerformerList.push(organizationParticipant);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        }
        else if (this.type === 'potentialOwner') {
            this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            /** @type {?} */
            let index;
            if (this.participant.potentialOwnerList.length > 0) {
                index = Math.max(...this.participant.potentialOwnerList.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.order))) + 1;
            }
            else {
                index = 1;
            }
            organizationParticipant.order = index;
            this.participant.potentialOwnerList.push(organizationParticipant);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        if (this.editDialog) {
            this.editDialog.close();
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    editPerformer(type) {
        this.editState = 'edit';
        this.type = type;
        /** @type {?} */
        let selectedRow;
        if (type === 'humanPerformer') {
            selectedRow = this.humanPerformerGrid.selectedRow;
        }
        else if (type === 'potentialOwner') {
            selectedRow = this.potentialOwnerGrid.selectedRow;
        }
        if (!selectedRow) {
            this.message.info(this.localePipe.transform('component.participant.selectPerformer'));
            return;
        }
        /** @type {?} */
        const curPerformer = selectedRow.data;
        if (curPerformer) {
            /** @type {?} */
            const boxsize = this.attributeBoxSize(curPerformer.type);
            /** @type {?} */
            const modalConfig = {
                title: this.localePipe.transform('component.participant.participantSelection'),
                width: boxsize.width,
                height: boxsize.height,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            this.compRef.instance.performerType = curPerformer.type;
            this.compRef.instance.editState = this.editState;
            switch (curPerformer.type) {
                case 'wf.PositionParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.UserParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.VariableParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.VariableParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    const url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + ((/** @type {?} */ (curPerformer))).reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error(this.localePipe.transform('component.participant.definitionDeleted'));
                            if (type === 'humanPerformer') {
                                this.removeHumanPerformer();
                            }
                            else if (type === 'potentialOwner') {
                                this.removePotentialOwner();
                            }
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipantExpression',
                        value: curPerformer
                    };
                    /** @type {?} */
                    const urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + ((/** @type {?} */ (curPerformer))).matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error(this.localePipe.transform('component.participant.matrixDeleted'));
                            if (type === 'humanPerformer') {
                                this.removeHumanPerformer();
                            }
                            else if (type === 'potentialOwner') {
                                this.removePotentialOwner();
                            }
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.ActivityExecutorParticipantExpression',
                        value: curPerformer
                    };
                    break;
                case 'wf.OrganizationParticipantExpression':
                    this.compRef.instance.performer = {
                        type: 'wf.OrganizationParticipantExpression',
                        value: curPerformer
                    };
                    break;
            }
            if (curPerformer.type !== 'wf.ReportingLineParticipantExpression' &&
                curPerformer.type !== 'wf.MatrixParticipantExpression') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig);
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    removePerformer(type) {
        if (type === 'humanPerformer') {
            if (this.humanPerformerGrid.selectedRow) {
                this.humanPerformerGrid.endCellEdit();
                /** @type {?} */
                const index = this.participant.humanPerformerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.humanPerformerGrid.selectedRow.data.id));
                this.participant.humanPerformerList.splice(index, 1);
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
        else if (type === 'potentialOwner') {
            if (this.potentialOwnerGrid.selectedRow) {
                this.potentialOwnerGrid.endCellEdit();
                /** @type {?} */
                const index = this.participant.potentialOwnerList.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.potentialOwnerGrid.selectedRow.data.id));
                this.participant.potentialOwnerList.splice(index, 1);
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
            else {
                this.message.info(this.localePipe.transform('component.participant.selectParticipantInfo'));
            }
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    clearPerformer(type) {
        if (type === 'humanPerformer') {
            this.participant.humanPerformerList = new Array();
        }
        else if (type === 'potentialOwner') {
            this.participant.potentialOwnerList = new Array();
        }
        this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
        if (this.potentialOwnerGrid) {
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    moveUp(type) {
        if (type === 'humanPerformer') {
            /** @type {?} */
            const selectedRow = this.humanPerformerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            const index = this.participant.humanPerformerList[i].order;
            this.participant.humanPerformerList[i].order = this.participant.humanPerformerList[i - 1].order;
            this.participant.humanPerformerList[i - 1].order = index;
            this.swapArray(this.participant.humanPerformerList, i, i - 1);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            this.humanPerformerGrid.selectRow(performer.id, true);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            const selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === 0) {
                return;
            }
            /** @type {?} */
            const index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i - 1].order;
            this.participant.potentialOwnerList[i - 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i - 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer.id, true);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    moveDown(type) {
        if (type === 'humanPerformer') {
            /** @type {?} */
            const selectedRow = this.humanPerformerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === this.participant.humanPerformerList.length - 1) {
                return;
            }
            /** @type {?} */
            const index = this.participant.humanPerformerList[i].order;
            this.participant.humanPerformerList[i].order = this.participant.humanPerformerList[i + 1].order;
            this.participant.humanPerformerList[i + 1].order = index;
            this.swapArray(this.participant.humanPerformerList, i, i + 1);
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            this.humanPerformerGrid.selectRow(performer.id, true);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            const selectedRow = this.potentialOwnerGrid.selectedRow;
            if (!selectedRow) {
                this.message.info(this.localePipe.transform('component.participant.noRowSelected'));
                return;
            }
            /** @type {?} */
            const performer = selectedRow.data;
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === performer.id));
            if (i === this.participant.potentialOwnerList.length - 1) {
                return;
            }
            /** @type {?} */
            const index = this.participant.potentialOwnerList[i].order;
            this.participant.potentialOwnerList[i].order = this.participant.potentialOwnerList[i + 1].order;
            this.participant.potentialOwnerList[i + 1].order = index;
            this.swapArray(this.participant.potentialOwnerList, i, i + 1);
            this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            this.potentialOwnerGrid.selectRow(performer.id, true);
        }
    }
    /**
     * @private
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
    /**
     * @return {?}
     */
    removeHumanPerformer() {
        if (this.humanPerformerGrid.selectedRow) {
            this.humanPerformerGrid.endCellEdit();
            /** @type {?} */
            const i = this.participant.humanPerformerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === this.humanPerformerGrid.selectedRow.data.id));
            this.participant.humanPerformerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectDefaultHandler'));
        }
    }
    /**
     * @return {?}
     */
    removePotentialOwner() {
        if (this.potentialOwnerGrid.selectedRow) {
            this.potentialOwnerGrid.endCellEdit();
            /** @type {?} */
            const i = this.participant.potentialOwnerList.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === this.potentialOwnerGrid.selectedRow.data.id));
            this.participant.potentialOwnerList.splice(i, 1);
        }
        else {
            this.message.info(this.localePipe.transform('component.participant.selectpotentialtHandler'));
        }
    }
    /**
     * @private
     * @param {?} userPerformer
     * @return {?}
     */
    getUserPerformerDescription(userPerformer) {
        if (userPerformer.tag === 'expression') {
            return userPerformer.performerId;
        }
        else {
            if (userPerformer.orgName) {
                return this.localePipe.transform('component.participant.org') + userPerformer.orgName;
            }
            else {
                return '';
            }
        }
    }
    /**
     * @private
     * @param {?} variablePerformer
     * @return {?}
     */
    getVariablePerformerDescription(variablePerformer) {
        if (variablePerformer.tag === 'expression') {
            return variablePerformer.varValue;
        }
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    getPositionPerformerDescription(position) {
        if (this.designerUIState.scene === 'inSuite') {
            return null;
        }
        if (position.positionType === '1') {
            if (position.orgId) {
                return this.localePipe.transform('component.participant.positionType1') + position.orgId;
            }
            else {
                return this.localePipe.transform('component.participant.positionType2');
            }
        }
        else if (position.positionType === '0') {
            return this.localePipe.transform('component.participant.positionType3');
        }
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    getComponentPerformerDescription(position) {
        /** @type {?} */
        let des = this.localePipe.transform('component.participant.comp') + position.name
            + this.localePipe.transform('component.participant.parameters');
        if (position.actualParameters && position.actualParameters.length > 0) {
            position.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                des += `${p.code}：${p.value}，`;
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    getReportingLinePerformerDescription(reportingLine) {
        /** @type {?} */
        let description = '';
        if (reportingLine.refUserId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refUserId;
        }
        if (reportingLine.refEmployeeId) {
            description += this.localePipe.transform('component.participant.referencePerson') + reportingLine.refEmployeeId;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += `，`;
            }
            if (reportingLine.refEmployeeId) {
                description += `，`;
            }
            description += this.localePipe.transform('component.participant.referenceOrganization') + reportingLine.refOrgId;
        }
        return description;
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    getMatrixPerformerDescription(matrix) {
        /** @type {?} */
        let description = '';
        if (matrix.conditionField1) {
            description += this.localePipe.transform('component.participant.condition1') + matrix.conditionFieldText1 + `，`;
        }
        if (matrix.conditionField2) {
            description += this.localePipe.transform('component.participant.condition2') + matrix.conditionFieldText2 + `，`;
        }
        if (matrix.conditionField3) {
            description += this.localePipe.transform('component.participant.condition3') + matrix.conditionFieldText3 + `，`;
        }
        if (matrix.dataFieldAlias) {
            description += this.localePipe.transform('component.participant.data') + matrix.dataFieldAlias + `，`;
        }
        return description.slice(0, description.length - 1);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (this.humanPerformerGrid && this.humanPerformerGrid.selectedRow && this.humanPerformerGrid.selectedRow.data) {
                /** @type {?} */
                let temp = this.participant.humanPerformerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.id === this.humanPerformerGrid.selectedRow.data.id));
                temp.condition = cond;
            }
            if (this.potentialOwnerGrid && this.potentialOwnerGrid.selectedRow && this.potentialOwnerGrid.selectedRow.data) {
                /** @type {?} */
                let temp = this.participant.potentialOwnerList.find((/**
                 * @param {?} h
                 * @return {?}
                 */
                h => h.id === this.potentialOwnerGrid.selectedRow.data.id));
                temp.condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    humanPerformerCopyToPotentialOwner() {
        if (this.participant.humanPerformerList && this.participant.humanPerformerList.length > 0) {
            if (!this.participant.potentialOwnerList) {
                this.participant.potentialOwnerList = new Array();
            }
            this.participant.potentialOwnerList.push(...this.participant.humanPerformerList);
            this.participant.humanPerformerList = new Array();
            this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
            if (this.potentialOwnerGrid) {
                this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    potentialOwnerCopyToHumanPerformer() {
        if (this.participant.potentialOwnerList && this.participant.potentialOwnerList.length > 0) {
            if (!this.participant.humanPerformerList) {
                this.participant.humanPerformerList = new Array();
            }
            /** @type {?} */
            const performers = this.participant.potentialOwnerList.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.type !== 'wf.OrganizationParticipantExpression'));
            if (performers && performers.length > 0) {
                // 此处直接push会导致order重复,需要重新排序
                this.participant.humanPerformerList.push(...performers);
                this.participant.humanPerformerList.forEach((/**
                 * @param {?} human
                 * @param {?} index
                 * @return {?}
                 */
                (human, index) => {
                    human.order = index + 1;
                }));
                this.participant.potentialOwnerList = this.participant.potentialOwnerList.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type === 'wf.OrganizationParticipantExpression'));
                this.humanPerformerGrid.loadData(this.participant.humanPerformerList);
                if (this.potentialOwnerGrid) {
                    this.potentialOwnerGrid.loadData(this.participant.potentialOwnerList);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    GetOrganizationType() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ value: d.id, text: d.name })))));
    }
    // 构造不同参与者选择界面的尺寸 2023-7-5
    /**
     * @private
     * @param {?} boxType
     * @return {?}
     */
    attributeBoxSize(boxType) {
        /** @type {?} */
        const boxsize = {
            width: 760,
            height: 512
        };
        switch (boxType) {
            case 'wf.PositionParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 455;
                return boxsize;
            case 'wf.UserParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
            case 'wf.VariableParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 420;
                return boxsize;
                ;
            case 'wf.ReportingLineParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;
                ;
            case 'wf.MatrixParticipantExpression':
                boxsize.width = 780;
                boxsize.height = 420;
                return boxsize;
                ;
            case 'wf.ComponentParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 512;
                return boxsize;
                ;
            case 'wf.ActivityExecutorParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 320;
                return boxsize;
                ;
            case 'wf.OrganizationParticipantExpression':
                boxsize.width = 760;
                boxsize.height = 360;
                return boxsize;
                ;
        }
    }
}
ParticipantComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-participant',
                template: "<div class=\"f-page f-utils-overflow-xhya\">\r\n  <div class=\"f-page-main d-flex flex-column farris-overflow-y-auto\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section *ngIf=\"nodeType === 'userActivity'\" class=\"pt-0 f-section-form f-section-in-mainsubcard mb-1\" [showHeader]=\"false\" >\r\n      <div class=\"f-form-layout farris-form f-form-lable-auto farris-form-controls-inline\">\r\n        <div class=\"col-12 farris-group-wrap\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{'component.participant.allocationPolicy'|wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <farris-radiogroup [(ngModel)]=\"participant.assignStrategy.assignStrategy\" [data]=\"assignStrategyList\" name=\"assignStrategy\"\r\n                [horizontal]=\"true\" (changeValue)=\"assignStrategyChange($event)\">\r\n              </farris-radiogroup>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section *ngIf=\"nodeType === 'userActivity' && participant.assignStrategy.assignStrategy==='ASSIGN'\" class=\"pt-0 f-section-form f-section-in-mainsubcard\" [showHeader]=\"false\">\r\n      <div class=\"f-form-layout farris-form f-form-lable-auto farris-form-controls-inline\">\r\n        <div class=\"col-12 px-0 d-flex\">\r\n          <div class=\"col-4 farris-group-wrap\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.operator'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-combo-list [(ngModel)]=\"participant.assignStrategy.assignConfig.operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                  [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                  [panelHeight]=\"60\">\r\n                </farris-combo-list>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-auto farris-group-wrap f-form-label-xl\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.multiSelect'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-switch size=\"small\" [(ngModel)]=\"participant.assignStrategy.assignConfig.multiSelect\" name=\"multiSelect\">\r\n                </farris-switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-auto farris-group-wrap f-form-label-el\">\r\n            <div class=\"form-group\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.participant.necessary'|wfLocale}}</span>\r\n              </label>\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-switch size=\"small\" [(ngModel)]=\"participant.assignStrategy.assignConfig.necessary\" name=\"necessary\">\r\n                </farris-switch>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n    <div class=\"d-flex flex-column\" [ngStyle]=\"{'height':nodeType === 'notifyActivity'? '470px': participant.assignStrategy.assignStrategy==='ASSIGN' ? '220px':'470px'}\">\r\n      <farris-section class=\"pt-0 f-section-grid\" [mainTitle]=\"nodeType === 'notifyActivity' ? ('component.participant.notifyRecipient' | wfLocale) : ('component.participant.defaultHandler' | wfLocale)\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\" style=\"overflow: initial;\">\r\n      <ng-template farrisSectionToolbar>\r\n        <div class=\"btn-group mr-2\"  fDropdown #dropdownEl=\"fDropdown\" [autoRectify]=\"true\">\r\n          <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n            {{'component.participant.new'|wfLocale}}\r\n          </farris-button>\r\n          <div class=\"dropdown-menu\" fDropdownMenu>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression' ,'humanPerformer')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','humanPerformer')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','humanPerformer')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','humanPerformer')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','humanPerformer')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','humanPerformer')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n            <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','humanPerformer')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n          </div>\r\n        </div>\r\n        <farris-button  [type]=\"'link'\" (click)=\"editPerformer('humanPerformer')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"removePerformer('humanPerformer')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('humanPerformer')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"moveUp('humanPerformer')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n        <farris-button  [type]=\"'link'\" (click)=\"moveDown('humanPerformer')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill\">\r\n        <farris-datagrid #humanPerformerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.humanPerformerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n          [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n          [multiSelect]=\"false\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n    </div>\r\n    <div *ngIf=\"nodeType === 'userActivity' && participant.assignStrategy.assignStrategy==='ASSIGN'\" class=\"d-flex flex-column\" style=\"height: 220px;\">\r\n      <farris-section class=\"pt-0 f-section-grid\" mainTitle=\"{{'component.participant.alternativeHandler'|wfLocale}}\" [enableAccordion]=\"''\"\r\n        [enableMaximize]=\"false\" [fill]=\"true\" style=\"overflow: initial;\">\r\n      <ng-template farrisSectionHeader>\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{'component.participant.alternativeHandler'|wfLocale}}</h4>\r\n        </div>\r\n        <label class=\"col-form-label mr-2 mb-0\">\r\n          <span class=\"farris-label-text\">{{'component.participant.isAllScope'|wfLocale}}</span>\r\n        </label>\r\n        <farris-switch size=\"small\" [(ngModel)]=\"participant.isAllScope\" name=\"isAllScope\" (valueChange)=\"switchChange($event)\">\r\n        </farris-switch>\r\n        <div class=\"f-toolbar\" [ngStyle]=\"{'visibility' : participant.isAllScope ? 'hidden' : 'visible'}\">\r\n          <div class=\"btn-group mr-2\"  fDropdown #dropdownE2=\"fDropdown\" [autoRectify]=\"true\">\r\n            <farris-button class=\"dropdown-toggle\" fDropdownToggle [type]=\"'link'\">\r\n              {{'component.participant.new'|wfLocale}}\r\n            </farris-button>\r\n            <div class=\"dropdown-menu\" fDropdownMenu>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.UserParticipantExpression','potentialOwner')\"><span>{{'component.participant.user'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.VariableParticipantExpression','potentialOwner')\"><span>{{'component.participant.variable'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.PositionParticipantExpression','potentialOwner')\"><span>{{designerUIState.scene==='inSuite'?(('component.participant.role'|wfLocale)):('component.participant.position'|wfLocale)}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ReportingLineParticipantExpression','potentialOwner')\"><span>{{'component.participant.reportingLine'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ActivityExecutorParticipantExpression','potentialOwner')\"><span>{{'component.participant.activityExecutor'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.MatrixParticipantExpression','potentialOwner')\"><span>{{'component.participant.matrix'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.ComponentParticipantExpression','potentialOwner')\"><span>{{'component.participant.component'|wfLocale}}</span></li>\r\n              <li class=\"dropdown-item\" (click)=\"addPerformer('wf.OrganizationParticipantExpression','potentialOwner')\"><span>{{'component.participant.organization'|wfLocale}}\r\n              </span></li>\r\n            </div>\r\n          </div>\r\n          <farris-button  [type]=\"'link'\" (click)=\"editPerformer('potentialOwner')\">{{'component.participant.editPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"removePerformer('potentialOwner')\">{{'component.participant.removePerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"clearPerformer('potentialOwner')\">{{'component.participant.clearPerformer'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveUp('potentialOwner')\">{{'component.participant.moveUp'|wfLocale}}</farris-button>\r\n          <farris-button  [type]=\"'link'\" (click)=\"moveDown('potentialOwner')\">{{'component.participant.moveDown'|wfLocale}}</farris-button>\r\n        </div>\r\n      </ng-template>\r\n      <div class=\"f-utils-fill\">\r\n        <farris-datagrid #potentialOwnerGrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"participant.potentialOwnerList\" #defaultPerformerGrid [idField]=\"'id'\" [showLineNumber]=\"false\"\r\n          [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n          [multiSelect]=\"false\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </farris-section>\r\n    </div>\r\n  </section>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">{{'component.participant.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">{{'component.participant.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    ParticipantUIState,
                    WfLocalePipe
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ParticipantComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ParticipantUIState },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ExpressionService },
    { type: HttpService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ParticipantComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    dropDownEl: [{ type: ViewChild, args: ['dropdownEl',] }],
    dropDownE2: [{ type: ViewChild, args: ['dropdownE2',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    humanPerformerGrid: [{ type: ViewChild, args: ['humanPerformerGrid',] }],
    potentialOwnerGrid: [{ type: ViewChild, args: ['potentialOwnerGrid',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ParticipantComponent.prototype.closeModal;
    /** @type {?} */
    ParticipantComponent.prototype.submitModal;
    /** @type {?} */
    ParticipantComponent.prototype.modalFooter;
    /** @type {?} */
    ParticipantComponent.prototype.dropDownEl;
    /** @type {?} */
    ParticipantComponent.prototype.dropDownE2;
    /** @type {?} */
    ParticipantComponent.prototype.editFooter;
    /** @type {?} */
    ParticipantComponent.prototype.humanPerformerGrid;
    /** @type {?} */
    ParticipantComponent.prototype.potentialOwnerGrid;
    /** @type {?} */
    ParticipantComponent.prototype.editorParams;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.preAssignStrategy;
    /** @type {?} */
    ParticipantComponent.prototype.nodeType;
    /** @type {?} */
    ParticipantComponent.prototype.editDialog;
    /** @type {?} */
    ParticipantComponent.prototype.compRef;
    /** @type {?} */
    ParticipantComponent.prototype.isClose;
    /** @type {?} */
    ParticipantComponent.prototype.participant;
    /** @type {?} */
    ParticipantComponent.prototype.editState;
    /** @type {?} */
    ParticipantComponent.prototype.type;
    /** @type {?} */
    ParticipantComponent.prototype.assignStrategyList;
    /** @type {?} */
    ParticipantComponent.prototype.operatorCollection;
    /** @type {?} */
    ParticipantComponent.prototype.modalConfig;
    /** @type {?} */
    ParticipantComponent.prototype.columns;
    /** @type {?} */
    ParticipantComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ParticipantComponent.prototype.localePipe;
}
export class ParticipantConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.humanPerformerList && data.humanPerformerList.length > 0) {
            return this.localePipe.transform("component.participant.set");
        }
        if (data && data.potentialOwnerList && data.potentialOwnerList.length > 0) {
            return this.localePipe.transform("component.participant.set");
        }
        if (data && data.isAllScope) {
            return this.localePipe.transform("component.participant.set");
        }
        return this.localePipe.transform("component.participant.notSet");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ParticipantConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,