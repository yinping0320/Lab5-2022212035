/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ParticipantUIState {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
        this.typeCollection = [
            { text: this.localePipe.transform('component.participant.user'), value: 'wf.UserParticipantExpression' },
            { text: this.localePipe.transform('component.participant.variable'), value: 'wf.VariableParticipantExpression' },
            { text: this.localePipe.transform('component.participant.position'), value: 'wf.PositionParticipantExpression' },
            { text: this.localePipe.transform('component.participant.component'), value: 'wf.ComponentParticipantExpression' },
            { text: this.localePipe.transform('component.participant.reportingLine'), value: 'wf.ReportingLineParticipantExpression' },
            { text: this.localePipe.transform('component.participant.matrix'), value: 'wf.MatrixParticipantExpression' },
            { text: this.localePipe.transform('component.participant.activityExecutor'), value: 'wf.ActivityExecutorParticipantExpression' },
            { text: this.localePipe.transform('component.participant.organization'), value: 'wf.OrganizationParticipantExpression' }
        ];
    }
}
ParticipantUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParticipantUIState.ctorParameters = () => [
    { type: WfLocalePipe }
];
if (false) {
    /** @type {?} */
    ParticipantUIState.prototype.typeCollection;
    /**
     * @type {?}
     * @private
     */
    ParticipantUIState.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljaXBhbnQudWlzdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvcGFydGljaXBhbnQvcGFydGljaXBhbnQudWlzdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFHN0UsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUM3QixZQUNVLFVBQXdCO1FBQXhCLGVBQVUsR0FBVixVQUFVLENBQWM7UUFFbEMsbUJBQWMsR0FBRztZQUNmLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDLEVBQUUsS0FBSyxFQUFFLDhCQUE4QixFQUFFO1lBQ3hHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsS0FBSyxFQUFFLGtDQUFrQyxFQUFFO1lBQ2hILEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsS0FBSyxFQUFFLGtDQUFrQyxFQUFFO1lBQ2hILEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxDQUFDLEVBQUUsS0FBSyxFQUFFLG1DQUFtQyxFQUFFO1lBQ2xILEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLHFDQUFxQyxDQUFDLEVBQUUsS0FBSyxFQUFFLHVDQUF1QyxFQUFFO1lBQzFILEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLEVBQUUsS0FBSyxFQUFFLGdDQUFnQyxFQUFFO1lBQzVHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLHdDQUF3QyxDQUFDLEVBQUUsS0FBSyxFQUFFLDBDQUEwQyxFQUFFO1lBQ2hJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLG9DQUFvQyxDQUFDLEVBQUUsS0FBSyxFQUFFLHNDQUFzQyxFQUFFO1NBQ3pILENBQUM7SUFWQyxDQUFDOzs7WUFKTCxVQUFVOzs7O1lBRkYsWUFBWTs7OztJQU9uQiw0Q0FTRTs7Ozs7SUFYQSx3Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFdmTG9jYWxlUGlwZSB9IGZyb20gJy4uLy4uL2kxOG4vcGlwZS93Zi1wcm9jZXNzLWVkaXRvci1sb2NhbGUucGlwZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQYXJ0aWNpcGFudFVJU3RhdGUge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBsb2NhbGVQaXBlOiBXZkxvY2FsZVBpcGVcclxuICApIHt9XHJcbiAgdHlwZUNvbGxlY3Rpb24gPSBbXHJcbiAgICB7IHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5wYXJ0aWNpcGFudC51c2VyJyksIHZhbHVlOiAnd2YuVXNlclBhcnRpY2lwYW50RXhwcmVzc2lvbicgfSxcclxuICAgIHsgdGV4dDogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnBhcnRpY2lwYW50LnZhcmlhYmxlJyksIHZhbHVlOiAnd2YuVmFyaWFibGVQYXJ0aWNpcGFudEV4cHJlc3Npb24nIH0sXHJcbiAgICB7IHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5wYXJ0aWNpcGFudC5wb3NpdGlvbicpLCB2YWx1ZTogJ3dmLlBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uJyB9LFxyXG4gICAgeyB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQucGFydGljaXBhbnQuY29tcG9uZW50JyksIHZhbHVlOiAnd2YuQ29tcG9uZW50UGFydGljaXBhbnRFeHByZXNzaW9uJyB9LFxyXG4gICAgeyB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQucGFydGljaXBhbnQucmVwb3J0aW5nTGluZScpLCB2YWx1ZTogJ3dmLlJlcG9ydGluZ0xpbmVQYXJ0aWNpcGFudEV4cHJlc3Npb24nIH0sXHJcbiAgICB7IHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5wYXJ0aWNpcGFudC5tYXRyaXgnKSwgdmFsdWU6ICd3Zi5NYXRyaXhQYXJ0aWNpcGFudEV4cHJlc3Npb24nIH0sXHJcbiAgICB7IHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5wYXJ0aWNpcGFudC5hY3Rpdml0eUV4ZWN1dG9yJyksIHZhbHVlOiAnd2YuQWN0aXZpdHlFeGVjdXRvclBhcnRpY2lwYW50RXhwcmVzc2lvbicgfSxcclxuICAgIHsgdGV4dDogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnBhcnRpY2lwYW50Lm9yZ2FuaXphdGlvbicpLCB2YWx1ZTogJ3dmLk9yZ2FuaXphdGlvblBhcnRpY2lwYW50RXhwcmVzc2lvbicgfVxyXG4gIF07XHJcbn1cclxuIl19