/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, Input, ViewChild, EventEmitter, TemplateRef, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class EntryFormEditorComponent {
    /**
     * @param {?} http
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, message, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.entryFormEditor.flowForm'),
            width: 760,
            height: 506,
            showButtons: true
        };
        this.columns = [
            { title: this.localePipe.transform('component.entryFormEditor.code'), field: 'code', width: 100, sortable: true },
            { title: this.localePipe.transform('component.entryFormEditor.name'), field: 'name', width: 100, sortable: true },
            { title: this.localePipe.transform('component.entryFormEditor.base'), field: 'base', width: 60,
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.entryFormEditor.extend'), falseText: this.localePipe.transform('component.entryFormEditor.foundation') } } }
        ];
        this.data = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.flowFormId = data.id;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getBaseAndExtendFlowForm();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (!this.grid.selectedRow) {
            this.message.info(this.localePipe.transform('component.entryFormEditor.selectedRow'));
            return;
        }
        /** @type {?} */
        const object = { value: this.grid.selectedRow.data, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @return {?}
     */
    getBaseAndExtendFlowForm() {
        if (this.flowFormId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/flowForm/${this.flowFormId}/baseAndExtend`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re && re.length > 0) {
                    this.data = re;
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.grid.selectRow(this.flowFormId, true);
                    }), 0);
                }
                else {
                    this.message.info(this.localePipe.transform('component.entryFormEditor.absent'));
                }
            }));
        }
    }
}
EntryFormEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-entry-form-editor',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;margin-left: 6px;margin-right: 6px;\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" lineNumberTitle=\"{{'component.entryFormEditor.lineNumber' | wfLocale}}\"\r\n         [lineNumberWidth]=\"50\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.entryFormEditor.clickCancel' | wfLocale}}</button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.entryFormEditor.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
EntryFormEditorComponent.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
EntryFormEditorComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    editorParams: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    EntryFormEditorComponent.prototype.closeModal;
    /** @type {?} */
    EntryFormEditorComponent.prototype.submitModal;
    /** @type {?} */
    EntryFormEditorComponent.prototype.modalFooter;
    /** @type {?} */
    EntryFormEditorComponent.prototype.grid;
    /** @type {?} */
    EntryFormEditorComponent.prototype.editorParams;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.flowFormId;
    /** @type {?} */
    EntryFormEditorComponent.prototype.modalConfig;
    /** @type {?} */
    EntryFormEditorComponent.prototype.columns;
    /** @type {?} */
    EntryFormEditorComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    EntryFormEditorComponent.prototype.localePipe;
}
export class FlowFormConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data.name;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50cnktZm9ybS1lZGl0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi92aWV3cy9lbnRyeUZvcm0vZW50cnktZm9ybS1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQWlCLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3RLLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBV2hHLE1BQU0sT0FBTyx3QkFBd0I7Ozs7Ozs7OztJQW1DbkMsWUFDVSxJQUFpQixFQUNqQixPQUF3QixFQUNaLEdBQXNCLEVBQ2YsUUFBZ0IsRUFDUixTQUFjLEVBQzdCLFVBQXdCO1FBTHBDLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDWixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUNmLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDUixjQUFTLEdBQVQsU0FBUyxDQUFLO1FBQzdCLGVBQVUsR0FBVixVQUFVLENBQWM7UUF2Q3BDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3JDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQWF2QyxpQkFBWSxHQUFRLEVBQUUsQ0FBQztRQUdoQyxnQkFBVyxHQUFHO1lBQ1osS0FBSyxF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LE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO2lCQUNsRjtZQUNILENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUF2RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLHNpQ0FBaUQ7Z0JBRWpELFNBQVMsRUFBRTtvQkFDUixZQUFZO2lCQUNkOzthQUNGOzs7O1lBYlEsV0FBVztZQUVYLGVBQWU7WUFMd0UsaUJBQWlCLHVCQXVENUcsUUFBUTt5Q0FDUixNQUFNLFNBQUMsU0FBUzs0Q0FDaEIsTUFBTSxTQUFDLGlCQUFpQjtZQW5ERCxZQUFZLHVCQW9EbkMsUUFBUTs7O3lCQXZDVixNQUFNOzBCQUNOLE1BQU07b0JBRU4sS0FBSzswQkFPTCxTQUFTLFNBQUMsa0JBQWtCO21CQUU1QixTQUFTLFNBQUMsTUFBTTsyQkFFaEIsS0FBSzs7OztJQWROLDhDQUErQzs7SUFDL0MsK0NBQWdEOztJQVNoRCwrQ0FBNkQ7O0lBRTdELHdDQUEyQzs7SUFFM0MsZ0RBQWdDOzs7OztJQUVoQyw4Q0FBMkI7O0lBQzNCLCtDQUtFOztJQUVGLDJDQUtFOztJQUVGLHdDQUFVOzs7OztJQUdSLHdDQUF5Qjs7Ozs7SUFDekIsMkNBQWdDOzs7OztJQUNoQyx1Q0FBMEM7Ozs7O0lBQzFDLDRDQUEyQzs7Ozs7SUFDM0MsNkNBQWlEOzs7OztJQUNqRCw4Q0FBNEM7O0FBeUNoRCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLGdCQUFnQixDQUFDOzs7OztJQUVqQixTQUFTLENBQUMsSUFBSTtRQUNaLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgSW5wdXQsIFZpZXdDaGlsZCwgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiwgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9wdGlvbmFsLCBMT0NBTEVfSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhVGFibGVDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGF0YWJsZSc7XHJcbmltcG9ydCB7IFR5cGVDb252ZXJ0ZXIgfSBmcm9tICdAZmFycmlzL2lkZS1wcm9wZXJ0eS1wYW5lbCc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBXRl9MQU5HX1JFU09VUkNFUywgV2ZMb2NhbGVQaXBlIH0gZnJvbSAnLi4vLi4vaTE4bi9waXBlL3dmLXByb2Nlc3MtZWRpdG9yLWxvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgV0ZfUFJPQ0VTU19FRElUT1JfTEFOR19SRVNPVVJDRVMgfSBmcm9tICcuLi8uLi9pMThuL2Fzc2V0cy9sYW5nLnJlc291cmNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWVudHJ5LWZvcm0tZWRpdG9yJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZW50cnktZm9ybS1lZGl0b3IuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2VudHJ5LWZvcm0tZWRpdG9yLmNvbXBvbmVudC5jc3MnXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgICBXZkxvY2FsZVBpcGUsXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRW50cnlGb3JtRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQE91dHB1dCgpIGNsb3NlTW9kYWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgc3VibWl0TW9kYWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgdmFsdWUoZGF0YTogYW55KSB7XHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICB0aGlzLmZsb3dGb3JtSWQgPSBkYXRhLmlkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQFZpZXdDaGlsZCgnaWNvblNlbGVjdEZvb3RlcicpIG1vZGFsRm9vdGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICBAVmlld0NoaWxkKCdncmlkJykgZ3JpZDogRGF0YWdyaWRDb21wb25lbnQ7XHJcblxyXG4gIEBJbnB1dCgpIGVkaXRvclBhcmFtczogYW55ID0ge307XHJcblxyXG4gIHByaXZhdGUgZmxvd0Zvcm1JZDogc3RyaW5nO1xyXG4gIG1vZGFsQ29uZmlnID0ge1xyXG4gICAgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lbnRyeUZvcm1FZGl0b3IuZmxvd0Zvcm0nKSxcclxuICAgIHdpZHRoOiA3NjAsXHJcbiAgICBoZWlnaHQ6IDUwNixcclxuICAgIHNob3dCdXR0b25zOiB0cnVlXHJcbiAgfTtcclxuXHJcbiAgY29sdW1ucyA9IFtcclxuICAgIHsgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2NvbXBvbmVudC5lbnRyeUZvcm1FZGl0b3IuY29kZScpLCBmaWVsZDogJ2NvZGUnLCB3aWR0aDogMTAwLCBzb3J0YWJsZTogdHJ1ZSB9LFxyXG4gICAgeyB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmVudHJ5Rm9ybUVkaXRvci5uYW1lJyksIGZpZWxkOiAnbmFtZScsIHdpZHRoOiAxMDAsIHNvcnRhYmxlOiB0cnVlIH0sXHJcbiAgICB7IHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZW50cnlGb3JtRWRpdG9yLmJhc2UnKSwgZmllbGQ6ICdiYXNlJywgd2lkdGg6IDYwLFxyXG4gICAgZm9ybWF0dGVyOiB7IHR5cGU6ICdib29sZWFuJywgb3B0aW9uczogeyB0cnVlVGV4dDogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmVudHJ5Rm9ybUVkaXRvci5leHRlbmQnKSwgZmFsc2VUZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZW50cnlGb3JtRWRpdG9yLmZvdW5kYXRpb24nKSB9IH19XHJcbiAgXTtcclxuXHJcbiAgZGF0YSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG1lc3NhZ2U6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZUlkOiBzdHJpbmcsXHJcbiAgICBASW5qZWN0KFdGX0xBTkdfUkVTT1VSQ0VTKSBwcml2YXRlIHJlc291cmNlczogYW55LFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsb2NhbGVQaXBlOiBXZkxvY2FsZVBpcGUsXHJcbiAgKSB7XHJcbiAgICB0aGlzLmxvY2FsZVBpcGUgPSB0aGlzLmxvY2FsZVBpcGUgfHwgbmV3IFdmTG9jYWxlUGlwZShsb2NhbGVJZCwgcmVzb3VyY2VzKTtcclxuICAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuZ2V0QmFzZUFuZEV4dGVuZEZsb3dGb3JtKCk7XHJcbiAgfVxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICB9XHJcblxyXG4gIGNsaWNrT0soKSB7XHJcbiAgICBpZiAoIXRoaXMuZ3JpZC5zZWxlY3RlZFJvdykge1xyXG4gICAgICB0aGlzLm1lc3NhZ2UuaW5mbyh0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQuZW50cnlGb3JtRWRpdG9yLnNlbGVjdGVkUm93JykpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBvYmplY3QgPSB7IHZhbHVlOiB0aGlzLmdyaWQuc2VsZWN0ZWRSb3cuZGF0YSwgcGFyYW1ldGVyczogbnVsbCB9O1xyXG4gICAgdGhpcy5zdWJtaXRNb2RhbC5lbWl0KG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICBjbGlja0NhbmNlbCgpIHtcclxuICAgIHRoaXMuY2xvc2VNb2RhbC5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEJhc2VBbmRFeHRlbmRGbG93Rm9ybSgpIHtcclxuICAgIGlmICh0aGlzLmZsb3dGb3JtSWQpIHtcclxuICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL2Zsb3dGb3JtLyR7dGhpcy5mbG93Rm9ybUlkfS9iYXNlQW5kRXh0ZW5kYDtcclxuICAgICAgdGhpcy5odHRwLmdldCh1cmwpLnN1YnNjcmliZSgocmU6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChyZSAmJiByZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGEgPSByZTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQuc2VsZWN0Um93KHRoaXMuZmxvd0Zvcm1JZCwgdHJ1ZSk7XHJcbiAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5tZXNzYWdlLmluZm8odGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LmVudHJ5Rm9ybUVkaXRvci5hYnNlbnQnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbmV4cG9ydCBjbGFzcyBGbG93Rm9ybUNvbnZlcnRlciBpbXBsZW1lbnRzIFR5cGVDb252ZXJ0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIGNvbnZlcnRUbyhkYXRhKTogc3RyaW5nIHtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLm5hbWU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG4iXX0=