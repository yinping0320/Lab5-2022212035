/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, Injector, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { of } from 'rxjs';
import { LookupGridComponent, ServerSideToken } from '@farris/ui-lookup';
import { HttpService } from '@ecp-caf/caf-common';
import { switchMap } from 'rxjs/operators';
import { LookupDataService } from '@farris/lookup-config';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class SaveAsEditComponent {
    /**
     * @param {?} injector
     * @param {?} http
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(injector, http, message, cdr, localeId, resources, localePipe) {
        this.injector = injector;
        this.http = http;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.accessLevel = 'public';
        this.isAdministratorConfig = false;
        this.enableAdminOrgAut = false;
        this.dataUri = '/api/runtime/sys/v1.0/sysOrgs';
        this.loadType = 'layerload';
        this.disabled = false;
        // private _organizations: any[];
        // set organizations(data: any[]) {
        //   this._organizations = data;
        //   if (this._organizations && this._organizations.length > 0) {
        //     this.items = this.makeTreeByParent(this._organizations, 'parentId', 'id');
        //   } else {
        //     this.items = new Array();
        //   }
        // }
        // get organizations() {
        //   return this._organizations;
        // }
        this.items = new Array();
        this.accessLevelCollection = [
            { value: 'public', text: this.localePipe.transform('component.saveAsEdit.public') },
            { value: 'private', text: this.localePipe.transform('component.saveAsEdit.private') }
        ];
        this.columns = [
            { title: this.localePipe.transform('component.saveAsEdit.code'), field: 'code', width: '100', searchField: 'code' },
            { title: this.localePipe.transform('component.saveAsEdit.name'), field: 'name', width: '100', searchField: 'name' },
        ];
        this.dictPicking = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.lookUp.http = {
                getData: (/**
                 * @param {?} uri
                 * @param {?} params
                 * @return {?}
                 */
                (uri, params) => {
                    console.log(params);
                    /** @type {?} */
                    const searchValue = JSON.parse(params.searchValue);
                    /** @type {?} */
                    const parent = searchValue.parentId;
                    /** @type {?} */
                    let param;
                    if (this.lookUp._searchState && this.lookUp._searchState.field && this.lookUp._searchState.value) {
                        if (this.lookUp._searchState.field === '*') {
                            param = { codeOrName: this.lookUp._searchState.value };
                        }
                        else if (this.lookUp._searchState.field === 'name') {
                            param = { name: this.lookUp._searchState.value };
                        }
                        else {
                            param = { code: this.lookUp._searchState.value };
                        }
                    }
                    /** @type {?} */
                    let filter;
                    if (this.isAdministratorConfig) {
                        filter = this.administrator.administratorAuthorities.map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => ({
                            id: a.organization, rule: a.includeSubordinate ? 'SelectedAndChild' : 'Selected'
                        })));
                    }
                    return this.getSysOrgs(parent, param, filter).pipe(switchMap((/**
                     * @param {?} re
                     * @return {?}
                     */
                    (re) => {
                        console.log(re);
                        return of((/** @type {?} */ ({
                            columns: this.columns,
                            displayInfo: { idField: 'id', valueField: 'id', textField: 'name' },
                            displayType: 'TreeList',
                            idField: 'id',
                            valueField: 'id',
                            textField: 'name',
                            searchFields: [
                                { label: 'code', value: 'code' }, { label: 'name', value: 'name' }
                            ],
                            title: this.localePipe.transform('component.saveAsEdit.organization'),
                            total: 0,
                            treeInfo: {
                                dataField: 'treeinfo',
                                isDetailField: 'isDetail',
                                layerField: 'layer',
                                layerType: 'parentId',
                                loadDataType: 'async',
                                onlySelectLeaf: false,
                                parentField: 'parentElement',
                                pathField: 'path',
                                treeDataIsInit: true
                            },
                            items: this.orgTreeData(re, param)
                        })));
                    })));
                })
            };
            return of(true);
        });
        this.dictPicked = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.organizationName = data.name;
            this.organization = data.id;
            return of(true);
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    saveAsOK() {
        this.disabled = true;
        if (this.validator()) {
            this.submit.next({
                procName: this.procName,
                accessLevel: this.accessLevel,
                organization: this.organization,
                organizationName: this.organizationName
            });
        }
    }
    /**
     * @return {?}
     */
    saveAsCancel() {
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    validator() {
        if (!this.procName) {
            this.message.warning(this.localePipe.transform('component.saveAsEdit.nameNotEmpty'));
            this.disabled = false;
            return false;
        }
        if (!this.organization) {
            this.message.warning(this.localePipe.transform('component.saveAsEdit.organizationNotEmpty'));
            this.disabled = false;
            return false;
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    search(data) {
        /** @type {?} */
        const tt = (/** @type {?} */ (this.lookUp.componentRef.instance));
        tt.searchHandle.search(data.field, data.value, 'client');
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectedDataHandler(data) {
        this.organization = data.id;
        this.organizationName = data.name;
    }
    /**
     * @private
     * @param {?} orgs
     * @param {?} searchValue
     * @return {?}
     */
    orgTreeData(orgs, searchValue) {
        /** @type {?} */
        const result = new Array();
        /** @type {?} */
        const treeData = new Array();
        for (const org of orgs) {
            /** @type {?} */
            const entity = {};
            entity.data = org;
            entity.children = [];
            entity.id = org.id;
            entity.leaf = org.isDetail;
            entity.selectable = org.farris_selectable;
            treeData.push(entity);
        }
        /** @type {?} */
        const obj = {};
        // 使用对象重新存储数据
        /** @type {?} */
        const len = treeData.length;
        for (let i = 0; i < len; i++) {
            /** @type {?} */
            const d = treeData[i];
            obj[treeData[i].id] = treeData[i];
        }
        // 遍历数据
        for (let j = 0; j < len; j++) {
            /** @type {?} */
            const data = treeData[j];
            /** @type {?} */
            const parentData = obj[data.data.parentId];
            if (parentData) {
                if (!parentData.children) {
                    parentData.children = new Array();
                }
                parentData.children.push(data);
            }
            else {
                result.push(data);
            }
        }
        // 过滤的情况下，不包含下级的节点设置为叶子节点
        if (searchValue) {
            this.treeIterator(result);
        }
        return result;
    }
    /**
     * @private
     * @param {?} treeData
     * @return {?}
     */
    treeIterator(treeData) {
        if (treeData && treeData.length > 0) {
            for (const d of treeData) {
                if (d.children && d.children.length > 0) {
                    this.treeIterator(d.children);
                }
                else {
                    d.leaf = true;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?} orgs
     * @return {?}
     */
    findChild(item, orgs) {
        /** @type {?} */
        const childList = orgs.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem.parentId === item.id) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity.data = child;
                childEntity.children = [];
                childEntity.id = child.id;
                childEntity.leaf = child.isDetail;
                childEntity.selectable = child.farris_selectable;
                item.children.push(childEntity);
                this.findChild(childEntity, orgs);
            }));
        }
    }
    /**
     * 按照parent码构造树
     * @private
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    makeTreeByParent(datas, parentField, keyField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (!x[parentField]) {
                return true;
            }
            /** @type {?} */
            const p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[keyField] === x[parentField]));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const entity = {};
            entity.data = x;
            entity.children = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @private
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    findChildrenByParent(parent, datas, parentField, keyField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[parentField] === parent.data[keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity.data = child;
                childEntity.children = [];
                parent.children.push(childEntity);
                this.findChildrenByParent(childEntity, datas, parentField, keyField);
            }));
        }
    }
    /**
     * @private
     * @param {?} parent
     * @param {?} searchValue
     * @param {?} filter
     * @return {?}
     */
    getSysOrgs(parent, searchValue, filter) {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/sysOrgs`;
        /** @type {?} */
        let param;
        if (searchValue) {
            param = Object.assign(searchValue, {
                IsSearchTree: true,
                withPermission: true,
                ruleFilter: filter
            });
        }
        else {
            if (parent) {
                param = Object.assign({}, {
                    parentId: parent,
                    withPermission: true,
                    ruleFilter: filter
                });
            }
            else {
                param = Object.assign({}, {
                    parentId: '',
                    layer: 1,
                    withPermission: true,
                    ruleFilter: filter
                });
            }
        }
        url += `?param=${JSON.stringify(param)}`;
        return this.http.get(url);
    }
}
SaveAsEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-save-as-edit',
                template: "<!-- <div class=\"f-page\">\r\n  <div class=\"f-page-main\">\r\n    <div class=\"d-flex m-2 py-2 farris-row\">\r\n      <div class=\"w-100 px-4\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">\u6D41\u7A0B\u540D\u79F0</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" />\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"d-flex m-2 py-2 farris-row\">\r\n      <div class=\"px-4 w-100\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">\u6D41\u7A0BKey\u503C</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procKey\" name=\"procKey\" [readonly]=\"true\" />\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> -->\r\n\r\n<div class=\"f-page f-page-card f-page-is-mainsubcard\">\r\n  <section class=\"f-page-main\">\r\n    <!--\u4E0D\u786E\u8BA4---------------------------\u5361\u7247\u7EC4\u4EF6\u4E0D\u540C\u7684Section\u662F\u5728\u4E0D\u540C\u7684\u7EC4\u4EF6\u91CC\uFF0C\u8FD8\u662F\u5728\u540C\u4E00\u4E2A\u5361\u7247\u7EC4\u4EF6\u91CC-->\r\n    <!--\u8868\u5355\u533A\u57DF-->\r\n    <!--\u9700\u8981\u5D4C\u5957\u7684\u5C42---------------------------IDE\u8F6C\u5316\u6210\u7EC4\u4EF6----------->\r\n    <div class=\"f-struct-wrapper\">\r\n      <farris-section class=\"f-section-form f-section-in-mainsubcard\" [enableAccordion]=\"''\" mainTitle=\"{{'component.saveAsEdit.basicAttributes'|wfLocale}}\"\r\n        [subTitle]=\"''\" [enableMaximize]=\"false\">\r\n\r\n        <!--\u8F93\u5165\u63A7\u4EF6 \u6CA1\u6709\u5206\u7EC4-->\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline pr-4 m-2\">\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.processName' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.processKeyValue' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procKey\" name=\"procKey\" [readonly]=\"true\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.maintenanceOrg' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-lookup-grid *ngIf=\"!enableAdminOrgAut; else adminOrg\" #lookup [(ngModel)]=\"organizationName\" name=\"orgName\"\r\n                    [singleSelect]=\"true\" [dictPicked]=\"dictPicked\"\r\n                    [enableClear]=\"false\"\r\n                    [editable]=\"false\"\r\n                    [dictPicking]=\"dictPicking\"\r\n                    [uri]=\"dataUri\"\r\n                    [loadTreeDataType]=\"loadType\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.saveAsEdit.accessLevel' | wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"accessLevel\" name=\"accessLevel\"\r\n                    [ngModelOptions]=\"{standalone: true}\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"accessLevelCollection\" [panelHeight]=\"'auto'\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </farris-section>\r\n    </div>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"saveAsCancel()\">{{'component.saveAsEdit.saveAsCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-sm btn-primary mx-2\" [disabled]=\"disabled\" (click)=\"saveAsOK()\">{{'component.saveAsEdit.saveAsOK' | wfLocale}}</button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #adminOrg>\r\n  <farris-lookup-grid #adminOrgLookup [(ngModel)]=\"organizationName\" name=\"adminOrgName\"\r\n    [helpId]=\"'processdesigneradminorgdataaut'\" [enableClear]=\"false\" [editable]=\"false\"\r\n    [singleSelect]=\"true\" [uri]=\"'assets/data/tree-list-help.json'\" (selectedData)=\"selectedDataHandler($event)\">\r\n  </farris-lookup-grid>\r\n</ng-template>\r\n",
                providers: [
                    { provide: ServerSideToken, useClass: LookupDataService },
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SaveAsEditComponent.ctorParameters = () => [
    { type: Injector },
    { type: HttpService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
SaveAsEditComponent.propDecorators = {
    btnRef: [{ type: ViewChild, args: ['buttonRef',] }],
    procName: [{ type: Input }],
    procKey: [{ type: Input }],
    lookUp: [{ type: ViewChild, args: ['lookup',] }],
    submit: [{ type: Output }],
    cancel: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SaveAsEditComponent.prototype.btnRef;
    /** @type {?} */
    SaveAsEditComponent.prototype.procName;
    /** @type {?} */
    SaveAsEditComponent.prototype.procKey;
    /** @type {?} */
    SaveAsEditComponent.prototype.lookUp;
    /** @type {?} */
    SaveAsEditComponent.prototype.submit;
    /** @type {?} */
    SaveAsEditComponent.prototype.cancel;
    /** @type {?} */
    SaveAsEditComponent.prototype.accessLevel;
    /** @type {?} */
    SaveAsEditComponent.prototype.organization;
    /** @type {?} */
    SaveAsEditComponent.prototype.organizationName;
    /** @type {?} */
    SaveAsEditComponent.prototype.isAdministratorConfig;
    /** @type {?} */
    SaveAsEditComponent.prototype.enableAdminOrgAut;
    /** @type {?} */
    SaveAsEditComponent.prototype.administrator;
    /** @type {?} */
    SaveAsEditComponent.prototype.dataUri;
    /** @type {?} */
    SaveAsEditComponent.prototype.loadType;
    /** @type {?} */
    SaveAsEditComponent.prototype.disabled;
    /** @type {?} */
    SaveAsEditComponent.prototype.items;
    /** @type {?} */
    SaveAsEditComponent.prototype.accessLevelCollection;
    /** @type {?} */
    SaveAsEditComponent.prototype.columns;
    /** @type {?} */
    SaveAsEditComponent.prototype.dictPicking;
    /** @type {?} */
    SaveAsEditComponent.prototype.dictPicked;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    SaveAsEditComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,