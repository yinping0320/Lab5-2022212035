/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { ReplaySubject } from 'rxjs/ReplaySubject';
export class PerformerConfigService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.lookupConfig = new ReplaySubject();
        // let rootPath = '';
        // try {
        //     rootPath = (window as any).gspframeworkService.common.getBasePath.get();
        // } catch (error) {
        // }
        // this.http.get(rootPath + '/platform/runtime/wf/web/wf-proc-designer/assets/config/performerlookupconfig.json').subscribe((data) => {
        this.http.get('/platform/runtime/wf/web/wf-proc-designer/assets/config/performerlookupconfig.json').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.lookupConfig.next(data);
        }));
    }
    /**
     * @return {?}
     */
    getLookupConfig() {
        return this.lookupConfig.asObservable();
    }
}
PerformerConfigService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PerformerConfigService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PerformerConfigService.prototype.lookupConfig;
    /**
     * @type {?}
     * @private
     */
    PerformerConfigService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWVyLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi92aWV3cy9wZXJmb3JtZXIvcGVyZm9ybWVyLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHbkQsTUFBTSxPQUFPLHNCQUFzQjs7OztJQUUvQixZQUFvQixJQUFpQjtRQUFqQixTQUFJLEdBQUosSUFBSSxDQUFhO1FBRDdCLGlCQUFZLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUU1QyxxQkFBcUI7UUFDckIsUUFBUTtRQUNSLCtFQUErRTtRQUMvRSxvQkFBb0I7UUFDcEIsSUFBSTtRQUNKLHVJQUF1STtRQUN2SSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvRkFBb0YsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ25ILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7O1lBakJKLFVBQVU7Ozs7WUFKRixXQUFXOzs7Ozs7O0lBTWhCLDhDQUFnRDs7Ozs7SUFDcEMsc0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzL1JlcGxheVN1YmplY3QnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUGVyZm9ybWVyQ29uZmlnU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGxvb2t1cENvbmZpZyA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UpIHtcclxuICAgICAgICAvLyBsZXQgcm9vdFBhdGggPSAnJztcclxuICAgICAgICAvLyB0cnkge1xyXG4gICAgICAgIC8vICAgICByb290UGF0aCA9ICh3aW5kb3cgYXMgYW55KS5nc3BmcmFtZXdvcmtTZXJ2aWNlLmNvbW1vbi5nZXRCYXNlUGF0aC5nZXQoKTtcclxuICAgICAgICAvLyB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyB0aGlzLmh0dHAuZ2V0KHJvb3RQYXRoICsgJy9wbGF0Zm9ybS9ydW50aW1lL3dmL3dlYi93Zi1wcm9jLWRlc2lnbmVyL2Fzc2V0cy9jb25maWcvcGVyZm9ybWVybG9va3VwY29uZmlnLmpzb24nKS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcclxuICAgICAgICB0aGlzLmh0dHAuZ2V0KCcvcGxhdGZvcm0vcnVudGltZS93Zi93ZWIvd2YtcHJvYy1kZXNpZ25lci9hc3NldHMvY29uZmlnL3BlcmZvcm1lcmxvb2t1cGNvbmZpZy5qc29uJykuc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9va3VwQ29uZmlnLm5leHQoZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TG9va3VwQ29uZmlnKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwQ29uZmlnLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==