/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
export class ComponentPerformerService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @param {?} pageIndex
     * @param {?} pageSiza
     * @param {?=} search
     * @return {?}
     */
    getLookUpData(helpId, su, pageIndex, pageSiza, search) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/dtProcDefs/getHelpData?helpId=${helpId}&pageIndex=${pageIndex}&pageSize=${pageSiza}`;
        if (search) {
            url += `&searchValue=${JSON.stringify(search)}`;
        }
        return this.http.get(url);
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    getHelpMetaData(helpId, su) {
        /** @type {?} */
        const url = `/api/runtime/lcm/v1.0/rt-metadatas/${helpId}`;
        return this.http.get(url);
    }
}
ComponentPerformerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComponentPerformerService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LXBlcmZvcm1lci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi92aWV3cy9wZXJmb3JtZXIvdmlld3MvY29tcG9uZW50LXBlcmZvcm1lci9jb21wb25lbnQtcGVyZm9ybWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSWxELE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUFDbEMsWUFBb0IsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUVyQyxDQUFDOzs7Ozs7Ozs7SUFDRCxhQUFhLENBQUMsTUFBYyxFQUFFLEVBQVUsRUFBRSxTQUFpQixFQUFFLFFBQWdCLEVBQUUsTUFBWTs7WUFDbkYsR0FBRyxHQUFHLHNEQUFzRCxNQUFNLGNBQWMsU0FBUyxhQUFhLFFBQVEsRUFBRTtRQUNwSCxJQUFJLE1BQU0sRUFBRTtZQUNSLEdBQUcsSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7SUFDRCxlQUFlLENBQUMsTUFBYyxFQUFFLEVBQVU7O2NBQ2hDLEdBQUcsR0FBRyxzQ0FBc0MsTUFBTSxFQUFFO1FBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7O1lBZkosVUFBVTs7OztZQUhGLFdBQVc7Ozs7Ozs7SUFLSix5Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFBlcmZvcm1lclNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZSkge1xyXG5cclxuICAgIH1cclxuICAgIGdldExvb2tVcERhdGEoaGVscElkOiBzdHJpbmcsIHN1OiBzdHJpbmcsIHBhZ2VJbmRleDogbnVtYmVyLCBwYWdlU2l6YTogbnVtYmVyLCBzZWFyY2g/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGxldCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvZHRQcm9jRGVmcy9nZXRIZWxwRGF0YT9oZWxwSWQ9JHtoZWxwSWR9JnBhZ2VJbmRleD0ke3BhZ2VJbmRleH0mcGFnZVNpemU9JHtwYWdlU2l6YX1gO1xyXG4gICAgICAgIGlmIChzZWFyY2gpIHtcclxuICAgICAgICAgICAgdXJsICs9IGAmc2VhcmNoVmFsdWU9JHtKU09OLnN0cmluZ2lmeShzZWFyY2gpfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICB9XHJcbiAgICBnZXRIZWxwTWV0YURhdGEoaGVscElkOiBzdHJpbmcsIHN1OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvbGNtL3YxLjAvcnQtbWV0YWRhdGFzLyR7aGVscElkfWA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgIH1cclxufVxyXG4iXX0=