/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
export class WfReportDefHelpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            let query = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    query += `"codeOrNameLike":"${searchValue.searchValue}",`;
                }
                else {
                    query += `"${searchValue.searchField}":"${searchValue.searchValue}",`;
                }
            }
            if (customData.filter) {
                /** @type {?} */
                const keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    for (const key of keys) {
                        if (customData.filter[key]) {
                            query += `"${key}":"${customData.filter[key]}",`;
                        }
                    }
                }
            }
            if (query.substr(query.length - 1, 1) === ',') {
                query = query.substring(0, query.length - 1);
            }
            query += '}';
            query = encodeURIComponent(query);
            query += `&pageIndex=${index}&pageSize=${size}`;
            url += '?pageFilter=' + query;
        }
        else {
            url += `?pageIndex=${index}&pageSize=${size}`;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }))));
    }
}
WfReportDefHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WfReportDefHelpService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WfReportDefHelpService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtcmVwb3J0LWRlZi1oZWxwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3BlcmZvcm1lci92aWV3cy9yZXBvcnRpbmctbGluZS9zZXJ2aWNlL3dmLXJlcG9ydC1kZWYtaGVscC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsTUFBTSxPQUFPLHNCQUFzQjs7OztJQUVqQyxZQUNVLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFFM0IsQ0FBQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxNQUFxQjs7Y0FDbEMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVOztjQUM5QixLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDOztjQUM3QixJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFOztjQUM1QixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2xELElBQUksV0FBVyxDQUFDLFdBQVcsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFOztnQkFDNUMsS0FBSyxHQUFHLEdBQUc7WUFDZixJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUU7Z0JBQzNCLElBQUksV0FBVyxDQUFDLFdBQVcsS0FBSyxHQUFHLEVBQUU7b0JBQ25DLEtBQUssSUFBSSxxQkFBcUIsV0FBVyxDQUFDLFdBQVcsSUFBSSxDQUFDO2lCQUMzRDtxQkFBTTtvQkFDTCxLQUFLLElBQUksSUFBSSxXQUFXLENBQUMsV0FBVyxNQUFNLFdBQVcsQ0FBQyxXQUFXLElBQUksQ0FBQztpQkFDdkU7YUFDRjtZQUNELElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTs7c0JBQ2YsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztnQkFDM0MsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQzNCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO3dCQUN0QixJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7NEJBQzFCLEtBQUssSUFBSSxJQUFJLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7eUJBQ2xEO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUM3QyxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5QztZQUNELEtBQUssSUFBSSxHQUFHLENBQUM7WUFDYixLQUFLLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyxJQUFJLGNBQWMsS0FBSyxhQUFhLElBQUksRUFBRSxDQUFDO1lBQ2hELEdBQUcsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO1NBQy9CO2FBQU07WUFDTCxHQUFHLElBQUksY0FBYyxLQUFLLGFBQWEsSUFBSSxFQUFFLENBQUM7U0FDL0M7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRzs7OztRQUFDLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTztZQUNqQixLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWE7WUFDdkIsUUFBUSxFQUFFO2dCQUNSLFNBQVMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDO2dCQUNyQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRO2dCQUM5QixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO2dCQUMvQixXQUFXLEVBQUUsSUFBSTthQUNsQjtTQUNGLENBQUMsRUFBQyxDQUNKLENBQUM7SUFDSixDQUFDOzs7WUF0REYsVUFBVTs7OztZQUpGLFdBQVc7Ozs7Ozs7SUFRaEIsc0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUxvb2t1cEh0dHBTZXJ2aWNlLCBSZW1vdGVQYXJhbXMsIExvb2t1cEdyaWRSZXN1bHQgfSBmcm9tICdAZmFycmlzL3VpLWxvb2t1cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2ZSZXBvcnREZWZIZWxwU2VydmljZSBpbXBsZW1lbnRzIElMb29rdXBIdHRwU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YSh1cmw6IHN0cmluZywgcGFyYW1zPzogUmVtb3RlUGFyYW1zKTogT2JzZXJ2YWJsZTxMb29rdXBHcmlkUmVzdWx0PiB7XHJcbiAgICBjb25zdCBjdXN0b21EYXRhID0gcGFyYW1zLmN1c3RvbURhdGE7XHJcbiAgICBjb25zdCBpbmRleCA9IHBhcmFtcy5wYWdlSW5kZXggfHwgMTtcclxuICAgIGNvbnN0IHNpemUgPSBwYXJhbXMucGFnZVNpemUgfHwgMjA7XHJcbiAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IEpTT04ucGFyc2UocGFyYW1zLnNlYXJjaFZhbHVlKTtcclxuICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSB8fCBjdXN0b21EYXRhLmZpbHRlcikge1xyXG4gICAgICBsZXQgcXVlcnkgPSAneyc7XHJcbiAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZSkge1xyXG4gICAgICAgIGlmIChzZWFyY2hWYWx1ZS5zZWFyY2hGaWVsZCA9PT0gJyonKSB7XHJcbiAgICAgICAgICBxdWVyeSArPSBgXCJjb2RlT3JOYW1lTGlrZVwiOlwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZX1cIixgO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBxdWVyeSArPSBgXCIke3NlYXJjaFZhbHVlLnNlYXJjaEZpZWxkfVwiOlwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZX1cIixgO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoY3VzdG9tRGF0YS5maWx0ZXIpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY3VzdG9tRGF0YS5maWx0ZXIpO1xyXG4gICAgICAgIGlmIChrZXlzICYmIGtleXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgICAgICBpZiAoY3VzdG9tRGF0YS5maWx0ZXJba2V5XSkge1xyXG4gICAgICAgICAgICAgIHF1ZXJ5ICs9IGBcIiR7a2V5fVwiOlwiJHtjdXN0b21EYXRhLmZpbHRlcltrZXldfVwiLGA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHF1ZXJ5LnN1YnN0cihxdWVyeS5sZW5ndGggLSAxLCAxKSA9PT0gJywnKSB7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5zdWJzdHJpbmcoMCwgcXVlcnkubGVuZ3RoIC0gMSk7XHJcbiAgICAgIH1cclxuICAgICAgcXVlcnkgKz0gJ30nO1xyXG4gICAgICBxdWVyeSA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSk7XHJcbiAgICAgIHF1ZXJ5ICs9IGAmcGFnZUluZGV4PSR7aW5kZXh9JnBhZ2VTaXplPSR7c2l6ZX1gO1xyXG4gICAgICB1cmwgKz0gJz9wYWdlRmlsdGVyPScgKyBxdWVyeTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHVybCArPSBgP3BhZ2VJbmRleD0ke2luZGV4fSZwYWdlU2l6ZT0ke3NpemV9YDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkucGlwZShcclxuICAgICAgbWFwKChyZTogYW55KSA9PiAoe1xyXG4gICAgICAgIGl0ZW1zOiByZS5jb250ZW50LFxyXG4gICAgICAgIHRvdGFsOiByZS50b3RhbEVsZW1lbnRzLFxyXG4gICAgICAgIHBhZ2VJbmZvOiB7XHJcbiAgICAgICAgICBwYWdlSW5kZXg6IHJlLnBhZ2VhYmxlLnBhZ2VOdW1iZXIgKyAxLFxyXG4gICAgICAgICAgcGFnZVNpemU6IHJlLnBhZ2VhYmxlLnBhZ2VTaXplLFxyXG4gICAgICAgICAgcGFnZUxpc3Q6IFsyMCwgNDAsIDYwLCA4MCwgMTAwXSxcclxuICAgICAgICAgIGVuYWJsZVBhZ2VyOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==