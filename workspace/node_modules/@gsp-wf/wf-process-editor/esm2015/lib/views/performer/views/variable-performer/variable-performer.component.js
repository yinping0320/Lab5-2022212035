/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewChild, NgZone, ElementRef, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from '@farris/ui-messager';
import { VariablePerformerEntity } from '../../entities/variable-performer.entity';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class VariablePerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} ngZone
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?=} http
     * @param {?=} message
     */
    constructor(designerUIState, expr, ngZone, cdr, localeId, resources, localePipe, http, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.http = http;
        this.message = message;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.editState = true;
        this.bindingData = {};
        this.inSuiteField = [];
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
        ];
        this.userTypeButtonNeedShow = false;
        this.personnelRelationShipTypes = [
            { name: this.localePipe.transform('component.variablePerformer.oneself'), value: 'oneself' },
        ];
        this.curOrgType = this.variableOrgTypes[0].value;
        this.relationShipType = this.designerUIState.scene !== 'inSuite' ? this.personnelRelationShipTypes[0].value : null;
        this.scene = this.designerUIState.scene;
        this.users = [];
        this.user = new VariablePerformerEntity();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.userTypeButtonNeedShow = data;
            if (this.designerUIState.scene === 'inSuite') {
                this.userTypeButtonNeedShow = true;
                this.variableOrgTypes = [
                    { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                    { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                    { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
                ];
                this.getInSuiteField(this.user.varType ? this.user.varType : 'Sys');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        // 流程变量表达式编辑器清空
        this.bindingData = {};
        this.users = [];
        this.user = null;
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
        ];
        if (this.designerUIState.scene === 'inSuite') {
            this.variableOrgTypes = [
                { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
            ];
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        this.showExprHelp();
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    showExprHelp() {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (this.users.length > 0) {
            this.expr.addExpressionText(this.users[0].varValue ? this.users[0].varValue : this.users[0].performerId);
        }
        else {
            this.expr.addExpressionText('');
        }
        // 2023-6-13 编辑时表达式编辑器只读
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            if (expressioninfo) {
                /** @type {?} */
                const user = new VariablePerformerEntity(expressioninfo, '', 'wf.VariableParticipantExpression');
                user.tag = 'expression';
                user.performerName = this.variableParticipantName(expressioninfo);
                user.name = this.variableParticipantName(expressioninfo);
                user.varType = this.curOrgType;
                if (this.designerUIState.scene === 'inSuite') {
                    user.relation = this.relationShipType;
                }
                else {
                    user.relation = this.personnelRelationShipTypes[0].value;
                }
                if (this.variableParticipantName(expressioninfo) === '') {
                    // 如果先勾选行政人员id，再选择上下文变量，则提示并将变量值类型置为1
                    this.message.info(this.localePipe.transform('component.variablePerformer.cantUseContext'));
                    this.curOrgType = this.variableOrgTypes[0].value;
                }
                else {
                    this.users = [user];
                    this.user = user;
                }
                for (const c of this.designerUIState.participantContext) {
                    // 根据表达式中的函数名判断是否使用的是上下文变量,除三种特殊上下文变量其余放开限制
                    if (user.performerId.indexOf(c.key) >= 0) {
                        this.variableOrgTypes = [
                            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' }
                        ];
                        break;
                    }
                    else {
                        this.variableOrgTypes = [
                            { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                            { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                        ];
                        if (this.designerUIState.scene === 'inSuite') {
                            this.variableOrgTypes = [
                                { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                                { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                                { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
                            ];
                        }
                    }
                }
            }
            else {
                this.users = [];
                this.user = null;
                this.variableOrgTypes = [
                    { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                    { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                ];
                if (this.designerUIState.scene === 'inSuite') {
                    this.variableOrgTypes = [
                        { name: this.localePipe.transform('component.variablePerformer.sys'), value: 'Sys' },
                        { name: this.localePipe.transform('component.variablePerformer.administrative_staff'), value: 'Administrative_staff' },
                        { name: this.localePipe.transform('component.variablePerformer.administrative_organization'), value: 'Administrative_organization' }
                    ];
                }
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        if (this.user) {
            this.user.varValue = this.user.performerId ? this.user.performerId : this.user.varValue;
            this.user.name = this.user.performerName ? this.user.performerName : this.user.name;
            // this.user.name = this.getRealName(this.user);
            this.user.varType = this.curOrgType;
            this.user.relation = this.relationShipType;
            this.user.condition = this.condition ? this.condition : '';
        }
        return this.user;
    }
    // TODO: 变量参与者选多个值时名称只能显示一个，待调整
    // getRealName(user: any) {
    //   // 2023-6-15 计算是否是多值，排除表达式里自带的一个逗号
    //   let r = user.name;
    //   let id = user.varValue;
    //   let char = ',';
    //   let count = id.split(char).length - 1;
    //   if (count > 1) {
    //     r += ' 等';
    //   }
    //   return r;
    // }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                if (this.curOrgType !== 'Sys') { // 行政人员类型不允许使用上下文变量
                    return '';
                }
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return JSON.parse(expr).expr;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.curOrgType = this.variableOrgTypes[0].value;
        }
        else if (data === 'Administrative_staff') {
            this.curOrgType = this.variableOrgTypes[1].value;
        }
        else {
            this.curOrgType = this.variableOrgTypes[2].value;
        }
        // 如果是inSuite场景需要获取inSuite部门的负责人，分管领导等关系
        if (this.designerUIState.scene === 'inSuite') {
            this.getInSuiteField(data);
            this.relationShipType = null;
        }
        else {
            this.relationShipType = this.personnelRelationShipTypes[0].value;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    enabledStateChange(data) {
        this.relationShipType = data.value;
    }
    /**
     * @param {?} fieldType
     * @return {?}
     */
    getInSuiteField(fieldType) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/dtProcDefs/getInSuiteFields/${fieldType}`;
        this.http.get(url).subscribe((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            this.inSuiteField = [];
            for (const f of field) {
                /** @type {?} */
                const type = {
                    name: f.field_description,
                    value: f.field
                };
                // 清空inSuiteField
                this.inSuiteField.push(type);
            }
        }));
    }
}
VariablePerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-variable-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.variablePerformer.processVariables'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | variableName \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                        (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <ng-container *ngIf=\"userTypeButtonNeedShow\">\r\n            <div class=\"col-12 farris-group-auto my-4\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">{{'component.variablePerformer.variableOrgTypes'|wfLocale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-radiogroup [data]=\"variableOrgTypes\" [horizontal]=\"true\"\r\n                                       [(ngModel)]=\"curOrgType\" name=\"referObject\"\r\n                                       (changeValue)=\"orgTypeChange($event)\"\r\n                    ></farris-radiogroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n            <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.variablePerformer.relationShipType'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [data]=\"scene !== 'inSuite'?personnelRelationShipTypes:inSuiteField\"\r\n                                     [idField]=\"'value'\" [textField]=\"'name'\" [valueField]=\"'value'\" [readonly]=\"scene !== 'inSuite'\"\r\n                                     [(ngModel)]=\"relationShipType\" name=\"relationShipObject\" (valueChange)=\"enabledStateChange($event)\"\r\n                  ></farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.variablePerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
VariablePerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: NgZone },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: HttpService },
    { type: MessagerService }
];
VariablePerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};
if (false) {
    /** @type {?} */
    VariablePerformerComponent.prototype.cls;
    /** @type {?} */
    VariablePerformerComponent.prototype.inputGroup;
    /** @type {?} */
    VariablePerformerComponent.prototype.showClearButton;
    /** @type {?} */
    VariablePerformerComponent.prototype.editState;
    /** @type {?} */
    VariablePerformerComponent.prototype.bindingData;
    /** @type {?} */
    VariablePerformerComponent.prototype.inSuiteField;
    /** @type {?} */
    VariablePerformerComponent.prototype.variableOrgTypes;
    /** @type {?} */
    VariablePerformerComponent.prototype.userTypeButtonNeedShow;
    /** @type {?} */
    VariablePerformerComponent.prototype.personnelRelationShipTypes;
    /** @type {?} */
    VariablePerformerComponent.prototype.curOrgType;
    /** @type {?} */
    VariablePerformerComponent.prototype.relationShipType;
    /** @type {?} */
    VariablePerformerComponent.prototype.scene;
    /** @type {?} */
    VariablePerformerComponent.prototype.condition;
    /** @type {?} */
    VariablePerformerComponent.prototype.users;
    /** @type {?} */
    VariablePerformerComponent.prototype.user;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.localePipe;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VariablePerformerComponent.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,