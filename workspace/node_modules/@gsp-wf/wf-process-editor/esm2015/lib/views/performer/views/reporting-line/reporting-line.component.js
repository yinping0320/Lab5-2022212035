/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, HostBinding, ElementRef, NgZone, Input, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { ReportingLineDataEntity } from './reporting-line-data.entity';
import { of } from 'rxjs';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { LookupGridComponent } from '@farris/ui-lookup';
import { SysFarrisTreeHelpComponent } from "@gsp-sys/sysmgr-ui";
import { PerformerEntity } from "../../entities/performer.entity";
import { WfReportDefHelpComponent } from "./service/wf-report-def-help.component";
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class ReportingLineComponent {
    /**
     * @param {?} http
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} ngZone
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, designerUIState, expr, ngZone, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.treeFilter = '';
        this.display = 'none';
        this.typeReadOnly = false;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.defName = '';
        /**
         * 汇报关系数据
         */
        this.reportingLineDataEntity = new ReportingLineDataEntity();
        /**
         * 汇报关系定义列表
         */
        this.reportingLineDefinitionList = [];
        this.reportingLineDimension = [];
        this.showClearButton = false;
        this.items = [];
        this.users = [];
        this.departments = [];
        this.pageIndex = 1;
        this.pageSize = 20;
        this.pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        /**
         * 汇报类型显示列
         */
        this.columns = [
            { title: this.localePipe.transform('component.reportingLine.code'), field: 'code', width: 100 },
            { title: this.localePipe.transform('component.reportingLine.name'), field: 'name', width: 100 }
        ];
        /**
         *  参与者列表汇报关系显示字段
         */
        this.reportingReferObjects = [
            { name: this.localePipe.transform('component.reportingLine.dept'), value: 'dept' },
            { name: this.localePipe.transform('component.reportingLine.sysUser'), value: 'sysUser' },
            { name: this.localePipe.transform('component.reportingLine.employee'), value: 'employee' }
        ];
        this.curReportingRefer = this.reportingReferObjects[0].value;
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.getReportingLineType();
    }
    /**
     * @param {?} dataEntity
     * @return {?}
     */
    set setReportingLineDataEntity(dataEntity) {
        this.defName = dataEntity.reportingLineDefName;
        this.reportingLineDataEntity = dataEntity;
        /** @type {?} */
        const defUrl = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + dataEntity.reportingLineDefId;
        this.http.get(defUrl).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.reportingLineDefinition = re;
            this.designerUIState.dimensions = [
                { value: 'higherSuperior', text: this.localePipe.transform('component.reportingLine.higherSuperior') }
            ];
            // 兼容历史数据
            if (JSON.parse(this.reportingLineDefinition.dimensions)[0].code !== 'directSuperior') {
                /** @type {?} */
                const di = {
                    value: 'directSuperior',
                    text: this.localePipe.transform('component.reportingLine.directSuperior')
                };
                this.designerUIState.dimensions.push(di);
            }
            for (const dimension of JSON.parse(this.reportingLineDefinition.dimensions)) {
                /** @type {?} */
                const di = {
                    value: dimension.code,
                    text: dimension.name
                };
                this.designerUIState.dimensions.push(di);
            }
        }));
        this.users = [dataEntity];
        if (dataEntity.refUserId) {
            this.users[0].performerName = this.variableParticipantName(dataEntity.refUserId);
            this.curReportingRefer = this.reportingReferObjects[1].value;
            this.display = 'block';
        }
        else if (dataEntity.refEmployeeId) {
            this.users[0].performerName = dataEntity.refEmployeeId;
            this.curReportingRefer = this.reportingReferObjects[2].value;
            this.display = 'block';
        }
        else {
            this.curReportingRefer = this.reportingReferObjects[0].value;
        }
        if (dataEntity.reportingLineDefId) {
            this.typeReadOnly = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 获取汇报关系类型
     * @return {?}
     */
    getReportingLineType() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingLineDefinitions';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.reportingLineDefinitionList = re;
            this.items = this.reportingLineDefinitionList.slice(0, this.pageSize);
            this.total = this.reportingLineDefinitionList.length;
        }));
    }
    /**
     * @return {?}
     */
    onclear() {
        this.reportingLineDataEntity = new ReportingLineDataEntity();
    }
    // 参照类型改变
    /**
     * @param {?} data
     * @return {?}
     */
    referObjectChange(data) {
        if (data === 'dept') {
            this.display = 'none';
            this.curReportingRefer = this.reportingReferObjects[0].value;
            this.reportingLineDataEntity.refUserId = null;
            this.reportingLineDataEntity.refEmployeeId = null;
        }
        else if (data === 'sysUser') {
            this.display = 'block';
            this.curReportingRefer = this.reportingReferObjects[1].value;
            this.reportingLineDataEntity.refOrgId = null;
            this.reportingLineDataEntity.refOrgName = null;
            this.reportingLineDataEntity.refEmployeeId = null;
        }
        else { // 员工的情况
            this.display = 'block';
            this.curReportingRefer = this.reportingReferObjects[2].value;
            this.reportingLineDataEntity.refOrgId = null;
            this.reportingLineDataEntity.refOrgName = null;
            this.reportingLineDataEntity.refUserId = null;
        }
        // 参照对象切换时，清空user和department
        this.users = [];
        this.departments = [];
    }
    /**
     * 参照用户改变
     * @param {?} data
     * @return {?}
     */
    referUserChange(data) {
        console.log(data);
    }
    /**
     * 维度改变
     * @param {?} data
     * @return {?}
     */
    reportingDimensionChange(data) {
    }
    /**
     * 组织帮助选完后
     * @param {?} org
     * @return {?}
     */
    orgSelected(org) {
        this.reportingLineDataEntity.refOrgId = org.id;
        this.reportingLineDataEntity.refOrgName = org.name;
    }
    /**
     * 编辑条件
     * @return {?}
     */
    editCondition() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.reportingLineDataEntity.condition); // this.reportingLineDataEntity.condition
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.reportingLineDataEntity.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getReportingTypes(value) {
        /** @type {?} */
        const start = (this.pageIndex - 1) * this.pageSize;
        /** @type {?} */
        const end = start + this.pageSize;
        /** @type {?} */
        let items = [];
        if (value) {
            items = this.reportingLineDefinitionList.filter((/**
             * @param {?} f
             * @return {?}
             */
            f => f.name.indexOf(value) > -1 || f.code.indexOf(value) > -1));
        }
        else {
            items = this.reportingLineDefinitionList;
        }
        this.total = items.length;
        this.items = items.slice(start, end);
        this.lookup.componentRef.instance.loadData({
            total: this.total,
            pageSize: this.pageSize,
            pageIndex: this.pageIndex,
            data: this.items
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
            this.inputGroup1.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup1.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.reportingLineDataEntity.refOrgId = '';
        this.reportingLineDataEntity.refOrgName = '';
    }
    /**
     * @return {?}
     */
    clearUser() {
        this.users = [];
        this.reportingLineDataEntity.refUserId = '';
        this.reportingLineDataEntity.refEmployeeId = '';
    }
    /**
     * @return {?}
     */
    clearOrg() {
        this.departments = [];
        this.reportingLineDataEntity.refOrgId = '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectOrg(data) {
        this.showExprHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        this.showExprHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showExprHelp(data) {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (data === 'sysUser') {
            if (this.reportingLineDataEntity.refUserId && this.reportingLineDataEntity.refUserId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refUserId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'org') {
            if (this.reportingLineDataEntity.refOrgId && this.reportingLineDataEntity.refOrgId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refOrgId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else { // 员工及其他汇报对象类型
            if (this.reportingLineDataEntity.refEmployeeId && this.reportingLineDataEntity.refEmployeeId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refEmployeeId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            if (data === 'sysUser') {
                /** @type {?} */
                const user = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipantExpression');
                user.tag = 'expression';
                user.performerName = this.variableParticipantName(expressionInfo);
                this.reportingLineDataEntity.refUserId = user.performerId;
                this.reportingLineDataEntity.tag = user.tag;
                this.reportingLineDataEntity.performerName = user.performerName;
                this.users = [this.reportingLineDataEntity];
            }
            else if (data === 'org') {
                /** @type {?} */
                const dept = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipantExpression');
                dept.tag = 'expression';
                this.reportingLineDataEntity.refOrgName = expressionInfo;
                this.reportingLineDataEntity.refOrgId = expressionInfo;
                this.departments = [this.reportingLineDataEntity];
            }
            else {
                /** @type {?} */
                const employee = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipantExpression');
                employee.performerName = expressionInfo;
                employee.tag = 'expression';
                this.reportingLineDataEntity.refEmployeeId = expressionInfo;
                this.reportingLineDataEntity.performerName = employee.performerName;
                this.users = [this.reportingLineDataEntity];
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return this.localePipe.transform('component.reportingLine.businessFields');
    }
    /**
     * @return {?}
     */
    defChanged() {
        System.import('/platform/runtime/wf/web/wf-reporting-data/reportingLineDefHelp.js?v=20231123').then((/**
         * @return {?}
         */
        () => {
            ((/** @type {?} */ (window))).gspWfReportingLineDef.ReportingLineDefHelpUtil.getReportingLineHelp().then((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.defSelected(data);
            }));
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    defSelected(data) {
        this.defName = data.name;
        this.reportingLineDataEntity.reportingLineDefId = data.id;
        this.reportingLineDataEntity.reportingLineDefName = data.name;
        this.reportingLineDimension = JSON.parse(data.dimensions);
        this.designerUIState.dimensions = [
            { value: 'higherSuperior', text: this.localePipe.transform('component.reportingLine.higherSuperior') }
        ];
        // 兼容历史数据
        if (this.reportingLineDimension[0].code !== 'directSuperior') {
            /** @type {?} */
            const di = {
                value: 'directSuperior',
                text: this.localePipe.transform('component.reportingLine.directSuperior')
            };
            this.designerUIState.dimensions.push(di);
        }
        for (const dimension of this.reportingLineDimension) {
            /** @type {?} */
            const di = {
                value: dimension.code,
                text: dimension.name
            };
            this.designerUIState.dimensions.push(di);
        }
        // 定义切换后，默认是参照组织
        this.curReportingRefer = this.reportingReferObjects[0].value;
        // 下边的参照人也得隐藏 2023-5-18
        this.display = 'none';
        this.reportingLineDataEntity.refUserId = null;
        this.reportingLineDataEntity.refEmployeeId = null;
        return of(true);
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.reportingLineDataEntity.type = 'wf.ReportingLineParticipantExpression';
        this.reportingLineDataEntity.reportingReferObject = this.curReportingRefer;
        return this.reportingLineDataEntity;
    }
}
ReportingLineComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-reporting-line',
                template: "<sys-farris-tree-help class=\"flex-fill\" #orgHelp style=\"display: none;\"\r\n                      [singleSelect]=\"true\" [sourceType]=\"'org'\" [disabled]=\"false\" [filter]=\"treeFilter\"\r\n                      [useBeforeCloseEvent]=\"false\" [async]=\"true\"\r\n                      (afterConfirm)=\"orgSelected($event)\">\r\n</sys-farris-tree-help>\r\n\r\n<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%\">\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.defName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(value)]=\"defName\"\r\n                               (clickHandle)=\"defChanged()\" [enableClear]=\"false\"\r\n                  ></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.dimension'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"reportingLineDataEntity.dimension\" name=\"dimension\" [panelHeight]=\"200\"\r\n                                     [idField]=\"'value'\" [textField]=\"'text'\" [data]=\"this.designerUIState.dimensions\" (valueChange)=\"reportingDimensionChange($event)\"\r\n                                     ></farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.curReportingRefer'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-radiogroup [data]=\"reportingReferObjects\" [horizontal]=\"true\"\r\n                                     [(ngModel)]=\"curReportingRefer\" name=\"referObject\"\r\n                                     (changeValue)=\"referObjectChange($event)\"\r\n                  ></farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" [ngStyle]=\"{'display':display}\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.usersName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup1 class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" [(ngModel)]=\"reportingLineDataEntity.performerName\" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clearUser()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span *ngIf=\"curReportingRefer === 'sysUser'\" class=\"input-group-text\" (click)=\"selectUsers('sysUser')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                      <span *ngIf=\"curReportingRefer === 'employee'\" class=\"input-group-text\" (click)=\"selectUsers('employee')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\" [ngStyle]=\"{'display':display === 'none' ? 'block':'none'}\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.refOrgId'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportingLineDataEntity.refOrgId\" name=\"dept\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clearOrg()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectOrg('org')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.reportingLine.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportingLineDataEntity.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<app-wf-report-def-help style=\"display: none;\" [singleSelect]=\"true\" title=\"{{'component.reportingLine.definitionOfReport'|wfLocale}}\" (afterConfirm)=\"defSelected($event)\">\r\n\r\n</app-wf-report-def-help>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ReportingLineComponent.ctorParameters = () => [
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: NgZone },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ReportingLineComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    reportingLineDefHelp: [{ type: ViewChild, args: [WfReportDefHelpComponent,] }],
    setReportingLineDataEntity: [{ type: Input }],
    lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
    orgHelp: [{ type: ViewChild, args: [SysFarrisTreeHelpComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    inputGroup1: [{ type: ViewChild, args: ['inputGroup1',] }]
};
if (false) {
    /** @type {?} */
    ReportingLineComponent.prototype.cls;
    /** @type {?} */
    ReportingLineComponent.prototype.treeFilter;
    /** @type {?} */
    ReportingLineComponent.prototype.display;
    /** @type {?} */
    ReportingLineComponent.prototype.typeReadOnly;
    /** @type {?} */
    ReportingLineComponent.prototype.groupIcon2;
    /** @type {?} */
    ReportingLineComponent.prototype.defName;
    /**
     * 汇报关系数据
     * @type {?}
     */
    ReportingLineComponent.prototype.reportingLineDataEntity;
    /**
     * 汇报关系定义列表
     * @type {?}
     */
    ReportingLineComponent.prototype.reportingLineDefinitionList;
    /** @type {?} */
    ReportingLineComponent.prototype.reportingLineDefinition;
    /** @type {?} */
    ReportingLineComponent.prototype.reportingLineDimension;
    /** @type {?} */
    ReportingLineComponent.prototype.reportingLineDefHelp;
    /** @type {?} */
    ReportingLineComponent.prototype.lookup;
    /** @type {?} */
    ReportingLineComponent.prototype.orgHelp;
    /** @type {?} */
    ReportingLineComponent.prototype.inputGroup;
    /** @type {?} */
    ReportingLineComponent.prototype.inputGroup1;
    /** @type {?} */
    ReportingLineComponent.prototype.showClearButton;
    /** @type {?} */
    ReportingLineComponent.prototype.condition;
    /** @type {?} */
    ReportingLineComponent.prototype.items;
    /** @type {?} */
    ReportingLineComponent.prototype.users;
    /** @type {?} */
    ReportingLineComponent.prototype.departments;
    /** @type {?} */
    ReportingLineComponent.prototype.pageIndex;
    /** @type {?} */
    ReportingLineComponent.prototype.pageSize;
    /** @type {?} */
    ReportingLineComponent.prototype.pageList;
    /** @type {?} */
    ReportingLineComponent.prototype.total;
    /**
     * 汇报类型显示列
     * @type {?}
     */
    ReportingLineComponent.prototype.columns;
    /**
     *  参与者列表汇报关系显示字段
     * @type {?}
     */
    ReportingLineComponent.prototype.reportingReferObjects;
    /** @type {?} */
    ReportingLineComponent.prototype.curReportingRefer;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.http;
    /** @type {?} */
    ReportingLineComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ReportingLineComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,