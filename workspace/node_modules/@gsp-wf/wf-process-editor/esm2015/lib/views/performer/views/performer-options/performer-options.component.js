/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, NgZone, ViewChild, ElementRef, Output, EventEmitter, TemplateRef, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { PerformerOptions } from '../../entities/performer-options';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService, InjectedType, ExprEditMode } from '@gsp-svc/expression';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class PerformerOptionsComponent {
    /**
     * @param {?} ngZone
     * @param {?} designerState
     * @param {?} expr
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(ngZone, designerState, expr, message, cdr, localeId, resources, localePipe) {
        this.ngZone = ngZone;
        this.designerState = designerState;
        this.expr = expr;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.performerOptionsLocation = '';
        this.showClearButton = false;
        this.historicFirst = false;
        this.excludeProcInstCreator = false;
        this.excludePreActExecutors = false;
        this.excludeAllPassExecutors = false;
        this.autoProcInstCreator = false;
        this.autoPreActExecutors = false;
        this.autoAllPassExecutors = false;
        this.noPerformerStrategyList = [
            { text: this.localePipe.transform('component.performerOptions.leave'), value: 'leave' },
            { text: this.localePipe.transform('component.performerOptions.throwException'), value: 'throwException' }
        ];
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.performerOptions.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.performerOptions.administrative_staff'), value: 'Administrative_staff' },
        ];
        this.exclusionPerformersOptions = [
            { value: 'procInstCreator', name: this.localePipe.transform('component.performerOptions.procInstCreator') },
            { value: 'preActExecutors', name: this.localePipe.transform('component.performerOptions.preActExecutors') },
            { value: 'allPassExecutors', name: this.localePipe.transform('component.performerOptions.allPassExecutors') }
        ];
        this.exprPerformerType = this.variableOrgTypes[0].value;
        this.noPerformerStrategy = this.noPerformerStrategyList[0].value;
        this.modalConfig = {
            title: this.localePipe.transform('component.performerOptions.performerOptions'),
            width: 760,
            height: 606,
            showButtons: true
        };
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set value(options) {
        if (options) {
            this.exclusionPerformers = options.ExclusionPerformers;
            this.noPerformerStrategy = options.NoPerformerStrategy;
            this.historicFirst = options.HistoricFirst;
            this.automaticPerformers = options.automaticPerformers;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    set exclusionPerformers(e) {
        if (e) {
            if (typeof e === 'string') {
                this.excludeProcInstCreator = e.indexOf('procInstCreator') > -1;
                this.excludePreActExecutors = e.indexOf('preActExecutors') > -1;
            }
            else {
                this.excludeProcInstCreator = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i === 'procInstCreator')) > -1;
                this.excludePreActExecutors = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i === 'preActExecutors')) > -1;
                this.excludeAllPassExecutors = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i === 'allPassExecutors')) > -1;
                this.excludeExprPerformer = e.find((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i.indexOf('expr') > -1));
                if (this.excludeExprPerformer != null && (this.excludeExprPerformer.startsWith('Sys#') ||
                    this.excludeExprPerformer.startsWith('Administrative_staff#'))) {
                    /** @type {?} */
                    const excludeValue = this.excludeExprPerformer.split("#");
                    this.exprPerformerType = excludeValue[0];
                    this.excludeExprPerformer = excludeValue[1];
                }
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    set automaticPerformers(e) {
        if (e && e.length > 0) {
            this.autoProcInstCreator = e.findIndex((/**
             * @param {?} i
             * @return {?}
             */
            i => i === 'procInstCreator')) > -1;
            this.autoPreActExecutors = e.findIndex((/**
             * @param {?} i
             * @return {?}
             */
            i => i === 'preActExecutors')) > -1;
            this.autoAllPassExecutors = e.findIndex((/**
             * @param {?} i
             * @return {?}
             */
            i => i === 'allPassExecutors')) > -1;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.performerOptionsLocation = this.editorParams.location;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const options = {
            ExclusionPerformers: this.getExclusionPerformers(),
            NoPerformerStrategy: this.noPerformerStrategy,
            HistoricFirst: this.historicFirst,
            automaticPerformers: this.getAutoPerformers()
        };
        /** @type {?} */
        const object = {
            value: options, parameters: null
        };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    cancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    excludeProcInstCreatorClick(event) {
        // this.excludeProcInstCreator = !this.excludeProcInstCreator;
        if (this.excludeProcInstCreator && this.autoProcInstCreator) {
            this.autoProcInstCreator = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    excludePreActExecutorsClick(event) {
        // this.excludePreActExecutors = !this.excludePreActExecutors;
        if (this.autoAllPassExecutors === true && this.excludePreActExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.exclusionNotAllowed'), (/**
             * @return {?}
             */
            () => {
                this.excludePreActExecutors = false;
            }));
            return;
        }
        if (this.excludePreActExecutors && this.autoPreActExecutors) {
            this.autoPreActExecutors = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    excludeAllPassExecutorsClick(event) {
        // this.excludeAllPassExecutors = !this.excludeAllPassExecutors;
        if (this.excludeAllPassExecutors) {
            if (this.autoPreActExecutors) {
                this.autoPreActExecutors = false;
            }
            if (this.autoAllPassExecutors) {
                this.autoAllPassExecutors = false;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    autoProcInstCreatorClick(event) {
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoProcInstCreator === true ) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoProcInstCreator = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoProcInstCreator === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.approvalNotAllowedAsSet'), (/**
             * @return {?}
             */
            () => {
                this.autoProcInstCreator = false;
            }));
            return;
        }
        // this.autoProcInstCreator = !this.autoProcInstCreator;
        if (this.autoProcInstCreator && this.excludeProcInstCreator) {
            this.excludeProcInstCreator = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    autoPreActExecutorsClick(event) {
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoPreActExecutors === true) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoPreActExecutors = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoPreActExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.approvalNotAllowed'), (/**
             * @return {?}
             */
            () => {
                this.autoPreActExecutors = false;
            }));
            return;
        }
        if (this.excludeAllPassExecutors === true && this.autoPreActExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.approvalNotAllowedAsSet'), (/**
             * @return {?}
             */
            () => {
                this.autoPreActExecutors = false;
            }));
            return;
        }
        // this.autoPreActExecutors = !this.autoPreActExecutors;
        if (this.autoPreActExecutors && this.excludePreActExecutors) {
            this.excludePreActExecutors = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    autoAllPassExecutorsClick(event) {
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoAllPassExecutors === true) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoAllPassExecutors = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoAllPassExecutors === true) {
            this.message.info(this.localePipe.transform('component.performerOptions.allocationStrategyIsCollect'), (/**
             * @return {?}
             */
            () => {
                this.autoAllPassExecutors = false;
            }));
            return;
        }
        // this.autoAllPassExecutors = !this.autoAllPassExecutors;
        if (this.autoAllPassExecutors) {
            if (this.excludeAllPassExecutors) {
                this.excludeAllPassExecutors = false;
            }
            if (this.excludePreActExecutors) {
                this.excludePreActExecutors = false;
            }
        }
    }
    /**
     * @return {?}
     */
    getPerformerOptions() {
        return {
            ExclusionPerformers: this.getExclusionPerformers(),
            NoPerformerStrategy: this.noPerformerStrategy,
            HistoricFirst: this.historicFirst,
            automaticPerformers: this.getAutoPerformers()
        };
    }
    /**
     * @private
     * @return {?}
     */
    getExclusionPerformers() {
        /** @type {?} */
        const exclusionPerf = [];
        if (this.excludeProcInstCreator) {
            exclusionPerf.push('procInstCreator');
        }
        if (this.excludePreActExecutors) {
            exclusionPerf.push('preActExecutors');
        }
        if (this.excludeAllPassExecutors) {
            exclusionPerf.push('allPassExecutors');
        }
        if (this.excludeExprPerformer) {
            exclusionPerf.push(`${this.exprPerformerType}#${this.excludeExprPerformer}`);
        }
        return exclusionPerf;
    }
    /**
     * @private
     * @return {?}
     */
    getAutoPerformers() {
        /** @type {?} */
        const autoPerf = new Array();
        if (this.autoProcInstCreator) {
            autoPerf.push('procInstCreator');
        }
        if (this.autoPreActExecutors) {
            autoPerf.push('preActExecutors');
        }
        if (this.autoAllPassExecutors) {
            autoPerf.push('allPassExecutors');
        }
        return autoPerf;
    }
    /**
     * @return {?}
     */
    openExprEditor() {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        // if (this.excludeExprPerformer) {
        this.expr.addExpressionText(this.excludeExprPerformer);
        // }
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.excludeExprPerformer = d;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.exprPerformerType = this.variableOrgTypes[0].value;
        }
        else if (data === 'Administrative_staff') {
            this.exprPerformerType = this.variableOrgTypes[1].value;
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.excludeExprPerformer = '';
    }
}
PerformerOptionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer-options',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100 mx-3\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <div class=\"f-utils-fill-flex-column h-100 pl-3\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\" style=\"overflow-x: hidden;\">\r\n            <div class=\"f-form-layout farris-form pb-4\">\r\n              <div class=\"farris-form form-inline farris-form-inline\">\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h5 class=\"title-text\">{{'component.performerOptions.advancedOptions'|wfLocale}}</h5><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"historicFirst\" type=\"checkbox\" id=\"historicFirst\"\r\n                            [(ngModel)]=\"historicFirst\" />\r\n                          <label class=\"custom-control-label\" for=\"historicFirst\">{{'component.performerOptions.historicFirst'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto mt-3 pr-4\">\r\n                  <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{'component.performerOptions.noPerformerStrategy'|wfLocale}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list [(ngModel)]=\"noPerformerStrategy\" name=\"noPerformerStrategy\" [idField]=\"'value'\"\r\n                          [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"noPerformerStrategyList\" [panelHeight]=\"60\">\r\n                        </farris-combo-list>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h5 class=\"title-text\">{{'component.performerOptions.excludeProcInstCreator'|wfLocale}}</h5><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludeProcInstCreator\" type=\"checkbox\" id=\"excludeProcInstCreator\"\r\n                            [(ngModel)]=\"excludeProcInstCreator\" (change)=\"excludeProcInstCreatorClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"excludeProcInstCreator\">{{'component.performerOptions.defaultNotParticipate'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludePreActExecutors\" type=\"checkbox\" id=\"excludePreActExecutors\"\r\n                            [(ngModel)]=\"excludePreActExecutors\" (change)=\"excludePreActExecutorsClick($event)\"/>\r\n                          <label class=\"custom-control-label\" for=\"excludePreActExecutors\">{{'component.performerOptions.excludePreActExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludeAllPassExecutors\" type=\"checkbox\" id=\"excludeAllPassExecutors\"\r\n                            [(ngModel)]=\"excludeAllPassExecutors\" (change)=\"excludeAllPassExecutorsClick($event)\"/>\r\n                          <label class=\"custom-control-label\" for=\"excludeAllPassExecutors\">{{'component.performerOptions.excludeAllPassExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto pr-4 my-2\">\r\n                  <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{'component.performerOptions.excludeExprPerformer'|wfLocale}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div #inputGroup class=\"input-group\">\r\n                          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"excludeExprPerformer\" name=\"excludeExprPerformer\"\r\n                            [readOnly]=\"true\" />\r\n                          <div class=\"input-group-append\">\r\n                            <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                              (click)=\"clear()\">\r\n                              <i class=\"f-icon modal_close\"></i>\r\n                            </span>\r\n                            <span class=\"input-group-text\" (click)=\"openExprEditor()\" style=\"background: #FFF;\">\r\n                              <i class=\"f-icon f-icon-lookup\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"excludeExprPerformer != null || excludeExprPerformer != ''\">\r\n                  <div class=\"col-9 farris-group-auto my-2 pr-4\">\r\n                    <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{'component.performerOptions.variableOrgTypes'|wfLocale}}</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap\" style=\"margin-bottom: 5px;\">\r\n                          <div class=\"custom-control custom-checkbox\">\r\n                            <farris-radiogroup [data]=\"variableOrgTypes\" [horizontal]=\"true\" [(ngModel)]=\"exprPerformerType\" name=\"referObject\"\r\n                              (changeValue)=\"orgTypeChange($event)\"></farris-radiogroup>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"performerOptionsLocation!='autoActivity'\">\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h5 class=\"title-text\">{{'component.performerOptions.automaticApprovalOptions'|wfLocale}}</h5><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoProcInstCreator\" type=\"checkbox\" id=\"autoProcInstCreator\"\r\n                            [(ngModel)]=\"autoProcInstCreator\" (change)=\"autoProcInstCreatorClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoProcInstCreator\">{{'component.performerOptions.autoProcInstCreator'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoPreActExecutors\" type=\"checkbox\" id=\"autoPreActExecutors\"\r\n                            [(ngModel)]=\"autoPreActExecutors\" (change)=\"autoPreActExecutorsClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoPreActExecutors\">{{'component.performerOptions.autoPreActExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto my-2\" style=\"margin-left: 100px;\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoAllPassExecutors\" type=\"checkbox\" id=\"autoAllPassExecutors\"\r\n                            [(ngModel)]=\"autoAllPassExecutors\" (change)=\"autoAllPassExecutorsClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoAllPassExecutors\">{{'component.performerOptions.autoAllPassExecutors'|wfLocale}}</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"cancel()\">{{'component.performerOptions.cancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.performerOptions.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [".item-header{padding:1rem}.item{padding:.5rem 5rem}.title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:450px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
            }] }
];
/** @nocollapse */
PerformerOptionsComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
PerformerOptionsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    value: [{ type: Input }],
    exclusionPerformers: [{ type: Input }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};
if (false) {
    /** @type {?} */
    PerformerOptionsComponent.prototype.cls;
    /** @type {?} */
    PerformerOptionsComponent.prototype.editorParams;
    /** @type {?} */
    PerformerOptionsComponent.prototype.closeModal;
    /** @type {?} */
    PerformerOptionsComponent.prototype.submitModal;
    /** @type {?} */
    PerformerOptionsComponent.prototype.modalFooter;
    /** @type {?} */
    PerformerOptionsComponent.prototype.performerOptionsLocation;
    /** @type {?} */
    PerformerOptionsComponent.prototype.inputGroup;
    /** @type {?} */
    PerformerOptionsComponent.prototype.showClearButton;
    /** @type {?} */
    PerformerOptionsComponent.prototype.historicFirst;
    /** @type {?} */
    PerformerOptionsComponent.prototype.excludeExprPerformer;
    /** @type {?} */
    PerformerOptionsComponent.prototype.excludeProcInstCreator;
    /** @type {?} */
    PerformerOptionsComponent.prototype.excludePreActExecutors;
    /** @type {?} */
    PerformerOptionsComponent.prototype.excludeAllPassExecutors;
    /** @type {?} */
    PerformerOptionsComponent.prototype.autoProcInstCreator;
    /** @type {?} */
    PerformerOptionsComponent.prototype.autoPreActExecutors;
    /** @type {?} */
    PerformerOptionsComponent.prototype.autoAllPassExecutors;
    /** @type {?} */
    PerformerOptionsComponent.prototype.noPerformerStrategyList;
    /** @type {?} */
    PerformerOptionsComponent.prototype.variableOrgTypes;
    /** @type {?} */
    PerformerOptionsComponent.prototype.exclusionPerformersOptions;
    /** @type {?} */
    PerformerOptionsComponent.prototype.exprPerformerType;
    /** @type {?} */
    PerformerOptionsComponent.prototype.noPerformerStrategy;
    /** @type {?} */
    PerformerOptionsComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsComponent.prototype.localePipe;
}
export class PerformerOptionsConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        return this.localePipe.transform("component.performerOptions.set");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    PerformerOptionsConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,