/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewChild, Injector, NgZone, ElementRef, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { UserPerformerEntity } from '../../entities/user-performer.entity';
import { PerformerConfigService } from '../../performer-config.service';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from '@farris/ui-messager';
import { PersonnelSelectorComponent } from '@farris/ui-personnel-selector';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class UserPerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} injector
     * @param {?} lookupConfig
     * @param {?} ngZone
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?=} http
     * @param {?=} message
     */
    constructor(designerUIState, expr, injector, lookupConfig, ngZone, cdr, localeId, resources, localePipe, http, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.injector = injector;
        this.lookupConfig = lookupConfig;
        this.ngZone = ngZone;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.http = http;
        this.message = message;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.bindingData = {};
        this.farrisUserHelpShowTabIds = 'recent,organization';
        this.activeTabId = 'organization';
        this.selectedUserIds = '';
        this.userTypeCollection = [
            { text: this.localePipe.transform('component.userPerformer.regularUser'), value: 'user' },
            { text: this.localePipe.transform('component.userPerformer.variablePart'), value: 'variable' }
        ];
        this.userType = this.userTypeCollection[0].value;
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.userPerformer.administrative_organization'), value: 'Administrative_organization' }
        ];
        this.curOrgType = this.variableOrgTypes[0].value;
        this.hasAdminOrg = false;
        this.userTypeButtonNeedShow = false; // 用户类型单选按钮是否需要显示
        // 用户类型单选按钮是否需要显示
        this.multiSelect = true; //选人组件是否支持多选（编辑用户时只能单选）
        this.users = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.hasAdminOrg = data;
            // inSuite场景，变量参与者场景下显示用户类型
            if (this.designerUIState.scene === 'inSuite' && this.userType === 'variable') {
                this.userTypeButtonNeedShow = true;
            }
            else {
                this.userTypeButtonNeedShow = data && (this.userType === 'variable' || this.userType === null);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.bindingData = {};
        this.users = [];
        this.selectedUserIds = '';
        this.variableOrgTypes = [
            { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' },
            { name: this.localePipe.transform('component.userPerformer.administrative_organization'), value: 'Administrative_organization' }
        ];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        // 固定用户
        if (this.userType === this.userTypeCollection[0].value) {
            this.lookupConfig.getLookupConfig().subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                // 项目配置了自己的帮助时
                if (re.user && re.user.impl) {
                    System.import(re.user.impl)
                        .then((/**
                     * @param {?} moduleFactorys
                     * @return {?}
                     */
                    (moduleFactorys) => {
                        /** @type {?} */
                        const moduleFactory = Object.values(moduleFactorys)[0];
                        /** @type {?} */
                        const moduleRef = moduleFactory.create(this.injector);
                        moduleRef.instance.showHelp().subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        data => {
                            if (data && data.length > 0) {
                                this.users = data.map((/**
                                 * @param {?} u
                                 * @return {?}
                                 */
                                u => {
                                    /** @type {?} */
                                    const user = new UserPerformerEntity(u.id, u.name, 'wf.UserParticipantExpression');
                                    user.orgId = u.orgId;
                                    user.orgName = u.orgName;
                                    user.userType = this.userTypeCollection[0].value;
                                    return user;
                                }));
                            }
                        }));
                    }));
                }
                else { // 加载默认帮助
                    this.userHelp.farrisDialogshow();
                }
            }));
        }
        else {
            this.showExprHelp();
        }
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    usersSelect(event) {
        this.users = event.data.map((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            /** @type {?} */
            const user = new UserPerformerEntity(u.userId, u.name, 'wf.UserParticipantExpression');
            user.orgId = u.defaultOrgId;
            user.orgName = u.orgAllPath;
            user.userType = this.userTypeCollection[0].value;
            return user;
        }));
    }
    /**
     * @return {?}
     */
    showExprHelp() {
        // this.expr.clearContext();
        this.expr.setEditPattern(ExprEditMode.Advanced);
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (this.users.length > 0) {
            this.expr.addExpressionText(this.users[0].performerId);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            /** @type {?} */
            const user = new UserPerformerEntity(expressioninfo, '', 'wf.UserParticipantExpression');
            user.tag = 'expression';
            user.performerName = this.variableParticipantName(expressioninfo);
            user.userType = this.userTypeCollection[1].value;
            if (this.variableParticipantName(expressioninfo) === '') {
                this.message.error(this.localePipe.transform('component.userPerformer.cantUseContext'));
                this.users = [];
            }
            else {
                this.users = [user];
            }
            for (const c of this.designerUIState.participantContext) { // 根据表达式中的函数名判断是否使用的是上下文变量,除三种特殊上下文变量其余放开限制
                if (user.performerId.indexOf(c.key) >= 0) {
                    this.variableOrgTypes = [
                        { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' }
                    ];
                    break;
                }
                else {
                    this.variableOrgTypes = [
                        { name: this.localePipe.transform('component.userPerformer.sys'), value: 'Sys' },
                        { name: this.localePipe.transform('component.userPerformer.administrative_organization'), value: 'Administrative_organization' }
                    ];
                }
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.users.map((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            if (user.orgId === undefined) {
                user.orgType = this.curOrgType;
                return user;
            }
        }));
        if (!this.condition) {
            this.condition = '';
        }
        if (this.condition || this.condition === '') {
            this.users = this.users.map((/**
             * @param {?} user
             * @return {?}
             */
            user => {
                user.condition = this.condition;
                return user;
            }));
        }
        return this.users;
    }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                if (this.curOrgType !== 'Sys') { // 行政人员类型不允许使用上下文变量
                    return '';
                }
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return JSON.parse(expr).expr;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.curOrgType = this.variableOrgTypes[0].value;
        }
        else {
            this.curOrgType = this.variableOrgTypes[1].value;
        }
    }
}
UserPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-user-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\" *ngIf=\"userType === 'user'\">{{'component.userPerformer.user'|wfLocale}}</span>\r\n                  <span class=\"farris-label-text\" *ngIf=\"userType === 'variable'\">{{'component.userPerformer.variable'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div *ngIf=\"multiSelect\" class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                        (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.userPerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<farris-personnel-selector #userHelp style=\"display: none\" [readonly]=\"false\" [width]=\"'100%'\"\r\n  [multiSelect]=\"multiSelect\" [includeJobLeavers]=\"false\" [includeCurrentUser]=\"true\" [unSelectedUserIds]=\"users | usersId \"\r\n  [enableChildHierarchy]=\"true\" [showTabIds]=\"farrisUserHelpShowTabIds\" [activeTabId]=\"activeTabId\"\r\n  [userIds]=\"selectedUserIds\" [personnelOrderField]=\"'orderby_ordernum'\" [userTypeMode]=\"'WfMode'\"\r\n  [includeStopUser]=\"false\" (selectionsChange)=\"usersSelect($event)\">\r\n</farris-personnel-selector>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
UserPerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: Injector },
    { type: PerformerConfigService },
    { type: NgZone },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: HttpService },
    { type: MessagerService }
];
UserPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    userHelp: [{ type: ViewChild, args: [PersonnelSelectorComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};
if (false) {
    /** @type {?} */
    UserPerformerComponent.prototype.cls;
    /** @type {?} */
    UserPerformerComponent.prototype.userHelp;
    /** @type {?} */
    UserPerformerComponent.prototype.inputGroup;
    /** @type {?} */
    UserPerformerComponent.prototype.showClearButton;
    /** @type {?} */
    UserPerformerComponent.prototype.bindingData;
    /** @type {?} */
    UserPerformerComponent.prototype.farrisUserHelpShowTabIds;
    /** @type {?} */
    UserPerformerComponent.prototype.activeTabId;
    /** @type {?} */
    UserPerformerComponent.prototype.selectedUserIds;
    /** @type {?} */
    UserPerformerComponent.prototype.userTypeCollection;
    /** @type {?} */
    UserPerformerComponent.prototype.userType;
    /** @type {?} */
    UserPerformerComponent.prototype.variableOrgTypes;
    /** @type {?} */
    UserPerformerComponent.prototype.curOrgType;
    /** @type {?} */
    UserPerformerComponent.prototype.hasAdminOrg;
    /** @type {?} */
    UserPerformerComponent.prototype.userTypeButtonNeedShow;
    /** @type {?} */
    UserPerformerComponent.prototype.multiSelect;
    /** @type {?} */
    UserPerformerComponent.prototype.condition;
    /** @type {?} */
    UserPerformerComponent.prototype.users;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.lookupConfig;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.localePipe;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,