/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, NgZone, ViewChild, ElementRef, HostBinding, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { DialogComponent } from "@farris/ui-dialog";
import { DatagridComponent } from "@farris/ui-datagrid";
import { ExprEditMode, ExpressionService, InjectedType } from "@gsp-svc/expression";
import { ProcessDesignerUIState } from "../../../../app/process-designer.uistate";
import { ActivityExecutorParticipant } from "./entities/activity-executor.participant";
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class ActivityExecutorPerformerComponent {
    /**
     * @param {?} ngZone
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(ngZone, designerUIState, expr, cdr, localeId, resources, localePipe) {
        this.ngZone = ngZone;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.activityExecutors = [];
        this.cols = [
            { title: this.localePipe.transform('component.activityExecutor.name'), field: 'Name', width: 60 },
            { title: 'ID', field: 'Id', width: 90 }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.activityExecutors = [];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        // 已办用户
        /** @type {?} */
        const selectedUser = [];
        if (this.activityExecutors && this.activityExecutors.length > 0) {
            for (const handler of this.activityExecutors) {
                /** @type {?} */
                const data = {
                    data: {
                        Id: handler.activityDefId,
                        Name: handler.activityDefName
                    },
                    id: handler.activityDefId
                };
                selectedUser.push(data);
            }
        }
        this.allActivityTable.setCurrentPagerData(selectedUser);
        this.allActivityDialog.show();
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    activitiesSelect() {
        /** @type {?} */
        const selectedActivities = this.allActivityTable.checkeds;
        this.activityExecutors = selectedActivities.map((/**
         * @param {?} activity
         * @return {?}
         */
        activity => {
            /** @type {?} */
            const handler = new ActivityExecutorParticipant(activity.data.Id, activity.data.Name, 'wf.ActivityExecutorParticipantExpression');
            handler.performerName = '<' + activity.data.Name + this.localePipe.transform('component.activityExecutor.eventHandler');
            handler.activityDefId = activity.data.Id;
            handler.activityDefName = activity.data.Name;
            handler.condition = this.condition;
            return handler;
        }));
        this.allActivityDialog.close();
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.activityExecutors.map((/**
         * @param {?} x
         * @return {?}
         */
        x => x.condition = this.condition));
        return this.activityExecutors;
    }
}
ActivityExecutorPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-activity-handler-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{'component.activityExecutor.nodeName'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"activityExecutors | activityExecutor \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.activityExecutor.enablingConditions'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<farris-dialog #allActivityDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" title=\"{{'component.activityExecutor.activityList'|wfLocale}}\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n    <farris-datagrid #allActivityTable [columns]=\"cols\" [data]=\"designerUIState.userActList\"  [idField]=\"'Id'\" [fit]=\"true\"\r\n                     [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\"\r\n                     [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default\" (click)=\"allActivityDialog.close()\">{{'component.activityExecutor.clickCancel'|wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary mx-2\" (click)=\"activitiesSelect()\">{{'component.activityExecutor.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ActivityExecutorPerformerComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ActivityExecutorPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    allActivityDialog: [{ type: ViewChild, args: ['allActivityDialog',] }],
    allActivityTable: [{ type: ViewChild, args: ['allActivityTable',] }]
};
if (false) {
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.cls;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.showClearButton;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.activityExecutors;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.condition;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.cols;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.inputGroup;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.allActivityDialog;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.allActivityTable;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorPerformerComponent.prototype.ngZone;
    /** @type {?} */
    ActivityExecutorPerformerComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorPerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorPerformerComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorPerformerComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorPerformerComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ActivityExecutorPerformerComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,