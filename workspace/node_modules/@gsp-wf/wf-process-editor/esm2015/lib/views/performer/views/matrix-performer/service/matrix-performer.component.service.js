/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
export class MatrixDefHelpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        if (url.indexOf('getMatrixDef') > -1) {
            /** @type {?} */
            const index = params.pageIndex || 1;
            /** @type {?} */
            const size = params.pageSize || 20;
            /** @type {?} */
            const searchValue = JSON.parse(params.searchValue);
            if (searchValue.searchValue) {
                /** @type {?} */
                let query = '{';
                if (searchValue.searchValue) {
                    if (searchValue.searchField === '*') {
                        query += `"codeOrNameLike":"${searchValue.searchValue}",`;
                    }
                    else {
                        query += `"${searchValue.searchField}":"${searchValue.searchValue}",`;
                    }
                }
                if (query.substr(query.length - 1, 1) === ',') {
                    query = query.substring(0, query.length - 1);
                }
                query += '}';
                query = encodeURIComponent(query);
                query += `&pageIndex=${index}&pageSize=${size}`;
                url += '?searchValue=' + query;
            }
            else {
                url += `?pageIndex=${index}&pageSize=${size}`;
            }
            return this.http.get(url).pipe(map((/**
             * @param {?} re
             * @return {?}
             */
            (re) => ({
                items: re.content,
                total: re.totalElements,
                pageInfo: {
                    pageIndex: re.pageable.pageNumber + 1,
                    pageSize: re.pageable.pageSize,
                    pageList: [20, 40, 60, 80, 100],
                    enablePager: true
                }
            }))));
        }
    }
}
MatrixDefHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MatrixDefHelpService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatrixDefHelpService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0cml4LXBlcmZvcm1lci5jb21wb25lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvcGVyZm9ybWVyL3ZpZXdzL21hdHJpeC1wZXJmb3JtZXIvc2VydmljZS9tYXRyaXgtcGVyZm9ybWVyLmNvbXBvbmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsTUFBTSxPQUFPLG9CQUFvQjs7OztJQUUvQixZQUNVLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFFM0IsQ0FBQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxNQUFxQjtRQUN4QyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7O2tCQUM5QixLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDOztrQkFDN0IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRTs7a0JBQzVCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDbEQsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFOztvQkFDdkIsS0FBSyxHQUFHLEdBQUc7Z0JBQ2YsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFO29CQUMzQixJQUFJLFdBQVcsQ0FBQyxXQUFXLEtBQUssR0FBRyxFQUFFO3dCQUNuQyxLQUFLLElBQUkscUJBQXFCLFdBQVcsQ0FBQyxXQUFXLElBQUksQ0FBQztxQkFDM0Q7eUJBQU07d0JBQ0wsS0FBSyxJQUFJLElBQUksV0FBVyxDQUFDLFdBQVcsTUFBTSxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUM7cUJBQ3ZFO2lCQUNGO2dCQUNELElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7b0JBQzdDLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUM5QztnQkFDRCxLQUFLLElBQUksR0FBRyxDQUFDO2dCQUNiLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEMsS0FBSyxJQUFJLGNBQWMsS0FBSyxhQUFhLElBQUksRUFBRSxDQUFDO2dCQUNoRCxHQUFHLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQzthQUNoQztpQkFBTTtnQkFDTCxHQUFHLElBQUksY0FBYyxLQUFLLGFBQWEsSUFBSSxFQUFFLENBQUM7YUFDL0M7WUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRzs7OztZQUFDLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU87Z0JBQ2pCLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYTtnQkFDdkIsUUFBUSxFQUFFO29CQUNSLFNBQVMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDO29CQUNyQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRO29CQUM5QixRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO29CQUMvQixXQUFXLEVBQUUsSUFBSTtpQkFDbEI7YUFDRixDQUFDLEVBQUMsQ0FDSixDQUFDO1NBQ0g7SUFDSCxDQUFDOzs7WUE3Q0YsVUFBVTs7OztZQUpGLFdBQVc7Ozs7Ozs7SUFRaEIsb0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUxvb2t1cEh0dHBTZXJ2aWNlLCBSZW1vdGVQYXJhbXMsIExvb2t1cEdyaWRSZXN1bHQgfSBmcm9tICdAZmFycmlzL3VpLWxvb2t1cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNYXRyaXhEZWZIZWxwU2VydmljZSBpbXBsZW1lbnRzIElMb29rdXBIdHRwU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YSh1cmw6IHN0cmluZywgcGFyYW1zPzogUmVtb3RlUGFyYW1zKTogT2JzZXJ2YWJsZTxMb29rdXBHcmlkUmVzdWx0PiB7XHJcbiAgICBpZiAodXJsLmluZGV4T2YoJ2dldE1hdHJpeERlZicpID4gLTEpIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBwYXJhbXMucGFnZUluZGV4IHx8IDE7XHJcbiAgICAgIGNvbnN0IHNpemUgPSBwYXJhbXMucGFnZVNpemUgfHwgMjA7XHJcbiAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gSlNPTi5wYXJzZShwYXJhbXMuc2VhcmNoVmFsdWUpO1xyXG4gICAgICBpZiAoc2VhcmNoVmFsdWUuc2VhcmNoVmFsdWUpIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSAneyc7XHJcbiAgICAgICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaFZhbHVlKSB7XHJcbiAgICAgICAgICBpZiAoc2VhcmNoVmFsdWUuc2VhcmNoRmllbGQgPT09ICcqJykge1xyXG4gICAgICAgICAgICBxdWVyeSArPSBgXCJjb2RlT3JOYW1lTGlrZVwiOlwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZX1cIixgO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcXVlcnkgKz0gYFwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hGaWVsZH1cIjpcIiR7c2VhcmNoVmFsdWUuc2VhcmNoVmFsdWV9XCIsYDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5LnN1YnN0cihxdWVyeS5sZW5ndGggLSAxLCAxKSA9PT0gJywnKSB7XHJcbiAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LnN1YnN0cmluZygwLCBxdWVyeS5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcXVlcnkgKz0gJ30nO1xyXG4gICAgICAgIHF1ZXJ5ID0gZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KTtcclxuICAgICAgICBxdWVyeSArPSBgJnBhZ2VJbmRleD0ke2luZGV4fSZwYWdlU2l6ZT0ke3NpemV9YDtcclxuICAgICAgICB1cmwgKz0gJz9zZWFyY2hWYWx1ZT0nICsgcXVlcnk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXJsICs9IGA/cGFnZUluZGV4PSR7aW5kZXh9JnBhZ2VTaXplPSR7c2l6ZX1gO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkucGlwZShcclxuICAgICAgICBtYXAoKHJlOiBhbnkpID0+ICh7XHJcbiAgICAgICAgICBpdGVtczogcmUuY29udGVudCxcclxuICAgICAgICAgIHRvdGFsOiByZS50b3RhbEVsZW1lbnRzLFxyXG4gICAgICAgICAgcGFnZUluZm86IHtcclxuICAgICAgICAgICAgcGFnZUluZGV4OiByZS5wYWdlYWJsZS5wYWdlTnVtYmVyICsgMSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IHJlLnBhZ2VhYmxlLnBhZ2VTaXplLFxyXG4gICAgICAgICAgICBwYWdlTGlzdDogWzIwLCA0MCwgNjAsIDgwLCAxMDBdLFxyXG4gICAgICAgICAgICBlbmFibGVQYWdlcjogdHJ1ZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=