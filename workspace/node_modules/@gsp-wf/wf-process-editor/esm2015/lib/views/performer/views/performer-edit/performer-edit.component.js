/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewChild, Input, Optional, LOCALE_ID, Inject } from '@angular/core';
import { UserPerformerComponent } from '../user-performer/user-performer.component';
import { PositionPerformerComponent } from '../position-performer/position-performer.component';
import { ComponentPerformerComponent } from '../component-performer/component-performer.component';
import { ReportingLineComponent } from '../reporting-line/reporting-line.component';
import { MatrixPerformerComponent } from '../matrix-performer/matrix-performer.component';
import { HttpService } from '@ecp-caf/caf-common';
import { ActivityExecutorPerformerComponent } from '../activity-executor-performer/activity-executor-performer.component';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { OrganizationParticipantExpression, ActionScope, OrganizationLevel } from '../../../../domain/entities/organization-participant-expression';
import { VariablePerformerComponent } from '../variable-performer/variable-performer.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class PerformerEditComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} http
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, expr, http, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.tab = 'user';
        this.display = true;
        this.organizationLevelCollection = [
            {
                value: 'UNIT',
                text: this.localePipe.transform('component.participant.currentUnit'),
                orgId: 'currentUnit'
            }, {
                value: 'DEPARTMENT',
                text: this.localePipe.transform('component.participant.currentDepartment'),
                orgId: 'currentDepartment'
            }, {
                value: 'VARORGANIZATION',
                text: this.localePipe.transform('component.participant.variableOrganization'),
                orgId: ''
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.organizationParticipant = new OrganizationParticipantExpression();
        this.organizationParticipant.actionScope = ActionScope.AssignUser;
        this.organizationParticipant.organizationLevel = OrganizationLevel.DEPARTMENT;
        this.organizationParticipant.organizationId = 'currentDepartment';
        this.organizationParticipant.organizationName = this.localePipe.transform('component.participant.currentDepartment');
        this.organizationParticipant.includeChildren = false;
        this.organizationParticipant.tag = 'variable';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.performer) {
            switch (this.performer.type) {
                case 'wf.UserParticipantExpression':
                    this.usersCmp.users = [];
                    this.usersCmp.users.push(this.performer.value);
                    // 2023-5-23 用户参与者支持编辑时单选+显示已选用户；
                    this.usersCmp.multiSelect = this.editState === 'edit' ? false : true;
                    // 考虑到兼容历史数据，暂时不使用用户参与者实体类中的userType属性
                    if (this.performer.value.performerId && this.performer.value.performerId.charAt(0) === '{') {
                        /** @type {?} */
                        const url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
                        this.http.get(url).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        (data) => {
                            this.usersCmp.userTypeButtonNeedShow = data;
                            this.usersCmp.userType = 'variable';
                            this.usersCmp.curOrgType = this.performer.value.orgType === 'Sys' ? 'Sys' : 'Administrative_organization';
                            this.usersCmp.condition = this.performer.value.condition;
                            // 根据表达式中的函数名判断是否使用的是上下文变量
                            /** @type {?} */
                            const isContextVariable = this.performer.value.performerId.indexOf('GetContextParameter') >= 0;
                            this.usersCmp.variableOrgTypes = isContextVariable ? [
                                { name: '系统用户', value: 'Sys' }
                            ] : [
                                { name: '系统用户', value: 'Sys' },
                                { name: '员工', value: 'Administrative_organization' }
                            ];
                        }));
                    }
                    else {
                        this.usersCmp.userType = 'user';
                        this.usersCmp.condition = this.performer.value.condition;
                    }
                    break;
                case 'wf.VariableParticipantExpression':
                    // TODO:参与者只保留一份最好
                    this.varCmp.users = [];
                    this.varCmp.users.push(this.performer.value);
                    this.varCmp.user = this.performer.value;
                    this.varCmp.editState = this.editState === 'edit' ? false : true;
                    // 判断是变量参与者
                    if (this.performer.value.varValue && this.performer.value.varValue.charAt(0) === '{') {
                        // 根据表达式中的函数名判断是否使用的是上下文变量
                        /** @type {?} */
                        const isContextVariable = this.performer.value.varValue.indexOf('GetContextParameter') >= 0;
                        // 上下文变量的变量值类型只有系统用户id
                        this.varCmp.variableOrgTypes = isContextVariable ? [
                            { name: '用户ID', value: 'Sys' }
                        ] : [
                            { name: '用户ID', value: 'Sys' },
                            { name: '员工ID', value: 'Administrative_staff' },
                        ];
                        // 如果是insuite场景还要增加行政组织id
                        this.varCmp.curOrgType = this.performer.value.varType;
                        this.varCmp.relationShipType = this.performer.value.relation;
                        this.varCmp.condition = this.performer.value.condition;
                    }
                    break;
                case 'wf.PositionParticipantExpression':
                    this.posiCmp.editState = this.editState === 'edit' ? false : true;
                    this.posiCmp.position = Object.assign({}, this.performer.value);
                    this.posiCmp.performerName = this.posiCmp.position.performerName;
                    if (this.posiCmp.position.positionType === '0') {
                        this.posiCmp.newFilter = { positionType: '0' };
                    }
                    else {
                        this.posiCmp.newFilter = { positionType: '1' };
                    }
                    break;
                case 'wf.ReportingLineParticipantExpression':
                    // this.tab = 'report';
                    this.reportingLineCmp.setReportingLineDataEntity = this.performer.value;
                    break;
                case 'wf.ComponentParticipantExpression':
                    // this.tab = 'component';
                    this.cmpCmp.component = this.performer.value;
                    break;
                case 'wf.MatrixParticipantExpression':
                    // this.tab = 'matrix';
                    this.matrixCmp.setMatrixDataEntity = this.performer.value;
                    break;
                case 'wf.ActivityExecutorParticipantExpression':
                    // this.tab = 'activityExecutor';
                    this.activityExecutorCmp.activityExecutors = [];
                    this.activityExecutorCmp.activityExecutors.push(this.performer.value);
                    this.activityExecutorCmp.condition = this.performer.value.condition;
                    break;
                case 'wf.OrganizationParticipantExpression':
                    if (this.performer.value.organizationLevel === OrganizationLevel.DEFAULT && this.performer.value.tag === 'expression') {
                        this.performer.value.organizationLevel = OrganizationLevel.VARORGANIZATION;
                    }
                    this.organizationParticipant = this.performer.value;
                    if (this.performer.value.OrganizationLevel === OrganizationLevel.DEPARTMENT && this.performer.value.tag === 'expression') {
                        this.performer.value.OrganizationLevel === OrganizationLevel.VARORGANIZATION;
                    }
                    break;
            }
        }
        if (this.performerType) {
            switch (this.performerType) {
                case 'wf.UserParticipantExpression':
                    this.usersCmp.userType = 'user';
                    break;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChange(event) {
        switch (event.value) {
            case this.organizationLevelCollection[0].value:
                this.organizationParticipant.organizationId = this.organizationLevelCollection[0].orgId;
                this.organizationParticipant.organizationName = this.organizationLevelCollection[0].text;
                this.organizationParticipant.includeChildren = true;
                break;
            case this.organizationLevelCollection[1].value:
                this.organizationParticipant.organizationId = this.organizationLevelCollection[1].orgId;
                this.organizationParticipant.organizationName = this.organizationLevelCollection[1].text;
                break;
            case this.organizationLevelCollection[2].value:
                this.organizationParticipant.organizationId = this.organizationLevelCollection[2].orgId;
                this.organizationParticipant.organizationName = this.organizationLevelCollection[2].text;
                this.organizationParticipant.includeChildren = true;
                this.organizationParticipant.tag = 'expression';
                break;
        }
    }
    /**
     * @return {?}
     */
    getPerformers() {
        /** @type {?} */
        const users = this.usersCmp ? this.usersCmp.getPerformers() : [];
        /** @type {?} */
        const variable = this.varCmp ? this.varCmp.getPerformers() : null;
        /** @type {?} */
        const positions = this.posiCmp ? this.posiCmp.getPerformers() : [];
        /** @type {?} */
        const component = this.cmpCmp ? this.cmpCmp.getPerformers() : null;
        /** @type {?} */
        const reportingLine = this.reportingLineCmp ? this.reportingLineCmp.getPerformers() : null;
        /** @type {?} */
        const matrix = this.matrixCmp ? this.matrixCmp.getPerformers() : null;
        /** @type {?} */
        const activityExecutors = this.activityExecutorCmp ? this.activityExecutorCmp.getPerformers() : [];
        /** @type {?} */
        let userPerformers = [];
        // 用户参与者
        /** @type {?} */
        let activityExecutorPerformers = [];
        if ((users && users.length > 0)) {
            userPerformers = userPerformers.concat(users);
        }
        if (activityExecutors && activityExecutors.length > 0) {
            activityExecutorPerformers = activityExecutorPerformers.concat(activityExecutors);
        }
        /** @type {?} */
        let organizationParticipant;
        if (this.performerType === 'wf.OrganizationParticipantExpression') {
            if (this.organizationParticipant.organizationLevel === OrganizationLevel.VARORGANIZATION && this.organizationParticipant.tag === 'expression') {
                this.organizationParticipant.organizationLevel = OrganizationLevel.DEFAULT;
            }
            organizationParticipant = this.organizationParticipant;
        }
        return { userPerformers, variable, positions, component, reportingLine, matrix, activityExecutorPerformers, organizationParticipant };
    }
    /**
     * @return {?}
     */
    editConditon() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.organizationParticipant.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.organizationParticipant.condition = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    editOrganizationId() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced);
        this.expr.addExpressionText(this.organizationParticipant.organizationId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.organizationParticipant.organizationId = expressioninfo;
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
PerformerEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer-edit',
                template: "<app-user-performer *ngIf=\"performerType === 'wf.UserParticipantExpression'\"></app-user-performer>\r\n<app-variable-performer *ngIf=\"performerType === 'wf.VariableParticipantExpression'\"></app-variable-performer>\r\n<app-position-performer *ngIf=\"performerType === 'wf.PositionParticipantExpression'\"></app-position-performer>\r\n<app-reporting-line *ngIf=\"performerType === 'wf.ReportingLineParticipantExpression'\"></app-reporting-line>\r\n<app-matrix-performer *ngIf=\"performerType === 'wf.MatrixParticipantExpression'\"></app-matrix-performer>\r\n<app-activity-handler-performer\r\n  *ngIf=\"performerType === 'wf.ActivityExecutorParticipantExpression'\"></app-activity-handler-performer>\r\n<app-component-performer [component]=\"component\" style=\"background: #FFF;\"\r\n  *ngIf=\"performerType === 'wf.ComponentParticipantExpression'\"></app-component-performer>\r\n\r\n<div *ngIf=\"performerType === 'wf.OrganizationParticipantExpression'\" class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\" style=\"background: #FFF;\">\r\n    <div class=\"f-utils-fill-flex-column farris-split-section mx-1 h-100\"\r\n      style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n      <form style=\"width: 100%; height: 100%;\">\r\n        <div class=\"d-flex m-2 flex-column w-100\">\r\n          <div class=\"d-flex flex-column\" style=\"height: 120px;\">\r\n            <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2 pt-3\">\r\n              <div class=\"col-12 farris-group-auto\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.alternativeScope'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-combo-list [panelHeight]=\"100\" [(ngModel)]=\"organizationParticipant.organizationLevel\"\r\n                        name=\"actionScope\" [idField]=\"'value'\" [enableClear]=\"false\" [textField]=\"'text'\"\r\n                        [valueField]=\"'value'\" [data]=\"organizationLevelCollection\" [readonly]=\"false\"\r\n                        (valueChange)=\"valueChange($event)\">\r\n                      </farris-combo-list>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- \u5355\u4F4D/\u90E8\u95E8\u53C2\u4E0E\u8005\u652F\u6301\u5355\u4F4DID -->\r\n              <div *ngIf=\"organizationParticipant.organizationLevel===organizationLevelCollection[2].value\"\r\n                class=\"col-12 farris-group-auto my-3 pr-3\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.orgId'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"organizationParticipant.organizationId\"\r\n                          name=\"organizationId\" [readOnly]=\"true\" />\r\n                        <div class=\"input-group-append\">\r\n                          <span class=\"input-group-text\" (click)=\"editOrganizationId()\" style=\"background: #FFF;\">\r\n                            <i class=\"f-icon f-icon-lookup\"></i>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"organizationParticipant.organizationLevel!=organizationLevelCollection[0].value\"\r\n                class=\"col-12 farris-group-auto my-3 pr-5\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.includeChildren'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-switch [(ngModel)]=\"organizationParticipant.includeChildren\"\r\n                        name=\"includeChildren\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex flex-column m-2 w-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n              <div class=\"col-12 farris-group-auto my-4\" style=\"padding-left: 6px;padding-right: 21px;\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">{{'component.participant.conditon'|wfLocale}}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                      <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"organizationParticipant.condition\"\r\n                          name=\"conditon\" [readOnly]=\"true\" />\r\n                        <div class=\"input-group-append\">\r\n                          <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                            <i class=\"f-icon f-icon-lookup\"></i>\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
PerformerEditComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: HttpService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
PerformerEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    display: [{ type: Input }],
    usersCmp: [{ type: ViewChild, args: [UserPerformerComponent,] }],
    varCmp: [{ type: ViewChild, args: [VariablePerformerComponent,] }],
    posiCmp: [{ type: ViewChild, args: [PositionPerformerComponent,] }],
    cmpCmp: [{ type: ViewChild, args: [ComponentPerformerComponent,] }],
    reportingLineCmp: [{ type: ViewChild, args: [ReportingLineComponent,] }],
    matrixCmp: [{ type: ViewChild, args: [MatrixPerformerComponent,] }],
    activityExecutorCmp: [{ type: ViewChild, args: [ActivityExecutorPerformerComponent,] }]
};
if (false) {
    /** @type {?} */
    PerformerEditComponent.prototype.cls;
    /** @type {?} */
    PerformerEditComponent.prototype.component;
    /** @type {?} */
    PerformerEditComponent.prototype.performer;
    /** @type {?} */
    PerformerEditComponent.prototype.performerType;
    /** @type {?} */
    PerformerEditComponent.prototype.userType;
    /** @type {?} */
    PerformerEditComponent.prototype.editState;
    /** @type {?} */
    PerformerEditComponent.prototype.tab;
    /** @type {?} */
    PerformerEditComponent.prototype.display;
    /** @type {?} */
    PerformerEditComponent.prototype.organizationLevelCollection;
    /** @type {?} */
    PerformerEditComponent.prototype.organizationParticipant;
    /** @type {?} */
    PerformerEditComponent.prototype.usersCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.varCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.posiCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.cmpCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.reportingLineCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.matrixCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.activityExecutorCmp;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,