/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewChild, ElementRef, NgZone, ComponentFactoryResolver, Injector, Output, EventEmitter, TemplateRef, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { PositionPerformerEntity } from '../../entities/position-performer.entity';
import { SysLookupDetailComponent } from '@gsp-sys/sysmgr-lookup';
import { BsModalService } from '@farris/ui-modal';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
import { PositionsNamePipe } from './positions-name.pipe';
export class PositionPerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} ngZone
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     * @param {?} positionsNamePipe
     */
    constructor(designerUIState, expr, ngZone, resolver, injector, modalService, cdr, localeId, resources, localePipe, positionsNamePipe) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.positionsNamePipe = positionsNamePipe;
        this.cls = 'd-flex flex-fill h-100';
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.showClearButton = false;
        this.isRequired = false;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.positionTypes = [
            { value: '0', text: this.localePipe.transform('component.positionPerformer.orgPosition') },
            { value: '1', text: this.localePipe.transform('component.positionPerformer.generalPosition') }
        ];
        this.performerName = '';
        this.style = { background: '#FFF' };
        this.newFilter = {};
        this.treeFilter = {};
        this.curPosIdList = [];
        this.editState = true;
        this.showCondition = true;
        this.positions = [];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.position = this.position || new PositionPerformerEntity();
        this.performerName = this.performerName || (this.positions && this.positions.length ? this.positionsNamePipe.transform(this.positions) : this.position.performerName || '');
        if (this.designerUIState.scene === 'inSuite') {
            this.position.positionType = '1';
            this.newFilter = { positionType: '1' };
            this.style = { background: '#FFF', height: '150px' };
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.designerUIState.getOrgConfig().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re && re.currentValue === 'true') {
                this.isRequired = true;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.submitEmitter.emit(this.position);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @return {?}
     */
    clear() {
        this.position.performerId = null;
        this.position.performerName = null;
        this.performerName = '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    positionTypeChange(data) {
        if (data.value === '0') {
            this.newFilter = { positionType: '0' };
            this.positionType = '0';
        }
        else {
            this.newFilter = { positionType: '1' };
            this.positionType = '1';
        }
        this.clear();
        this.position.orgType = null;
        this.position.orgId = null;
    }
    /**
     * @return {?}
     */
    selectOrganition() {
        // this.expr.clearContext();
        if (this.position.positionType === '1') {
            if (this.designerUIState.schemas.length > 0) {
                for (const schema of this.designerUIState.schemas) {
                    this.expr.addSchema('Schema', schema);
                }
                if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                    /** @type {?} */
                    const entityType = this.designerUIState.schemas[0].entityTypes[0];
                    this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
                }
            }
            /** @type {?} */
            const context = new Array();
            if (this.designerUIState.subActivityContext.length > 0) {
                for (const variable of this.designerUIState.subActivityContext) {
                    if (!context.some((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.key === variable.key))) {
                        context.push(variable);
                    }
                }
            }
            if (context.length > 0) {
                for (const v of context) {
                    this.expr.addContext(v);
                }
            }
            this.expr.setEditPattern(ExprEditMode.Advanced);
            this.expr.addExpressionText(this.position.orgId);
            this.expr.buildExpression().then((/**
             * @param {?} expr
             * @return {?}
             */
            (expr) => {
                this.position.orgId = expr;
                //点击确定后，去除表达式里面的新增的上下文变量
                if (context.length > 0) {
                    this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => !context.some((/**
                     * @param {?} y
                     * @return {?}
                     */
                    y => y.key === x.key))));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    selectPosition() {
        this.setPosition();
    }
    /**
     * @return {?}
     */
    editCondition() {
        // this.expr.clearContext();
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        let context = new Array();
        context = this.designerUIState.addContext(context);
        if (this.designerUIState.subActivityContext.length > 0) {
            for (const variable of this.designerUIState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.position.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.position.condition = expressioninfo;
            for (const p of this.positions) {
                p.condition = expressioninfo;
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @param {?} re
     * @return {?}
     */
    orgTypeChange(re) {
        this.position.orgType = re.data.value;
    }
    /**
     * @return {?}
     */
    clearOrgType() {
        this.position.orgType = null;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    positionsSelected(data) {
        this.positions = [];
        if (data || data.data.length > 0) {
            /** @type {?} */
            const positions = [];
            for (const dataSelected of data.data) {
                if (this.editState) {
                    this.position = new PositionPerformerEntity();
                    this.position.performerId = dataSelected.id;
                    this.position.performerName = dataSelected.name;
                    this.position.type = 'wf.PositionParticipantExpression';
                    if (!this.position.positionType) {
                        this.position.positionType = dataSelected.posType + '';
                        this.newFilter = {
                            positionType: dataSelected.posType
                        };
                    }
                    this.position.isRequired = this.isRequired;
                    this.position.condition = this.condition ? this.condition : "";
                    positions.push(this.position);
                }
                else {
                    this.position.performerId = dataSelected.id;
                    this.position.performerName = dataSelected.name;
                    this.position.type = 'wf.PositionParticipantExpression';
                    if (!this.position.positionType) {
                        this.position.positionType = dataSelected.posType + '';
                        this.newFilter = {
                            positionType: dataSelected.posType
                        };
                    }
                    this.position.isRequired = this.isRequired;
                    this.position.condition = this.condition ? this.condition : "";
                    positions.push(this.position);
                }
            }
            this.positions = [...positions];
            this.performerName = this.positions && this.positions.length ? (this.positionsNamePipe.transform(this.positions)) : (this.position.performerName ? this.position.performerName : '');
        }
    }
    /**
     * @return {?}
     */
    setPosition() {
        this.positions = [];
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SysLookupDetailComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.initGridIdList = this.curPosIdList;
        compRef.instance.treeFilter = this.treeFilter;
        compRef.instance.listFilter = this.newFilter;
        compRef.instance.sourceType = 'position';
        compRef.instance.multiSelect = false;
        // 编辑状态下只能单选
        if (this.positionType === "0" && this.editState) {
            compRef.instance.multiSelect = true;
        }
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.positionPerformer.sysPositions'),
            width: 1000,
            height: 550,
            showButtons: true,
            buttons: compRef.instance.btnTemplateRef,
            showMaxButton: true,
            resizable: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 取消后
        compRef.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            dialog.close();
        }));
        // 确认后
        compRef.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.positionsSelected(res);
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        if (!this.editState) {
            this.positions.push(this.position);
        }
        return this.positions;
    }
}
PositionPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-position-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\" style=\"background: #FFF;\">\r\n  <div class=\"d-flex flex-fill farris-overflow-y-auto mx-3 my-2\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n  <form style=\"width: 100%;\">\r\n    <div class=\"d-flex m-2 flex-column w-100\" style=\"margin-top: 20px!important;\">\r\n      <div class=\"d-flex flex-column\" [ngStyle]=\"style\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div *ngIf=\"designerUIState.scene!=='inSuite'\" class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.positionType'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"position.positionType\" name=\"positionType\" [panelHeight]=\"'auto'\" [idField]=\"'value'\"\r\n                    [textField]=\"'text'\" [data]=\"positionTypes\" (valueChange)=\"positionTypeChange($event)\"\r\n                    [panelHeight]=\"'auto'\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">{{designerUIState.scene==='inSuite'?('component.positionPerformer.role'|wfLocale):('component.positionPerformer.position'|wfLocale)}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"performerName\" name=\"positionName\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectPosition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"designerUIState.scene!=='inSuite' && position.positionType === '1'\" class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <ng-container *ngIf=\"isRequired&&position.positionType==='1'\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                  </ng-container>\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.sysType'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"position.orgType\" name=\"orgType\" [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                    [data]=\"designerUIState.orgTypeCollection\" [panelHeight]=\"'auto'\" (clear)=\"clearOrgType()\"\r\n                    (selectChange)='orgTypeChange($event)' [readonly]=\"!(position.positionType==='1')\" placeholder=\"{{position.positionType==='1'?('component.positionPerformer.placeholder'|wfLocale):''}}\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"designerUIState.scene!=='inSuite' && position.positionType === '1'\" class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <ng-container *ngIf=\"isRequired&&position.positionType==='1'\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                  </ng-container>\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.orgId'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                    [showButtonWhenDisabled]=\"false\" [readonly]=\"!(position.positionType==='1')\"\r\n                    [(ngModel)]=\"position.orgId\" name=\"organization\" placeholder=\"{{position.positionType==='1'?('component.positionPerformer.placeholder'|wfLocale):''}}\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectOrganition()\" [groupText]=\"groupIcon\"></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"showCondition\" class=\"d-flex flex-column\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'component.positionPerformer.condition'|wfLocale}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"this.position.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.positionPerformer.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.positionPerformer.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
PositionPerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: NgZone },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] },
    { type: PositionsNamePipe }
];
PositionPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    posiHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    buttonRef: [{ type: ViewChild, args: ['buttonRef',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};
if (false) {
    /** @type {?} */
    PositionPerformerComponent.prototype.cls;
    /** @type {?} */
    PositionPerformerComponent.prototype.closeEmitter;
    /** @type {?} */
    PositionPerformerComponent.prototype.submitEmitter;
    /** @type {?} */
    PositionPerformerComponent.prototype.posiHelp;
    /** @type {?} */
    PositionPerformerComponent.prototype.buttonRef;
    /** @type {?} */
    PositionPerformerComponent.prototype.inputGroup;
    /** @type {?} */
    PositionPerformerComponent.prototype.showClearButton;
    /** @type {?} */
    PositionPerformerComponent.prototype.isRequired;
    /** @type {?} */
    PositionPerformerComponent.prototype.groupIcon;
    /** @type {?} */
    PositionPerformerComponent.prototype.positionTypes;
    /** @type {?} */
    PositionPerformerComponent.prototype.performerName;
    /** @type {?} */
    PositionPerformerComponent.prototype.style;
    /** @type {?} */
    PositionPerformerComponent.prototype.condition;
    /** @type {?} */
    PositionPerformerComponent.prototype.newFilter;
    /** @type {?} */
    PositionPerformerComponent.prototype.treeFilter;
    /** @type {?} */
    PositionPerformerComponent.prototype.curPosIdList;
    /** @type {?} */
    PositionPerformerComponent.prototype.editState;
    /** @type {?} */
    PositionPerformerComponent.prototype.showCondition;
    /** @type {?} */
    PositionPerformerComponent.prototype.positionType;
    /** @type {?} */
    PositionPerformerComponent.prototype.position;
    /** @type {?} */
    PositionPerformerComponent.prototype.positions;
    /** @type {?} */
    PositionPerformerComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.localePipe;
    /**
     * @type {?}
     * @private
     */
    PositionPerformerComponent.prototype.positionsNamePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb24tcGVyZm9ybWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvcGVyZm9ybWVyL3ZpZXdzL3Bvc2l0aW9uLXBlcmZvcm1lci9wb3NpdGlvbi1wZXJmb3JtZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFdBQVcsRUFDWCxTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFFTix3QkFBd0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQ3RILE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbkYsT0FBTyxFQUFvQix3QkFBd0IsRUFBYSxNQUFNLHdCQUF3QixDQUFDO0FBQy9GLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFFdEcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFVMUQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7Ozs7Ozs7Ozs7SUErQnJDLFlBQ1MsZUFBdUMsRUFDdEMsSUFBdUIsRUFDdkIsTUFBYyxFQUNkLFFBQWtDLEVBQ2xDLFFBQWtCLEVBQ2xCLFlBQTRCLEVBQ2hC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OztJQUNGLG1EQUFtQjs7SUFDbkIsMkNBQW9DOztJQUVwQywrQ0FBa0I7O0lBRWxCLCtDQUFrQzs7SUFDbEMsZ0RBQTRCOztJQUM1QixrREFBeUI7O0lBQ3pCLCtDQUFpQjs7SUFDakIsbURBQXFCOztJQUNyQixrREFBcUI7O0lBQ3JCLDhDQUFrQzs7SUFDbEMsK0NBQTBDOztJQUV4QyxxREFBOEM7Ozs7O0lBQzlDLDBDQUErQjs7Ozs7SUFDL0IsNENBQXNCOzs7OztJQUN0Qiw4Q0FBMEM7Ozs7O0lBQzFDLDhDQUEwQjs7Ozs7SUFDMUIsa0RBQW9DOzs7OztJQUNwQyx5Q0FBMEM7Ozs7O0lBQzFDLDhDQUEyQzs7Ozs7SUFDM0MsK0NBQWlEOzs7OztJQUNqRCxnREFBNEM7Ozs7O0lBQzVDLHVEQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIE9uSW5pdCxcclxuICBIb3N0QmluZGluZyxcclxuICBWaWV3Q2hpbGQsXHJcbiAgRWxlbWVudFJlZixcclxuICBOZ1pvbmUsXHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYsIENoYW5nZURldGVjdG9yUmVmLCBPcHRpb25hbCwgSW5qZWN0LCBMT0NBTEVfSURcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3lzRmFycmlzTG9va3VwQ29tcG9uZW50IH0gZnJvbSAnQGdzcC1zeXMvc3lzbWdyLXVpJztcclxuaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FwcC9wcm9jZXNzLWRlc2lnbmVyLnVpc3RhdGUnO1xyXG5pbXBvcnQgeyBFeHByRWRpdE1vZGUsIEV4cHJlc3Npb25TZXJ2aWNlLCBJbmplY3RlZFR5cGUgfSBmcm9tICdAZ3NwLXN2Yy9leHByZXNzaW9uJztcclxuaW1wb3J0IHsgUG9zaXRpb25QZXJmb3JtZXJFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdGllcy9wb3NpdGlvbi1wZXJmb3JtZXIuZW50aXR5JztcclxuaW1wb3J0IHtHc3BQb3NpdGlvbkZpbHRlciwgU3lzTG9va3VwRGV0YWlsQ29tcG9uZW50LCBUcmVlRmlsdGVyfSBmcm9tICdAZ3NwLXN5cy9zeXNtZ3ItbG9va3VwJztcclxuaW1wb3J0IHtCc01vZGFsU2VydmljZX0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IFdGX0xBTkdfUkVTT1VSQ0VTLCBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5pbXBvcnQgeyBXRl9QUk9DRVNTX0VESVRPUl9MQU5HX1JFU09VUkNFUyB9IGZyb20gJy4uLy4uLy4uLy4uL2kxOG4vYXNzZXRzL2xhbmcucmVzb3VyY2UnO1xyXG5pbXBvcnQgeyBQb3NpdGlvbnNOYW1lUGlwZSB9IGZyb20gJy4vcG9zaXRpb25zLW5hbWUucGlwZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1wb3NpdGlvbi1wZXJmb3JtZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wb3NpdGlvbi1wZXJmb3JtZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3Bvc2l0aW9uLXBlcmZvcm1lci5jb21wb25lbnQuc2NzcyddLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgIFdmTG9jYWxlUGlwZSxcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb3NpdGlvblBlcmZvcm1lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXHJcbiAgY2xzID0gJ2QtZmxleCBmbGV4LWZpbGwgaC0xMDAnO1xyXG5cclxuICBAT3V0cHV0KCkgY2xvc2VFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHN1Ym1pdEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAVmlld0NoaWxkKFN5c0ZhcnJpc0xvb2t1cENvbXBvbmVudCkgcG9zaUhlbHA6IFN5c0ZhcnJpc0xvb2t1cENvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKCdidXR0b25SZWYnKSBidXR0b25SZWY6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0R3JvdXAnKSBpbnB1dEdyb3VwOiBFbGVtZW50UmVmO1xyXG4gIHNob3dDbGVhckJ1dHRvbiA9IGZhbHNlO1xyXG4gIGlzUmVxdWlyZWQgPSBmYWxzZTtcclxuICBncm91cEljb24gPSAnPGkgY2xhc3M9XCJmLWljb24gZi1pY29uLWxvb2t1cFwiPjwvaT4nO1xyXG5cclxuICBwb3NpdGlvblR5cGVzID0gW1xyXG4gICAgeyB2YWx1ZTogJzAnLCB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQucG9zaXRpb25QZXJmb3JtZXIub3JnUG9zaXRpb24nKSB9LFxyXG4gICAgeyB2YWx1ZTogJzEnLCB0ZXh0OiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdjb21wb25lbnQucG9zaXRpb25QZXJmb3JtZXIuZ2VuZXJhbFBvc2l0aW9uJykgfVxyXG4gIF07XHJcbiAgcGVyZm9ybWVyTmFtZSA9ICcnO1xyXG4gIHN0eWxlOiBhbnkgPSB7IGJhY2tncm91bmQ6ICcjRkZGJyB9O1xyXG5cclxuICBjb25kaXRpb246IHN0cmluZztcclxuXHJcbiAgbmV3RmlsdGVyOiBHc3BQb3NpdGlvbkZpbHRlciA9IHt9O1xyXG4gIHRyZWVGaWx0ZXI6IFRyZWVGaWx0ZXIgPSB7fTtcclxuICBjdXJQb3NJZExpc3Q6IGFueVtdID0gW107XHJcbiAgZWRpdFN0YXRlID0gdHJ1ZTtcclxuICBzaG93Q29uZGl0aW9uID0gdHJ1ZTtcclxuICBwb3NpdGlvblR5cGU6IHN0cmluZztcclxuICBwb3NpdGlvbjogUG9zaXRpb25QZXJmb3JtZXJFbnRpdHk7XHJcbiAgcG9zaXRpb25zOiBQb3NpdGlvblBlcmZvcm1lckVudGl0eVtdID0gW107XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgZGVzaWduZXJVSVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlLFxyXG4gICAgcHJpdmF0ZSBleHByOiBFeHByZXNzaW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXHJcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZUlkOiBzdHJpbmcsXHJcbiAgICBASW5qZWN0KFdGX0xBTkdfUkVTT1VSQ0VTKSBwcml2YXRlIHJlc291cmNlczogYW55LFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsb2NhbGVQaXBlOiBXZkxvY2FsZVBpcGUsXHJcbiAgICBwcml2YXRlIHBvc2l0aW9uc05hbWVQaXBlOiBQb3NpdGlvbnNOYW1lUGlwZVxyXG4gICkge1xyXG4gICAgdGhpcy5sb2NhbGVQaXBlID0gdGhpcy5sb2NhbGVQaXBlIHx8IG5ldyBXZkxvY2FsZVBpcGUobG9jYWxlSWQsIHJlc291cmNlcyk7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiB8fCBuZXcgUG9zaXRpb25QZXJmb3JtZXJFbnRpdHkoKTtcclxuICAgIHRoaXMucGVyZm9ybWVyTmFtZSA9IHRoaXMucGVyZm9ybWVyTmFtZSB8fCAodGhpcy5wb3NpdGlvbnMgJiYgdGhpcy5wb3NpdGlvbnMubGVuZ3RoID8gdGhpcy5wb3NpdGlvbnNOYW1lUGlwZS50cmFuc2Zvcm0odGhpcy5wb3NpdGlvbnMpIDogdGhpcy5wb3NpdGlvbi5wZXJmb3JtZXJOYW1lIHx8ICcnKTtcclxuICAgIGlmICh0aGlzLmRlc2lnbmVyVUlTdGF0ZS5zY2VuZSA9PT0gJ2luU3VpdGUnKSB7XHJcbiAgICAgIHRoaXMucG9zaXRpb24ucG9zaXRpb25UeXBlID0gJzEnO1xyXG4gICAgICB0aGlzLm5ld0ZpbHRlciA9IHsgcG9zaXRpb25UeXBlOiAnMScgfTtcclxuICAgICAgdGhpcy5zdHlsZSA9IHsgYmFja2dyb3VuZDogJyNGRkYnLCBoZWlnaHQ6ICcxNTBweCcgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5kZXNpZ25lclVJU3RhdGUuZ2V0T3JnQ29uZmlnKCkuc3Vic2NyaWJlKHJlID0+IHtcclxuICAgICAgaWYgKHJlICYmIHJlLmN1cnJlbnRWYWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgdGhpcy5pc1JlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMuaW5wdXRHcm91cC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgJ21vdXNlZW50ZXInLFxyXG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyLmJpbmQodGhpcylcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5pbnB1dEdyb3VwLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAnbW91c2VsZWF2ZScsXHJcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlRW50ZXIoZXZlbnQpIHtcclxuICAgIHRoaXMuc2hvd0NsZWFyQnV0dG9uID0gdHJ1ZTtcclxuICAgIGlmICh0aGlzLnNob3dDbGVhckJ1dHRvbikge1xyXG4gICAgICB0aGlzLnRvZ2dsZUNsZWFySWNvbihldmVudCwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uTW91c2VMZWF2ZShldmVudCkge1xyXG4gICAgdGhpcy5zaG93Q2xlYXJCdXR0b24gPSBmYWxzZTtcclxuICAgIHRoaXMudG9nZ2xlQ2xlYXJJY29uKGV2ZW50LCBmYWxzZSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgdG9nZ2xlQ2xlYXJJY29uKGV2ZW50OiBhbnksIGlzU2hvdyA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBzdHIgPSBpc1Nob3cgPyAnJyA6ICdub25lJztcclxuICAgIGNvbnN0IGNsZWFySWNvbiA9IGV2ZW50LnRhcmdldC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZ3JvdXAtY2xlYXInKTtcclxuICAgIGlmIChjbGVhckljb24pIHtcclxuICAgICAgY2xlYXJJY29uLnN0eWxlLmRpc3BsYXkgPSBzdHI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGlja09LKCkge1xyXG4gICAgdGhpcy5zdWJtaXRFbWl0dGVyLmVtaXQodGhpcy5wb3NpdGlvbik7XHJcbiAgfVxyXG5cclxuICBjbGlja0NhbmNlbCgpIHtcclxuICAgIHRoaXMuY2xvc2VFbWl0dGVyLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbi5wZXJmb3JtZXJJZCA9IG51bGw7XHJcbiAgICB0aGlzLnBvc2l0aW9uLnBlcmZvcm1lck5hbWUgPSBudWxsO1xyXG4gICAgdGhpcy5wZXJmb3JtZXJOYW1lID0gJyc7XHJcbiAgfVxyXG5cclxuICBwb3NpdGlvblR5cGVDaGFuZ2UoZGF0YSkge1xyXG4gICAgaWYgKGRhdGEudmFsdWUgPT09ICcwJykge1xyXG4gICAgICB0aGlzLm5ld0ZpbHRlciA9IHsgcG9zaXRpb25UeXBlOiAnMCcgfTtcclxuICAgICAgdGhpcy5wb3NpdGlvblR5cGUgPSAnMCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm5ld0ZpbHRlciA9IHsgcG9zaXRpb25UeXBlOiAnMScgfTtcclxuICAgICAgdGhpcy5wb3NpdGlvblR5cGUgPSAnMSc7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICB0aGlzLnBvc2l0aW9uLm9yZ1R5cGUgPSBudWxsO1xyXG4gICAgdGhpcy5wb3NpdGlvbi5vcmdJZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RPcmdhbml0aW9uKCkge1xyXG4gICAgLy8gdGhpcy5leHByLmNsZWFyQ29udGV4dCgpO1xyXG4gICAgaWYgKHRoaXMucG9zaXRpb24ucG9zaXRpb25UeXBlID09PSAnMScpIHtcclxuICAgICAgaWYgKHRoaXMuZGVzaWduZXJVSVN0YXRlLnNjaGVtYXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2NoZW1hIG9mIHRoaXMuZGVzaWduZXJVSVN0YXRlLnNjaGVtYXMpIHtcclxuICAgICAgICAgIHRoaXMuZXhwci5hZGRTY2hlbWEoJ1NjaGVtYScsIHNjaGVtYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRlc2lnbmVyVUlTdGF0ZS5zY2hlbWFzWzBdLmVudGl0eVR5cGVzICYmIHRoaXMuZGVzaWduZXJVSVN0YXRlLnNjaGVtYXNbMF0uZW50aXR5VHlwZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgZW50aXR5VHlwZSA9IHRoaXMuZGVzaWduZXJVSVN0YXRlLnNjaGVtYXNbMF0uZW50aXR5VHlwZXNbMF07XHJcbiAgICAgICAgICB0aGlzLmV4cHIuYWRkSW5qZWN0ZWRFbnRpdHkoZW50aXR5VHlwZS5uYW1lLCAnU2NoZW1hJyxcclxuICAgICAgICAgICAgZW50aXR5VHlwZS5uYW1lLCBJbmplY3RlZFR5cGUuRW50aXR5VHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgaWYgKHRoaXMuZGVzaWduZXJVSVN0YXRlLnN1YkFjdGl2aXR5Q29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLmRlc2lnbmVyVUlTdGF0ZS5zdWJBY3Rpdml0eUNvbnRleHQpIHtcclxuICAgICAgICAgIGlmICghY29udGV4dC5zb21lKGMgPT4gYy5rZXkgPT09IHZhcmlhYmxlLmtleSkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5wdXNoKHZhcmlhYmxlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBjb250ZXh0KSB7XHJcbiAgICAgICAgICB0aGlzLmV4cHIuYWRkQ29udGV4dCh2KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5leHByLnNldEVkaXRQYXR0ZXJuKEV4cHJFZGl0TW9kZS5BZHZhbmNlZCk7XHJcbiAgICAgIHRoaXMuZXhwci5hZGRFeHByZXNzaW9uVGV4dCh0aGlzLnBvc2l0aW9uLm9yZ0lkKTtcclxuICAgICAgdGhpcy5leHByLmJ1aWxkRXhwcmVzc2lvbigpLnRoZW4oKGV4cHI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ub3JnSWQgPSBleHByO1xyXG4gICAgICAgIC8v54K55Ye756Gu5a6a5ZCO77yM5Y676Zmk6KGo6L6+5byP6YeM6Z2i55qE5paw5aKe55qE5LiK5LiL5paH5Y+Y6YePXHJcbiAgICAgICAgaWYoY29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cHIuZXhwckVudGl0eS5jb250ZXh0RW50aXRpZXMgPSB0aGlzLmV4cHIuZXhwckVudGl0eS5jb250ZXh0RW50aXRpZXMuZmlsdGVyKHggPT4gIWNvbnRleHQuc29tZSh5ID0+IHkua2V5ID09PSB4LmtleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHNlbGVjdFBvc2l0aW9uKCkge1xyXG4gICAgdGhpcy5zZXRQb3NpdGlvbigpO1xyXG4gIH1cclxuICBlZGl0Q29uZGl0aW9uKCkge1xyXG4gICAgLy8gdGhpcy5leHByLmNsZWFyQ29udGV4dCgpO1xyXG4gICAgaWYgKHRoaXMuZGVzaWduZXJVSVN0YXRlLnNjaGVtYXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKGNvbnN0IHNjaGVtYSBvZiB0aGlzLmRlc2lnbmVyVUlTdGF0ZS5zY2hlbWFzKSB7XHJcbiAgICAgICAgdGhpcy5leHByLmFkZFNjaGVtYSgnU2NoZW1hJywgc2NoZW1hKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5kZXNpZ25lclVJU3RhdGUuc2NoZW1hc1swXS5lbnRpdHlUeXBlcyAmJiB0aGlzLmRlc2lnbmVyVUlTdGF0ZS5zY2hlbWFzWzBdLmVudGl0eVR5cGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBlbnRpdHlUeXBlID0gdGhpcy5kZXNpZ25lclVJU3RhdGUuc2NoZW1hc1swXS5lbnRpdHlUeXBlc1swXTtcclxuICAgICAgICB0aGlzLmV4cHIuYWRkSW5qZWN0ZWRFbnRpdHkoZW50aXR5VHlwZS5uYW1lLCAnU2NoZW1hJyxcclxuICAgICAgICAgIGVudGl0eVR5cGUubmFtZSwgSW5qZWN0ZWRUeXBlLkVudGl0eVR5cGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgY29udGV4dCA9IG5ldyBBcnJheSgpO1xyXG4gICAgY29udGV4dCA9IHRoaXMuZGVzaWduZXJVSVN0YXRlLmFkZENvbnRleHQoY29udGV4dCk7XHJcbiAgICBpZiAodGhpcy5kZXNpZ25lclVJU3RhdGUuc3ViQWN0aXZpdHlDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLmRlc2lnbmVyVUlTdGF0ZS5zdWJBY3Rpdml0eUNvbnRleHQpIHtcclxuICAgICAgICBpZiAoIWNvbnRleHQuc29tZShjID0+IGMua2V5ID09PSB2YXJpYWJsZS5rZXkpKSB7XHJcbiAgICAgICAgICBjb250ZXh0LnB1c2godmFyaWFibGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZGVzaWduZXJVSVN0YXRlLmFjdGl2aXR5Q29tcG9uZW50Q29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdmFyaWFibGUgb2YgdGhpcy5kZXNpZ25lclVJU3RhdGUuYWN0aXZpdHlDb21wb25lbnRDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKCFjb250ZXh0LnNvbWUoYyA9PiBjLmtleSA9PT0gdmFyaWFibGUua2V5KSkge1xyXG4gICAgICAgICAgY29udGV4dC5wdXNoKHZhcmlhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2IG9mIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmV4cHIuYWRkQ29udGV4dCh2KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5leHByLnNldEVkaXRQYXR0ZXJuKEV4cHJFZGl0TW9kZS5Db25kaXRpb25hbCk7IC8vIOihqOi+vuW8j+WxleeOsOaooeW8j++8mum7mOiupOeugOaYk+eJiFxyXG4gICAgdGhpcy5leHByLmFkZEV4cHJlc3Npb25UZXh0KHRoaXMucG9zaXRpb24uY29uZGl0aW9uKTtcclxuICAgIHRoaXMuZXhwci5idWlsZEV4cHJlc3Npb24oKS50aGVuKChleHByZXNzaW9uaW5mbzogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHRoaXMucG9zaXRpb24uY29uZGl0aW9uID0gZXhwcmVzc2lvbmluZm87XHJcbiAgICAgIGZvciAoY29uc3QgcCBvZiB0aGlzLnBvc2l0aW9ucykge1xyXG4gICAgICAgIHAuY29uZGl0aW9uID0gZXhwcmVzc2lvbmluZm87XHJcbiAgICAgIH1cclxuICAgICAgLy/ngrnlh7vnoa7lrprlkI7vvIzljrvpmaTooajovr7lvI/ph4zpnaLnmoTmlrDlop7nmoTkuIrkuIvmloflj5jph49cclxuICAgICAgaWYoY29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdGhpcy5leHByLmV4cHJFbnRpdHkuY29udGV4dEVudGl0aWVzID0gdGhpcy5leHByLmV4cHJFbnRpdHkuY29udGV4dEVudGl0aWVzLmZpbHRlcih4ID0+ICFjb250ZXh0LnNvbWUoeSA9PiB5LmtleSA9PT0geC5rZXkpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvcmdUeXBlQ2hhbmdlKHJlOiBhbnkpIHtcclxuICAgIHRoaXMucG9zaXRpb24ub3JnVHlwZSA9IHJlLmRhdGEudmFsdWU7XHJcbiAgfVxyXG4gIGNsZWFyT3JnVHlwZSgpIHtcclxuICAgIHRoaXMucG9zaXRpb24ub3JnVHlwZSA9IG51bGw7XHJcbiAgfVxyXG4gIHBvc2l0aW9uc1NlbGVjdGVkKGRhdGEpIHtcclxuICAgIHRoaXMucG9zaXRpb25zID0gW107XHJcbiAgICBpZiAoZGF0YSB8fCBkYXRhLmRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcclxuICAgICAgZm9yKGNvbnN0IGRhdGFTZWxlY3RlZCBvZiBkYXRhLmRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5lZGl0U3RhdGUpIHtcclxuICAgICAgICAgIHRoaXMucG9zaXRpb24gPW5ldyBQb3NpdGlvblBlcmZvcm1lckVudGl0eSgpO1xyXG4gICAgICAgICAgdGhpcy5wb3NpdGlvbi5wZXJmb3JtZXJJZCA9IGRhdGFTZWxlY3RlZC5pZDtcclxuICAgICAgICAgIHRoaXMucG9zaXRpb24ucGVyZm9ybWVyTmFtZSA9IGRhdGFTZWxlY3RlZC5uYW1lO1xyXG4gICAgICAgICAgdGhpcy5wb3NpdGlvbi50eXBlID0gJ3dmLlBvc2l0aW9uUGFydGljaXBhbnRFeHByZXNzaW9uJztcclxuICAgICAgICAgIGlmICghdGhpcy5wb3NpdGlvbi5wb3NpdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi5wb3NpdGlvblR5cGUgPSBkYXRhU2VsZWN0ZWQucG9zVHlwZSArICcnO1xyXG4gICAgICAgICAgICB0aGlzLm5ld0ZpbHRlciA9IHtcclxuICAgICAgICAgICAgICBwb3NpdGlvblR5cGU6IGRhdGFTZWxlY3RlZC5wb3NUeXBlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uLmlzUmVxdWlyZWQgPSB0aGlzLmlzUmVxdWlyZWQ7XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uLmNvbmRpdGlvbiA9IHRoaXMuY29uZGl0aW9uID8gdGhpcy5jb25kaXRpb246XCJcIjtcclxuICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKHRoaXMucG9zaXRpb24pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uLnBlcmZvcm1lcklkID0gZGF0YVNlbGVjdGVkLmlkO1xyXG4gICAgICAgICAgdGhpcy5wb3NpdGlvbi5wZXJmb3JtZXJOYW1lID0gZGF0YVNlbGVjdGVkLm5hbWU7XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uLnR5cGUgPSAnd2YuUG9zaXRpb25QYXJ0aWNpcGFudEV4cHJlc3Npb24nO1xyXG4gICAgICAgICAgaWYgKCF0aGlzLnBvc2l0aW9uLnBvc2l0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnBvc2l0aW9uVHlwZSA9IGRhdGFTZWxlY3RlZC5wb3NUeXBlICsgJyc7XHJcbiAgICAgICAgICAgIHRoaXMubmV3RmlsdGVyID0ge1xyXG4gICAgICAgICAgICAgIHBvc2l0aW9uVHlwZTogZGF0YVNlbGVjdGVkLnBvc1R5cGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMucG9zaXRpb24uaXNSZXF1aXJlZCA9IHRoaXMuaXNSZXF1aXJlZDtcclxuICAgICAgICAgIHRoaXMucG9zaXRpb24uY29uZGl0aW9uID0gdGhpcy5jb25kaXRpb24gPyB0aGlzLmNvbmRpdGlvbjpcIlwiO1xyXG4gICAgICAgICAgcG9zaXRpb25zLnB1c2godGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucG9zaXRpb25zID0gWy4uLnBvc2l0aW9uc107XHJcbiAgICAgIHRoaXMucGVyZm9ybWVyTmFtZSA9IHRoaXMucG9zaXRpb25zJiZ0aGlzLnBvc2l0aW9ucy5sZW5ndGg/KHRoaXMucG9zaXRpb25zTmFtZVBpcGUudHJhbnNmb3JtKHRoaXMucG9zaXRpb25zKSk6KHRoaXMucG9zaXRpb24ucGVyZm9ybWVyTmFtZT90aGlzLnBvc2l0aW9uLnBlcmZvcm1lck5hbWU6JycpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHNldFBvc2l0aW9uKCkge1xyXG4gICAgdGhpcy5wb3NpdGlvbnMgPSBbXTtcclxuICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShTeXNMb29rdXBEZXRhaWxDb21wb25lbnQpO1xyXG4gICAgY29uc3QgY29tcFJlZiA9IGNvbXBGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UuaW5pdEdyaWRJZExpc3QgPSB0aGlzLmN1clBvc0lkTGlzdCA7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLnRyZWVGaWx0ZXIgPSB0aGlzLnRyZWVGaWx0ZXI7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmxpc3RGaWx0ZXIgPSB0aGlzLm5ld0ZpbHRlcjtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2Uuc291cmNlVHlwZSA9ICdwb3NpdGlvbic7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLm11bHRpU2VsZWN0ID0gZmFsc2U7XHJcbiAgICAvLyDnvJbovpHnirbmgIHkuIvlj6rog73ljZXpgIlcclxuICAgIGlmKHRoaXMucG9zaXRpb25UeXBlID09PSBcIjBcIiAmJiB0aGlzLmVkaXRTdGF0ZSkgeyAgICAgIFxyXG4gICAgICBjb21wUmVmLmluc3RhbmNlLm11bHRpU2VsZWN0ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1vZGFsQ29uZmlnID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnY29tcG9uZW50LnBvc2l0aW9uUGVyZm9ybWVyLnN5c1Bvc2l0aW9ucycpLFxyXG4gICAgICB3aWR0aDogMTAwMCxcclxuICAgICAgaGVpZ2h0OiA1NTAsXHJcbiAgICAgIHNob3dCdXR0b25zOiB0cnVlLFxyXG4gICAgICBidXR0b25zOiBjb21wUmVmLmluc3RhbmNlLmJ0blRlbXBsYXRlUmVmLFxyXG4gICAgICBzaG93TWF4QnV0dG9uOiB0cnVlLFxyXG4gICAgICByZXNpemFibGU6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZGlhbG9nID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wUmVmLCBtb2RhbENvbmZpZyk7XHJcbiAgICAvLyDlj5bmtojlkI5cclxuICAgIGNvbXBSZWYuaW5zdGFuY2UuYWZ0ZXJDYW5jbGUuc3Vic2NyaWJlKHJlcyA9PiB7XHJcbiAgICAgIC8vIOa2iOWkseaooeaAgeahhlxyXG4gICAgICBkaWFsb2cuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgLy8g56Gu6K6k5ZCOXHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmFmdGVyQ29uZmlybS5zdWJzY3JpYmUocmVzID0+IHtcclxuICAgICAgdGhpcy5wb3NpdGlvbnNTZWxlY3RlZChyZXMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRQZXJmb3JtZXJzKCkge1xyXG4gICAgaWYoIXRoaXMuZWRpdFN0YXRlKSB7XHJcbiAgICAgIHRoaXMucG9zaXRpb25zLnB1c2godGhpcy5wb3NpdGlvbilcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnBvc2l0aW9ucztcclxuICB9XHJcblxyXG59XHJcbiJdfQ==