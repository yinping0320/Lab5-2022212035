/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
import { SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { BillTypeHelpComponent } from '../bill-type-help/bill-type-help/bill-type-help.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class VoConfigComponent {
    /**
     * @param {?} messager
     * @param {?} notify
     * @param {?} modal
     * @param {?} framework
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} loading
     * @param {?} cfr
     * @param {?} inj
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(messager, notify, modal, framework, router, activatedRoute, loading, cfr, inj, cdr, localeId, resources, localePipe) {
        this.messager = messager;
        this.notify = notify;
        this.modal = modal;
        this.framework = framework;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.cfr = cfr;
        this.inj = inj;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform("component.voConfig.documentInfo"),
            width: 500,
            height: 240,
            showButtons: true
        };
        this.entity = {};
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data) {
            this.entity = data || {};
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOk() {
        /** @type {?} */
        const obj = { value: this.entity, parameters: null };
        this.submitModal.emit(obj);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    selectVo() {
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.inj);
        compRef.instance.typeList = 'GSPViewModel';
        // 元数据选择器bizTypeId表示业务种类Id
        compRef.instance.bizTypeId = this.editorParams && this.editorParams.bizTypeId;
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        (metadata4RefDto) => {
            this.clearVo();
            /** @type {?} */
            const voDto = metadata4RefDto.metadata;
            /** @type {?} */
            const vo = JSON.parse(voDto.content);
            this.entity.currentVoId = vo.ID;
            this.entity.currentVoName = vo.Name;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            // todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            this.clearVo();
        }));
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.voConfig.viewModelSelection"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modal.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @return {?}
     */
    clearVo() {
        this.entity.currentVoId = undefined;
        this.entity.currentVoName = undefined;
    }
    /**
     * @return {?}
     */
    selectDocuType() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(BillTypeHelpComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.inj, []);
        cmpR.instance.docuTypeId = this.entity.currentDocumentTypeId;
        /** @type {?} */
        const buttons = [];
        buttons.push({
            text: this.localePipe.transform("component.voConfig.cancel"),
            cls: "btn btn-secondary",
            handle: (/**
             * @return {?}
             */
            () => {
                bsModal && bsModal.close();
            })
        });
        buttons.push({
            text: this.localePipe.transform("component.voConfig.clickOk"),
            cls: "btn btn-primary",
            handle: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const docuType = cmpR.instance.getSelectedDocuType();
                if (docuType == null) {
                    this.notify.warning(this.localePipe.transform("component.voConfig.selectOne"));
                    return;
                }
                this.entity.currentDocumentTypeId = docuType.id;
                this.entity.currentDocumentTypeName = docuType.name;
                bsModal && bsModal.close();
            })
        });
        /** @type {?} */
        const bsModal = this.modal.show(cmpR, {
            title: this.localePipe.transform("component.voConfig.documentTypeSelect"),
            height: 573,
            width: 930,
            buttons: buttons,
            showMaxButton: false,
        });
    }
    /**
     * @return {?}
     */
    clearDocuType() {
        this.entity.currentDocumentTypeId = undefined;
        this.entity.currentDocumentTypeName = undefined;
    }
}
VoConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-vo-config',
                template: "<div class=\"f-page f-page-card f-page-is-mainsubcard\" id=\"bif-manager-list\">\r\n  <div class=\"f-page-main\" id=\"page-main\" style=\"overflow-y: auto;\">\r\n    <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.voConfig.viewModel' | wfLocale}}\" for=\"vo\">\r\n              <span class=\"farris-label-text\">{{'component.voConfig.viewModel' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"vo\" [ngModel]=\"entity&&entity.currentVoName\" [editable]=\"false\" [enableClear]=\"false\"\r\n                (clickHandle)=\"selectVo()\" (clear)=\"clearVo()\" [groupText]=\"groupIcon\" placeholder=\"{{'component.voConfig.placeholder' | wfLocale}}\">\r\n              </input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-12\">\r\n        <div class=\"farris-group-wrap\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\" title=\"{{'component.voConfig.documenttype' | wfLocale}}\" for=\"vo\">\r\n              <span class=\"farris-label-text\">{{'component.voConfig.documenttype' | wfLocale}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input-group id=\"vo\" [ngModel]=\"entity&&entity.currentDocumentTypeName\" [editable]=\"false\"\r\n                [enableClear]=\"false\" (clickHandle)=\"selectDocuType()\" (clear)=\"clearDocuType()\" [groupText]=\"groupIcon\"\r\n                placeholder=\"{{'component.voConfig.placeholder' | wfLocale}}\">\r\n              </input-group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">{{'component.voConfig.cancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">{{'component.voConfig.clickOk' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ]
            }] }
];
/** @nocollapse */
VoConfigComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService },
    { type: BsModalService },
    { type: FrameworkService },
    { type: Router },
    { type: ActivatedRoute },
    { type: LoadingService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
VoConfigComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
};
if (false) {
    /** @type {?} */
    VoConfigComponent.prototype.groupIcon;
    /** @type {?} */
    VoConfigComponent.prototype.closeModal;
    /** @type {?} */
    VoConfigComponent.prototype.submitModal;
    /** @type {?} */
    VoConfigComponent.prototype.editorParams;
    /** @type {?} */
    VoConfigComponent.prototype.modalFooter;
    /** @type {?} */
    VoConfigComponent.prototype.modalConfig;
    /** @type {?} */
    VoConfigComponent.prototype.entity;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.modal;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.framework;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.inj;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    VoConfigComponent.prototype.localePipe;
}
export class VoConfigConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.currentVoId) {
            return data.currentVoName || data.currentVoId || this.localePipe.transform("component.voConfig.set");
        }
        return this.localePipe.transform("component.voConfig.notSet");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    VoConfigConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm8tY29uZmlnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3Mvdm8tY29uZmlnL3ZvLWNvbmZpZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsd0JBQXdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBVSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0wsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEQsT0FBTyxFQUFtQix5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQWtCaEcsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7Ozs7Ozs7Ozs7OztJQTJCNUIsWUFDVSxRQUF5QixFQUN6QixNQUFxQixFQUNyQixLQUFxQixFQUNyQixTQUEyQixFQUMzQixNQUFjLEVBQ2QsY0FBOEIsRUFDOUIsT0FBdUIsRUFDdkIsR0FBNkIsRUFDN0IsR0FBYSxFQUNE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QVUsR0FBVixVQUFVLENBQWM7SUFDOUIsQ0FBQzs7Ozs7SUFFTCxTQUFTLENBQUMsSUFBYztRQUN0QixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDdEc7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDaEUsQ0FBQztDQUNGOzs7Ozs7SUFURyx1Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbmplY3RvciwgSW5wdXQsIExPQ0FMRV9JRCwgT25Jbml0LCBPcHRpb25hbCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnQGZhcnJpcy9pZGUtcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBMb2FkaW5nU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9hZGluZyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBHU1BWaWV3TW9kZWwgfSBmcm9tICdAZ3NwLWJlZi9nc3Atdm8tbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YTRSZWZEdG8sIFNlbGVjdE1ldGFkYXRhUlRDb21wb25lbnQgfSBmcm9tICdAZ3NwLWxjbS9tZXRhZGF0YXJ0LXNlbGVjdG9yJztcclxuaW1wb3J0IHsgRnJhbWV3b3JrU2VydmljZSB9IGZyb20gJ0Bnc3Atc3lzL3J0Zi1jb21tb24nO1xyXG5pbXBvcnQgeyBCaWxsVHlwZUhlbHBDb21wb25lbnQgfSBmcm9tICcuLi9iaWxsLXR5cGUtaGVscC9iaWxsLXR5cGUtaGVscC9iaWxsLXR5cGUtaGVscC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXRl9MQU5HX1JFU09VUkNFUywgV2ZMb2NhbGVQaXBlIH0gZnJvbSAnLi4vLi4vaTE4bi9waXBlL3dmLXByb2Nlc3MtZWRpdG9yLWxvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgV0ZfUFJPQ0VTU19FRElUT1JfTEFOR19SRVNPVVJDRVMgfSBmcm9tICcuLi8uLi9pMThuL2Fzc2V0cy9sYW5nLnJlc291cmNlJztcclxuXHJcbnR5cGUgVm9Db25maWcgPSB7XHJcbiAgY3VycmVudFZvSWQ/OiBzdHJpbmc7XHJcbiAgY3VycmVudFZvTmFtZT86IHN0cmluZztcclxuICBjdXJyZW50RG9jdW1lbnRUeXBlSWQ/OiBzdHJpbmc7XHJcbiAgY3VycmVudERvY3VtZW50VHlwZU5hbWU/OiBzdHJpbmc7XHJcbn07XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi12by1jb25maWcnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi92by1jb25maWcuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogW10sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICAgV2ZMb2NhbGVQaXBlLFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFZvQ29uZmlnQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICByZWFkb25seSBncm91cEljb24gPSAnPGkgY2xhc3M9XCJmLWljb24gZi1pY29uLWxvb2t1cFwiPjwvaT4nO1xyXG5cclxuICBAT3V0cHV0KCkgY2xvc2VNb2RhbCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBzdWJtaXRNb2RhbCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCB2YWx1ZShkYXRhOiBWb0NvbmZpZykge1xyXG4gICAgaWYgKGRhdGEpIHtcclxuICAgICAgdGhpcy5lbnRpdHkgPSBkYXRhIHx8IHt9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgZWRpdG9yUGFyYW1zOiB7XHJcbiAgICBiaXpUeXBlSWQ/OiBzdHJpbmdcclxuICB9ID0ge307XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2ljb25TZWxlY3RGb290ZXInKSBtb2RhbEZvb3RlcjogVGVtcGxhdGVSZWY8YW55PjtcclxuICBtb2RhbENvbmZpZyA9IHtcclxuICAgIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLmRvY3VtZW50SW5mb1wiKSxcclxuICAgIHdpZHRoOiA1MDAsXHJcbiAgICBoZWlnaHQ6IDI0MCxcclxuICAgIHNob3dCdXR0b25zOiB0cnVlXHJcbiAgfTtcclxuXHJcbiAgZW50aXR5OiBWb0NvbmZpZyA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbWVzc2FnZXI6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgIHByaXZhdGUgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtb2RhbDogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZyYW1ld29yazogRnJhbWV3b3JrU2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICBwcml2YXRlIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgIHByaXZhdGUgbG9hZGluZzogTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSBpbmo6IEluamVjdG9yLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQEluamVjdChMT0NBTEVfSUQpIHByaXZhdGUgbG9jYWxlSWQ6IHN0cmluZyxcclxuICAgIEBJbmplY3QoV0ZfTEFOR19SRVNPVVJDRVMpIHByaXZhdGUgcmVzb3VyY2VzOiBhbnksXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxvY2FsZVBpcGU6IFdmTG9jYWxlUGlwZSxcclxuICApIHtcclxuICAgIHRoaXMubG9jYWxlUGlwZSA9IHRoaXMubG9jYWxlUGlwZSB8fCBuZXcgV2ZMb2NhbGVQaXBlKGxvY2FsZUlkLCByZXNvdXJjZXMpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBjbGlja09rKCkge1xyXG4gICAgY29uc3Qgb2JqID0geyB2YWx1ZTogdGhpcy5lbnRpdHksIHBhcmFtZXRlcnM6IG51bGwgfTtcclxuICAgIHRoaXMuc3VibWl0TW9kYWwuZW1pdChvYmopO1xyXG4gIH1cclxuXHJcbiAgY2xpY2tDYW5jZWwoKSB7XHJcbiAgICB0aGlzLmNsb3NlTW9kYWwuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0Vm8oKSB7XHJcbiAgICBjb25zdCBjb21wRmFjdG9yeSA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFNlbGVjdE1ldGFkYXRhUlRDb21wb25lbnQpO1xyXG4gICAgY29uc3QgY29tcFJlZiA9IGNvbXBGYWN0b3J5LmNyZWF0ZSh0aGlzLmluaik7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLnR5cGVMaXN0ID0gJ0dTUFZpZXdNb2RlbCc7XHJcbiAgICAvLyDlhYPmlbDmja7pgInmi6nlmahiaXpUeXBlSWTooajnpLrkuJrliqHnp43nsbtJZFxyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5iaXpUeXBlSWQgPSB0aGlzLmVkaXRvclBhcmFtcyAmJiB0aGlzLmVkaXRvclBhcmFtcy5iaXpUeXBlSWQ7XHJcblxyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5zZWxlY3RlZE1ldGFkYXRhLnN1YnNjcmliZShcclxuICAgICAgKG1ldGFkYXRhNFJlZkR0bzogTWV0YWRhdGE0UmVmRHRvKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jbGVhclZvKCk7XHJcbiAgICAgICAgY29uc3Qgdm9EdG8gPSBtZXRhZGF0YTRSZWZEdG8ubWV0YWRhdGE7XHJcbiAgICAgICAgY29uc3Qgdm86IEdTUFZpZXdNb2RlbCA9IEpTT04ucGFyc2Uodm9EdG8uY29udGVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuZW50aXR5LmN1cnJlbnRWb0lkID0gdm8uSUQ7XHJcbiAgICAgICAgdGhpcy5lbnRpdHkuY3VycmVudFZvTmFtZSA9IHZvLk5hbWU7XHJcbiAgICAgIH0sXHJcbiAgICAgIChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgLy8gdG9kbyDnoa7lrprlvILluLjnu5PmnoQsIOebruWJjemHh+eUqOWFvOWuueWPluWAvOaWueW8j1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXIuZXJyb3IoZXJyLmVycm9yID09IG51bGwgPyBlcnIubWVzc2FnZSA6IChlcnIuZXJyb3IuTWVzc2FnZSB8fCBlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSkpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJWbygpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG1vZGFsQ29uZmlnID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImNvbXBvbmVudC52b0NvbmZpZy52aWV3TW9kZWxTZWxlY3Rpb25cIiksXHJcbiAgICAgIHdpZHRoOiA5MzAsXHJcbiAgICAgIGhlaWdodDogNTczLFxyXG4gICAgICBzaG93QnV0dG9uczogZmFsc2VcclxuICAgIH07XHJcbiAgICBjb25zdCBkaWFsb2cgPSB0aGlzLm1vZGFsLnNob3coY29tcFJlZiwgbW9kYWxDb25maWcpO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5jbG9zZU1vZGFsRW1pdHRlci5zdWJzY3JpYmUoJGV2ZW50ID0+IGRpYWxvZy5jbG9zZSgpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyVm8oKSB7XHJcbiAgICB0aGlzLmVudGl0eS5jdXJyZW50Vm9JZCA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuZW50aXR5LmN1cnJlbnRWb05hbWUgPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBzZWxlY3REb2N1VHlwZSgpIHtcclxuICAgIGNvbnN0IGNtcEYgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShCaWxsVHlwZUhlbHBDb21wb25lbnQpO1xyXG4gICAgY29uc3QgY21wUiA9IGNtcEYuY3JlYXRlKHRoaXMuaW5qLCBbXSk7XHJcbiAgICBjbXBSLmluc3RhbmNlLmRvY3VUeXBlSWQgPSB0aGlzLmVudGl0eS5jdXJyZW50RG9jdW1lbnRUeXBlSWQ7XHJcblxyXG4gICAgY29uc3QgYnV0dG9ucyA9IFtdO1xyXG4gICAgYnV0dG9ucy5wdXNoKFxyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImNvbXBvbmVudC52b0NvbmZpZy5jYW5jZWxcIiksXHJcbiAgICAgICAgY2xzOiBcImJ0biBidG4tc2Vjb25kYXJ5XCIsXHJcbiAgICAgICAgaGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICBic01vZGFsICYmIGJzTW9kYWwuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgYnV0dG9ucy5wdXNoKFxyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImNvbXBvbmVudC52b0NvbmZpZy5jbGlja09rXCIpLFxyXG4gICAgICAgIGNsczogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICBoYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGRvY3VUeXBlID0gY21wUi5pbnN0YW5jZS5nZXRTZWxlY3RlZERvY3VUeXBlKCk7XHJcbiAgICAgICAgICBpZiAoZG9jdVR5cGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS53YXJuaW5nKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb21wb25lbnQudm9Db25maWcuc2VsZWN0T25lXCIpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5lbnRpdHkuY3VycmVudERvY3VtZW50VHlwZUlkID0gZG9jdVR5cGUuaWQ7XHJcbiAgICAgICAgICB0aGlzLmVudGl0eS5jdXJyZW50RG9jdW1lbnRUeXBlTmFtZSA9IGRvY3VUeXBlLm5hbWU7XHJcbiAgICAgICAgICBic01vZGFsICYmIGJzTW9kYWwuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGJzTW9kYWwgPSB0aGlzLm1vZGFsLnNob3coY21wUiwge1xyXG4gICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImNvbXBvbmVudC52b0NvbmZpZy5kb2N1bWVudFR5cGVTZWxlY3RcIiksXHJcbiAgICAgIGhlaWdodDogNTczLFxyXG4gICAgICB3aWR0aDogOTMwLFxyXG4gICAgICBidXR0b25zOiBidXR0b25zLFxyXG4gICAgICBzaG93TWF4QnV0dG9uOiBmYWxzZSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJEb2N1VHlwZSgpIHtcclxuICAgIHRoaXMuZW50aXR5LmN1cnJlbnREb2N1bWVudFR5cGVJZCA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuZW50aXR5LmN1cnJlbnREb2N1bWVudFR5cGVOYW1lID0gdW5kZWZpbmVkO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZvQ29uZmlnQ29udmVydGVyIGltcGxlbWVudHMgVHlwZUNvbnZlcnRlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGxvY2FsZVBpcGU6IFdmTG9jYWxlUGlwZVxyXG4gICkgeyB9XHJcblxyXG4gIGNvbnZlcnRUbyhkYXRhOiBWb0NvbmZpZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmN1cnJlbnRWb0lkKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmN1cnJlbnRWb05hbWUgfHwgZGF0YS5jdXJyZW50Vm9JZCB8fCB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLnNldFwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY29tcG9uZW50LnZvQ29uZmlnLm5vdFNldFwiKTtcclxuICB9XHJcbn1cclxuIl19