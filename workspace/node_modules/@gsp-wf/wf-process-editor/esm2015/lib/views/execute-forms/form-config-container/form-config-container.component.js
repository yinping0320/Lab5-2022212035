/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ViewContainerRef, Injector, ComponentFactoryResolver, TemplateRef, Input } from '@angular/core';
import { FormFormatConfigComponent } from '../form-format-config/form-format-config.component';
import { HttpService } from '@ecp-caf/caf-common';
export class FormConfigContainerComponent {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} http
     */
    constructor(injector, cfr, http) {
        this.injector = injector;
        this.cfr = cfr;
        this.http = http;
        this.showMethodTab = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.showComponentRef();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['formFormatId'] && changes['formFormatId'].currentValue) {
            this.showComponentRef();
        }
        else { // 功能菜单时
            this.componentRef = this.createWFComponentRef();
            this.componentRef.instance.formFormatId = null;
            this.componentRef.instance.formatConfigId = null;
            this.componentRef.instance.showMethodTab = this.showMethodTab;
            this.container.clear();
            this.container.insert(this.componentRef.hostView);
        }
    }
    /**
     * @return {?}
     */
    submit() {
        return this.componentRef.instance.submit();
    }
    /**
     * @private
     * @return {?}
     */
    showComponentRef() {
        this.componentRef = this.createWFComponentRef();
        this.componentRef.instance.formFormatId = this.formFormatId;
        this.componentRef.instance.formatConfigId = this.formatConfigId;
        this.componentRef.instance.showMethodTab = this.showMethodTab;
        this.container.clear();
        this.container.insert(this.componentRef.hostView);
        // if (this.formFormatId) {
        // this.getFormFormatType().subscribe((re: FormFormatType) => {
        // if (re.code === 'wf') {
        // } else {
        //   System.import(re.customImpl)
        //     .then((moduleFactorys: any) => {
        //       const moduleFactory: any = Object.values(moduleFactorys)[0];
        //       const moduleRef = moduleFactory.create(this.injector);
        //       this.componentRef = moduleRef.instance.createCustomComponentRef(this.injector);
        //       this.componentRef.instance.formFormatId = this.formFormatId;
        //       this.componentRef.instance.formatConfigId = this.formatConfigId;
        //       this.componentRef.instance.showMethodTab = this.showMethodTab;
        //       this.container.clear();
        //       this.container.insert(this.componentRef.hostView);
        //     });
        // }
        // });
        // }
    }
    /**
     * @private
     * @return {?}
     */
    createWFComponentRef() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(FormFormatConfigComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.injector);
        return cmpR;
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormatType() {
        if (this.formFormatId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/formFormatType/formFormat?formFormat=${this.formFormatId}`;
            return this.http.get(url);
        }
    }
}
FormConfigContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-form-config-container',
                template: "<ng-container #container></ng-container>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FormConfigContainerComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: HttpService }
];
FormConfigContainerComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    formFormatId: [{ type: Input }],
    formatConfigId: [{ type: Input }],
    showMethodTab: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.componentRef;
    /** @type {?} */
    FormConfigContainerComponent.prototype.container;
    /** @type {?} */
    FormConfigContainerComponent.prototype.modalFooter;
    /** @type {?} */
    FormConfigContainerComponent.prototype.formFormatId;
    /** @type {?} */
    FormConfigContainerComponent.prototype.formatConfigId;
    /** @type {?} */
    FormConfigContainerComponent.prototype.showMethodTab;
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FormConfigContainerComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb25maWctY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvZXhlY3V0ZS1mb3Jtcy9mb3JtLWNvbmZpZy1jb250YWluZXIvZm9ybS1jb25maWctY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFnQixXQUFXLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUUvSyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFXbEQsTUFBTSxPQUFPLDRCQUE0Qjs7Ozs7O0lBWXZDLFlBQ1UsUUFBa0IsRUFDbEIsR0FBNkIsRUFDN0IsSUFBaUI7UUFGakIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUM3QixTQUFJLEdBQUosSUFBSSxDQUFhO1FBSmxCLGtCQUFhLEdBQUcsSUFBSSxDQUFDO0lBSzFCLENBQUM7Ozs7SUFFTCxRQUFRO1FBQ04sMkJBQTJCO0lBQzdCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLEVBQUU7WUFDbkUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDekI7YUFBTSxFQUFFLFFBQVE7WUFDZixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztZQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUM5RCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDN0MsQ0FBQzs7Ozs7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM5RCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEQsMkJBQTJCO1FBQ3pCLCtEQUErRDtRQUM3RCwwQkFBMEI7UUFFMUIsV0FBVztRQUNYLGlDQUFpQztRQUNqQyx1Q0FBdUM7UUFDdkMscUVBQXFFO1FBQ3JFLCtEQUErRDtRQUMvRCx3RkFBd0Y7UUFDeEYscUVBQXFFO1FBQ3JFLHlFQUF5RTtRQUN6RSx1RUFBdUU7UUFDdkUsZ0NBQWdDO1FBQ2hDLDJEQUEyRDtRQUMzRCxVQUFVO1FBQ1YsSUFBSTtRQUNOLE1BQU07UUFDUixJQUFJO0lBQ04sQ0FBQzs7Ozs7SUFFTyxvQkFBb0I7O2NBQ3BCLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLHlCQUF5QixDQUFDOztjQUNsRSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFOztrQkFDZixHQUFHLEdBQUcsNkRBQTZELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDNUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7OztZQW5GRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsd0RBQXFEOzthQUV0RDs7OztZQWJ3RCxRQUFRO1lBQUUsd0JBQXdCO1lBR2xGLFdBQVc7Ozt3QkFjakIsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTswQkFDakQsU0FBUyxTQUFDLGtCQUFrQjsyQkFFNUIsS0FBSzs2QkFFTCxLQUFLOzRCQUdMLEtBQUs7Ozs7Ozs7SUFUTixvREFBd0M7O0lBQ3hDLGlEQUFnRjs7SUFDaEYsbURBQTZEOztJQUU3RCxvREFDcUI7O0lBQ3JCLHNEQUN1Qjs7SUFFdkIscURBQThCOzs7OztJQUU1QixnREFBMEI7Ozs7O0lBQzFCLDJDQUFxQzs7Ozs7SUFDckMsNENBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBUZW1wbGF0ZVJlZiwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJRm9ybUZvcm1hdENvbmZpZ0NvbXBvbmVudCB9IGZyb20gJ0Bnc3Atd2YvYml6LXByb2Nlc3MtYXBpJztcclxuaW1wb3J0IHsgRm9ybUZvcm1hdENvbmZpZ0NvbXBvbmVudCB9IGZyb20gJy4uL2Zvcm0tZm9ybWF0LWNvbmZpZy9mb3JtLWZvcm1hdC1jb25maWcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGb3JtRm9ybWF0VHlwZSB9IGZyb20gJy4uL2VudGl0aWVzL2Zvcm0tZm9ybWF0LXR5cGUnO1xyXG5cclxuZGVjbGFyZSB2YXIgU3lzdGVtOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1mb3JtLWNvbmZpZy1jb250YWluZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtLWNvbmZpZy1jb250YWluZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2Zvcm0tY29uZmlnLWNvbnRhaW5lci5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1Db25maWdDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcblxyXG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PjtcclxuICBAVmlld0NoaWxkKCdjb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmO1xyXG4gIEBWaWV3Q2hpbGQoJ2ljb25TZWxlY3RGb290ZXInKSBtb2RhbEZvb3RlcjogVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgQElucHV0KClcclxuICBmb3JtRm9ybWF0SWQ6IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIGZvcm1hdENvbmZpZ0lkOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpIHNob3dNZXRob2RUYWIgPSB0cnVlO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgLy8gdGhpcy5zaG93Q29tcG9uZW50UmVmKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlc1snZm9ybUZvcm1hdElkJ10gJiYgY2hhbmdlc1snZm9ybUZvcm1hdElkJ10uY3VycmVudFZhbHVlKSB7XHJcbiAgICAgIHRoaXMuc2hvd0NvbXBvbmVudFJlZigpO1xyXG4gICAgfSBlbHNlIHsgLy8g5Yqf6IO96I+c5Y2V5pe2XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jcmVhdGVXRkNvbXBvbmVudFJlZigpO1xyXG4gICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5mb3JtRm9ybWF0SWQgPSBudWxsO1xyXG4gICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5mb3JtYXRDb25maWdJZCA9IG51bGw7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnNob3dNZXRob2RUYWIgPSB0aGlzLnNob3dNZXRob2RUYWI7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsZWFyKCk7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLmluc2VydCh0aGlzLmNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdWJtaXQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5zdWJtaXQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hvd0NvbXBvbmVudFJlZigpIHtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jcmVhdGVXRkNvbXBvbmVudFJlZigpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZm9ybUZvcm1hdElkID0gdGhpcy5mb3JtRm9ybWF0SWQ7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5mb3JtYXRDb25maWdJZCA9IHRoaXMuZm9ybWF0Q29uZmlnSWQ7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5zaG93TWV0aG9kVGFiID0gdGhpcy5zaG93TWV0aG9kVGFiO1xyXG4gICAgdGhpcy5jb250YWluZXIuY2xlYXIoKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmluc2VydCh0aGlzLmNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XHJcbiAgICAvLyBpZiAodGhpcy5mb3JtRm9ybWF0SWQpIHtcclxuICAgICAgLy8gdGhpcy5nZXRGb3JtRm9ybWF0VHlwZSgpLnN1YnNjcmliZSgocmU6IEZvcm1Gb3JtYXRUeXBlKSA9PiB7XHJcbiAgICAgICAgLy8gaWYgKHJlLmNvZGUgPT09ICd3ZicpIHtcclxuXHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgIFN5c3RlbS5pbXBvcnQocmUuY3VzdG9tSW1wbClcclxuICAgICAgICAvLyAgICAgLnRoZW4oKG1vZHVsZUZhY3RvcnlzOiBhbnkpID0+IHtcclxuICAgICAgICAvLyAgICAgICBjb25zdCBtb2R1bGVGYWN0b3J5OiBhbnkgPSBPYmplY3QudmFsdWVzKG1vZHVsZUZhY3RvcnlzKVswXTtcclxuICAgICAgICAvLyAgICAgICBjb25zdCBtb2R1bGVSZWYgPSBtb2R1bGVGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICAvLyAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IG1vZHVsZVJlZi5pbnN0YW5jZS5jcmVhdGVDdXN0b21Db21wb25lbnRSZWYodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgLy8gICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZm9ybUZvcm1hdElkID0gdGhpcy5mb3JtRm9ybWF0SWQ7XHJcbiAgICAgICAgLy8gICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZm9ybWF0Q29uZmlnSWQgPSB0aGlzLmZvcm1hdENvbmZpZ0lkO1xyXG4gICAgICAgIC8vICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnNob3dNZXRob2RUYWIgPSB0aGlzLnNob3dNZXRob2RUYWI7XHJcbiAgICAgICAgLy8gICAgICAgdGhpcy5jb250YWluZXIuY2xlYXIoKTtcclxuICAgICAgICAvLyAgICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnQodGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gICAgICAgIC8vICAgICB9KTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgIC8vIH0pO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVXRkNvbXBvbmVudFJlZigpOiBDb21wb25lbnRSZWY8SUZvcm1Gb3JtYXRDb25maWdDb21wb25lbnQ+IHtcclxuICAgIGNvbnN0IGNtcEYgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShGb3JtRm9ybWF0Q29uZmlnQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IGNtcFIgPSBjbXBGLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgIHJldHVybiBjbXBSO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRGb3JtRm9ybWF0VHlwZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHRoaXMuZm9ybUZvcm1hdElkKSB7XHJcbiAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9mb3JtRm9ybWF0VHlwZS9mb3JtRm9ybWF0P2Zvcm1Gb3JtYXQ9JHt0aGlzLmZvcm1Gb3JtYXRJZH1gO1xyXG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19