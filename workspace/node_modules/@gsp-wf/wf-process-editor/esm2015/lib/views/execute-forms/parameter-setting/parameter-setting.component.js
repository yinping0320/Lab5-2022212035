/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, Optional, LOCALE_ID, Inject } from '@angular/core';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { of, Subject } from 'rxjs';
import { DatagridComponent } from '@farris/ui-datagrid';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { BsModalService } from '@farris/ui-modal';
import { VariableGridComponent } from '../variable-grid/variable-grid.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
export class ParameterSettingComponent {
    /**
     * @param {?} expr
     * @param {?} designerState
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(expr, designerState, resolver, modalService, injector, cdr, localeId, resources, localePipe) {
        this.expr = expr;
        this.designerState = designerState;
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.idField = 'Name';
        this._mode = 'bpmn';
        this.submit = new Subject();
        this.cancel = new Subject();
        this.formTypeCollection = [
            { text: this.localePipe.transform('component.executeForms.processEmbeddedForm'), value: '0' },
            { text: this.localePipe.transform('component.executeForms.formEmbedProcess'), value: '1' },
        ];
        this.valueTypeCollection = [
            { text: this.localePipe.transform('component.executeForms.variable'), value: 'variable' },
            { text: this.localePipe.transform('component.executeForms.constant'), value: 'constant' },
            { text: this.localePipe.transform('component.executeForms.expression'), value: 'expression' }
        ];
        this.cols = new Array();
        this.parameters = new Array();
        this.formType = this.formTypeCollection[0].value;
        this.showFormType = false;
        this.allParameters = new Array();
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            if (this.mode === 'usual') {
                return of(true);
            }
            else {
                if (param.column.field === 'Value') {
                    /** @type {?} */
                    const rowData = (/** @type {?} */ (param.rowData));
                    switch (rowData.Tag) {
                        case 'expression':
                            param.column.editor = {
                                type: 'input-group',
                                options: {
                                    groupText: '<i class="f-icon f-icon-lookup"></i>',
                                    editable: false,
                                    clickHandle: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                        this.showExprHelp(e);
                                    }),
                                    clear: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        console.log('clear', e);
                                    })
                                }
                            };
                            break;
                        case 'variable':
                            param.column.editor = {
                                type: 'input-group',
                                options: {
                                    groupText: '<i class="f-icon f-icon-lookup"></i>',
                                    editable: true,
                                    clickHandle: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        this.selectVariable(e);
                                    }),
                                    clear: (/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    (e) => {
                                        console.log('clear', e);
                                    })
                                }
                            };
                            break;
                        case 'constant':
                            param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                            break;
                    }
                }
                return of(true);
            }
        });
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set mode(m) {
        this._mode = m;
        if (m === 'bpmn') {
            this.idField = 'Name';
            this.cols = [
                { field: 'Name', width: 50, title: this.localePipe.transform('component.executeForms.code') },
                { field: 'Tag', width: 50, title: this.localePipe.transform('component.executeForms.tag'), formatter: {
                        type: 'enum',
                        options: { valueField: 'value', textField: 'text', data: this.valueTypeCollection }
                    },
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: {
                            valueField: 'value', textField: 'text', data: this.valueTypeCollection, idField: 'value', panelHeight: 'auto', enableClear: false,
                            selectChange: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                this.valueTypeChange(e);
                            })
                        }
                    } },
                {
                    field: 'Value', width: 100, title: this.localePipe.transform('component.executeForms.value'),
                    editor: {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    }
                }
            ];
        }
        else {
            this.idField = 'code';
            this.cols = [
                { field: 'code', width: 50, title: this.localePipe.transform('component.executeForms.code') },
                { field: 'name', width: 50, title: this.localePipe.transform('component.executeForms.name') },
                {
                    field: 'value', width: 100, title: this.localePipe.transform('component.executeForms.value'),
                    editor: {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    }
                }
            ];
        }
    }
    /**
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d) {
                e.formControl.setValue(d);
                e.instance.cd.detectChanges();
            }
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        this.submit.next({ parameters: this.parameters, formType: this.formType });
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    valueTypeChange(e) {
        /** @type {?} */
        const param = this.parameters.find((/**
         * @param {?} p
         * @return {?}
         */
        p => p.Name === e.rowData.Name));
        param.Value = '';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    selectVariable(e) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(VariableGridComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.data = this.allParameters; // 目前只能根据元数据类型过滤，后续添加标签过滤
        // 目前只能根据元数据类型过滤，后续添加标签过滤
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.executeForms.variable'),
            width: 460,
            height: 450,
            showButtons: true,
            buttons: compRef.instance.buttonRef
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                e.formControl.setValue(data.key);
                e.instance.cd.detectChanges();
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => dialog.close()));
    }
}
ParameterSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-parameter-setting',
                template: "\r\n<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main my-0\">\r\n    <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist px-0\" [showHeader]=\"showFormType\" mainTitle=\"{{'component.executeForms.parametersSet' | wfLocale}}\" [enableMaximize]=\"false\">\r\n        <ng-template farrisSectionToolbar>\r\n          <farris-combo-list [(ngModel)]=\"formType\" name=\"formType\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n            [enableClear]=\"false\" [valueField]=\"'value'\" [data]=\"formTypeCollection\" [panelHeight]=\"'auto'\" [editable]=\"false\"\r\n            style=\"width: 130px;\">\r\n          </farris-combo-list>\r\n        </ng-template>\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"cols\" [data]=\"parameters\" #grid\r\n          [idField]=\"idField\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n          [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" [striped]=\"true\" [beforeEdit]=\"beforeEdit\"\r\n          [virtualized]=\"true\">\r\n        </farris-datagrid>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ParameterSettingComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: ProcessDesignerUIState },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ParameterSettingComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    ParameterSettingComponent.prototype.modalFooter;
    /** @type {?} */
    ParameterSettingComponent.prototype.grid;
    /** @type {?} */
    ParameterSettingComponent.prototype.idField;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype._mode;
    /** @type {?} */
    ParameterSettingComponent.prototype.submit;
    /** @type {?} */
    ParameterSettingComponent.prototype.cancel;
    /** @type {?} */
    ParameterSettingComponent.prototype.formTypeCollection;
    /** @type {?} */
    ParameterSettingComponent.prototype.valueTypeCollection;
    /** @type {?} */
    ParameterSettingComponent.prototype.cols;
    /** @type {?} */
    ParameterSettingComponent.prototype.parameters;
    /** @type {?} */
    ParameterSettingComponent.prototype.formType;
    /** @type {?} */
    ParameterSettingComponent.prototype.showFormType;
    /** @type {?} */
    ParameterSettingComponent.prototype.allParameters;
    /** @type {?} */
    ParameterSettingComponent.prototype.beforeEdit;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.modalService;
    /** @type {?} */
    ParameterSettingComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ParameterSettingComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,