/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, ElementRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { of } from 'rxjs/observable/of';
import { FormBuilder } from '@angular/forms';
import { ExecuteFormsUIState } from './execute-forms.uistate';
import { ExecuteFormsViewModel } from './execute-forms.viewmodel';
import { ExecuteFormsRepository } from './execute-forms.repository';
import { ExecuteFormModel, ActualParameter } from './entities/execute-form.entity';
import { BsModalService } from '@farris/ui-modal';
import { AddExecuteFormComponent } from './add-execute-form/add-execute-form.component';
import { FormConfigContainerComponent } from './form-config-container/form-config-container.component';
import { ParameterSettingComponent } from './parameter-setting/parameter-setting.component';
import { switchMap } from 'rxjs/operators';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { MessagerService } from '@farris/ui-messager';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class ExecuteFormsComponent {
    // *******************************************************
    /**
     * @param {?} formBuilder
     * @param {?} uistate
     * @param {?} viewmodel
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} designerState
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(formBuilder, uistate, viewmodel, resolver, injector, modalService, designerState, message, cdr, localeId, resources, localePipe) {
        this.formBuilder = formBuilder;
        this.uistate = uistate;
        this.viewmodel = viewmodel;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.designerState = designerState;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.modalConfig = {
            title: this.localePipe.transform('component.executeForms.executeForms'),
            width: 760,
            height: 532,
            showButtons: true
        };
        this.cls = 'farris-main-area flex-column';
        this.style = '#FFF';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.tab = 'web';
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.cols = [];
        this.showMethodTab = true;
        this.allParameters = new Array();
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.form = new ExecuteFormModel();
        this.allParameters = this.getVariableList();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    set value(item) {
        if (item) {
            /** @type {?} */
            const paramArray = new Array();
            item.ActualParameters.forEach((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                /** @type {?} */
                const para = new ActualParameter();
                para.Name = a.Name;
                para.Tag = a.Tag ? a.Tag : this.initVariableType(a.Value);
                para.Value = a.Value;
                paramArray.push(para);
            }));
            this.form.ActualParameters = paramArray;
            this.form.Id = item.Id;
            this.form.Name = item.Name;
            this.form.ComponentId = item.ComponentId;
            this.form.formFormatId = item.formFormatId;
            this.form.formatConfigId = item.formatConfigId;
            this.form.FormType = item.FormType;
            this.form.TerminalType = item.TerminalType;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.location = this.editorParams.location;
        this.tab = this.editorParams.tab;
        if (this.location === 'userActivity') {
            this.showMethodTab = true;
        }
        else {
            this.showMethodTab = false;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        let data = new ExecuteFormModel();
        this.getForm().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (!re.result) {
                return;
            }
            data = re.form;
            if (this.validator(data)) {
                /** @type {?} */
                let parameters = null;
                // 如果存在变量类型参数在流程变量上不存在，需要同步流程变量
                if (data && data.ActualParameters && data.ActualParameters.length > 0) {
                    /** @type {?} */
                    const formalParameters = this.designerState.flowFormInfo.formalParameters.filter((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.dataType !== 'CDTSchema'));
                    for (const parameter of data.ActualParameters) {
                        if (parameter.Tag === 'variable' && parameter.Value && !this.allParameters.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.key === parameter.Value)) && formalParameters.some((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.code === parameter.Value))) {
                            parameters = formalParameters;
                            break;
                        }
                    }
                }
                /** @type {?} */
                const object = { value: data, parameters };
                this.submitModal.emit(object);
            }
        }));
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    validator(form) {
        if (form && form.ActualParameters && form.ActualParameters.length > 0) {
            /** @type {?} */
            const formalParameters = this.designerState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.dataType !== 'CDTSchema'));
            for (const parameter of form.ActualParameters) {
                if (parameter.Tag === 'variable' && parameter.Value && !this.allParameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.key === parameter.Value)) && !formalParameters.some((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.code === parameter.Value))) {
                    this.message.error(this.localePipe.transform('component.executeForms.parameters') + parameter.Name + this.localePipe.transform('component.executeForms.typeAsvariable'));
                    return false;
                }
            }
        }
        return true;
    }
    // tabChange(data) {
    //   this.tab = data.nextId;
    // }
    // editCSS() {
    //   this.configSection.nativeElement.querySelector('div.f-section-header').classList.add('mb-0');
    // }
    /**
     * @private
     * @return {?}
     */
    getForm() {
        if (this.form.ComponentId) {
            return of({ result: true, form: this.form });
        }
        else if (this.form.formFormatId) {
            return this.configContainer.submit().pipe(switchMap((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re.result) {
                    this.form.formatConfigId = re.configId;
                    return of({ result: true, form: this.form });
                }
                else {
                    return of({ result: false, form: this.form });
                }
            })));
        }
        else {
            return of({ result: true, form: null });
        }
    }
    /**
     * 参数设置
     * @return {?}
     */
    parametersSet() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'bpmn';
        compRef.instance.allParameters = this.allParameters;
        if (this.tab === 'web') {
            if (this.form.ComponentId) {
                compRef.instance.showFormType = true;
                compRef.instance.formType = this.form.FormType;
            }
            compRef.instance.parameters = [...this.form.ActualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => Object.assign({}, p)))];
        }
        else {
            compRef.instance.parameters = [...this.form.ActualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => Object.assign({}, p)))];
        }
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.executeForms.parameterSettings'),
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (this.tab === 'web') {
                this.form.ActualParameters = re.parameters;
                this.form.FormType = re.formType;
            }
            else {
                this.form.ActualParameters = re.parameters;
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
    }
    /**
     * 选择表单定义
     * @return {?}
     */
    selectExecuteForm() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(AddExecuteFormComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.tab = this.tab;
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.executeForms.formDefinitionList'),
            width: 650,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.form = re;
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
    }
    /**
     * @return {?}
     */
    clear() {
        this.form = new ExecuteFormModel();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    initVariableType(value) {
        if (value) {
            if (value.length >= 8 && value.slice(0, 8) === `{"expr":`) {
                return 'expression';
            }
            else {
                return 'constant';
            }
        }
        else {
            return 'variable';
        }
    }
    /**
     * @private
     * @return {?}
     */
    getVariableList() {
        /** @type {?} */
        const context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                context.push(variable);
            }
        }
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        return context;
    }
}
ExecuteFormsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-execute-forms',
                template: "\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel'|wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n\r\n<ng-template #empty>\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-datagrid-norecords\" style=\"height: 100%;\">\r\n      <div class=\"f-datagrid-norecords-content w-100\">{{'component.executeForms.noForm'|wfLocale}}</div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main mx-3\" style=\"border-radius:16px;border: 1.5px solid #F1F3F7;\">\r\n    <div class=\"farris-form farris-form-controls-inline farris-form-auto f-form-lable-auto\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"col-12 col-md-5 px-0 my-2\" style=\"margin-left: 50px;\">\r\n          <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group mb-0\">\r\n              <label class=\"col-form-label\">\r\n                <span class=\"farris-label-text\">{{'component.executeForms.form'|wfLocale}}</span>\r\n              </label>\r\n              <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"true\"\r\n                [showButtonWhenDisabled]=\"false\" [(ngModel)]=\"form.Name\" name=\"form\" placeholder=\"{{'component.executeForms.placeholder'|wfLocale}}\"\r\n                [editable]=\"false\" (clickHandle)=\"selectExecuteForm()\" (clear)=\"clear()\" [groupText]=\"groupIcon\">\r\n              </input-group>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12 col-md-2 my-2 px-0\">\r\n          <div class=\"farris-group-wrap\" style=\"padding-top: 2px;\">\r\n            <div class=\"form-group farris-form-group mb-0\">\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-button [disabled]=\"!form.ComponentId && !form.formFormatId\" [type]=\"'link'\" (click)=\"parametersSet()\">\r\n                  {{'component.executeForms.parametersSet'|wfLocale}}\r\n                </farris-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"h-100 mx-3\">\r\n    <lib-form-config-container #configContainer\r\n      [formFormatId]=\"form.formFormatId\" [formatConfigId]=\"form.formatConfigId\" [showMethodTab]=\"showMethodTab\"\r\n      class=\"h-100\"></lib-form-config-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n",
                providers: [
                    ExecuteFormsUIState, ExecuteFormsViewModel, ExecuteFormsRepository,
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
ExecuteFormsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ExecuteFormsUIState },
    { type: ExecuteFormsViewModel },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ProcessDesignerUIState },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
ExecuteFormsComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    style: [{ type: HostBinding, args: ['style.background',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    configContainer: [{ type: ViewChild, args: ['configContainer',] }],
    configSection: [{ type: ViewChild, args: ['configSection', { read: ElementRef },] }]
};
if (false) {
    /** @type {?} */
    ExecuteFormsComponent.prototype.modalConfig;
    /** @type {?} */
    ExecuteFormsComponent.prototype.cls;
    /** @type {?} */
    ExecuteFormsComponent.prototype.style;
    /** @type {?} */
    ExecuteFormsComponent.prototype.closeModal;
    /** @type {?} */
    ExecuteFormsComponent.prototype.submitModal;
    /** @type {?} */
    ExecuteFormsComponent.prototype.editorParams;
    /** @type {?} */
    ExecuteFormsComponent.prototype.modalFooter;
    /** @type {?} */
    ExecuteFormsComponent.prototype.configContainer;
    /** @type {?} */
    ExecuteFormsComponent.prototype.configSection;
    /** @type {?} */
    ExecuteFormsComponent.prototype.form;
    /** @type {?} */
    ExecuteFormsComponent.prototype.tab;
    /** @type {?} */
    ExecuteFormsComponent.prototype.groupIcon;
    /** @type {?} */
    ExecuteFormsComponent.prototype.cols;
    /** @type {?} */
    ExecuteFormsComponent.prototype.location;
    /** @type {?} */
    ExecuteFormsComponent.prototype.showMethodTab;
    /** @type {?} */
    ExecuteFormsComponent.prototype.allParameters;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.formBuilder;
    /** @type {?} */
    ExecuteFormsComponent.prototype.uistate;
    /** @type {?} */
    ExecuteFormsComponent.prototype.viewmodel;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsComponent.prototype.localePipe;
}
export class ExecuteFormsConverter {
    /**
     * @param {?} params
     * @param {?} localePipe
     */
    constructor(params, localePipe) {
        this.localePipe = localePipe;
        this.params = params;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data.Name;
        }
        else {
            if (this.params.location === 'process') {
                return this.localePipe.transform('component.executeForms.notSet');
            }
            else {
                return this.localePipe.transform('component.executeForms.default');
            }
        }
    }
}
if (false) {
    /** @type {?} */
    ExecuteFormsConverter.prototype.params;
    /**
     * @type {?}
     * @private
     */
    ExecuteFormsConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,