/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, TemplateRef, ViewChild, Input, ViewContainerRef, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { Observable, of, forkJoin, Subject } from 'rxjs';
import { FormFormat } from '../entities/form-format';
import { FormFormatConfig, FormButtonConfig, FormFieldConfig } from '../entities/form-format-config';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { switchMap } from 'rxjs/operators';
import { FormOperationConfigComponent } from '../form-operation-config/form-operation-config.component';
import { TreeTableComponent } from '@farris/ui-treetable';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
export class FormFormatConfigComponent {
    /**
     * @param {?} http
     * @param {?} message
     * @param {?} notify
     * @param {?} injector
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, message, notify, injector, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.notify = notify;
        this.injector = injector;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.config = new FormFormatConfig();
        this.formFormat = new FormFormat();
        this.state = 'edit';
        this.showMethodTab = true;
        this.buttonCols = [];
        this.buttonConfigs = new Array();
        this.fieldCols = [];
        this.fieldConfigs = new Array();
        this.formatFieldList = new Array();
        this.showExtendTab = false;
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        /** @type {?} */
        let serchFields = {
            label: this.localePipe.transform('component.executeForms.fieldName'),
            value: 'fieldName'
        };
        if (this.searchFields) {
            if (!this.searchFields.some((/**
             * @param {?} x
             * @return {?}
             */
            x => x.value === serchFields.value))) {
                this.searchFields = this.searchFields.concat(serchFields);
            }
        }
        else {
            this.searchFields = [];
            this.searchFields = this.searchFields.concat(serchFields);
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set formFormatId(v) {
        this._formFormatId = v;
        this.config.formFormatId = v;
    }
    /**
     * @return {?}
     */
    get formFormatId() {
        return this._formFormatId;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set formatConfigId(v) {
        this._formatConfigId = v;
        if (!v) {
            this.state = 'new';
        }
    }
    /**
     * @return {?}
     */
    get formatConfigId() {
        return this._formatConfigId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buttonCols = [
            { field: 'buttonName', width: 100, title: this.localePipe.transform('component.executeForms.buttonName'), filter: true },
            // { field: 'buttonId', width: 100, title: '按钮标识' },
            {
                title: this.localePipe.transform('component.executeForms.enable'),
                field: 'enable',
                width: 80,
                template: this.btnEnable,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.disabled'),
                field: 'disabled',
                width: 80,
                template: this.btnDisabled,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.hidden'),
                field: 'hidden',
                width: 80,
                template: this.btnHidden,
                align: 'center',
                hAlign: 'center'
            }
        ];
        this.fieldCols = [
            { field: 'fieldName', width: 100, title: this.localePipe.transform('component.executeForms.fieldName') },
            // { field: 'fieldId', width: 100, title: '字段标识' },
            {
                title: this.localePipe.transform('component.executeForms.editable'),
                field: 'editable',
                width: 80,
                template: this.fieldEditable,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.readonly'),
                field: 'readonly',
                width: 80,
                template: this.fieldReadonly,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.hidden'),
                field: 'hidden',
                width: 80,
                template: this.fieldHidden,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: this.localePipe.transform('component.executeForms.required'),
                field: 'required',
                width: 80,
                template: this.fieldRequired,
                align: 'center',
                hAlign: 'center'
            }
        ];
        this.getConfig();
    }
    /**
     * @return {?}
     */
    submit() {
        /** @type {?} */
        const subject = new Subject();
        this.validator().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re) {
                this.setBtnAndFieldConfigs();
                if (this.extendComponentRef) {
                    this.extendComponentRef.instance.submit().subscribe((/**
                     * @param {?} configId
                     * @return {?}
                     */
                    configId => {
                        if (configId) {
                            this.config.id = configId;
                            this.saveConfig(this.config).subscribe((/**
                             * @param {?} re
                             * @return {?}
                             */
                            re => {
                                subject.next({ result: true, configId: this.config.id });
                            }), (/**
                             * @param {?} err
                             * @return {?}
                             */
                            err => {
                                this.message.error(this.localePipe.transform('component.executeForms.saveFail'));
                                subject.next({ result: false, configId: this.config.id });
                            }));
                        }
                        else {
                            if (this.state === 'new' &&
                                this.config.formButtonConfigs.length === 0 &&
                                this.config.formFieldConfigs.length === 0 &&
                                this.operationConfig.operations.length === 0) {
                                setTimeout((/**
                                 * @return {?}
                                 */
                                () => {
                                    subject.next({ result: true, configId: null });
                                }), 10);
                            }
                            else {
                                this.saveConfig(this.config).subscribe((/**
                                 * @param {?} re
                                 * @return {?}
                                 */
                                re => {
                                    subject.next({ result: true, configId: this.config.id });
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                err => {
                                    this.message.error(this.localePipe.transform('component.executeForms.saveFail'));
                                    subject.next({ result: false, configId: this.config.id });
                                }));
                            }
                        }
                    }));
                }
                else {
                    if (this.state === 'new' &&
                        this.config.formButtonConfigs.length === 0 &&
                        this.config.formFieldConfigs.length === 0 &&
                        this.operationConfig.operations.length === 0) {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            subject.next({ result: true, configId: null });
                        }), 10);
                    }
                    else {
                        this.saveConfig(this.config).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            subject.next({ result: true, configId: this.config.id });
                        }), (/**
                         * @param {?} err
                         * @return {?}
                         */
                        err => {
                            this.message.error(this.localePipe.transform('component.executeForms.saveFail'));
                            subject.next({ result: false, configId: this.config.id });
                        }));
                    }
                }
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    subject.next({ result: false });
                }), 10);
            }
        }));
        return subject.asObservable();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    searchField(data) {
        data.field = 'fieldName';
        /** @type {?} */
        let searchData = {
            field: 'fieldName',
            value: data.value
        };
        this.fieldTree.searchData = searchData;
        // this.fieldTree.searchData.field = 'fieldName';
        /** @type {?} */
        let serchFields = {
            label: this.localePipe.transform('component.executeForms.fieldName'),
            value: 'fieldName'
        };
        if (this.fieldTree.searchFields) {
            if (!this.fieldTree.searchFields.some((/**
             * @param {?} x
             * @return {?}
             */
            x => x.value === serchFields.value))) {
                this.fieldTree.searchFields = this.fieldTree.searchFields.concat(serchFields);
            }
        }
        else {
            this.fieldTree.searchFields = [];
            this.fieldTree.searchFields = this.fieldTree.searchFields.concat(serchFields);
        }
        this.fieldTree.searchHandle.search(data.field, data.value, 'client');
    }
    /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    btnConfigChange(bool, field, id) {
        if (bool) {
            for (const b of this.buttonConfigs) {
                if (b.id === id) {
                    switch (field) {
                        case 'enable':
                            b.enable = bool;
                            b.disabled = false;
                            b.hidden = false;
                            break;
                        case 'disabled':
                            b.disabled = bool;
                            b.enable = false;
                            b.hidden = false;
                            break;
                        case 'hidden':
                            b.hidden = bool;
                            b.disabled = false;
                            b.enable = false;
                            break;
                    }
                    this.btnGrid.updateRow(id, b);
                }
            }
        }
        this.btnGrid.cd.detectChanges();
    }
    /**
     * @param {?} operation
     * @return {?}
     */
    btnBatchOperate(operation) {
        /** @type {?} */
        const checkeds = this.btnGrid.checkedRows;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                this.btnConfigChange(true, operation, c.id);
            }
            this.btnGrid.cd.detectChanges();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkedRows'));
        }
    }
    /**
     * @return {?}
     */
    btnBatchReset() {
        /** @type {?} */
        const checkeds = this.btnGrid.checkedRows;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                /** @type {?} */
                const button = this.formFormat.formButtons.find((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => b.id === c.id));
                for (const b of this.buttonConfigs) {
                    if (b.id === c.id) {
                        b.enable = button.buttonState === 'Enable' ? true : false;
                        b.disabled = button.buttonState === 'Disabled' ? true : false;
                        b.hidden = button.buttonState === 'Hidden' ? true : false;
                    }
                    this.btnGrid.updateRow(b.id, b);
                }
            }
            this.btnGrid.cd.detectChanges();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkedRows'));
        }
    }
    /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @param {?=} search
     * @return {?}
     */
    fieldConfigChange(bool, field, id, search = true) {
        if (bool) {
            this.fieldSwitchChange(this.fieldConfigs, field, id);
        }
        if (search) {
            this.fieldTree.searchHandle['research']();
        }
    }
    /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    fieldSwitchChange(fieldConfigs, field, id) {
        if (fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.data.id === id) {
                    switch (field) {
                        case 'editable':
                            f.data.editable = true;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'readonly':
                            f.data.editable = false;
                            f.data.readonly = true;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'hidden':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = true;
                            f.data.required = false;
                            break;
                        case 'required':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = true;
                            break;
                    }
                    return;
                }
                else {
                    if (f.children && f.children.length > 0) {
                        this.fieldSwitchChange(f.children, field, id);
                    }
                }
            }
        }
    }
    /**
     * @param {?} operation
     * @return {?}
     */
    fieldBatchOperate(operation) {
        /** @type {?} */
        const checkeds = this.fieldTree.checkeds;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                this.fieldConfigChange(true, operation, c.data.id, false);
            }
            this.fieldTree.searchHandle['research']();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkeds'));
        }
    }
    /**
     * @return {?}
     */
    fieldBatchReset() {
        /** @type {?} */
        const checkeds = this.fieldTree.checkeds;
        if (checkeds && checkeds.length > 0) {
            for (const c of checkeds) {
                /** @type {?} */
                const field = this.formatFieldList.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.id === c.data.id));
                this.resetFieldConfig(this.fieldConfigs, c.data.id, field);
            }
            this.fieldTree.searchHandle['research']();
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.checkeds'));
        }
    }
    /**
     * @param {?} fieldConfigs
     * @param {?} id
     * @param {?} field
     * @return {?}
     */
    resetFieldConfig(fieldConfigs, id, field) {
        if (fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.leaf === true && f.data.id === id) {
                    f.data.editable = field.fieldState === 'Editable' ? true : false;
                    f.data.readonly = field.fieldState === 'Readonly' ? true : false;
                    f.data.hidden = field.fieldState === 'Hidden' ? true : false;
                    f.data.required = field.fieldState === 'Required' ? true : false;
                    return;
                }
                else {
                    if (f.children && f.children.length > 0) {
                        this.resetFieldConfig(f.children, id, field);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (this.extendComponentRef) {
            /** @type {?} */
            const result$ = this.extendComponentRef.instance.validator();
            if (result$ instanceof Observable) {
                return result$.pipe(switchMap((/**
                 * @param {?} b
                 * @return {?}
                 */
                (b) => {
                    if (b && this.innerValidator()) {
                        return of(true);
                    }
                    else {
                        return of(false);
                    }
                })));
            }
            else {
                if (result$) {
                    return of(this.innerValidator());
                }
                else {
                    return of(false);
                }
            }
        }
        else {
            return of(this.innerValidator());
        }
    }
    /**
     * @private
     * @return {?}
     */
    innerValidator() {
        return this.operationConfig.validator();
    }
    /**
     * @private
     * @return {?}
     */
    setBtnAndFieldConfigs() {
        this.config.formButtonConfigs = new Array();
        for (const btn of this.buttonConfigs) {
            /** @type {?} */
            const button = this.formFormat.formButtons.find((/**
             * @param {?} b
             * @return {?}
             */
            b => b.buttonId === btn.buttonId));
            /** @type {?} */
            const btnConfig = new FormButtonConfig();
            btnConfig.buttonId = btn.buttonId;
            if (btn.enable) {
                btnConfig.buttonState = 'Enable';
            }
            else if (btn.disabled) {
                btnConfig.buttonState = 'Disabled';
            }
            else if (btn.hidden) {
                btnConfig.buttonState = 'Hidden';
            }
            else {
                continue;
            }
            if (!button.buttonState && btnConfig.buttonState) {
                this.config.formButtonConfigs.push(btnConfig);
            }
            if (button.buttonState && button.buttonState !== btnConfig.buttonState) {
                this.config.formButtonConfigs.push(btnConfig);
            }
        }
        this.config.formFieldConfigs = new Array();
        this.getFieldConfigs(this.fieldConfigs);
        this.config.formMethodConfigs = this.operationConfig.operations || new Array();
    }
    /**
     * @private
     * @param {?} fieldConfigs
     * @return {?}
     */
    getFieldConfigs(fieldConfigs) {
        if (fieldConfigs && fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.children && f.children.length > 0) {
                    this.getFieldConfigs(f.children);
                }
                if (f.leaf === false) {
                    continue;
                }
                /** @type {?} */
                const field = this.formatFieldList.find((/**
                 * @param {?} fd
                 * @return {?}
                 */
                fd => fd.fieldId === f.data.fieldId));
                /** @type {?} */
                const fieldConfig = new FormFieldConfig();
                fieldConfig.fieldId = f.data.fieldId;
                if (f.data.editable) {
                    fieldConfig.fieldState = 'Editable';
                }
                else if (f.data.readonly) {
                    fieldConfig.fieldState = 'Readonly';
                }
                else if (f.data.hidden) {
                    fieldConfig.fieldState = 'Hidden';
                }
                else if (f.data.required) {
                    fieldConfig.fieldState = 'Required';
                }
                else {
                    continue;
                }
                if (!field.fieldState && fieldConfig.fieldState) {
                    this.config.formFieldConfigs.push(fieldConfig);
                }
                if (field.fieldState && field.fieldState !== fieldConfig.fieldState) {
                    this.config.formFieldConfigs.push(fieldConfig);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getConfig() {
        if (this.formFormatId) {
            forkJoin(this.getFormFormatType(), this.getFormFormat(), this.getFormFormatConfig()).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const formFormatType = (/** @type {?} */ (re[0]));
                if (formFormatType) {
                    this.formFormatType = formFormatType;
                    if (this.formFormatType.extendImpl) {
                        this.showExtendTab = true;
                        this.createExtendComponent(this.formFormatType.extendImpl);
                    }
                    else {
                        this.showExtendTab = false;
                    }
                }
                /** @type {?} */
                const formFormat = (/** @type {?} */ (re[1]));
                if (formFormat) {
                    this.formFormat = this.convertFormFormat(formFormat);
                }
                /** @type {?} */
                const config = (/** @type {?} */ (re[2]));
                if (config) {
                    this.config = config;
                }
                if (this.formFormat.formButtons) {
                    this.buttonConfigs = this.formFormat.formButtons.map((/**
                     * @param {?} b
                     * @return {?}
                     */
                    b => Object.assign({}, b, {
                        enable: b.buttonState === 'Enable' ? true : false,
                        disabled: b.buttonState === 'Disabled' ? true : false,
                        hidden: b.buttonState === 'Hidden' ? true : false
                    })));
                    /** @type {?} */
                    let btnConfigs = new Array();
                    if (config && config.formButtonConfigs) {
                        btnConfigs = config.formButtonConfigs;
                    }
                    for (const b of btnConfigs) {
                        for (const btn of this.buttonConfigs) {
                            if (btn.buttonId === b.buttonId) {
                                switch (b.buttonState) {
                                    case 'Enable':
                                        btn.enable = true;
                                        btn.disabled = false;
                                        btn.hidden = false;
                                        break;
                                    case 'Disabled':
                                        btn.enable = false;
                                        btn.disabled = true;
                                        btn.hidden = false;
                                        break;
                                    case 'Hidden':
                                        btn.enable = false;
                                        btn.disabled = false;
                                        btn.hidden = true;
                                        break;
                                }
                                break;
                            }
                        }
                    }
                }
                if (this.formFormat.formFields) {
                    this.fieldConfigs = [...this.formFormat.formFields];
                    this.orgFieldConfigs(this.fieldConfigs);
                    /** @type {?} */
                    let configs = new Array();
                    if (config && config.formFieldConfigs) {
                        configs = config.formFieldConfigs;
                    }
                    for (const f of configs) {
                        this.setFieldConfig(this.fieldConfigs, f);
                    }
                }
            }));
        }
    }
    /**
     * @param {?} extendImpl
     * @return {?}
     */
    createExtendComponent(extendImpl) {
        /** @type {?} */
        const url = extendImpl.split('#')[0];
        /** @type {?} */
        const selectorCmp = extendImpl.split('#')[1];
        System.import(url)
            .then((/**
         * @param {?} moduleFactorys
         * @return {?}
         */
        (moduleFactorys) => {
            /** @type {?} */
            const moduleFactory = Object.values(moduleFactorys)[0];
            /** @type {?} */
            const moduleRef = moduleFactory.create(this.injector);
            if (selectorCmp) {
                /** @type {?} */
                let facMap = moduleRef.componentFactoryResolver['_factories'];
                facMap.forEach((/**
                 * @param {?} value
                 * @param {?} key
                 * @param {?} map
                 * @return {?}
                 */
                (value, key, map) => {
                    /** @type {?} */
                    const selector = value.selector;
                    if (selectorCmp == selector) {
                        /** @type {?} */
                        const cmpFactory = moduleRef.componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (key)));
                        this.extendComponentRef = cmpFactory.create(moduleRef.injector);
                        this.extendComponentRef.instance.formFormatId = this.formFormatId;
                        this.extendComponentRef.instance.formatConfigId = this.formatConfigId;
                        this.container.clear();
                        this.container.insert(this.extendComponentRef.hostView);
                    }
                }));
            }
            else {
                /** @type {?} */
                const bootstrapComponent = moduleRef['_bootstrapComponents'][0];
                if (bootstrapComponent) //先找bootstrapComponent数组有无组件
                 {
                    /** @type {?} */
                    const cmpFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(bootstrapComponent);
                    this.extendComponentRef = cmpFactory.create(moduleRef.injector);
                    this.extendComponentRef.instance.formFormatId = this.formFormatId;
                    this.extendComponentRef.instance.formatConfigId = this.formatConfigId;
                    this.container.clear();
                    this.container.insert(this.extendComponentRef.hostView);
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    orgFieldConfigs(formFields) {
        if (formFields.length > 0) {
            for (const d of formFields) {
                d.data = Object.assign({}, d.data, {
                    editable: d.data.fieldState === 'Editable' ? true : false,
                    readonly: d.data.fieldState === 'Readonly' ? true : false,
                    hidden: d.data.fieldState === 'Hidden' ? true : false,
                    required: d.data.fieldState === 'Required' ? true : false
                });
                if (d.children && d.children) {
                    this.orgFieldConfigs(d.children);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} config
     * @return {?}
     */
    setFieldConfig(fieldConfigs, config) {
        if (fieldConfigs.length > 0) {
            for (const f of fieldConfigs) {
                if (f.data.fieldId === config.fieldId) {
                    switch (config.fieldState) {
                        case 'Editable':
                            f.data.editable = true;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'Readonly':
                            f.data.editable = false;
                            f.data.readonly = true;
                            f.data.hidden = false;
                            f.data.required = false;
                            break;
                        case 'Hidden':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = true;
                            f.data.required = false;
                            break;
                        case 'Required':
                            f.data.editable = false;
                            f.data.readonly = false;
                            f.data.hidden = false;
                            f.data.required = true;
                            break;
                    }
                    return;
                }
                else {
                    if (f.children && f.children.length > 0) {
                        this.setFieldConfig(f.children, config);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    saveConfig(config) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/formFormatConfig';
        return this.http.post(url, config);
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormat() {
        if (this.formFormatId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/${this.formFormatId}`;
            url = encodeURI(url);
            return this.http.get(url);
        }
        else {
            return of(null);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormatType() {
        if (this.formFormatId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/formFormatType/formFormat?formFormat=${this.formFormatId}`;
            return this.http.get(url);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormatConfig() {
        if (this.formatConfigId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormatConfig/${this.formatConfigId}`;
            url = encodeURI(url);
            return this.http.get(url);
        }
        else {
            return of(null);
        }
    }
    /**
     * @private
     * @param {?} formFormat
     * @return {?}
     */
    convertFormFormat(formFormat) {
        if (!formFormat.status) {
            formFormat.status = 0;
        }
        this.convertformFields(formFormat.formFields);
        this.getFormatFieldList(formFormat.formFields, this.formatFieldList);
        return formFormat;
    }
    /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    convertformFields(formFields) {
        if (formFields && formFields.length > 0) {
            for (const d of formFields) {
                if (typeof (d.leaf) !== 'boolean' && (d.leaf == null || d.leaf === undefined)) {
                    d.leaf = true;
                }
                if (d.children && d.children) {
                    this.orgFieldConfigs(d.children);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} formFields
     * @param {?} array
     * @return {?}
     */
    getFormatFieldList(formFields, array) {
        if (formFields && formFields.length > 0) {
            for (const d of formFields) {
                array.push(d.data);
                if (d.children && d.children) {
                    this.getFormatFieldList(d.children, array);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} formFields
     * @param {?} fieldId
     * @return {?}
     */
    getFormatField(formFields, fieldId) {
        for (const f of formFields) {
            if (f.data.fieldId === fieldId) {
                return f;
            }
            if (f.children && f.children.length > 0) {
                return this.getFormatField(f.children, fieldId);
            }
        }
    }
}
FormFormatConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-form-format-config',
                template: "\r\n<!--\u9700\u8981\u5D4C\u5957\u7684\u5C42-----------\u6807\u7B7E\u9875---------------->\r\n<farris-tabs class=\"h-100 f-component-tabs f-tabs-has-grid\" [value]=\"'buttonConfig'\" [contentFill]=\"true\">\r\n  <farris-tab title=\"{{'component.executeForms.formBtn'|wfLocale}}\" [id]=\"'buttonConfig'\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('enable')\">\r\n        {{'component.executeForms.enableBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('disabled')\">\r\n        {{'component.executeForms.disabledBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('hidden')\">\r\n        {{'component.executeForms.hiddenBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchReset()\">\r\n        {{'component.executeForms.btnBatchReset'|wfLocale}}\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <div class=\"f-utils-fill-flex-column\" style=\"background: #FFF;\">\r\n        <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"buttonCols\" [data]=\"buttonConfigs\" #btnGrid\r\n          [idField]=\"'id'\" [showLineNumber]=\"false\" [fitColumns]=\"true\" [striped]=\"true\"\r\n          [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\" [showAllCheckbox]=\"true\"\r\n          [showCheckbox]=\"true\" [multiSelect]=\"true\" [enableFilterRow]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab title=\"{{'component.executeForms.formfield'|wfLocale}}\" [id]=\"'fieldConfig'\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('editable')\">\r\n        {{'component.executeForms.editableBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('readonly')\">\r\n        {{'component.executeForms.readonlyBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('hidden')\">\r\n        {{'component.executeForms.hiddenBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('required')\">\r\n        {{'component.executeForms.requiredBtn'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchReset()\">\r\n        {{'component.executeForms.btnBatchReset'|wfLocale}}\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <div class=\"f-utils-fill-flex-column\" style=\"background: #FFF;\">\r\n        <farris-treetable #fieldTree [columns]=\"fieldCols\" [showFilterBar]=\"true\" [searchFields] = \"searchFields\"\r\n          [showBorder]=\"false\" [showHeader]=\"true\" [data]=\"fieldConfigs\" [fit]=\"true\" [fitColumns]=\"true\"\r\n          [idField]=\"'id'\" [virtualized]=\"false\" [singleSelect]=\"false\" [showCheckbox]=\"true\"\r\n          [showCheckAll]=\"true\" [striped]=\"true\" [fixedHeader]=\"true\" (search)=\"searchField($event)\">\r\n        </farris-treetable>\r\n      </div>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab title=\"{{'component.executeForms.formEvents'|wfLocale}}\" [id]=\"'operationConfig'\" [show]=\"showMethodTab\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"operationConfig.add()\">\r\n        {{'component.executeForms.add'|wfLocale}}\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"operationConfig.delete()\">\r\n        {{'component.executeForms.delete'|wfLocale}}\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <lib-form-operation-config\r\n        [formFormatId]=\"formFormatId\"\r\n        [formFormatConfigId]=\"config.id\"\r\n        [operations]=\"config.formMethodConfigs\"\r\n        class=\"h-100\"></lib-form-operation-config>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab title=\"{{'component.executeForms.other'|wfLocale}}\" [id]=\"'extendConfig'\" [show]=\"showExtendTab\">\r\n    <ng-template #content>\r\n      <ng-container #container></ng-container>\r\n    </ng-template>\r\n  </farris-tab>\r\n</farris-tabs>\r\n<!--Tab\u533A\u57DF-->\r\n\r\n  <!-- </section>\r\n</div> -->\r\n\r\n<ng-template #btnEnable let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.enable\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #btnDisabled let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.disabled\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #btnHidden let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.hidden\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #fieldEditable let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.editable\"\r\n  (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldReadonly let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.readonly\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldHidden let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.hidden\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldRequired let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.required\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
FormFormatConfigComponent.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService },
    { type: NotifyService },
    { type: Injector },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
FormFormatConfigComponent.propDecorators = {
    btnEnable: [{ type: ViewChild, args: ['btnEnable',] }],
    btnDisabled: [{ type: ViewChild, args: ['btnDisabled',] }],
    btnHidden: [{ type: ViewChild, args: ['btnHidden',] }],
    fieldEditable: [{ type: ViewChild, args: ['fieldEditable',] }],
    fieldReadonly: [{ type: ViewChild, args: ['fieldReadonly',] }],
    fieldHidden: [{ type: ViewChild, args: ['fieldHidden',] }],
    fieldRequired: [{ type: ViewChild, args: ['fieldRequired',] }],
    btnGrid: [{ type: ViewChild, args: ['btnGrid',] }],
    fieldTree: [{ type: ViewChild, args: ['fieldTree',] }],
    operationConfig: [{ type: ViewChild, args: [FormOperationConfigComponent,] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    showMethodTab: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FormFormatConfigComponent.prototype.btnEnable;
    /** @type {?} */
    FormFormatConfigComponent.prototype.btnDisabled;
    /** @type {?} */
    FormFormatConfigComponent.prototype.btnHidden;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldEditable;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldReadonly;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldHidden;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldRequired;
    /** @type {?} */
    FormFormatConfigComponent.prototype.btnGrid;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldTree;
    /** @type {?} */
    FormFormatConfigComponent.prototype.operationConfig;
    /** @type {?} */
    FormFormatConfigComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.extendComponentRef;
    /** @type {?} */
    FormFormatConfigComponent.prototype.config;
    /** @type {?} */
    FormFormatConfigComponent.prototype.formFormat;
    /** @type {?} */
    FormFormatConfigComponent.prototype.formFormatType;
    /** @type {?} */
    FormFormatConfigComponent.prototype.state;
    /** @type {?} */
    FormFormatConfigComponent.prototype.showMethodTab;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype._formFormatId;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype._formatConfigId;
    /** @type {?} */
    FormFormatConfigComponent.prototype.buttonCols;
    /** @type {?} */
    FormFormatConfigComponent.prototype.buttonConfigs;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldCols;
    /** @type {?} */
    FormFormatConfigComponent.prototype.fieldConfigs;
    /** @type {?} */
    FormFormatConfigComponent.prototype.formatFieldList;
    /** @type {?} */
    FormFormatConfigComponent.prototype.showExtendTab;
    /** @type {?} */
    FormFormatConfigComponent.prototype.searchFields;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    FormFormatConfigComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,