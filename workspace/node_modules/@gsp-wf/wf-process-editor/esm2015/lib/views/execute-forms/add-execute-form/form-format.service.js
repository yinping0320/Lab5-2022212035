/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
export class FormFormatService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        const customData = params.customData;
        /** @type {?} */
        const index = params.pageIndex || 1;
        /** @type {?} */
        const size = params.pageSize || 20;
        /** @type {?} */
        const searchValue = JSON.parse(params.searchValue);
        /** @type {?} */
        const terminal = customData.tab === 'web' ? 'PC' : 'Mobile';
        /** @type {?} */
        let query = '?param=';
        /** @type {?} */
        let filter = `{"terminal":"${terminal}"`;
        if (searchValue.searchValue) {
            if (searchValue.searchField === '*') {
                filter += `,"allColumns":"${searchValue.searchValue}"`;
            }
            else {
                filter += `,"${searchValue.searchField}":"${searchValue.searchValue}"`;
            }
        }
        filter += '}';
        filter = encodeURIComponent(filter);
        query += (filter + `&pageNum=${index}&pageSize=${size}`);
        url += query;
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        (re) => ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }))));
    }
}
FormFormatService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormFormatService.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormFormatService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1mb3JtYXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvZXhlY3V0ZS1mb3Jtcy9hZGQtZXhlY3V0ZS1mb3JtL2Zvcm0tZm9ybWF0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdyQyxNQUFNLE9BQU8saUJBQWlCOzs7O0lBQzFCLFlBQ1ksSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUU3QixDQUFDOzs7Ozs7SUFDRCxPQUFPLENBQUMsR0FBVyxFQUFFLE1BQXFCOztjQUNoQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVU7O2NBQzlCLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLENBQUM7O2NBQzdCLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLEVBQUU7O2NBQzVCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7O2NBQzVDLFFBQVEsR0FBRyxVQUFVLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFROztZQUN2RCxLQUFLLEdBQUcsU0FBUzs7WUFDakIsTUFBTSxHQUFHLGdCQUFnQixRQUFRLEdBQUc7UUFDeEMsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ3pCLElBQUksV0FBVyxDQUFDLFdBQVcsS0FBSyxHQUFHLEVBQUU7Z0JBQ2pDLE1BQU0sSUFBSSxrQkFBa0IsV0FBVyxDQUFDLFdBQVcsR0FBRyxDQUFDO2FBQzFEO2lCQUFNO2dCQUNILE1BQU0sSUFBSSxLQUFLLFdBQVcsQ0FBQyxXQUFXLE1BQU0sV0FBVyxDQUFDLFdBQVcsR0FBRyxDQUFDO2FBQzFFO1NBQ0o7UUFDRCxNQUFNLElBQUksR0FBRyxDQUFDO1FBQ2QsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZLEtBQUssYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELEdBQUcsSUFBSSxLQUFLLENBQUM7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsR0FBRzs7OztRQUFDLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2QsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPO1lBQ2pCLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYTtZQUN2QixRQUFRLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUM7Z0JBQ3JDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVE7Z0JBQzlCLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUM7Z0JBQy9CLFdBQVcsRUFBRSxJQUFJO2FBQ3BCO1NBQ0osQ0FBQyxFQUFDLENBQ04sQ0FBQztJQUNOLENBQUM7OztZQXJDSixVQUFVOzs7O1lBSkYsV0FBVzs7Ozs7OztJQU9aLGlDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElMb29rdXBIdHRwU2VydmljZSwgUmVtb3RlUGFyYW1zLCBMb29rdXBHcmlkUmVzdWx0IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcm1Gb3JtYXRTZXJ2aWNlIGltcGxlbWVudHMgSUxvb2t1cEh0dHBTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICApIHtcclxuICAgIH1cclxuICAgIGdldERhdGEodXJsOiBzdHJpbmcsIHBhcmFtcz86IFJlbW90ZVBhcmFtcyk6IE9ic2VydmFibGU8TG9va3VwR3JpZFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbURhdGEgPSBwYXJhbXMuY3VzdG9tRGF0YTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHBhcmFtcy5wYWdlSW5kZXggfHwgMTtcclxuICAgICAgICBjb25zdCBzaXplID0gcGFyYW1zLnBhZ2VTaXplIHx8IDIwO1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gSlNPTi5wYXJzZShwYXJhbXMuc2VhcmNoVmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IHRlcm1pbmFsID0gY3VzdG9tRGF0YS50YWIgPT09ICd3ZWInID8gJ1BDJyA6ICdNb2JpbGUnO1xyXG4gICAgICAgIGxldCBxdWVyeSA9ICc/cGFyYW09JztcclxuICAgICAgICBsZXQgZmlsdGVyID0gYHtcInRlcm1pbmFsXCI6XCIke3Rlcm1pbmFsfVwiYDtcclxuICAgICAgICBpZiAoc2VhcmNoVmFsdWUuc2VhcmNoVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHNlYXJjaFZhbHVlLnNlYXJjaEZpZWxkID09PSAnKicpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlciArPSBgLFwiYWxsQ29sdW1uc1wiOlwiJHtzZWFyY2hWYWx1ZS5zZWFyY2hWYWx1ZX1cImA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXIgKz0gYCxcIiR7c2VhcmNoVmFsdWUuc2VhcmNoRmllbGR9XCI6XCIke3NlYXJjaFZhbHVlLnNlYXJjaFZhbHVlfVwiYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaWx0ZXIgKz0gJ30nO1xyXG4gICAgICAgIGZpbHRlciA9IGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXIpO1xyXG4gICAgICAgIHF1ZXJ5ICs9IChmaWx0ZXIgKyBgJnBhZ2VOdW09JHtpbmRleH0mcGFnZVNpemU9JHtzaXplfWApO1xyXG4gICAgICAgIHVybCArPSBxdWVyeTtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgocmU6IGFueSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiByZS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgdG90YWw6IHJlLnRvdGFsRWxlbWVudHMsXHJcbiAgICAgICAgICAgICAgICBwYWdlSW5mbzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VJbmRleDogcmUucGFnZWFibGUucGFnZU51bWJlciArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU6IHJlLnBhZ2VhYmxlLnBhZ2VTaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VMaXN0OiBbMjAsIDQwLCA2MCwgODAsIDEwMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlUGFnZXI6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuIl19