/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { workFlowActions, executionTime, FormMethodConfig } from '../entities/form-method-config';
import { HttpService } from '@ecp-caf/caf-common';
import { DialogComponent } from '@farris/ui-dialog';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ParameterSettingComponent } from '../parameter-setting/parameter-setting.component';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
export class FormOperationConfigComponent {
    /**
     * @param {?} http
     * @param {?} message
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(http, message, resolver, injector, modalService, cdr, localeId, resources, localePipe) {
        this.http = http;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.operations = new Array();
        this.cols = new Array();
        this.methodCols = [
            { field: 'method', width: 100, title: this.localePipe.transform("component.executeForms.method"), showTips: true },
            { field: 'methodName', width: 80, title: this.localePipe.transform("component.executeForms.methodName"), showTips: true },
            { field: 'description', width: 120, title: this.localePipe.transform("component.executeForms.description"), showTips: true }
        ];
        this.formMethods = new Array();
        this.state = 'add';
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set formFormatId(v) {
        this._fromFormatId = v;
        if (this._fromFormatId) {
            this.getFormMethods();
        }
    }
    /**
     * @return {?}
     */
    get formFormatId() {
        return this._fromFormatId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cols = [
            {
                field: 'workFlowAction', width: 80, title: this.localePipe.transform("component.executeForms.workFlowAction"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: workFlowActions, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'method', width: 100, title: this.localePipe.transform("component.executeForms.formOperations"),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.e = e;
                            this.methodsDialog.show();
                            this.state = 'edit';
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                },
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    if (v) {
                        /** @type {?} */
                        const m = this.formMethods.find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.method === v));
                        if (m) {
                            return m.methodName;
                        }
                        else {
                            return '';
                        }
                    }
                    else {
                        return '';
                    }
                }),
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'executionTime', width: 80, title: this.localePipe.transform("component.executeForms.executionTime"),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: executionTime }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: executionTime, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'sortOrder', width: 60, title: this.localePipe.transform("component.executeForms.sortOrder"),
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
                formatter: { type: 'number', options: { precision: 0 } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'methodParameters', width: 80, title: this.localePipe.transform("component.executeForms.methodParameters"),
                template: this.cell,
                halign: 'center', align: 'center'
            }
        ];
    }
    /**
     * @return {?}
     */
    add() {
        this.methodsDialog.show();
        this.state = 'add';
    }
    /**
     * @return {?}
     */
    delete() {
        if (this.grid.selectedRow) {
            this.operations = this.operations.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o.id !== this.grid.selectedRow.id));
        }
        else {
            this.message.info(this.localePipe.transform("component.executeForms.selectFormActionConfig"));
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    editParam(ctx) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'usual';
        compRef.instance.showFormType = false;
        if (ctx.rowData.methodParameters) {
            compRef.instance.parameters = [...ctx.rowData.methodParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => Object.assign({}, p)))];
        }
        else {
            compRef.instance.parameters = new Array();
        }
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform("component.executeForms.parameterSettings"),
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            for (const o of this.operations) {
                if (o.id === ctx.rowData.id) {
                    o.methodParameters = re.parameters;
                }
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
    }
    /**
     * @return {?}
     */
    methodSelected() {
        if (this.methodGrid.selectedRow) {
            /** @type {?} */
            const data = this.methodGrid.selectedRow.data;
            if (this.state === 'edit') {
                if (this.e) {
                    this.e.formControl.setValue(data.method);
                    this.e.instance.cd.detectChanges();
                    for (const o of this.operations) {
                        if (o.id === data.id) {
                            o.method = data.method;
                            o.sortOrder = data.sortOrder;
                            o.methodParameters = data.methodParameters;
                        }
                    }
                }
            }
            else {
                /** @type {?} */
                const operation = new FormMethodConfig();
                operation.formFormatConfigId = this.formFormatConfigId;
                operation.method = data.method;
                operation.sortOrder = data.sortOrder;
                operation.methodParameters = data.methodParameters;
                this.operations = this.operations.concat([operation]);
            }
            this.methodsDialog.close();
        }
        else {
            this.message.info(this.localePipe.transform("component.executeForms.selectFormAction"));
        }
    }
    /**
     * @return {?}
     */
    validator() {
        this.grid.endCellEdit();
        for (const o of this.operations) {
            if (!o.method) {
                this.message.info(this.localePipe.transform("component.executeForms.selectFormAction"));
                return false;
            }
        }
        return true;
    }
    /**
     * @private
     * @return {?}
     */
    getFormMethods() {
        if (this.formFormatId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/formOperation?formFormatId=${this.formFormatId}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re) {
                    this.formMethods = re;
                }
            }));
        }
    }
}
FormOperationConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-form-operation-config',
                template: "<div class=\"f-utils-fill-flex-column h-100\" style=\"background: #FFF;\">\r\n  <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"cols\" [data]=\"operations\" #grid\r\n    [idField]=\"'id'\" [showLineNumber]=\"true\" [fitColumns]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\"\r\n    [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\"\r\n    [editable]=\"true\" [editMode]=\"'cell'\" >\r\n  </farris-datagrid>\r\n  <ng-template #cell let-ctx>\r\n    <a href=\"javascript: void(0);\" title=\"{{'component.executeForms.parameterSettings'|wfLocale}}\" (click)=\"editParam(ctx)\">{{'component.executeForms.editParam'|wfLocale}}</a>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"methodsDialog.close()\">{{'component.executeForms.clickCancel'|wfLocale}}</button>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"methodSelected()\">{{'component.executeForms.clickOK'|wfLocale}}</button>\r\n</ng-template>\r\n<farris-dialog #methodsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"500\" title=\"{{'component.executeForms.formEvents'|wfLocale}}\">\r\n  <div class=\"f-page f-page-is-managelist\">\r\n    <div class=\"f-page-main\">\r\n      <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n        <farris-section class=\"f-section-grid f-section-in-managelist p-0\" [showHeader]=\"false\">\r\n          <farris-datagrid class=\"f-component-grid\" [columns]=\"methodCols\" [data]=\"formMethods\" #methodGrid [idField]=\"'id'\"\r\n            [showLineNumber]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\"\r\n            [fit]=\"true\" [fitColumns]=\"true\">\r\n          </farris-datagrid>\r\n        </farris-section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
FormOperationConfigComponent.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
FormOperationConfigComponent.propDecorators = {
    formFormatId: [{ type: Input }],
    formFormatConfigId: [{ type: Input }],
    operations: [{ type: Input }],
    methodsDialog: [{ type: ViewChild, args: ['methodsDialog',] }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    methodGrid: [{ type: ViewChild, args: ['methodGrid',] }],
    cell: [{ type: ViewChild, args: ['cell',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype._fromFormatId;
    /** @type {?} */
    FormOperationConfigComponent.prototype.formFormatConfigId;
    /** @type {?} */
    FormOperationConfigComponent.prototype.operations;
    /** @type {?} */
    FormOperationConfigComponent.prototype.methodsDialog;
    /** @type {?} */
    FormOperationConfigComponent.prototype.grid;
    /** @type {?} */
    FormOperationConfigComponent.prototype.methodGrid;
    /** @type {?} */
    FormOperationConfigComponent.prototype.cell;
    /** @type {?} */
    FormOperationConfigComponent.prototype.cols;
    /** @type {?} */
    FormOperationConfigComponent.prototype.methodCols;
    /** @type {?} */
    FormOperationConfigComponent.prototype.e;
    /** @type {?} */
    FormOperationConfigComponent.prototype.formMethods;
    /** @type {?} */
    FormOperationConfigComponent.prototype.state;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,