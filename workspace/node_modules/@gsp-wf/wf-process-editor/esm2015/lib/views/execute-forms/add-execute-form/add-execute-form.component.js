/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Optional, ChangeDetectorRef, Inject, LOCALE_ID } from '@angular/core';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { Subject, from, forkJoin } from 'rxjs';
import { ServerSideToken } from '@farris/ui-lookup';
import { FormFormatService } from './form-format.service';
import { ExecuteFormModel, TerminalType, ActualParameter } from '../entities/execute-form.entity';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { ExecuteForm } from '../entities/execute-form';
import { ProcessDeUtil } from '../../../domain/process-de-util';
import { map } from 'rxjs/operators';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../i18n/pipe/wf-process-editor-locale.pipe';
export class AddExecuteFormComponent {
    /**
     * @param {?} state
     * @param {?} http
     * @param {?} session
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(state, http, session, message, cdr, localeId, resources, localePipe) {
        this.state = state;
        this.http = http;
        this.session = session;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new Subject();
        this.cancel = new Subject();
        this.forms = new Array();
        // private formTypeCollection = [
        //   { text: '流程嵌表单', value: '0' },
        //   { text: '表单嵌流程', value: '1' },
        // ];
        this.columns = [
            { field: 'code', width: 100, title: this.localePipe.transform('component.executeForms.code') },
            {
                field: 'name', width: 100, title: this.localePipe.transform('component.executeForms.name'),
            },
            {
                field: 'tag', width: 80, title: this.localePipe.transform('component.executeForms.apptag'),
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (v, d, i) => {
                    if (d.appId) {
                        return this.localePipe.transform('component.executeForms.functionMenu');
                    }
                    else if (d.formFormatId) {
                        return this.localePipe.transform('component.executeForms.formFormat');
                    }
                })
            }
            // {
            //   field: 'formType', width: 80, title: '联查类型',
            //   formatter: {
            //     type: 'enum',
            //     options: { valueField: 'value', textField: 'text', data: this.formTypeCollection }
            //   },
            // },
        ];
        // 表单格式显示列
        this.cols = [
            {
                field: 'code', width: 100, title: this.localePipe.transform('component.executeForms.docFormatNumber'), searchField: 'code'
            }, {
                field: 'name', width: 100, title: this.localePipe.transform('component.executeForms.docFormatName'), searchField: 'name'
            }
        ];
        this.dataUri = '/api/runtime/wf/v1.0/formFormat/page';
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getAllExecuteForms();
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.grid.selectedRow) {
            /** @type {?} */
            const form = this.grid.selectedRow.data;
            /** @type {?} */
            const model = new ExecuteFormModel();
            model.Id = ProcessDeUtil.GenerateElementId();
            model.Name = form.name;
            model.ComponentId = form.appId;
            model.FormType = form.formType;
            model.formFormatId = form.formFormatId;
            model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
            model.ActualParameters = form.actualParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                /** @type {?} */
                const a = new ActualParameter();
                a.Name = p.code;
                a.Tag = p.valueType ? p.valueType : this.initVariableType(p.value);
                a.Value = p.value;
                return a;
            }));
            this.submit.next(model);
        }
        else {
            this.message.info(this.localePipe.transform('component.executeForms.selectedRow'));
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.next();
    }
    // selectOtherFormFormat() {
    //   this.lookUp.showDialog();
    // }
    // dictPicking = (arg) => {
    //   return of({
    //     showDialog: true, data: {
    //       tab: this.tab
    //     }
    //   });
    // }
    // dictPicked = (data: any): Observable<PickedResult> => {
    //   const model = new ExecuteFormModel();
    //   model.Id = ProcessDeUtil.GenerateElementId();
    //   model.Name = data.name;
    //   model.ComponentId = null;
    //   model.FormType = '0';
    //   model.formFormatId = data.id;
    //   model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
    //   model.ActualParameters = data.urlParameters.map(p => {
    //     const a = new ActualParameter();
    //     a.Name = p.code;
    //     a.Value = p.value;
    //     return a;
    //   });
    //   this.submit.next(model);
    //   return of({ closeDialog: true });
    // }
    // selectOtherFunc() {
    //   this.appHelper.showHelp(this.session.getUserSessionId());
    // }
    // funcSelected(apps: RtfApp[]) {
    //   if (apps && apps.length > 0) {
    //     const model = new ExecuteFormModel();
    //     model.Id = ProcessDeUtil.GenerateElementId();
    //     model.Name = apps[0].Name;
    //     model.ComponentId = apps[0].Id;
    //     model.FormType = '0';
    //     model.formFormatId = null;
    //     model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
    //     model.ActualParameters = [];
    //     if (apps[0].InvokingConfig['entityParams']) {
    //       const paras = JSON.parse(apps[0].InvokingConfig['entityParams']);
    //       model.ActualParameters = paras.map(p => ({
    //         Name: p.name,
    //         Value: ''
    //       }));
    //     }
    //     setTimeout(() => {
    //       this.submit.next(model);
    //     }, 0);
    //   }
    // }
    /**
     * @private
     * @return {?}
     */
    getAllExecuteForms() {
        forkJoin(this.getExecuteForms(), this.getFormFormats()).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re[0]) {
                this.forms = re[0];
            }
            if (re[1] && re[1].length > 0) {
                /** @type {?} */
                const formFormats = re[1];
                for (const format of formFormats) {
                    if (this.forms.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.formFormatId && f.formFormatId === format.id)) === -1) {
                        /** @type {?} */
                        const executeForm = new ExecuteForm();
                        executeForm.id = ProcessDeUtil.createNM();
                        executeForm.flowFormKey = this.state.flowFormInfo.flowForm.id;
                        executeForm.appId = null;
                        executeForm.code = format.code;
                        executeForm.name = format.name;
                        executeForm.actualParameters = [];
                        executeForm.isDefault = false;
                        executeForm.formType = '0';
                        executeForm.terminal = 'web';
                        executeForm.formFormatId = format.id;
                        executeForm.sysInit = 0;
                        executeForm.remarks = '';
                        if (format.urlParameters && format.urlParameters.length > 0) {
                            /** @type {?} */
                            const actPList = format.urlParameters.map((/**
                             * @param {?} p
                             * @return {?}
                             */
                            p => ({
                                code: p.code,
                                name: p.name,
                                valueType: p.valueType ? p.valueType : this.initVariableType(p.value),
                                value: p.value
                            })));
                            executeForm.actualParameters = actPList;
                        }
                        this.forms.push(executeForm);
                    }
                }
            }
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    initVariableType(value) {
        if (value) {
            if (value.length >= 8 && value.slice(0, 8) === `{"expr":`) {
                return 'expression';
            }
            else {
                return 'constant';
            }
        }
        else {
            return 'variable';
        }
    }
    /**
     * @private
     * @return {?}
     */
    getExecuteForms() {
        if (this.state.flowFormInfo.flowForm.id && this.tab) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/excuteForm?flowFormKey=${this.state.flowFormInfo.flowForm.id}`;
            return this.http.get(url).pipe(map((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (this.tab === 'web') {
                    return re.filter((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.terminal.indexOf('web') > -1));
                }
                else if (this.tab === 'mobile') {
                    return re.filter((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.terminal.indexOf('app') > -1));
                }
            })));
        }
        else {
            return from(new Array());
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFormFormats() {
        if (this.state.flowFormInfo.flowForm.businessObjectId && this.tab) {
            /** @type {?} */
            const terminal = this.tab === 'web' ? 'PC' : 'Mobile';
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/query?param=`;
            /** @type {?} */
            let param = `{"bizCategory":"${this.state.flowFormInfo.flowForm.businessObjectId}","terminal":"${terminal}"}`;
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    }
}
AddExecuteFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-add-execute-form',
                template: "<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main my-0\">\r\n    <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist p-2\" [showHeader]=\"false\">\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"forms\" #grid\r\n          [idField]=\"'id'\" [showLineNumber]=\"true\" [striped]=\"true\"\r\n          [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\">\r\n        </farris-datagrid>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">{{'component.executeForms.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">{{'component.executeForms.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n<!--\r\n<app-rtf-app-help #appHelper (afterHelpConfirm)=\"funcSelected($event)\" [isLayeredLoad]=\"true\">\r\n</app-rtf-app-help>\r\n\r\n<farris-lookup-grid #lookup style=\"display: none;\" [editable]=\"false\" [columns]=\"cols\" [singleSelect]=\"true\"\r\n  title=\"'\u5355\u636E\u683C\u5F0F'\" [displayType]=\"'List'\" [uri]=\"dataUri\" [idField]=\"'id'\" [pageIndex]=\"1\" [pageSize]=\"20\"\r\n  [pagination]=\"true\" [valueField]=\"'id'\" [textField]=\"'name'\" [dialogWidth]=\"550\" [dictPicked]=\"dictPicked\"\r\n  [dictPicking]=\"dictPicking\">\r\n</farris-lookup-grid> -->\r\n",
                providers: [{
                        provide: ServerSideToken, useClass: FormFormatService
                    },
                    WfLocalePipe
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AddExecuteFormComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: HttpService },
    { type: SessionService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
AddExecuteFormComponent.propDecorators = {
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    AddExecuteFormComponent.prototype.modalFooter;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.grid;
    /** @type {?} */
    AddExecuteFormComponent.prototype.submit;
    /** @type {?} */
    AddExecuteFormComponent.prototype.cancel;
    /** @type {?} */
    AddExecuteFormComponent.prototype.tab;
    /** @type {?} */
    AddExecuteFormComponent.prototype.forms;
    /** @type {?} */
    AddExecuteFormComponent.prototype.columns;
    /** @type {?} */
    AddExecuteFormComponent.prototype.cols;
    /** @type {?} */
    AddExecuteFormComponent.prototype.dataUri;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.state;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.session;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    AddExecuteFormComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,