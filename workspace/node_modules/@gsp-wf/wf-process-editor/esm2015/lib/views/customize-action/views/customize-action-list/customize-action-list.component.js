/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Output, EventEmitter, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { DatagridComponent } from '@farris/ui-datagrid';
import { CustomizeAciton } from '../../entities/customize-action.entity';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../../../i18n/pipe/wf-process-editor-locale.pipe';
export class CustomizeActionListComponent {
    /**
     * @param {?} designerUIState
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerUIState, cdr, localeId, resources, localePipe) {
        this.designerUIState = designerUIState;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.terminalList = [
            { value: 'app', text: this.localePipe.transform('component.customizeAction.app') },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: this.localePipe.transform('component.customizeAction.all') }
        ];
        this.cols = [
            { field: 'code', width: 100, title: this.localePipe.transform('component.customizeAction.code') },
            { field: 'name', width: 100, title: this.localePipe.transform('component.customizeAction.name') },
            {
                field: 'terminal', width: 100, title: this.localePipe.transform('component.customizeAction.terminalType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
            {
                field: 'isAll', width: 100, title: this.localePipe.transform('component.customizeAction.isAll'),
                formatter: { type: 'boolean', options: { trueText: this.localePipe.transform('component.customizeAction.yes'), falseText: this.localePipe.transform('component.customizeAction.no') } }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
        this.customActionList = this.designerUIState.flowFormInfo.customizeActions || [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const selections = [];
        /** @type {?} */
        const checkeds = this.grid.checkeds;
        if (checkeds && checkeds.length > 0) {
            checkeds.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                const item = new CustomizeAciton(action.data.id, action.data.code, action.data.name);
                item.terminalType = action.data.terminal;
                // item.enable = true;
                item.actualParameters = [];
                if (action.data.actualParameters && action.data.actualParameters.length > 0) {
                    for (const p of action.data.actualParameters) {
                        /** @type {?} */
                        const param = (/** @type {?} */ ({
                            Name: p.code,
                            Value: p.value,
                            ValueText: p.name,
                            Tag: 'expression'
                        }));
                        item.actualParameters.push(param);
                    }
                }
                selections.push(item);
            }));
        }
        this.submit.emit(selections);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.emit(true);
    }
}
CustomizeActionListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-customize-action-list',
                template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n  <farris-datagrid #grid [columns]=\"cols\" [data]=\"customActionList\" [idField]=\"'id'\" [fit]=\"true\"\r\n    [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\r\n    [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n  </farris-datagrid>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.customizeAction.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.customizeAction.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CustomizeActionListComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CustomizeActionListComponent.propDecorators = {
    grid: [{ type: ViewChild, args: ['grid',] }],
    footer: [{ type: ViewChild, args: ['footer',] }],
    submit: [{ type: Output }],
    cancel: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CustomizeActionListComponent.prototype.grid;
    /** @type {?} */
    CustomizeActionListComponent.prototype.footer;
    /** @type {?} */
    CustomizeActionListComponent.prototype.submit;
    /** @type {?} */
    CustomizeActionListComponent.prototype.cancel;
    /** @type {?} */
    CustomizeActionListComponent.prototype.customActionList;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.terminalList;
    /** @type {?} */
    CustomizeActionListComponent.prototype.cols;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,