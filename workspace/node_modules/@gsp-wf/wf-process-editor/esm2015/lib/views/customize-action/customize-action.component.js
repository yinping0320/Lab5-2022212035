/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, Optional, Inject, LOCALE_ID } from '@angular/core';
import { CustomizeAciton } from './entities/customize-action.entity';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { BsModalService } from '@farris/ui-modal';
import { CustomizeActionListComponent } from './views/customize-action-list/customize-action-list.component';
import { MessagerService } from '@farris/ui-messager';
import { ActualParameter } from '../execute-forms/entities/execute-form.entity';
import { WF_LANG_RESOURCES, WfLocalePipe } from '../../i18n/pipe/wf-process-editor-locale.pipe';
export class CustomizeActionComponent {
    /**
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} cdr
     * @param {?} localeId
     * @param {?} resources
     * @param {?} localePipe
     */
    constructor(designerState, expr, resolver, injector, modalService, message, cdr, localeId, resources, localePipe) {
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.cdr = cdr;
        this.localeId = localeId;
        this.resources = resources;
        this.localePipe = localePipe;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: this.localePipe.transform('component.customizeAction.customizeAction'),
            width: 800,
            height: 520,
            showButtons: true
        };
        this.terminalList = [
            { value: 'app', text: this.localePipe.transform('component.customizeAction.app') },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: this.localePipe.transform('component.customizeAction.') }
        ];
        this.actions = [];
        this.columns = [
            { field: 'code', width: 100, title: this.localePipe.transform('component.customizeAction.code') },
            { field: 'name', width: 100, title: this.localePipe.transform('component.customizeAction.name') },
            {
                field: 'terminalType', width: 100, title: this.localePipe.transform('component.customizeAction.terminalType'),
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
        ];
        this.paramColumns = [
            { field: 'Name', width: 50, title: this.localePipe.transform('component.customizeAction.paramName') },
            { field: 'ValueText', width: 50, title: this.localePipe.transform('component.customizeAction.valueText') },
            {
                field: 'Value', width: 100, title: this.localePipe.transform('component.customizeAction.value'),
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.localePipe = this.localePipe || new WfLocalePipe(localeId, resources);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set value(data) {
        if (data && data.length > 0) {
            for (const d of data) {
                /** @type {?} */
                const action = new CustomizeAciton(d.id, d.code, d.name);
                action.terminalType = d.terminalType;
                action.actualParameters = [];
                if (d.actualParameters && d.actualParameters.length > 0) {
                    for (const a of d.actualParameters) {
                        /** @type {?} */
                        const p = new ActualParameter();
                        p.Name = a.Name;
                        p.Value = a.Value;
                        p.ValueText = a.ValueText;
                        p.Tag = a.Tag;
                        action.actualParameters.push(p);
                    }
                }
                this.actions.push(action);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.loadData();
        // this.actionlist.loadData(this.actions);
        // if (this.actions && this.actions.length > 0) {
        //   this.actionlist.selectRow(this.actions[0].id, true);
        // }
    }
    /**
     * @return {?}
     */
    addActions() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(CustomizeActionListComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        /** @type {?} */
        const modalConfig = {
            title: this.localePipe.transform('component.customizeAction.addActions'),
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length > 0) {
                for (const a of data) {
                    /** @type {?} */
                    const index = this.actions.findIndex((/**
                     * @param {?} act
                     * @return {?}
                     */
                    act => act.code === a.code));
                    if (index > -1) {
                        this.message.info(this.localePipe.transform('component.customizeAction.actionExisted'));
                        this.actions.splice(index, 1);
                    }
                    this.actions.push(a);
                }
                this.loadData();
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @return {?}
     */
    delete() {
        this.actionlist.endCellEdit();
        if (this.actionlist.selectedRow && this.actionlist.selectedRow.data) {
            /** @type {?} */
            const i = this.actions.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            d => d.code === this.actionlist.selectedRow.data.code));
            this.actions.splice(i, 1);
            this.loadData();
            // this.actionlist.loadData(this.actions);
            // if (this.actions && this.actions.length > 0) {
            //   this.actionlist.selectRow(this.actions[0].id, true);
            // } else {
            //   this.curAction = null;
            // }
        }
        else {
            this.message.info(this.localePipe.transform('component.customizeAction.selectedRow'));
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.actionlist.endCellEdit();
        this.paramlist && this.paramlist.endCellEdit();
        /** @type {?} */
        const object = { value: this.actions, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    loadData() {
        this.actionlist.loadData(this.actions);
        if (this.actions.length > 0 && (!this.actionlist.selectedRow || !this.actionlist.selectedRow.data)) {
            this.actionlist.selectRow(this.actions[0].id, true);
        }
        else {
            this.curAction = null;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectChanged(data) {
        this.curAction = data.data;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        /** @type {?} */
        let context = new Array();
        // if(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage')) {
        //   context.push(this.expr.exprEntity.contextEntities.find(x => x.key === 'CurrentLanguage'));
        // }
        // this.expr.clearContext();
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        context = this.designerState.addContext(context);
        if (this.designerState.subActivityContext.length > 0) {
            for (const variable of this.designerState.subActivityContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        // if (e.instance.value) {
        this.expr.addExpressionText(e.instance.value);
        // }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
            //点击确定后，去除表达式里面的新增的上下文变量
            if (context.length > 0) {
                this.expr.exprEntity.contextEntities = this.expr.exprEntity.contextEntities.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => !context.some((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y.key === x.key))));
            }
        }));
    }
}
CustomizeActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-customize-action',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <!-- <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span> -->\r\n        <!-- <h4 class=\"f-title-text\">\u5217\u8868</h4> -->\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"addActions()\">{{'component.customizeAction.add' | wfLocale}}</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">{{'component.customizeAction.delete' | wfLocale}}</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <div [style.height.%]=\"curAction?45:100\">\r\n        <farris-datagrid #actionlist [data]=\"actions\" [idField]=\"'id'\"\r\n          [columns]=\"columns\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\"\r\n          [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"\r\n          (selectChanged)=\"selectChanged($event)\" [closeOtherGridEditor]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n      <ng-container *ngIf=\"curAction\">\r\n        <farris-tabs class=\"f-utils-fill\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n          <farris-tab title=\"{{'component.customizeAction.parameterList'|wfLocale}}\" [id]=\"'parameters'\">\r\n            <ng-template #content>\r\n              <div class=\"f-utils-fill-flex-column h-100\">\r\n                <farris-datagrid #paramlist [data]=\"curAction.actualParameters\" [columns]=\"paramColumns\"\r\n                  [idField]=\"'Name'\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                  [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [closeOtherGridEditor]=\"true\">\r\n                </farris-datagrid>\r\n              </div>\r\n            </ng-template>\r\n          </farris-tab>\r\n        </farris-tabs>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">{{'component.customizeAction.clickCancel' | wfLocale}}</button>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">{{'component.customizeAction.clickOK' | wfLocale}}</button>\r\n</ng-template>\r\n",
                providers: [
                    WfLocalePipe,
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
CustomizeActionComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WF_LANG_RESOURCES,] }] },
    { type: WfLocalePipe, decorators: [{ type: Optional }] }
];
CustomizeActionComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    value: [{ type: Input }],
    actionlist: [{ type: ViewChild, args: ['actionlist',] }],
    paramlist: [{ type: ViewChild, args: ['paramlist',] }]
};
if (false) {
    /** @type {?} */
    CustomizeActionComponent.prototype.cls;
    /** @type {?} */
    CustomizeActionComponent.prototype.closeModal;
    /** @type {?} */
    CustomizeActionComponent.prototype.submitModal;
    /** @type {?} */
    CustomizeActionComponent.prototype.editorParams;
    /** @type {?} */
    CustomizeActionComponent.prototype.modalFooter;
    /** @type {?} */
    CustomizeActionComponent.prototype.modalConfig;
    /** @type {?} */
    CustomizeActionComponent.prototype.actionlist;
    /** @type {?} */
    CustomizeActionComponent.prototype.paramlist;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.terminalList;
    /** @type {?} */
    CustomizeActionComponent.prototype.actions;
    /** @type {?} */
    CustomizeActionComponent.prototype.curAction;
    /** @type {?} */
    CustomizeActionComponent.prototype.columns;
    /** @type {?} */
    CustomizeActionComponent.prototype.paramColumns;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.resources;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionComponent.prototype.localePipe;
}
export class CustomizeActionConverter {
    /**
     * @param {?} localePipe
     */
    constructor(localePipe) {
        this.localePipe = localePipe;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return this.localePipe.transform("component.customizeAction.set");
        }
        else {
            return this.localePipe.transform("component.customizeAction.notSet");
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CustomizeActionConverter.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,