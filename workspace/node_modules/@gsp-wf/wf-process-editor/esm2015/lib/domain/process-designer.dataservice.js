/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { switchMap } from 'rxjs/operators';
import { of } from 'rxjs/observable/of';
import { ProcessDeUtil } from './process-de-util';
export class ProcessDesignerDataService {
    /**
     * @param {?} http
     * @param {?} util
     */
    constructor(http, util) {
        this.http = http;
        this.util = util;
    }
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    GetFlowFormbyId(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getFlowFormWebApi() + '/getFlowForm';
            url += `/${id}`;
            return this.http.get(url);
        }
    }
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    getParametersbyFlowFormKey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getFormalParametersWebApi();
            url += `?flowFormKey=${id}`;
            return this.http.get(url);
        }
    }
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    getComponentsbyFlowformkey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getBizComponentsWebApi();
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${id}"}`);
            return this.http.get(url);
        }
    }
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    getExecuteFormbyFlowFormKey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getExcuteFormsWebApi();
            url += `?flowFormKey=${id}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    getBizActivities(ffId) {
        if (ffId) {
            /** @type {?} */
            const url = this.util.getBizActivityWebApi(ffId);
            return this.http.get(url);
            // .pipe(
            //     map((re: any) => re),
            //     mergeMap((activities: any[]) => {
            //         if (activities && activities.length > 0) {
            //             return forkJoin(activities.map(activity => {
            //                 return forkJoin(this.getBizActivityComponents(ffId, activity.id),
            //                     this.getBizActivityActions(activity.id))
            //                     .pipe(
            //                         map((re: any[]) => {
            //                             activity.components = re[0];
            //                             activity.actions = re[1];
            //                             return activity;
            //                         }));
            //             }));
            //         } else {
            //             return of([]);
            //         }
            //     })
            // );
        }
    }
    /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    getCustomizeActions(formId) {
        if (formId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/customizeAction?flowFormKey=${formId}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    getBizActivityComponents(flowFormId, id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getBizComponentsWebApi();
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${flowFormId}","owner":"${id}","ownerType":"Activity"}`);
            return this.http.get(url);
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getBizActivityActions(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getApprovalActionWebApi();
            url += `?bizActivityId=${id}`;
            return this.http.get(url);
        }
    }
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    getBusinessEntitybyId(id) {
        if (id) {
            // let url = this.util.getMetaDataRUWebApi();
            // url += id;
            // const url = `/api/runtime/lcm/v1.0/bef/handledBeMeta?beId=${id}`;
            /** @type {?} */
            const url = `/api/runtime/lcm/v1.0/bef/expression?beId=${id}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    getProcContentbyKey(key) {
        if (key) {
            /** @type {?} */
            let url = this.util.getProcessDefinitionWebApi();
            url += `/bpmnModel?procDefKey=${key}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    getRTProcContentbyId(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getRTProcessDefinitionWebApi();
            url += `/${id}/bpmnModel`;
            return this.http.get(url);
        }
    }
    /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    saveProcess(content, processInfo, state) {
        if (content) {
            /** @type {?} */
            const postData = {
                organization: processInfo.procOrg ? processInfo.procOrg.orgId : '',
                organizationName: processInfo.procOrg ? processInfo.procOrg.orgName : '',
                accessLevel: processInfo.accessLevel,
                procContent: content,
                state
            };
            /** @type {?} */
            const url = this.util.getProcessDefinitionWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} info
     * @return {?}
     */
    auditProcessDef(info) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/dtProcDefs/auditProcessDef';
        this.http.post(url, info).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => { }));
    }
    /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    deployProcess(content) {
        if (content) {
            /** @type {?} */
            const postData = {
                procDefContent: content
            };
            /** @type {?} */
            const url = this.util.deployWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    saveRTProcess(content, procDefId) {
        if (content) {
            /** @type {?} */
            const postData = {
                procDefContent: content
            };
            /** @type {?} */
            let url = this.util.getRTProcessDefinitionWebApi();
            url += `/${procDefId}/adjust`;
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    syncDtProcess(content, rtProcessInfo) {
        if (content) {
            /** @type {?} */
            const postData = {
                organization: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgId : '',
                organizationName: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgName : '',
                accessLevel: rtProcessInfo.accessLevel || 'public',
                procContent: content,
                state: 0
            };
            /** @type {?} */
            const url = '/api/runtime/wf/v1.0/dtProcDefs';
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * 获取流程扩展属性
     * @param {?} bizDefKey
     * @param {?} startMode
     * @param {?} bizCategoryId
     * @return {?}
     */
    getProcExtendProperty(bizDefKey, startMode, bizCategoryId) {
        /** @type {?} */
        let filter = '{';
        filter += `"bizDefKey":"${bizDefKey}",`;
        filter += `"bizCategoryId":"${bizCategoryId}",`;
        filter += `"startMode":"${startMode}"`;
        filter += '}';
        filter = encodeURIComponent(filter);
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/procExtendProperty?param=${filter}`;
        return this.http.get(url);
    }
    /**
     * 获取流程构件
     * @return {?}
     */
    getBizCmp() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/bizComponent?flowFormKey=*&owner=*&ownerType=Process`;
        return this.http.get(url);
    }
    /**
     * 获取全部流程构件
     * @param {?} flowFormKey
     * @return {?}
     */
    getAllBizCmp(flowFormKey) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/bizComponent?flowFormKey=${flowFormKey}&owner=${flowFormKey}&ownerType=Process`;
        return this.http.get(url);
    }
    /**
     * 获取表单格式
     * @param {?} bizCategoryId
     * @return {?}
     */
    getFormFormat(bizCategoryId) {
        if (bizCategoryId == null) {
            return of(null);
        }
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/formFormat/query?param=%7B%22bizCategory%22%3A%22${bizCategoryId}%22%7D`;
        return this.http.get(url);
    }
    /**
     * 获取配置
     * @return {?}
     */
    getGeneralConfig() {
        return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableTransfer").pipe(switchMap((/**
         * @param {?} enableTransfer
         * @return {?}
         */
        (enableTransfer) => {
            return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableNotify").pipe(switchMap((/**
             * @param {?} enableNotify
             * @return {?}
             */
            (enableNotify) => {
                return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableAddSignBehind").pipe(switchMap((/**
                 * @param {?} enableAddSignBehind
                 * @return {?}
                 */
                (enableAddSignBehind) => {
                    return this.http.get("/api/runtime/wf/v1.0/generalConfig/Is_EnableAddSignFront").pipe(switchMap((/**
                     * @param {?} enableAddSignFront
                     * @return {?}
                     */
                    (enableAddSignFront) => {
                        /** @type {?} */
                        const res = {
                            enableTransfer: JSON.parse(enableTransfer.currentValue),
                            enableNotify: JSON.parse(enableNotify.currentValue),
                            enableAddSignBehind: JSON.parse(enableAddSignBehind.currentValue),
                            enableAddSignFront: JSON.parse(enableAddSignFront.currentValue)
                        };
                        return of(res);
                    })));
                })));
            })));
        })));
    }
}
ProcessDesignerDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerDataService.ctorParameters = () => [
    { type: HttpService },
    { type: ProcessDeUtil }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerDataService.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1kZXNpZ25lci5kYXRhc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZG9tYWluL3Byb2Nlc3MtZGVzaWduZXIuZGF0YXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBaUIsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQU1sRCxNQUFNLE9BQU8sMEJBQTBCOzs7OztJQUNuQyxZQUNZLElBQWlCLEVBQ2pCLElBQW1CO1FBRG5CLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsU0FBSSxHQUFKLElBQUksQ0FBZTtJQUFJLENBQUM7Ozs7OztJQUdwQyxlQUFlLENBQUMsRUFBVTtRQUN0QixJQUFJLEVBQUUsRUFBRTs7Z0JBQ0EsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxjQUFjO1lBQ3hELEdBQUcsSUFBSSxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0I7SUFDTCxDQUFDOzs7Ozs7SUFFRCwwQkFBMEIsQ0FBQyxFQUFVO1FBQ2pDLElBQUksRUFBRSxFQUFFOztnQkFDQSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUMvQyxHQUFHLElBQUksZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1lBQzVCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFH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Q0FBQzs7O1lBM1FKLFVBQVU7Ozs7WUFWRixXQUFXO1lBS1gsYUFBYTs7Ozs7OztJQVFkLDBDQUF5Qjs7Ozs7SUFDekIsMENBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IG1hcCwgbWVyZ2VNYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgZm9ya0pvaW4gfSBmcm9tICdyeGpzL29ic2VydmFibGUvZm9ya0pvaW4nO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9vZic7XHJcbmltcG9ydCB7IFByb2Nlc3NEZVV0aWwgfSBmcm9tICcuL3Byb2Nlc3MtZGUtdXRpbCc7XHJcbmltcG9ydCB7IEF1ZGl0UHJvY2Vzc0RlZkluZm8gfSBmcm9tICcuL2VudGl0aWVzL2F1ZGl0LXByb2Nlc3NEZWYtaW5mbyc7XHJcbmltcG9ydCB7IFByb2Nlc3NJbmZvIH0gZnJvbSAnLi4vbW9kZWwvcHJvY2Vzcy1pbmZvJztcclxuaW1wb3J0IHsgUlRQcm9jZXNzSW5mbyB9IGZyb20gJy4uL21vZGVsL3J0LXByb2Nlc3MtaW5mbyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzRGVzaWduZXJEYXRhU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgdXRpbDogUHJvY2Vzc0RlVXRpbCkgeyB9XHJcblxyXG4gICAgLy8g5Z+65LqO5rWB56iL5YiG57G7SUTojrflj5bmtYHnqIvliIbnsbvkv6Hmga9cclxuICAgIEdldEZsb3dGb3JtYnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRGbG93Rm9ybVdlYkFwaSgpICsgJy9nZXRGbG93Rm9ybSc7XHJcbiAgICAgICAgICAgIHVybCArPSBgLyR7aWR9YDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDln7rkuo7mtYHnqIvliIbnsbvojrflj5blj4LmlbDliJfooahcclxuICAgIGdldFBhcmFtZXRlcnNieUZsb3dGb3JtS2V5KGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51dGlsLmdldEZvcm1hbFBhcmFtZXRlcnNXZWJBcGkoKTtcclxuICAgICAgICAgICAgdXJsICs9IGA/Zmxvd0Zvcm1LZXk9JHtpZH1gO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWfuuS6jua1geeoi+WIhuexu+iOt+WPlua1geeoi+aehOS7tlxyXG4gICAgZ2V0Q29tcG9uZW50c2J5Rmxvd2Zvcm1rZXkoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLnV0aWwuZ2V0Qml6Q29tcG9uZW50c1dlYkFwaSgpO1xyXG4gICAgICAgICAgICB1cmwgKz0gYC9xdWVyeT9wYXJhbT1gICsgZW5jb2RlVVJJQ29tcG9uZW50KGB7XCJmbG93Rm9ybUtleVwiOlwiJHtpZH1cIn1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDln7rkuo7mtYHnqIvliIbnsbvojrflj5booajljZXlrprkuYlcclxuICAgIGdldEV4ZWN1dGVGb3JtYnlGbG93Rm9ybUtleShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRFeGN1dGVGb3Jtc1dlYkFwaSgpO1xyXG4gICAgICAgICAgICB1cmwgKz0gYD9mbG93Rm9ybUtleT0ke2lkfWA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDln7rkuo7mtYHnqIvliIbnsbtJZOiOt+WPluS4muWKoea0u+WKqFxyXG4gICAgICogQHBhcmFtIGZmSWQg5rWB56iL5YiG57G7aWRcclxuICAgICAqL1xyXG4gICAgZ2V0Qml6QWN0aXZpdGllcyhmZklkOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoZmZJZCkge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLnV0aWwuZ2V0Qml6QWN0aXZpdHlXZWJBcGkoZmZJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgICAgIC8vIC5waXBlKFxyXG4gICAgICAgICAgICAvLyAgICAgbWFwKChyZTogYW55KSA9PiByZSksXHJcbiAgICAgICAgICAgIC8vICAgICBtZXJnZU1hcCgoYWN0aXZpdGllczogYW55W10pID0+IHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBpZiAoYWN0aXZpdGllcyAmJiBhY3Rpdml0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIGZvcmtKb2luKGFjdGl2aXRpZXMubWFwKGFjdGl2aXR5ID0+IHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbih0aGlzLmdldEJpekFjdGl2aXR5Q29tcG9uZW50cyhmZklkLCBhY3Rpdml0eS5pZCksXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRCaXpBY3Rpdml0eUFjdGlvbnMoYWN0aXZpdHkuaWQpKVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXAoKHJlOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkuY29tcG9uZW50cyA9IHJlWzBdO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkuYWN0aW9ucyA9IHJlWzFdO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5O1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgIH0pXHJcbiAgICAgICAgICAgIC8vICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Z+65LqO5rWB56iL5YiG57G7SUTojrflj5boh6rlrprkuYnliqjkvZxcclxuICAgICAqIEBwYXJhbSBmb3JtSWQg5rWB56iL5YiG57G7SURcclxuICAgICAqL1xyXG4gICAgZ2V0Q3VzdG9taXplQWN0aW9ucyhmb3JtSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGZvcm1JZCkge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvY3VzdG9taXplQWN0aW9uP2Zsb3dGb3JtS2V5PSR7Zm9ybUlkfWA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDln7rkuo7kuJrliqHmtLvliqhpZOiOt+WPluS4muWKoea0u+WKqOaehOS7tlxyXG4gICAgICogQHBhcmFtIGlkIOS4muWKoea0u+WKqGlkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Qml6QWN0aXZpdHlDb21wb25lbnRzKGZsb3dGb3JtSWQ6IHN0cmluZywgaWQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51dGlsLmdldEJpekNvbXBvbmVudHNXZWJBcGkoKTtcclxuICAgICAgICAgICAgdXJsICs9IGAvcXVlcnk/cGFyYW09YCArIGVuY29kZVVSSUNvbXBvbmVudChge1wiZmxvd0Zvcm1LZXlcIjpcIiR7Zmxvd0Zvcm1JZH1cIixcIm93bmVyXCI6XCIke2lkfVwiLFwib3duZXJUeXBlXCI6XCJBY3Rpdml0eVwifWApO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2V0Qml6QWN0aXZpdHlBY3Rpb25zKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRBcHByb3ZhbEFjdGlvbldlYkFwaSgpO1xyXG4gICAgICAgICAgICB1cmwgKz0gYD9iaXpBY3Rpdml0eUlkPSR7aWR9YDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5Z+65LqOSUTojrflj5ZCRVxyXG4gICAgZ2V0QnVzaW5lc3NFbnRpdHlieUlkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICAvLyBsZXQgdXJsID0gdGhpcy51dGlsLmdldE1ldGFEYXRhUlVXZWJBcGkoKTtcclxuICAgICAgICAgICAgLy8gdXJsICs9IGlkO1xyXG4gICAgICAgICAgICAvLyBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL2xjbS92MS4wL2JlZi9oYW5kbGVkQmVNZXRhP2JlSWQ9JHtpZH1gO1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL2xjbS92MS4wL2JlZi9leHByZXNzaW9uP2JlSWQ9JHtpZH1gO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Z+65LqO5rWB56iL5a6a5LmJS2V56I635Y+W5LiK5LiL5paHXHJcbiAgICAgKiBAcGFyYW0ga2V5IOa1geeoi+WumuS5iWtleVxyXG4gICAgICovXHJcbiAgICBnZXRQcm9jQ29udGVudGJ5S2V5KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLnV0aWwuZ2V0UHJvY2Vzc0RlZmluaXRpb25XZWJBcGkoKTtcclxuICAgICAgICAgICAgdXJsICs9IGAvYnBtbk1vZGVsP3Byb2NEZWZLZXk9JHtrZXl9YDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWfuuS6jua1geeoi+WumuS5iUtleeiOt+WPluS4iuS4i+aWh1xyXG4gICAgICogQHBhcmFtIGtleSDmtYHnqIvlrprkuYlJZFxyXG4gICAgICovXHJcbiAgICBnZXRSVFByb2NDb250ZW50YnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRSVFByb2Nlc3NEZWZpbml0aW9uV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHVybCArPSBgLyR7aWR9L2JwbW5Nb2RlbGA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDkv53lrZjmtYHnqItcclxuICAgICAqIEBwYXJhbSBjb250ZW50XHJcbiAgICAgKi9cclxuICAgIHNhdmVQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZywgcHJvY2Vzc0luZm86IFByb2Nlc3NJbmZvLCBzdGF0ZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBwb3N0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbjogcHJvY2Vzc0luZm8ucHJvY09yZyA/IHByb2Nlc3NJbmZvLnByb2NPcmcub3JnSWQgOiAnJyxcclxuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbk5hbWU6IHByb2Nlc3NJbmZvLnByb2NPcmcgPyBwcm9jZXNzSW5mby5wcm9jT3JnLm9yZ05hbWUgOiAnJyxcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0xldmVsOiBwcm9jZXNzSW5mby5hY2Nlc3NMZXZlbCxcclxuICAgICAgICAgICAgICAgIHByb2NDb250ZW50OiBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgc3RhdGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy51dGlsLmdldFByb2Nlc3NEZWZpbml0aW9uV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KHBvc3REYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGF1ZGl0UHJvY2Vzc0RlZihpbmZvOiBBdWRpdFByb2Nlc3NEZWZJbmZvKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gJy9hcGkvcnVudGltZS93Zi92MS4wL2R0UHJvY0RlZnMvYXVkaXRQcm9jZXNzRGVmJztcclxuICAgICAgICB0aGlzLmh0dHAucG9zdCh1cmwsIGluZm8pLnN1YnNjcmliZShyZSA9PiB7IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+R5biD5rWB56iLXHJcbiAgICAgKiBAcGFyYW0gY29udGVudFxyXG4gICAgICovXHJcbiAgICBkZXBsb3lQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBwcm9jRGVmQ29udGVudDogY29udGVudFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLnV0aWwuZGVwbG95V2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KHBvc3REYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNhdmVSVFByb2Nlc3MoY29udGVudDogc3RyaW5nLCBwcm9jRGVmSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBwcm9jRGVmQ29udGVudDogY29udGVudFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51dGlsLmdldFJUUHJvY2Vzc0RlZmluaXRpb25XZWJBcGkoKTtcclxuICAgICAgICAgICAgdXJsICs9IGAvJHtwcm9jRGVmSWR9L2FkanVzdGA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KHBvc3REYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN5bmNEdFByb2Nlc3MoY29udGVudDogc3RyaW5nLCBydFByb2Nlc3NJbmZvOiBSVFByb2Nlc3NJbmZvKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBwb3N0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbjogcnRQcm9jZXNzSW5mby5wcm9jT3JnID8gcnRQcm9jZXNzSW5mby5wcm9jT3JnLm9yZ0lkIDogJycsXHJcbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25OYW1lOiBydFByb2Nlc3NJbmZvLnByb2NPcmcgPyBydFByb2Nlc3NJbmZvLnByb2NPcmcub3JnTmFtZSA6ICcnLFxyXG4gICAgICAgICAgICAgICAgYWNjZXNzTGV2ZWw6IHJ0UHJvY2Vzc0luZm8uYWNjZXNzTGV2ZWwgfHwgJ3B1YmxpYycsXHJcbiAgICAgICAgICAgICAgICBwcm9jQ29udGVudDogY29udGVudCxcclxuICAgICAgICAgICAgICAgIHN0YXRlOiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9ICcvYXBpL3J1bnRpbWUvd2YvdjEuMC9kdFByb2NEZWZzJztcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmtYHnqIvmianlsZXlsZ7mgKdcclxuICAgICAqIEBwYXJhbSBiaXpEZWZLZXlcclxuICAgICAqIEBwYXJhbSBzdGFydE1vZGVcclxuICAgICAqIEBwYXJhbSBiaXpDYXRlZ29yeUlkXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRQcm9jRXh0ZW5kUHJvcGVydHkoYml6RGVmS2V5OiBzdHJpbmcsIHN0YXJ0TW9kZTogc3RyaW5nLCBiaXpDYXRlZ29yeUlkOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgZmlsdGVyID0gJ3snO1xyXG4gICAgICAgIGZpbHRlciArPSBgXCJiaXpEZWZLZXlcIjpcIiR7Yml6RGVmS2V5fVwiLGA7XHJcbiAgICAgICAgZmlsdGVyICs9IGBcImJpekNhdGVnb3J5SWRcIjpcIiR7Yml6Q2F0ZWdvcnlJZH1cIixgO1xyXG4gICAgICAgIGZpbHRlciArPSBgXCJzdGFydE1vZGVcIjpcIiR7c3RhcnRNb2RlfVwiYDtcclxuICAgICAgICBmaWx0ZXIgKz0gJ30nO1xyXG4gICAgICAgIGZpbHRlciA9IGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXIpO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9wcm9jRXh0ZW5kUHJvcGVydHk/cGFyYW09JHtmaWx0ZXJ9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5rWB56iL5p6E5Lu2XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRCaXpDbXAoKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL2JpekNvbXBvbmVudD9mbG93Rm9ybUtleT0qJm93bmVyPSomb3duZXJUeXBlPVByb2Nlc3NgO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blhajpg6jmtYHnqIvmnoTku7ZcclxuICAgICAqIEBwYXJhbSBmbG93Rm9ybUtleVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgZ2V0QWxsQml6Q21wKGZsb3dGb3JtS2V5KSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL2JpekNvbXBvbmVudD9mbG93Rm9ybUtleT0ke2Zsb3dGb3JtS2V5fSZvd25lcj0ke2Zsb3dGb3JtS2V5fSZvd25lclR5cGU9UHJvY2Vzc2A7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluihqOWNleagvOW8j1xyXG4gICAgICovXHJcbiAgICBnZXRGb3JtRm9ybWF0KGJpekNhdGVnb3J5SWQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChiaXpDYXRlZ29yeUlkID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvZm9ybUZvcm1hdC9xdWVyeT9wYXJhbT0lN0IlMjJiaXpDYXRlZ29yeSUyMiUzQSUyMiR7Yml6Q2F0ZWdvcnlJZH0lMjIlN0RgO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bphY3nva5cclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIGdldEdlbmVyYWxDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoXCIvYXBpL3J1bnRpbWUvd2YvdjEuMC9nZW5lcmFsQ29uZmlnL0lzX0VuYWJsZVRyYW5zZmVyXCIpLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoZW5hYmxlVHJhbnNmZXI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoXCIvYXBpL3J1bnRpbWUvd2YvdjEuMC9nZW5lcmFsQ29uZmlnL0lzX0VuYWJsZU5vdGlmeVwiKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoZW5hYmxlTm90aWZ5OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoXCIvYXBpL3J1bnRpbWUvd2YvdjEuMC9nZW5lcmFsQ29uZmlnL0lzX0VuYWJsZUFkZFNpZ25CZWhpbmRcIikucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoZW5hYmxlQWRkU2lnbkJlaGluZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoXCIvYXBpL3J1bnRpbWUvd2YvdjEuMC9nZW5lcmFsQ29uZmlnL0lzX0VuYWJsZUFkZFNpZ25Gcm9udFwiKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKGVuYWJsZUFkZFNpZ25Gcm9udDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlVHJhbnNmZXI6IEpTT04ucGFyc2UoZW5hYmxlVHJhbnNmZXIuY3VycmVudFZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVOb3RpZnk6IEpTT04ucGFyc2UoZW5hYmxlTm90aWZ5LmN1cnJlbnRWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlQWRkU2lnbkJlaGluZDogSlNPTi5wYXJzZShlbmFibGVBZGRTaWduQmVoaW5kLmN1cnJlbnRWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlQWRkU2lnbkZyb250OiBKU09OLnBhcnNlKGVuYWJsZUFkZFNpZ25Gcm9udC5jdXJyZW50VmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=