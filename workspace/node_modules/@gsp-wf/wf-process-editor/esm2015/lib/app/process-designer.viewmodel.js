/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ProcessDesignerDataService } from '../domain/process-designer.dataservice';
import { forkJoin } from 'rxjs/observable/forkJoin';
import { ProcessClrTypeID } from '../model/process-clrtypeId';
import { BpmnProcessViewModel } from './bpmn-process.viewmodel';
import { WFFlowElementsViewModel } from './wf-flowElements.viewModel';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { map, switchMap } from 'rxjs/operators';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { of, Subject, from } from 'rxjs';
import { BsModalService } from '@farris/ui-modal';
import { SaveAsEditComponent } from '../views/save-as-edit/save-as-edit.component';
import { ProcessDeUtil } from '../domain/process-de-util';
import { SubProcessViewModel } from './sub-process.viewmodel';
import { AutoActivityAdapter } from './auto-activity.adapter';
import { CatchEventAdapter } from './catch-event.adapter';
import { MessageActivityAdapter } from './message-activity.adapter';
import { AuditEvent, AuditProcessDefInfo } from '../domain/entities/audit-processDef-info';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessInfo } from '../model/process-info';
import { NotifyActivityAdapter } from './notify-activity.adapter';
import { AifCreationBillActivityAdapter } from './aif-creation-bill-activity.adapter';
import { EventBusService } from '../views/shared/event-bus.service';
import { ReleaseComponent } from '../views/release-component/release-component.component';
import { BillNodeActivityAdapter } from './bill-node-activity.adapter';
import { SequenceActivityAdapter } from './sequecne-activity.adapter';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
export class ProcessDesignerViewModel {
    /**
     * @param {?} uiState
     * @param {?} service
     * @param {?} util
     * @param {?} notify
     * @param {?} message
     * @param {?} process
     * @param {?} activity
     * @param {?} subProcess
     * @param {?} autoActAdapter
     * @param {?} catchEventAdapter
     * @param {?} messageActAdapter
     * @param {?} notifyActAdapter
     * @param {?} creationActAdapter
     * @param {?} billNodeActivityAdapter
     * @param {?} sequenceActivityAdapter
     * @param {?} modalService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} http
     * @param {?} eventBus
     * @param {?} localePipe
     */
    constructor(uiState, service, util, notify, message, process, activity, subProcess, autoActAdapter, catchEventAdapter, messageActAdapter, notifyActAdapter, creationActAdapter, billNodeActivityAdapter, sequenceActivityAdapter, modalService, injector, resolver, http, eventBus, localePipe) {
        this.uiState = uiState;
        this.service = service;
        this.util = util;
        this.notify = notify;
        this.message = message;
        this.process = process;
        this.activity = activity;
        this.subProcess = subProcess;
        this.autoActAdapter = autoActAdapter;
        this.catchEventAdapter = catchEventAdapter;
        this.messageActAdapter = messageActAdapter;
        this.notifyActAdapter = notifyActAdapter;
        this.creationActAdapter = creationActAdapter;
        this.billNodeActivityAdapter = billNodeActivityAdapter;
        this.sequenceActivityAdapter = sequenceActivityAdapter;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.http = http;
        this.eventBus = eventBus;
        this.localePipe = localePipe;
    }
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    initProcessProperty(obj) {
        /** @type {?} */
        const pptData = obj.propertyData;
        /** @type {?} */
        const ffId = pptData.EntryForm;
        if (ffId) {
            pptData.EntryForm = this.uiState.flowFormInfo.flowForm;
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
        else {
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        // 更新属性框数据与配置
        /** @type {?} */
        const propertyData = obj.propertyData;
        switch (propertyData.ClrTypeID) {
            case ProcessClrTypeID.process:
                this.process.setProcessProperty(obj);
                break;
            case ProcessClrTypeID.userActivity:
                this.activity.setUserActivityProperty(obj, 'userActivity');
                break;
            case ProcessClrTypeID.subProcess:
                this.subProcess.setProperty(obj);
                break;
            case ProcessClrTypeID.autoActivity:
                this.autoActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.catchEvent:
                this.catchEventAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.operationActivity:
                this.activity.setUserActivityProperty(obj, 'autoActivity');
                break;
            case ProcessClrTypeID.messageActivity:
                this.messageActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.notifyActivity:
                this.notifyActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.aifCreationBillActivity:
                this.creationActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.billNodeActivity:
                this.billNodeActivityAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.sequenceActivity:
                this.sequenceActivityAdapter.setProperty(obj);
                break;
            default:
                this.activity.setFlowElementProperty(obj);
                break;
        }
    }
    /**
     * @return {?}
     */
    updateSchemas() {
        /** @type {?} */
        const $schemas = new Subject();
        this.uiState.schemas = [];
        // 检查是否有精简be，如果有则覆盖原有be
        if (this.uiState.flowFormInfo.formalParameters && this.uiState.flowFormInfo.formalParameters.length > 0) {
            /** @type {?} */
            const schemaParams = this.uiState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.dataType === 'CDTSchema' && p.schemaMetadataId));
            /** @type {?} */
            const bizDefKey = this.uiState.flowFormInfo.flowForm.id;
            this.getBeMappingByBizDefKey(bizDefKey).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                if (re && re.enable) {
                    return this.service.getBusinessEntitybyId(re.newSchemaMetaDataId).subscribe((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        /** @type {?} */
                        let data = [d];
                        if (data && data.length > 0) {
                            data.forEach((/**
                             * @param {?} d
                             * @return {?}
                             */
                            (d) => {
                                this.uiState.schemas.push(d);
                            }));
                        }
                        $schemas.next(true);
                    }), (/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        this.uiState.schemas = [];
                        $schemas.next(true);
                    }));
                }
                else {
                    forkJoin(schemaParams.map((/**
                     * @param {?} para
                     * @return {?}
                     */
                    para => {
                        return this.service.getBusinessEntitybyId(para.schemaMetadataId);
                    }))).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (data && data.length > 0) {
                            data.forEach((/**
                             * @param {?} d
                             * @return {?}
                             */
                            (d) => {
                                this.uiState.schemas.push(d);
                            }));
                        }
                        $schemas.next(true);
                    }), (/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        this.uiState.schemas = [];
                        $schemas.next(true);
                    }));
                }
            }));
        }
        else {
            this.uiState.schemas = [];
            $schemas.next(true);
        }
        return $schemas.asObservable();
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    getFlowFormInfoById(formId) {
        /** @type {?} */
        const $flowform = new Subject();
        if (formId) {
            forkJoin(this.service.GetFlowFormbyId(formId), this.service.getParametersbyFlowFormKey(formId).pipe(map((/**
             * @param {?} params
             * @return {?}
             */
            (params) => {
                this.setFormParamCxt(params);
                return params;
            }))), this.service.getComponentsbyFlowformkey(formId), this.service.getExecuteFormbyFlowFormKey(formId), this.service.getBizActivities(formId), this.service.getCustomizeActions(formId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const flowform = new FlowFormInfo();
                flowform.flowForm = re[0];
                flowform.formalParameters = re[1];
                flowform.bizComponents = re[2].filter((/**
                 * @param {?} cmp
                 * @return {?}
                 */
                cmp => cmp.ownerType !== 'Activity'));
                flowform.excuteForms = re[3];
                flowform.bizActivities = re[4];
                flowform.customizeActions = re[5];
                this.uiState.flowFormInfo = flowform;
                this.updateSchemas().subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                (re) => {
                    $flowform.next(flowform);
                }));
            }));
        }
        return $flowform.asObservable();
    }
    /**
     * @return {?}
     */
    getFormFormatsByBizCategory() {
        if (this.uiState.flowFormInfo.flowForm.businessObjectId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/query?param=`;
            /** @type {?} */
            let param = `{"bizCategory":"${this.uiState.flowFormInfo.flowForm.businessObjectId}"}`;
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    saveProcess(content, processInfo, state) {
        return this.service.saveProcess(content, processInfo, state);
    }
    /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    deployProcess(content) {
        return this.service.deployProcess(content);
    }
    /**
     * 带审核的发布流程
     * @param {?} content 流程上下文
     * @param {?} version
     * @return {?}
     */
    releaseProcess(content, version) {
        /** @type {?} */
        const process = JSON.parse(content);
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ReleaseComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.procName = process.DefaultProcess.Name;
        compRef.instance.procVersion = version === 1 ? 1 : version + 1;
        compRef.instance.processDefinitionKey = process.DefaultProcess.Key;
        /** @type {?} */
        const modalOptions = {
            title: this.localePipe.transform('app.processDesigner.releaseProcess'),
            width: 500, height: 550,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        const dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dlg.close();
        }));
    }
    /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    auditProcessDef(auditId, success, key) {
        /** @type {?} */
        const info = new AuditProcessDefInfo();
        info.auditId = auditId;
        info.success = success;
        info.processDefKey = key;
        this.service.auditProcessDef(info);
    }
    /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    saveRTProcess(content, procDefId) {
        return this.service.saveRTProcess(content, procDefId);
    }
    /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    saveAsProcess(process, processInfo) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SaveAsEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.procKey = process.DefaultProcess.Key;
        compRef.instance.procName = process.DefaultProcess.Name + this.localePipe.transform('app.processDesigner.copy');
        compRef.instance.isAdministratorConfig = this.uiState.isAdministratorConfig;
        compRef.instance.enableAdminOrgAut = this.uiState.enableAdminOrgAut;
        compRef.instance.administrator = this.uiState.administrator;
        compRef.instance.accessLevel = processInfo.accessLevel;
        if (!this.uiState.enableAdminOrgAut && !this.uiState.isAdministratorConfig) {
            compRef.instance.organization = processInfo.procOrg.orgId;
            compRef.instance.organizationName = processInfo.procOrg.orgName;
        }
        /** @type {?} */
        const modalOptions = {
            title: this.localePipe.transform('app.processDesigner.saveAs'),
            width: 450, height: 400,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        const dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            process.DefaultProcess.Name = re.procName;
            /** @type {?} */
            const procInfo = new ProcessInfo();
            procInfo.accessLevel = re.accessLevel;
            procInfo.procOrg = {
                orgId: re.organization,
                orgName: re.organizationName
            };
            this.saveProcess(process.ConvertToJson(), procInfo, 1).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.notify.success((/** @type {?} */ ({
                    title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.saveAsSuccess'), timeout: 3000
                })));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.notify.error((/** @type {?} */ ({
                    title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.saveAsFail'), timeout: 3000
                })));
            }));
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            dlg.close();
        }));
    }
    /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @param {?=} showTip
     * @return {?}
     */
    syncDtProcess(content, rtProcessInfo, showTip = true) {
        if (content) {
            /** @type {?} */
            const process = JSON.parse(content);
            if (showTip) {
                this.message.question(this.localePipe.transform('app.processDesigner.syncDt'), (/**
                 * @return {?}
                 */
                () => {
                    this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        this.notify.success((/** @type {?} */ ({
                            title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.syncSuccess'), timeout: 3000
                        })));
                        this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process.DefaultProcess.Key);
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    (error) => {
                        this.notify.error((/** @type {?} */ ({
                            title: this.localePipe.transform('app.processDesigner.tips'), msg: error.error.Message, timeout: 3000
                        })));
                        this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process.DefaultProcess.Key);
                    }));
                }));
            }
            else {
                this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.notify.success((/** @type {?} */ ({
                        title: this.localePipe.transform('app.processDesigner.tips'), msg: this.localePipe.transform('app.processDesigner.syncSuccess'), timeout: 3000
                    })));
                    this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process.DefaultProcess.Key);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.notify.error((/** @type {?} */ ({
                        title: this.localePipe.transform('app.processDesigner.tips'), msg: error.error.Message, timeout: 3000
                    })));
                    this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process.DefaultProcess.Key);
                }));
            }
        }
    }
    /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    beforeCompleteStrategyChange(data, processInfo) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=${processInfo.rtProcDefId}&activityDefinitionId=${data.Id}`;
        return this.http.get(url).pipe(switchMap((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (re && re.length > 0) {
                this.message.info(this.localePipe.transform('app.processDesigner.beforeCompleteStrategyChange'));
                return of(false);
            }
            else {
                return of(true);
            }
        })));
    }
    /**
     * @param {?} procCategoryId
     * @return {?}
     */
    getProcessCategory(procCategoryId) {
        return this.service.GetFlowFormbyId(procCategoryId);
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    setFormParamCxt(params) {
        this.uiState.formalParameterContext = [];
        if (params && params.length > 0) {
            params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                if (param.dataType === 'CDTSchema') {
                    /** @type {?} */
                    const formalParameterContext = [{
                            key: `schemaId_${param.code}`,
                            name: `schemaId_${param.name}`,
                            description: `schemaId_${param.name}`
                        }, {
                            key: `metadataId_${param.code}`,
                            name: `metadataId_${param.name}`,
                            description: `metadataId_${param.name}`
                        }];
                    this.uiState.formalParameterContext = this.uiState.formalParameterContext.concat(formalParameterContext);
                }
            }));
        }
    }
    /**
     * @param {?} ResourceKeys
     * @param {?} data
     * @return {?}
     */
    copy(ResourceKeys, data) {
        this.eventBus.emit(ResourceKeys, data);
    }
    /**
     * @param {?} ResourceKeys
     * @param {?} data
     * @return {?}
     */
    batchSet(ResourceKeys, data) {
        this.eventBus.emit(ResourceKeys, data);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getProcDefsByKey(key) {
        if (key) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/procDefs/key?procDefKey=${key}`;
            return this.http.get(url);
        }
    }
    /**
     * @param {?} bizDefKey
     * @param {?} schema
     * @return {?}
     */
    checkExpressionsByPayload(bizDefKey, schema) {
        /** @type {?} */
        const checkExpressionsPayload = {
            bizDefKey: bizDefKey,
            schema: schema
        };
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/flowForm/checkExpressionsByPayload`;
        return this.http.post(url, checkExpressionsPayload);
    }
    /**
     * @param {?} bizDefKey
     * @return {?}
     */
    getBeMappingByBizDefKey(bizDefKey) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/flowForm/getBeMappingByBizDefKey?bizDefKey=${bizDefKey}`;
        return this.http.get(url);
    }
}
ProcessDesignerViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerDataService },
    { type: ProcessDeUtil },
    { type: NotifyService },
    { type: MessagerService },
    { type: BpmnProcessViewModel },
    { type: WFFlowElementsViewModel },
    { type: SubProcessViewModel },
    { type: AutoActivityAdapter },
    { type: CatchEventAdapter },
    { type: MessageActivityAdapter },
    { type: NotifyActivityAdapter },
    { type: AifCreationBillActivityAdapter },
    { type: BillNodeActivityAdapter },
    { type: SequenceActivityAdapter },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: HttpService },
    { type: EventBusService },
    { type: WfLocalePipe }
];
if (false) {
    /** @type {?} */
    ProcessDesignerViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.process;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.activity;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.subProcess;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.autoActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.catchEventAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.messageActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.notifyActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.creationActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.billNodeActivityAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.sequenceActivityAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.eventBus;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1kZXNpZ25lci52aWV3bW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9wcm9jZXNzLWRlc2lnbmVyLnZpZXdtb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDcEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDbkYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUUzRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUMxRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFLMUUsTUFBTSxPQUFPLHdCQUF3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQ25DLFlBQ1MsT0FBK0IsRUFDOUIsT0FBbUMsRUFDbkMsSUFBbUIsRUFDbkIsTUFBcUIsRUFDckIsT0FBd0IsRUFDeEIsT0FBNkIsRUFDN0IsUUFBaUMsRUFDakMsVUFBK0IsRUFDL0IsY0FBbUMsRUFDbkMsaUJBQW9DLEVBQ3BDLGlCQUF5QyxFQUN6QyxnQkFBdUMsRUFDdkMsa0JBQWtELEVBQ2xELHVCQUFnRCxFQUNoRCx1QkFBZ0QsRUFDaEQsWUFBNEIsRUFDNUIsUUFBa0IsRUFDbEIsUUFBa0MsRUFDbEMsSUFBaUIsRUFDakIsUUFBeUIsRUFDekIsVUFBd0I7UUFwQnpCLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBQzlCLFlBQU8sR0FBUCxPQUFPLENBQTRCO1FBQ25DLFNBQUksR0FBSixJQUFJLENBQWU7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUNyQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUN4QixZQUFPLEdBQVAsT0FBTyxDQUFzQjtRQUM3QixhQUFRLEdBQVIsUUFBUSxDQUF5QjtRQUNqQyxlQUFVLEdBQVYsVUFBVSxDQUFxQjtRQUMvQixtQkFBYyxHQUFkLGNBQWMsQ0FBcUI7UUFDbkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXdCO1FBQ3pDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBdUI7UUFDdkMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFnQztRQUNsRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQzVCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixlQUFVLEdBQVYsVUFBVSxDQUFjO0lBRWxDLENBQUM7Ozs7OztJQUdELG1CQUFtQixDQUFDLEdBQVE7O2NBQ3BCLE9BQU8sR0FBRyxHQUFHLENBQUMsWUFBWTs7Y0FDMUIsSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTO1FBQzlCLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDaEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQ3JDO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNoRixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxHQUFROzs7Y0FFWixZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVk7UUFDckMsUUFBUSxZQUFZLENBQUMsU0FBUyxFQUFFO1lBQzlCLEtBQUssZ0JBQWdCLENBQUMsT0FBTztnQkFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckMsTUFBTTtZQUNSLEtBQUssZ0JBQWdCLENBQUMsWUFBWTtnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7Z0JBQzNELE1BQU07WUFDUixLQUFLLGdCQUFnQixDQUFDLFVBQVU7Z0JBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNO1lBQ1IsS0FBSyxnQkFBZ0IsQ0FBQyxZQUFZO2dCQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckMsTUFBTTtZQUNSLEtBQUssZ0JBQWdCLENBQUMsVUFBVTtnQkFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEMsTUFBTTtZQUNSLEtBQUssZ0JBQWdCLENBQUMsaUJBQWlCO2dCQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztnQkFDM0QsTUFBTTtZQUNSLEtBQUssZ0JBQWdCLENBQUMsZUFBZTtnQkFDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEMsTUFBTTtZQUNSLEtBQUssZ0JBQWdCLENBQUMsY0FBYztnQkFDbEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdkMsTUFBTTtZQUNSLEtBQUssZ0JBQWdCLENBQUMsdUJBQXVCO2dCQUMzQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNO1lBQ1IsS0FBSyxnQkFBZ0IsQ0FBQyxnQkFBZ0I7Z0JBQ3BDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlDLE1BQU07WUFDUixLQUFLLGdCQUFnQixDQUFDLGdCQUFnQjtnQkFDcEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDOUMsTUFBTTtZQUNSO2dCQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzFDLE1BQU07U0FDVDtJQUNILENBQUM7Ozs7SUFDTSxhQUFhOztjQUNaLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBTztRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDMUIsdUJBQXVCO1FBQ3ZCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7a0JBQ2pHLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUM7O2tCQUN2SCxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVM7Ozs7WUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUN2RCxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFO29CQUNuQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsU0FBUzs7OztvQkFDekUsQ0FBQyxDQUFDLEVBQUU7OzRCQUNFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQzt3QkFDZCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs0QkFDM0IsSUFBSSxDQUFDLE9BQU87Ozs7NEJBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRTtnQ0FDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUMvQixDQUFDLEVBQUMsQ0FBQzt5QkFDSjt3QkFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN0QixDQUFDOzs7O29CQUFFLEdBQUcsQ0FBQyxFQUFFO3dCQUNQLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzt3QkFDMUIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDdEIsQ0FBQyxFQUFDLENBQUE7aUJBQ0w7cUJBQU07b0JBQ0wsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHOzs7O29CQUFDLElBQUksQ0FBQyxFQUFFO3dCQUMvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQ25FLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUzs7OztvQkFBQyxJQUFJLENBQUMsRUFBRTt3QkFDbkIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7NEJBQzNCLElBQUksQ0FBQyxPQUFPOzs7OzRCQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUU7Z0NBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDL0IsQ0FBQyxFQUFDLENBQUM7eUJBQ0o7d0JBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDdEIsQ0FBQzs7OztvQkFBRSxHQUFHLENBQUMsRUFBRTt3QkFDUCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7d0JBQzFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3RCLENBQUMsRUFBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQzFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFDRCxPQUFPLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVNLG1CQUFtQixDQUFDLE1BQWM7O2NBQ2pDLFNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBZ0I7UUFDN0MsSUFBSSxNQUFNLEVBQUU7WUFDVixRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNsRCxHQUFHOzs7O1lBQUMsQ0FBQyxNQUFhLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDN0IsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxFQUFDLENBQ0gsRUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxFQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxFQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUN6QyxDQUFDLFNBQVM7Ozs7WUFBQyxDQUFDLEVBQVMsRUFBRSxFQUFFOztzQkFDbEIsUUFBUSxHQUFHLElBQUksWUFBWSxFQUFFO2dCQUNuQyxRQUFRLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUIsUUFBUSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsUUFBUSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTs7OztnQkFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssVUFBVSxFQUFDLENBQUM7Z0JBQzNFLFFBQVEsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixRQUFRLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsUUFBUSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO2dCQUNyQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUzs7OztnQkFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO29CQUNwQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMzQixDQUFDLEVBQUMsQ0FBQztZQUNMLENBQUMsRUFBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7O0lBRU0sMkJBQTJCO1FBQ2hDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFOztnQkFDbkQsR0FBRyxHQUFHLDhDQUE4Qzs7Z0JBQ3BELEtBQUssR0FBRyxtQkFBbUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixJQUFJO1lBQ3RGLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxHQUFHLElBQUksS0FBSyxDQUFDO1lBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7Ozs7SUFLRCxXQUFXLENBQUMsT0FBZSxFQUFFLFdBQXdCLEVBQUUsS0FBYTtRQUNsRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7O0lBS0QsYUFBYSxDQUFDLE9BQWU7UUFDM0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7Ozs7O0lBS0QsY0FBYyxDQUFDLE9BQWUsRUFBRSxPQUFPOztjQUMvQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7O2NBQzdCLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDOztjQUNyRSxPQUFPLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pELE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUMvRCxPQUFPLENBQUMsUUFBUSxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDOztjQUM3RCxZQUFZLEdBQUc7WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLG9DQUFvQyxDQUFDO1lBQ3RFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7WUFDdkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTTtZQUNoQyxXQUFXLEVBQUUsSUFBSTtTQUNsQjs7Y0FDSyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztRQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtZQUM1QyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxFQUFFLENBQUMsRUFBRTtZQUNyQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFFRCxlQUFlLENBQUMsT0FBbUIsRUFBRSxPQUFnQixFQUFFLEdBQVc7O2NBQzFELElBQUksR0FBRyxJQUFJLG1CQUFtQixFQUFFO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBRXpCLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7SUFNRCxhQUFhLENBQUMsT0FBZSxFQUFFLFNBQWlCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Ozs7OztJQUVELGFBQWEsQ0FBQyxPQUFrQixFQUFFLFdBQXdCOztjQUNsRCxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQzs7Y0FDeEUsT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNqRCxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztRQUN0RCxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2hILE9BQU8sQ0FBQyxRQUFRLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztRQUM1RSxPQUFPLENBQUMsUUFBUSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDcEUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDNUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUU7WUFDMUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDMUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUNqRTs7Y0FDSyxZQUFZLEdBQUc7WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDO1lBQzlELEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUc7WUFDdkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTTtZQUNoQyxXQUFXLEVBQUUsSUFBSTtTQUNsQjs7Y0FDSyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztRQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxFQUFPLEVBQUUsRUFBRTtZQUM1QyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDOztrQkFDcEMsUUFBUSxHQUFHLElBQUksV0FBVyxFQUFFO1lBQ2xDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQztZQUN0QyxRQUFRLENBQUMsT0FBTyxHQUFHO2dCQUNqQixLQUFLLEVBQUUsRUFBRSxDQUFDLFlBQVk7Z0JBQ3RCLE9BQU8sRUFBRSxFQUFFLENBQUMsZ0JBQWdCO2FBQzdCLENBQUM7WUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNuRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBQTtvQkFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLG1DQUFtQyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUk7aUJBQ2pKLEVBQWlCLENBQUMsQ0FBQztZQUN0QixDQUFDOzs7O1lBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQUE7b0JBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJO2lCQUM5SSxFQUFpQixDQUFDLENBQUM7WUFDdEIsQ0FBQyxFQUFDLENBQUM7WUFDSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUNwQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7O0lBTUQsYUFBYSxDQUFDLE9BQWUsRUFBRSxhQUE0QixFQUFFLE9BQU8sR0FBRyxJQUFJO1FBQ3pFLElBQUksT0FBTyxFQUFFOztrQkFDTCxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDbkMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsNEJBQTRCLENBQUM7OztnQkFBRSxHQUFHLEVBQUU7b0JBQ2xGLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxTQUFTOzs7O29CQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7d0JBQ3BFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFBOzRCQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUNBQWlDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSTt5QkFDL0ksRUFBaUIsQ0FBQyxDQUFDO3dCQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDMUYsQ0FBQzs7OztvQkFDQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTt3QkFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQUE7NEJBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSTt5QkFDdEcsRUFBaUIsQ0FBQyxDQUFDO3dCQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDM0YsQ0FBQyxFQUFDLENBQUM7Z0JBQ1AsQ0FBQyxFQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsU0FBUzs7OztnQkFBQyxDQUFDLElBQUksRUFBRSxFQUFFO29CQUNwRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBQTt3QkFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUk7cUJBQy9JLEVBQWlCLENBQUMsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzFGLENBQUM7Ozs7Z0JBQ0MsQ0FBQyxLQUF3QixFQUFFLEVBQUU7b0JBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFBO3dCQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUk7cUJBQ3RHLEVBQWlCLENBQUMsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNGLENBQUMsRUFBQyxDQUFDO2FBQ047U0FDRjtJQUNILENBQUM7Ozs7OztJQUVELDRCQUE0QixDQUFDLElBQVMsRUFBRSxXQUEwQjs7Y0FDMUQsR0FBRyxHQUFHLDRFQUE0RSxXQUFXLENBQUMsV0FBVyx5QkFBeUIsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqSixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDNUIsU0FBUzs7OztRQUFDLENBQUMsRUFBTyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGtEQUFrRCxDQUFDLENBQUMsQ0FBQztnQkFDakcsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakI7UUFDSCxDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxjQUFzQjtRQUM5QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7OztJQUdPLGVBQWUsQ0FBQyxNQUFhO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEdBQUcsRUFBRSxDQUFDO1FBQ3pDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxPQUFPOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JCLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxXQUFXLEVBQUU7OzBCQUM1QixzQkFBc0IsR0FBRyxDQUFDOzRCQUM5QixHQUFHLEVBQUUsWUFBWSxLQUFLLENBQUMsSUFBSSxFQUFFOzRCQUM3QixJQUFJLEVBQUUsWUFBWSxLQUFLLENBQUMsSUFBSSxFQUFFOzRCQUM5QixXQUFXLEVBQUUsWUFBWSxLQUFLLENBQUMsSUFBSSxFQUFFO3lCQUN0QyxFQUFFOzRCQUNELEdBQUcsRUFBRSxjQUFjLEtBQUssQ0FBQyxJQUFJLEVBQUU7NEJBQy9CLElBQUksRUFBRSxjQUFjLEtBQUssQ0FBQyxJQUFJLEVBQUU7NEJBQ2hDLFdBQVcsRUFBRSxjQUFjLEtBQUssQ0FBQyxJQUFJLEVBQUU7eUJBQ3hDLENBQUM7b0JBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2lCQUMxRztZQUNILENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7Ozs7SUFDTSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUk7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7OztJQUNNLFFBQVEsQ0FBQyxZQUFZLEVBQUUsSUFBSTtRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Ozs7SUFDRCxnQkFBZ0IsQ0FBQyxHQUFXO1FBQzFCLElBQUksR0FBRyxFQUFFOztrQkFDRCxHQUFHLEdBQUcsZ0RBQWdELEdBQUcsRUFBRTtZQUNqRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQzs7Ozs7O0lBQ0QseUJBQXlCLENBQUMsU0FBaUIsRUFBRSxNQUFXOztjQUNoRCx1QkFBdUIsR0FBRztZQUM5QixTQUFTLEVBQUUsU0FBUztZQUNwQixNQUFNLEVBQUUsTUFBTTtTQUNmOztjQUNLLEdBQUcsR0FBRyx5REFBeUQ7UUFDckUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7OztJQUNELHVCQUF1QixDQUFDLFNBQWlCOztjQUNqQyxHQUFHLEdBQUcsbUVBQW1FLFNBQVMsRUFBRTtRQUMxRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7OztZQW5YRixVQUFVOzs7O1lBbENGLHNCQUFzQjtZQUN0QiwwQkFBMEI7WUFZMUIsYUFBYTtZQVBiLGFBQWE7WUFDYixlQUFlO1lBSGYsb0JBQW9CO1lBQ3BCLHVCQUF1QjtZQVV2QixtQkFBbUI7WUFDbkIsbUJBQW1CO1lBQ25CLGlCQUFpQjtZQUNqQixzQkFBc0I7WUFLdEIscUJBQXFCO1lBRXJCLDhCQUE4QjtZQUc5Qix1QkFBdUI7WUFDdkIsdUJBQXVCO1lBbEJ2QixjQUFjO1lBWkYsUUFBUTtZQUFFLHdCQUF3QjtZQXNCOUMsV0FBVztZQUtYLGVBQWU7WUFLZixZQUFZOzs7O0lBT2pCLDJDQUFzQzs7Ozs7SUFDdEMsMkNBQTJDOzs7OztJQUMzQyx3Q0FBMkI7Ozs7O0lBQzNCLDBDQUE2Qjs7Ozs7SUFDN0IsMkNBQWdDOzs7OztJQUNoQywyQ0FBcUM7Ozs7O0lBQ3JDLDRDQUF5Qzs7Ozs7SUFDekMsOENBQXVDOzs7OztJQUN2QyxrREFBMkM7Ozs7O0lBQzNDLHFEQUE0Qzs7Ozs7SUFDNUMscURBQWlEOzs7OztJQUNqRCxvREFBK0M7Ozs7O0lBQy9DLHNEQUEwRDs7Ozs7SUFDMUQsMkRBQXdEOzs7OztJQUN4RCwyREFBd0Q7Ozs7O0lBQ3hELGdEQUFvQzs7Ozs7SUFDcEMsNENBQTBCOzs7OztJQUMxQiw0Q0FBMEM7Ozs7O0lBQzFDLHdDQUF5Qjs7Ozs7SUFDekIsNENBQWlDOzs7OztJQUNqQyw4Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lckRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vZG9tYWluL3Byb2Nlc3MtZGVzaWduZXIuZGF0YXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBmb3JrSm9pbiB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mb3JrSm9pbic7XHJcbmltcG9ydCB7IFByb2Nlc3NDbHJUeXBlSUQgfSBmcm9tICcuLi9tb2RlbC9wcm9jZXNzLWNscnR5cGVJZCc7XHJcbmltcG9ydCB7IEJwbW5Qcm9jZXNzVmlld01vZGVsIH0gZnJvbSAnLi9icG1uLXByb2Nlc3Mudmlld21vZGVsJztcclxuaW1wb3J0IHsgV0ZGbG93RWxlbWVudHNWaWV3TW9kZWwgfSBmcm9tICcuL3dmLWZsb3dFbGVtZW50cy52aWV3TW9kZWwnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlLCBOb3RpZnlPcHRpb25zIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZsb3dGb3JtSW5mbyB9IGZyb20gJy4uL2RvbWFpbi9lbnRpdGllcy9mbG93Zm9ybS1pbmZvJztcclxuaW1wb3J0IHsgb2YsIFN1YmplY3QsIGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgU2F2ZUFzRWRpdENvbXBvbmVudCB9IGZyb20gJy4uL3ZpZXdzL3NhdmUtYXMtZWRpdC9zYXZlLWFzLWVkaXQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUHJvY2Vzc0RlVXRpbCB9IGZyb20gJy4uL2RvbWFpbi9wcm9jZXNzLWRlLXV0aWwnO1xyXG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgU3ViUHJvY2Vzc1ZpZXdNb2RlbCB9IGZyb20gJy4vc3ViLXByb2Nlc3Mudmlld21vZGVsJztcclxuaW1wb3J0IHsgQXV0b0FjdGl2aXR5QWRhcHRlciB9IGZyb20gJy4vYXV0by1hY3Rpdml0eS5hZGFwdGVyJztcclxuaW1wb3J0IHsgQ2F0Y2hFdmVudEFkYXB0ZXIgfSBmcm9tICcuL2NhdGNoLWV2ZW50LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBNZXNzYWdlQWN0aXZpdHlBZGFwdGVyIH0gZnJvbSAnLi9tZXNzYWdlLWFjdGl2aXR5LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBBdWRpdEV2ZW50LCBBdWRpdFByb2Nlc3NEZWZJbmZvIH0gZnJvbSAnLi4vZG9tYWluL2VudGl0aWVzL2F1ZGl0LXByb2Nlc3NEZWYtaW5mbyc7XHJcbmltcG9ydCB7IFJUUHJvY2Vzc0luZm8gfSBmcm9tICcuLi9tb2RlbC9ydC1wcm9jZXNzLWluZm8nO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBQcm9jZXNzSW5mbyB9IGZyb20gJy4uL21vZGVsL3Byb2Nlc3MtaW5mbyc7XHJcbmltcG9ydCB7IE5vdGlmeUFjdGl2aXR5QWRhcHRlciB9IGZyb20gJy4vbm90aWZ5LWFjdGl2aXR5LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBGbG93Rm9ybUVudGl0eSB9IGZyb20gJy4uL2RvbWFpbi9lbnRpdGllcy9mbG93Zm9ybS5lbnRpdHknO1xyXG5pbXBvcnQgeyBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eUFkYXB0ZXIgfSBmcm9tICcuL2FpZi1jcmVhdGlvbi1iaWxsLWFjdGl2aXR5LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBFdmVudEJ1c1NlcnZpY2UgfSBmcm9tICcuLi92aWV3cy9zaGFyZWQvZXZlbnQtYnVzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSZWxlYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vdmlld3MvcmVsZWFzZS1jb21wb25lbnQvcmVsZWFzZS1jb21wb25lbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQmlsbE5vZGVBY3Rpdml0eUFkYXB0ZXIgfSBmcm9tICcuL2JpbGwtbm9kZS1hY3Rpdml0eS5hZGFwdGVyJztcclxuaW1wb3J0IHsgU2VxdWVuY2VBY3Rpdml0eUFkYXB0ZXIgfSBmcm9tICcuL3NlcXVlY25lLWFjdGl2aXR5LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWwgfSBmcm9tICdAZWRwLXBtZi9icG1uLW1vZGVsJztcclxuaW1wb3J0IHsgV2ZMb2NhbGVQaXBlIH0gZnJvbSAnLi4vaTE4bi9waXBlL3dmLXByb2Nlc3MtZWRpdG9yLWxvY2FsZS5waXBlJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0Rlc2lnbmVyVmlld01vZGVsIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlLFxyXG4gICAgcHJpdmF0ZSBzZXJ2aWNlOiBQcm9jZXNzRGVzaWduZXJEYXRhU2VydmljZSxcclxuICAgIHByaXZhdGUgdXRpbDogUHJvY2Vzc0RlVXRpbCxcclxuICAgIHByaXZhdGUgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtZXNzYWdlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHByb2Nlc3M6IEJwbW5Qcm9jZXNzVmlld01vZGVsLFxyXG4gICAgcHJpdmF0ZSBhY3Rpdml0eTogV0ZGbG93RWxlbWVudHNWaWV3TW9kZWwsXHJcbiAgICBwcml2YXRlIHN1YlByb2Nlc3M6IFN1YlByb2Nlc3NWaWV3TW9kZWwsXHJcbiAgICBwcml2YXRlIGF1dG9BY3RBZGFwdGVyOiBBdXRvQWN0aXZpdHlBZGFwdGVyLFxyXG4gICAgcHJpdmF0ZSBjYXRjaEV2ZW50QWRhcHRlcjogQ2F0Y2hFdmVudEFkYXB0ZXIsXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VBY3RBZGFwdGVyOiBNZXNzYWdlQWN0aXZpdHlBZGFwdGVyLFxyXG4gICAgcHJpdmF0ZSBub3RpZnlBY3RBZGFwdGVyOiBOb3RpZnlBY3Rpdml0eUFkYXB0ZXIsXHJcbiAgICBwcml2YXRlIGNyZWF0aW9uQWN0QWRhcHRlcjogQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlBZGFwdGVyLFxyXG4gICAgcHJpdmF0ZSBiaWxsTm9kZUFjdGl2aXR5QWRhcHRlcjogQmlsbE5vZGVBY3Rpdml0eUFkYXB0ZXIsXHJcbiAgICBwcml2YXRlIHNlcXVlbmNlQWN0aXZpdHlBZGFwdGVyOiBTZXF1ZW5jZUFjdGl2aXR5QWRhcHRlcixcclxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZSxcclxuICAgIHByaXZhdGUgZXZlbnRCdXM6IEV2ZW50QnVzU2VydmljZSxcclxuICAgIHByaXZhdGUgbG9jYWxlUGlwZTogV2ZMb2NhbGVQaXBlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICAvLyDliJ3lp4vliqDovb3mtYHnqIvlsZ7mgKdcclxuICBpbml0UHJvY2Vzc1Byb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICBjb25zdCBwcHREYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgIGNvbnN0IGZmSWQgPSBwcHREYXRhLkVudHJ5Rm9ybTtcclxuICAgIGlmIChmZklkKSB7XHJcbiAgICAgIHBwdERhdGEuRW50cnlGb3JtID0gdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mbG93Rm9ybTtcclxuICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5Q29uZmlnID0gdGhpcy5wcm9jZXNzLnNldFByb2Nlc3NDb25maWcob2JqLnByb3BlcnR5Q29uZmlnKTtcclxuICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5RGF0YSA9IHBwdERhdGE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlDb25maWcgPSB0aGlzLnByb2Nlc3Muc2V0UHJvY2Vzc0NvbmZpZyhvYmoucHJvcGVydHlDb25maWcpO1xyXG4gICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gcHB0RGF0YTtcclxuICAgIH1cclxuICB9XHJcbiAgc2V0UHJvcGVydHkob2JqOiBhbnkpIHtcclxuICAgIC8vIOabtOaWsOWxnuaAp+ahhuaVsOaNruS4jumFjee9rlxyXG4gICAgY29uc3QgcHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgIHN3aXRjaCAocHJvcGVydHlEYXRhLkNsclR5cGVJRCkge1xyXG4gICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQucHJvY2VzczpcclxuICAgICAgICB0aGlzLnByb2Nlc3Muc2V0UHJvY2Vzc1Byb3BlcnR5KG9iaik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC51c2VyQWN0aXZpdHk6XHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eS5zZXRVc2VyQWN0aXZpdHlQcm9wZXJ0eShvYmosICd1c2VyQWN0aXZpdHknKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELnN1YlByb2Nlc3M6XHJcbiAgICAgICAgdGhpcy5zdWJQcm9jZXNzLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC5hdXRvQWN0aXZpdHk6XHJcbiAgICAgICAgdGhpcy5hdXRvQWN0QWRhcHRlci5zZXRQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQuY2F0Y2hFdmVudDpcclxuICAgICAgICB0aGlzLmNhdGNoRXZlbnRBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC5vcGVyYXRpb25BY3Rpdml0eTpcclxuICAgICAgICB0aGlzLmFjdGl2aXR5LnNldFVzZXJBY3Rpdml0eVByb3BlcnR5KG9iaiwgJ2F1dG9BY3Rpdml0eScpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQubWVzc2FnZUFjdGl2aXR5OlxyXG4gICAgICAgIHRoaXMubWVzc2FnZUFjdEFkYXB0ZXIuc2V0UHJvcGVydHkob2JqKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELm5vdGlmeUFjdGl2aXR5OlxyXG4gICAgICAgIHRoaXMubm90aWZ5QWN0QWRhcHRlci5zZXRQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQuYWlmQ3JlYXRpb25CaWxsQWN0aXZpdHk6XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvbkFjdEFkYXB0ZXIuc2V0UHJvcGVydHkob2JqKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELmJpbGxOb2RlQWN0aXZpdHk6XHJcbiAgICAgICAgdGhpcy5iaWxsTm9kZUFjdGl2aXR5QWRhcHRlci5zZXRQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQuc2VxdWVuY2VBY3Rpdml0eTpcclxuICAgICAgICB0aGlzLnNlcXVlbmNlQWN0aXZpdHlBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eS5zZXRGbG93RWxlbWVudFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHB1YmxpYyB1cGRhdGVTY2hlbWFzKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCAkc2NoZW1hcyA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICAgIHRoaXMudWlTdGF0ZS5zY2hlbWFzID0gW107XHJcbiAgICAvLyDmo4Dmn6XmmK/lkKbmnInnsr7nroBiZe+8jOWmguaenOacieWImeimhuebluWOn+aciWJlXHJcbiAgICBpZiAodGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mb3JtYWxQYXJhbWV0ZXJzICYmIHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZm9ybWFsUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHNjaGVtYVBhcmFtcyA9IHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZm9ybWFsUGFyYW1ldGVycy5maWx0ZXIocCA9PiBwLmRhdGFUeXBlID09PSAnQ0RUU2NoZW1hJyAmJiBwLnNjaGVtYU1ldGFkYXRhSWQpO1xyXG4gICAgICBjb25zdCBiaXpEZWZLZXkgPSB0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZsb3dGb3JtLmlkO1xyXG4gICAgICB0aGlzLmdldEJlTWFwcGluZ0J5Qml6RGVmS2V5KGJpekRlZktleSkuc3Vic2NyaWJlKChyZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZSAmJiByZS5lbmFibGUpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0QnVzaW5lc3NFbnRpdHlieUlkKHJlLm5ld1NjaGVtYU1ldGFEYXRhSWQpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgZCA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IGRhdGEgPSBbZF07XHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goKGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnVpU3RhdGUuc2NoZW1hcy5wdXNoKGQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICRzY2hlbWFzLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy51aVN0YXRlLnNjaGVtYXMgPSBbXTtcclxuICAgICAgICAgICAgICAkc2NoZW1hcy5uZXh0KHRydWUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmb3JrSm9pbihzY2hlbWFQYXJhbXMubWFwKHBhcmEgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmdldEJ1c2luZXNzRW50aXR5YnlJZChwYXJhLnNjaGVtYU1ldGFkYXRhSWQpO1xyXG4gICAgICAgICAgfSkpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKChkOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5zY2hlbWFzLnB1c2goZCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjaGVtYXMubmV4dCh0cnVlKTtcclxuICAgICAgICAgIH0sIGVyciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5zY2hlbWFzID0gW107XHJcbiAgICAgICAgICAgICRzY2hlbWFzLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy51aVN0YXRlLnNjaGVtYXMgPSBbXTtcclxuICAgICAgJHNjaGVtYXMubmV4dCh0cnVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiAkc2NoZW1hcy5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRGbG93Rm9ybUluZm9CeUlkKGZvcm1JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxGbG93Rm9ybUluZm8+IHtcclxuICAgIGNvbnN0ICRmbG93Zm9ybSA9IG5ldyBTdWJqZWN0PEZsb3dGb3JtSW5mbz4oKTtcclxuICAgIGlmIChmb3JtSWQpIHtcclxuICAgICAgZm9ya0pvaW4odGhpcy5zZXJ2aWNlLkdldEZsb3dGb3JtYnlJZChmb3JtSWQpLFxyXG4gICAgICAgIHRoaXMuc2VydmljZS5nZXRQYXJhbWV0ZXJzYnlGbG93Rm9ybUtleShmb3JtSWQpLnBpcGUoXHJcbiAgICAgICAgICBtYXAoKHBhcmFtczogYW55W10pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRGb3JtUGFyYW1DeHQocGFyYW1zKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKSxcclxuICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Q29tcG9uZW50c2J5Rmxvd2Zvcm1rZXkoZm9ybUlkKSxcclxuICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0RXhlY3V0ZUZvcm1ieUZsb3dGb3JtS2V5KGZvcm1JZCksXHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlLmdldEJpekFjdGl2aXRpZXMoZm9ybUlkKSxcclxuICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Q3VzdG9taXplQWN0aW9ucyhmb3JtSWQpXHJcbiAgICAgICkuc3Vic2NyaWJlKChyZTogYW55W10pID0+IHtcclxuICAgICAgICBjb25zdCBmbG93Zm9ybSA9IG5ldyBGbG93Rm9ybUluZm8oKTtcclxuICAgICAgICBmbG93Zm9ybS5mbG93Rm9ybSA9IHJlWzBdO1xyXG4gICAgICAgIGZsb3dmb3JtLmZvcm1hbFBhcmFtZXRlcnMgPSByZVsxXTtcclxuICAgICAgICBmbG93Zm9ybS5iaXpDb21wb25lbnRzID0gcmVbMl0uZmlsdGVyKGNtcCA9PiBjbXAub3duZXJUeXBlICE9PSAnQWN0aXZpdHknKTtcclxuICAgICAgICBmbG93Zm9ybS5leGN1dGVGb3JtcyA9IHJlWzNdO1xyXG4gICAgICAgIGZsb3dmb3JtLmJpekFjdGl2aXRpZXMgPSByZVs0XTtcclxuICAgICAgICBmbG93Zm9ybS5jdXN0b21pemVBY3Rpb25zID0gcmVbNV07XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mbyA9IGZsb3dmb3JtO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2NoZW1hcygpLnN1YnNjcmliZSgocmUpID0+IHtcclxuICAgICAgICAgICRmbG93Zm9ybS5uZXh0KGZsb3dmb3JtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJGZsb3dmb3JtLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZvcm1Gb3JtYXRzQnlCaXpDYXRlZ29yeSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm0uYnVzaW5lc3NPYmplY3RJZCkge1xyXG4gICAgICBsZXQgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL2Zvcm1Gb3JtYXQvcXVlcnk/cGFyYW09YDtcclxuICAgICAgbGV0IHBhcmFtID0gYHtcImJpekNhdGVnb3J5XCI6XCIke3RoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm0uYnVzaW5lc3NPYmplY3RJZH1cIn1gO1xyXG4gICAgICBwYXJhbSA9IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbSk7XHJcbiAgICAgIHVybCArPSBwYXJhbTtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmcm9tKG5ldyBBcnJheSgpKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5L+d5a2Y5rWB56iLXHJcbiAgICogQHBhcmFtIGNvbnRlbnQg5rWB56iL5LiK5LiL5paHXHJcbiAgICovXHJcbiAgc2F2ZVByb2Nlc3MoY29udGVudDogc3RyaW5nLCBwcm9jZXNzSW5mbzogUHJvY2Vzc0luZm8sIHN0YXRlOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5zYXZlUHJvY2Vzcyhjb250ZW50LCBwcm9jZXNzSW5mbywgc3RhdGUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlj5HluIPmtYHnqItcclxuICAgKiBAcGFyYW0gY29udGVudCDmtYHnqIvkuIrkuIvmlodcclxuICAgKi9cclxuICBkZXBsb3lQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmRlcGxveVByb2Nlc3MoY29udGVudCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOW4puWuoeaguOeahOWPkeW4g+a1geeoi1xyXG4gICAqIEBwYXJhbSBjb250ZW50IOa1geeoi+S4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHJlbGVhc2VQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZywgdmVyc2lvbikge1xyXG4gICAgY29uc3QgcHJvY2VzcyA9IEpTT04ucGFyc2UoY29udGVudCk7XHJcbiAgICBjb25zdCBjb21wRmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoUmVsZWFzZUNvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjb21wUmVmID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5wcm9jTmFtZSA9IHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuTmFtZTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UucHJvY1ZlcnNpb24gPSB2ZXJzaW9uID09PSAxID8gMSA6IHZlcnNpb24gKyAxO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5wcm9jZXNzRGVmaW5pdGlvbktleSA9IHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuS2V5O1xyXG4gICAgY29uc3QgbW9kYWxPcHRpb25zID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci5yZWxlYXNlUHJvY2VzcycpLFxyXG4gICAgICB3aWR0aDogNTAwLCBoZWlnaHQ6IDU1MCxcclxuICAgICAgYnV0dG9uczogY29tcFJlZi5pbnN0YW5jZS5idG5SZWYsXHJcbiAgICAgIHNob3dCdXR0b25zOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZGxnID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wUmVmLCBtb2RhbE9wdGlvbnMpO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5zdWJtaXQuc3Vic2NyaWJlKChyZTogYW55KSA9PiB7XHJcbiAgICAgIGRsZy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmNhbmNlbC5zdWJzY3JpYmUocmUgPT4ge1xyXG4gICAgICBkbGcuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXVkaXRQcm9jZXNzRGVmKGF1ZGl0SWQ6IEF1ZGl0RXZlbnQsIHN1Y2Nlc3M6IGJvb2xlYW4sIGtleTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBpbmZvID0gbmV3IEF1ZGl0UHJvY2Vzc0RlZkluZm8oKTtcclxuICAgIGluZm8uYXVkaXRJZCA9IGF1ZGl0SWQ7XHJcbiAgICBpbmZvLnN1Y2Nlc3MgPSBzdWNjZXNzO1xyXG4gICAgaW5mby5wcm9jZXNzRGVmS2V5ID0ga2V5O1xyXG5cclxuICAgIHRoaXMuc2VydmljZS5hdWRpdFByb2Nlc3NEZWYoaW5mbyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkv53lrZjov5DooYzml7bmtYHnqItcclxuICAgKiBAcGFyYW0gY29udGVudCDmtYHnqIvkuIrkuIvmlodcclxuICAgKi9cclxuICBzYXZlUlRQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZywgcHJvY0RlZklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5zYXZlUlRQcm9jZXNzKGNvbnRlbnQsIHByb2NEZWZJZCk7XHJcbiAgfVxyXG5cclxuICBzYXZlQXNQcm9jZXNzKHByb2Nlc3M6IEJwbW5Nb2RlbCwgcHJvY2Vzc0luZm86IFByb2Nlc3NJbmZvKSB7XHJcbiAgICBjb25zdCBjb21wRmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoU2F2ZUFzRWRpdENvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjb21wUmVmID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5wcm9jS2V5ID0gcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5LZXk7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLnByb2NOYW1lID0gcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5OYW1lICsgdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci5jb3B5Jyk7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmlzQWRtaW5pc3RyYXRvckNvbmZpZyA9IHRoaXMudWlTdGF0ZS5pc0FkbWluaXN0cmF0b3JDb25maWc7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmVuYWJsZUFkbWluT3JnQXV0ID0gdGhpcy51aVN0YXRlLmVuYWJsZUFkbWluT3JnQXV0O1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5hZG1pbmlzdHJhdG9yID0gdGhpcy51aVN0YXRlLmFkbWluaXN0cmF0b3I7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmFjY2Vzc0xldmVsID0gcHJvY2Vzc0luZm8uYWNjZXNzTGV2ZWw7XHJcbiAgICBpZiAoIXRoaXMudWlTdGF0ZS5lbmFibGVBZG1pbk9yZ0F1dCAmJiAhdGhpcy51aVN0YXRlLmlzQWRtaW5pc3RyYXRvckNvbmZpZykge1xyXG4gICAgICBjb21wUmVmLmluc3RhbmNlLm9yZ2FuaXphdGlvbiA9IHByb2Nlc3NJbmZvLnByb2NPcmcub3JnSWQ7XHJcbiAgICAgIGNvbXBSZWYuaW5zdGFuY2Uub3JnYW5pemF0aW9uTmFtZSA9IHByb2Nlc3NJbmZvLnByb2NPcmcub3JnTmFtZTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1vZGFsT3B0aW9ucyA9IHtcclxuICAgICAgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2FwcC5wcm9jZXNzRGVzaWduZXIuc2F2ZUFzJyksXHJcbiAgICAgIHdpZHRoOiA0NTAsIGhlaWdodDogNDAwLFxyXG4gICAgICBidXR0b25zOiBjb21wUmVmLmluc3RhbmNlLmJ0blJlZixcclxuICAgICAgc2hvd0J1dHRvbnM6IHRydWVcclxuICAgIH07XHJcbiAgICBjb25zdCBkbGcgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNvbXBSZWYsIG1vZGFsT3B0aW9ucyk7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLnN1Ym1pdC5zdWJzY3JpYmUoKHJlOiBhbnkpID0+IHtcclxuICAgICAgcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5OYW1lID0gcmUucHJvY05hbWU7XHJcbiAgICAgIGNvbnN0IHByb2NJbmZvID0gbmV3IFByb2Nlc3NJbmZvKCk7XHJcbiAgICAgIHByb2NJbmZvLmFjY2Vzc0xldmVsID0gcmUuYWNjZXNzTGV2ZWw7XHJcbiAgICAgIHByb2NJbmZvLnByb2NPcmcgPSB7XHJcbiAgICAgICAgb3JnSWQ6IHJlLm9yZ2FuaXphdGlvbixcclxuICAgICAgICBvcmdOYW1lOiByZS5vcmdhbml6YXRpb25OYW1lXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuc2F2ZVByb2Nlc3MocHJvY2Vzcy5Db252ZXJ0VG9Kc29uKCksIHByb2NJbmZvLCAxKS5zdWJzY3JpYmUociA9PiB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkuc3VjY2Vzcyh7XHJcbiAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci50aXBzJyksIG1zZzogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci5zYXZlQXNTdWNjZXNzJyksIHRpbWVvdXQ6IDMwMDBcclxuICAgICAgICB9IGFzIE5vdGlmeU9wdGlvbnMpO1xyXG4gICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHtcclxuICAgICAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdhcHAucHJvY2Vzc0Rlc2lnbmVyLnRpcHMnKSwgbXNnOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdhcHAucHJvY2Vzc0Rlc2lnbmVyLnNhdmVBc0ZhaWwnKSwgdGltZW91dDogMzAwMFxyXG4gICAgICAgIH0gYXMgTm90aWZ5T3B0aW9ucyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBkbGcuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5jYW5jZWwuc3Vic2NyaWJlKHIgPT4ge1xyXG4gICAgICBkbGcuY2xvc2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOWQjOatpeiuvuiuoeWZqOaXtua1geeoi+WumuS5iVxyXG4gICAqL1xyXG4gIHN5bmNEdFByb2Nlc3MoY29udGVudDogc3RyaW5nLCBydFByb2Nlc3NJbmZvOiBSVFByb2Nlc3NJbmZvLCBzaG93VGlwID0gdHJ1ZSkge1xyXG4gICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgY29uc3QgcHJvY2VzcyA9IEpTT04ucGFyc2UoY29udGVudCk7XHJcbiAgICAgIGlmIChzaG93VGlwKSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlLnF1ZXN0aW9uKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2FwcC5wcm9jZXNzRGVzaWduZXIuc3luY0R0JyksICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuc2VydmljZS5zeW5jRHRQcm9jZXNzKGNvbnRlbnQsIHJ0UHJvY2Vzc0luZm8pLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci50aXBzJyksIG1zZzogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci5zeW5jU3VjY2VzcycpLCB0aW1lb3V0OiAzMDAwXHJcbiAgICAgICAgICAgIH0gYXMgTm90aWZ5T3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaXRQcm9jZXNzRGVmKEF1ZGl0RXZlbnQuV0ZfUHJvY2Vzc0RlZl9TeW5jRFQsIHRydWUsIHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuS2V5KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLm5vdGlmeS5lcnJvcih7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybSgnYXBwLnByb2Nlc3NEZXNpZ25lci50aXBzJyksIG1zZzogZXJyb3IuZXJyb3IuTWVzc2FnZSwgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgICAgIH0gYXMgTm90aWZ5T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgdGhpcy5hdWRpdFByb2Nlc3NEZWYoQXVkaXRFdmVudC5XRl9Qcm9jZXNzRGVmX1N5bmNEVCwgZmFsc2UsIHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuS2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlLnN5bmNEdFByb2Nlc3MoY29udGVudCwgcnRQcm9jZXNzSW5mbykuc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHtcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2FwcC5wcm9jZXNzRGVzaWduZXIudGlwcycpLCBtc2c6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2FwcC5wcm9jZXNzRGVzaWduZXIuc3luY1N1Y2Nlc3MnKSwgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICAgIHRoaXMuYXVkaXRQcm9jZXNzRGVmKEF1ZGl0RXZlbnQuV0ZfUHJvY2Vzc0RlZl9TeW5jRFQsIHRydWUsIHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuS2V5KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgICAgKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5lcnJvcih7XHJcbiAgICAgICAgICAgICAgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oJ2FwcC5wcm9jZXNzRGVzaWduZXIudGlwcycpLCBtc2c6IGVycm9yLmVycm9yLk1lc3NhZ2UsIHRpbWVvdXQ6IDMwMDBcclxuICAgICAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5hdWRpdFByb2Nlc3NEZWYoQXVkaXRFdmVudC5XRl9Qcm9jZXNzRGVmX1N5bmNEVCwgZmFsc2UsIHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuS2V5KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBiZWZvcmVDb21wbGV0ZVN0cmF0ZWd5Q2hhbmdlKGRhdGE6IGFueSwgcHJvY2Vzc0luZm86IFJUUHJvY2Vzc0luZm8pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9wcm9jZXNzSW5zdGFuY2VzL3J1bnRpbWVBY3Rpdml0eUluc3RhbmNlcz9wcm9jRGVmSWQ9JHtwcm9jZXNzSW5mby5ydFByb2NEZWZJZH0mYWN0aXZpdHlEZWZpbml0aW9uSWQ9JHtkYXRhLklkfWA7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgocmU6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChyZSAmJiByZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2UuaW5mbyh0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKCdhcHAucHJvY2Vzc0Rlc2lnbmVyLmJlZm9yZUNvbXBsZXRlU3RyYXRlZ3lDaGFuZ2UnKSk7XHJcbiAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQcm9jZXNzQ2F0ZWdvcnkocHJvY0NhdGVnb3J5SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Rmxvd0Zvcm1FbnRpdHk+IHtcclxuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuR2V0Rmxvd0Zvcm1ieUlkKHByb2NDYXRlZ29yeUlkKTtcclxuICB9XHJcblxyXG5cclxuICBwcml2YXRlIHNldEZvcm1QYXJhbUN4dChwYXJhbXM6IGFueVtdKSB7XHJcbiAgICB0aGlzLnVpU3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dCA9IFtdO1xyXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBwYXJhbXMuZm9yRWFjaChwYXJhbSA9PiB7XHJcbiAgICAgICAgaWYgKHBhcmFtLmRhdGFUeXBlID09PSAnQ0RUU2NoZW1hJykge1xyXG4gICAgICAgICAgY29uc3QgZm9ybWFsUGFyYW1ldGVyQ29udGV4dCA9IFt7XHJcbiAgICAgICAgICAgIGtleTogYHNjaGVtYUlkXyR7cGFyYW0uY29kZX1gLFxyXG4gICAgICAgICAgICBuYW1lOiBgc2NoZW1hSWRfJHtwYXJhbS5uYW1lfWAsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgc2NoZW1hSWRfJHtwYXJhbS5uYW1lfWBcclxuICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAga2V5OiBgbWV0YWRhdGFJZF8ke3BhcmFtLmNvZGV9YCxcclxuICAgICAgICAgICAgbmFtZTogYG1ldGFkYXRhSWRfJHtwYXJhbS5uYW1lfWAsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgbWV0YWRhdGFJZF8ke3BhcmFtLm5hbWV9YFxyXG4gICAgICAgICAgfV07XHJcbiAgICAgICAgICB0aGlzLnVpU3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dCA9IHRoaXMudWlTdGF0ZS5mb3JtYWxQYXJhbWV0ZXJDb250ZXh0LmNvbmNhdChmb3JtYWxQYXJhbWV0ZXJDb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBwdWJsaWMgY29weShSZXNvdXJjZUtleXMsIGRhdGEpIHtcclxuICAgIHRoaXMuZXZlbnRCdXMuZW1pdChSZXNvdXJjZUtleXMsIGRhdGEpO1xyXG4gIH1cclxuICBwdWJsaWMgYmF0Y2hTZXQoUmVzb3VyY2VLZXlzLCBkYXRhKSB7XHJcbiAgICB0aGlzLmV2ZW50QnVzLmVtaXQoUmVzb3VyY2VLZXlzLCBkYXRhKTtcclxuICB9XHJcbiAgZ2V0UHJvY0RlZnNCeUtleShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAoa2V5KSB7XHJcbiAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9wcm9jRGVmcy9rZXk/cHJvY0RlZktleT0ke2tleX1gO1xyXG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgfVxyXG4gIH1cclxuICBjaGVja0V4cHJlc3Npb25zQnlQYXlsb2FkKGJpekRlZktleTogc3RyaW5nLCBzY2hlbWE6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBjaGVja0V4cHJlc3Npb25zUGF5bG9hZCA9IHtcclxuICAgICAgYml6RGVmS2V5OiBiaXpEZWZLZXksXHJcbiAgICAgIHNjaGVtYTogc2NoZW1hXHJcbiAgICB9O1xyXG4gICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL2Zsb3dGb3JtL2NoZWNrRXhwcmVzc2lvbnNCeVBheWxvYWRgO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgY2hlY2tFeHByZXNzaW9uc1BheWxvYWQpO1xyXG4gIH1cclxuICBnZXRCZU1hcHBpbmdCeUJpekRlZktleShiaXpEZWZLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvZmxvd0Zvcm0vZ2V0QmVNYXBwaW5nQnlCaXpEZWZLZXk/Yml6RGVmS2V5PSR7Yml6RGVmS2V5fWA7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gIH1cclxufVxyXG4iXX0=