/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ProcessListHelpComponent } from '../views/aif-process-list-help/components/process-list-help/process-list-help.component';
import { AifCreationBillProcessConverter } from '../views/aif-process-list-help/AifCreationBillProcessConverter';
import { SequenceFlowPropertyKeys } from '../designer/wf-cell/property-keys/SequenceFlowPropertyKeys';
import { AifLocalePipe } from '../views/aif-ui-common/pipe/aif-ui-common-locale.pipe';
export class SequenceActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localePipe
     */
    constructor(uiState, localePipe) {
        this.uiState = uiState;
        this.localePipe = localePipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case SequenceFlowPropertyKeys.billCreationType:
                        item.iterator = billCreationTypeKeyMap;
                        break;
                    case SequenceFlowPropertyKeys.billRelationType:
                        item.iterator = billRelationTypeKeyMap;
                        break;
                    case SequenceFlowPropertyKeys.aifAutoProcessCode:
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localePipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case SequenceFlowPropertyKeys.aifPushProcessCode:
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localePipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case SequenceFlowPropertyKeys.aifPullProcessCode:
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localePipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
SequenceActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SequenceActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: AifLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SequenceActivityAdapter.prototype.uiState;
    /** @type {?} */
    SequenceActivityAdapter.prototype.localePipe;
}
/** @type {?} */
export const billCreationTypeKeyMap = [
    { key: "AUTO", value: "自动生单" },
    { key: "PUSH", value: "推式生单" },
    { key: "PULL", value: "拉式生单" },
];
/** @type {?} */
export const billRelationTypeKeyMap = [
    { key: "CREATION", value: "通过生单流程生成目标单" },
];
//# sourceMappingURL=data:application/json;base64,