/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ProcessDesignerUIState } from './process-designer.uistate';
import { Injectable, Injector } from '@angular/core';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { EventDefinitionComponent, EventDefinitionConverter } from '../views/event-definition/event-definition.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { IntermediateCatchEventImplPropertyKeys } from '../designer/wf-cell/property-keys/IntermediateCatchEventImplPropertyKeys';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
export class CatchEventAdapter {
    /**
     * @param {?} uiState
     * @param {?} injector
     * @param {?} localPipe
     */
    constructor(uiState, injector, localPipe) {
        this.uiState = uiState;
        this.injector = injector;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case IntermediateCatchEventImplPropertyKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case IntermediateCatchEventImplPropertyKeys.EventDefinitions:
                        item.editor = EventDefinitionComponent;
                        item.converter = new EventDefinitionConverter(this.localPipe);
                        break;
                    case IntermediateCatchEventImplPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
CatchEventAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CatchEventAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: Injector },
    { type: WfLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0Y2gtZXZlbnQuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYXBwL2NhdGNoLWV2ZW50LmFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQzlHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFILE9BQU8sRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFILE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLDBFQUEwRSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUkxRSxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7SUFDMUIsWUFDWSxPQUErQixFQUMvQixRQUFrQixFQUNsQixTQUF1QjtRQUZ2QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUMvQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGNBQVMsR0FBVCxTQUFTLENBQWM7SUFDL0IsQ0FBQzs7Ozs7SUFDTCxXQUFXLENBQUMsR0FBUTtRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7OztJQUVPLFNBQVMsQ0FBQyxHQUFVOztjQUNsQixjQUFjLEdBQTRCLEVBQUU7UUFDbEQsSUFBSSxHQUFHLEVBQUU7WUFDTCxHQUFHLENBQUMsT0FBTzs7OztZQUFDLENBQUMsT0FBOEIsRUFBRSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbkMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqQyxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBQ08sU0FBUyxDQUFDLEdBQXFCO1FBQ25DLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxJQUFvQixFQUFFLEVBQUU7Z0JBQ2pDLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDckIsS0FBSyxzQ0FBc0MsQ0FBQyxZQUFZO3dCQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDO3dCQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUMzRCxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixRQUFRLEVBQUUsd0JBQXdCO3lCQUNyQyxDQUFDO3dCQUNGLE1BQU07b0JBQ1YsS0FBSyxzQ0FBc0MsQ0FBQyxnQkFBZ0I7d0JBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzlELE1BQU07b0JBQ1YsS0FBSyxzQ0FBc0MsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPO3dCQUNqRSxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUF3QixDQUFDO3dCQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUM5RCxNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7O1lBL0NKLFVBQVU7Ozs7WUFURixzQkFBc0I7WUFDVixRQUFRO1lBTXBCLFlBQVk7Ozs7Ozs7SUFNYixvQ0FBdUM7Ozs7O0lBQ3ZDLHFDQUEwQjs7Ozs7SUFDMUIsc0NBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4vcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJ0BmYXJyaXMvaWRlLXByb3BlcnR5LXBhbmVsJztcclxuaW1wb3J0IHsgQmFja3dhcmRSdWxlQ29tcG9uZW50LCBCYWNrd2FyZFJ1bGVDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9iYWNrd2FyZC1ydWxlL2JhY2t3YXJkLXJ1bGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRXZlbnREZWZpbml0aW9uQ29tcG9uZW50LCBFdmVudERlZmluaXRpb25Db252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9ldmVudC1kZWZpbml0aW9uL2V2ZW50LWRlZmluaXRpb24uY29tcG9uZW50JztcclxuaW1wb3J0IHsgVmFyaWFibGVTZXR0aW5nQ29tcG9uZW50LCBWYXJpYWJsZVNldHRpbmdDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy92YXJpYWJsZS1zZXR0aW5nL3ZhcmlhYmxlLXNldHRpbmcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgSW50ZXJtZWRpYXRlQ2F0Y2hFdmVudEltcGxQcm9wZXJ0eUtleXMgfSBmcm9tICcuLi9kZXNpZ25lci93Zi1jZWxsL3Byb3BlcnR5LWtleXMvSW50ZXJtZWRpYXRlQ2F0Y2hFdmVudEltcGxQcm9wZXJ0eUtleXMnO1xyXG5pbXBvcnQgeyBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5cclxuZXhwb3J0IGNsYXNzIENhdGNoRXZlbnRBZGFwdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgdWlTdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIGxvY2FsUGlwZTogV2ZMb2NhbGVQaXBlXHJcbiAgICApIHsgfVxyXG4gICAgc2V0UHJvcGVydHkob2JqOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlDb25maWcgPSB0aGlzLnNldENvbmZpZyhvYmoucHJvcGVydHlDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q29uZmlnKG9iajogYW55W10pOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlDb25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdID0gW107XHJcbiAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoZWxlbWVudDogRWxlbWVudFByb3BlcnR5Q29uZmlnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVudGl0eShlbGVtZW50LnByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb25maWcucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUNvbmZpZztcclxuICAgIH1cclxuICAgIHByaXZhdGUgc2V0RW50aXR5KG9iajogUHJvcGVydHlFbnRpdHlbXSkge1xyXG4gICAgICAgIGlmIChvYmogJiYgb2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgb2JqLmZvckVhY2goKGl0ZW06IFByb3BlcnR5RW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydHlJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW50ZXJtZWRpYXRlQ2F0Y2hFdmVudEltcGxQcm9wZXJ0eUtleXMuQmFja1dhcmRSdWxlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IEJhY2t3YXJkUnVsZUNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgQmFja3dhcmRSdWxlQ29udmVydGVyKHRoaXMubG9jYWxQaXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVHlwZTogJ0NhbGxBY3Rpdml0eVN1YlByb2Nlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW50ZXJtZWRpYXRlQ2F0Y2hFdmVudEltcGxQcm9wZXJ0eUtleXMuRXZlbnREZWZpbml0aW9uczpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBFdmVudERlZmluaXRpb25Db21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IEV2ZW50RGVmaW5pdGlvbkNvbnZlcnRlcih0aGlzLmxvY2FsUGlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW50ZXJtZWRpYXRlQ2F0Y2hFdmVudEltcGxQcm9wZXJ0eUtleXMudmFyaWFibGVTZXR0aW5nczogLy8g5Y+Y6YeP6K6+572uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gVmFyaWFibGVTZXR0aW5nQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBWYXJpYWJsZVNldHRpbmdDb252ZXJ0ZXIodGhpcy5sb2NhbFBpcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==