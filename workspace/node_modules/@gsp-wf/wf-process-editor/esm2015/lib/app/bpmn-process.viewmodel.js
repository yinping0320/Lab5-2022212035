/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { EntryFormEditorComponent, FlowFormConverter } from '../views/entryForm/entry-form-editor.component';
import { ActivityComponentComponent, ActivityComponentConverter } from '../views/activity-component/activity-component.component';
import { ExecuteFormsComponent, ExecuteFormsConverter } from '../views/execute-forms/execute-forms.component';
import { TitleExpressionComponent, TitleExpressionConverter } from '../views/title-expression/title-expression.component';
import { CustomizeActionComponent, CustomizeActionConverter } from '../views/customize-action/customize-action.component';
import { ProcessVariablesComponent, ProcessVariablesConverter } from '../views/process-variables/process-variables.component';
import { TimeLimitControlComponent, TimeLimitControlConverter } from '../views/time-limit-control/time-limit-control.component';
import { MessageNoticeComponent, MessageNoticeConverter } from '../views/message-notice/message-notice.component';
import { ExtendPropertyComponent, ExtendPropertyConverter } from '../views/extend-property/extend-property.component';
import { ImageSetComponent, ImageSetConverter } from '../views/image-set/image-set.component';
import { StartConditionComponent, StartConditionConverter } from '../views/start-condition/start-condition.component';
import { ProcessPropertyKeys } from '../designer/wf-cell/property-keys/ProcessPropertyKeys';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
export class BpmnProcessViewModel {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProcessProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.ProcessVariables = this.uiState.propertyData[ProcessPropertyKeys.processVariables];
        this.uiState.propertyConfig = this.setProcessConfig(obj.propertyConfig);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProcessConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setProcessEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setProcessEntity(obj) {
        if (obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case ProcessPropertyKeys.Key: // 标识
                        break;
                    case ProcessPropertyKeys.EntryForm: // 流程分类
                        item.editor = EntryFormEditorComponent;
                        item.converter = new FlowFormConverter();
                        // item.editorParams = {
                        //     flowForms: [this.uiState.flowFormInfo.flowForm]
                        // };
                        break;
                    case ProcessPropertyKeys.wf_Component:
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter(this.localPipe);
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ProcessPropertyKeys.wf_ExecuteForms_PC:
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const params = {
                            location: 'process',
                            tab: 'web'
                        };
                        item.converter = new ExecuteFormsConverter(params, this.localPipe);
                        item.editorParams = params;
                        break;
                    case ProcessPropertyKeys.wf_ExecuteForms_Mobile:
                        item.editor = ExecuteFormsComponent;
                        /** @type {?} */
                        const editorParams = {
                            location: 'process',
                            tab: 'mobile'
                        };
                        item.converter = new ExecuteFormsConverter(editorParams, this.localPipe);
                        item.editorParams = editorParams;
                        break;
                    case ProcessPropertyKeys.wf_TitleExpression:
                        item.editor = TitleExpressionComponent;
                        item.converter = new TitleExpressionConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.allowPreAssign:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ProcessPropertyKeys.enablePriority:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ProcessPropertyKeys.enableWholeOrderRetrieve:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ProcessPropertyKeys.startMode:
                        item.iterator = this.uiState.startModeIterator;
                        break;
                    case ProcessPropertyKeys.DisplayTerminal:
                        item.iterator = this.uiState.displayTerminal;
                        break;
                    case ProcessPropertyKeys.wf_CustomizeAction:
                        item.editor = CustomizeActionComponent;
                        item.converter = new CustomizeActionConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.processVariables:
                        item.editor = ProcessVariablesComponent;
                        item.converter = new ProcessVariablesConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.timeLimitControl:
                        item.editor = TimeLimitControlComponent;
                        item.converter = new TimeLimitControlConverter(this.localPipe);
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ProcessPropertyKeys.messageNotice:
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter(this.localPipe);
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ProcessPropertyKeys.imageSettings:
                        item.editor = ImageSetComponent;
                        item.converter = new ImageSetConverter(this.localPipe);
                        break;
                    case ProcessPropertyKeys.StartCondition:
                        item.editor = StartConditionComponent;
                        item.editorParams = {};
                        item.converter = new StartConditionConverter();
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter(this.localPipe);
                        break;
                }
            }));
        }
    }
}
BpmnProcessViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BpmnProcessViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BpmnProcessViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    BpmnProcessViewModel.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,