/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { CallActivitySubProcess2Component, CallActivitySubProcess2Converter } from '../views/call-activity-sub-process2/call-activity-sub-process2.component';
import { CallActivitySubProcessPropertyKeys } from '../designer/wf-cell/property-keys/CallActivitySubProcessPropertyKeys';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
import { MultiInstanceLoopCharacteristicsComponent, MultiInstanceLoopCharacteristicsConverter } from '../views/multi-instance-loop-characteristics/multi-instance-loop-characteristics.component';
export class SubProcessViewModel {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case CallActivitySubProcessPropertyKeys.callActivitySubProcess: // 参与者
                        // item.editor = CallActivitySubProcessComponent;
                        // item.converter = new CallActivitySubProcessConverter();
                        item.editor = CallActivitySubProcess2Component;
                        item.converter = new CallActivitySubProcess2Converter(this.localPipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId,
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter(this.localPipe);
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics:
                        item.editor = MultiInstanceLoopCharacteristicsComponent;
                        item.converter = new MultiInstanceLoopCharacteristicsConverter(this.localPipe);
                        item.editorParams = {
                            location: 'CallActivitySubProcess'
                        };
                        break;
                    case CallActivitySubProcessPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
SubProcessViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubProcessViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SubProcessViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    SubProcessViewModel.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,