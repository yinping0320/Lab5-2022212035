/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { VoConfigComponent, VoConfigConverter } from '../views/vo-config/vo-config.component';
import { WfOptionsComponent, WfOptionsConverter } from '../views/wf-options/wf-options.component';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
export class BillNodeActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case "VoConfig":
                        item.converter = new VoConfigConverter(this.localPipe);
                        item.editor = VoConfigComponent;
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case "WfOpts":
                        item.converter = new WfOptionsConverter(this.localPipe);
                        item.editor = WfOptionsComponent;
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    case "wfConfig": //启用工作流
                        item.iterator = this.uiState.boolIterator;
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
BillNodeActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BillNodeActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BillNodeActivityAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    BillNodeActivityAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC1ub2RlLWFjdGl2aXR5LmFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9iaWxsLW5vZGUtYWN0aXZpdHkuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFHMUUsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7SUFDaEMsWUFDWSxPQUErQixFQUMvQixTQUF1QjtRQUR2QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUMvQixjQUFTLEdBQVQsU0FBUyxDQUFjO0lBRW5DLENBQUM7Ozs7O0lBQ0QsV0FBVyxDQUFDLEdBQVE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFTyxTQUFTLENBQUMsR0FBVTs7Y0FDbEIsY0FBYyxHQUE0QixFQUFFO1FBQ2xELElBQUksR0FBRyxFQUFFO1lBQ0wsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLE9BQThCLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUNPLFNBQVMsQ0FBQyxHQUFxQjtRQUNuQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO2dCQUNqQyxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ3JCLEtBQUssVUFBVTt3QkFDWCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLGlCQUFpQixDQUFDO3dCQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQjt5QkFDakUsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssUUFBUTt3QkFDVCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUN4RCxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDO3dCQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQjt5QkFDakUsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssVUFBVSxFQUFFLE9BQU87d0JBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7d0JBQzFDLE1BQU07b0JBQ1Y7d0JBQ0ksTUFBTTtpQkFDYjtZQUNMLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7WUFoREosVUFBVTs7OztZQU5GLHNCQUFzQjtZQUl0QixZQUFZOzs7Ozs7O0lBS2IsMENBQXVDOzs7OztJQUN2Qyw0Q0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZywgUHJvcGVydHlFbnRpdHkgfSBmcm9tICdAZmFycmlzL2lkZS1wcm9wZXJ0eS1wYW5lbCc7XHJcbmltcG9ydCB7IFZvQ29uZmlnQ29tcG9uZW50LCBWb0NvbmZpZ0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3ZvLWNvbmZpZy92by1jb25maWcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgV2ZPcHRpb25zQ29tcG9uZW50LCBXZk9wdGlvbnNDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy93Zi1vcHRpb25zL3dmLW9wdGlvbnMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgV2ZMb2NhbGVQaXBlIH0gZnJvbSAnLi4vaTE4bi9waXBlL3dmLXByb2Nlc3MtZWRpdG9yLWxvY2FsZS5waXBlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJpbGxOb2RlQWN0aXZpdHlBZGFwdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgdWlTdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgICAgICBwcml2YXRlIGxvY2FsUGlwZTogV2ZMb2NhbGVQaXBlXHJcbiAgICApIHtcclxuICAgIH1cclxuICAgIHNldFByb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5RGF0YSA9IG9iai5wcm9wZXJ0eURhdGE7XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5Q29uZmlnID0gdGhpcy5zZXRDb25maWcob2JqLnByb3BlcnR5Q29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldENvbmZpZyhvYmo6IGFueVtdKTogRWxlbWVudFByb3BlcnR5Q29uZmlnW10ge1xyXG4gICAgICAgIGNvbnN0IHByb3BlcnR5Q29uZmlnOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSA9IFtdO1xyXG4gICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgb2JqLmZvckVhY2goKGVsZW1lbnQ6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbnRpdHkoZWxlbWVudC5wcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5Q29uZmlnLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvcGVydHlDb25maWc7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHNldEVudGl0eShvYmo6IFByb3BlcnR5RW50aXR5W10pIHtcclxuICAgICAgICBpZiAob2JqICYmIG9iai5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChpdGVtOiBQcm9wZXJ0eUVudGl0eSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnR5SUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiVm9Db25maWdcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgVm9Db25maWdDb252ZXJ0ZXIodGhpcy5sb2NhbFBpcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IFZvQ29uZmlnQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpelR5cGVJZDogdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mbG93Rm9ybS5idXNpbmVzc09iamVjdElkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJXZk9wdHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgV2ZPcHRpb25zQ29udmVydGVyKHRoaXMubG9jYWxQaXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBXZk9wdGlvbnNDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYml6VHlwZUlkOiB0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZsb3dGb3JtLmJ1c2luZXNzT2JqZWN0SWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIndmQ29uZmlnXCI6IC8v5ZCv55So5bel5L2c5rWBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaXRlcmF0b3IgPSB0aGlzLnVpU3RhdGUuYm9vbEl0ZXJhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==