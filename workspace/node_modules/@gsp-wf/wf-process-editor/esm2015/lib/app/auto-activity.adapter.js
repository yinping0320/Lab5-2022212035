/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ActivityComponentComponent, ActivityComponentConverter } from '../views/activity-component/activity-component.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { AutoActivityPropertyKeys } from '../designer/wf-cell/property-keys/AutoActivityPropertyKeys';
import { PerformerOptionsComponent, PerformerOptionsConverter } from '../views/performer/views/performer-options/performer-options.component';
import { WfLocalePipe } from '../i18n/pipe/wf-process-editor-locale.pipe';
export class AutoActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case AutoActivityPropertyKeys.Tools: // 参与者
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter(this.localPipe);
                        item.editorParams = {
                            location: 'autoActivity'
                        };
                        break;
                    case AutoActivityPropertyKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter(this.localPipe);
                        break;
                    case AutoActivityPropertyKeys.ParticipantOptions: // 参与者选项
                        item.editor = PerformerOptionsComponent;
                        item.converter = new PerformerOptionsConverter(this.localPipe);
                        item.editorParams = {
                            location: 'autoActivity'
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
AutoActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AutoActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: WfLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AutoActivityAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    AutoActivityAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1hY3Rpdml0eS5hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9hcHAvYXV0by1hY3Rpdml0eS5hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ2xJLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzFILE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHdFQUF3RSxDQUFDO0FBQzlJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUkxRSxNQUFNLE9BQU8sbUJBQW1COzs7OztJQUU5QixZQUNVLE9BQStCLEVBQy9CLFNBQXVCO1FBRHZCLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBQy9CLGNBQVMsR0FBVCxTQUFTLENBQWM7SUFFakMsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsR0FBUTtRQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7Ozs7OztJQUVPLFNBQVMsQ0FBQyxHQUFVOztjQUNwQixjQUFjLEdBQTRCLEVBQUU7UUFDbEQsSUFBSSxHQUFHLEVBQUU7WUFDUCxHQUFHLENBQUMsT0FBTzs7OztZQUFDLENBQUMsT0FBOEIsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbkMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQixDQUFDLEVBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBQ08sU0FBUyxDQUFDLEdBQXFCO1FBQ3JDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxJQUFvQixFQUFFLEVBQUU7Z0JBQ25DLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDdkIsS0FBSyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsTUFBTTt3QkFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRywwQkFBMEIsQ0FBQzt3QkFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLDBCQUEwQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDaEUsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDbEIsUUFBUSxFQUFFLGNBQWM7eUJBQ3pCLENBQUM7d0JBQ0YsTUFBTTtvQkFDUixLQUFLLHdCQUF3QixDQUFDLGdCQUFnQixFQUFFLE9BQU87d0JBQ3JELElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzlELE1BQU07b0JBQ1IsS0FBSyx3QkFBd0IsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRO3dCQUN4RCxJQUFJLENBQUMsTUFBTSxHQUFHLHlCQUF5QixDQUFDO3dCQUN4QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkseUJBQXlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUMvRCxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNsQixRQUFRLEVBQUUsY0FBYzt5QkFDekIsQ0FBQzt3QkFDRixNQUFNO29CQUNSO3dCQUNFLE1BQU07aUJBQ1Q7WUFDSCxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7O1lBcERGLFVBQVU7Ozs7WUFSRixzQkFBc0I7WUFNdEIsWUFBWTs7Ozs7OztJQU9qQixzQ0FBdUM7Ozs7O0lBQ3ZDLHdDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4vcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJ0BmYXJyaXMvaWRlLXByb3BlcnR5LXBhbmVsJztcclxuaW1wb3J0IHsgQWN0aXZpdHlDb21wb25lbnRDb21wb25lbnQsIEFjdGl2aXR5Q29tcG9uZW50Q29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvYWN0aXZpdHktY29tcG9uZW50L2FjdGl2aXR5LWNvbXBvbmVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQsIFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3ZhcmlhYmxlLXNldHRpbmcvdmFyaWFibGUtc2V0dGluZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBBdXRvQWN0aXZpdHlQcm9wZXJ0eUtleXMgfSBmcm9tICcuLi9kZXNpZ25lci93Zi1jZWxsL3Byb3BlcnR5LWtleXMvQXV0b0FjdGl2aXR5UHJvcGVydHlLZXlzJztcclxuaW1wb3J0IHsgUGVyZm9ybWVyT3B0aW9uc0NvbXBvbmVudCwgUGVyZm9ybWVyT3B0aW9uc0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3BlcmZvcm1lci92aWV3cy9wZXJmb3JtZXItb3B0aW9ucy9wZXJmb3JtZXItb3B0aW9ucy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXZkxvY2FsZVBpcGUgfSBmcm9tICcuLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5cclxuZXhwb3J0IGNsYXNzIEF1dG9BY3Rpdml0eUFkYXB0ZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgdWlTdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgIHByaXZhdGUgbG9jYWxQaXBlOiBXZkxvY2FsZVBpcGVcclxuICApIHtcclxuICB9XHJcblxyXG4gIHNldFByb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMuc2V0Q29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldENvbmZpZyhvYmo6IGFueVtdKTogRWxlbWVudFByb3BlcnR5Q29uZmlnW10ge1xyXG4gICAgY29uc3QgcHJvcGVydHlDb25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdID0gW107XHJcbiAgICBpZiAob2JqKSB7XHJcbiAgICAgIG9iai5mb3JFYWNoKChlbGVtZW50OiBFbGVtZW50UHJvcGVydHlDb25maWcpID0+IHtcclxuICAgICAgICB0aGlzLnNldEVudGl0eShlbGVtZW50LnByb3BlcnRpZXMpO1xyXG4gICAgICAgIHByb3BlcnR5Q29uZmlnLnB1c2goZWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BlcnR5Q29uZmlnO1xyXG4gIH1cclxuICBwcml2YXRlIHNldEVudGl0eShvYmo6IFByb3BlcnR5RW50aXR5W10pIHtcclxuICAgIGlmIChvYmogJiYgb2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgb2JqLmZvckVhY2goKGl0ZW06IFByb3BlcnR5RW50aXR5KSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnR5SUQpIHtcclxuICAgICAgICAgIGNhc2UgQXV0b0FjdGl2aXR5UHJvcGVydHlLZXlzLlRvb2xzOiAvLyDlj4LkuI7ogIVcclxuICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBBY3Rpdml0eUNvbXBvbmVudENvbXBvbmVudDtcclxuICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgQWN0aXZpdHlDb21wb25lbnRDb252ZXJ0ZXIodGhpcy5sb2NhbFBpcGUpO1xyXG4gICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogJ2F1dG9BY3Rpdml0eSdcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIEF1dG9BY3Rpdml0eVByb3BlcnR5S2V5cy52YXJpYWJsZVNldHRpbmdzOiAvLyDlj5jph4/orr7nva5cclxuICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlcih0aGlzLmxvY2FsUGlwZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBBdXRvQWN0aXZpdHlQcm9wZXJ0eUtleXMuUGFydGljaXBhbnRPcHRpb25zOiAvLyDlj4LkuI7ogIXpgInpoblcclxuICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBQZXJmb3JtZXJPcHRpb25zQ29tcG9uZW50O1xyXG4gICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBQZXJmb3JtZXJPcHRpb25zQ29udmVydGVyKHRoaXMubG9jYWxQaXBlKTtcclxuICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgbG9jYXRpb246ICdhdXRvQWN0aXZpdHknXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19