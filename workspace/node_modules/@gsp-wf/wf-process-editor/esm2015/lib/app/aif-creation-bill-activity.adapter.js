/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ProcessListHelpComponent } from '../views/aif-process-list-help/components/process-list-help/process-list-help.component';
import { AifCreationBillProcessConverter } from '../views/aif-process-list-help/AifCreationBillProcessConverter';
import { AifCreationBillActivityPropertyKeys } from '../designer/wf-cell/property-keys/AifCreationBillActivityPropertyKeys';
import { AifLocalePipe } from '../views/aif-ui-common/pipe/aif-ui-common-locale.pipe';
export class AifCreationBillActivityAdapter {
    /**
     * @param {?} uiState
     * @param {?} localPipe
     */
    constructor(uiState, localPipe) {
        this.uiState = uiState;
        this.localPipe = localPipe;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case AifCreationBillActivityPropertyKeys.aifProcessCode: // 单据流编号
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter(this.localPipe);
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
AifCreationBillActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifCreationBillActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: AifLocalePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AifCreationBillActivityAdapter.prototype.uiState;
    /** @type {?} */
    AifCreationBillActivityAdapter.prototype.localPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlmLWNyZWF0aW9uLWJpbGwtYWN0aXZpdHkuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYXBwL2FpZi1jcmVhdGlvbi1iaWxsLWFjdGl2aXR5LmFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUZBQXlGLENBQUM7QUFDbkksT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFDakgsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sdUVBQXVFLENBQUM7QUFDNUgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBR3RGLE1BQU0sT0FBTyw4QkFBOEI7Ozs7O0lBQ3ZDLFlBQ1ksT0FBK0IsRUFDaEMsU0FBd0I7UUFEdkIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7UUFDaEMsY0FBUyxHQUFULFNBQVMsQ0FBZTtJQUduQyxDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxHQUFRO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7O0lBRU8sU0FBUyxDQUFDLEdBQVU7O2NBQ2xCLGNBQWMsR0FBNEIsRUFBRTtRQUNsRCxJQUFJLEdBQUcsRUFBRTtZQUNMLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxPQUE4QixFQUFFLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNuQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFDTyxTQUFTLENBQUMsR0FBcUI7UUFDbkMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQW9CLEVBQUUsRUFBRTtnQkFDakMsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFO29CQUNyQixLQUFLLG1DQUFtQyxDQUFDLGNBQWMsRUFBRSxRQUFRO3dCQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUF3QixDQUFDO3dCQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksK0JBQStCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUNyRSxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQjt5QkFDakUsQ0FBQzt3QkFDRixNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7O1lBdkNKLFVBQVU7Ozs7WUFQRixzQkFBc0I7WUFLdEIsYUFBYTs7Ozs7OztJQUtkLGlEQUF1Qzs7SUFDdkMsbURBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRGVzaWduZXJVSVN0YXRlIH0gZnJvbSAnLi9wcm9jZXNzLWRlc2lnbmVyLnVpc3RhdGUnO1xyXG5pbXBvcnQgeyBFbGVtZW50UHJvcGVydHlDb25maWcsIFByb3BlcnR5RW50aXR5IH0gZnJvbSAnQGZhcnJpcy9pZGUtcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBQcm9jZXNzTGlzdEhlbHBDb21wb25lbnQgfSBmcm9tICcuLi92aWV3cy9haWYtcHJvY2Vzcy1saXN0LWhlbHAvY29tcG9uZW50cy9wcm9jZXNzLWxpc3QtaGVscC9wcm9jZXNzLWxpc3QtaGVscC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBBaWZDcmVhdGlvbkJpbGxQcm9jZXNzQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvYWlmLXByb2Nlc3MtbGlzdC1oZWxwL0FpZkNyZWF0aW9uQmlsbFByb2Nlc3NDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVByb3BlcnR5S2V5cyB9IGZyb20gJy4uL2Rlc2lnbmVyL3dmLWNlbGwvcHJvcGVydHkta2V5cy9BaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVByb3BlcnR5S2V5cyc7XHJcbmltcG9ydCB7IEFpZkxvY2FsZVBpcGUgfSBmcm9tICcuLi92aWV3cy9haWYtdWktY29tbW9uL3BpcGUvYWlmLXVpLWNvbW1vbi1sb2NhbGUucGlwZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eUFkYXB0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlLFxyXG4gICAgICAgIHB1YmxpYyBsb2NhbFBpcGU6IEFpZkxvY2FsZVBpcGVcclxuICAgICAgICApIHtcclxuXHJcbiAgICB9XHJcbiAgICBzZXRQcm9wZXJ0eShvYmo6IGFueSkge1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMuc2V0Q29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRDb25maWcob2JqOiBhbnlbXSk6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eUNvbmZpZzogRWxlbWVudFByb3BlcnR5Q29uZmlnW10gPSBbXTtcclxuICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChlbGVtZW50OiBFbGVtZW50UHJvcGVydHlDb25maWcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW50aXR5KGVsZW1lbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvbmZpZy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5Q29uZmlnO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZXRFbnRpdHkob2JqOiBQcm9wZXJ0eUVudGl0eVtdKSB7XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmoubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoaXRlbTogUHJvcGVydHlFbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eVByb3BlcnR5S2V5cy5haWZQcm9jZXNzQ29kZTogLy8g5Y2V5o2u5rWB57yW5Y+3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gUHJvY2Vzc0xpc3RIZWxwQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBBaWZDcmVhdGlvbkJpbGxQcm9jZXNzQ29udmVydGVyKHRoaXMubG9jYWxQaXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXpUeXBlSWQ6IHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm0uYnVzaW5lc3NPYmplY3RJZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==