/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, Inject, LOCALE_ID, InjectionToken, Optional } from '@angular/core';
/** @type {?} */
export const WF_LANG_RESOURCES = new InjectionToken("WF_LANG_RESOURCES");
export class WfLocalePipe {
    /**
     * @param {?} localeId
     * @param {?} resources
     */
    constructor(localeId, resources) {
        this.defaultLang = "zh-CHS";
        this.langCode = localeId || this.defaultLang;
        this.resources = resources || {};
        this.lang = resources[this.langCode] || resources[this.defaultLang] || {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        /** @type {?} */
        const keys = name.split(".");
        /** @type {?} */
        let temp = this.lang;
        for (let key of keys) {
            temp = temp[key];
            if (temp == null) {
                break;
            }
        }
        return temp || name;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    instant(name) {
        return this.transform(name);
    }
}
WfLocalePipe.decorators = [
    { type: Pipe, args: [{ name: 'wfLocale' },] }
];
/** @nocollapse */
WfLocalePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WF_LANG_RESOURCES,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WfLocalePipe.prototype.defaultLang;
    /** @type {?} */
    WfLocalePipe.prototype.langCode;
    /**
     * @type {?}
     * @private
     */
    WfLocalePipe.prototype.lang;
    /**
     * @type {?}
     * @private
     */
    WfLocalePipe.prototype.resources;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2kxOG4vcGlwZS93Zi1wcm9jZXNzLWVkaXRvci1sb2NhbGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUVqRyxNQUFNLE9BQU8saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQUMsbUJBQW1CLENBQUM7QUFHeEUsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBS3JCLFlBQ21DLFFBQWdCLEVBQ1IsU0FBYztRQU54QyxnQkFBVyxHQUFXLFFBQVEsQ0FBQztRQVE1QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUUsQ0FBQzs7Ozs7SUFDRCxTQUFTLENBQUMsSUFBWTs7Y0FDWixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQ3hCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSTtRQUNwQixLQUFLLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtnQkFDZCxNQUFNO2FBQ1Q7U0FDSjtRQUNELE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxJQUFZO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUE1QkosSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTs7Ozt5Q0FPakIsUUFBUSxZQUFJLE1BQU0sU0FBQyxTQUFTOzRDQUM1QixRQUFRLFlBQUksTUFBTSxTQUFDLGlCQUFpQjs7Ozs7OztJQU56QyxtQ0FBZ0Q7O0lBQ2hELGdDQUF3Qjs7Ozs7SUFDeEIsNEJBQWlCOzs7OztJQUNqQixpQ0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBJbmplY3QsIExPQ0FMRV9JRCwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY29uc3QgV0ZfTEFOR19SRVNPVVJDRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXCJXRl9MQU5HX1JFU09VUkNFU1wiKTtcclxuXHJcbkBQaXBlKHsgbmFtZTogJ3dmTG9jYWxlJyB9KVxyXG5leHBvcnQgY2xhc3MgV2ZMb2NhbGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRMYW5nOiBzdHJpbmcgPSBcInpoLUNIU1wiO1xyXG4gICAgcHVibGljIGxhbmdDb2RlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGxhbmc6IHt9O1xyXG4gICAgcHJpdmF0ZSByZXNvdXJjZXM7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlSWQ6IHN0cmluZyxcclxuICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFdGX0xBTkdfUkVTT1VSQ0VTKSByZXNvdXJjZXM6IGFueSxcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMubGFuZ0NvZGUgPSBsb2NhbGVJZCB8fCB0aGlzLmRlZmF1bHRMYW5nO1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gcmVzb3VyY2VzIHx8IHt9O1xyXG4gICAgICAgIHRoaXMubGFuZyA9IHJlc291cmNlc1t0aGlzLmxhbmdDb2RlXSB8fCByZXNvdXJjZXNbdGhpcy5kZWZhdWx0TGFuZ10gfHwge307XHJcbiAgICB9XHJcbiAgICB0cmFuc2Zvcm0obmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBjb25zdCBrZXlzID0gbmFtZS5zcGxpdChcIi5cIilcclxuICAgICAgICBsZXQgdGVtcCA9IHRoaXMubGFuZztcclxuICAgICAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgICAgICB0ZW1wID0gdGVtcFtrZXldO1xyXG4gICAgICAgICAgICBpZiAodGVtcCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGVtcCB8fCBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGluc3RhbnQobmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0obmFtZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==