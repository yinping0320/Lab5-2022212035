/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementPropertyConfig, PmfEvents, ProcessCell } from "@edp-pmf/grapheditor";
import { BpmnModelHelper, DataTypes, DataType, DataObject } from "@edp-pmf/bpmn-model";
import { ProcessHeader, StartMode, Component, CDTSchemaType, ToolTime, ExecuteForm, VariableSetting, ActualParameter, TitleExpression, CustomizeAction, MessageNotice, TimeLimitControl, ExtendProperty, ImageSettings, PositionParticipantExpression, UserParticipantExpression, ValuedDataObject, TimeLimitControlInfo, SendMessageExpireOperationInfo, SendMessageExpireOperation, AutoHandleExpireOperation, AutoHandleExpireOperationInfo, ActivityExecutorParticipantExpression, SmsMessageTemplate, SmsMessageVariable, } from "@gsp-wf/wf-process-model";
import { mxEventObject, mxResources } from "@edp-pmf/mxgraph-ts";
import { MessageReceiver } from "../entity/MessageReceiver";
import { BizComponent } from "../entity/BizComponent";
import { BizParameter } from "../entity/BizParameter";
import { WfDesignerUtils } from "../WfDesignerUtils";
import { WfEvents } from "../WfEvents";
import { ProcessPropertyKeys } from "./property-keys/ProcessPropertyKeys";
import { PropertyHelper } from "./PropertyHelper";
/**
 * 流程元素类。
 * 取名虽然Cell，但实际上不需要继承mxCell以及Cell类，仅持有流程与画布实例，方法属性获取与修改操作。
 */
export class WfProcessCell extends ProcessCell {
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let extendList = [];
        if (this.editorUi.procExtProps && this.editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(this.editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let propertyData = {};
        /** @type {?} */
        let usual = new ElementPropertyConfig();
        usual.categoryId = 'usual';
        usual.categoryName = mxResources.get("basicInfo");
        usual.tabId = 'basic';
        usual.tabName = mxResources.get("basic");
        usual.properties = [
            { propertyID: ProcessPropertyKeys.Name, propertyName: mxResources.get("name"), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: ProcessPropertyKeys.NameLanguage, propertyName: mxResources.get("nameLanguage"), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: ProcessPropertyKeys.Key, propertyName: mxResources.get("key"), propertyType: 'string', readonly: true },
            { propertyID: ProcessPropertyKeys.EntryForm, propertyName: mxResources.get("entryForm"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.startMode, propertyName: mxResources.get("startMode"), propertyType: 'select' },
            { propertyID: ProcessPropertyKeys.wf_TitleExpression, propertyName: mxResources.get("wfTitle"), propertyType: 'modal' },
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get("formDef");
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get("basic");
        formDef.properties = [
            { propertyID: ProcessPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get("formsPC"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get("formsMobile"), propertyType: 'modal' },
        ];
        /** @type {?} */
        let process = new ElementPropertyConfig();
        process.categoryId = 'process';
        process.categoryName = mxResources.get("process");
        process.tabId = 'advanced';
        process.tabName = mxResources.get("advanced");
        process.properties = [
            { propertyID: ProcessPropertyKeys.wf_Component, propertyName: mxResources.get("wfComponent"), propertyType: 'modal' },
        ];
        /** @type {?} */
        let advanced = new ElementPropertyConfig();
        advanced.categoryId = 'advanced';
        advanced.categoryName = mxResources.get("otherConfig");
        advanced.tabId = 'advanced';
        advanced.tabName = mxResources.get("advanced");
        advanced.properties = [
            { propertyID: ProcessPropertyKeys.processVariables, propertyName: mxResources.get("processVariables"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.wf_CustomizeAction, propertyName: mxResources.get("customizeAction"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.enablePriority, propertyName: mxResources.get("enablePriority"), propertyType: 'select' },
            { propertyID: ProcessPropertyKeys.enableWholeOrderRetrieve, propertyName: mxResources.get("enableWholeOrderRetrieve"), propertyType: 'select', description: mxResources.get("description") },
            { propertyID: ProcessPropertyKeys.imageSettings, propertyName: mxResources.get("messageProperty"), propertyType: 'modal' },
        ];
        /** @type {?} */
        const time = new ElementPropertyConfig();
        time.categoryId = 'messageProperty'; // 消息属性
        time.categoryName = mxResources.get("timelinessInfo");
        time.tabId = 'advanced';
        time.tabName = mxResources.get("advanced");
        time.properties = [
            { propertyID: ProcessPropertyKeys.timeLimitControl, propertyName: mxResources.get("timeLimitControl"), propertyType: 'modal' },
            { propertyID: ProcessPropertyKeys.messageNotice, propertyName: mxResources.get("messageNotice"), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            const extendProperty = new ElementPropertyConfig();
            extendProperty.categoryId = 'extendProperty';
            extendProperty.categoryName = mxResources.get("extendProperty");
            extendProperty.tabId = 'advanced';
            extendProperty.tabName = mxResources.get("advanced");
            extendProperty.properties = new Array();
            // 组织扩展属性的二级list
            for (const g of groupList) {
                extendProperty.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
            }
            this.setProcessPropertyValue(propertyData, groupList);
            return {
                propertyConfig: [usual, formDef, process, time, advanced, extendProperty],
                propertyData: propertyData
            };
        }
        else {
            this.setProcessPropertyValue(propertyData, groupList);
            return {
                propertyConfig: [usual, formDef, process, time, advanced],
                propertyData: propertyData
            };
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const propertyID = obj.propertyID;
        if (propertyID) {
            switch (propertyID) {
                case 'EntryForm': //流程分类
                    // 更新流程分类名称（流程分类名称可能修改）
                    this.updateProcessHeader(obj.propertyValue.name, obj.propertyValue.businessObjectId, obj.propertyValue.id);
                    this.updateFlowFormInfo(obj.formalParameters, obj.processBizComponnets, obj.executeForms, obj.customizeActions, obj.bizCmps);
                    this.bindProcessTitleExpression(obj.flowForm.processDescription);
                    break;
                case ProcessPropertyKeys.wf_Component: // 流程构件
                    this.updateProcessComponents(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.wf_ExecuteForms_PC:
                    this.updateExecuteForm(obj.propertyValue, 'PC');
                    if (obj.parameters && obj.parameters.length > 0) {
                        PropertyHelper.updateFormalParameters(this.process, obj.parameters);
                    }
                    break;
                case ProcessPropertyKeys.wf_ExecuteForms_Mobile:
                    this.updateExecuteForm(obj.propertyValue, 'MOBILE');
                    if (obj.parameters && obj.parameters.length > 0) {
                        PropertyHelper.updateFormalParameters(this.process, obj.parameters);
                    }
                    break;
                case ProcessPropertyKeys.wf_CustomizeAction:
                    this.updateCustomizeActions(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.wf_TitleExpression:
                    this.modifyProcessTitleExpression(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.allowPreAssign:
                    this.updateAllowPreAssign(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.startMode:
                    this.updateStartMode(obj.propertyValue, obj.allBizCmps, obj.bizCmps);
                    break;
                case ProcessPropertyKeys.enablePriority:
                    this.updateEnablePriority(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.enableWholeOrderRetrieve:
                    this.updateEnableWholeOrderRetrieve(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.processVariables:
                    this.updateProcessVariables(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.timeLimitControl:
                    this.updateProcessTimeLimitControl(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.messageNotice:
                    this.updateProcessMessageNotices(obj.propertyValue);
                    break;
                case ProcessPropertyKeys.imageSettings:
                    this.updateImageSettings(obj.propertyValue);
                    break;
                default:
                    // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                    if (this.editorUi.procExtProps.findIndex((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.id === propertyID)) > -1) {
                        this.resetExtendProperty(obj.propertyValue);
                    }
                    else {
                        super.updateProps(obj);
                    }
                    break;
            }
        }
    }
    /**
     * 设置流程属性值
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    setProcessPropertyValue(propertyData, groupList) {
        /** @type {?} */
        let process = this.process;
        if (process) {
            if (!process.Name)
                process.Name = '默认流程';
            if (!process.Key)
                process.Key = BpmnModelHelper.GenerateElementId();
            propertyData[ProcessPropertyKeys.Id] = process.Id;
            propertyData[ProcessPropertyKeys.ClrTypeID] = process.ClrTypeID;
            propertyData[ProcessPropertyKeys.Name] = process.Name;
            propertyData[ProcessPropertyKeys.NameLanguage] = process.NameLanguage || {
                "zh-CHS": process.Name,
            };
            propertyData[ProcessPropertyKeys.Key] = process.Key;
            propertyData[ProcessPropertyKeys.wf_TitleExpression] = '';
            /** @type {?} */
            let extendElements = process.GetExtensionElements();
            /** @type {?} */
            let component = [];
            /** @type {?} */
            let webForm;
            /** @type {?} */
            let mobileForm;
            /** @type {?} */
            let customizeActions = [];
            /** @type {?} */
            let proExtendProperties = [];
            /** @type {?} */
            let imageSettings;
            /** @type {?} */
            const messagesNotices = new Array();
            // tslint:disable-next-line: forin
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    propertyData[ProcessPropertyKeys.EntryForm] = {
                        id: ((/** @type {?} */ (extendElements[i]))).BizDefKey,
                        name: ((/** @type {?} */ (extendElements[i]))).BizDefName
                    };
                    propertyData[ProcessPropertyKeys.allowPreAssign] = ((/** @type {?} */ (extendElements[i]))).allowPreAssign;
                    propertyData[ProcessPropertyKeys.startMode] = ((/** @type {?} */ (extendElements[i]))).startMode;
                    propertyData[ProcessPropertyKeys.enablePriority] = ((/** @type {?} */ (extendElements[i]))).enablePriority ? ((/** @type {?} */ (extendElements[i]))).enablePriority : false;
                    propertyData[ProcessPropertyKeys.enableWholeOrderRetrieve] = ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve ? ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve : false;
                }
                if (extendElements[i] instanceof Component
                    && ((/** @type {?} */ (extendElements[i]))).Time !== ToolTime.UNDEFINITION) {
                    component.push(this.convert2Component((/** @type {?} */ (extendElements[i]))));
                }
                if (extendElements[i] instanceof ExecuteForm) {
                    /** @type {?} */
                    const form = (/** @type {?} */ (extendElements[i]));
                    if (form.TerminalType === 'PC') {
                        webForm = form;
                    }
                    else if (form.TerminalType === 'MOBILE') {
                        mobileForm = form;
                    }
                }
                if (extendElements[i] instanceof TitleExpression) {
                    propertyData[ProcessPropertyKeys.wf_TitleExpression] =
                        ((/** @type {?} */ (extendElements[i]))).valueLanguage ? ((/** @type {?} */ (extendElements[i]))).valueLanguage : ((/** @type {?} */ (extendElements[i]))).value;
                }
                if (extendElements[i] instanceof CustomizeAction) {
                    customizeActions.push(extendElements[i]);
                }
                if (extendElements[i] instanceof MessageNotice) {
                    messagesNotices.push(this.getMessageNotice((/** @type {?} */ (extendElements[i]))));
                }
                if (extendElements[i] instanceof TimeLimitControl) {
                    propertyData[ProcessPropertyKeys.timeLimitControl] = this.getPrcocessTimeLimitInfo((/** @type {?} */ (extendElements[i])));
                }
                if (extendElements[i] instanceof ExtendProperty) {
                    proExtendProperties.push(extendElements[i]);
                }
                if (extendElements[i] instanceof ImageSettings) {
                    // imageSettings.push(extendElements[i]);
                    propertyData[ProcessPropertyKeys.imageSettings] = extendElements[i];
                }
            }
            /** @type {?} */
            const processVariables = this.getProcessVariables(process);
            propertyData[ProcessPropertyKeys.processVariables] = processVariables;
            propertyData[ProcessPropertyKeys.wf_Component] = component;
            propertyData[ProcessPropertyKeys.wf_ExecuteForms_PC] = webForm;
            propertyData[ProcessPropertyKeys.wf_ExecuteForms_Mobile] = mobileForm;
            propertyData[ProcessPropertyKeys.wf_CustomizeAction] = customizeActions;
            propertyData[ProcessPropertyKeys.messageNotice] = messagesNotices;
            for (const g of groupList) {
                // 取回模型上的value值给到扩展属性组件里
                if (proExtendProperties && proExtendProperties.length > 0) {
                    g.childs.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    (a, b) => {
                        return a.sortOrder - b.sortOrder;
                    })).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        proExtendProperties.forEach((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => {
                            if (e.key == d.code) {
                                d.value = e.value;
                            }
                        }));
                    }));
                }
                propertyData[g.parent.id] = g.childs;
            }
        }
    }
    /**
     * @param {?} process
     * @return {?}
     */
    getProcessVariables(process) {
        /** @type {?} */
        let processVariables = new Array();
        /** @type {?} */
        const extendElements = process.GetExtensionElements();
        /** @type {?} */
        const dataObjects = process.GetDataObjects();
        if (dataObjects !== null && dataObjects.length > 0) {
            for (const obj of dataObjects) {
                if (obj instanceof ValuedDataObject && obj.DataType.Category !== DataTypes.CustomType) {
                    /** @type {?} */
                    const variable = {
                        id: obj.Id,
                        name: obj.Name,
                        documentation: obj.Documentation,
                        basicType: obj.DataType.BasicType,
                        tag: obj.variableSetting ? obj.variableSetting.tag : '',
                        value: obj.variableSetting ? obj.variableSetting.value : '',
                        valueText: obj.variableSetting ? obj.variableSetting.valueText : '',
                        description: obj.DataType.Description
                    };
                    if (obj.variableSetting && obj.variableSetting.tag === 'component') {
                        if (extendElements.length > 0) {
                            for (const e of extendElements) {
                                if (e instanceof Component && e.Id === obj.variableSetting.value) {
                                    /** @type {?} */
                                    const component = {
                                        Id: e.Id,
                                        Name: e.Name,
                                        MetadataId: e.MetadataId,
                                        MethodCode: e.MethodCode,
                                        ActualParameters: []
                                    };
                                    if (e.ActualParameters && e.ActualParameters.length > 0) {
                                        for (const p of e.ActualParameters) {
                                            /** @type {?} */
                                            const parameter = {
                                                Name: p.Name,
                                                Value: p.Value,
                                                Tag: p.Tag,
                                            };
                                            component.ActualParameters.push(parameter);
                                        }
                                    }
                                    variable.component = component;
                                }
                            }
                        }
                    }
                    processVariables.push(variable);
                }
            }
        }
        return processVariables;
    }
    /**
     * @param {?} timeLimitControl
     * @return {?}
     */
    getPrcocessTimeLimitInfo(timeLimitControl) {
        /** @type {?} */
        let timeLimit;
        if (timeLimitControl) {
            timeLimit = new TimeLimitControlInfo();
            timeLimit.enable = timeLimitControl.enable;
            timeLimit.tag = timeLimitControl.tag;
            timeLimit.dueTime = timeLimitControl.dueTime;
            timeLimit.timeUnit = timeLimitControl.timeUnit;
            timeLimit.expireOperations = new Array();
            if (timeLimitControl.expireOperations && timeLimitControl.expireOperations.length > 0) {
                /** @type {?} */
                const operations = timeLimitControl.expireOperations;
                for (const o of operations) {
                    if (o.ClrTypeID.indexOf('SendMessageExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperationInfo();
                        sendMessage.timeDuration = operation.timeDuration;
                        sendMessage.durationType = operation.durationType;
                        sendMessage.timeUnit = operation.timeUnit;
                        sendMessage.message = operation.message;
                        sendMessage.sendType = operation.sendType;
                        sendMessage.subject = operation.subject;
                        sendMessage.id = operation.id;
                        sendMessage.receiver = operation.receiver;
                        sendMessage.receiverText = operation.receiverText;
                        sendMessage.cycleEnable = operation.cycleEnable;
                        sendMessage.cycleTime = operation.cycleTime;
                        sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                        sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                        if (operation.smsMessageTemplate) {
                            /** @type {?} */
                            const smsTemplate = new Object;
                            smsTemplate.code = operation.smsMessageTemplate.code;
                            smsTemplate.content = operation.smsMessageTemplate.content;
                            smsTemplate.smsMessageVariables = new Array();
                            if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of operation.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new Object;
                                    variable.id = WfDesignerUtils.createNM();
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsTemplate;
                        }
                        timeLimit.expireOperations.push(sendMessage);
                    }
                    else if (o.ClrTypeID.indexOf('AutoHandleExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperationInfo;
                        autoHandle.id = operation.id;
                        autoHandle.durationType = operation.durationType;
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        timeLimit.expireOperations.push(autoHandle);
                    }
                }
            }
        }
        return timeLimit;
    }
    /**
     * @param {?} messageNotice
     * @return {?}
     */
    getMessageNotice(messageNotice) {
        /** @type {?} */
        const message = new Object;
        message.content = messageNotice.content;
        message.sendTime = messageNotice.sendTime;
        message.sendType = messageNotice.sendType;
        message.subject = messageNotice.subject;
        if (messageNotice.smsMessageTemplate) {
            /** @type {?} */
            const smsTemplate = new Object;
            smsTemplate.code = messageNotice.smsMessageTemplate.code;
            smsTemplate.content = messageNotice.smsMessageTemplate.content;
            smsTemplate.smsMessageVariables = new Array();
            if (messageNotice.smsMessageTemplate.smsMessageVariables && messageNotice.smsMessageTemplate.smsMessageVariables.length > 0) {
                for (const v of messageNotice.smsMessageTemplate.smsMessageVariables) {
                    /** @type {?} */
                    const variable = new Object;
                    variable.id = WfDesignerUtils.createNM();
                    variable.code = v.code;
                    variable.value = v.value;
                    variable.tag = v.tag;
                    smsTemplate.smsMessageVariables.push(variable);
                }
            }
            message.smsMessageTemplate = smsTemplate;
        }
        /** @type {?} */
        const receiverExpressions = new Array();
        if (messageNotice.receiver) {
            /** @type {?} */
            const receivers = messageNotice.receiver.split(',');
            /** @type {?} */
            const receiverTexts = messageNotice.receiverText.split(',');
            /** @type {?} */
            let userReceiver = new MessageReceiver();
            userReceiver.type = 'userParticipant';
            userReceiver.userIds = '';
            userReceiver.userNames = '';
            for (const i in receivers) {
                if (receivers[i] === 'procInstCreator') {
                    /** @type {?} */
                    let procInstCreator = new MessageReceiver();
                    procInstCreator.type = 'processParticipant';
                    procInstCreator.processParticipant = 'procInstCreator';
                    receiverExpressions.push(procInstCreator);
                }
                else if (receivers[i] === 'workItemParticipant') {
                    /** @type {?} */
                    let workItemParticipant = new MessageReceiver();
                    workItemParticipant.type = 'processParticipant';
                    workItemParticipant.processParticipant = 'workItemParticipant';
                    receiverExpressions.push(workItemParticipant);
                }
                else {
                    userReceiver.userIds += (receivers[i] + ',');
                    userReceiver.userNames += (receiverTexts[i] + ',');
                }
            }
            if (userReceiver.userIds) {
                userReceiver.userIds = userReceiver.userIds.substring(0, userReceiver.userIds.length - 1);
                userReceiver.userNames = userReceiver.userNames.substring(0, userReceiver.userNames.length - 1);
                receiverExpressions.push(userReceiver);
            }
        }
        if (messageNotice.receiverExpressions && messageNotice.receiverExpressions.length > 0) {
            for (const e of messageNotice.receiverExpressions) {
                if (e instanceof ActivityExecutorParticipantExpression) {
                    /** @type {?} */
                    let activityExecutorParticipant = new MessageReceiver();
                    activityExecutorParticipant.type = 'processParticipant';
                    activityExecutorParticipant.processParticipant = 'activityExecutorParticipant';
                    activityExecutorParticipant.activityDefId = ((/** @type {?} */ (e))).activityDefId;
                    activityExecutorParticipant.activityDefName = ((/** @type {?} */ (e))).activityDefName;
                    receiverExpressions.push(activityExecutorParticipant);
                }
                else if (e instanceof UserParticipantExpression) {
                    /** @type {?} */
                    let variableReceiver = new MessageReceiver();
                    variableReceiver.type = 'variableParticipant';
                    variableReceiver.variableParticipant = ((/** @type {?} */ (e))).UserId;
                    variableReceiver.variableName = ((/** @type {?} */ (e))).name;
                    variableReceiver.orgType = ((/** @type {?} */ (e))).OrgType;
                    receiverExpressions.push(variableReceiver);
                }
                else if (e instanceof PositionParticipantExpression) {
                    /** @type {?} */
                    let positionReceiver = new MessageReceiver();
                    positionReceiver.type = 'positionParticipant';
                    positionReceiver.positionId = ((/** @type {?} */ (e))).PositionId;
                    positionReceiver.positionName = ((/** @type {?} */ (e))).PositionName;
                    positionReceiver.positionType = ((/** @type {?} */ (e))).PositionType;
                    if (positionReceiver.positionType === '1') {
                        positionReceiver.orgId = ((/** @type {?} */ (e))).OrgId;
                        positionReceiver.orgType = ((/** @type {?} */ (e))).OrgType;
                    }
                    receiverExpressions.push(positionReceiver);
                }
            }
        }
        if (receiverExpressions.length > 0) {
            message.receivers = receiverExpressions;
        }
        return message;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    convert2Component(component) {
        /** @type {?} */
        const bizComponent = new BizComponent();
        bizComponent.id = component.Id;
        bizComponent.name = component.Name;
        bizComponent.metadataId = component.MetadataId;
        bizComponent.methodCode = component.MethodCode;
        bizComponent.executionTime = component.Time;
        bizComponent.isForCompensation = component.isForCompensation;
        bizComponent.scopeType = component.ScopeType || null;
        bizComponent.actualParameters = new Array();
        if (component.ActualParameters && component.ActualParameters.length > 0) {
            for (const param of component.ActualParameters) {
                /** @type {?} */
                const bizParam = new BizParameter();
                bizParam.code = param.Name;
                bizParam.name = param.Name;
                bizParam.value = param.Value;
                bizComponent.actualParameters.push(bizParam);
            }
        }
        return bizComponent;
    }
    /**
     * 设置ProcessHeader
     * @param {?} ffId
     * @param {?} bizObjId
     * @param {?} ffName
     * @param {?} startMode
     * @return {?}
     */
    setProcessHeader(ffId, bizObjId, ffName, startMode) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        /** @type {?} */
        const processHeader = new ProcessHeader(process.Model, ffId, bizObjId, ffName, startMode);
        extendElements.push(processHeader);
    }
    /**
     * 更新流程分类绑定的参数，流程组件，表单信息
     * @param {?} params 参数列表
     * @param {?} cpts 流程组件
     * @param {?} forms
     * @param {?} customizeActions
     * @param {?} bizCmps
     * @return {?}
     */
    updateFlowFormInfo(params, cpts, forms, customizeActions, bizCmps) {
        this.updateFormalParameters(params, cpts.filter((/**
         * @param {?} cpt
         * @return {?}
         */
        cpt => cpt.ownerType === 'Schema')));
        this.setProcessComponents(cpts, bizCmps);
        this.updateExecuteForms(forms);
        this.updateCustomizeActions(customizeActions);
    }
    /**
     * @param {?} parameters
     * @param {?=} cmps
     * @return {?}
     */
    updateFormalParameters(parameters, cmps = new Array()) {
        if (!parameters) {
            parameters = [];
        }
        /** @type {?} */
        let process = this.process;
        /** @type {?} */
        let objects = process.GetDataObjects();
        if (parameters !== null && parameters.length > 0) {
            for (const p of parameters) {
                /** @type {?} */
                const dataType = new DataType(process.Model);
                if (p.dataType === 'CDTSchema') {
                    // 先清理CDTSchema类型的dataObject
                    for (const o of objects) {
                        //TODO:数据类型为customType暂时默认为参数预制
                        if (o instanceof DataObject && o.DataType.Category === DataTypes.CustomType) {
                            process.RemoveDataObject(o.Id);
                        }
                    }
                    // 重新绑定流程分类支持精简be
                    /** @type {?} */
                    const customType = new CDTSchemaType(process.Model);
                    if (p.newSchemaId && p.newSchemaMetadataId) {
                        customType.SchemaId = p.newSchemaId;
                        customType.MetadataId = p.newSchemaMetadataId;
                    }
                    else {
                        customType.SchemaId = p.schemaId;
                        customType.MetadataId = p.schemaMetadataId;
                    }
                    customType.ComponentId = cmps.filter((/**
                     * @param {?} cmp
                     * @return {?}
                     */
                    cmp => cmp.owner === p.schemaId))[0].id;
                    dataType.Category = DataTypes.CustomType;
                    dataType.CustomType = customType;
                }
                else {
                    // 先清理code相同的dataObject
                    for (const o of objects) {
                        if (o instanceof DataObject && o.Name === p.code) {
                            process.RemoveDataObject(o.Id);
                        }
                    }
                    dataType.Category = DataTypes.BasicType;
                    dataType.BasicType = p.dataType;
                }
                dataType.Description = p.description;
                // dataType.InitialValue = p.initialValue;
                if (p.parameterMode === 0) {
                    /** @type {?} */
                    const dataObject = new ValuedDataObject(process.Model);
                    dataObject.Name = p.code;
                    dataObject.Documentation = p.name;
                    dataObject.DataType = dataType;
                    dataObject.IsAllowNull = p.allowNull;
                    if (p.initialValue || p.initialValueType) {
                        /** @type {?} */
                        const variableSetting = new VariableSetting(process.Model);
                        variableSetting.variableCode = p.code;
                        variableSetting.variableName = p.name;
                        variableSetting.tag = p.initialValueType;
                        variableSetting.value = p.initialValue;
                        variableSetting.valueText = p.initialValue;
                        dataObject.variableSetting = variableSetting;
                    }
                    process.AddDataObject(dataObject);
                }
            }
        }
    }
    /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @param {?} bizCmps
     * @return {?}
     */
    setProcessComponents(procCpts, bizCmps) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let processHeader;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof Component
                    && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION) {
                    extendElements.splice(i - 1, 1);
                }
                if (extendElements[i - 1] instanceof ProcessHeader) {
                    processHeader = (/** @type {?} */ (extendElements[i - 1]));
                }
            }
        }
        // 子流程和外部流程的情况先需要绑定取数构件
        if (processHeader.startMode !== StartMode.DIRECT) {
            /** @type {?} */
            const loadDataComponent = procCpts.find((/**
             * @param {?} p
             * @return {?}
             */
            p => p.executionTime === ToolTime.LOADDATA));
            if (loadDataComponent) {
                /** @type {?} */
                let ldCpt = new Component(process.Model);
                ldCpt.Time = (/** @type {?} */ (loadDataComponent.executionTime));
                ldCpt.MetadataId = loadDataComponent.metadataId;
                ldCpt.MethodCode = loadDataComponent.methodCode;
                ldCpt.Id = loadDataComponent.id;
                ldCpt.Name = loadDataComponent.name;
                ldCpt.isForCompensation = loadDataComponent.isForCompensation;
                ldCpt.ActualParameters = [];
                if (loadDataComponent.scopeType) {
                    ldCpt.ScopeType = loadDataComponent.scopeType;
                }
                else {
                    ldCpt.ScopeType = "Undefined";
                }
                if (loadDataComponent.actualParameters && loadDataComponent.actualParameters.length > 0) {
                    for (let item of loadDataComponent.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(process.Model, item.code, item.value);
                        ldCpt.ActualParameters.push(parameter);
                    }
                }
                // 把取数构件放进去
                extendElements.push(ldCpt);
                // 如果是外部流程，校验是否集成统一预制的外部流程构件
                if (processHeader.startMode == StartMode.EXTERNAL_PROCESS) {
                    /** @type {?} */
                    let externalCmps = false;
                    /** @type {?} */
                    const cmps = bizCmps;
                    if (cmps && cmps.length > 0) {
                        // 此处标记有外部流程通用构件
                        for (const c of cmps) {
                            if (c.scopeType === 'ExternalProcess') {
                                externalCmps = true;
                                break;
                            }
                        }
                    }
                    // 如果没有外部流程构件
                    if (!externalCmps) {
                        if (procCpts && procCpts.length > 0) {
                            for (let procCpt of procCpts) {
                                /** @type {?} */
                                let cpt = new Component(process.Model);
                                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                                cpt.MetadataId = procCpt.metadataId;
                                cpt.MethodCode = procCpt.methodCode;
                                cpt.Id = procCpt.id;
                                cpt.Name = procCpt.name;
                                cpt.isForCompensation = procCpt.isForCompensation;
                                cpt.ActualParameters = [];
                                if (procCpt.scopeType) {
                                    cpt.ScopeType = procCpt.scopeType;
                                }
                                else {
                                    cpt.ScopeType = "Undefined";
                                }
                                if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                    for (let item of procCpt.actualParameters) {
                                        /** @type {?} */
                                        let parameter = new ActualParameter(process.Model, item.code, item.value);
                                        cpt.ActualParameters.push(parameter);
                                    }
                                }
                                // 避免重复的放入取数构件,不要取数，子流程和直接流程的构件，要未定义，外部，全量的
                                if (cpt.Time !== ToolTime.LOADDATA
                                    && cpt.ScopeType !== StartMode.DIRECT
                                    && cpt.ScopeType !== StartMode.SUB_PROCESS) {
                                    extendElements.push(cpt);
                                }
                            }
                        }
                    }
                    else {
                        for (let procCpt of procCpts) {
                            /** @type {?} */
                            let cpt = new Component(process.Model);
                            cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                            cpt.MetadataId = procCpt.metadataId;
                            cpt.MethodCode = procCpt.methodCode;
                            cpt.Id = procCpt.id;
                            cpt.Name = procCpt.name;
                            cpt.isForCompensation = procCpt.isForCompensation;
                            cpt.ActualParameters = [];
                            if (procCpt.scopeType) {
                                cpt.ScopeType = procCpt.scopeType;
                            }
                            else {
                                cpt.ScopeType = "Undefined";
                            }
                            if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                for (let item of procCpt.actualParameters) {
                                    /** @type {?} */
                                    let parameter = new ActualParameter(process.Model, item.code, item.value);
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            // 避免重复的放入取数构件,不要取数，子流程和直接流程,未知的构件，外部，全量的
                            if (cpt.Time !== ToolTime.LOADDATA
                                && cpt.ScopeType !== StartMode.DIRECT
                                && cpt.ScopeType !== StartMode.SUB_PROCESS
                                && cpt.ScopeType !== "Undefined") {
                                extendElements.push(cpt);
                            }
                        }
                    }
                    // 如果有外部流程构件，同样只保留取数构件，不需要其他处理(取数构件已经放进去了)
                    // 刷新一下属性框
                    this.editorUi.fireEvent(new mxEventObject(PmfEvents.ShowProperty));
                }
                else if (processHeader.startMode == StartMode.SUB_PROCESS) {
                    if (procCpts && procCpts.length > 0) {
                        for (let procCpt of procCpts) {
                            /** @type {?} */
                            let cpt = new Component(process.Model);
                            cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                            cpt.MetadataId = procCpt.metadataId;
                            cpt.MethodCode = procCpt.methodCode;
                            cpt.Id = procCpt.id;
                            cpt.Name = procCpt.name;
                            cpt.isForCompensation = procCpt.isForCompensation;
                            cpt.ActualParameters = [];
                            if (procCpt.scopeType) {
                                cpt.ScopeType = procCpt.scopeType;
                            }
                            else {
                                cpt.ScopeType = "Undefined";
                            }
                            if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                                for (let item of procCpt.actualParameters) {
                                    /** @type {?} */
                                    let parameter = new ActualParameter(process.Model, item.code, item.value);
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            // 避免重复的放入取数构件,不要取数，直接流程和外部流程，未定义的构件，要子流程，全量的
                            if (cpt.Time !== ToolTime.LOADDATA
                                && cpt.ScopeType !== StartMode.DIRECT
                                && cpt.ScopeType !== StartMode.EXTERNAL_PROCESS
                                && cpt.ScopeType !== "Undefined") {
                                extendElements.push(cpt);
                            }
                        }
                    }
                }
                // 如果是子流程则不需要其他处理(取数构件已经放进去了)
            }
        }
        else { // 直接流程
            // 直接流程
            // 直接流程过滤掉共享的构件
            /** @type {?} */
            const actualCmps = procCpts.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => WfDesignerUtils.isPfComponent(p.metadataId) === false));
            if (actualCmps && actualCmps.length > 0) {
                for (let procCpt of actualCmps) {
                    /** @type {?} */
                    let cpt = new Component(process.Model);
                    cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                    cpt.MetadataId = procCpt.metadataId;
                    cpt.MethodCode = procCpt.methodCode;
                    cpt.Id = procCpt.id;
                    cpt.Name = procCpt.name;
                    cpt.isForCompensation = procCpt.isForCompensation;
                    if (procCpt.scopeType) {
                        cpt.ScopeType = procCpt.scopeType;
                    }
                    else {
                        cpt.ScopeType = "Undefined";
                    }
                    cpt.ActualParameters = [];
                    if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                        for (let item of procCpt.actualParameters) {
                            /** @type {?} */
                            let parameter = new ActualParameter(process.Model, item.code, item.value);
                            cpt.ActualParameters.push(parameter);
                        }
                    }
                    // 避免重复的放入取数构件,子流程和外部流程的构件，要未定义，直接，全量的
                    if (cpt.ScopeType !== StartMode.EXTERNAL_PROCESS
                        && cpt.ScopeType !== StartMode.SUB_PROCESS) {
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} forms
     * @return {?}
     */
    updateExecuteForms(forms) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除表单构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ExecuteForm) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        for (const f of forms) {
            this.updateExecuteForm(f);
        }
    }
    /**
     * @param {?} form
     * @param {?=} terminal
     * @return {?}
     */
    updateExecuteForm(form, terminal) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除表单构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ExecuteForm) {
                    /** @type {?} */
                    const f = (/** @type {?} */ (extendElements[i - 1]));
                    if (f.TerminalType === (terminal ? terminal : form.TerminalType)) {
                        extendElements.splice(i - 1, 1);
                    }
                }
            }
        }
        if (form) {
            /** @type {?} */
            let params = (/** @type {?} */ (form.ActualParameters));
            /** @type {?} */
            let actParas = new Array();
            if (params && params.length > 0) {
                for (let para of params) {
                    /** @type {?} */
                    let actPara = new ActualParameter(process.Model, para.Name, para.Value);
                    if (para.Tag) {
                        actPara.Tag = para.Tag;
                    }
                    else {
                        if (para.Value) {
                            if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                actPara.Tag = 'expression';
                            }
                            else {
                                actPara.Tag = 'constant';
                            }
                        }
                        else {
                            actPara.Tag = 'variable';
                        }
                    }
                    actParas.push(actPara);
                }
            }
            /** @type {?} */
            const id = BpmnModelHelper.GenerateElementId();
            /** @type {?} */
            let item = new ExecuteForm(process.Model, id, form.Name, actParas);
            item.ComponentId = form.ComponentId;
            item.FormType = form.FormType;
            item.formFormatId = form.formFormatId;
            item.formatConfigId = form.formatConfigId;
            item.TerminalType = form.TerminalType;
            extendElements.push(item);
        }
    }
    /**
     * @param {?} customizeActions
     * @return {?}
     */
    updateCustomizeActions(customizeActions) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof CustomizeAction) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        //重新绑定
        if (customizeActions && customizeActions.length > 0) {
            for (let a of customizeActions) {
                /** @type {?} */
                let action = new CustomizeAction(process.Model);
                action.id = BpmnModelHelper.GenerateElementId();
                action.code = a.code;
                action.name = a.name;
                action.terminalType = a.terminalType;
                // action.enable = a.enable;
                action.actualParameters = [];
                if (a.actualParameters && a.actualParameters.length > 0) {
                    for (let p of a.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(process.Model, p.Name, p.Value, p.ValueText, p.Tag || 'expression');
                        action.actualParameters.push(parameter);
                    }
                }
                extendElements.push(action);
            }
        }
    }
    /**
     * 更新流程备注
     * @param {?} value
     * @return {?}
     */
    modifyProcessTitleExpression(value) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof TitleExpression) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        /** @type {?} */
        let title = new TitleExpression(process.Model);
        if (typeof (value) === 'string' || value == null) {
            title = new TitleExpression(process.Model, value);
        }
        else {
            title = new TitleExpression(process.Model, value['zh-CHS'], value);
        }
        extendElements.push(title);
    }
    /**
     * @param {?} ffName
     * @param {?=} bizObjId
     * @param {?=} ffId
     * @return {?}
     */
    updateProcessHeader(ffName, bizObjId, ffId) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).BizDefName = ffName;
                    ((/** @type {?} */ (extendElements[i]))).BizObjId = bizObjId;
                    ((/** @type {?} */ (extendElements[i]))).BizDefKey = ffId;
                    return;
                }
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    bindProcessTitleExpression(value) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        /** @type {?} */
        const titleExpression = (/** @type {?} */ (extendElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e.ClrTypeID === TitleExpression.Clr_Type_ID))));
        if (titleExpression && titleExpression.value) {
            return;
        }
        /** @type {?} */
        const title = new TitleExpression(process.Model, value);
        extendElements.push(title);
    }
    /**
     * 基于流程分类的切换更新流程构件
     * @param {?} procCpts
     * @return {?}
     */
    updateProcessComponents(procCpts) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        //删除流程构件
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof Component
                    && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        //重新绑定
        if (procCpts && procCpts.length > 0) {
            for (let procCpt of procCpts) {
                /** @type {?} */
                let cpt = new Component(process.Model);
                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                cpt.MetadataId = procCpt.metadataId;
                cpt.MethodCode = procCpt.methodCode;
                cpt.Id = procCpt.id;
                cpt.Name = procCpt.name;
                cpt.isForCompensation = procCpt.isForCompensation;
                cpt.ActualParameters = [];
                if (procCpt.actualParameters && procCpt.actualParameters.length > 0) {
                    for (let item of procCpt.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(process.Model, item.code, item.value);
                        cpt.ActualParameters.push(parameter);
                    }
                }
                extendElements.push(cpt);
            }
        }
    }
    /**
     * @param {?} assign
     * @return {?}
     */
    updateAllowPreAssign(assign) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).allowPreAssign = assign;
                    return;
                }
            }
        }
    }
    /**
     * @param {?} priority
     * @return {?}
     */
    updateEnablePriority(priority) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).enablePriority = priority;
                    return;
                }
            }
        }
    }
    /**
     * @param {?} startMode
     * @param {?} allCmps
     * @param {?} bizCmps
     * @return {?}
     */
    updateStartMode(startMode, allCmps, bizCmps) {
        // 对于启动方式的提示信息
        switch (startMode) {
            case StartMode.DIRECT:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("directTips"),
                }));
                break;
            case StartMode.EXTERNAL_PROCESS:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("externalTips"),
                }));
                break;
            case StartMode.SUB_PROCESS:
                this.editorUi.fireEvent(new mxEventObject(WfEvents.ShowTips, "data", {
                    type: 'message',
                    level: 'info',
                    message: mxResources.get("subprocessTips"),
                }));
                break;
        }
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            /** @type {?} */
            const procHeader = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof ProcessHeader))));
            // 修改启动方式
            procHeader[0].startMode = startMode;
            /** @type {?} */
            const procCpts = allCmps;
            //删除流程构件
            if (extendElements.length > 0) {
                for (let i = extendElements.length; i > 0; i--) {
                    if (extendElements[i - 1] instanceof Component
                        && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.UNDEFINITION
                        && ((/** @type {?} */ (extendElements[i - 1]))).Time !== ToolTime.LOADDATA) {
                        extendElements.splice(i - 1, 1);
                    }
                }
            }
            allCmps && allCmps.forEach((/**
             * @param {?} procCpt
             * @return {?}
             */
            procCpt => {
                /** @type {?} */
                const cpt = new Component(process.Model);
                cpt.Time = (/** @type {?} */ (procCpt.executionTime));
                cpt.MetadataId = procCpt.metadataId;
                cpt.MethodCode = procCpt.methodCode;
                cpt.Id = procCpt.id;
                cpt.Name = procCpt.name;
                cpt.isForCompensation = procCpt.isForCompensation;
                cpt.ActualParameters = [];
                if (procCpt.scopeType) {
                    cpt.ScopeType = procCpt.scopeType;
                }
                else {
                    cpt.ScopeType = "Undefined";
                }
                procCpt.actualParameters && procCpt.actualParameters.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => {
                    /** @type {?} */
                    let parameter = new ActualParameter(process.Model, item.code, item.value);
                    cpt.ActualParameters.push(parameter);
                }));
                extendElements.push(cpt);
            }));
            /** @type {?} */
            const procCmps = (/** @type {?} */ (extendElements.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e instanceof Component))));
            // 如果启动方式是子流程,只保留取数构件
            if (startMode === StartMode.SUB_PROCESS) {
                // Utils.postMessage(ResourceKeys.wf_showTip, {
                //     type: 'message',
                //     level: 'info',
                //     message: `启动方式为子流程，需要移除取数构件以外的流程构件`,
                // });
                for (let i = extendElements.length; i > 0; i--) {
                    if (extendElements[i - 1] instanceof Component) {
                        /** @type {?} */
                        const cmp = (/** @type {?} */ (extendElements[i - 1]));
                        if (cmp.Time !== ToolTime.UNDEFINITION
                            && cmp.Time !== ToolTime.LOADDATA
                            && (cmp.ScopeType !== StartMode.SUB_PROCESS && cmp.ScopeType !== "All_Process")) {
                            extendElements.splice(i - 1, 1);
                        }
                    }
                }
            }
            // 如果启动方式是直接启动,不允许存在共享的构件
            if (startMode === StartMode.DIRECT) {
                // 判断有没有共享（PF）的流程构件
                /** @type {?} */
                const pfCmps = procCmps.filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => WfDesignerUtils.isPfComponent(p.MetadataId)));
                if (pfCmps && pfCmps.length > 0) {
                    // 删掉共享的构件和启动方式
                    for (let i = extendElements.length; i > 0; i--) {
                        if (extendElements[i - 1] instanceof Component) {
                            /** @type {?} */
                            const cmp = (/** @type {?} */ (extendElements[i - 1]));
                            if (WfDesignerUtils.isPfComponent(cmp.MetadataId)
                                || cmp.ScopeType === StartMode.EXTERNAL_PROCESS
                                || cmp.ScopeType === StartMode.SUB_PROCESS) {
                                extendElements.splice(i - 1, 1);
                            }
                        }
                    }
                }
                // 如果启动方式是外部流程
            }
            else if (startMode === StartMode.EXTERNAL_PROCESS) {
                // const otherCmps = procCmps.filter((p: Component) => (p.MetadataId !== ResourceKeys.pf_Cmp_Id1
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id2
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id3
                //     && p.MetadataId !== ResourceKeys.pf_Cmp_Id4
                //     && p.Time !== ToolTime.LOADDATA
                // ));
                // 判断有没有预制外部流程通用构件
                /** @type {?} */
                let externalCmps = false;
                /** @type {?} */
                const cmps = bizCmps;
                if (cmps && cmps.length > 0) {
                    // 此处标记是外部流程通用构件
                    for (const c of cmps) {
                        if (c.scopeType === 'ExternalProcess') {
                            externalCmps = true;
                            break;
                        }
                    }
                    // 如果预制了外部流程通用构件,只保留取数构件，没有则不处理
                    if (externalCmps) {
                        for (let i = extendElements.length; i > 0; i--) {
                            if (extendElements[i - 1] instanceof Component) {
                                /** @type {?} */
                                const cmp = (/** @type {?} */ (extendElements[i - 1]));
                                if (cmp.Time !== ToolTime.UNDEFINITION
                                    && cmp.Time !== ToolTime.LOADDATA
                                    && (cmp.ScopeType === StartMode.DIRECT
                                        || cmp.ScopeType === StartMode.SUB_PROCESS
                                        || cmp.ScopeType === "Undefined")) {
                                    extendElements.splice(i - 1, 1);
                                }
                            }
                        }
                    }
                }
            }
        }
        this.editorUi.fireEvent(new mxEventObject(PmfEvents.ShowProperty));
    }
    /**
     * @param {?} variables
     * @return {?}
     */
    updateProcessVariables(variables) {
        /** @type {?} */
        let process = this.process;
        /** @type {?} */
        let objects = process.GetDataObjects();
        /** @type {?} */
        const extendElements = process.GetExtensionElements();
        if (objects && objects.length > 0) {
            for (const o of objects) {
                if (o instanceof ValuedDataObject && o.DataType.Category !== DataTypes.CustomType) {
                    if (o.variableSetting && o.variableSetting.tag === 'component') {
                        /** @type {?} */
                        const i = extendElements.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => (e instanceof Component && e.Id === o.variableSetting.value)));
                        extendElements.splice(i, 1);
                    }
                    process.RemoveDataObject(o.Id);
                }
            }
        }
        if (variables !== null && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const dataType = new DataType(process.Model);
                dataType.Category = DataTypes.BasicType;
                dataType.BasicType = v.basicType;
                dataType.Description = v.description;
                /** @type {?} */
                const dataObject = new ValuedDataObject(process.Model);
                dataObject.Id = v.id;
                dataObject.Name = v.name;
                dataObject.Documentation = v.documentation;
                dataObject.DataType = dataType;
                if (v.tag && v.value) {
                    /** @type {?} */
                    const variableSetting = new VariableSetting(process.Model);
                    variableSetting.variableCode = v.name;
                    variableSetting.variableName = v.documentation;
                    variableSetting.tag = v.tag;
                    variableSetting.value = v.value;
                    variableSetting.valueText = v.valueText;
                    dataObject.variableSetting = variableSetting;
                    if (variableSetting.tag === 'component') {
                        /** @type {?} */
                        const c = v.component;
                        if (c) {
                            /** @type {?} */
                            let cpt = new Component(process.Model);
                            cpt.MetadataId = c.MetadataId;
                            cpt.MethodCode = c.MethodCode;
                            cpt.Id = c.Id;
                            cpt.Name = c.Name;
                            cpt.ActualParameters = new Array();
                            if (c.ActualParameters && c.ActualParameters.length > 0) {
                                for (let a of c.ActualParameters) {
                                    /** @type {?} */
                                    let parameter = new ActualParameter(process.Model, a.Name, a.Value);
                                    parameter.Tag = a.Tag;
                                    cpt.ActualParameters.push(parameter);
                                }
                            }
                            extendElements.push(cpt);
                        }
                    }
                }
                process.AddDataObject(dataObject);
            }
        }
    }
    /**
     * @param {?} timeLimit
     * @return {?}
     */
    updateProcessTimeLimitControl(timeLimit) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof TimeLimitControl) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        /** @type {?} */
        const timeLimitInfo = (/** @type {?} */ (timeLimit));
        if (timeLimitInfo) {
            /** @type {?} */
            const control = new TimeLimitControl(process.Model);
            control.enable = timeLimitInfo.enable;
            control.tag = timeLimitInfo.tag;
            control.dueTime = timeLimitInfo.dueTime;
            control.timeUnit = timeLimitInfo.timeUnit;
            control.expireOperations = new Array();
            if (timeLimitInfo.expireOperations && timeLimitInfo.expireOperations.length > 0) {
                for (const o of timeLimitInfo.expireOperations) {
                    if (o.operationTypeName === 'SendMessageExpireOperation' || !o.operationTypeName) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperation(process.Model);
                        sendMessage.id = BpmnModelHelper.GenerateElementId();
                        sendMessage.durationType = (/** @type {?} */ (operation.durationType));
                        sendMessage.timeDuration = operation.timeDuration;
                        sendMessage.timeUnit = operation.timeUnit;
                        sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                        sendMessage.message = operation.message;
                        sendMessage.subject = operation.subject;
                        sendMessage.sendType = operation.sendType;
                        sendMessage.receiver = operation.receiver;
                        sendMessage.receiverText = operation.receiverText;
                        sendMessage.cycleEnable = operation.cycleEnable;
                        sendMessage.cycleTime = operation.cycleTime;
                        sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                        if (operation.smsMessageTemplate) {
                            /** @type {?} */
                            const smsMessageTemplate = new SmsMessageTemplate(process.Model);
                            smsMessageTemplate.code = operation.smsMessageTemplate.code;
                            smsMessageTemplate.content = operation.smsMessageTemplate.content;
                            smsMessageTemplate.smsMessageVariables = new Array();
                            if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of operation.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new SmsMessageVariable(process.Model);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsMessageTemplate;
                        }
                        control.expireOperations.push(sendMessage);
                    }
                    else if (o.operationTypeName === 'AutoHandleExpireOperation') {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperation(process.Model);
                        autoHandle.id = BpmnModelHelper.GenerateElementId();
                        autoHandle.durationType = (/** @type {?} */ (operation.durationType));
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        control.expireOperations.push(autoHandle);
                    }
                }
            }
            extendElements.push(control);
        }
    }
    /**
     * @param {?} notices
     * @return {?}
     */
    updateProcessMessageNotices(notices) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof MessageNotice) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(process.Model);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                // messageNotice.receiver = n.receiver;
                // messageNotice.receiverText = n.receiverText;
                n.receivers = n.receivers.filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.type));
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(process.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(process.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(process.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(process.Model);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(process.Model);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                extendElements.push(messageNotice);
            }
        }
    }
    /**
     * @param {?} imageSettings
     * @return {?}
     */
    updateImageSettings(imageSettings) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        if (extendElements.length > 0) {
            for (let i = extendElements.length; i > 0; i--) {
                if (extendElements[i - 1] instanceof ImageSettings) {
                    extendElements.splice(i - 1, 1);
                }
            }
        }
        if (imageSettings) {
            /** @type {?} */
            const imageSetting = new ImageSettings(process.Model);
            imageSetting.imageOperation = imageSettings.imageOperation;
            extendElements.push(imageSetting);
        }
    }
    /**
     * 更新扩展属性
     * @param {?} value
     * @return {?}
     */
    resetExtendProperty(value) {
        /** @type {?} */
        const process = this.process;
        /** @type {?} */
        let extendElements = process.GetExtensionElements();
        for (const o of value) {
            for (const e of extendElements) {
                if (e instanceof ExtendProperty && e.key === o.code) {
                    /** @type {?} */
                    const index = extendElements.indexOf(e);
                    if (index > -1) {
                        extendElements.splice(index, 1);
                    }
                }
            }
        }
        /** @type {?} */
        let attributes = (/** @type {?} */ (value));
        if (attributes) {
            attributes.forEach((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                /** @type {?} */
                let item = new ExtendProperty(process.Model);
                item.key = a.code;
                item.value = a.value;
                extendElements.push(item);
            }));
        }
    }
    /**
     * @param {?} wholeOrderRetrieve
     * @return {?}
     */
    updateEnableWholeOrderRetrieve(wholeOrderRetrieve) {
        /** @type {?} */
        let extendElements = this.process.GetExtensionElements();
        if (extendElements !== null && extendElements.length > 0) {
            for (let i in extendElements) {
                if (extendElements[i] instanceof ProcessHeader) {
                    ((/** @type {?} */ (extendElements[i]))).enableWholeOrderRetrieve = wholeOrderRetrieve;
                    return;
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    WfProcessCell.prototype.process;
    /** @type {?} */
    WfProcessCell.prototype.plane;
    /** @type {?} */
    WfProcessCell.prototype.editorUi;
    /** @type {?} */
    WfProcessCell.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,