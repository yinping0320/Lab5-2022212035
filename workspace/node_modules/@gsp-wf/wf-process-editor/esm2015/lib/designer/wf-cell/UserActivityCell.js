/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, Expression, FlowNodeState, MultiInstanceLoopCharacteristics } from "@edp-pmf/bpmn-model";
import { OtherAssignNodes, UserActivity, OperationActivity, StartActivity, UrgeHandleRule, ApprovalPivot, ApprovalPivotConfig, ImageSettings, CheckCondition, VariableSetting, CustomizeAction, TimeLimitControl, TitleExpression, JumpScope, BackWardRule, CounterSignRule, ParticipantSetting, AssignPerformerConfig, Component, ConclusionItem, ExecuteWorkItemMode, WorkFlowAction, DisplayTerminal, AssignmentStrategy, TimeLimitControlInfo, SendMessageExpireOperation, SendMessageExpireOperationInfo, AutoHandleExpireOperation, AutoHandleExpireOperationInfo, ExtendProperty, MessageNotice, ActionScope, Condition, ExecuteForm, PotentialOwnerImpl, HumanPerformerImpl, OrganizationParticipantExpression, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, ParticipantExpression, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, ActualParameter, SmsMessageTemplate, SmsMessageVariable, OtherAssignActivityNodeInfo, OrganizationLevel, SemanticExpression } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { AssignConfig } from "../entity/AssignConfig";
import { AssignStrategy } from "../entity/AssignStrategy";
import { OrganizationParticipant } from "../entity/OrganizationParticipant";
import { WfConstants } from "../WfConstants";
import { UserActivityPropertyKeys } from "./property-keys/UserActivityPropertyKeys";
import { WfDesignerUtils } from "../WfDesignerUtils";
import { ActionOrganizationScopeDesign, OrganizationPotentialOwner } from "../../views/organization-potential-owner/actionOrganizationScope";
// import { ParticipantInfo } from "../../views/participant/participant.info";
import { ParticipantInfo } from "../entity";
/**
 * 审批活动节点
 */
export class UserActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = UserActivityCell.CLR_TYPE_ID;
        this.name = "审批";
        this.nameLanguage = {
            "zh-CHS": "审批",
            "zh-CHT": "審批",
            "en": "Approve",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/approval.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/approval_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const bpmnModel = editorUi.graph.bpmnModel;
        flowNode.Id = "UserActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.transferAble = editorUi.generalConfig.enableTransfer;
            flowNode.AddSignBehindAble = editorUi.generalConfig.enableAddSignBehind;
            flowNode.AddSignFrontAble = editorUi.generalConfig.enableAddSignFront;
            flowNode.NotifyAble = editorUi.generalConfig.enableNotify;
            if (this.bizActivity) {
                /** @type {?} */
                const bizActivity = this.bizActivity;
                flowNode.BizActivityID = bizActivity.id;
                flowNode.BizActivityName = bizActivity.name;
                flowNode.Tools = [];
                for (let c of bizActivity.bizComponents) {
                    /** @type {?} */
                    let tool = new Component(flowNode.Model);
                    tool.Id = c.id;
                    tool.Name = c.name;
                    tool.Time = c.executionTime;
                    // TODO 写死了构件类型
                    tool.ComponentType = 'CommonComponent';
                    tool.MetadataId = c.metadataId;
                    tool.MethodCode = c.methodCode;
                    tool.ActualParameters = [];
                    if (c.actualParameters && ((/** @type {?} */ (c.actualParameters))).length > 0) {
                        for (let a of ((/** @type {?} */ (c.actualParameters)))) {
                            /** @type {?} */
                            let parameter = new ActualParameter(bpmnModel, a.code, a.value);
                            tool.ActualParameters.push(parameter);
                        }
                    }
                    flowNode.Tools.push(tool);
                }
                flowNode.setBizConclusions(bpmnModel, bizActivity.bizActions);
            }
            else {
                flowNode.BizActivityID = "";
                flowNode.initConclusions(bpmnModel);
            }
        }
        return flowNode;
    }
    /**
     * @return {?}
     */
    createDiagramElement() {
        if (this.bizActivity != null) {
            this.imgUrls = {
                [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/bizActivity.png",
                [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/bizActivity_select.svg",
            };
        }
        /** @type {?} */
        const shape = super.createDiagramElement();
        return shape;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        return this.getFarrisPropConfigByIsOperation();
    }
    /**
     * @param {?=} isOperation
     * @return {?}
     */
    getFarrisPropConfigByIsOperation(isOperation = false) {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        let extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let userAct = this.flowElement;
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: UserActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: UserActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: UserActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true },
            { propertyID: UserActivityPropertyKeys.wf_TitleExpression, propertyName: mxResources.get('wfTitleExpression'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let performerProperty = new ElementPropertyConfig();
        performerProperty.categoryId = 'performerProperty';
        performerProperty.categoryName = mxResources.get('participant');
        performerProperty.tabId = 'basic';
        performerProperty.tabName = mxResources.get('basicAttributes');
        performerProperty.properties = [
            { propertyID: UserActivityPropertyKeys.ParticipantSchemes, propertyName: mxResources.get('participantSchemes'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.ParticipantOptions, propertyName: mxResources.get('participantOptions'), propertyType: 'modal' },
        ];
        // if (userAct.AssignmentStrategy !== AssignmentStrategy.ASSIGN) {
        //     performerProperty.properties.push(
        //         { propertyID: UserActivityPropertyKeys.AssignStrategy, propertyName: '分配策略', propertyType: 'modal' }
        //     );
        // } else {
        //     performerProperty.properties = performerProperty.properties.concat(
        //         [{ propertyID: UserActivityPropertyKeys.AssignStrategy, propertyName: '分配策略', propertyType: 'modal' },
        //         { propertyID: UserActivityPropertyKeys.AssignPerformer, propertyName: '备选办理人', propertyType: 'modal' }]);
        // }
        if (!isOperation) {
            if (userAct.ExecuteWorkItemMode === ExecuteWorkItemMode.Preempt) {
                performerProperty.properties.push({ propertyID: UserActivityPropertyKeys.CompleteStrategy, propertyName: mxResources.get('completeStrategy'), propertyType: 'select' });
                propertyData[UserActivityPropertyKeys.CompleteStrategy] = userAct.ExecuteWorkItemMode;
            }
            else {
                performerProperty.properties = performerProperty.properties.concat([
                    { propertyID: UserActivityPropertyKeys.CompleteStrategy, propertyName: mxResources.get('completeStrategy'), propertyType: 'select' },
                    { propertyID: UserActivityPropertyKeys.SignRule, propertyName: mxResources.get('signRule'), propertyType: 'modal' },
                ]);
                propertyData[UserActivityPropertyKeys.CompleteStrategy] = userAct.ExecuteWorkItemMode;
                propertyData[UserActivityPropertyKeys.SignRule] = userAct.CounterSignRules;
            }
        }
        /** @type {?} */
        let approvalProperty = new ElementPropertyConfig();
        approvalProperty.categoryId = 'approvalProperty';
        approvalProperty.categoryName = mxResources.get('operationsManage');
        approvalProperty.tabId = 'approvalProperty';
        approvalProperty.tabName = mxResources.get('operationsConfig');
        approvalProperty.properties = [
            { propertyID: UserActivityPropertyKeys.ApprovalItems, propertyName: mxResources.get('approvalItems'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.wf_CustomizeAction, propertyName: mxResources.get('wfCustomizeAction'), propertyType: 'modal' },
        ];
        // 审批活动节点含“驳回”审批动作时，属性框支持驳回规则属性
        if (userAct.Conclusions && this.isBackConclusionExist(userAct.Conclusions)) {
            approvalProperty.properties.push({ propertyID: UserActivityPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' });
            propertyData[UserActivityPropertyKeys.BackWardRule] = userAct.BackWardRule;
        }
        approvalProperty.properties = approvalProperty.properties.concat([
            { propertyID: UserActivityPropertyKeys.Retrievable, propertyName: mxResources.get('retrievable'), propertyType: 'select' },
        ]);
        if (!isOperation) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.AddSignFrontAble, propertyName: mxResources.get('addSignFrontAble'), propertyType: 'modal' },
                { propertyID: UserActivityPropertyKeys.AddSignBehindAble, propertyName: mxResources.get('addSignBehindAble'), propertyType: 'modal' },
            ]);
        }
        if (editorUi.generalConfig.enableTransfer) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.transferScope, propertyName: mxResources.get('transferScope'), propertyType: 'modal' },
            ]);
        }
        approvalProperty.properties = approvalProperty.properties.concat([
            { propertyID: UserActivityPropertyKeys.NotifyAble, propertyName: mxResources.get('notifyAble'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.urgeHandleRule, propertyName: mxResources.get('urgeHandleRule'), propertyType: 'modal' }
        ]);
        if (userAct.SelectTargetAble) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
                { propertyID: UserActivityPropertyKeys.JumpScope, propertyName: mxResources.get('jumpScope'), propertyType: 'modal' },
            ]);
            propertyData[UserActivityPropertyKeys.SelectTargetAble] = userAct.SelectTargetAble;
            propertyData[UserActivityPropertyKeys.JumpScope] = userAct.JumpScope;
        }
        else {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
            ]);
            propertyData[UserActivityPropertyKeys.SelectTargetAble] = userAct.SelectTargetAble;
        }
        if (userAct.otherAssignNodes) {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' },
                // { propertyID: UserActivityPropertyKeys.otherAssignActivities, propertyName: mxResources.get('otherAssignActivities'), propertyType: 'modal' },
                { propertyID: UserActivityPropertyKeys.otherAssignActivityNodeInfos, propertyName: mxResources.get('otherAssignActivityNodeInfos'), propertyType: 'modal' },
            ]);
            propertyData[UserActivityPropertyKeys.otherAssignNodes] = true;
            // propertyData[UserActivityPropertyKeys.otherAssignActivities] = userAct.otherAssignNodes.otherAssignActivities;
            propertyData[UserActivityPropertyKeys.otherAssignActivityNodeInfos] = userAct.otherAssignNodes.otherAssignActivityNodeInfos || userAct.otherAssignNodes.otherAssignActivityNodeInfos;
            if (userAct.otherAssignNodes.otherAssignActivities) {
                userAct.otherAssignNodes.otherAssignActivities = null;
            }
        }
        else {
            approvalProperty.properties = approvalProperty.properties.concat([
                { propertyID: UserActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' }
            ]);
            propertyData[UserActivityPropertyKeys.otherAssignNodes] = false;
        }
        /** @type {?} */
        let eventListeners = new ElementPropertyConfig();
        eventListeners.categoryId = 'eventListeners'; // 活动选项（表单定义+活动构件）
        eventListeners.categoryName = mxResources.get('eventListeners');
        eventListeners.tabId = 'advanced';
        eventListeners.tabName = mxResources.get('advancedAttributes');
        eventListeners.properties = [
            { propertyID: UserActivityPropertyKeys.Tools, propertyName: mxResources.get('tools'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.checkConditions, propertyName: mxResources.get('checkConditions'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        /** @type {?} */
        let ApprovalSettings = new ElementPropertyConfig();
        ApprovalSettings.categoryId = 'ApprovalSettings'; // 活动选项（表单定义+活动构件）
        ApprovalSettings.categoryName = mxResources.get('approvalSettings');
        ApprovalSettings.tabId = 'advanced';
        ApprovalSettings.tabName = mxResources.get('advancedAttributes');
        ApprovalSettings.properties = [
            { propertyID: UserActivityPropertyKeys.anonymousSet, propertyName: mxResources.get('anonymousSet'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.approvalPivotConfig, propertyName: mxResources.get('approvalPivotConfig'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.imageSettings, propertyName: mxResources.get('imageSettings'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.MultiInstanceLoopCharacteristics, propertyName: mxResources.get('multiInstanceLoopCharacteristics'), propertyType: 'modal' }
        ];
        propertyData[UserActivityPropertyKeys.MultiInstanceLoopCharacteristics] = userAct.LoopCharacteristics;
        /** @type {?} */
        let taskTimeliness = new ElementPropertyConfig();
        taskTimeliness.categoryId = 'taskTimeliness'; // 活动选项（表单定义+活动构件）
        taskTimeliness.categoryName = mxResources.get('taskTimeliness');
        taskTimeliness.tabId = 'advanced';
        taskTimeliness.tabName = mxResources.get('advancedAttributes');
        taskTimeliness.properties = [
            { propertyID: UserActivityPropertyKeys.timeLimitControl, propertyName: mxResources.get('timeLimitControl'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: UserActivityPropertyKeys.DisplayTerminal, propertyName: mxResources.get('displayTerminal'), propertyType: 'select' },
            { propertyID: UserActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: UserActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            let ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            for (const g of groupList) {
                ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
            }
            this.setPropertyData(userAct, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, eventListeners, taskTimeliness, ApprovalSettings, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            this.setPropertyData(userAct, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, eventListeners, taskTimeliness, ApprovalSettings],
                propertyData: propertyData
            };
        }
    }
    /**
     * 判断是否存在反向流程动作
     * @param {?} conclusions
     * @return {?}
     */
    isBackConclusionExist(conclusions) {
        for (let conclusion of conclusions) {
            if (conclusion.WorkFlowAction === WorkFlowAction.Backward) {
                return true;
            }
        }
        return false;
    }
    /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?} groupList
     * @return {?}
     */
    setPropertyData(act, propertyData, groupList) {
        propertyData[UserActivityPropertyKeys.Id] = act.Id;
        propertyData[UserActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[UserActivityPropertyKeys.Name] = act.Name;
        propertyData[UserActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        //活动传递bizActivityId
        propertyData[UserActivityPropertyKeys.BizActivityID] = act.BizActivityID;
        // 变量设置+流程变量
        propertyData[UserActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        propertyData[UserActivityPropertyKeys.ParticipantSchemes] = this.getParticipantInfo(act);
        propertyData[UserActivityPropertyKeys.ParticipantOptions] = this.getParticipantOptions(act);
        // if (userAct.AssignmentStrategy === AssignmentStrategy.ASSIGN) {
        //     propertyData[UserActivityPropertyKeys.AssignPerformer] = this.getPotentialOwnerImpl(userAct);
        // }
        propertyData[UserActivityPropertyKeys.ApprovalItems] = act.Conclusions;
        propertyData[UserActivityPropertyKeys.Tools] = PropertyHelper.getBizComponentList((/** @type {?} */ (act.Tools)));
        propertyData[UserActivityPropertyKeys.wf_CustomizeAction] = act.customizeActions || [];
        propertyData[UserActivityPropertyKeys.AssignStrategy] = this.getAssignStrategy(act);
        propertyData[UserActivityPropertyKeys.Retrievable] = act.Retrievable;
        propertyData[UserActivityPropertyKeys.SelectBranch] = act.SelectBranch;
        propertyData[UserActivityPropertyKeys.AddSignFrontAble] = this.getSignFrontInfo(act);
        propertyData[UserActivityPropertyKeys.AddSignBehindAble] = this.getSignBehindInfo(act);
        propertyData[UserActivityPropertyKeys.transferScope] = this.getTransferScopeInfo(act);
        propertyData[UserActivityPropertyKeys.NotifyAble] = this.getNotifyAble(act);
        propertyData[UserActivityPropertyKeys.timeLimitControl] = this.getTimeLimitInfo(act);
        propertyData[UserActivityPropertyKeys.wf_TitleExpression] = act.taskTitle ? (act.taskTitle.valueLanguage ? act.taskTitle.valueLanguage : act.taskTitle.value) : '';
        propertyData[UserActivityPropertyKeys.anonymousSet] = {
            isAnonymity: act.anonymous,
            anonymous: act.anonymousText
        };
        propertyData[UserActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        // 影像设置
        propertyData[UserActivityPropertyKeys.imageSettings] = act.imageSettings;
        propertyData[UserActivityPropertyKeys.wf_ExecuteForms_PC] =
            act.ExecuteForms ? act.ExecuteForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'PC')) : null;
        propertyData[UserActivityPropertyKeys.wf_ExecuteForms_Mobile] =
            act.ExecuteForms ? act.ExecuteForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'MOBILE')) : null;
        propertyData[UserActivityPropertyKeys.approvalPivotConfig] = act.approvalPivotConfig;
        propertyData[UserActivityPropertyKeys.DisplayTerminal] = act.DisplayTerminal ? act.DisplayTerminal : DisplayTerminal.ALL;
        propertyData[UserActivityPropertyKeys.urgeHandleRule] = this.getUrgeHandleRule(act);
        for (const g of groupList) {
            // 取回模型上的value值给到扩展属性组件里
            if (act.extendProperties && act.extendProperties.length > 0) {
                g.childs.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => {
                    return a.sortOrder - b.sortOrder;
                })).forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    act.extendProperties.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (e.key == d.code) {
                            d.value = e.value;
                        }
                    }));
                }));
            }
            propertyData[g.parent.id] = g.childs;
        }
        propertyData[UserActivityPropertyKeys.checkConditions] = this.getCheckConditions(act);
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getParticipantInfo(userActivity) {
        /** @type {?} */
        const partiInfo = new ParticipantInfo();
        partiInfo.assignStrategy.assignStrategy = userActivity.AssignmentStrategy;
        /** @type {?} */
        const roles = (/** @type {?} */ (userActivity.GetResourceRoles().filter((/**
         * @param {?} role
         * @return {?}
         */
        role => role instanceof HumanPerformerImpl))));
        partiInfo.humanPerformerList = PropertyHelper.getPerformerList(roles);
        if (userActivity.AssignmentStrategy === AssignmentStrategy.ASSIGN) {
            if (userActivity.AssignPerformerConfig) {
                /** @type {?} */
                const assignConfig = new AssignConfig();
                assignConfig.operator = userActivity.AssignPerformerConfig.Operator;
                assignConfig.multiSelect = userActivity.AssignPerformerConfig.MultiSelect;
                assignConfig.necessary = userActivity.AssignPerformerConfig.Necessary;
                partiInfo.assignStrategy.assignConfig = assignConfig;
                partiInfo.isAllScope = userActivity.AssignPerformerConfig.AllowGlobalAssign;
            }
            /** @type {?} */
            const roles = (/** @type {?} */ (userActivity.GetResourceRoles().filter((/**
             * @param {?} role
             * @return {?}
             */
            role => role instanceof PotentialOwnerImpl))));
            partiInfo.potentialOwnerList = PropertyHelper.getPerformerList(roles);
        }
        return partiInfo;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getParticipantOptions(userActivity) {
        /** @type {?} */
        const options = {};
        if (userActivity.ParticipantSetting != null) {
            options.ExclusionPerformers = userActivity.ParticipantSetting.ExclusionPerformers;
            options.NoPerformerStrategy = userActivity.ParticipantSetting.NoPerformerStrategy;
            options.HistoricFirst = userActivity.ParticipantSetting.HistoricFirst;
            options.automaticPerformers = userActivity.ParticipantSetting.automaticPerformers;
        }
        return options;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getAssignStrategy(userActivity) {
        /** @type {?} */
        const assignStrategy = new AssignStrategy();
        assignStrategy.assignStrategy = userActivity.AssignmentStrategy;
        if (userActivity.AssignPerformerConfig) {
            /** @type {?} */
            const assignConfig = new AssignConfig();
            assignConfig.operator = userActivity.AssignPerformerConfig.Operator;
            assignConfig.multiSelect = userActivity.AssignPerformerConfig.MultiSelect;
            assignConfig.necessary = userActivity.AssignPerformerConfig.Necessary;
            assignStrategy.assignConfig = assignConfig;
        }
        return assignStrategy;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getSignFrontInfo(userActivity) {
        /** @type {?} */
        const signFrontTest = new ActionOrganizationScopeDesign();
        signFrontTest.action = (/** @type {?} */ (ActionScope.AddSignFront));
        if (userActivity.AddSignFrontAble) {
            signFrontTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.AddSignFront));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            signFrontTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                signFrontTest.scope.participantInfo = new ParticipantInfo();
                signFrontTest.scope.participantInfo.potentialOwnerList = list;
                signFrontTest.scope.participantInfo.isAllScope = true;
            }
            else {
                signFrontTest.scope.participantInfo = new ParticipantInfo();
                signFrontTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            signFrontTest.enable = false;
        }
        return signFrontTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getSignBehindInfo(userActivity) {
        /** @type {?} */
        const signBehindTest = new ActionOrganizationScopeDesign();
        signBehindTest.action = (/** @type {?} */ (ActionScope.AddSignBehind));
        if (userActivity.AddSignBehindAble) {
            signBehindTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.AddSignBehind));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            signBehindTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                signBehindTest.scope.participantInfo = new ParticipantInfo();
                signBehindTest.scope.participantInfo.potentialOwnerList = list;
                signBehindTest.scope.participantInfo.isAllScope = true;
            }
            else {
                signBehindTest.scope.participantInfo = new ParticipantInfo();
                signBehindTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            signBehindTest.enable = false;
        }
        return signBehindTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getTransferScopeInfo(userActivity) {
        /** @type {?} */
        const transferScopeTest = new ActionOrganizationScopeDesign();
        transferScopeTest.action = (/** @type {?} */ (ActionScope.Transfer));
        if (userActivity.transferAble) {
            transferScopeTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.Transfer));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            transferScopeTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                transferScopeTest.scope.participantInfo = new ParticipantInfo();
                transferScopeTest.scope.participantInfo.potentialOwnerList = list;
                transferScopeTest.scope.participantInfo.isAllScope = true;
            }
            else {
                transferScopeTest.scope.participantInfo = new ParticipantInfo();
                transferScopeTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            transferScopeTest.enable = userActivity.transferAble;
        }
        return transferScopeTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getNotifyAble(userActivity) {
        /** @type {?} */
        const notifyScopeTest = new ActionOrganizationScopeDesign();
        notifyScopeTest.action = (/** @type {?} */ (ActionScope.Notify));
        if (userActivity.NotifyAble) {
            notifyScopeTest.enable = true;
            /** @type {?} */
            const roles = userActivity.dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.Notify));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            notifyScopeTest.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                notifyScopeTest.scope.participantInfo = new ParticipantInfo();
                notifyScopeTest.scope.participantInfo.potentialOwnerList = list;
                notifyScopeTest.scope.participantInfo.isAllScope = true;
            }
            else {
                notifyScopeTest.scope.participantInfo = new ParticipantInfo();
                notifyScopeTest.scope.participantInfo.isAllScope = false;
            }
        }
        else {
            notifyScopeTest.enable = userActivity.NotifyAble;
        }
        return notifyScopeTest;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getTimeLimitInfo(userActivity) {
        if (userActivity.timeLimitControl) {
            /** @type {?} */
            const timeLimit = new TimeLimitControlInfo();
            timeLimit.enable = userActivity.timeLimitControl.enable;
            timeLimit.tag = userActivity.timeLimitControl.tag;
            timeLimit.dueTime = userActivity.timeLimitControl.dueTime;
            timeLimit.timeUnit = userActivity.timeLimitControl.timeUnit;
            timeLimit.expireOperations = new Array();
            if (userActivity.timeLimitControl.expireOperations && userActivity.timeLimitControl.expireOperations.length > 0) {
                /** @type {?} */
                const operations = userActivity.timeLimitControl.expireOperations;
                for (const o of operations) {
                    if (o.ClrTypeID.indexOf('SendMessageExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperationInfo();
                        sendMessage.timeDuration = operation.timeDuration;
                        sendMessage.durationType = operation.durationType;
                        sendMessage.timeUnit = operation.timeUnit;
                        sendMessage.message = operation.message;
                        sendMessage.sendType = operation.sendType;
                        sendMessage.subject = operation.subject;
                        sendMessage.id = operation.id;
                        sendMessage.receiver = operation.receiver;
                        sendMessage.cycleEnable = operation.cycleEnable;
                        sendMessage.cycleTime = operation.cycleTime;
                        sendMessage.cycleTimeUnit = operation.cycleTimeUnit;
                        sendMessage.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'SendMessageExpireOperation';
                        if (operation.smsMessageTemplate) {
                            /** @type {?} */
                            const smsTemplate = new Object;
                            smsTemplate.code = operation.smsMessageTemplate.code;
                            smsTemplate.content = operation.smsMessageTemplate.content;
                            smsTemplate.smsMessageVariables = new Array();
                            if (operation.smsMessageTemplate.smsMessageVariables && operation.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of operation.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new Object;
                                    variable.id = WfDesignerUtils.createNM();
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsTemplate;
                        }
                        timeLimit.expireOperations.push(sendMessage);
                    }
                    else if (o.ClrTypeID.indexOf('AutoHandleExpireOperation') > 0) {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperationInfo();
                        autoHandle.id = operation.id;
                        autoHandle.durationType = operation.durationType;
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        timeLimit.expireOperations.push(autoHandle);
                    }
                }
            }
            return timeLimit;
        }
        return null;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getUrgeHandleRule(userActivity) {
        if (!userActivity.urgeHandleRule) {
            return null;
        }
        /** @type {?} */
        const rule = userActivity.urgeHandleRule;
        /** @type {?} */
        let urgeHandleRule = {
            urgeHandleAble: rule.urgeHandleAble,
            sendType: rule.sendType,
            earlyTime: rule.earlyTime,
            intervalTime: rule.intervalTime,
            urgeMessageSubject: rule.urgeMessageSubject,
            urgeMessageContent: rule.urgeMessageContent,
            addReminder: rule.addReminder,
            subjectEditable: rule.subjectEditable,
            contentEditable: rule.contentEditable
        };
        if (rule.smsMessageTemplate) {
            /** @type {?} */
            const smsTemplate = new Object;
            smsTemplate.code = rule.smsMessageTemplate.code;
            smsTemplate.content = rule.smsMessageTemplate.content;
            smsTemplate.smsMessageVariables = new Array();
            if (rule.smsMessageTemplate.smsMessageVariables && rule.smsMessageTemplate.smsMessageVariables.length > 0) {
                for (const v of rule.smsMessageTemplate.smsMessageVariables) {
                    /** @type {?} */
                    const variable = new Object;
                    variable.id = WfDesignerUtils.createNM();
                    variable.code = v.code;
                    variable.value = v.value;
                    variable.tag = v.tag;
                    smsTemplate.smsMessageVariables.push(variable);
                }
            }
            urgeHandleRule.smsMessageTemplate = smsTemplate;
        }
        return urgeHandleRule;
    }
    /**
     * @param {?} userActivity
     * @return {?}
     */
    getCheckConditions(userActivity) {
        if (userActivity.checkConditions && userActivity.checkConditions.length > 0) {
            return userActivity.checkConditions.map((/**
             * @param {?} c
             * @return {?}
             */
            c => ({
                value: c.value,
                checkTime: c.checkTime,
                errorTips: c.errorTips ? Array.from(c.errorTips).reduce((/**
                 * @param {?} obj
                 * @param {?} __1
                 * @return {?}
                 */
                (obj, [key, value]) => Object.assign(obj, { [key]: value })), {}) : null
            })));
        }
        return null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        this.updatePropsByIsOperation(obj);
    }
    /**
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    updatePropsByIsOperation(obj, isOperation = false) {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const userActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case UserActivityPropertyKeys.ParticipantSchemes: // 参与者属性
                this.updateParticipant(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.ParticipantOptions: // 参与者选项
                this.updateParticipantOptions(userActivity, obj);
                break;
            // case UserActivityPropertyKeys.AssignPerformer:
            //     this.updatePotentialOwnerImpl(graph.bpmnModel, userActivity, obj);
            //     break;
            // case UserActivityPropertyKeys.AssignStrategy:
            //     this.updateAssignStrategy(graph, userActivity, obj, isOperation);
            //     break;
            // case UserActivityPropertyKeys.OperatorConfig:
            //     this.updateOperatorConfig(userActivity, obj);
            //     break;
            case UserActivityPropertyKeys.CompleteStrategy:
                this.resetExecuteWorkItemMode(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.DisplayTerminal:
                this.resetDisplayTerminal(userActivity, obj);
                break;
            case UserActivityPropertyKeys.SignRule:
                this.resetSignRules(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.ApprovalItems:
                this.resetApprovalItems(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.wf_ExecuteForms_PC:
                this.resetExecuteForm(userActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case UserActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.resetExecuteForm(userActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case UserActivityPropertyKeys.SelectTargetAble:
                this.resetSelectTargetAble(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.JumpScope:
                this.resetJumpScope(userActivity, obj);
                break;
            case UserActivityPropertyKeys.BackWardRule:
                this.resetBackWardRule(userActivity, obj);
                break;
            case UserActivityPropertyKeys.MultiInstanceLoopCharacteristics:
                this.resetMultiInstanceLoopCharacteristics(userActivity, obj);
                break;
            case UserActivityPropertyKeys.Tools:
                this.resetTools(userActivity, obj);
                break;
            case UserActivityPropertyKeys.wf_TitleExpression:
                this.modifyTitleExpression(userActivity, obj);
                break;
            case UserActivityPropertyKeys.AddSignFrontAble:
                this.updateSignFrontSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.AddSignBehindAble:
                this.updateSignBehindsSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.NotifyAble:
                this.updateNotifySet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.transferScope:
                this.updateTransferScope(userActivity, obj);
                break;
            case UserActivityPropertyKeys.wf_CustomizeAction:
                this.updateCustomizeActions(userActivity, obj);
                break;
            case UserActivityPropertyKeys.timeLimitControl:
                this.updateTimeLimitControl(userActivity, obj);
                break;
            case UserActivityPropertyKeys.anonymousSet:
                this.updateAnonymousSet(userActivity, obj);
                break;
            case UserActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(userActivity, obj);
                break;
            case UserActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(userActivity, obj);
                break;
            case UserActivityPropertyKeys.approvalPivotConfig:
                this.updateApprovalPivotConfig(userActivity, obj);
                break;
            case UserActivityPropertyKeys.urgeHandleRule:
                this.updateUrgeHandleRule(userActivity, obj);
                break;
            case UserActivityPropertyKeys.imageSettings: // 更新变量设置属性
                this.updateImageSettings(userActivity, obj);
                break;
            case UserActivityPropertyKeys.checkConditions:
                this.updateCheckConditions(userActivity, obj, isOperation);
                break;
            case UserActivityPropertyKeys.otherAssignActivities:
                this.updateOtherAssignActivities(userActivity, obj);
                break;
            case UserActivityPropertyKeys.otherAssignActivityNodeInfos:
                this.updateOtherAssignActivities(userActivity, obj);
                break;
            case UserActivityPropertyKeys.otherAssignNodes:
                this.updateOtherAssignNodes(userActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === propertyId)) > -1) {
                    this.resetExtendProperty(userActivity, obj);
                }
                else {
                    super.updateProps(obj);
                }
                break;
        }
    }
    /**
     * 修改参与者
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    updateParticipant(userActivity, obj, isOperation = false) {
        /** @type {?} */
        const performerInfo = obj.propertyValue;
        if (performerInfo.assignStrategy.assignStrategy === AssignmentStrategy.CLAIM
            && userActivity.ParticipantSetting
            && userActivity.ParticipantSetting.automaticPerformers
            && userActivity.ParticipantSetting.automaticPerformers.length > 0) {
            // Utils.postMessage(ResourceKeys.wf_showTip, {
            //     type: 'message',
            //     level: 'warning',
            //     message: '当前节点【参与者选项】已设置自动审批，【分配策略】不允许设置为【领用】'
            // });
        }
        else {
            this.checkOtherAssignNodes(userActivity, performerInfo);
            userActivity.AssignPerformerConfig = null;
            userActivity.AssignmentStrategy = performerInfo.assignStrategy.assignStrategy;
            /** @type {?} */
            const resourceRoles = userActivity.GetResourceRoles();
            if (resourceRoles && resourceRoles.length > 0) {
                resourceRoles.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    if (r instanceof HumanPerformerImpl) {
                        userActivity.RemoveResourceRole(r.Id);
                    }
                    else if (r instanceof PotentialOwnerImpl) {
                        userActivity.RemoveResourceRole(r.Id);
                    }
                }));
            }
            if (performerInfo.humanPerformerList && performerInfo.humanPerformerList.length > 0) {
                for (const humanPerformer of performerInfo.humanPerformerList) {
                    switch (humanPerformer.type) {
                        case UserParticipantExpression.Clr_Type_ID:
                            this.addUserParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case VariableParticipantExpression.Clr_Type_ID:
                            this.addVariableParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case PositionParticipantExpression.Clr_Type_ID:
                            this.addPositionParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ComponentParticipantExpression.Clr_Type_ID:
                            this.addComponentParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ReportingLineParticipantExpression.Clr_Type_ID:
                            this.addReportingLineParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case ActivityExecutorParticipantExpression.Clr_Type_ID:
                            this.addActivityExecutorParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                        case MatrixParticipantExpression.Clr_Type_ID:
                            this.addMatrixParticipant(userActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                            break;
                    }
                }
            }
            if (performerInfo.assignStrategy.assignStrategy === AssignmentStrategy.ASSIGN) {
                /** @type {?} */
                const assignPerformerConfig = new AssignPerformerConfig(userActivity.Model);
                assignPerformerConfig.Operator = performerInfo.assignStrategy.assignConfig.operator;
                assignPerformerConfig.MultiSelect = performerInfo.assignStrategy.assignConfig.multiSelect;
                assignPerformerConfig.Necessary = performerInfo.assignStrategy.assignConfig.necessary;
                assignPerformerConfig.AllowGlobalAssign = performerInfo.isAllScope;
                userActivity.AssignPerformerConfig = assignPerformerConfig;
                if (!performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', null);
                                break;
                        }
                    }
                }
            }
            // 分配策略为领用时，完成策略自动修改为抢占模式
            if (userActivity.AssignmentStrategy === AssignmentStrategy.CLAIM) {
                userActivity.ExecuteWorkItemMode = ExecuteWorkItemMode.Preempt;
                userActivity.CounterSignRules = null;
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} performerInfo
     * @return {?}
     */
    checkOtherAssignNodes(userActivity, performerInfo) {
        if (userActivity.AssignmentStrategy !== AssignmentStrategy.ASSIGN) {
            return;
        }
        /** @type {?} */
        const bpmnModel = userActivity.Model;
        /** @type {?} */
        const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
        if (performerInfo.assignStrategy.assignStrategy !== AssignmentStrategy.ASSIGN) {
            for (const k in flowElements) {
                if (flowElements[k] instanceof UserActivity) {
                    /** @type {?} */
                    const activity = (/** @type {?} */ (flowElements[k]));
                    if (activity.otherAssignNodes && activity.otherAssignNodes.otherAssignActivities
                        && activity.otherAssignNodes.otherAssignActivities.length > 0
                        && activity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id === userActivity.Id)) > -1) {
                        activity.otherAssignNodes.otherAssignActivities = activity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id !== userActivity.Id));
                    }
                }
                else if (flowElements[k] instanceof OperationActivity) {
                    /** @type {?} */
                    const operationActivity = (/** @type {?} */ (flowElements[k]));
                    if (operationActivity.otherAssignNodes && operationActivity.otherAssignNodes.otherAssignActivities
                        && operationActivity.otherAssignNodes.otherAssignActivities.length > 0
                        && operationActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id === userActivity.Id)) > -1) {
                        operationActivity.otherAssignNodes.otherAssignActivities = operationActivity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id !== userActivity.Id));
                    }
                }
                else if (flowElements[k] instanceof StartActivity) {
                    /** @type {?} */
                    const startActivity = (/** @type {?} */ (flowElements[k]));
                    if (startActivity.otherAssignNodes && startActivity.otherAssignNodes.otherAssignActivities
                        && startActivity.otherAssignNodes.otherAssignActivities.length > 0
                        && startActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id === userActivity.Id)) > -1) {
                        startActivity.otherAssignNodes.otherAssignActivities = startActivity.otherAssignNodes.otherAssignActivities.filter((/**
                         * @param {?} id
                         * @return {?}
                         */
                        id => id !== userActivity.Id));
                    }
                }
            }
        }
        else {
            if (userActivity.AssignPerformerConfig.Operator === 'currentUser'
                && performerInfo.assignStrategy.assignConfig.operator !== 'currentUser') {
                for (const k in flowElements) {
                    if (flowElements[k] instanceof UserActivity) {
                        /** @type {?} */
                        const activity = (/** @type {?} */ (flowElements[k]));
                        if (activity.otherAssignNodes && activity.otherAssignNodes.otherAssignActivities
                            && activity.otherAssignNodes.otherAssignActivities.length > 0
                            && activity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === userActivity.Id)) > -1) {
                            activity.otherAssignNodes.otherAssignActivities = activity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id !== userActivity.Id));
                        }
                    }
                    else if (flowElements[k] instanceof OperationActivity) {
                        /** @type {?} */
                        const operationActivity = (/** @type {?} */ (flowElements[k]));
                        if (operationActivity.otherAssignNodes && operationActivity.otherAssignNodes.otherAssignActivities
                            && operationActivity.otherAssignNodes.otherAssignActivities.length > 0
                            && operationActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === userActivity.Id)) > -1) {
                            operationActivity.otherAssignNodes.otherAssignActivities = operationActivity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id !== userActivity.Id));
                        }
                    }
                }
            }
            else if (userActivity.AssignPerformerConfig.Operator === 'procInstCreator'
                && performerInfo.assignStrategy.assignConfig.operator !== 'procInstCreator') {
                for (const k in flowElements) {
                    if (flowElements[k] instanceof StartActivity) {
                        /** @type {?} */
                        const startActivity = (/** @type {?} */ (flowElements[k]));
                        if (startActivity.otherAssignNodes && startActivity.otherAssignNodes.otherAssignActivities
                            && startActivity.otherAssignNodes.otherAssignActivities.length > 0
                            && startActivity.otherAssignNodes.otherAssignActivities.findIndex((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id === userActivity.Id)) > -1) {
                            startActivity.otherAssignNodes.otherAssignActivities = startActivity.otherAssignNodes.otherAssignActivities.filter((/**
                             * @param {?} id
                             * @return {?}
                             */
                            id => id !== userActivity.Id));
                        }
                    }
                }
            }
        }
    }
    /**
     * 添加用户参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addUserParticipant(userActivity, performer, type, scope) {
        /** @type {?} */
        let userParticipant;
        if (performer instanceof UserParticipantExpression) {
            userParticipant = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            userParticipant = new UserParticipantExpression(userActivity.Model, performer.performerId, performer.performerName, performer.orgType);
            userParticipant.id = performer.id;
            userParticipant.OrgId = performer.orgId;
            userParticipant.actionScope = ActionScope.Default;
            userParticipant.OrgName = performer.orgName;
            userParticipant.Tag = performer.tag;
            userParticipant.OrgType = performer.orgType;
            userParticipant.order = performer.order;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                userParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                userParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(userParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 添加变量参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addVariableParticipant(userActivity, performer, type, scope) {
        /** @type {?} */
        let variablePerformer;
        if (performer instanceof VariableParticipantExpression) {
            variablePerformer = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            variablePerformer = new VariableParticipantExpression(userActivity.Model, performer.performerId, performer.performerName, performer.orgType);
            variablePerformer.id = performer.id;
            variablePerformer.actionScope = ActionScope.Default;
            variablePerformer.Name = performer.performerName ? performer.performerName : performer.name;
            variablePerformer.Tag = performer.tag;
            variablePerformer.VarValue = performer.varValue;
            variablePerformer.VarType = performer.varType;
            variablePerformer.order = performer.order;
            variablePerformer.Relation = performer.relation;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                variablePerformer.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                variablePerformer.actionScope = scope;
                userActivity.dynamicParticipants.push(variablePerformer);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 添加岗位参与者
     * @param {?} userActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addPositionParticipant(userActivity, performer, type, scope) {
        /** @type {?} */
        let posiParticipant;
        if (performer instanceof PositionParticipantExpression) {
            posiParticipant = performer;
        }
        else {
            performer = (/** @type {?} */ (performer));
            posiParticipant = new PositionParticipantExpression(userActivity.Model, performer.performerId, performer.performerName);
            posiParticipant.id = performer.id;
            posiParticipant.actionScope = ActionScope.Default;
            posiParticipant.PositionType = performer.positionType;
            posiParticipant.order = performer.order;
            if (performer.positionType === '1') {
                posiParticipant.OrgId = performer.orgId;
                posiParticipant.OrgName = performer.orgName;
                posiParticipant.OrgType = performer.orgType;
            }
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                posiParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                posiParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(posiParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 添加构件参与者
     * @param {?} userActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addComponentParticipant(userActivity, component, type, scope) {
        /** @type {?} */
        let componentParticipant;
        if (component instanceof ComponentParticipantExpression) {
            componentParticipant = component;
        }
        else {
            component = (/** @type {?} */ (component));
            componentParticipant = new ComponentParticipantExpression(userActivity.Model);
            componentParticipant.id = component.id;
            componentParticipant.componentId = component.metadataId;
            componentParticipant.actionScope = ActionScope.Default;
            componentParticipant.componentName = component.name;
            componentParticipant.methodName = component.methodName;
            componentParticipant.order = component.order;
            componentParticipant.methodCode = component.methodCode;
            if (component.actualParameters && component.actualParameters.length > 0) {
                /** @type {?} */
                let actParas = new Array();
                for (let para of component.actualParameters) {
                    /** @type {?} */
                    let actPara = new ActualParameter(userActivity.Model, para.code, para.value, para.valueText);
                    // TODO:更新参与者会默认把构件参数属性改为contant，临时修复，后续代码优化
                    actPara.Tag = para.tag;
                    if (para.fetchValueMode) {
                        switch (para.fetchValueMode) {
                            case 'express':
                                actPara.Tag = 'expression';
                                break;
                            case 'none':
                                actPara.Tag = 'expression';
                                break;
                            default:
                                actPara.Tag = 'constant';
                                break;
                        }
                    }
                    actParas.push(actPara);
                }
                componentParticipant.actualParameters = actParas;
            }
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                componentParticipant.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = component.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = component.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = component.order;
            if (scope) {
                componentParticipant.actionScope = scope;
                userActivity.dynamicParticipants.push(componentParticipant);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addReportingLineParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let reportingLine;
        if (participant instanceof ReportingLineParticipantExpression) {
            reportingLine = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            reportingLine = new ReportingLineParticipantExpression(userActivity.Model);
            reportingLine.id = participant.id;
            reportingLine.actionScope = ActionScope.Default;
            reportingLine.ReportingLineDefId = participant.reportingLineDefId;
            reportingLine.ReportingLineDefName = participant.reportingLineDefName;
            reportingLine.RefOrgId = participant.refOrgId;
            reportingLine.RefUserId = participant.refUserId;
            reportingLine.RefEmployeeId = participant.refEmployeeId;
            reportingLine.order = participant.order;
            reportingLine.Dimension = participant.dimension;
            reportingLine.Tag = participant.tag;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                reportingLine.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                reportingLine.actionScope = scope;
                userActivity.dynamicParticipants.push(reportingLine);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addActivityExecutorParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let activityExecutor;
        if (participant instanceof ActivityExecutorParticipantExpression) {
            activityExecutor = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            activityExecutor = new ActivityExecutorParticipantExpression(userActivity.Model);
            activityExecutor.id = participant.id;
            activityExecutor.activityDefId = participant.activityDefId;
            activityExecutor.actionScope = ActionScope.Default;
            activityExecutor.order = participant.order;
            activityExecutor.activityDefName = participant.activityDefName;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                activityExecutor.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                activityExecutor.actionScope = scope;
                userActivity.dynamicParticipants.push(activityExecutor);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addMatrixParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let matrix;
        matrix = new MatrixParticipantExpression(userActivity.Model);
        if (participant instanceof MatrixParticipantExpression) {
            matrix = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            matrix = new MatrixParticipantExpression(userActivity.Model);
            matrix.order = participant.order;
            matrix.id = participant.id;
            matrix.actionScope = ActionScope.Default;
            matrix.matrixDefId = participant.matrixDefId;
            matrix.matrixDefName = participant.matrixDefName;
            matrix.conditionField1 = participant.conditionField1;
            matrix.conditionFieldText1 = participant.conditionFieldText1;
            matrix.conditionField2 = participant.conditionField2;
            matrix.conditionFieldText2 = participant.conditionFieldText2;
            matrix.conditionField3 = participant.conditionField3;
            matrix.conditionFieldText3 = participant.conditionFieldText3;
            matrix.multivaluedCondition = participant.multivaluedCondition;
            matrix.dataFieldAlias = participant.dataFieldAlias;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                matrix.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                matrix.actionScope = scope;
                userActivity.dynamicParticipants.push(matrix);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} userActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addOrganizationParticipant(userActivity, participant, type, scope) {
        /** @type {?} */
        let potential;
        if (participant instanceof OrganizationParticipantExpression) {
            potential = participant;
        }
        else {
            participant = (/** @type {?} */ (participant));
            potential = new OrganizationParticipantExpression(userActivity.Model);
            potential.id = participant.id;
            potential.order = participant.order;
            potential.actionScope = ActionScope.AssignUser;
            // potential.organizationLevel = participant.organizationLevel;
            if (participant.organizationLevel === 'DEPARTMENT') {
                potential.organizationLevel = OrganizationLevel.DEPARTMENT;
            }
            else if (participant.organizationLevel === 'UNIT') {
                potential.organizationLevel = OrganizationLevel.UNIT;
            }
            else if (participant.organizationLevel === 'DEFAULT') {
                potential.organizationLevel = OrganizationLevel.DEFAULT;
            }
            potential.organizationId = participant.organizationId;
            potential.organizationName = participant.organizationName;
            potential.includeChildren = participant.includeChildren;
            potential.tag = participant.tag;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                potential.condition = condition;
            }
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(userActivity.Model);
            humanPerformerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            userActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(userActivity.Model);
            otentialOwnerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(userActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                potential.actionScope = scope;
                userActivity.dynamicParticipants.push(potential);
            }
            else {
                userActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * 修改参与者选项
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateParticipantOptions(userActivity, obj) {
        /** @type {?} */
        const options = obj.propertyValue;
        if (userActivity.ParticipantSetting != null) {
            userActivity.ParticipantSetting.ExclusionPerformers = options.ExclusionPerformers;
            userActivity.ParticipantSetting.NoPerformerStrategy = options.NoPerformerStrategy;
            userActivity.ParticipantSetting.HistoricFirst = options.HistoricFirst;
            userActivity.ParticipantSetting.automaticPerformers = options.automaticPerformers;
        }
        else {
            /** @type {?} */
            let participantSetting = new ParticipantSetting(userActivity.Model);
            participantSetting.ExclusionPerformers = options.ExclusionPerformers;
            participantSetting.NoPerformerStrategy = options.NoPerformerStrategy;
            participantSetting.HistoricFirst = options.HistoricFirst;
            participantSetting.automaticPerformers = options.automaticPerformers;
            userActivity.ParticipantSetting = participantSetting;
        }
    }
    /**
     * 修改完成策略属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetExecuteWorkItemMode(userActivity, obj, isOperation = false) {
        if (userActivity) {
            userActivity.ExecuteWorkItemMode = obj.propertyValue;
            //抢占模式下清空会签规则
            if (userActivity.ExecuteWorkItemMode === ExecuteWorkItemMode.Preempt) {
                userActivity.CounterSignRules = null;
            }
            else {
                // 会签规则不存在时，即由抢占变为会签时，初始化会签规则
                // 并行会签和串行会签之间切换时，不刷新会签规则
                if (!userActivity.CounterSignRules) {
                    userActivity.CounterSignRules = new Array();
                }
                //会签策略时,不允许跳转；且驳回规则不允许动态选择驳回级次(驳回规则目前需要在流程设计器调整)
                userActivity.SelectTargetAble = false;
                userActivity.JumpScope = null;
                // 切换会签策略时，分配策略不能是领用,自动切换为所有
                // 2023-2-9 修复：由于新增了备选办理人，直接指派导致切换时时备选办理人丢失，修改为只有是领用才切到指所有
                if (userActivity.AssignmentStrategy === AssignmentStrategy.CLAIM) {
                    userActivity.AssignmentStrategy = AssignmentStrategy.ALL;
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetDisplayTerminal(userActivity, obj, isOperation = false) {
        if (userActivity) {
            userActivity.DisplayTerminal = obj.propertyValue;
        }
    }
    /**
     * 更新会签规则属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetSignRules(userActivity, obj, isOperation = false) {
        if (userActivity) {
            /** @type {?} */
            let rules = (/** @type {?} */ (obj.propertyValue));
            userActivity.CounterSignRules = null;
            if (rules && rules.length > 0) {
                userActivity.CounterSignRules = new Array();
                for (let rule of rules) {
                    /** @type {?} */
                    let counterSignRule = new CounterSignRule(userActivity.Model);
                    /** @type {?} */
                    let condition = new Condition(userActivity.Model);
                    condition.Value = rule.completionCondition;
                    counterSignRule.ConclusionValue = rule.conclusionValue;
                    counterSignRule.CalculateType = rule.calculateType;
                    counterSignRule.ConditionValue = rule.conditionValue;
                    counterSignRule.WaitAllVotes = rule.waitAllVotes;
                    counterSignRule.CompletionCondition = condition;
                    userActivity.CounterSignRules.push(counterSignRule);
                }
            }
        }
    }
    /**
     * 更新自定义项属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetApprovalItems(userActivity, obj, isOperation = false) {
        if (userActivity) {
            /** @type {?} */
            let conclusions = (/** @type {?} */ (obj.propertyValue));
            userActivity.Conclusions = new Array();
            for (let conclusion of conclusions) {
                /** @type {?} */
                let item = new ConclusionItem(userActivity.Model);
                item.Value = conclusion.value;
                item.Text = conclusion.text;
                item.WorkFlowAction = conclusion.workFlowAction;
                item.IsDefault = conclusion.isDefault;
                item.commentNecessary = conclusion.commentNecessary;
                item.certification = conclusion.certification;
                item.attachmentNecessary = conclusion.attachmentNecessary;
                item.signatureNecessary = conclusion.signatureNecessary;
                item.defaultComment = conclusion.defaultComment;
                userActivity.Conclusions.push(item);
            }
        }
        // 判断审批项是否包含驳回？不包含时，驳回规则清空
        if (!this.isBackConclusionExist(userActivity.Conclusions)) {
            userActivity.BackWardRule = null;
        }
        else if (!userActivity.BackWardRule) {
            userActivity.BackWardRule = new BackWardRule(userActivity.Model);
        }
    }
    /**
     * 更新审批活动表单定义属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    resetExecuteForm(userActivity, obj, terminal) {
        if (userActivity) {
            /** @type {?} */
            let form = (/** @type {?} */ (obj.propertyValue));
            if (!userActivity.ExecuteForms) {
                userActivity.ExecuteForms = new Array();
            }
            userActivity.ExecuteForms = userActivity.ExecuteForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType !== terminal));
            if (form) {
                /** @type {?} */
                let params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                let actParas = new Array();
                if (params && params.length > 0) {
                    for (let para of params) {
                        /** @type {?} */
                        let actPara = new ActualParameter(userActivity.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                /** @type {?} */
                const id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                let item = new ExecuteForm(userActivity.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                userActivity.ExecuteForms.push(item);
            }
        }
    }
    /**
     * 更新是否允许跳转属性
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    resetSelectTargetAble(userActivity, obj, isOperation = false) {
        /** @type {?} */
        const SelectTargetAble = (/** @type {?} */ (obj.propertyValue));
        userActivity.SelectTargetAble = SelectTargetAble;
        if (userActivity.SelectTargetAble) {
        }
        else {
            userActivity.JumpScope = null;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetJumpScope(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            /** @type {?} */
            let jumpScope = new JumpScope(userActivity.Model);
            jumpScope.Category = data.Category;
            jumpScope.DefaultType = data.DefaultType;
            jumpScope.DestinationActivities = data.DestinationActivities;
            jumpScope.DefaultActivity = data.DefaultActivity;
            userActivity.JumpScope = jumpScope;
        }
        else {
            userActivity.JumpScope = null;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetBackWardRule(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let backWardRule = new BackWardRule(userActivity.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        userActivity.BackWardRule = backWardRule;
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetMultiInstanceLoopCharacteristics(userActivity, obj) {
        if (obj.propertyValue) {
            /** @type {?} */
            const data = obj.propertyValue;
            /** @type {?} */
            let loopCharacteristics = new MultiInstanceLoopCharacteristics(userActivity.Model);
            loopCharacteristics.enable = data.enable;
            loopCharacteristics.sequential = data.sequential;
            loopCharacteristics.loopCardinality = new Expression(userActivity.Model);
            if (data.loopCardinality) {
                /** @type {?} */
                let variableExpression = new SemanticExpression(userActivity.Model);
                variableExpression.Value = data.loopCardinality;
                loopCharacteristics.loopCardinality.MexExpression = variableExpression;
            }
            loopCharacteristics.completionCondition = data.completionCondition;
            /** @type {?} */
            let rules = (/** @type {?} */ (data.completionConditionRules));
            loopCharacteristics.completionConditionRules = null;
            if (rules && rules.length > 0) {
                loopCharacteristics.completionConditionRules = new Array();
                for (let rule of rules) {
                    /** @type {?} */
                    let counterSignRule = new CounterSignRule(userActivity.Model);
                    /** @type {?} */
                    let condition = new Condition(userActivity.Model);
                    condition.Value = rule.CompletionCondition.Value;
                    counterSignRule.ConclusionValue = rule.ConclusionValue;
                    counterSignRule.CalculateType = rule.CalculateType;
                    counterSignRule.ConditionValue = rule.ConditionValue;
                    counterSignRule.WaitAllVotes = rule.WaitAllVotes;
                    counterSignRule.CompletionCondition = condition;
                    loopCharacteristics.completionConditionRules.push(counterSignRule);
                }
            }
            userActivity.LoopCharacteristics = loopCharacteristics;
        }
    }
    /**
     * 更新活动节点标题
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    modifyTitleExpression(userActivity, obj) {
        if (userActivity.taskTitle) {
            userActivity.taskTitle.valueLanguage = obj.propertyValue;
            userActivity.taskTitle.value = obj.propertyValue['zh-CHS'];
        }
        else {
            /** @type {?} */
            const title = new TitleExpression(userActivity.Model, obj.propertyValue['zh-CHS'], obj.propertyValue);
            userActivity.taskTitle = title;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetTools(userActivity, obj) {
        /** @type {?} */
        let tools = (/** @type {?} */ (obj.propertyValue));
        userActivity.Tools = new Array();
        if (tools && tools.length > 0) {
            for (let tool of tools) {
                /** @type {?} */
                let component = new Component(userActivity.Model);
                component.Id = tool.id;
                component.Name = tool.name;
                component.Time = tool.executionTime;
                // TODO 写死了构件类型
                component.ComponentType = 'WebServiceComponent';
                component.MetadataId = tool.metadataId;
                component.MethodCode = tool.methodCode;
                component.isForCompensation = tool.isForCompensation;
                component.ActualParameters = [];
                if (tool.actualParameters && ((/** @type {?} */ (tool.actualParameters))).length > 0) {
                    for (let a of ((/** @type {?} */ (tool.actualParameters)))) {
                        /** @type {?} */
                        let parameter = new ActualParameter(userActivity.Model, a.code, a.value);
                        component.ActualParameters.push(parameter);
                    }
                }
                userActivity.Tools.push(component);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateSignFrontSet(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.AddSignFront));
        userActivity.AddSignFrontAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.AddSignFront;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, (potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner))), 'potentialOwner', ActionScope.AddSignFront);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateSignBehindsSet(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.AddSignBehind));
        userActivity.AddSignBehindAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.AddSignBehind;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.AddSignBehind);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateNotifySet(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.Notify));
        userActivity.NotifyAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Notify;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateTransferScope(userActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        userActivity.dynamicParticipants = userActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.Transfer));
        userActivity.transferAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(userActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Transfer;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                userActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type ? potentialOwner.type : ((potentialOwner instanceof ParticipantExpression) ? potentialOwner.ClrTypeID : null)) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(userActivity, potentialOwner instanceof ParticipantExpression ? potentialOwner : (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Transfer);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateTimeLimitControl(userActivity, obj) {
        /** @type {?} */
        const timeLimitInfo = (/** @type {?} */ (obj.propertyValue));
        userActivity.timeLimitControl = null;
        if (timeLimitInfo) {
            /** @type {?} */
            const control = new TimeLimitControl(userActivity.Model);
            control.enable = timeLimitInfo.enable;
            control.tag = timeLimitInfo.tag;
            control.dueTime = timeLimitInfo.dueTime;
            control.timeUnit = timeLimitInfo.timeUnit;
            control.expireOperations = new Array();
            if (timeLimitInfo.expireOperations && timeLimitInfo.expireOperations.length > 0) {
                for (const o of timeLimitInfo.expireOperations) {
                    if (o.operationTypeName === 'SendMessageExpireOperation' || !o.operationTypeName) {
                        /** @type {?} */
                        const entity = (/** @type {?} */ (o));
                        /** @type {?} */
                        const sendMessage = new SendMessageExpireOperation(userActivity.Model);
                        sendMessage.id = BpmnModelHelper.GenerateElementId();
                        sendMessage.durationType = (/** @type {?} */ (entity.durationType));
                        sendMessage.timeDuration = entity.timeDuration;
                        sendMessage.timeUnit = entity.timeUnit;
                        sendMessage.message = entity.message;
                        sendMessage.subject = entity.subject;
                        sendMessage.sendType = entity.sendType;
                        sendMessage.receiver = entity.receiver;
                        sendMessage.cycleEnable = entity.cycleEnable;
                        sendMessage.cycleTime = entity.cycleTime;
                        sendMessage.cycleTimeUnit = entity.cycleTimeUnit;
                        sendMessage.operationTypeName = entity.operationTypeName ? entity.operationTypeName : 'SendMessageExpireOperation';
                        if (entity.smsMessageTemplate) {
                            /** @type {?} */
                            const smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
                            smsMessageTemplate.code = entity.smsMessageTemplate.code;
                            smsMessageTemplate.content = entity.smsMessageTemplate.content;
                            smsMessageTemplate.smsMessageVariables = new Array();
                            if (entity.smsMessageTemplate.smsMessageVariables && entity.smsMessageTemplate.smsMessageVariables.length > 0) {
                                for (const v of entity.smsMessageTemplate.smsMessageVariables) {
                                    /** @type {?} */
                                    const variable = new SmsMessageVariable(userActivity.Model);
                                    variable.code = v.code;
                                    variable.value = v.value;
                                    variable.tag = v.tag;
                                    smsMessageTemplate.smsMessageVariables.push(variable);
                                }
                            }
                            sendMessage.smsMessageTemplate = smsMessageTemplate;
                        }
                        control.expireOperations.push(sendMessage);
                    }
                    else if (o.operationTypeName === 'AutoHandleExpireOperation') {
                        /** @type {?} */
                        const operation = (/** @type {?} */ (o));
                        /** @type {?} */
                        const autoHandle = new AutoHandleExpireOperation(userActivity.Model);
                        autoHandle.id = o.id;
                        autoHandle.durationType = operation.durationType;
                        autoHandle.timeDuration = operation.timeDuration;
                        autoHandle.timeUnit = operation.timeUnit;
                        autoHandle.operationTypeName = operation.operationTypeName ? operation.operationTypeName : 'AutoHandleExpireOperation';
                        autoHandle.autoHandleType = operation.autoHandleType;
                        autoHandle.message = operation.message;
                        control.expireOperations.push(autoHandle);
                    }
                }
            }
            userActivity.timeLimitControl = control;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateAnonymousSet(userActivity, obj) {
        /** @type {?} */
        const anonymousSet = obj.propertyValue;
        if (anonymousSet) {
            userActivity.anonymous = anonymousSet.isAnonymity;
            userActivity.anonymousText = anonymousSet.anonymous;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateCustomizeActions(userActivity, obj) {
        /** @type {?} */
        let actions = (/** @type {?} */ (obj.propertyValue));
        userActivity.customizeActions = new Array();
        if (actions && actions.length > 0) {
            for (let a of actions) {
                /** @type {?} */
                let action = new CustomizeAction(userActivity.Model);
                action.id = BpmnModelHelper.GenerateElementId();
                action.code = a.code;
                action.name = a.name;
                action.terminalType = a.terminalType;
                action.actualParameters = [];
                if (a.actualParameters && a.actualParameters.length > 0) {
                    for (let p of a.actualParameters) {
                        /** @type {?} */
                        let parameter = new ActualParameter(userActivity.Model, p.Name, p.Value, p.ValueText, p.Tag || 'expression');
                        action.actualParameters.push(parameter);
                    }
                }
                userActivity.customizeActions.push(action);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(userActivity, obj) {
        /** @type {?} */
        const bpmnModel = userActivity.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (userActivity.variableSettings && userActivity.variableSettings.length > 0) {
            for (const v of userActivity.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        userActivity.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                userActivity.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateImageSettings(userActivity, obj) {
        /** @type {?} */
        let Settings = (/** @type {?} */ (obj.propertyValue));
        if (userActivity.imageSettings) {
            userActivity.imageSettings = new ImageSettings(userActivity.Model);
        }
        if (Settings && Settings.imageOperation) {
            /** @type {?} */
            const imageSettings = new ImageSettings(userActivity.Model);
            imageSettings.imageOperation = Settings.imageOperation;
            userActivity.imageSettings = imageSettings;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @param {?=} isOperation
     * @return {?}
     */
    updateCheckConditions(userActivity, obj, isOperation = false) {
        /** @type {?} */
        const checkConditions = (/** @type {?} */ (obj.propertyValue));
        userActivity.checkConditions = new Array();
        for (const c of checkConditions) {
            if (c.value) {
                /** @type {?} */
                const condition = new CheckCondition(userActivity.Model);
                condition.value = c.value;
                condition.checkTime = c.checkTime;
                condition.errorTips = new Map();
                if (c.errorTips) {
                    for (let key in c.errorTips) {
                        condition.errorTips.set(key, c.errorTips[key]);
                    }
                }
                userActivity.checkConditions.push(condition);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignNodes(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            // const otherAssignNodes = new OtherAssignNodes(userActivity.Model);
            // otherAssignNodes.otherAssignActivities = new Array();
            // userActivity.otherAssignNodes = otherAssignNodes;
            userActivity.otherAssignNodes = new OtherAssignNodes(userActivity.Model);
        }
        else {
            userActivity.otherAssignNodes = null;
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignActivities(userActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data && data.length > 0) {
            if (typeof data[0] === "string") {
                userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(userActivity.Model);
                    other.activityDefinitionId = d;
                    other.required = false;
                    other.condition = new Condition(userActivity.Model);
                    userActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            else {
                userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(userActivity.Model);
                    other.activityDefinitionId = d.activityDefinitionId;
                    other.required = d.required;
                    other.condition = new Condition(userActivity.Model);
                    other.condition.Value = d.condition.Value;
                    userActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            // userActivity.otherAssignNodes.otherAssignActivities = [...data];
        }
        else {
            userActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateMessageNotices(userActivity, obj) {
        /** @type {?} */
        let notices = (/** @type {?} */ (obj.propertyValue));
        userActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(userActivity.Model);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                n.receivers = n.receivers.filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                (r) => r.type));
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(userActivity.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(userActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(userActivity.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(userActivity.Model);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                userActivity.messageNotices.push(messageNotice);
            }
        }
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateApprovalPivotConfig(userActivity, obj) {
        /** @type {?} */
        let config = obj.propertyValue;
        /** @type {?} */
        const approvalPivotConfig = new ApprovalPivotConfig(userActivity.Model);
        approvalPivotConfig.enable = config.enable;
        approvalPivotConfig.expand = config.expand;
        approvalPivotConfig.title = config.title;
        approvalPivotConfig.approvalPivots = new Array();
        if (config.approvalPivots && config.approvalPivots.length > 0) {
            for (const a of config.approvalPivots) {
                /** @type {?} */
                const approvalPivot = new ApprovalPivot(userActivity.Model);
                approvalPivot.type = a.type;
                approvalPivot.title = a.title;
                approvalPivot.description = a.description;
                if (a.condition) {
                    /** @type {?} */
                    const condition = new Condition(userActivity.Model);
                    condition.Value = a.condition;
                    approvalPivot.condition = condition;
                }
                approvalPivotConfig.approvalPivots.push(approvalPivot);
            }
        }
        userActivity.approvalPivotConfig = approvalPivotConfig;
    }
    /**
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    updateUrgeHandleRule(userActivity, obj) {
        /** @type {?} */
        const rule = obj.propertyValue;
        /** @type {?} */
        const urgeHandleRule = new UrgeHandleRule(userActivity.Model);
        urgeHandleRule.urgeHandleAble = rule.urgeHandleAble;
        urgeHandleRule.sendType = rule.sendType;
        urgeHandleRule.earlyTime = rule.earlyTime;
        urgeHandleRule.intervalTime = rule.intervalTime;
        urgeHandleRule.urgeMessageSubject = rule.urgeMessageSubject;
        urgeHandleRule.urgeMessageContent = rule.urgeMessageContent;
        urgeHandleRule.addReminder = rule.addReminder;
        urgeHandleRule.subjectEditable = rule.subjectEditable;
        urgeHandleRule.contentEditable = rule.contentEditable;
        if (rule.smsMessageTemplate) {
            /** @type {?} */
            const smsMessageTemplate = new SmsMessageTemplate(userActivity.Model);
            smsMessageTemplate.code = rule.smsMessageTemplate.code;
            smsMessageTemplate.content = rule.smsMessageTemplate.content;
            smsMessageTemplate.smsMessageVariables = new Array();
            if (rule.smsMessageTemplate.smsMessageVariables && rule.smsMessageTemplate.smsMessageVariables.length > 0) {
                for (const v of rule.smsMessageTemplate.smsMessageVariables) {
                    /** @type {?} */
                    const variable = new SmsMessageVariable(userActivity.Model);
                    variable.code = v.code;
                    variable.value = v.value;
                    variable.tag = v.tag;
                    smsMessageTemplate.smsMessageVariables.push(variable);
                }
            }
            urgeHandleRule.smsMessageTemplate = smsMessageTemplate;
        }
        userActivity.urgeHandleRule = urgeHandleRule;
    }
    /**
     * 删除节点或参与者时，对应删除HumanResourceRoles
     * @param {?} ids
     * @return {?}
     */
    removeHumanResourceRoles(ids) {
        /** @type {?} */
        const bpmnModel = this.flowElement.Model;
        if (ids && ids.length > 0) {
            /** @type {?} */
            const userActivitys = bpmnModel.DefaultProcess.GetFlowElements();
            /** @type {?} */
            let perfIds = '';
            for (let key in userActivitys) {
                if (userActivitys[key] instanceof UserActivity) {
                    /** @type {?} */
                    const userAct = (/** @type {?} */ (userActivitys[key]));
                    if (userAct.ParticipantSchemes && userAct.ParticipantSchemes.length > 0 && userAct.ParticipantSchemes[0].Performers) {
                        perfIds += (userAct.ParticipantSchemes[0].Performers + ',');
                    }
                }
            }
            /** @type {?} */
            const removeIds = ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            id => perfIds.indexOf(id) < 0));
            removeIds.forEach((/**
             * @param {?} reId
             * @return {?}
             */
            reId => {
                bpmnModel.DefaultProcess.RemoveResourceRole(reId);
            }));
        }
    }
    /**
     * 更新审批活动扩展属性
     * @param {?} userActivity
     * @param {?} obj
     * @return {?}
     */
    resetExtendProperty(userActivity, obj) {
        if (userActivity) {
            /** @type {?} */
            let attributes = (/** @type {?} */ (obj.propertyValue));
            if (!userActivity.extendProperties) {
                userActivity.extendProperties = new Array();
            }
            for (const o of obj.propertyValue) {
                /** @type {?} */
                const index = userActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.key === o.code));
                if (index > -1) {
                    userActivity.extendProperties.splice(index, 1);
                }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                (a) => {
                    /** @type {?} */
                    let item = new ExtendProperty(userActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    userActivity.extendProperties.push(item);
                }));
            }
        }
    }
}
UserActivityCell.CLR_TYPE_ID = UserActivity.Clr_Type_ID;
if (false) {
    /** @type {?} */
    UserActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    UserActivityCell.prototype.clrTypeId;
    /** @type {?} */
    UserActivityCell.prototype.name;
    /** @type {?} */
    UserActivityCell.prototype.nameLanguage;
    /** @type {?} */
    UserActivityCell.prototype.flowElement;
    /** @type {?} */
    UserActivityCell.prototype.editorUi;
    /** @type {?} */
    UserActivityCell.prototype.imgUrls;
    /** @type {?} */
    UserActivityCell.prototype.bizActivity;
}
//# sourceMappingURL=data:application/json;base64,