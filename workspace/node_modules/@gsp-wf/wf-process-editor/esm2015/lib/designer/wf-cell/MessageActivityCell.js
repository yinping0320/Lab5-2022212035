/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { MessageActivity, MessageNotice, Component, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, VariableSetting, ActualParameter, SmsMessageTemplate, SmsMessageVariable, } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { WfConstants } from "../WfConstants";
import { MessageActivityPropertyKeys } from "./property-keys/MessageActivityPropertyKeys";
/**
 * 消息活动节点
 */
export class MessageActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = MessageActivityCell.CLR_TYPE_ID;
        this.name = "消息";
        this.nameLanguage = {
            "zh-CHS": "消息",
            "zh-CHT": "消息",
            "en": "Message",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/message.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/message_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "MessageActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: MessageActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: MessageActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: MessageActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: MessageActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
            { propertyID: MessageActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        propertyData[MessageActivityPropertyKeys.Id] = act.Id;
        propertyData[MessageActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[MessageActivityPropertyKeys.Name] = act.Name;
        propertyData[MessageActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[MessageActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        propertyData[MessageActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const messageActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case MessageActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(messageActivity, obj);
                break;
            case MessageActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(messageActivity, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    updateMessageNotices(messageActivity, obj) {
        /** @type {?} */
        const bpmnModel = messageActivity.Model;
        /** @type {?} */
        let notices = (/** @type {?} */ (obj.propertyValue));
        messageActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(bpmnModel);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(bpmnModel);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(bpmnModel);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                // messageNotice.receiver = n.receiver;
                // messageNotice.receiverText = n.receiverText;
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(messageActivity.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(messageActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(messageActivity.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                messageActivity.messageNotices.push(messageNotice);
            }
        }
    }
    /**
     * @param {?} messageActivity
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(messageActivity, obj) {
        /** @type {?} */
        const bpmnModel = messageActivity.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (messageActivity.variableSettings && messageActivity.variableSettings.length > 0) {
            for (const v of messageActivity.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        messageActivity.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                // variableSetting.variableId = v.variableId;
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                messageActivity.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
}
MessageActivityCell.CLR_TYPE_ID = MessageActivity.Clr_Type_ID;
if (false) {
    /** @type {?} */
    MessageActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    MessageActivityCell.prototype.clrTypeId;
    /** @type {?} */
    MessageActivityCell.prototype.name;
    /** @type {?} */
    MessageActivityCell.prototype.nameLanguage;
    /** @type {?} */
    MessageActivityCell.prototype.flowElement;
    /** @type {?} */
    MessageActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,