/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { StartActivity, ExtendProperty, JumpScope, ExecuteForm, ActualParameter, OtherAssignNodes, OtherAssignActivityNodeInfo, Condition } from "@gsp-wf/wf-process-model";
import { WfConstants } from "../WfConstants";
import { StartActivityPropertyKeys } from "./property-keys/StartActivityPropertyKeys";
import { PropertyHelper } from "./PropertyHelper";
/**
 * 开始活动节点
 */
export class StartActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = StartActivityCell.CLR_TYPE_ID;
        this.name = "开始";
        this.nameLanguage = {
            "zh-CHS": "开始",
            "zh-CHT": "開始",
            "en": "Start",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/start.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/start_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        /** @type {?} */
        const editorUi = this.editorUi;
        flowNode.Id = "startActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            // 设置默认表单
            if (editorUi && editorUi.formFormats) {
                /** @type {?} */
                const formFormats = editorUi.formFormats;
                /** @type {?} */
                const startActivityForms = new Array();
                /** @type {?} */
                const pcForm = formFormats.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.terminal === 'PC' && f.status === 1))[0];
                if (pcForm) {
                    startActivityForms.push(pcForm);
                }
                /** @type {?} */
                const mobileForm = formFormats.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.terminal === 'Mobile' && f.status === 1))[0];
                if (mobileForm) {
                    startActivityForms.push(mobileForm);
                }
                if (startActivityForms && startActivityForms.length > 0) {
                    flowNode.setDefaultForms(startActivityForms);
                }
            }
        }
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const act = (/** @type {?} */ (this.flowElement));
        /** @type {?} */
        let extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let PropertyConfig = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = new Object();
        PropertyConfig.categoryId = 'general';
        PropertyConfig.categoryName = mxResources.get('basicInformation');
        PropertyConfig.tabId = 'basic';
        PropertyConfig.tabName = mxResources.get('basicAttributes');
        PropertyConfig.properties = [
            { propertyID: StartActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: StartActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: StartActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: StartActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: StartActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let ActivityConfig = new ElementPropertyConfig();
        ActivityConfig.categoryId = 'activityConfig';
        ActivityConfig.categoryName = mxResources.get('activityProperty');
        ActivityConfig.tabId = 'basic';
        ActivityConfig.tabName = mxResources.get('basicAttributes');
        ActivityConfig.properties = [
            // { propertyID: StartActivityPropertyKeys.ExecuteForms, propertyName: mxResources.get('formDef'), propertyType: 'modal' },
            { propertyID: 'sendBackedTask', propertyName: mxResources.get('sendBackedTask'), propertyType: 'select' }
        ];
        if (act.selectTargetAble) {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' },
                { propertyID: StartActivityPropertyKeys.JumpScope, propertyName: mxResources.get('jumpScope'), propertyType: 'modal' }
            ]);
            propertyData.SelectTargetAble = act.selectTargetAble || false;
            propertyData.JumpScope = act.jumpScope;
        }
        else {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.SelectTargetAble, propertyName: mxResources.get('selectTargetAble'), propertyType: 'select' }
            ]);
            propertyData.SelectTargetAble = act.selectTargetAble || false;
        }
        if (act.otherAssignNodes) {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' },
                // { propertyID: StartActivityPropertyKeys.otherAssignActivities, propertyName: mxResources.get('otherAssignActivities'), propertyType: 'modal' }
                { propertyID: StartActivityPropertyKeys.otherAssignActivityNodeInfos, propertyName: mxResources.get('otherAssignActivityNodeInfos'), propertyType: 'modal' }
            ]);
            propertyData[StartActivityPropertyKeys.otherAssignNodes] = true;
            // propertyData[StartActivityPropertyKeys.otherAssignActivities] = act.otherAssignNodes.otherAssignActivities;
            propertyData[StartActivityPropertyKeys.otherAssignActivityNodeInfos] = act.otherAssignNodes.otherAssignActivities || act.otherAssignNodes.otherAssignActivityNodeInfos;
            if (act.otherAssignNodes.otherAssignActivities) {
                act.otherAssignNodes.otherAssignActivities = null;
            }
        }
        else {
            ActivityConfig.properties = ActivityConfig.properties.concat([
                { propertyID: StartActivityPropertyKeys.otherAssignNodes, propertyName: mxResources.get('otherAssignNodes'), propertyType: 'select' }
            ]);
            propertyData[StartActivityPropertyKeys.otherAssignNodes] = false;
        }
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            let ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            for (const g of groupList) {
                ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
                // 取回模型上的value值给到扩展属性组件里
                if (act.extendProperties && act.extendProperties.length > 0) {
                    g.childs.sort((/**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */
                    (a, b) => {
                        return a.sortOrder - b.sortOrder;
                    })).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        act.extendProperties.forEach((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => {
                            if (e.key == d.code) {
                                d.value = e.value;
                            }
                        }));
                    }));
                }
                propertyData[g.parent.id] = g.childs;
            }
            // todo：与else分支代码重复，可提取至if语句外，本次修改仅针对名称多语，故暂不修改
            propertyData[StartActivityPropertyKeys.Id] = act.Id;
            propertyData[StartActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
            propertyData[StartActivityPropertyKeys.Name] = act.Name || mxResources.get('start');
            propertyData[StartActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
                "zh-CHS": act.Name,
            };
            propertyData[StartActivityPropertyKeys.sendBackedTask] = act.sendBackedTask;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_PC] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'PC')) : null;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_Mobile] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'MOBILE')) : null;
            return {
                propertyConfig: [PropertyConfig, formDef, ActivityConfig, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            propertyData[StartActivityPropertyKeys.Id] = act.Id;
            propertyData[StartActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
            propertyData[StartActivityPropertyKeys.Name] = act.Name || mxResources.get('start');
            propertyData[StartActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
                "zh-CHS": act.Name,
            };
            propertyData[StartActivityPropertyKeys.sendBackedTask] = act.sendBackedTask;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_PC] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'PC')) : null;
            propertyData[StartActivityPropertyKeys.wf_ExecuteForms_Mobile] =
                act.ExecuteForms ? act.ExecuteForms.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === 'MOBILE')) : null;
            return {
                propertyConfig: [PropertyConfig, formDef, ActivityConfig],
                propertyData: propertyData
            };
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const startActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case StartActivityPropertyKeys.wf_ExecuteForms_PC:
                this.updateStartActivityForm(startActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case StartActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.updateStartActivityForm(startActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case StartActivityPropertyKeys.SelectTargetAble:
                this.resetSelectTargetAble(startActivity, obj);
                break;
            case StartActivityPropertyKeys.JumpScope:
                this.resetJumpScope(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignNodes:
                this.updateOtherAssignNodes(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignActivities:
                this.updateOtherAssignActivities(startActivity, obj);
                break;
            case StartActivityPropertyKeys.otherAssignActivityNodeInfos:
                this.updateOtherAssignActivities(startActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === propertyId)) > -1) {
                    this.resetExtendProperty(startActivity, obj);
                }
                else {
                    super.updateProps(obj);
                }
                break;
        }
    }
    /**
     * @param {?} start
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    updateStartActivityForm(start, obj, terminal) {
        if (start) {
            /** @type {?} */
            let form = (/** @type {?} */ (obj.propertyValue));
            if (!start.ExecuteForms) {
                start.ExecuteForms = new Array();
            }
            start.ExecuteForms = start.ExecuteForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType !== terminal));
            if (form) {
                /** @type {?} */
                let params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                let actParas = new Array();
                if (params && params.length > 0) {
                    for (let para of params) {
                        /** @type {?} */
                        let actPara = new ActualParameter(start.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                /** @type {?} */
                const id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                let item = new ExecuteForm(start.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                start.ExecuteForms.push(item);
            }
        }
    }
    /**
     * 更新是否允许跳转属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetSelectTargetAble(startActivity, obj) {
        /** @type {?} */
        const selectTargetAble = (/** @type {?} */ (obj.propertyValue));
        startActivity.selectTargetAble = selectTargetAble;
        if (startActivity.selectTargetAble) {
            startActivity.jumpScope = new JumpScope(startActivity.Model);
        }
        else {
            startActivity.jumpScope = null;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetJumpScope(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            /** @type {?} */
            let jumpScope = new JumpScope(startActivity.Model);
            jumpScope.Category = data.Category;
            jumpScope.DefaultType = data.DefaultType;
            jumpScope.DefaultActivity = data.DefaultActivity;
            jumpScope.DestinationActivities = data.DestinationActivities;
            startActivity.jumpScope = jumpScope;
        }
        else {
            startActivity.jumpScope = null;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignNodes(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            // const otherAssignNodes = new OtherAssignNodes(startActivity.Model);
            // otherAssignNodes.otherAssignActivities = new Array();
            // startActivity.otherAssignNodes = otherAssignNodes;
            startActivity.otherAssignNodes = new OtherAssignNodes(startActivity.Model);
        }
        else {
            startActivity.otherAssignNodes = null;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    updateOtherAssignActivities(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data && data.length > 0) {
            if (typeof data[0] === "string") {
                startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(startActivity.Model);
                    other.activityDefinitionId = d;
                    other.required = false;
                    other.condition = new Condition(startActivity.Model);
                    startActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
            else {
                // startActivity.otherAssignNodes.otherAssignActivityNodeInfos = [...data];  
                startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
                data.forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let other = new OtherAssignActivityNodeInfo(startActivity.Model);
                    other.activityDefinitionId = d.activityDefinitionId;
                    other.required = d.required;
                    other.condition = new Condition(startActivity.Model);
                    other.condition.Value = d.condition.Value;
                    startActivity.otherAssignNodes.otherAssignActivityNodeInfos.push(other);
                }));
            }
        }
        else {
            startActivity.otherAssignNodes.otherAssignActivityNodeInfos = new Array();
        }
    }
    /**
     * 更新开始节点扩展属性
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetExtendProperty(startActivity, obj) {
        if (startActivity) {
            /** @type {?} */
            let attributes = (/** @type {?} */ (obj.propertyValue));
            if (!startActivity.extendProperties) {
                startActivity.extendProperties = new Array();
            }
            for (const o of obj.propertyValue) {
                /** @type {?} */
                const index = startActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.key === o.code));
                if (index > -1) {
                    startActivity.extendProperties.splice(index, 1);
                }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                (a) => {
                    /** @type {?} */
                    let item = new ExtendProperty(startActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    startActivity.extendProperties.push(item);
                }));
            }
        }
    }
}
StartActivityCell.CLR_TYPE_ID = StartActivity.Clr_Type_ID;
if (false) {
    /** @type {?} */
    StartActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    StartActivityCell.prototype.clrTypeId;
    /** @type {?} */
    StartActivityCell.prototype.name;
    /** @type {?} */
    StartActivityCell.prototype.nameLanguage;
    /** @type {?} */
    StartActivityCell.prototype.flowElement;
    /** @type {?} */
    StartActivityCell.prototype.editorUi;
    /** @type {?} */
    StartActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,