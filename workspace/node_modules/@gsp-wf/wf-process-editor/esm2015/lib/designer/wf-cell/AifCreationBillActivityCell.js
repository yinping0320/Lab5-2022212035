/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { AifCreationBillActivity } from "@gsp-wf/wf-process-model";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { AifCreationBillActivityPropertyKeys } from "./property-keys/AifCreationBillActivityPropertyKeys";
/**
 * 自动生单活动节点
 */
export class AifCreationBillActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = AifCreationBillActivityCell.CLR_TYPE_ID;
        this.name = "自动生单";
        this.nameLanguage = {
            "zh-CHS": "自动生单",
            "zh-CHT": "自動生單",
            "en": "Creation Bill ",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/aifCreationActivity.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/aifCreationActivity_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "AifCreationBillActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        /** @type {?} */
        let PropertyConfig = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = new Object();
        PropertyConfig.categoryId = 'general';
        PropertyConfig.categoryName = mxResources.get('basicInformation');
        PropertyConfig.tabId = 'basic';
        PropertyConfig.tabName = mxResources.get('basicAttributes');
        PropertyConfig.properties = [
            { propertyID: AifCreationBillActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: AifCreationBillActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: AifCreationBillActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        let bifDef = new ElementPropertyConfig();
        bifDef.categoryId = 'bifDef';
        bifDef.categoryName = mxResources.get('bifDef');
        bifDef.tabId = 'basic';
        bifDef.tabName = mxResources.get('basicAttributes');
        bifDef.properties = [
            { propertyID: AifCreationBillActivityPropertyKeys.aifProcessCode, propertyName: mxResources.get('aifProcess'), propertyType: 'modal' },
        ];
        propertyData[AifCreationBillActivityPropertyKeys.Id] = act.Id;
        propertyData[AifCreationBillActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[AifCreationBillActivityPropertyKeys.Name] = act.Name || mxResources.get('autoAif');
        propertyData[AifCreationBillActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[AifCreationBillActivityPropertyKeys.aifProcessCode] = act.aifProcessCode;
        propertyData[AifCreationBillActivityPropertyKeys.isRelied] = act.isRelied;
        return {
            propertyConfig: [PropertyConfig, bifDef],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case AifCreationBillActivityPropertyKeys.aifProcessCode:
                this.resetProcessCode(this.flowElement, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} startActivity
     * @param {?} obj
     * @return {?}
     */
    resetProcessCode(startActivity, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        if (data) {
            startActivity.aifProcessCode = data;
        }
        else {
            startActivity.aifProcessCode = null;
        }
    }
}
AifCreationBillActivityCell.CLR_TYPE_ID = AifCreationBillActivity.Clr_Type_ID;
if (false) {
    /** @type {?} */
    AifCreationBillActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.clrTypeId;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.name;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.nameLanguage;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.flowElement;
    /** @type {?} */
    AifCreationBillActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,