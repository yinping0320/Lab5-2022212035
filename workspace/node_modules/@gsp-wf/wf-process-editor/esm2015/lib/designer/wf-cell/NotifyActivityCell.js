/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { NotifyActivity, ExtendProperty, MessageNotice, ActionScope, Condition, ExecuteForm, PotentialOwnerImpl, HumanPerformerImpl, OrganizationParticipantExpression, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression, ActualParameter, SmsMessageTemplate, SmsMessageVariable, } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { WfConstants } from "../WfConstants";
import { NotifyActivityPropertyKeys } from "./property-keys/NotifyActivityPropertyKeys";
// import { ParticipantInfo } from "../../views/participant/participant.info";
import { ParticipantInfo } from "../entity";
/**
 * 知会活动节点
 */
export class NotifyActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = NotifyActivityCell.CLR_TYPE_ID;
        this.name = "知会";
        this.nameLanguage = {
            "zh-CHS": "知会",
            "zh-CHT": "知會",
            "en": "Notify",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/notify.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/notify_backup.png",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "NotifyActivity" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.notifyAble = this.editorUi.generalConfig.enableNotify;
        }
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        const editorUi = this.editorUi;
        // const graph = editorUi.graph;
        /** @type {?} */
        let act = this.flowElement;
        // 过滤配置位置为节点的扩展属性，分离一级和二级属性：知会节点
        // 一级节点List
        /** @type {?} */
        let generalExtendList = [];
        // 二级节点List
        /** @type {?} */
        let detailExtendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            JSON.parse(JSON.stringify(editorUi.procExtProps)).forEach((/**
             * @param {?} p
             * @return {?}
             */
            (p) => {
                if (p.propertyLocation && p.propertyLocation.indexOf('activity') != -1 && !p.parentId) {
                    generalExtendList.push(p);
                }
                else if (p.propertyLocation && p.propertyLocation.indexOf('activity') != -1 && p.parentId) {
                    detailExtendList.push(p);
                }
            }));
        }
        generalExtendList = generalExtendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let extendList = [];
        if (editorUi.procExtProps && editorUi.procExtProps.length > 0) {
            extendList = JSON.parse(JSON.stringify(editorUi.procExtProps)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sortOrder - b.sortOrder;
            }));
        }
        extendList = extendList.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.sortOrder - b.sortOrder;
        }));
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: NotifyActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: NotifyActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        /** @type {?} */
        let performerProperty = new ElementPropertyConfig();
        performerProperty.categoryId = 'performerProperty';
        performerProperty.categoryName = mxResources.get('performerProperty');
        performerProperty.tabId = 'basic';
        performerProperty.tabName = mxResources.get('basicAttributes');
        performerProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.ParticipantSchemes, propertyName: mxResources.get('notifyRecipient'), propertyType: 'modal' }
        ];
        /** @type {?} */
        let formDef = new ElementPropertyConfig();
        formDef.categoryId = 'formDef';
        formDef.categoryName = mxResources.get('formDef');
        formDef.tabId = 'basic';
        formDef.tabName = mxResources.get('basicAttributes');
        formDef.properties = [
            { propertyID: NotifyActivityPropertyKeys.wf_ExecuteForms_PC, propertyName: mxResources.get('pcForm'), propertyType: 'modal' },
            { propertyID: NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile, propertyName: mxResources.get('webForm'), propertyType: 'modal' },
        ];
        /** @type {?} */
        let approvalProperty = new ElementPropertyConfig();
        approvalProperty.categoryId = 'activityProperty';
        approvalProperty.categoryName = mxResources.get('activityProperty');
        approvalProperty.tabId = 'basic';
        approvalProperty.tabName = mxResources.get('basicAttributes');
        approvalProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.NotifyAble, propertyName: mxResources.get('notifyAble'), propertyType: 'modal' },
        ];
        activityProperty.categoryId = 'advanced';
        activityProperty.categoryName = mxResources.get('otherConfigurations');
        activityProperty.tabId = 'advanced';
        activityProperty.tabName = mxResources.get('advancedAttributes');
        activityProperty.properties = [
            { propertyID: NotifyActivityPropertyKeys.messageNotice, propertyName: mxResources.get('messageNotice'), propertyType: 'modal' },
        ];
        // 扩展属性分group处理，每个group包含父级属性和属于它的子扩展属性
        /** @type {?} */
        const groupList = new Array();
        for (const extend of extendList) {
            if (!extend.parentId) {
                /** @type {?} */
                const group = { parent: extend, childs: new Array() };
                for (const e of extendList) {
                    if (e.parentId === extend.id) {
                        group.childs.push(e);
                    }
                }
                groupList.push(group);
            }
        }
        // 没有扩展属性值的时候不显示扩展属性一栏
        if (groupList && groupList.length > 0) {
            /** @type {?} */
            let ExtendPropertyConfig = new ElementPropertyConfig();
            ExtendPropertyConfig.categoryId = 'extendPropertyConfig';
            ExtendPropertyConfig.categoryName = mxResources.get('extendPropertyConfig');
            ExtendPropertyConfig.tabId = 'advanced';
            ExtendPropertyConfig.tabName = mxResources.get('advancedAttributes');
            ExtendPropertyConfig.properties = new Array();
            for (const g of groupList) {
                ExtendPropertyConfig.properties.push({ propertyID: g.parent.id, propertyName: g.parent.propertyTitle, propertyType: 'modal' });
            }
            this.setPropertyData(act, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, activityProperty, ExtendPropertyConfig],
                propertyData: propertyData
            };
        }
        else {
            this.setPropertyData(act, propertyData, groupList);
            return {
                propertyConfig: [basicProperty, performerProperty, formDef, approvalProperty, activityProperty],
                propertyData: propertyData
            };
        }
    }
    /**
     * 组织UserActivity的属性值propertyData
     * @param {?} act
     * @param {?} propertyData
     * @param {?=} groupList
     * @return {?}
     */
    setPropertyData(act, propertyData, groupList) {
        propertyData[NotifyActivityPropertyKeys.Id] = act.Id;
        propertyData[NotifyActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[NotifyActivityPropertyKeys.Name] = act.Name;
        propertyData[NotifyActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[NotifyActivityPropertyKeys.ParticipantSchemes] = this.getParticipantInfo(act);
        propertyData[NotifyActivityPropertyKeys.messageNotice] = PropertyHelper.getMessageNotices(act.messageNotices);
        ;
        propertyData[NotifyActivityPropertyKeys.wf_ExecuteForms_PC] =
            act.executeForms ? act.executeForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'PC')) : null;
        propertyData[NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile] =
            act.executeForms ? act.executeForms.find((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType === 'MOBILE')) : null;
        propertyData[NotifyActivityPropertyKeys.NotifyAble] = PropertyHelper.getNotifyAble(act.notifyAble, act.dynamicParticipants);
        for (const g of groupList) {
            // 取回模型上的value值给到扩展属性组件里
            if (act.extendProperties && act.extendProperties.length > 0) {
                g.childs.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => {
                    return a.sortOrder - b.sortOrder;
                })).forEach((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    act.extendProperties.forEach((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (e.key == d.code) {
                            d.value = e.value;
                        }
                    }));
                }));
            }
            propertyData[g.parent.id] = g.childs;
        }
    }
    /**
     * @param {?} notifyActivity
     * @return {?}
     */
    getParticipantInfo(notifyActivity) {
        /** @type {?} */
        const partiInfo = new ParticipantInfo();
        /** @type {?} */
        const roles = (/** @type {?} */ (notifyActivity.GetResourceRoles().filter((/**
         * @param {?} role
         * @return {?}
         */
        role => role instanceof HumanPerformerImpl))));
        partiInfo.humanPerformerList = PropertyHelper.getPerformerList(roles);
        return partiInfo;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const notifyActivity = this.flowElement;
        /** @type {?} */
        const editorUi = this.editorUi;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            // 参与者属性
            case NotifyActivityPropertyKeys.ParticipantSchemes:
                this.updateParticipant(notifyActivity, obj);
                break;
            case NotifyActivityPropertyKeys.messageNotice:
                this.updateMessageNotices(notifyActivity, obj);
                break;
            case NotifyActivityPropertyKeys.wf_ExecuteForms_PC:
                this.updateStartActivityForm(notifyActivity, obj, 'PC');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case NotifyActivityPropertyKeys.wf_ExecuteForms_Mobile:
                this.updateStartActivityForm(notifyActivity, obj, 'MOBILE');
                if (obj.parameters && obj.parameters.length > 0) {
                    PropertyHelper.updateFormalParameters(editorUi.graph.bpmnModel.DefaultProcess, obj.parameters);
                }
                break;
            case NotifyActivityPropertyKeys.NotifyAble:
                this.updateNotifySet(notifyActivity, obj);
                break;
            default:
                // 判断ResourceKeys是不是groupid,是就走resetExtendProperty
                if (this.editorUi.procExtProps.findIndex((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === propertyId)) > -1) {
                    this.resetExtendProperty(notifyActivity, obj);
                }
                else {
                    super.updateProps(obj);
                }
                break;
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    updateParticipant(notifyActivity, obj) {
        /** @type {?} */
        const performerInfo = obj.propertyValue;
        /** @type {?} */
        const resourceRoles = notifyActivity.GetResourceRoles();
        if (resourceRoles && resourceRoles.length > 0) {
            resourceRoles.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                if (r instanceof HumanPerformerImpl) {
                    notifyActivity.RemoveResourceRole(r.Id);
                }
            }));
        }
        if (performerInfo.humanPerformerList && performerInfo.humanPerformerList.length > 0) {
            for (const humanPerformer of performerInfo.humanPerformerList) {
                switch (humanPerformer.type) {
                    case UserParticipantExpression.Clr_Type_ID:
                        this.addUserParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case PositionParticipantExpression.Clr_Type_ID:
                        this.addPositionParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case VariableParticipantExpression.Clr_Type_ID:
                        this.addVariableParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case ComponentParticipantExpression.Clr_Type_ID:
                        this.addComponentParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case ReportingLineParticipantExpression.Clr_Type_ID:
                        this.addReportingLineParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case ActivityExecutorParticipantExpression.Clr_Type_ID:
                        this.addActivityExecutorParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                    case MatrixParticipantExpression.Clr_Type_ID:
                        this.addMatrixParticipant(notifyActivity, (/** @type {?} */ (humanPerformer)), 'humanPerformer', null);
                        break;
                }
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addUserParticipant(notifyActivity, performer, type, scope) {
        /** @type {?} */
        let userParticipant = new UserParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName, performer.orgType);
        userParticipant.id = performer.id;
        userParticipant.OrgId = performer.orgId;
        userParticipant.OrgName = performer.orgName;
        userParticipant.Tag = performer.tag;
        userParticipant.OrgType = performer.orgType;
        userParticipant.order = performer.order;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = userParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                userParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(userParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addVariableParticipant(notifyActivity, performer, type, scope) {
        /** @type {?} */
        let variablePerformer = new VariableParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName, performer.orgType);
        variablePerformer.id = performer.id;
        variablePerformer.Name = performer.performerName ? performer.performerName : performer.name;
        ;
        variablePerformer.Tag = performer.tag;
        variablePerformer.VarValue = performer.varValue;
        variablePerformer.VarType = performer.varType;
        variablePerformer.Relation = performer.relation;
        variablePerformer.order = performer.order;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = variablePerformer;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                variablePerformer.actionScope = scope;
                notifyActivity.dynamicParticipants.push(variablePerformer);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} performer
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addPositionParticipant(notifyActivity, performer, type, scope) {
        /** @type {?} */
        let posiParticipant = new PositionParticipantExpression(notifyActivity.Model, performer.performerId, performer.performerName);
        posiParticipant.id = performer.id;
        posiParticipant.PositionType = performer.positionType;
        posiParticipant.order = performer.order;
        if (performer.positionType === '1') {
            posiParticipant.OrgId = performer.orgId;
            posiParticipant.OrgName = performer.orgName;
            posiParticipant.OrgType = performer.orgType;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = performer.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = posiParticipant;
            if (performer.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = performer.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = performer.order;
            if (scope) {
                posiParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(posiParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} component
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addComponentParticipant(notifyActivity, component, type, scope) {
        /** @type {?} */
        let componentParticipant = new ComponentParticipantExpression(notifyActivity.Model);
        componentParticipant.id = component.id;
        componentParticipant.componentId = component.metadataId;
        componentParticipant.componentName = component.name;
        componentParticipant.methodName = component.methodName;
        componentParticipant.methodCode = component.methodCode;
        componentParticipant.order = component.order;
        if (component.actualParameters && component.actualParameters.length > 0) {
            /** @type {?} */
            let actParas = new Array();
            for (let para of component.actualParameters) {
                /** @type {?} */
                let actPara = new ActualParameter(notifyActivity.Model, para.code, para.value, para.valueText);
                // TODO:更新参与者会默认把构件参数属性改为contant，临时修复，后续代码优化
                actPara.Tag = para.tag;
                if (para.fetchValueMode) {
                    switch (para.fetchValueMode) {
                        case 'express':
                            actPara.Tag = 'expression';
                            break;
                        case 'none':
                            actPara.Tag = 'expression';
                            break;
                        default:
                            actPara.Tag = 'constant';
                            break;
                    }
                }
                actParas.push(actPara);
            }
            componentParticipant.actualParameters = actParas;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = component.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = component.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = componentParticipant;
            if (component.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = component.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = component.order;
            if (scope) {
                componentParticipant.actionScope = scope;
                notifyActivity.dynamicParticipants.push(componentParticipant);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addReportingLineParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let reportingLine = new ReportingLineParticipantExpression(notifyActivity.Model);
        reportingLine.id = participant.id;
        reportingLine.ReportingLineDefId = participant.reportingLineDefId;
        reportingLine.ReportingLineDefName = participant.reportingLineDefName;
        reportingLine.RefOrgId = participant.refOrgId;
        reportingLine.RefUserId = participant.refUserId;
        reportingLine.RefEmployeeId = participant.refEmployeeId;
        reportingLine.order = participant.order;
        reportingLine.Dimension = participant.dimension;
        reportingLine.Tag = participant.tag;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = reportingLine;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                reportingLine.actionScope = scope;
                notifyActivity.dynamicParticipants.push(reportingLine);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addActivityExecutorParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let activityExecutor = new ActivityExecutorParticipantExpression(notifyActivity.Model);
        activityExecutor.id = participant.id;
        activityExecutor.activityDefId = participant.activityDefId;
        activityExecutor.order = participant.order;
        activityExecutor.activityDefName = participant.activityDefName;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = activityExecutor;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                activityExecutor.actionScope = scope;
                notifyActivity.dynamicParticipants.push(activityExecutor);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addMatrixParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let matrix = new MatrixParticipantExpression(notifyActivity.Model);
        matrix.order = participant.order;
        matrix.id = participant.id;
        matrix.matrixDefId = participant.matrixDefId;
        matrix.matrixDefName = participant.matrixDefName;
        matrix.conditionField1 = participant.conditionField1;
        matrix.conditionFieldText1 = participant.conditionFieldText1;
        matrix.conditionField2 = participant.conditionField2;
        matrix.conditionFieldText2 = participant.conditionFieldText2;
        matrix.conditionField3 = participant.conditionField3;
        matrix.conditionFieldText3 = participant.conditionFieldText3;
        matrix.multivaluedCondition = participant.multivaluedCondition;
        matrix.dataFieldAlias = participant.dataFieldAlias;
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = matrix;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                matrix.actionScope = scope;
                notifyActivity.dynamicParticipants.push(matrix);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     *
     * @param {?} notifyActivity
     * @param {?} participant
     * @param {?} type
     * @param {?} scope
     * @return {?}
     */
    addOrganizationParticipant(notifyActivity, participant, type, scope) {
        /** @type {?} */
        let potential = new OrganizationParticipantExpression(notifyActivity.Model);
        potential.id = participant.id;
        potential.order = participant.order;
        potential.actionScope = ActionScope.AssignUser;
        potential.organizationLevel = (/** @type {?} */ (participant.organizationLevel));
        potential.organizationId = participant.organizationId;
        potential.organizationName = participant.organizationName;
        potential.includeChildren = participant.includeChildren;
        potential.tag = participant.tag;
        if (participant.condition) {
            /** @type {?} */
            const condition = new Condition(notifyActivity.Model);
            condition.Value = participant.condition;
            potential.condition = condition;
        }
        if (type === 'humanPerformer') {
            /** @type {?} */
            let humanPerformerImpl = new HumanPerformerImpl(notifyActivity.Model);
            humanPerformerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                humanPerformerImpl.condition = condition;
            }
            humanPerformerImpl.order = participant.order;
            notifyActivity.AddResourceRole(humanPerformerImpl);
        }
        else if (type === 'potentialOwner') {
            /** @type {?} */
            let otentialOwnerImpl = new PotentialOwnerImpl(notifyActivity.Model);
            otentialOwnerImpl.participantExpression = potential;
            if (participant.condition) {
                /** @type {?} */
                const condition = new Condition(notifyActivity.Model);
                condition.Value = participant.condition;
                otentialOwnerImpl.condition = condition;
            }
            otentialOwnerImpl.order = participant.order;
            if (scope) {
                potential.actionScope = scope;
                notifyActivity.dynamicParticipants.push(potential);
            }
            else {
                notifyActivity.AddResourceRole(otentialOwnerImpl);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @param {?} terminal
     * @return {?}
     */
    updateStartActivityForm(notifyActivity, obj, terminal) {
        if (notifyActivity) {
            /** @type {?} */
            let form = (/** @type {?} */ (obj.propertyValue));
            if (!notifyActivity.executeForms) {
                notifyActivity.executeForms = new Array();
            }
            notifyActivity.executeForms = notifyActivity.executeForms.filter((/**
             * @param {?} e
             * @return {?}
             */
            e => e.TerminalType !== terminal));
            if (form) {
                /** @type {?} */
                let params = (/** @type {?} */ (form.ActualParameters));
                /** @type {?} */
                let actParas = new Array();
                if (params && params.length > 0) {
                    for (let para of params) {
                        /** @type {?} */
                        let actPara = new ActualParameter(notifyActivity.Model, para.Name, para.Value);
                        if (para.Tag) {
                            actPara.Tag = para.Tag;
                        }
                        else {
                            if (para.Value) {
                                if (para.Value.length >= 8 && para.Value.slice(0, 8) === `{"expr":`) {
                                    actPara.Tag = 'expression';
                                }
                                else {
                                    actPara.Tag = 'constant';
                                }
                            }
                            else {
                                actPara.Tag = 'variable';
                            }
                        }
                        actParas.push(actPara);
                    }
                }
                /** @type {?} */
                const id = BpmnModelHelper.GenerateElementId();
                /** @type {?} */
                let item = new ExecuteForm(notifyActivity.Model, id, form.Name, actParas);
                item.ComponentId = form.ComponentId;
                item.FormType = form.FormType;
                item.formFormatId = form.formFormatId;
                item.formatConfigId = form.formatConfigId;
                item.TerminalType = form.TerminalType;
                notifyActivity.executeForms.push(item);
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    updateNotifySet(notifyActivity, obj) {
        /** @type {?} */
        const scope = (/** @type {?} */ (obj.propertyValue));
        notifyActivity.dynamicParticipants = notifyActivity.dynamicParticipants.filter((/**
         * @param {?} p
         * @return {?}
         */
        p => ((/** @type {?} */ (p))).actionScope !== ActionScope.Notify));
        notifyActivity.notifyAble = scope.enable;
        if (scope.scope) {
            if (scope.scope.organizationLevel) {
                /** @type {?} */
                const organizationParticipantExpression = new OrganizationParticipantExpression(notifyActivity.Model);
                organizationParticipantExpression.id = BpmnModelHelper.GenerateElementId();
                organizationParticipantExpression.actionScope = ActionScope.Notify;
                organizationParticipantExpression.organizationLevel = (/** @type {?} */ (scope.scope.organizationLevel));
                organizationParticipantExpression.organizationId = scope.scope.organizationId;
                organizationParticipantExpression.organizationName = scope.scope.organizationName;
                organizationParticipantExpression.includeChildren = scope.scope.includeChildren;
                organizationParticipantExpression.tag = scope.scope.tag;
                notifyActivity.dynamicParticipants.push(organizationParticipantExpression);
            }
            else {
                /** @type {?} */
                const performerInfo = (/** @type {?} */ (scope.scope.participantInfo));
                if (performerInfo.isAllScope && performerInfo.potentialOwnerList && performerInfo.potentialOwnerList.length > 0) {
                    for (const potentialOwner of performerInfo.potentialOwnerList) {
                        switch (potentialOwner.type) {
                            case UserParticipantExpression.Clr_Type_ID:
                                this.addUserParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case VariableParticipantExpression.Clr_Type_ID:
                                this.addVariableParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case PositionParticipantExpression.Clr_Type_ID:
                                this.addPositionParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ComponentParticipantExpression.Clr_Type_ID:
                                this.addComponentParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ReportingLineParticipantExpression.Clr_Type_ID:
                                this.addReportingLineParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case ActivityExecutorParticipantExpression.Clr_Type_ID:
                                this.addActivityExecutorParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                                notifyActivity;
                            case MatrixParticipantExpression.Clr_Type_ID:
                                this.addMatrixParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                            case OrganizationParticipantExpression.Clr_Type_ID:
                                this.addOrganizationParticipant(notifyActivity, (/** @type {?} */ (potentialOwner)), 'potentialOwner', ActionScope.Notify);
                                break;
                        }
                    }
                }
            }
        }
    }
    /**
     * 更新知会活动扩展属性
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    resetExtendProperty(notifyActivity, obj) {
        if (notifyActivity) {
            /** @type {?} */
            let attributes = (/** @type {?} */ (obj.propertyValue));
            if (!notifyActivity.extendProperties) {
                notifyActivity.extendProperties = new Array();
            }
            for (const o of obj.propertyValue) {
                /** @type {?} */
                const index = notifyActivity.extendProperties.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.key === o.code));
                if (index > -1) {
                    notifyActivity.extendProperties.splice(index, 1);
                }
            }
            if (attributes) {
                attributes.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                (a) => {
                    /** @type {?} */
                    let item = new ExtendProperty(notifyActivity.Model);
                    item.key = a.code;
                    item.value = a.value;
                    notifyActivity.extendProperties.push(item);
                }));
            }
        }
    }
    /**
     * @param {?} notifyActivity
     * @param {?} obj
     * @return {?}
     */
    updateMessageNotices(notifyActivity, obj) {
        /** @type {?} */
        const bpmnModel = notifyActivity.Model;
        /** @type {?} */
        let notices = (/** @type {?} */ (obj.propertyValue));
        notifyActivity.messageNotices = new Array();
        if (notices && notices.length > 0) {
            for (let n of notices) {
                /** @type {?} */
                const messageNotice = new MessageNotice(bpmnModel);
                messageNotice.sendType = n.sendType;
                messageNotice.sendTime = n.sendTime;
                messageNotice.subject = n.subject;
                messageNotice.content = n.content;
                if (n.smsMessageTemplate) {
                    /** @type {?} */
                    const smsMessageTemplate = new SmsMessageTemplate(bpmnModel);
                    smsMessageTemplate.code = n.smsMessageTemplate.code;
                    smsMessageTemplate.content = n.smsMessageTemplate.content;
                    smsMessageTemplate.smsMessageVariables = new Array();
                    if (n.smsMessageTemplate.smsMessageVariables && n.smsMessageTemplate.smsMessageVariables.length > 0) {
                        for (const v of n.smsMessageTemplate.smsMessageVariables) {
                            /** @type {?} */
                            const variable = new SmsMessageVariable(bpmnModel);
                            variable.code = v.code;
                            variable.value = v.value;
                            variable.tag = v.tag;
                            smsMessageTemplate.smsMessageVariables.push(variable);
                        }
                    }
                    messageNotice.smsMessageTemplate = smsMessageTemplate;
                }
                // messageNotice.receiver = n.receiver;
                // messageNotice.receiverText = n.receiverText;
                n.receivers = n.receivers.filter((/**
                 * @param {?} r
                 * @return {?}
                 */
                (r) => r.type));
                if (n.receivers && n.receivers.length > 0) {
                    /** @type {?} */
                    const receivers = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'userParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant !== 'activityExecutorParticipant')));
                    /** @type {?} */
                    const participants = n.receivers.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => r.type === 'variableParticipant' || r.type === 'positionParticipant'
                        || (r.type === 'processParticipant' && r.processParticipant === 'activityExecutorParticipant')));
                    if (receivers && receivers.length > 0) {
                        /** @type {?} */
                        let receiver = '';
                        /** @type {?} */
                        let receiverName = '';
                        for (const r of receivers) {
                            if (r.type === 'processParticipant') {
                                receiver += (r.processParticipant + ',');
                                if (r.processParticipant === 'procInstCreator') {
                                    receiverName += '流程发起人,';
                                }
                                else if (r.processParticipant === 'workItemParticipant') {
                                    receiverName += '任务接收人,';
                                }
                            }
                            else if (r.type === 'userParticipant') {
                                receiver += (r.userIds + ',');
                                receiverName += (r.userNames + ',');
                            }
                        }
                        if (receiver) {
                            receiver = receiver.substring(0, receiver.length - 1);
                        }
                        if (receiverName) {
                            receiverName = receiverName.substring(0, receiverName.length - 1);
                        }
                        messageNotice.receiver = receiver;
                        messageNotice.receiverText = receiverName;
                    }
                    if (participants && participants.length > 0) {
                        /** @type {?} */
                        const receiverExpressions = new Array();
                        for (const p of participants) {
                            if (p.type === 'processParticipant') {
                                /** @type {?} */
                                let activityExecutor = new ActivityExecutorParticipantExpression(notifyActivity.Model);
                                activityExecutor.id = BpmnModelHelper.GenerateElementId();
                                activityExecutor.activityDefId = p.activityDefId;
                                activityExecutor.activityDefName = p.activityDefName;
                                receiverExpressions.push(activityExecutor);
                            }
                            if (p.type === 'variableParticipant') {
                                /** @type {?} */
                                let variableParticipant = new UserParticipantExpression(notifyActivity.Model, p.variableParticipant, p.variableName, p.orgType);
                                variableParticipant.id = BpmnModelHelper.GenerateElementId();
                                variableParticipant.Tag = 'expression';
                                variableParticipant.OrgType = p.orgType;
                                receiverExpressions.push(variableParticipant);
                            }
                            if (p.type === 'positionParticipant') {
                                /** @type {?} */
                                let posiParticipant = new PositionParticipantExpression(notifyActivity.Model, p.positionId, p.positionName);
                                posiParticipant.id = BpmnModelHelper.GenerateElementId();
                                posiParticipant.PositionType = p.positionType;
                                if (p.positionType === '1') {
                                    posiParticipant.OrgId = p.orgId;
                                    posiParticipant.OrgType = p.orgType;
                                }
                                receiverExpressions.push(posiParticipant);
                            }
                        }
                        messageNotice.receiverExpressions = receiverExpressions;
                    }
                }
                notifyActivity.messageNotices.push(messageNotice);
            }
        }
    }
}
NotifyActivityCell.CLR_TYPE_ID = NotifyActivity.Clr_Type_ID;
if (false) {
    /** @type {?} */
    NotifyActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    NotifyActivityCell.prototype.clrTypeId;
    /** @type {?} */
    NotifyActivityCell.prototype.name;
    /** @type {?} */
    NotifyActivityCell.prototype.nameLanguage;
    /** @type {?} */
    NotifyActivityCell.prototype.flowElement;
    /** @type {?} */
    NotifyActivityCell.prototype.editorUi;
    /** @type {?} */
    NotifyActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,