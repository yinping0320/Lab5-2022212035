/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { CallActivitySubProcess, Component, BackWardRule, ActualParameter, VariableSetting, SemanticExpression, CounterSignRule, Condition } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { BpmnModelHelper, Expression, FlowNodeState, MultiInstanceLoopCharacteristics } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { CallActivitySubProcessPropertyKeys } from "./property-keys/CallActivitySubProcessPropertyKeys";
/**
 * 子流程活动节点
 */
export class CallActivitySubProcessCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = CallActivitySubProcessCell.CLR_TYPE_ID;
        this.name = "子流程";
        this.nameLanguage = {
            "zh-CHS": "子流程",
            "zh-CHT": "子流程",
            "en": "Sub-Process",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/sub.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/sub_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "CallActivitySubProcess" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        // 组织属性框
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        // 基本属性（名称）
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: CallActivitySubProcessPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: CallActivitySubProcessPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: CallActivitySubProcessPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        // 活动选项（表单定义+活动构件）
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: CallActivitySubProcessPropertyKeys.callActivitySubProcess, propertyName: mxResources.get('callActivitySubProcess'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' },
            { propertyID: CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics, propertyName: mxResources.get('multiInstanceLoopCharacteristics'), propertyType: 'modal' }
        ];
        propertyData[CallActivitySubProcessPropertyKeys.Id] = act.Id;
        propertyData[CallActivitySubProcessPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[CallActivitySubProcessPropertyKeys.Name] = act.Name;
        propertyData[CallActivitySubProcessPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[CallActivitySubProcessPropertyKeys.callActivitySubProcess] = {
            calledBizDefKey: act.calledBizDefKey,
            calledElement: act.CalledElement,
            inheritVariables: act.inheritVariables,
            inheritBizDataId: act.inheritBizDataId,
            bizDataId: act.bizDataId,
            aifProcessCode: act.aifProcessCode,
            useAutoCreationData: act.useAutoCreationData,
        };
        propertyData[CallActivitySubProcessPropertyKeys.BackWardRule] = act.backWardRule;
        propertyData[CallActivitySubProcessPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        propertyData[CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics] = act.LoopCharacteristics;
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const subProcess = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case CallActivitySubProcessPropertyKeys.callActivitySubProcess:
                this.updateSubProcessConfig(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.BackWardRule:
                this.updateBackWardRule(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.variableSettings:
                this.updateVariableSettings(subProcess, obj);
                break;
            case CallActivitySubProcessPropertyKeys.MultiInstanceLoopCharacteristics:
                this.updateMultiInstanceLoopCharacteristic(subProcess, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateSubProcessConfig(subProcess, obj) {
        /** @type {?} */
        const config = obj.propertyValue;
        if (subProcess) {
            subProcess.calledBizDefKey = config.calledBizDefKey;
            subProcess.CalledElement = config.calledElement;
            subProcess.inheritBizDataId = config.inheritBizDataId;
            subProcess.inheritVariables = config.inheritVariables;
            subProcess.bizDataId = config.bizDataId;
            subProcess.aifProcessCode = config.aifProcessCode;
            subProcess.useAutoCreationData = config.useAutoCreationData;
        }
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateBackWardRule(subProcess, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let backWardRule = new BackWardRule(subProcess.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        subProcess.backWardRule = backWardRule;
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(subProcess, obj) {
        /** @type {?} */
        const bpmnModel = this.flowElement.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (subProcess.variableSettings && subProcess.variableSettings.length > 0) {
            for (const v of subProcess.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        subProcess.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                // variableSetting.variableId = v.variableId;
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                subProcess.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} subProcess
     * @param {?} obj
     * @return {?}
     */
    updateMultiInstanceLoopCharacteristic(subProcess, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let loopCharacteristics = new MultiInstanceLoopCharacteristics(subProcess.Model);
        loopCharacteristics.enable = data.enable;
        loopCharacteristics.sequential = data.sequential;
        loopCharacteristics.loopCardinality = data.loopCardinality;
        loopCharacteristics.completionCondition = data.completionCondition;
        loopCharacteristics.completionConditionRules = data.completionConditionRules;
        subProcess.LoopCharacteristics = loopCharacteristics;
        if (obj.propertyValue) {
            /** @type {?} */
            const data = obj.propertyValue;
            /** @type {?} */
            let loopCharacteristics = new MultiInstanceLoopCharacteristics(subProcess.Model);
            loopCharacteristics.enable = data.enable;
            loopCharacteristics.sequential = data.sequential;
            loopCharacteristics.loopCardinality = new Expression(subProcess.Model);
            if (data.loopCardinality) {
                /** @type {?} */
                let variableExpression = new SemanticExpression(subProcess.Model);
                variableExpression.Value = data.loopCardinality;
                loopCharacteristics.loopCardinality.MexExpression = variableExpression;
            }
            loopCharacteristics.completionCondition = data.completionCondition;
            /** @type {?} */
            let rules = (/** @type {?} */ (data.completionConditionRules));
            loopCharacteristics.completionConditionRules = null;
            if (rules && rules.length > 0) {
                loopCharacteristics.completionConditionRules = new Array();
                for (let rule of rules) {
                    /** @type {?} */
                    let counterSignRule = new CounterSignRule(subProcess.Model);
                    /** @type {?} */
                    let condition = new Condition(subProcess.Model);
                    condition.Value = rule.CompletionCondition.Value;
                    counterSignRule.ConclusionValue = rule.ConclusionValue;
                    counterSignRule.CalculateType = rule.CalculateType;
                    counterSignRule.ConditionValue = rule.ConditionValue;
                    counterSignRule.WaitAllVotes = rule.WaitAllVotes;
                    counterSignRule.CompletionCondition = condition;
                    loopCharacteristics.completionConditionRules.push(counterSignRule);
                }
            }
            subProcess.LoopCharacteristics = loopCharacteristics;
        }
    }
}
CallActivitySubProcessCell.CLR_TYPE_ID = CallActivitySubProcess.Clr_Type_ID;
if (false) {
    /** @type {?} */
    CallActivitySubProcessCell.CLR_TYPE_ID;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.clrTypeId;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.name;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.nameLanguage;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.flowElement;
    /** @type {?} */
    CallActivitySubProcessCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,