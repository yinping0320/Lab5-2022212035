/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataType, DataTypes, DataObject } from "@edp-pmf/bpmn-model";
import { ValuedDataObject, VariableParticipantExpression, ComponentParticipantExpression, ReportingLineParticipantExpression, MatrixParticipantExpression, OrganizationParticipantExpression, VariableSetting, Component, ActivityExecutorParticipantExpression, UserParticipantExpression, PositionParticipantExpression } from "@gsp-wf/wf-process-model";
import { BizComponent } from "../entity/BizComponent";
import { BizParameter } from "../entity/BizParameter";
import { UserParticipant } from "../entity/UserParticipant";
import { VariablePerformer } from "../entity/VariablePerformer";
import { PositionParticipant } from "../entity/PositionParticipant";
import { ComponentParticipant } from "../entity/ComponentParticipant";
import { ReportingLineParticipant } from "../entity/ReportingLineParticipant";
import { ActivityExecutorParticipant } from "../entity/ActivityExecutorParticipant";
import { MatrixParticipant } from "../entity/MatrixParticipant";
import { OrganizationParticipant } from "../entity/OrganizationParticipant";
import { ActionScope } from "../entity/ActionScope";
import { MessageReceiver } from "../entity/MessageReceiver";
import { WfDesignerUtils } from "../WfDesignerUtils";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { ActionOrganizationScope, OrganizationPotentialOwner } from "../../views/organization-potential-owner/actionOrganizationScope";
import { ParticipantInfo } from "../../views/participant/participant.info";
/**
 * 属性工具
 */
export class PropertyHelper {
    /**
     * 获取变量赋值列表
     * @param {?} bpmnModel
     * @param {?} variablesSetting
     * @return {?}
     */
    static getVariableSettings(bpmnModel, variablesSetting) {
        /** @type {?} */
        const variables = new Array();
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (variablesSetting && variablesSetting.length > 0) {
            for (const v of variablesSetting) {
                /** @type {?} */
                const variable = {
                    variableCode: v.variableCode,
                    variableName: v.variableName,
                    tag: v.tag,
                    executionTime: v.executionTime,
                    value: v.value,
                    valueText: v.valueText
                };
                if (v.tag === 'component') {
                    if (extendElements.length > 0) {
                        for (const e of extendElements) {
                            if (e instanceof Component && e.Id === v.value) {
                                /** @type {?} */
                                const component = {
                                    Id: e.Id,
                                    Name: e.Name,
                                    MetadataId: e.MetadataId,
                                    MethodCode: e.MethodCode,
                                    ActualParameters: []
                                };
                                if (e.ActualParameters && e.ActualParameters.length > 0) {
                                    for (const p of e.ActualParameters) {
                                        /** @type {?} */
                                        const parameter = {
                                            Name: p.Name,
                                            Value: p.Value,
                                            Tag: p.Tag,
                                        };
                                        component.ActualParameters.push(parameter);
                                    }
                                }
                                variable.component = component;
                            }
                        }
                    }
                }
                variables.push(variable);
            }
        }
        return variables;
    }
    /**
     *
     * @param {?} messageNotices
     * @return {?}
     */
    static getMessageNotices(messageNotices) {
        if (!messageNotices || messageNotices.length == 0) {
            return null;
        }
        return messageNotices.map((/**
         * @param {?} m
         * @return {?}
         */
        m => {
            /** @type {?} */
            const message = new Object;
            message.content = m.content;
            message.sendTime = m.sendTime;
            message.sendType = m.sendType;
            message.subject = m.subject;
            if (m.smsMessageTemplate) {
                /** @type {?} */
                const smsTemplate = new Object;
                smsTemplate.code = m.smsMessageTemplate.code;
                smsTemplate.content = m.smsMessageTemplate.content;
                smsTemplate.smsMessageVariables = new Array();
                if (m.smsMessageTemplate.smsMessageVariables && m.smsMessageTemplate.smsMessageVariables.length > 0) {
                    for (const v of m.smsMessageTemplate.smsMessageVariables) {
                        /** @type {?} */
                        const variable = new Object;
                        variable.id = WfDesignerUtils.createNM();
                        variable.code = v.code;
                        variable.value = v.value;
                        variable.tag = v.tag;
                        smsTemplate.smsMessageVariables.push(variable);
                    }
                }
                message.smsMessageTemplate = smsTemplate;
            }
            /** @type {?} */
            const receiverExpressions = new Array();
            if (m.receiver) {
                /** @type {?} */
                const receivers = m.receiver.split(',');
                /** @type {?} */
                const receiverTexts = m.receiverText.split(',');
                /** @type {?} */
                let userReceiver = new MessageReceiver();
                userReceiver.type = 'userParticipant';
                userReceiver.userIds = '';
                userReceiver.userNames = '';
                for (const i in receivers) {
                    if (receivers[i] === 'procInstCreator') {
                        /** @type {?} */
                        let procInstCreator = new MessageReceiver();
                        procInstCreator.type = 'processParticipant';
                        procInstCreator.processParticipant = 'procInstCreator';
                        receiverExpressions.push(procInstCreator);
                    }
                    else if (receivers[i] === 'workItemParticipant') {
                        /** @type {?} */
                        let workItemParticipant = new MessageReceiver();
                        workItemParticipant.type = 'processParticipant';
                        workItemParticipant.processParticipant = 'workItemParticipant';
                        receiverExpressions.push(workItemParticipant);
                    }
                    else {
                        userReceiver.userIds += (receivers[i] + ',');
                        userReceiver.userNames += (receiverTexts[i] + ',');
                    }
                }
                if (userReceiver.userIds) {
                    userReceiver.userIds = userReceiver.userIds.substring(0, userReceiver.userIds.length - 1);
                    userReceiver.userNames = userReceiver.userNames.substring(0, userReceiver.userNames.length - 1);
                    receiverExpressions.push(userReceiver);
                }
            }
            if (m.receiverExpressions && m.receiverExpressions.length > 0) {
                for (const e of m.receiverExpressions) {
                    if (e instanceof ActivityExecutorParticipantExpression) {
                        /** @type {?} */
                        let activityExecutorParticipant = new MessageReceiver();
                        activityExecutorParticipant.type = 'processParticipant';
                        activityExecutorParticipant.processParticipant = 'activityExecutorParticipant';
                        activityExecutorParticipant.activityDefId = e.activityDefId;
                        activityExecutorParticipant.activityDefName = e.activityDefName;
                        receiverExpressions.push(activityExecutorParticipant);
                    }
                    else if (e instanceof UserParticipantExpression) {
                        /** @type {?} */
                        let variableReceiver = new MessageReceiver();
                        variableReceiver.type = 'variableParticipant';
                        variableReceiver.variableParticipant = e.UserId;
                        variableReceiver.variableName = e.name;
                        variableReceiver.orgType = e.OrgType;
                        receiverExpressions.push(variableReceiver);
                    }
                    else if (e instanceof PositionParticipantExpression) {
                        /** @type {?} */
                        let positionReceiver = new MessageReceiver();
                        positionReceiver.type = 'positionParticipant';
                        positionReceiver.positionId = e.PositionId;
                        positionReceiver.positionName = e.PositionName;
                        positionReceiver.positionType = e.PositionType;
                        if (positionReceiver.positionType === '1') {
                            positionReceiver.orgId = e.OrgId;
                            positionReceiver.orgType = e.OrgType;
                        }
                        receiverExpressions.push(positionReceiver);
                    }
                }
            }
            if (receiverExpressions.length > 0) {
                message.receivers = receiverExpressions;
            }
            return message;
        }));
    }
    /**
     *
     * @param {?} components
     * @return {?}
     */
    static getBizComponentList(components) {
        /** @type {?} */
        const bizComponentList = new Array();
        if (components && components.length > 0) {
            for (const component of components) {
                /** @type {?} */
                const bizComponent = new BizComponent();
                bizComponent.id = component.Id;
                bizComponent.name = component.Name;
                bizComponent.metadataId = component.MetadataId;
                bizComponent.methodCode = component.MethodCode;
                bizComponent.executionTime = component.Time;
                bizComponent.isForCompensation = component.isForCompensation;
                bizComponent.scopeType = component.ScopeType || null;
                bizComponent.actualParameters = new Array();
                if (component.ActualParameters && component.ActualParameters.length > 0) {
                    for (const param of component.ActualParameters) {
                        /** @type {?} */
                        const bizParam = new BizParameter();
                        bizParam.code = param.Name;
                        bizParam.name = param.Name;
                        bizParam.value = param.Value;
                        bizComponent.actualParameters.push(bizParam);
                    }
                }
                bizComponentList.push(bizComponent);
            }
        }
        return bizComponentList;
    }
    /**
     *
     * @param {?} roles
     * @return {?}
     */
    static getPerformerList(roles) {
        /** @type {?} */
        const performers = new Array();
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        (role) => {
            if (role == null) {
                return;
            }
            if (role.participantExpression instanceof UserParticipantExpression) {
                /** @type {?} */
                const user = (/** @type {?} */ (role.participantExpression));
                if (user) {
                    /** @type {?} */
                    const userPerformer = new UserParticipant();
                    userPerformer.id = user.id;
                    userPerformer.performerId = user.UserId;
                    userPerformer.performerName = user.name;
                    userPerformer.type = user.ClrTypeID;
                    userPerformer.orgId = user.OrgId;
                    userPerformer.orgName = user.OrgName;
                    userPerformer.orgType = user.OrgType;
                    userPerformer.condition = role.condition ? role.condition.Value : '';
                    userPerformer.tag = user.Tag;
                    userPerformer.order = role.order;
                    performers.push(userPerformer);
                }
            }
            else if (role.participantExpression instanceof VariableParticipantExpression) {
                /** @type {?} */
                const variable = (/** @type {?} */ (role.participantExpression));
                if (variable) {
                    /** @type {?} */
                    const variablePerformer = new VariablePerformer();
                    variablePerformer.id = variable.id,
                        variablePerformer.name = variable.Name,
                        variablePerformer.type = variable.ClrTypeID,
                        variablePerformer.condition = role.condition ? role.condition.Value : '',
                        variablePerformer.tag = variable.Tag;
                    variablePerformer.relation = variable.Relation;
                    variablePerformer.varType = variable.VarType;
                    variablePerformer.varValue = variable.VarValue;
                    variablePerformer.order = role.order;
                    performers.push(variablePerformer);
                }
            }
            else if (role.participantExpression instanceof PositionParticipantExpression) {
                /** @type {?} */
                const position = (/** @type {?} */ (role.participantExpression));
                if (position) {
                    /** @type {?} */
                    const positionPerformer = new PositionParticipant();
                    positionPerformer.id = position.id;
                    positionPerformer.performerId = position.PositionId;
                    positionPerformer.positionType = position.PositionType;
                    positionPerformer.performerName = position.PositionName;
                    positionPerformer.type = position.ClrTypeID;
                    positionPerformer.orgId = position.OrgId || '';
                    positionPerformer.orgName = position.OrgName || '';
                    positionPerformer.orgType = position.OrgType || '';
                    positionPerformer.condition = role.condition ? role.condition.Value : '';
                    positionPerformer.order = role.order;
                    performers.push(positionPerformer);
                }
            }
            else if (role.participantExpression instanceof ComponentParticipantExpression) {
                /** @type {?} */
                const cmp = (/** @type {?} */ (role.participantExpression));
                if (cmp) {
                    /** @type {?} */
                    const componentPerformer = new ComponentParticipant();
                    componentPerformer.id = cmp.id;
                    componentPerformer.name = cmp.componentName;
                    componentPerformer.metadataId = cmp.componentId;
                    componentPerformer.methodCode = cmp.methodCode;
                    componentPerformer.methodName = cmp.methodName;
                    componentPerformer.type = cmp.ClrTypeID;
                    componentPerformer.actualParameters = new Array();
                    if (cmp.actualParameters && cmp.actualParameters.length > 0) {
                        /** @type {?} */
                        let paramters = [];
                        cmp.actualParameters.forEach((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => paramters.push({ code: p.Name, value: p.Value, valueText: p.ValueText, tag: p.Tag })));
                        componentPerformer.actualParameters = paramters;
                    }
                    if (role.condition) {
                        componentPerformer.condition = role.condition.Value;
                    }
                    componentPerformer.order = role.order;
                    performers.push(componentPerformer);
                }
            }
            else if (role.participantExpression instanceof ReportingLineParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const reportingLine = new ReportingLineParticipant();
                    reportingLine.id = r.id;
                    reportingLine.reportingLineDefId = r.ReportingLineDefId;
                    reportingLine.reportingLineDefName = r.ReportingLineDefName;
                    reportingLine.refOrgId = r.RefOrgId;
                    reportingLine.refUserId = r.RefUserId;
                    reportingLine.refEmployeeId = r.RefEmployeeId;
                    reportingLine.dimension = r.Dimension;
                    reportingLine.performerName = r.RefUserId;
                    reportingLine.tag = r.Tag;
                    reportingLine.type = r.ClrTypeID;
                    if (role.condition) {
                        reportingLine.condition = role.condition.Value;
                    }
                    reportingLine.order = role.order;
                    performers.push(reportingLine);
                }
            }
            else if (role.participantExpression instanceof ActivityExecutorParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const activityExecutor = new ActivityExecutorParticipant();
                    activityExecutor.id = r.id;
                    activityExecutor.type = r.ClrTypeID;
                    activityExecutor.activityDefId = r.activityDefId;
                    activityExecutor.activityDefName = r.activityDefName;
                    activityExecutor.performerName = '<' + r.activityDefName + mxResources.get('eventHandler');
                    if (role.condition) {
                        activityExecutor.condition = role.condition.Value;
                    }
                    activityExecutor.order = role.order;
                    performers.push(activityExecutor);
                }
            }
            else if (role.participantExpression instanceof MatrixParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const matrix = new MatrixParticipant();
                    matrix.id = r.id;
                    matrix.matrixDefId = r.matrixDefId;
                    matrix.matrixDefName = r.matrixDefName;
                    matrix.conditionField1 = r.conditionField1;
                    matrix.conditionFieldText1 = r.conditionFieldText1;
                    matrix.conditionField2 = r.conditionField2;
                    matrix.conditionFieldText2 = r.conditionFieldText2;
                    matrix.conditionField3 = r.conditionField3;
                    matrix.conditionFieldText3 = r.conditionFieldText3;
                    matrix.multivaluedCondition = r.multivaluedCondition;
                    matrix.dataFieldAlias = r.dataFieldAlias;
                    matrix.type = r.ClrTypeID;
                    matrix.order = role.order;
                    if (role.condition) {
                        matrix.condition = role.condition.Value;
                    }
                    performers.push(matrix);
                }
            }
            else if (role.participantExpression instanceof OrganizationParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role.participantExpression));
                if (r) {
                    /** @type {?} */
                    const organization = new OrganizationParticipant;
                    organization.id = r.id;
                    organization.type = r.ClrTypeID;
                    organization.name = r.name;
                    organization.actionScope = (/** @type {?} */ (r.actionScope));
                    organization.organizationLevel = r.organizationLevel;
                    organization.organizationId = r.organizationId;
                    organization.organizationCode = r.organizationCode;
                    organization.organizationName = r.organizationName;
                    organization.includeChildren = r.includeChildren;
                    organization.parentsUntil = r.parentsUntil;
                    organization.tag = r.tag;
                    organization.order = role.order;
                    if (role.condition) {
                        organization.condition = role.condition.Value;
                    }
                    performers.push(organization);
                }
            }
        }));
        return performers;
    }
    /**
     * 移交等的范围，与上个方法比这里传入的是具体的参与者类型（用户参与者、岗位参与者，balbala）
     * @param {?} roles
     * @return {?}
     */
    static getPerformerListTest(roles) {
        /** @type {?} */
        const performers = new Array();
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        (role) => {
            if (role == null) {
                return;
            }
            if (role instanceof UserParticipantExpression) {
                /** @type {?} */
                const user = (/** @type {?} */ (role));
                if (user) {
                    /** @type {?} */
                    const userPerformer = new UserParticipant();
                    userPerformer.id = user.id;
                    userPerformer.performerId = user.UserId;
                    userPerformer.performerName = user.name;
                    userPerformer.type = user.ClrTypeID;
                    userPerformer.orgId = user.OrgId;
                    userPerformer.orgName = user.OrgName;
                    userPerformer.orgType = user.OrgType;
                    userPerformer.condition = role.condition ? role.condition.Value : '';
                    userPerformer.tag = user.Tag;
                    userPerformer.order = role.order;
                    performers.push(userPerformer);
                }
            }
            else if (role instanceof VariableParticipantExpression) {
                /** @type {?} */
                const variable = (/** @type {?} */ (role));
                if (variable) {
                    /** @type {?} */
                    const variablePerformer = new VariablePerformer();
                    variablePerformer.id = variable.id,
                        variablePerformer.name = variable.Name,
                        variablePerformer.type = variable.ClrTypeID,
                        variablePerformer.condition = role.condition ? role.condition.Value : '',
                        variablePerformer.tag = variable.Tag;
                    variablePerformer.relation = variable.Relation;
                    variablePerformer.varType = variable.VarType;
                    variablePerformer.varValue = variable.VarValue;
                    variablePerformer.order = role.order;
                    performers.push(variablePerformer);
                }
            }
            else if (role instanceof PositionParticipantExpression) {
                /** @type {?} */
                const position = (/** @type {?} */ (role));
                if (position) {
                    /** @type {?} */
                    const positionPerformer = new PositionParticipant();
                    positionPerformer.id = position.id;
                    positionPerformer.performerId = position.PositionId;
                    positionPerformer.positionType = position.PositionType;
                    positionPerformer.performerName = position.PositionName;
                    positionPerformer.type = position.ClrTypeID;
                    positionPerformer.orgId = position.OrgId || '';
                    positionPerformer.orgName = position.OrgName || '';
                    positionPerformer.orgType = position.OrgType || '';
                    positionPerformer.condition = role.condition ? role.condition.Value : '';
                    positionPerformer.order = role.order;
                    performers.push(positionPerformer);
                }
            }
            else if (role instanceof ComponentParticipantExpression) {
                /** @type {?} */
                const cmp = (/** @type {?} */ (role));
                if (cmp) {
                    /** @type {?} */
                    const componentPerformer = new ComponentParticipant();
                    componentPerformer.id = cmp.id;
                    componentPerformer.name = cmp.componentName;
                    componentPerformer.metadataId = cmp.componentId;
                    componentPerformer.methodCode = cmp.methodCode;
                    componentPerformer.methodName = cmp.methodName;
                    componentPerformer.type = cmp.ClrTypeID;
                    componentPerformer.actualParameters = new Array();
                    if (cmp.actualParameters && cmp.actualParameters.length > 0) {
                        /** @type {?} */
                        let paramters = [];
                        cmp.actualParameters.forEach((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => paramters.push({ code: p.Name, value: p.Value, valueText: p.ValueText, tag: p.Tag })));
                        componentPerformer.actualParameters = paramters;
                    }
                    if (role.condition) {
                        componentPerformer.condition = role.condition.Value;
                    }
                    componentPerformer.order = role.order;
                    performers.push(componentPerformer);
                }
            }
            else if (role instanceof ReportingLineParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const reportingLine = new ReportingLineParticipant();
                    reportingLine.id = r.id;
                    reportingLine.reportingLineDefId = r.ReportingLineDefId;
                    reportingLine.reportingLineDefName = r.ReportingLineDefName;
                    reportingLine.refOrgId = r.RefOrgId;
                    reportingLine.refUserId = r.RefUserId;
                    reportingLine.refEmployeeId = r.RefEmployeeId;
                    reportingLine.dimension = r.Dimension;
                    reportingLine.performerName = r.RefUserId;
                    reportingLine.tag = r.Tag;
                    reportingLine.type = r.ClrTypeID;
                    if (role.condition) {
                        reportingLine.condition = role.condition.Value;
                    }
                    reportingLine.order = role.order;
                    performers.push(reportingLine);
                }
            }
            else if (role instanceof ActivityExecutorParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const activityExecutor = new ActivityExecutorParticipant();
                    activityExecutor.id = r.id;
                    activityExecutor.type = r.ClrTypeID;
                    activityExecutor.activityDefId = r.activityDefId;
                    activityExecutor.activityDefName = r.activityDefName;
                    activityExecutor.performerName = '<' + r.activityDefName + mxResources.get('eventHandler');
                    if (role.condition) {
                        activityExecutor.condition = role.condition.Value;
                    }
                    activityExecutor.order = role.order;
                    performers.push(activityExecutor);
                }
            }
            else if (role instanceof MatrixParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const matrix = new MatrixParticipant();
                    matrix.id = r.id;
                    matrix.matrixDefId = r.matrixDefId;
                    matrix.matrixDefName = r.matrixDefName;
                    matrix.conditionField1 = r.conditionField1;
                    matrix.conditionFieldText1 = r.conditionFieldText1;
                    matrix.conditionField2 = r.conditionField2;
                    matrix.conditionFieldText2 = r.conditionFieldText2;
                    matrix.conditionField3 = r.conditionField3;
                    matrix.conditionFieldText3 = r.conditionFieldText3;
                    matrix.multivaluedCondition = r.multivaluedCondition;
                    matrix.dataFieldAlias = r.dataFieldAlias;
                    matrix.type = r.ClrTypeID;
                    matrix.order = role.order;
                    if (role.condition) {
                        matrix.condition = role.condition.Value;
                    }
                    performers.push(matrix);
                }
            }
            else if (role instanceof OrganizationParticipantExpression) {
                /** @type {?} */
                const r = (/** @type {?} */ (role));
                if (r) {
                    /** @type {?} */
                    const organization = new OrganizationParticipant;
                    organization.id = r.id;
                    organization.type = r.ClrTypeID;
                    organization.name = r.name;
                    organization.actionScope = (/** @type {?} */ (r.actionScope));
                    organization.organizationLevel = r.organizationLevel;
                    organization.organizationId = r.organizationId;
                    organization.organizationCode = r.organizationCode;
                    organization.organizationName = r.organizationName;
                    organization.includeChildren = r.includeChildren;
                    organization.parentsUntil = r.parentsUntil;
                    organization.tag = r.tag;
                    organization.order = role.order;
                    if (role.condition) {
                        organization.condition = role.condition.Value;
                    }
                    performers.push(organization);
                }
            }
        }));
        return performers;
    }
    /**
     *
     * @param {?} notifyAble
     * @param {?} dynamicParticipants
     * @return {?}
     */
    static getNotifyAble(notifyAble, dynamicParticipants) {
        /** @type {?} */
        const notifyScope = new ActionOrganizationScope();
        notifyScope.action = ActionScope.Notify;
        notifyScope.enable = notifyAble;
        if (notifyAble) {
            /** @type {?} */
            const roles = dynamicParticipants.filter((/**
             * @param {?} r
             * @return {?}
             */
            r => r.actionScope === ActionScope.Notify));
            /** @type {?} */
            let res = roles.find((/**
             * @param {?} r
             * @return {?}
             */
            r => ((/** @type {?} */ (r))).organizationLevel && !((/** @type {?} */ (r))).order));
            /** @type {?} */
            let list = [];
            if (res) {
                /** @type {?} */
                const organization = new OrganizationParticipant;
                organization.id = res.id;
                organization.type = res.ClrTypeID;
                organization.name = res.name;
                organization.actionScope = (/** @type {?} */ (res.actionScope));
                organization.organizationLevel = ((/** @type {?} */ (res))).organizationLevel;
                organization.organizationId = ((/** @type {?} */ (res))).organizationId;
                organization.organizationCode = ((/** @type {?} */ (res))).organizationCode;
                organization.organizationName = ((/** @type {?} */ (res))).organizationName;
                organization.includeChildren = ((/** @type {?} */ (res))).includeChildren;
                organization.parentsUntil = ((/** @type {?} */ (res))).parentsUntil;
                organization.tag = ((/** @type {?} */ (res))).tag;
                organization.order = 1;
                list.push(organization);
            }
            else {
                list = PropertyHelper.getPerformerListTest(roles);
            }
            notifyScope.scope = new OrganizationPotentialOwner();
            if (list && list.length > 0) {
                notifyScope.scope.participantInfo = new ParticipantInfo();
                notifyScope.scope.participantInfo.potentialOwnerList = list;
                notifyScope.scope.participantInfo.isAllScope = true;
            }
            else {
                notifyScope.scope.participantInfo = new ParticipantInfo();
                notifyScope.scope.participantInfo.isAllScope = false;
            }
        }
        return notifyScope;
    }
    /**
     * @param {?} process
     * @param {?} parameters
     * @return {?}
     */
    static updateFormalParameters(process, parameters) {
        if (!parameters) {
            parameters = [];
        }
        /** @type {?} */
        let objects = process.GetDataObjects();
        if (parameters !== null && parameters.length > 0) {
            for (const p of parameters) {
                /** @type {?} */
                const dataType = new DataType(process.Model);
                // 先移除code相同的dataObject
                for (const o of objects) {
                    if (o instanceof DataObject && o.Name === p.code) {
                        process.RemoveDataObject(o.Id);
                    }
                }
                dataType.Category = DataTypes.BasicType;
                dataType.BasicType = p.dataType;
                dataType.Description = p.description;
                // dataType.InitialValue = p.initialValue;
                if (p.parameterMode === 0) {
                    /** @type {?} */
                    const dataObject = new ValuedDataObject(process.Model);
                    dataObject.Name = p.code;
                    dataObject.Documentation = p.name;
                    dataObject.DataType = dataType;
                    dataObject.IsAllowNull = p.allowNull;
                    if (p.initialValue || p.initialValueType) {
                        /** @type {?} */
                        const variableSetting = new VariableSetting(process.Model);
                        variableSetting.variableCode = p.code;
                        variableSetting.variableName = p.name;
                        variableSetting.tag = p.initialValueType;
                        variableSetting.value = p.initialValue;
                        variableSetting.valueText = p.initialValue;
                        dataObject.variableSetting = variableSetting;
                    }
                    process.AddDataObject(dataObject);
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,