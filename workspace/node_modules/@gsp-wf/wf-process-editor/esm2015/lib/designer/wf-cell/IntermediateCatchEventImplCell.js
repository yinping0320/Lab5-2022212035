/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { Signal } from "@edp-pmf/bpmn-model";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { IntermediateCatchEventImpl, Component, BackWardRule, ActualParameter, VariableSetting, SignalEventDefinitionImpl } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { IntermediateCatchEventImplPropertyKeys } from "./property-keys/IntermediateCatchEventImplPropertyKeys";
/**
 * 信号捕获活动节点
 */
export class IntermediateCatchEventImplCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = IntermediateCatchEventImplCell.CLR_TYPE_ID;
        this.name = "信号捕获";
        this.nameLanguage = {
            "zh-CHS": "信号捕获",
            "zh-CHT": "訊號捕獲",
            "en": "Acquisition",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/catchEvent.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/catchEvent_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "IntermediateCatchEvent" + BpmnModelHelper.GenerateElementId();
        // 创建而非复制时执行
        if (flowElt == null) {
            flowNode.initEventDefinitions();
        }
        return flowNode;
    }
    /**
     * @param {?=} flowElt
     * @param {?=} diagElt
     * @return {?}
     */
    bindBpmnModel(flowElt, diagElt) {
        super.bindBpmnModel(flowElt, diagElt);
        /** @type {?} */
        const bpmnModel = this.editorUi.graph.bpmnModel;
        this.addSignals(this.flowElement);
    }
    /**
     * @param {?} catchEvent
     * @return {?}
     */
    addSignals(catchEvent) {
        /** @type {?} */
        const bpmnModel = catchEvent.Model;
        if (catchEvent.EventDefinitions && catchEvent.EventDefinitions.length > 0) {
            if (!bpmnModel.signals) {
                bpmnModel.signals = [];
            }
            for (const e of catchEvent.EventDefinitions) {
                /** @type {?} */
                const event = (/** @type {?} */ (e));
                if (bpmnModel.signals.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => s.Name === event.SignalRef)) === -1) {
                    /** @type {?} */
                    const signal = new Signal(bpmnModel);
                    signal.Name = event.SignalRef;
                    bpmnModel.signals.push(signal);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: IntermediateCatchEventImplPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: IntermediateCatchEventImplPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: IntermediateCatchEventImplPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: IntermediateCatchEventImplPropertyKeys.EventDefinitions, propertyName: mxResources.get('eventDefinitions'), propertyType: 'modal' },
            { propertyID: IntermediateCatchEventImplPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' }
        ];
        if (act.EventDefinitions && this.isBackEventExist(act.EventDefinitions)) {
            activityProperty.properties.push({ propertyID: IntermediateCatchEventImplPropertyKeys.BackWardRule, propertyName: mxResources.get('backWardRule'), propertyType: 'modal' });
            propertyData[IntermediateCatchEventImplPropertyKeys.BackWardRule] = act.backWardRule;
        }
        propertyData[IntermediateCatchEventImplPropertyKeys.Id] = act.Id;
        propertyData[IntermediateCatchEventImplPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[IntermediateCatchEventImplPropertyKeys.Name] = act.Name;
        propertyData[IntermediateCatchEventImplPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[IntermediateCatchEventImplPropertyKeys.EventDefinitions] = act.EventDefinitions;
        propertyData[IntermediateCatchEventImplPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * 判断是否存在反向事件
     * @param {?} events
     * @return {?}
     */
    isBackEventExist(events) {
        for (let e of events) {
            /** @type {?} */
            const event = (/** @type {?} */ (e));
            if (event.triggerAction === 'Back') {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const catchEvent = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case IntermediateCatchEventImplPropertyKeys.EventDefinitions:
                this.updateEventDefinitions(catchEvent, obj);
                break;
            case IntermediateCatchEventImplPropertyKeys.BackWardRule:
                this.updateBackWardRule(catchEvent, obj);
                break;
            case IntermediateCatchEventImplPropertyKeys.variableSettings:
                this.updateVariableSettings(catchEvent, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    updateEventDefinitions(catchEvent, obj) {
        if (catchEvent) {
            this.removeSignals(catchEvent);
            /** @type {?} */
            let events = (/** @type {?} */ (obj.propertyValue));
            catchEvent.EventDefinitions = new Array();
            for (let e of events) {
                /** @type {?} */
                let item = new SignalEventDefinitionImpl(catchEvent.Model);
                item.name = e.name;
                item.triggerAction = e.triggerAction;
                item.Async = false;
                item.SignalRef = e.SignalRef;
                catchEvent.EventDefinitions.push(item);
            }
            this.addSignals(catchEvent);
        }
        // 判断审批项是否包含驳回？不包含时，驳回规则清空
        if (!this.isBackEventExist(catchEvent.EventDefinitions)) {
            catchEvent.backWardRule = null;
        }
        else if (!catchEvent.backWardRule) {
            catchEvent.backWardRule = new BackWardRule(catchEvent.Model);
        }
        // 更新属性框
        // Utils.postMessage(ResourceKeys.wf_showProperty, this.getPropConfig());
    }
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    updateBackWardRule(catchEvent, obj) {
        /** @type {?} */
        const data = obj.propertyValue;
        /** @type {?} */
        let backWardRule = new BackWardRule(catchEvent.Model);
        backWardRule.TargetRef = data.TargetRef;
        backWardRule.SelectTargetAble = data.SelectTargetAble;
        backWardRule.WaitReturn = data.WaitReturn;
        backWardRule.ResubmitEffect = data.ResubmitEffect;
        backWardRule.DynamicBackWardRuleAble = data.DynamicBackWardRuleAble;
        backWardRule.SelectTargetList = data.SelectTargetList;
        catchEvent.backWardRule = backWardRule;
    }
    /**
     * @param {?} catchEvent
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(catchEvent, obj) {
        /** @type {?} */
        const bpmnModel = catchEvent.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (catchEvent.variableSettings && catchEvent.variableSettings.length > 0) {
            for (const v of catchEvent.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        catchEvent.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                // variableSetting.variableId = v.variableId;
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                catchEvent.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
    /**
     * @param {?} catchEvent
     * @return {?}
     */
    removeSignals(catchEvent) {
        /** @type {?} */
        const bpmnModel = catchEvent.Model;
        if (catchEvent.EventDefinitions && catchEvent.EventDefinitions.length > 0) {
            /** @type {?} */
            const flowElements = bpmnModel.DefaultProcess.GetFlowElements();
            /** @type {?} */
            const eventDefs = new Map();
            for (const key in flowElements) {
                if (flowElements[key] instanceof IntermediateCatchEventImpl && flowElements[key].Id !== catchEvent.Id) {
                    /** @type {?} */
                    const catchEvent = (/** @type {?} */ (flowElements[key]));
                    for (const e of catchEvent.EventDefinitions) {
                        /** @type {?} */
                        const event = (/** @type {?} */ (e));
                        if (!eventDefs.get(event.SignalRef)) {
                            eventDefs.set(event.SignalRef, event);
                        }
                    }
                }
            }
            for (const e of catchEvent.EventDefinitions) {
                /** @type {?} */
                const eventDef = (/** @type {?} */ (e));
                if (!eventDefs.get(eventDef.SignalRef)) {
                    /** @type {?} */
                    const i = bpmnModel.signals.findIndex((/**
                     * @param {?} s
                     * @return {?}
                     */
                    s => s.Name === eventDef.SignalRef));
                    if (i > -1) {
                        bpmnModel.signals.splice(i, 1);
                    }
                }
            }
        }
    }
}
IntermediateCatchEventImplCell.CLR_TYPE_ID = IntermediateCatchEventImpl.Clr_Type_ID;
if (false) {
    /** @type {?} */
    IntermediateCatchEventImplCell.CLR_TYPE_ID;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.clrTypeId;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.name;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.nameLanguage;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.flowElement;
    /** @type {?} */
    IntermediateCatchEventImplCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,