/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SequenceFlowState, Expression } from "@edp-pmf/bpmn-model";
import { SequenceFlowEdge, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { UserActivity, Condition } from "@gsp-wf/wf-process-model";
import { SequenceFlowPropertyKeys } from "./property-keys/SequenceFlowPropertyKeys";
import { mxResources } from "@edp-pmf/mxgraph-ts";
/**
 * 事件流连线，增加状态颜色信息
 */
export class WfSequenceFlowEdge extends SequenceFlowEdge {
    constructor() {
        super(...arguments);
        this.localePipe = null;
        this.strokeColors = {
            [SequenceFlowState.Default]: "#6482b9",
        };
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        const sequenceFlow = this.flowElement;
        /** @type {?} */
        const sourceNode = sequenceFlow.Model.DefaultProcess.GetFlowElement(sequenceFlow.SourceRef);
        /** @type {?} */
        let conditionConfig = new ElementPropertyConfig();
        /** @type {?} */
        let basicConfig = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicConfig.categoryId = 'basic';
        basicConfig.categoryName = mxResources.get('basicInfo');
        basicConfig.tabId = 'basic';
        basicConfig.tabName = mxResources.get('basic');
        basicConfig.properties = [
            { propertyID: SequenceFlowPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: SequenceFlowPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: SequenceFlowPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        conditionConfig.categoryId = 'condition';
        conditionConfig.categoryName = mxResources.get('basicInfo');
        conditionConfig.tabId = 'basic';
        conditionConfig.tabName = mxResources.get('basic');
        conditionConfig.properties = [
            { propertyID: SequenceFlowPropertyKeys.ConditionExpression, propertyName: mxResources.get('ConditionExpression'), propertyType: 'modal' }
        ];
        // 源节点为排他网关和UserActivity时
        if (sourceNode.ClrTypeID === UserActivity.Clr_Type_ID || sourceNode.ClrTypeID === 'bpmn.ExclusiveGateway' || sourceNode.ClrTypeID === 'bpmn.InclusiveGateway') {
            conditionConfig.properties.push({ propertyID: SequenceFlowPropertyKeys.Default, propertyName: mxResources.get('default'), propertyType: 'select' });
        }
        this.setSequenceFlowValue(sequenceFlow, sourceNode, propertyData);
        return {
            propertyConfig: [basicConfig, conditionConfig],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const sequenceFlow = this.flowElement;
        /** @type {?} */
        let propertyId = obj.propertyID;
        switch (propertyId) {
            case SequenceFlowPropertyKeys.ConditionExpression: // 更新条件
                this.updateConditionExpr(sequenceFlow, obj.propertyValue);
                break;
            case SequenceFlowPropertyKeys.Default:
                this.modifyDefaultSequenceFlow(sequenceFlow, obj.propertyValue);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * 设置连接线属性值
     * @param {?} sequenceFlow
     * @param {?} sourceNode
     * @param {?} propertyData
     * @return {?}
     */
    setSequenceFlowValue(sequenceFlow, sourceNode, propertyData) {
        propertyData[SequenceFlowPropertyKeys.Id] = sequenceFlow.Id;
        propertyData[SequenceFlowPropertyKeys.ClrTypeID] = sequenceFlow.ClrTypeID;
        propertyData[SequenceFlowPropertyKeys.Name] = sequenceFlow.Name;
        propertyData[SequenceFlowPropertyKeys.NameLanguage] = sequenceFlow.NameLanguage || {
            "zh-CHS": sequenceFlow.Name,
        };
        if (!sequenceFlow.ConditionExpression || !sequenceFlow.ConditionExpression.MexExpression)
            propertyData[SequenceFlowPropertyKeys.ConditionExpression] = '';
        else
            propertyData[SequenceFlowPropertyKeys.ConditionExpression] =
                ((/** @type {?} */ (sequenceFlow.ConditionExpression.MexExpression))).Value;
        if (sourceNode.ClrTypeID === UserActivity.Clr_Type_ID) {
            /** @type {?} */
            const userActivity = (/** @type {?} */ (sourceNode));
            if (userActivity.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
        if (sourceNode.ClrTypeID === 'bpmn.ExclusiveGateway') {
            /** @type {?} */
            const gateway = (/** @type {?} */ (sourceNode));
            if (gateway.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
        if (sourceNode.ClrTypeID === 'bpmn.InclusiveGateway') {
            /** @type {?} */
            const gateway = (/** @type {?} */ (sourceNode));
            if (gateway.Default === sequenceFlow.Id) {
                propertyData[SequenceFlowPropertyKeys.Default] = true;
            }
            else {
                propertyData[SequenceFlowPropertyKeys.Default] = false;
            }
        }
    }
    /**
     * 更新分支条件
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    updateConditionExpr(seqFlow, val) {
        seqFlow.ConditionExpression = null;
        if (val) {
            /** @type {?} */
            let expression = new Expression(seqFlow.Model);
            /** @type {?} */
            let condition = new Condition(seqFlow.Model);
            condition.Value = val;
            expression.MexExpression = condition;
            seqFlow.ConditionExpression = expression;
        }
    }
    /**
     * 更新默认分支(当前适用：排他网关+活动节点)
     * @param {?} seqFlow
     * @param {?} val
     * @return {?}
     */
    modifyDefaultSequenceFlow(seqFlow, val) {
        // 获取流转线源节点
        /** @type {?} */
        const node = (/** @type {?} */ (seqFlow.Model.DefaultProcess.GetFlowElement(seqFlow.SourceRef)));
        if (node.ClrTypeID === UserActivity.Clr_Type_ID) {
            // 节点为UserActivity类型
            /** @type {?} */
            const userActivity = (/** @type {?} */ (node));
            if (val === true) {
                userActivity.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (userActivity.Default === seqFlow.Id) {
                    userActivity.Default = null;
                }
            }
        }
        else if (node.ClrTypeID === 'bpmn.ExclusiveGateway') {
            // 排他网关
            /** @type {?} */
            const gateway = (/** @type {?} */ (node));
            if (val === true) {
                gateway.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (gateway.Default === seqFlow.Id) {
                    gateway.Default = null;
                }
            }
        }
        else if (node.ClrTypeID === 'bpmn.InclusiveGateway') {
            // 包容网关
            /** @type {?} */
            const gateway = (/** @type {?} */ (node));
            if (val === true) {
                gateway.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (gateway.Default === seqFlow.Id) {
                    gateway.Default = null;
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    WfSequenceFlowEdge.prototype.localePipe;
    /** @type {?} */
    WfSequenceFlowEdge.prototype.strokeColors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ZTZXF1ZW5jZUZsb3dFZGdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9kZXNpZ25lci93Zi1jZWxsL1dmU2VxdWVuY2VGbG93RWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUErQyxVQUFVLEVBQThCLE1BQU0scUJBQXFCLENBQUM7QUFDN0ksT0FBTyxFQUFFLGdCQUFnQixFQUE0QixxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pHLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFcEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBS2xELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxnQkFBZ0I7SUFBeEQ7O1FBQ0ksZUFBVSxHQUFpQixJQUFJLENBQUM7UUFDaEMsaUJBQVksR0FBRztZQUNYLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUztTQUN6QyxDQUFDO0lBOEpOLENBQUM7Ozs7SUE1SkcsbUJBQW1COztjQUNULFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVzs7Y0FDL0IsVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDOztZQUN2RixlQUFlLEdBQTBCLElBQUkscUJBQXFCLEVBQUU7O1lBQ3BFLFdBQVcsR0FBMEIsSUFBSSxxQkFBcUIsRUFBRTs7WUFDaEUsWUFBWSxHQUFHLEVBQUU7UUFFckIsV0FBVyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7UUFDakMsV0FBVyxDQUFDLFlBQVksR0FBSSxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pE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O2lCQUMxQjthQUNKO1NBQ0o7SUFDTCxDQUFDO0NBQ0o7OztJQWpLRyx3Q0FBZ0M7O0lBQ2hDLDBDQUVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVuY2VGbG93U3RhdGUsIFNlcXVlbmNlRmxvdywgRmxvd0VsZW1lbnQsIEV4Y2x1c2l2ZUdhdGV3YXksIEV4cHJlc3Npb24sIEZsb3dOb2RlLCBJbmNsdXNpdmVHYXRld2F5IH0gZnJvbSBcIkBlZHAtcG1mL2JwbW4tbW9kZWxcIjtcclxuaW1wb3J0IHsgU2VxdWVuY2VGbG93RWRnZSwgRmFycmlzUHJvcENvbmZpZ1dpdGhEYXRhLCBFbGVtZW50UHJvcGVydHlDb25maWcgfSBmcm9tIFwiQGVkcC1wbWYvZ3JhcGhlZGl0b3JcIjtcclxuaW1wb3J0IHsgVXNlckFjdGl2aXR5LCBDb25kaXRpb24gfSBmcm9tIFwiQGdzcC13Zi93Zi1wcm9jZXNzLW1vZGVsXCI7XHJcbmltcG9ydCB7IFNlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cyB9IGZyb20gXCIuL3Byb3BlcnR5LWtleXMvU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzXCI7XHJcbmltcG9ydCB7IFdmTG9jYWxlUGlwZSB9IGZyb20gXCIuLi8uLi9pMThuL3BpcGUvd2YtcHJvY2Vzcy1lZGl0b3ItbG9jYWxlLnBpcGVcIjtcclxuaW1wb3J0IHsgbXhSZXNvdXJjZXMgfSBmcm9tIFwiQGVkcC1wbWYvbXhncmFwaC10c1wiO1xyXG5cclxuLyoqXHJcbiAqIOS6i+S7tua1gei/nue6v++8jOWinuWKoOeKtuaAgeminOiJsuS/oeaBr1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdmU2VxdWVuY2VGbG93RWRnZSBleHRlbmRzIFNlcXVlbmNlRmxvd0VkZ2Uge1xyXG4gICAgbG9jYWxlUGlwZTogV2ZMb2NhbGVQaXBlID0gbnVsbDtcclxuICAgIHN0cm9rZUNvbG9ycyA9IHtcclxuICAgICAgICBbU2VxdWVuY2VGbG93U3RhdGUuRGVmYXVsdF06IFwiIzY0ODJiOVwiLFxyXG4gICAgfTtcclxuXHJcbiAgICBnZXRGYXJyaXNQcm9wQ29uZmlnKCk6IEZhcnJpc1Byb3BDb25maWdXaXRoRGF0YSB7XHJcbiAgICAgICAgY29uc3Qgc2VxdWVuY2VGbG93ID0gdGhpcy5mbG93RWxlbWVudDtcclxuICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gc2VxdWVuY2VGbG93Lk1vZGVsLkRlZmF1bHRQcm9jZXNzLkdldEZsb3dFbGVtZW50KHNlcXVlbmNlRmxvdy5Tb3VyY2VSZWYpO1xyXG4gICAgICAgIGxldCBjb25kaXRpb25Db25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZyA9IG5ldyBFbGVtZW50UHJvcGVydHlDb25maWcoKTtcclxuICAgICAgICBsZXQgYmFzaWNDb25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZyA9IG5ldyBFbGVtZW50UHJvcGVydHlDb25maWcoKTtcclxuICAgICAgICBsZXQgcHJvcGVydHlEYXRhID0ge307XHJcblxyXG4gICAgICAgIGJhc2ljQ29uZmlnLmNhdGVnb3J5SWQgPSAnYmFzaWMnO1xyXG4gICAgICAgIGJhc2ljQ29uZmlnLmNhdGVnb3J5TmFtZSA9ICBteFJlc291cmNlcy5nZXQoJ2Jhc2ljSW5mbycpO1xyXG4gICAgICAgIGJhc2ljQ29uZmlnLnRhYklkID0gJ2Jhc2ljJztcclxuICAgICAgICBiYXNpY0NvbmZpZy50YWJOYW1lID0gIG14UmVzb3VyY2VzLmdldCgnYmFzaWMnKVxyXG4gICAgICAgIGJhc2ljQ29uZmlnLnByb3BlcnRpZXMgPSBbXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzLk5hbWUsIHByb3BlcnR5TmFtZTogIG14UmVzb3VyY2VzLmdldCgnbmFtZScpLCBwcm9wZXJ0eVR5cGU6ICdzdHJpbmcnLCB2aXNpYmxlOiAhdGhpcy5lZGl0b3JVaS5tdWx0aUxhbmdFbmFibGVkIH0sXHJcbiAgICAgICAgICAgIHsgcHJvcGVydHlJRDogU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzLk5hbWVMYW5ndWFnZSwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KCduYW1lTGFuZ3VhZ2UnKSwgcHJvcGVydHlUeXBlOiAnbXVsdGlMYW5ndWFnZScsIHZpc2libGU6IHRoaXMuZWRpdG9yVWkubXVsdGlMYW5nRW5hYmxlZCB9LFxyXG4gICAgICAgICAgICB7IHByb3BlcnR5SUQ6IFNlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5JZCwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KCdpZCcpLCBwcm9wZXJ0eVR5cGU6ICdzdHJpbmcnLCByZWFkb25seTogdHJ1ZSB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25kaXRpb25Db25maWcuY2F0ZWdvcnlJZCA9ICdjb25kaXRpb24nO1xyXG4gICAgICAgIGNvbmRpdGlvbkNvbmZpZy5jYXRlZ29yeU5hbWUgPSAgbXhSZXNvdXJjZXMuZ2V0KCdiYXNpY0luZm8nKTtcclxuICAgICAgICBjb25kaXRpb25Db25maWcudGFiSWQgPSAnYmFzaWMnO1xyXG4gICAgICAgIGNvbmRpdGlvbkNvbmZpZy50YWJOYW1lID0gIG14UmVzb3VyY2VzLmdldCgnYmFzaWMnKTtcclxuICAgICAgICBjb25kaXRpb25Db25maWcucHJvcGVydGllcyA9IFtcclxuICAgICAgICAgICAgeyBwcm9wZXJ0eUlEOiBTZXF1ZW5jZUZsb3dQcm9wZXJ0eUtleXMuQ29uZGl0aW9uRXhwcmVzc2lvbiwgcHJvcGVydHlOYW1lOiAgbXhSZXNvdXJjZXMuZ2V0KCdDb25kaXRpb25FeHByZXNzaW9uJyksIHByb3BlcnR5VHlwZTogJ21vZGFsJyB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICAvLyDmupDoioLngrnkuLrmjpLku5bnvZHlhbPlkoxVc2VyQWN0aXZpdHnml7ZcclxuICAgICAgICBpZiAoc291cmNlTm9kZS5DbHJUeXBlSUQgPT09IFVzZXJBY3Rpdml0eS5DbHJfVHlwZV9JRCB8fCBzb3VyY2VOb2RlLkNsclR5cGVJRCA9PT0gJ2JwbW4uRXhjbHVzaXZlR2F0ZXdheScgfHwgc291cmNlTm9kZS5DbHJUeXBlSUQgPT09ICdicG1uLkluY2x1c2l2ZUdhdGV3YXknKSB7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbkNvbmZpZy5wcm9wZXJ0aWVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICB7IHByb3BlcnR5SUQ6IFNlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5EZWZhdWx0LCBwcm9wZXJ0eU5hbWU6ICBteFJlc291cmNlcy5nZXQoJ2RlZmF1bHQnKSwgcHJvcGVydHlUeXBlOiAnc2VsZWN0JyB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFNlcXVlbmNlRmxvd1ZhbHVlKHNlcXVlbmNlRmxvdywgc291cmNlTm9kZSwgcHJvcGVydHlEYXRhKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcm9wZXJ0eUNvbmZpZzogW2Jhc2ljQ29uZmlnLCBjb25kaXRpb25Db25maWddLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eURhdGE6IHByb3BlcnR5RGF0YVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvcHMob2JqOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzZXF1ZW5jZUZsb3cgPSB0aGlzLmZsb3dFbGVtZW50O1xyXG4gICAgICAgIGxldCBwcm9wZXJ0eUlkOiBzdHJpbmcgPSBvYmoucHJvcGVydHlJRDtcclxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5SWQpIHtcclxuICAgICAgICAgICAgY2FzZSBTZXF1ZW5jZUZsb3dQcm9wZXJ0eUtleXMuQ29uZGl0aW9uRXhwcmVzc2lvbjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOabtOaWsOadoeS7tlxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb25kaXRpb25FeHByKHNlcXVlbmNlRmxvdywgb2JqLnByb3BlcnR5VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzLkRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGlmeURlZmF1bHRTZXF1ZW5jZUZsb3coc2VxdWVuY2VGbG93LCBvYmoucHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHN1cGVyLnVwZGF0ZVByb3BzKG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7ov57mjqXnur/lsZ7mgKflgLxcclxuICAgICAqIEBwYXJhbSBzZXF1ZW5jZVxyXG4gICAgICogQHBhcmFtIHByb3BlcnR5RGF0YVxyXG4gICAgICovXHJcbiAgICBzZXRTZXF1ZW5jZUZsb3dWYWx1ZShzZXF1ZW5jZUZsb3c6IFNlcXVlbmNlRmxvdywgc291cmNlTm9kZTogRmxvd0VsZW1lbnQsIHByb3BlcnR5RGF0YTogT2JqZWN0KSB7XHJcbiAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5JZF0gPSBzZXF1ZW5jZUZsb3cuSWQ7XHJcbiAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5DbHJUeXBlSURdID0gc2VxdWVuY2VGbG93LkNsclR5cGVJRDtcclxuICAgICAgICBwcm9wZXJ0eURhdGFbU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzLk5hbWVdID0gc2VxdWVuY2VGbG93Lk5hbWU7XHJcbiAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5OYW1lTGFuZ3VhZ2VdID0gc2VxdWVuY2VGbG93Lk5hbWVMYW5ndWFnZSB8fCB7XHJcbiAgICAgICAgICAgIFwiemgtQ0hTXCI6IHNlcXVlbmNlRmxvdy5OYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFzZXF1ZW5jZUZsb3cuQ29uZGl0aW9uRXhwcmVzc2lvbiB8fCAhc2VxdWVuY2VGbG93LkNvbmRpdGlvbkV4cHJlc3Npb24uTWV4RXhwcmVzc2lvbilcclxuICAgICAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5Db25kaXRpb25FeHByZXNzaW9uXSA9ICcnO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5Db25kaXRpb25FeHByZXNzaW9uXSA9XHJcbiAgICAgICAgICAgICAgICAoc2VxdWVuY2VGbG93LkNvbmRpdGlvbkV4cHJlc3Npb24uTWV4RXhwcmVzc2lvbiBhcyBDb25kaXRpb24pLlZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoc291cmNlTm9kZS5DbHJUeXBlSUQgPT09IFVzZXJBY3Rpdml0eS5DbHJfVHlwZV9JRCkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyQWN0aXZpdHkgPSBzb3VyY2VOb2RlIGFzIFVzZXJBY3Rpdml0eTtcclxuICAgICAgICAgICAgaWYgKHVzZXJBY3Rpdml0eS5EZWZhdWx0ID09PSBzZXF1ZW5jZUZsb3cuSWQpIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGF0YVtTZXF1ZW5jZUZsb3dQcm9wZXJ0eUtleXMuRGVmYXVsdF0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5EZWZhdWx0XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzb3VyY2VOb2RlLkNsclR5cGVJRCA9PT0gJ2JwbW4uRXhjbHVzaXZlR2F0ZXdheScpIHtcclxuICAgICAgICAgICAgY29uc3QgZ2F0ZXdheSA9IHNvdXJjZU5vZGUgYXMgRXhjbHVzaXZlR2F0ZXdheTtcclxuICAgICAgICAgICAgaWYgKGdhdGV3YXkuRGVmYXVsdCA9PT0gc2VxdWVuY2VGbG93LklkKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzLkRlZmF1bHRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGF0YVtTZXF1ZW5jZUZsb3dQcm9wZXJ0eUtleXMuRGVmYXVsdF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc291cmNlTm9kZS5DbHJUeXBlSUQgPT09ICdicG1uLkluY2x1c2l2ZUdhdGV3YXknKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdhdGV3YXkgPSBzb3VyY2VOb2RlIGFzIEluY2x1c2l2ZUdhdGV3YXk7XHJcbiAgICAgICAgICAgIGlmIChnYXRld2F5LkRlZmF1bHQgPT09IHNlcXVlbmNlRmxvdy5JZCkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEYXRhW1NlcXVlbmNlRmxvd1Byb3BlcnR5S2V5cy5EZWZhdWx0XSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFbU2VxdWVuY2VGbG93UHJvcGVydHlLZXlzLkRlZmF1bHRdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDliIbmlK/mnaHku7ZcclxuICAgICAqIEBwYXJhbSBzZXFGbG93XHJcbiAgICAgKiBAcGFyYW0gdmFsXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUNvbmRpdGlvbkV4cHIoc2VxRmxvdzogU2VxdWVuY2VGbG93LCB2YWw6IHN0cmluZykge1xyXG4gICAgICAgIHNlcUZsb3cuQ29uZGl0aW9uRXhwcmVzc2lvbiA9IG51bGw7XHJcbiAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICBsZXQgZXhwcmVzc2lvbiA9IG5ldyBFeHByZXNzaW9uKHNlcUZsb3cuTW9kZWwpO1xyXG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gbmV3IENvbmRpdGlvbihzZXFGbG93Lk1vZGVsKTtcclxuICAgICAgICAgICAgY29uZGl0aW9uLlZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICBleHByZXNzaW9uLk1leEV4cHJlc3Npb24gPSBjb25kaXRpb247XHJcbiAgICAgICAgICAgIHNlcUZsb3cuQ29uZGl0aW9uRXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05paw6buY6K6k5YiG5pSvKOW9k+WJjemAgueUqO+8muaOkuS7lue9keWFsyvmtLvliqjoioLngrkpXHJcbiAgICAgKiBAcGFyYW0gc2VxRmxvd1xyXG4gICAgICogQHBhcmFtIHZhbFxyXG4gICAgICovXHJcbiAgICBtb2RpZnlEZWZhdWx0U2VxdWVuY2VGbG93KHNlcUZsb3c6IFNlcXVlbmNlRmxvdywgdmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgLy8g6I635Y+W5rWB6L2s57q/5rqQ6IqC54K5XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IHNlcUZsb3cuTW9kZWwuRGVmYXVsdFByb2Nlc3MuR2V0Rmxvd0VsZW1lbnQoc2VxRmxvdy5Tb3VyY2VSZWYpIGFzIEZsb3dOb2RlO1xyXG4gICAgICAgIGlmIChub2RlLkNsclR5cGVJRCA9PT0gVXNlckFjdGl2aXR5LkNscl9UeXBlX0lEKSB7XHJcbiAgICAgICAgICAgIC8vIOiKgueCueS4ulVzZXJBY3Rpdml0eeexu+Wei1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyQWN0aXZpdHkgPSBub2RlIGFzIFVzZXJBY3Rpdml0eTtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdXNlckFjdGl2aXR5LkRlZmF1bHQgPSBzZXFGbG93LklkO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIOa6kOiKgueCueeahOm7mOiupOWIhuaUrz09Pea1gei9rOWIhuaUr0lEXHJcbiAgICAgICAgICAgICAgICBpZiAodXNlckFjdGl2aXR5LkRlZmF1bHQgPT09IHNlcUZsb3cuSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyQWN0aXZpdHkuRGVmYXVsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuQ2xyVHlwZUlEID09PSAnYnBtbi5FeGNsdXNpdmVHYXRld2F5Jykge1xyXG4gICAgICAgICAgICAvLyDmjpLku5bnvZHlhbNcclxuICAgICAgICAgICAgY29uc3QgZ2F0ZXdheSA9IG5vZGUgYXMgRXhjbHVzaXZlR2F0ZXdheTtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgZ2F0ZXdheS5EZWZhdWx0ID0gc2VxRmxvdy5JZDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmupDoioLngrnnmoTpu5jorqTliIbmlK89PT3mtYHovazliIbmlK9JRFxyXG4gICAgICAgICAgICAgICAgaWYgKGdhdGV3YXkuRGVmYXVsdCA9PT0gc2VxRmxvdy5JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXkuRGVmYXVsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuQ2xyVHlwZUlEID09PSAnYnBtbi5JbmNsdXNpdmVHYXRld2F5Jykge1xyXG4gICAgICAgICAgICAvLyDljIXlrrnnvZHlhbNcclxuICAgICAgICAgICAgY29uc3QgZ2F0ZXdheSA9IG5vZGUgYXMgSW5jbHVzaXZlR2F0ZXdheTtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgZ2F0ZXdheS5EZWZhdWx0ID0gc2VxRmxvdy5JZDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmupDoioLngrnnmoTpu5jorqTliIbmlK89PT3mtYHovazliIbmlK9JRFxyXG4gICAgICAgICAgICAgICAgaWYgKGdhdGV3YXkuRGVmYXVsdCA9PT0gc2VxRmxvdy5JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXkuRGVmYXVsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19