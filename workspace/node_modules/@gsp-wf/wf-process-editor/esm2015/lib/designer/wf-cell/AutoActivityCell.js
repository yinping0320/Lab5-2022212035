/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NodeCell, ElementPropertyConfig } from "@edp-pmf/grapheditor";
import { mxResources } from "@edp-pmf/mxgraph-ts";
import { AutoActivity, Component, ActualParameter, VariableSetting } from "@gsp-wf/wf-process-model";
import { PropertyHelper } from "./PropertyHelper";
import { BpmnModelHelper, FlowNodeState } from "@edp-pmf/bpmn-model";
import { WfConstants } from "../WfConstants";
import { AutoActivityPropertyKeys } from "./property-keys/AutoActivityPropertyKeys";
/**
 * 服务活动节点
 */
export class AutoActivityCell extends NodeCell {
    /**
     * @param {?=} value
     * @param {?=} geometry
     * @param {?=} style
     */
    constructor(value, geometry, style) {
        super(value, geometry, style);
        this.clrTypeId = AutoActivityCell.CLR_TYPE_ID;
        this.name = "服务";
        this.nameLanguage = {
            "zh-CHS": "服务",
            "zh-CHT": "服務",
            "en": "Service ",
        };
        this.imgUrls = {
            [FlowNodeState.Default]: WfConstants.IMAGE_PATH + "/auto.png",
            [FlowNodeState.Selected]: WfConstants.IMAGE_PATH + "/auto_select.svg",
        };
    }
    /**
     * @param {?=} flowElt
     * @return {?}
     */
    createFlowElement(flowElt) {
        /** @type {?} */
        const flowNode = (/** @type {?} */ (super.createFlowElement(flowElt)));
        flowNode.Id = "autoActivity" + BpmnModelHelper.GenerateElementId();
        return flowNode;
    }
    /**
     * @return {?}
     */
    getFarrisPropConfig() {
        /** @type {?} */
        let act = this.flowElement;
        // 组织属性框
        /** @type {?} */
        let basicProperty = new ElementPropertyConfig();
        /** @type {?} */
        let activityProperty = new ElementPropertyConfig();
        /** @type {?} */
        let propertyData = {};
        basicProperty.categoryId = 'basicProperty';
        basicProperty.categoryName = mxResources.get('basicInformation');
        basicProperty.tabId = 'basic';
        basicProperty.tabName = mxResources.get('basicAttributes');
        basicProperty.properties = [
            { propertyID: AutoActivityPropertyKeys.Name, propertyName: mxResources.get('name'), propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: AutoActivityPropertyKeys.NameLanguage, propertyName: mxResources.get('nameLanguage'), propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: AutoActivityPropertyKeys.Id, propertyName: mxResources.get('id'), propertyType: 'string', readonly: true }
        ];
        activityProperty.categoryId = 'activityProperty';
        activityProperty.categoryName = mxResources.get('activityProperty');
        activityProperty.tabId = 'basic';
        activityProperty.tabName = mxResources.get('basicAttributes');
        activityProperty.properties = [
            { propertyID: AutoActivityPropertyKeys.Tools, propertyName: mxResources.get('tools'), propertyType: 'modal' },
            { propertyID: AutoActivityPropertyKeys.variableSettings, propertyName: mxResources.get('variableSettings'), propertyType: 'modal' },
        ];
        propertyData[AutoActivityPropertyKeys.Id] = act.Id;
        propertyData[AutoActivityPropertyKeys.ClrTypeID] = act.ClrTypeID;
        propertyData[AutoActivityPropertyKeys.Name] = act.Name;
        propertyData[AutoActivityPropertyKeys.NameLanguage] = act.NameLanguage || {
            "zh-CHS": act.Name,
        };
        propertyData[AutoActivityPropertyKeys.Tools] = PropertyHelper.getBizComponentList((/** @type {?} */ (act.tools)));
        propertyData[AutoActivityPropertyKeys.variableSettings] = PropertyHelper.getVariableSettings(act.Model, act.variableSettings);
        return {
            propertyConfig: [basicProperty, activityProperty],
            propertyData: propertyData
        };
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    updateProps(obj) {
        /** @type {?} */
        const autoActivity = this.flowElement;
        /** @type {?} */
        const propertyId = obj.propertyID;
        switch (propertyId) {
            case AutoActivityPropertyKeys.Tools:
                this.updateAutoActivityTools(autoActivity, obj);
                break;
            case AutoActivityPropertyKeys.variableSettings:
                this.updateVariableSettings(autoActivity, obj);
                break;
            default:
                super.updateProps(obj);
                break;
        }
    }
    /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    updateAutoActivityTools(autoActivity, obj) {
        /** @type {?} */
        let tools = (/** @type {?} */ (obj.propertyValue));
        autoActivity.tools = new Array();
        if (tools && tools.length > 0) {
            for (const tool of tools) {
                /** @type {?} */
                let component = new Component(autoActivity.Model);
                component.Id = tool.id;
                component.Name = tool.name;
                // component.Time = tool.executionTime;
                // TODO 写死了构件类型
                component.ComponentType = 'WebServiceComponent';
                component.MetadataId = tool.metadataId;
                component.MethodCode = tool.methodCode;
                component.isForCompensation = tool.isForCompensation;
                component.ActualParameters = [];
                if (tool.actualParameters && ((/** @type {?} */ (tool.actualParameters))).length > 0) {
                    for (let a of ((/** @type {?} */ (tool.actualParameters)))) {
                        /** @type {?} */
                        let parameter = new ActualParameter(autoActivity.Model, a.code, a.value);
                        component.ActualParameters.push(parameter);
                    }
                }
                autoActivity.tools.push(component);
            }
        }
    }
    /**
     * @param {?} autoActivity
     * @param {?} obj
     * @return {?}
     */
    updateVariableSettings(autoActivity, obj) {
        /** @type {?} */
        const bpmnModel = autoActivity.Model;
        /** @type {?} */
        const extendElements = bpmnModel.DefaultProcess.GetExtensionElements();
        if (autoActivity.variableSettings && autoActivity.variableSettings.length > 0) {
            for (const v of autoActivity.variableSettings) {
                if (v.tag === 'component') {
                    /** @type {?} */
                    const i = extendElements.findIndex((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => (e instanceof Component && e.Id === v.value)));
                    extendElements.splice(i, 1);
                }
            }
        }
        autoActivity.variableSettings = new Array();
        /** @type {?} */
        const variables = (/** @type {?} */ (obj.propertyValue));
        if (variables && variables.length > 0) {
            for (const v of variables) {
                /** @type {?} */
                const variableSetting = new VariableSetting(bpmnModel);
                variableSetting.variableCode = v.variableCode;
                variableSetting.variableName = v.variableName;
                variableSetting.tag = v.tag;
                variableSetting.executionTime = v.executionTime;
                variableSetting.value = v.value;
                variableSetting.valueText = v.valueText;
                autoActivity.variableSettings.push(variableSetting);
                if (variableSetting.tag === 'component') {
                    /** @type {?} */
                    const c = v.component;
                    if (c) {
                        /** @type {?} */
                        let cpt = new Component(bpmnModel);
                        cpt.MetadataId = c.MetadataId;
                        cpt.MethodCode = c.MethodCode;
                        cpt.Id = c.Id;
                        cpt.Name = c.Name;
                        cpt.ActualParameters = new Array();
                        if (c.ActualParameters && c.ActualParameters.length > 0) {
                            for (let a of c.ActualParameters) {
                                /** @type {?} */
                                let parameter = new ActualParameter(bpmnModel, a.Name, a.Value);
                                parameter.Tag = a.Tag;
                                cpt.ActualParameters.push(parameter);
                            }
                        }
                        extendElements.push(cpt);
                    }
                }
            }
        }
    }
}
AutoActivityCell.CLR_TYPE_ID = AutoActivity.Clr_Type_ID;
if (false) {
    /** @type {?} */
    AutoActivityCell.CLR_TYPE_ID;
    /** @type {?} */
    AutoActivityCell.prototype.clrTypeId;
    /** @type {?} */
    AutoActivityCell.prototype.name;
    /** @type {?} */
    AutoActivityCell.prototype.nameLanguage;
    /** @type {?} */
    AutoActivityCell.prototype.flowElement;
    /** @type {?} */
    AutoActivityCell.prototype.imgUrls;
}
//# sourceMappingURL=data:application/json;base64,